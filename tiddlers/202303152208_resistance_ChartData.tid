created: 20230315220824000
creator: Drevarr
modified: 20230705163522251
modifier: drevarr
tags: ChartData
title: 202303152208_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Ark Darkness", "Raziel Umbra", "Sp\u00edcy Cheese", "Primal Clone", "Black Raspberry Pie", "Ryvalia Fazebringer", "Eibh\u00ebar", "Demon Sekhmet", "Cerys Fireblade", "Smol Daddy Tika", "Johosh The Great", "Whose Guardian", "Newtype Khan", "Xanvias Tseli", "Sygaldry Verdandi", "Koralia Danai", "Zaylen Harker", "Blanco Padre Guard", "Bella Sassy", "Ravioli Fetabringer", "Arcanophage Farra"];
const professions = ["Firebrand", "Chronomancer", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Berserker", "Berserker", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 133.0517, 0.0, 27.0419, 36.1189, 0.0, 28.4702, 0.0, 18.9557, 57.3293, 0.0, 93.312], [20.2419, 32.634, 0.0, 0.0, 18.4378, 6.5725, 6.5424, 58.9269, 5.4189, 29.2248, 62.1565, 7.4448, 31.484, 6.6176, 10.2292, 0.0, 13.7088, 18.3254, 25.2014, 0.0, 19.8866, 33.8256], [0.0, 51.0541, 38.0701, 0.0, 0.0, 0.0, 52.7862, 0.0, 56.8944, 55.0735, 0.0, 88.8801, 29.8093, 0.0, 0.0, 0.0, 0.0, 14.4955, 22.3776, 0.0, 8.5559, 17.1072], [23.2583, 26.1072, 34.2157, 6.4134, 19.5782, 4.8579, 10.8739, 58.3365, 6.5732, 23.3928, 64.0357, 0.0, 26.0464, 6.5738, 10.5882, 11.8952, 0.0, 13.0234, 0.0, 31.7544, 22.5907, 0.0, 32.759, 25.4275], [24.6872, 34.2294, 34.8919, 0.0, 24.6154, 7.7306, 6.9259, 68.0198, 7.132, 39.6576, 64.7584, 7.0387, 41.9563, 5.5565, 14.6941, 2.2991, 0.0, 14.0515, 28.0699, 33.1402, 0.0, 36.4588, 31.7261], [27.7433, 34.1569, 43.8854, 7.8246, 23.7125, 7.4298, 0.0, 64.4771, 7.6181, 37.26, 63.602, 0.0, 32.021, 5.836, 7.3997, 19.3922, 18.6293, 0.0, 26.4216, 29.6237, 0.0, 38.9254, 42.768], [28.299, 26.4698, 35.6357, 6.8796, 25.5658, 6.8582, 6.8357, 53.1405, 5.2731, 45.36, 74.7323, 0.0, 42.7618, 8.9664, 8.8736, 15.8936, 5.4096, 16.4506, 0.0, 26.6155, 32.7139, 3.145, 33.9923, 39.7354], [58.016, 80.7383, 0.0, 64.9598, 0.0, 0.0, 192.0143, 0.0, 66.5496, 107.8343, 0.0, 52.2271, 0.0, 0.0, 14.9328, 6.4315, 0.0, 72.6206, 0.0, 0.0, 72.7834], [24.7269, 108.5624, 101.43, 21.7854, 31.6483, 3.9555, 35.2613, 151.5095, 0.0, 56.052, 134.7206, 0.0, 84.5838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 54.7339, 30.3696, 24.0442, 53.1081, 88.5686], [66.2823, 72.665, 72.8944, 0.0, 59.7802, 56.6106, 11.7538, 182.9214, 0.0, 54.3024, 117.0855, 8.5615, 40.3451, 19.3973, 19.2662, 0.0, 0.0, 8.5435, 0.0, 42.4685, 57.3293, 66.1346, 87.3245], [51.7954, 66.3558, 91.287, 51.7493, 7.8058, 0.0, 147.6125, 7.9704, 89.424, 146.5737, 6.0404, 86.5977, 1.9118, 30.4861, 36.2188, 0.0, 37.2586, 0.0, 79.895, 62.3909, 23.8177, 96.3446], [77.8718, 83.7606, 89.0555, 7.7112, 68.3338, 7.6854, 7.6478, 136.0397, 7.8853, 140.5512, 73.865, 11.2349, 140.2346, 18.0029, 15.2606, 5.8788, 15.4469, 0.0, 29.4758, 52.1078, 0.0, 42.7023, 98.9107], [68.0287, 98.1196, 90.746, 0.0, 41.9602, 0.0, 0.0, 112.7759, 0.0, 73.6776, 217.6923, 19.8302, 81.9657, 0.0, 40.2922, 20.1253, 0.0, 55.08, 0.0, 71.0717, 63.0302, 20.5033, 99.5328], [68.8225, 131.6963, 153.6326, 0.0, 76.8398, 51.0458, 0.0, 254.0116, 46.656, 134.0712, 200.6354, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.1421, 0.0, 0.0, 0.0], [55.3279, 111.6083, 129.4247, 7.7238, 45.7142, 7.6854, 0.0, 216.1047, 7.8732, 137.1168, 97.7158, 7.2756, 109.7575, 7.2794, 12.2951, 0.0, 26.7077, 93.421, 80.9323, 0.0, 23.2011, 69.9062], [54.8913, 123.8642, 150.1164, 0.0, 82.7323, 6.5274, 0.0, 161.6652, 0.0, 159.5376, 190.3723, 7.394, 166.9523, 11.1353, 5.4896, 7.2971, 16.524, 23.7552, 51.4685, 0.0, 15.8785, 57.3869], [100.9317, 76.3636, 111.3025, 72.563, 6.9786, 16.7959, 192.841, 7.1563, 163.296, 181.8439, 6.8188, 108.0793, 0.0, 32.4413, 25.6897, 0.0, 17.087, 85.6642, 61.645, 3.4003, 34.7631, 96.3446], [89.3025, 172.0174, 127.1932, 7.686, 90.0504, 7.8058, 9.6782, 183.2757, 7.7152, 166.4064, 138.6234, 29.7792, 73.7087, 28.2752, 42.2498, 44.3822, 0.0, 52.2614, 82.0512, 12.0154, 55.8059, 81.648], [68.9018, 146.2003, 114.0749, 7.8876, 92.759, 7.881, 7.8283, 275.2678, 7.7274, 166.3416, 259.1782, 22.2329, 153.0564, 0.0, 41.4051, 14.6608, 0.0, 79.8538, 0.0, 80.6707, 102.8304, 12.0019, 22.199, 129.7814], [124.706, 150.624, 164.0461, 0.0, 139.9939, 4.8579, 16.0853, 244.4463, 7.8853, 237.4272, 256.5762, 0.0, 179.5056, 7.39, 7.2944, 49.9467, 0.0, 61.2734, 5.8395, 81.4949, 112.9536, 16.5715, 50.4874, 185.9242], [150.2663, 302.771, 178.5844, 112.3373, 0.0, 0.0, 348.3655, 0.0, 269.1792, 553.1929, 0.0, 126.2044, 0.0, 71.1542, 84.3662, 0.0, 44.627, 255.7805, 134.532, 0.0, 322.4707]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

