created: 20230515002743000
creator: Drevarr
modified: 20230705163529911
modifier: drevarr
tags: ChartData
title: 202305150027_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Drogo Discourteous", "Aronorf Xideliesi", "Miphest\u00f6", "Lucas Ryn", "Ikong Winnie Ilocos", "Yuuka Chou", "Osh Kosh Johosh", "Tegan Parker", "Tika Mi", "Tribal S", "Artakama Nahid"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Tempest", "Chronomancer", "Tempest", "Tempest", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.5633, 0.2569, 0.144, 0.0792, 0.0383, 0.2267], [0.3248, 0.3275, 0.1835, 0.1235, 0.1188, 0.0128, 0.28, 0.1212, 0.1333, 0.2471, 0.3082, 0.1982, 0.2619, 0.1589, 0.02], [0.2308, 0.273, 0.4014, 0.1481, 0.3465, 0.0553, 0.1733, 0.0588, 0.0314, 0.3548, 0.2024, 0.215, 0.0], [0.2821, 0.3251, 0.133, 0.0947, 0.2921, 0.0851, 0.3467, 0.6667, 0.2167, 0.1294, 0.3648, 0.2903, 0.369, 0.1308, 0.26], [0.397, 0.4197, 0.1399, 0.302, 0.1362, 0.3333, 0.6364, 0.25, 0.0706, 0.4214, 0.4286, 0.25, 0.3084, 0.0], [0.8833, 0.3882, 1.3396, 1.0737, 1.6071, 0.757, 0.76], [0.2821, 0.4268, 0.4472, 0.1111, 0.4208, 0.0851, 0.1333, 0.0, 0.3667, 0.3647, 0.6352, 0.5069, 0.9286, 0.215, 0.3], [0.6129, 1.1193, 0.5144, 0.9455, 0.2894, 1.28, 1.0833, 0.8706, 1.1132, 1.6728, 0.0, 0.757, 0.0], [1.0342, 1.7568, 1.2385, 0.535, 0.9901, 0.3191, 0.76, 0.4242, 0.7647, 1.6792, 1.2535, 2.131, 0.9065, 0.22], [1.8933, 1.5367, 0.5638, 1.7525, 0.4936, 0.88, 2.6061, 0.9667, 0.5412, 1.7799, 2.0968, 2.7143, 0.757, 0.58], [1.6154, 1.8362, 1.578, 0.6091, 1.2178, 0.417, 1.3467, 0.2424, 1.6833, 0.9647, 1.6981, 1.6267, 2.4643, 1.1495, 0.86]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

