created: 20230227222028000
creator: Drevarr
modified: 20230705163520436
modifier: drevarr
tags: ChartData
title: 202302272220_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Grumyaar Lordsbane", "Ark Darkness", "Husky Guard", "Gavann", "Blanco Padre Guard", "Kahless The Drunk", "Sygaldry Verdandi", "Zaylen Harker", "Ravioli Fetabringer", "Bella Sassy", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1360.0008, 63.9725], [131.8105, 121.9061, 19.8655, 36.841, 16.158, 0.0, 38.5875, 0.0, 32.0029, 22.5907, 963.8731, 62.8987, 39.5312, 87.1821, 0.0], [30.0792, 94.258, 63.8259, 0.0, 40.9836, 81.1088, 29.376, 12.4623, 63.6059, 19.3305, 0.0, 33.0378, 6.2515, 602.3158, 24.871, 50.1615, 0.0, 30.9918, 486.324, 25.0099], [39.7915, 427.1694, 145.3712, 0.0, 26.1974, 237.185, 127.7338, 0.0, 24.7274, 36.9264, 161.6838, 48.1062, 39.9245, 1317.461, 174.0969], [88.0632, 332.4395, 196.4199, 19.6022, 123.5535, 105.7091, 99.7862, 13.0364, 22.3254, 12.5979, 23.9532, 18.2202, 39.9245, 770.9307, 38.6834, 0.0, 40.1292, 0.0, 153.1824, 1246.2408], [127.1299, 359.1007, 307.5578, 130.0225, 137.2743, 137.3875, 30.6535, 29.01, 54.9927, 47.9063, 98.7683, 162.9658, 1335.9164, 128.3326, 5.9875, 352.0489, 0.0, 121.6379, 2227.9896, 242.9856], [40.0814, 341.6411, 268.985, 173.1758, 257.6681, 42.2554, 26.6828, 23.7591, 26.6658, 168.0279, 49.9251, 274.0723, 1643.7854, 136.0692, 0.0, 148.4357, 172.3302, 2478.8304, 0.0], [157.7869, 137.2147, 108.9343, 83.5661, 43.1636, 38.022, 10.9662, 204.6691, 45.2368, 164.2445, 1882.8662, 38.6396, 290.2302, 0.0, 156.2224, 2928.1824, 206.8934], [152.208, 415.3724, 370.7208, 183.7431, 253.6881, 165.0586, 15.1533, 47.7603, 80.556, 167.7314, 63.7862, 87.6634, 1949.9766, 54.113, 0.0, 194.4994, 0.0, 166.3292, 3092.5656, 40.0358], [88.1357, 469.4026, 184.3659, 158.7512, 122.6926, 107.0438, 22.8914, 35.8994, 55.4778, 47.9063, 46.2403, 155.5776, 2087.1334, 194.8155, 63.9122, 321.6694, 77.9805, 134.5873, 3270.0312, 103.8586], [282.0197, 451.3532, 246.6851, 162.6085, 122.4867, 81.3082, 8.085, 56.642, 68.9871, 87.8085, 101.3085, 268.8154, 2431.9131, 124.1364, 0.0, 447.2145, 0.0, 182.4371, 3821.7672, 215.6294]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

