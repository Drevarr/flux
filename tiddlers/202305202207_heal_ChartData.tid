created: 20230520220730000
creator: Drevarr
modified: 20230705163530985
modifier: drevarr
tags: ChartData
title: 202305202207_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Tika Mi", "Artakama Nahid", "Tribal S", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[613.9169, 231.5521, 173.9483, 44.4407, 6.225, 405.4516, 13.7255, 528.2935, 189.2258, 138.4151, 704.4086, 368.902, 1094.8264, 161.1056, 109.5, 1453.8605, 124.8824, 229.5325, 731.8357, 253.7794, 1143.0034, 77.2371, 238.1818, 661.2531, 186.1154, 193.7447, 95.4286, 938.1529, 143.1667, 100.102, 334.9111, 489.5381], [426.9169, 390.0491, 176.2069, 200.322, 0.0, 505.9355, 4.7059, 330.8043, 432.4194, 290.4811, 790.6308, 50.3333, 1112.8802, 114.6408, 171.2727, 1338.2558, 26.1569, 714.2208, 758.4611, 694.6176, 1120.366, 15.2062, 181.25, 1104.6265, 352.1596, 331.2321, 788.6647, 536.8958, 126.5135, 148.0816, 237.6778, 561.1523], [718.5473, 340.5153, 42.2241, 279.0339, 0.0, 400.4839, 336.7609, 834.1935, 343.7264, 1083.3154, 5.451, 1191.0521, 324.1761, 175.7727, 1295.6822, 156.5882, 526.974, 847.732, 782.4706, 1257.9158, 347.7955, 849.4167, 208.7692, 318.2979, 336.4643, 756.9824, 776.25, 114.4054, 49.8367, 426.1778, 367.1015], [773.6246, 248.4663, 307.8448, 24.3729, 67.0, 481.3226, 406.1087, 231.2581, 198.783, 1068.9462, 54.3725, 1427.0156, 289.4789, 204.75, 1486.7907, 85.098, 612.6753, 1369.3285, 892.7206, 1699.5086, 25.8636, 1200.5154, 178.3846, 487.4255, 262.5179, 687.7706, 119.7708, 27.7297, 31.449, 33.9333, 465.4619], [917.0831, 416.9632, 480.6207, 274.8814, 135.05, 239.9032, 86.8627, 542.8913, 180.7419, 372.5, 1788.4194, 5.0784, 1701.8524, 459.0423, 299.9318, 1736.6512, 336.2941, 246.013, 1333.196, 1225.4559, 1729.0601, 127.866, 475.5227, 1440.4846, 153.6538, 1017.6915, 388.5536, 1314.0059, 1318.4375, 188.0811, 81.4286, 403.7667, 815.7614], [1413.8625, 508.3436, 402.0, 425.8475, 66.275, 710.7742, 0.0, 916.7065, 274.9032, 578.283, 1688.5018, 36.7451, 1932.5712, 607.4437, 344.4318, 2430.0543, 99.7059, 548.5455, 1505.6369, 794.9559, 2599.701, 88.7113, 329.6364, 1711.8519, 1060.7128, 711.1964, 1647.3882, 623.0625, 35.1486, 111.7347, 317.9, 790.7208]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

