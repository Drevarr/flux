created: 20230510220110000
creator: Drevarr
modified: 20230705163529572
modifier: drevarr
tags: ChartData
title: 202305102201_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Lucas Ryn", "Tegan Parker", "Mac Aaroni", "Miphest\u00f6", "Etchery Howls", "Johoshua", "Artakama Nahid", "Zaidy Sagemist", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Tempest", "Vindicator", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[61.7857, 342.5945, 183.5674, 55.8552, 349.8708, 20.6006, 18.6451, 0.0, 22.3322, 37.9358, 61.8782, 264.2707, 66.768, 15.7878, 175.5187], [0.0, 243.8715, 236.8612, 47.6544, 623.8876, 12.7181, 27.3499, 75.9931, 36.6838, 25.531, 441.0745, 37.1846, 18.9454, 180.2036], [0.0, 6.9363, 564.079, 201.1943, 45.0432, 625.2341, 0.0, 31.3373, 0.0, 25.6133, 75.0827, 105.0286, 425.2847, 22.4443, 0.0, 456.2816], [6.1189, 780.976, 461.4662, 164.9136, 638.0261, 0.0, 30.42, 105.2579, 62.1516, 51.9028, 641.3551, 27.2208, 216.3448], [22.4434, 544.261, 442.8754, 241.9032, 444.1272, 163.944, 4.5864, 116.3182, 79.5589, 66.6939, 1057.2906, 75.2424], [40.2199, 144.9988, 967.2285, 801.0591, 210.7728, 1531.6665, 51.2698, 299.5762, 15.3546, 2.5931, 185.2715, 206.6555, 812.1338, 144.4757, 164.5812, 578.5926], [71.604, 199.6273, 1236.056, 933.8115, 398.82, 1350.5596, 378.3629, 116.9813, 40.2268, 197.9208, 99.1785, 254.7363, 1650.0299, 410.0069, 149.7636, 1448.8239], [0.0, 85.179, 1531.124, 1343.0856, 345.4944, 1999.3578, 41.9515, 255.0215, 206.7604, 81.829, 1447.8794, 446.7806, 80.8441, 1183.9563], [19.0195, 68.1697, 2200.3485, 1623.8763, 362.4672, 3310.4194, 165.0038, 219.6979, 22.1789, 43.9236, 142.6537, 310.2317, 1667.0662, 236.975, 0.0, 803.8053], [204.151, 266.7368, 2477.984, 2380.3173, 396.0864, 3132.6788, 443.4768, 334.0022, 37.0185, 424.683, 250.4414, 444.7661, 2400.8746, 506.7178, 449.9082, 1494.0003]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

