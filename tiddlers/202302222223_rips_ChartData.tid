created: 20230222222328000
creator: Drevarr
modified: 20230705163520023
modifier: drevarr
tags: ChartData
title: 202302222223_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Forever Broke", "Tribal S", "Dark Sidiuz", "Panther B Me", "Arcanophage Farra", "Newtype Khan", "Smol Gluvs", "Rina Of Theros", "Primal Clone", "Black Raspberry Pie", "Eibh\u00ebar", "Elonith Tenebris", "\u00c1rk\u00e1ntor"];
const professions = ["Scourge", "Druid", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Chronomancer", "Chronomancer", "Chronomancer", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0638], [0.0459, 0.0808, 0.0729, 0.03, 0.0348, 0.046, 0.0677, 0.0247, 0.0497, 0.0291, 0.0245, 0.054, 0.0844], [0.0, 0.0834, 0.0, 0.2612, 0.1189, 0.137, 0.036, 0.2427], [0.0229, 0.0269, 0.0438, 0.06, 0.2089, 0.0263, 0.0169, 0.3829, 0.7213, 0.1929, 0.1272, 0.069, 0.4643], [0.0, 0.0, 0.0658, 0.105, 0.0928, 0.0, 0.1609, 0.5312, 1.0696, 0.222, 0.1664, 0.033, 0.5593], [0.0229, 0.0539, 0.0776, 0.105, 0.116, 0.0, 0.0169, 0.21, 0.6716, 0.2775, 0.1762, 0.066, 0.517], [0.0459, 0.0, 0.0933, 0.3017, 0.0131, 0.0593, 0.3459, 0.796, 0.4254, 0.1908, 0.132, 0.7386], [0.1147, 0.1077, 0.1329, 0.375, 0.1857, 0.0066, 0.127, 0.5929, 0.883, 0.3145, 0.274, 0.111, 0.5382], [0.0229, 0.1346, 0.1665, 0.225, 0.0928, 0.0657, 0.144, 0.1359, 0.8706, 0.2854, 0.2936, 0.12, 0.5804], [0.1835, 0.2693, 0.2592, 0.03, 0.058, 0.0854, 0.0593, 0.5065, 0.7089, 0.4307, 0.3034, 0.1591, 0.5276], [0.0688, 0.1077, 0.2466, 0.15, 0.2321, 0.0197, 0.1185, 0.4076, 1.082, 0.4307, 0.3572, 0.4051, 0.7492], [0.0688, 0.4039, 0.3005, 0.45, 0.1392, 0.0986, 0.2456, 0.7041, 0.6218, 0.4624, 0.3914, 0.2131, 0.6648], [0.0, 0.2154, 0.2983, 0.12, 0.116, 0.046, 0.0762, 0.5682, 1.4178, 0.4915, 0.5382, 0.2341, 0.9497]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

