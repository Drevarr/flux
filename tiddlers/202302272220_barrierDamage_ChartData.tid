created: 20230227222028000
creator: Drevarr
modified: 20230705163520339
modifier: drevarr
tags: ChartData
title: 202302272220_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Kahless The Drunk", "Zaylen Harker", "Ark Darkness", "Ryvalia Fazebringer", "Eibh\u00ebar", "Cat Wigglebooty", "Bella Sassy", "Rozaalyna", "Tribal S", "What Charr U Saying", "Sp\u00edcy Cheese", "Rina Of Theros", "Skye Nightroad", "Dark Sidiuz", "Arcanophage Farra", "Drevarr Moonwillow", "Smol Gluvs", "Nelliel T", "\u00c1rk\u00e1ntor", "Be\u00eb", "Tootsie Pop Bringer", "My Birthday Girl"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Scrapper", "Firebrand", "Scourge", "Druid", "Berserker", "Berserker", "Scourge", "Scrapper", "Scourge", "Spellbreaker", "Scrapper", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 4694, 4508, 2520, 4685, 0, 0, 1304, 0, 0, 3437, 0, 8361, 0, 0, 417, 0, 1232, 20485, 104], [0, 5168, 1839, 0, 2465, 1248, 0, 2425, 0, 0, 0, 0, 19167, 0, 0, 1188, 0, 1188, 20666, 0], [0, 0, 269, 842, 2467, 2465, 0, 269, 0, 0, 17852, 763, 1530, 0, 0, 30085, 0], [2090, 4561, 1420, 7135, 0, 0, 0, 0, 3431, 269, 37714, 0, 0, 0, 0], [0, 1260, 5911, 1248, 1105, 0, 1304, 1304, 0, 0, 271, 269, 10369, 0, 0, 0, 0, 3877, 35202, 0], [0, 3880, 2501, 2452, 0, 416, 0, 2465, 0, 0, 0, 0, 9615, 446, 0, 2696, 351, 0, 39075, 0], [4, 4087, 7291, 972, 2869, 343, 2465, 544, 1730, 427, 741, 228, 24154, 0, 0, 434, 0, 1735, 19081], [269, 5400, 6469, 1304, 608, 0, 0, 0, 0, 0, 269, 0, 14954, 0, 0, 0, 0, 368, 39344, 118], [3029, 9511, 14292, 7098, 4776, 2698, 986, 3565, 269, 20631, 2688, 0], [0, 4671, 0, 0, 0, 957, 0, 2465, 2465, 0, 0, 0, 19931, 570, 261, 308, 1213, 44771, 0], [39, 42129, 3154, 0, 3181, 0, 4203, 28325, 0], [0, 3384, 2447, 0, 1618, 1248, 0, 2457, 0, 0, 0, 0, 26886, 0, 0, 951, 0, 0, 45384, 20], [0, 5389, 7504, 0, 4700, 4778, 2857, 269, 3408, 2465, 0, 0, 0, 15692, 3407, 0, 2766, 0, 654, 35093, 1024], [4585, 15275, 21150, 15524, 10653, 8134, 55, 5752, 4617, 5852, 7484], [4648, 5976, 12476, 0, 2840, 7236, 5939, 6962, 3474, 0, 52594, 468, 0], [222, 7702, 3844, 306, 2674, 5885, 0, 1304, 0, 367, 3429, 0, 35438, 588, 0, 0, 0, 1426, 51117, 0], [3180, 9048, 10348, 3387, 144, 5889, 52, 582, 691, 214, 379, 347, 38427, 1117, 0, 1291, 0, 348, 51703, 184], [768, 3448, 0, 5265, 388, 48814, 427, 104, 7193, 0, 3631, 63746, 1021], [1061, 0, 10966, 0, 7177, 1584, 1248, 2465, 2465, 1948, 38347, 0, 3204, 0, 4346, 70115, 0], [55620, 77, 7652, 0, 4593, 98346, 0], [1734, 26504, 19762, 0, 8568, 2985, 4727, 2011, 38220, 3022, 0, 5419, 0, 4473, 83977, 1062], [111, 15344, 24722, 0, 63, 15179, 3560, 0, 10560, 1022, 1418, 6461, 1430, 63188, 10044, 752, 4724, 700, 7582, 144967, 2466], [3135, 59565, 6054, 0, 11052, 13908, 10596, 8192, 4110, 3408, 1824, 2533, 5176, 150368, 2649, 1780, 14004, 826, 4981, 205201, 3954]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

