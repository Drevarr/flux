created: 20230626012458000
creator: Drevarr
modified: 20230705163538237
modifier: drevarr
tags: ChartData
title: 202306260124_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Eibh\u00ebar", "Elon The Archmagus", "Elon The Mender", "Solus Sanctus", "Tribal S", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Chronomancer", "Tempest", "Druid", "Firebrand", "Druid", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.4234, 326.2407, 125.4, 61.2863, 441.6792, 133.0684, 460.619, 475.9429, 218.5455, 0.0, 260.2708, 0.0, 451.8409, 192.407, 0.0], [374.8636, 0.0, 1023.3095, 1036.1042, 1074.3548, 3346.5682, 884.3256, 998.0448], [170.9459, 1581.2778, 271.3667, 909.6774, 1644.7358, 107.7719, 1457.6429, 1587.9429], [55.2703, 1117.5556, 348.8222, 470.375, 897.0755, 227.924, 1471.6905, 1313.5429, 465.5303, 0.0, 1110.8095, 585.8333, 655.0806, 1360.9545, 732.8488, 678.7463], [635.6, 1033.3105, 2202.4151, 546.5019, 1316.0476, 1301.3429, 1069.6667, 44.0, 1431.1429, 1319.6458, 821.6774, 2997.5909, 327.5698, 725.1194], [13.9099, 2405.0, 1060.4778, 531.2298, 2592.6792, 351.7224, 1543.6905, 3732.4, 1551.7121, 15.3818, 245.1905, 959.0833, 1650.1774, 609.9318, 1243.5349, 1049.4179], [68.973, 2737.8519, 1501.7667, 1058.2944, 2404.1887, 564.0989, 2580.4524, 86.2857, 1338.9545, 2242.0, 2404.3125, 1590.6774, 4277.2955, 958.1395, 1540.2687], [129.9189, 1566.1296, 2022.7667, 1102.6371, 2774.8113, 704.365, 2611.619, 2505.5714, 1539.3939, 17.8727, 2352.6667, 1693.8542, 1457.4355, 1073.5455, 2361.0581, 2260.7612], [168.4414, 1785.1296, 846.9556, 1468.1331, 2277.9057, 590.1445, 1989.6905, 1722.8857, 1798.2879, 911.5238, 1507.0417, 1810.6774, 4911.0682, 2459.1977, 2699.8358]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

