created: 20230227222028000
creator: Drevarr
modified: 20230705163520335
modifier: drevarr
tags: ChartData
title: 202302272220_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Zadie Miststep", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Tegan Parker", "Primal Clone", "High Sorcer Baradun", "Eibh\u00ebar", "Black Raspberry Pie", "Venomina The Siren", "Mac Aaroni"];
const professions = ["Willbender", "Tempest", "Chronomancer", "Scrapper", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 205.5037, 131.8105, 0.0, 29.3314, 15.4395, 63.0144, 53.222, 41.7647, 24.2256, 0.0, 49.3293], [219.252, 414.0747, 100.7112, 52.5554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 66.4171, 72.6856, 37.6487, 41.8239, 0.0, 0.0, 0.0, 0.0, 35.8112, 0.0, 35.7331, 90.599, 35.5799, 35.8117, 35.9609, 25.6968, 0.0, 317.9592, 8.0122], [7.248, 73.0234, 21.2753, 4.9421, 10.6361, 21.865, 2.6671, 2.8116, 20.9034, 0.0, 7.2128, 8.0986, 220.6254, 13.4627, 0.0, 12.8583, 0.0, 73.2749, 477.792, 2.7706], [0.0, 3.2292, 49.8644, 4.4247, 129.1929, 11.6659, 44.329, 810.3581, 0.0, 0.0, 114.3824, 0.0, 43.2306, 1076.1696, 88.1837], [63.8549, 234.8783, 69.4913, 46.8097, 68.0367, 39.7901, 0.0, 2.5509, 12.4803, 32.7281, 40.9718, 169.7856, 453.8341, 66.8326, 0.0, 90.9972, 0.0, 37.7824, 1581.8328, 102.0115], [43.2706, 0.0, 68.9489, 0.0, 103.2388, 46.7712, 7.6714, 0.0, 111.228, 13.281, 42.9792, 670.2651, 81.6066, 41.7766, 177.6141, 116.9321, 160.96, 1729.152, 84.5395], [22.2514, 383.5205, 97.095, 70.9981, 48.5143, 24.9062, 5.7408, 50.4788, 36.5001, 0.0, 31.705, 58.0397, 1156.8155, 31.2527, 13.7668, 132.1861, 0.0, 56.8117, 1664.8776, 32.2982], [75.8866, 80.7552, 30.4023, 11.8982, 20.8152, 204.4912, 22.6576, 219.0163, 1211.7622, 68.6684, 14.243, 321.0336, 44.0212, 193.6494, 2035.7352, 0.0], [32.1086, 249.1526, 128.134, 73.208, 129.3144, 70.5485, 20.7865, 43.4405, 34.2951, 86.5634, 36.9421, 165.9494, 1049.0194, 43.1418, 29.3252, 291.29, 9.3073, 202.2166, 2003.8824, 123.1277], [260.6381, 414.7825, 59.6673, 0.0, 15.3889, 87.0102, 84.3264, 0.0, 20.4448, 35.4711, 98.7771, 37.0048, 194.7917, 1034.7585, 165.9669, 40.7786, 165.0384, 72.6012, 127.6783, 2071.0008, 159.2448]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

