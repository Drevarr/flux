created: 20230531221142000
creator: Drevarr
modified: 20230705163532642
modifier: drevarr
tags: ChartData
title: 202305312211_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Miphest\u00f6", "Tegan Parker", "Zefirokai", "Grasszanine", "Newtype Khan", "Etchery Of Ascalon", "Drevarr Moonwillow", "Johosh Of The North", "Artakama Nahid"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Tempest", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[284.0955, 154.3142, 0.0, 778.12, 249.8059, 0.0, 28.0398, 89.688, 92.9425, 62.126, 0.0, 52.5234, 184.1095, 0.0, 0.0], [307.632, 135.9758, 0.0, 845.0383, 195.9569, 0.0, 55.8992, 53.724, 119.4975, 52.1601, 53.4954, 117.547, 232.0912, 0.0], [342.108, 190.5835, 0.0, 813.9135, 265.2233, 7.9947, 0.0, 85.5144, 87.5375, 87.4426, 0.0, 160.896, 176.427, 19.3459, 0.0], [277.1068, 599.0448, 677.505, 63.8942, 0.0, 764.9156, 727.4077, 137.1955, 175.2066], [672.945, 243.2894, 0.0, 1486.9873, 303.8784, 29.187, 16.7698, 162.06, 150.9875, 76.9141, 44.415, 189.4514, 202.0352, 61.0227, 0.0], [470.067, 141.6811, 40.4352, 1512.6653, 386.3278, 129.6918, 19.6098, 212.4096, 190.115, 109.3032, 89.2248, 197.3643, 179.7965, 69.7805, 0.0], [2134.197, 821.017, 170.8992, 3857.919, 1439.8474, 61.4196, 254.6569, 513.264, 625.2175], [1562.691, 912.0298, 49.68, 4310.7848, 978.6672, 79.9978, 179.5987, 543.2784, 383.05, 350.7347, 231.616, 770.9936, 586.6973, 55.5315, 180.0288], [3036.54, 1418.713, 244.296, 6957.1709, 48.0396, 172.4063, 362.308, 794.9376, 990.995, 739.404, 680.4378, 1037.7393, 1155.8733, 106.9798, 114.8219], [2472.6585, 1219.4357, 373.7232, 6299.6595, 2154.185, 226.8718, 421.2726, 765.5448, 1043.87, 605.3468, 575.6842, 1054.2532, 1408.0467, 236.0934, 516.8863]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

