created: 20230517220640000
creator: Drevarr
modified: 20230705163530408
modifier: drevarr
tags: ChartData
title: 202305172206_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Johosh The Great", "Sygaldry Verdandi", "Lucas Ryn", "Miphest\u00f6", "Cat Wigglebooty", "Jupiter Four", "Eibh\u00ebar", "Primal Clone", "Tootsie Pop Rocks", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Arriasa", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Scrapper", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 3.9845, 2.0, 5.9487, 0.0, 2.0149, 0.0, 0.0, 0.0, 5.0131, 0.0, 27.0284, 16.0641, 0.0, 2.0, 11.0051, 45.8583, 36.209, 12.9462, 0.0, 0.0, 0.0, 20.028, 0.0, 0.0, 0.0, 19.0296, 2.0, 0.0, 5.9857, 0.0, 18.9894, 0.0, 0.0, 0.0, 0.0], [0.0, 5.0185, 5.9767, 7.01, 0.0, 0.0, 8.9254, 15.8654, 1.0, 2.0, 1.0, 2.9733, 14.4255, 19.1538, 3.9444, 12.0375, 15.0102, 29.9167, 24.0615, 27.1935, 0.9804, 6.0175, 5.6111, 43.4112, 9.9868, 5.982, 15.9932, 19.1302, 0.0, 0.0, 19.9571, 0.0, 18.0053, 8.9793, 0.0], [0.0, 1.0, 0.9922, 5.005, 2.9744, 0.0, 6.9403, 17.0, 2.0, 1.0, 7.0196, 0.0, 24.5177, 15.4615, 0.0, 7.025, 20.0102, 17.9417, 59.2131, 13.9892, 0.0, 0.0, 0.0, 11.6389, 27.1776, 7.9868, 0.994, 14.0822, 17.0533, 2.0, 14.9762, 5.0263, 24.1746, 5.9845, 3.0104], [0.0, 0.0, 0.9922, 1.0, 0.0, 0.0, 5.9552, 3.9808, 0.0, 0.0, 7.0196, 3.9733, 22.2411, 28.9231, 0.0, 4.0125, 10.0051, 19.3833, 48.541, 38.4731, 0.9804, 3.0, 0.0, 6.9444, 34.6916, 8.9868, 10.9641, 22.0137, 18.0473, 0.0, 0.0, 18.0429, 0.0, 30.0265, 1.9948, 1.0, 0.0, 0.0], [0.0, 0.0, 4.9767, 7.01, 0.0, 0.0, 22.2388, 0.9808, 0.0, 0.0, 1.0, 1.2133, 31.9716, 35.3333, 0.0, 14.1, 26.0964, 31.2667, 54.0574, 10.957, 0.9804, 0.0, 0.0, 24.5, 33.1542, 0.0, 0.0, 41.1301, 43.1006, 5.0147, 24.9429, 0.0, 9.9793, 1.0], [0.9924, 0.0, 3.9845, 15.3383, 0.0, 0.0, 37.1045, 22.4808, 0.0, 6.0131, 9.0, 88.3121, 35.5769, 4.0125, 27.5584, 72.9, 25.2008, 97.3871, 0.0, 0.0, 0.0, 7.1667, 59.2196, 6.9868, 4.988, 49.1164, 43.3432, 7.0147, 0.0, 52.7238, 0.0, 27.0476, 0.0, 0.0, 0.0], [0.0, 0.0, 12.9535, 3.005, 0.0, 0.0, 10.0896, 0.0, 0.0, 0.0, 1.0, 9.9333, 69.4255, 31.1923, 15.5278, 20.825, 37.0609, 37.9083, 82.5205, 58.5484, 4.9608, 0.0, 0.0, 12.9167, 65.3785, 18.9737, 3.988, 32.1164, 27.0473, 0.0, 0.0, 36.2762, 0.0, 66.0053, 24.9585, 1.0, 0.0, 0.0], [3.9847, 0.0, 1.9922, 10.0398, 0.9744, 8.9545, 9.9254, 19.2308, 0.0, 0.0, 12.0327, 0.9867, 83.1631, 39.1026, 4.9444, 6.9, 23.0152, 78.0417, 56.2869, 55.9032, 0.0, 0.0, 6.0357, 9.8611, 42.1168, 12.9737, 9.9701, 23.1849, 46.6864, 0.0, 0.0, 54.0476, 0.0, 65.9894, 40.0311, 11.2045, 0.0, 2.0], [0.0, 0.0, 3.9845, 6.01, 10.9744, 0.0, 12.9552, 42.6731, 0.0, 7.0263, 0.0, 0.0, 47.7376, 28.3333, 0.0, 10.6375, 27.0152, 76.6667, 117.9508, 38.2366, 9.6863, 5.0175, 0.0, 21.25, 61.3692, 17.2763, 27.9341, 38.0685, 32.1479, 0.0, 25.0952, 0.0, 67.8889, 13.0155, 0.0, 1.9897, 0.0], [0.0, 0.0, 8.9845, 9.0348, 0.0, 0.0, 13.9403, 0.0, 0.0, 0.0, 2.0, 5.0267, 84.0, 42.5256, 11.8889, 40.1875, 14.0152, 92.525, 71.6352, 66.7957, 12.7895, 0.0, 21.6667, 88.1121, 5.9868, 22.0958, 88.6575, 74.4438, 1.0, 0.0, 70.1619, 0.0, 103.9101, 20.9689, 0.0, 0.9897, 7.0521], [8.9924, 1.0, 19.9302, 20.0348, 0.9744, 0.0, 16.194, 147.7885, 3.0, 0.0, 7.0196, 0.0, 137.9007, 48.7692, 5.9444, 52.1625, 42.2843, 105.1917, 126.3607, 58.0538, 0.0, 0.0, 50.2778, 112.1916, 17.9737, 11.9641, 46.0342, 88.2426, 11.25, 0.0, 68.6429, 0.0, 102.7196, 28.9482, 4.0114, 0.0, 2.0], [0.0, 4.0, 18.9612, 29.1791, 8.9231, 0.9545, 61.0299, 113.8269, 11.0364, 0.0, 21.5621, 8.9333, 144.3688, 90.0641, 18.9722, 54.85, 94.9289, 115.725, 150.1967, 99.3871, 14.0526, 74.9722, 162.729, 34.0395, 39.9701, 114.137, 99.9822, 4.0147, 0.0, 111.7857, 1.0789, 130.8571, 38.0674, 1.0, 0.0, 4.0104], [0.0, 11.0926, 27.0698, 60.6617, 32.0, 2.9545, 51.3284, 88.1538, 11.0182, 5.1053, 48.0588, 25.04, 162.7589, 81.7179, 31.7778, 67.2625, 118.8629, 161.8917, 210.9713, 66.7312, 30.1961, 18.1053, 3.0, 53.5278, 138.8505, 52.2237, 55.1737, 130.226, 115.3018, 17.0735, 0.0, 103.4, 5.0263, 35.0159, 34.3627, 16.0455, 10.6392, 14.2812], [1.9924, 13.0556, 15.9845, 54.3831, 42.3077, 0.0, 56.4478, 8.0385, 0.0, 6.0263, 75.5229, 29.8667, 65.2979, 84.4615, 15.0556, 97.7375, 142.6954, 180.6083, 143.5164, 145.0538, 7.3333, 28.5263, 6.5357, 43.1111, 158.5607, 23.9868, 55.5928, 102.2603, 125.8639, 23.6618, 0.9778, 144.0857, 0.0, 188.2646, 48.2642, 3.0, 0.9897, 7.0208], [0.0, 0.0, 38.4651, 65.0896, 14.6923, 14.1364, 72.4627, 98.0192, 6.5636, 0.0, 64.4379, 4.96, 187.9078, 126.7308, 19.2778, 85.725, 98.7563, 149.4917, 204.8525, 143.9247, 12.9216, 0.0, 0.0, 73.5556, 160.3925, 22.0, 21.9341, 95.1644, 107.3728, 7.0147, 0.0, 119.981, 0.0, 156.6561, 59.1865, 6.0114, 0.0, 1.0], [3.0687, 21.1667, 29.062, 56.7861, 43.0513, 3.9545, 79.5373, 90.4231, 8.0182, 9.0526, 41.9673, 19.24, 163.8865, 97.1538, 6.4167, 78.9, 118.6853, 160.6917, 208.6352, 31.043, 7.9608, 22.1053, 0.0, 70.5278, 199.257, 53.3158, 77.1377, 133.0822, 111.8817, 37.9412, 0.0, 135.0714, 2.0, 186.3069, 41.4145, 6.0227, 3.9897, 48.2292], [13.0076, 34.0556, 65.9302, 65.607, 33.1795, 2.9545, 80.1791, 78.5192, 9.3091, 9.2368, 39.6732, 12.1333, 153.773, 131.7692, 27.0278, 100.2, 129.9188, 167.1, 198.3975, 114.5269, 21.2549, 22.1053, 0.0, 65.7222, 183.9019, 55.8421, 60.1018, 126.3288, 145.858, 24.2353, 2.9778, 131.9762, 0.0, 147.2011, 84.8601, 14.0455, 2.9897, 22.2396]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

