created: 20231002221736000
creator: Drevarr
tags: ChartData
title: 202310022217_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Kosair", "Jimbo The Pleb", "Bryxzi", "Soft And Chewy", "Crystal Shadowmist", "Be\u00eb", "No Reserv\u00e9", "Mort\u00e4rion", "Tegan Parker", "Morton Saltbringer", "Zaedy Zae", "Nickhia", "Black Raspberry Pie", "Venomina The Sly", "Solus Luxes", "Astraeus Windrunner", "Adjudicatrix Farra", "Gabe Malhorn", "Klenga", "Jmbrage Rev", "Grasszanine", "Drell The Silent", "Elonith Requiem", "Tribal S", "High Sorcer Baradun", "Lord Erin The Wise", "Rina Of Theros", "Xanvias Tseli", "Mistwalker Cael", "Crusader Siolith", "Heres A Quarter", "Mike The Archmagus", "Daphne Agla\u00e9", "Sub Train", "Glorious Gluvs", "Newtype Khan", "Rozaalyna", "Halfpint The Drunk", "Bella Bitty", "Tootsie Pop Rocks", "Revenant Brandorf", "Cat Wigglebooty", "Ryvalia Fazebringer", "Eibh\u00ebar", "Lhew Silverhead", "Swithblight", "Drevarr Moonwillow", "Lucky Leipreach\u00e1n", "Gollum Mah Precious"];
const professions = ["Firebrand", "Firebrand", "Berserker", "Herald", "Druid", "Herald", "Reaper", "Vindicator", "Scrapper", "Tempest", "Chronomancer", "Druid", "Scourge", "Chronomancer", "Druid", "Firebrand", "Berserker", "Reaper", "Firebrand", "Firebrand", "Vindicator", "Spellbreaker", "Druid", "Reaper", "Druid", "Tempest", "Weaver", "Reaper", "Berserker", "Herald", "Firebrand", "Herald", "Weaver", "Reaper", "Firebrand", "Berserker", "Spellbreaker", "Reaper", "Berserker", "Firebrand", "Scrapper", "Vindicator", "Scrapper", "Chronomancer", "Chronomancer", "Scrapper", "Scourge", "Scrapper", "Scrapper", "Harbinger"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2563, 56, 0, 0, 0, 0, 15800, 0, 0, 239], [0, 0, 0, 4850, 1114, 434, 4455, 1972, 2870, 3341, 0, 775, 0, 0, 0, 2149], [401, 0, 0, 4275, 449, 0, 14820, 487, 283, 0, 622, 1318, 1084, 0, 0, 3359, 0, 348, 1766, 0], [0, 241, 0, 0, 11817, 908, 0, 0, 507, 2966, 1248, 3562, 3448, 4250, 0, 293], [0, 0, 1856, 27457, 0, 0, 1736], [3984, 269, 0, 767, 0, 26801, 332, 174], [0, 517, 0, 0, 14697, 421, 103, 0, 195, 3917, 2237, 7123, 507, 0, 0, 0, 0, 1107, 2919, 0, 501, 0], [1254, 0, 1434, 0, 8509, 0, 0, 0, 0, 12373, 304, 4539, 6861], [0, 7002, 829, 0, 23059, 4410, 0, 989], [421, 0, 0, 0, 0, 3837, 0, 0, 0, 4867, 0, 3324, 6256, 11605, 5863, 6362, 0, 994, 0], [0, 0, 0, 0, 10051, 0, 0, 0, 0, 522, 719, 4055, 6196, 5471, 2923, 3078, 6153, 675, 556, 3197, 0, 446], [2182, 0, 0, 1035, 17393, 0, 0, 0, 0, 2095, 9290, 564, 0, 2660, 1462, 1488, 0, 4830, 499, 0, 0, 598], [7175, 3979, 8701, 2918, 0, 5288, 3974, 4526, 0, 4580, 3478], [0, 0, 488, 0, 0, 5363, 0, 0, 0, 460, 891, 0, 6487, 3516, 3858, 378, 6513, 11052, 108, 3124, 0, 0, 4625], [8779, 1472, 1215, 10286, 7121, 295, 0, 11185, 3753, 0, 0, 1181, 1721], [0, 0, 0, 0, 487, 11339, 0, 0, 0, 0, 1014, 507, 3284, 8335, 5491, 0, 4810, 6576, 3422, 4854, 0, 0, 2368], [0, 0, 0, 414, 0, 17903, 0, 0, 0, 0, 3294, 627, 1447, 7223, 7712, 800, 3051, 5142, 3729, 141, 0, 606, 686], [1565, 0, 0, 242, 974, 6076, 0, 0, 0, 0, 1994, 507, 3621, 8677, 7186, 5656, 3471, 5496, 5490, 0, 807, 1957], [0, 11630, 1279, 4732, 9602, 9299, 1341, 5513, 6348, 5228, 3341, 0, 385, 0], [85, 0, 239, 15393, 280, 3008, 8330, 6428, 3532, 9175, 7228, 5079, 599, 0, 0], [0, 0, 8975, 0, 0, 0, 507, 5877, 4439, 2375, 9248, 9230, 4278, 4980, 9826, 0, 5265, 0, 328], [0, 14216, 1165, 8362, 642, 5200, 0, 9398, 11916, 9906, 2728, 0, 2872, 2337], [0, 1520, 11318, 0, 0, 0, 1124, 7216, 3076, 8424, 7469, 7310, 2614, 5993, 5119, 1639, 4436, 0, 2936, 772], [2252, 0, 925, 779, 0, 8659, 10555, 10984, 8146, 6522, 3430, 6489, 3340, 3399, 1417, 0, 5509, 4108], [0, 0, 0, 487, 0, 30070, 0, 0, 0, 410, 6335, 4012, 6287, 8337, 6523, 295, 5667, 7233, 2144, 0, 0, 0, 0], [825, 0, 0, 1921, 41224, 409, 0, 0, 4429, 15196, 1789, 7161, 5182], [0, 0, 2393, 39114, 2081, 5840, 702, 1071, 6021, 6845, 5985, 0, 2493, 6906, 2798, 825, 262, 0, 0, 562, 0], [1735, 0, 0, 997, 0, 0, 31823, 0, 0, 0, 507, 11909, 4104, 7250, 11947, 8102, 0, 2993, 960, 2721, 1080, 0, 0, 1188], [2083, 0, 0, 0, 487, 0, 30698, 479, 487, 0, 525, 17503, 507, 4953, 10441, 8014, 0, 4337, 8275], [3269, 0, 0, 729, 0, 0, 32764, 0, 640, 0, 640, 13054, 4034, 5927, 9415, 8127, 0, 3890, 8002, 6335, 0, 0, 1002, 1188], [2843, 0, 0, 0, 0, 31856, 782, 0, 0, 0, 6035, 7022, 3391, 10663, 13237, 2950, 6078, 5472, 10456, 0, 0, 0, 101], [25530, 11360, 16596, 1812, 18120, 13210, 12780, 6230], [1785, 1493, 0, 1046, 0, 27513, 0, 487, 0, 1485, 10171, 7099, 10025, 8252, 10114, 8325, 3403, 3987, 6881, 720, 0, 3058, 796], [2067, 0, 585, 3447, 2865, 43231, 2675, 0, 0, 0, 5378, 4984, 5246, 12484, 1505, 9528, 10616, 3071], [496, 0, 0, 1161, 0, 27474, 0, 0, 0, 1659, 11633, 12558, 9876, 5624, 4325, 10953, 5317, 3599, 9067, 2739, 0, 273, 1702], [3264, 0, 0, 3862, 0, 0, 29242, 0, 0, 0, 396, 10110, 12298, 11068, 7697, 3417, 3297, 6107, 9073, 7345, 4020, 0, 546, 2850], [829, 17, 0, 5155, 0, 43202, 812, 0, 0, 194, 10913, 9433, 5186, 8743, 1698, 3093, 6161, 4086, 6507, 2872, 2, 2872, 5376], [474, 0, 1916, 0, 63300, 858, 5114, 0, 7600, 7553, 3352, 10901, 7144, 6644, 4744, 2903, 2794, 0], [0, 0, 0, 3548, 0, 0, 52920, 4552, 1309, 212, 2853, 14274, 7513, 9414, 12460, 2702, 5258, 13897, 1905, 557, 9349, 0, 1579, 1143], [3707, 0, 0, 775, 0, 57252, 2464, 79, 0, 1124, 14183, 12067, 2999, 6365, 14518, 7651, 3673, 7394, 14959, 2843, 0, 631, 3362], [2074, 436, 0, 3007, 0, 10, 55302, 4500, 84, 0, 1496, 19280, 9757, 7128, 11436, 9561, 11518, 4398, 954, 542, 3363, 539, 2631, 8196], [0, 6970, 484, 68065, 3054, 2393, 0, 813, 18379, 4891, 12220, 14878, 6205, 7019, 6740, 2474, 6956, 4960, 1503, 4149], [57, 821, 88139, 11141, 330, 0, 5963, 20315, 542, 6486, 6552, 5699, 3070, 5745, 17286, 1600, 5859, 0], [3479, 640, 0, 4214, 0, 66423, 2186, 48, 413, 144, 19270, 11423, 7703, 7590, 17854, 9112, 3102, 7627, 8155, 7259, 2, 2872, 3544], [24, 0, 1508, 0, 57319, 3919, 800, 3157, 11253, 14700, 11210, 9164, 7763, 15308, 9537, 3755, 6884, 8771, 7369, 0, 6561, 4184], [331, 13563, 162980, 7338, 4280, 2661], [9380, 0, 0, 10809, 0, 0, 52896, 5126, 0, 0, 6720, 16035, 1157, 15482, 3045, 12441, 8496, 9531, 13087, 19602, 6465, 0, 1648, 7904], [2424, 0, 0, 3193, 0, 0, 77079, 3992, 637, 3612, 1919, 17884, 6068, 15428, 14127, 13433, 7819, 8681, 10226, 8669, 7709, 0, 3456, 2831], [6199, 0, 10785, 32909, 23818, 27484, 4046, 33849, 20527, 4426, 17734, 19380, 6342, 0, 6228, 20260], [5692, 0, 17464, 85068, 40012, 76468, 9664]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

