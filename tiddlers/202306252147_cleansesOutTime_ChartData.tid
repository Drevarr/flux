created: 20230625214748000
creator: Drevarr
modified: 20230705163536237
modifier: drevarr
tags: ChartData
title: 202306252147_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["K\u00f4sair", "Grasszanine", "Solus Sanctus", "Air One Com", "Zayde Sunsabre", "Aronorf Xideliesi", "Drumina", "Mort\u00e4rion", "Raziel Umbra", "Ephrem Rowf", "Morton Saltbringer", "Primal Clone", "Seiker Novus Terra", "Sakis Ranger", "Tegan Parker", "Drevarr Moonwillow", "Elonith Primal", "Arriasa", "Tribal S"];
const professions = ["Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Druid", "Scrapper", "Chronomancer", "Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Druid", "Tempest", "Scrapper", "Tempest", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[22.0137, 5.9901, 8.012, 0.0, 4.0, 0.0, 23.009, 29.0966, 19.9908, 0.0, 4.0, 64.1364, 0.0, 0.0], [17.0137, 19.9703, 1.0, 12.8667, 21.0091, 17.9734, 39.0226, 19.9964, 5.9908, 0.0, 7.0, 4.0182, 47.0435, 0.0, 2.9831], [16.0, 10.9802, 1.0, 0.0, 10.0334, 8.0059, 35.0934, 33.3005, 11.9908, 0.0, 5.0, 0.0, 53.1408, 0.0, 0.0], [13.0, 0.0, 1.0, 0.0, 23.0243, 12.9793, 51.7545, 28.4669, 14.0783, 0.0, 0.0, 0.0, 41.1872, 0.0], [11.0, 0.9901, 0.0, 4.9556, 15.0122, 22.9645, 42.0316, 54.0805, 6.9908, 0.0, 8.0, 1.0, 40.0334, 0.0, 1.9831], [13.1209, 12.2376, 17.1446, 6.9333, 21.1489, 23.0118, 52.3614, 45.4365, 26.4885, 1.0, 0.0, 3.0, 58.3817, 0.9831], [0.0, 17.0039, 0.0, 183.3106, 0.0, 12.2034], [55.0055, 2.0396, 27.0723, 0.0, 57.1368, 12.9941, 115.7515, 28.9803], [34.0385, 29.3267, 35.1205, 0.0, 48.1398, 8.0503, 69.0798, 49.0716, 2.9954, 0.0, 0.0, 0.0, 66.0972, 2.1765, 0.0], [0.0, 20.0039, 1.0, 251.6836, 0.0, 0.0], [55.044, 14.9802, 30.0602, 0.0, 52.0942, 24.9852, 93.2756, 68.263, 16.0276, 2.0, 1.0, 67.0522, 0.0, 0.0], [29.9586, 100.2078, 115.5778, 43.4378, 0.0, 6.0157, 0.0, 129.6981, 0.0, 3.9831], [150.1429, 55.4158, 49.5, 23.9333, 133.772, 123.7337, 253.5889, 176.2916, 79.4654], [110.2363, 80.4653, 79.2289, 9.9111, 127.9818, 102.8077, 276.4217, 172.8945, 120.0369, 0.0, 22.0039, 2.0, 240.4093, 2.0, 0.0], [168.5385, 53.2178, 61.6867, 5.9333, 154.0395, 130.7663, 243.3313, 196.4597, 79.9724, 0.0, 21.2314, 1.0, 243.8563, 0.0, 0.0], [191.8324, 54.9307, 128.7048, 26.5556, 177.5805, 168.6361, 271.4262, 241.8444, 124.3272, 14.0299, 55.6549, 11.0545, 300.8157, 9.0882, 47.0], [232.3819, 89.8317, 109.7048, 13.2, 168.2371, 177.3077, 283.5377, 272.6494, 139.4147, 2.0, 34.1922, 4.0727, 294.3817, 2.0], [250.1291, 56.2475, 113.006, 10.2444, 170.4195, 184.9231, 305.1611, 272.9106, 123.8525, 2.0, 28.0235, 8.0364, 320.328, 13.0, 4.9831], [263.7527, 73.604, 120.4578, 12.8667, 189.9635, 195.5296, 334.9985, 283.1467, 114.8018, 0.0, 43.4392, 5.0182, 345.7605, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

