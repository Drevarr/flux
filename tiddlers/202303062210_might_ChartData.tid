created: 20230306221045000
creator: Drevarr
modified: 20230705163521364
modifier: drevarr
tags: ChartData
title: 202303062210_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Blanco Padre Guard", "Fribble Bibble", "Mac Aaroni", "Drevarr Moonwillow", "Sygaldry Verdandi", "Zaylen Harker", "Viral Marketing", "Kahless The Drunk", "Ravioli Fetabringer", "Bella Sassy", "Newtype Khan", "Estryl", "Demon Sekhmet", "Arcanophage Farra"];
const professions = ["Scrapper", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.0808, 10.7565, 1.4052, 10.8927, 1.1642, 6.9936, 8.0777, 2.1972, 8.2413, 3.1115, 4.6256, 2.9279, 6.344, 10.2038, 7.9071, 1.5837, 0.167, 6.5337, 1.9891, 20.8858, 0.6384, 13.2264, 0.0, 14.1693, 7.2634, 6.048, 16.4674, 12.0931, 13.2471, 12.892, 13.338, 8.2775], [26.4938, 7.8478, 4.7889, 11.638, 10.8878, 4.0669, 0.2186, 21.3518, 1.1544, 16.6605, 26.0121, 21.4816, 1.9108, 8.3599, 1.1412, 11.2543, 0.0, 4.4683, 4.2635, 11.7926, 19.3334, 10.9819, 6.4522, 12.0119, 1.89, 0.0, 0.7603, 4.4822, 10.7089, 14.8056, 17.5872, 4.3092, 9.4815], [22.6713, 11.5797, 2.1263, 12.326, 0.0, 3.6036, 10.0096, 11.6277, 11.1348, 11.2058, 6.3475, 15.9152, 9.246, 17.7277, 21.2802, 3.6868, 5.8893, 9.9112, 8.951, 22.7203, 4.259, 0.0, 17.0741, 4.6925, 14.5775, 0.9545, 8.6112, 5.737, 19.9752, 17.7754, 7.4584, 19.7358, 16.4844, 14.147], [20.1669, 13.8846, 0.0, 3.3825, 0.0, 8.1738, 25.3134, 1.7875, 2.7273, 0.0, 40.768, 6.1948, 7.7077, 10.1366, 8.9744, 3.2663, 0.0, 10.9633, 0.0, 41.207, 0.0091, 3.3768, 17.3146, 0.0, 10.6707, 8.2404, 0.599, 11.3011, 37.7093, 21.9278, 14.8612, 1.2733, 24.2136, 34.013], [28.2073, 13.1712, 1.1464, 10.3767, 1.5308, 0.5663, 14.2495, 4.9392, 7.8576, 22.7081, 11.5748, 19.208, 6.1948, 16.4826, 16.2455, 18.5793, 7.0276, 0.5846, 12.4029, 4.9018, 41.3482, 1.8149, 23.4067, 6.0912, 18.3677, 0.6237, 11.7187, 16.6579, 30.109, 21.4907, 10.5754, 15.916, 14.364, 14.2222], [41.3883, 13.5005, 7.0077, 10.0901, 0.0, 3.166, 5.7697, 17.6988, 13.6298, 26.9769, 14.2507, 25.1664, 6.7496, 22.8267, 23.3612, 21.587, 12.521, 4.531, 18.9365, 8.2051, 13.1242, 1.751, 1.1743, 25.1702, 9.7008, 9.5628, 0.7182, 2.7706, 4.009, 32.6424, 20.6165, 16.1414, 3.3424, 16.9632, 14.2975], [19.7715, 15.2018, 11.5807, 5.4116, 8.4813, 12.6322, 15.7437, 10.3527, 12.8066, 10.2679, 22.0304, 9.0919, 11.858, 15.6413, 12.4671, 9.0567, 2.4325, 13.3442, 11.9347, 44.3117, 5.0342, 0.9324, 19.7194, 6.0461, 20.4668, 3.3169, 9.697, 9.8496, 17.4418, 28.1929, 7.1245, 16.2343, 27.702, 26.187], [33.6116, 15.3664, 12.111, 14.9631, 7.9556, 3.6165, 8.8731, 17.8531, 10.0176, 31.3051, 8.65, 24.304, 5.3935, 23.7753, 14.7686, 23.5274, 10.4919, 2.255, 4.042, 16.055, 40.5014, 2.663, 25.8115, 9.8362, 17.8429, 7.4938, 10.895, 4.0781, 30.4987, 17.3383, 4.5085, 22.362, 18.3996, 12.5668], [28.6028, 17.0677, 10.262, 11.2367, 4.0317, 3.8095, 9.8348, 21.6605, 9.6824, 21.463, 14.7485, 17.8752, 3.0204, 15.0597, 16.6482, 16.6389, 9.2546, 18.6043, 16.1971, 55.319, 0.0547, 1.0231, 17.3947, 7.4899, 13.1198, 1.8805, 11.8685, 8.2598, 36.9298, 22.5835, 19.2027, 22.1232, 20.862, 25.6603], [45.6063, 12.8419, 9.208, 7.9115, 6.6836, 2.0463, 6.3817, 21.3518, 7.6714, 19.9214, 11.8237, 23.912, 6.9653, 16.6605, 10.4723, 17.2696, 13.2138, 13.7318, 20.424, 21.3091, 0.0, 3.5885, 34.3085, 11.8891, 13.8778, 2.6838, 10.633, 14.9645, 38.3914, 30.8884, 21.0395, 19.4971, 19.6308, 24.5315], [56.1511, 18.1653, 13.8305, 14.0459, 11.3621, 6.8983, 14.4243, 21.3003, 5.0274, 22.6488, 21.2827, 22.5008, 5.5168, 11.3837, 15.8427, 11.8849, 3.1179, 12.8458, 14.0304, 40.2192, 0.5016, 19.0781, 9.2045, 16.9099, 2.1829, 13.5907, 5.9789, 46.284, 20.4709, 24.6017, 32.8665, 24.1452, 25.886], [71.9683, 40.2819, 3.2173, 23.2187, 7.201, 18.9336, 10.0176, 30.1786, 31.9862, 43.4336, 11.9273, 38.242, 32.2224, 27.8447, 14.4016, 19.6563, 4.8662, 80.7206, 42.4848, 6.768, 31.8373, 24.4483, 22.9478, 70.644, 46.0412, 34.8432, 36.4476, 55.5408, 59.7485], [166.6078, 61.5754, 17.7134, 43.2268, 45.4584, 93.7375, 84.3153, 60.8315, 48.4507, 4.2073, 63.5094, 32.9626, 141.5434, 13.0598, 102.0437, 13.2653, 72.8292, 13.2489, 55.1866, 54.2592, 46.4789, 103.3013, 80.1504, 94.7798, 82.9008, 62.307], [183.6113, 66.789, 52.3996, 41.0437, 63.7466, 35.527, 87.9864, 31.1772, 46.648, 20.6802, 45.0011, 55.1137, 54.3312, 27.7144, 11.9747, 31.1733, 35.8752, 174.9888, 87.695, 13.8518, 74.6951, 11.6235, 55.561, 51.2179, 152.2013, 115.5401, 90.4475, 91.7557, 83.9952, 86.8385], [185.0612, 92.9118, 8.8567, 59.5085, 16.2347, 61.9371, 69.5604, 36.4207, 83.8361, 50.2196, 101.9984, 44.9972, 93.9746, 92.1024, 83.4372, 50.4303, 33.1666, 53.9194, 194.6045, 12.385, 108.1358, 28.8542, 86.532, 0.1607, 62.3002, 52.7731, 160.5811, 107.6723, 77.6457, 114.1177, 97.5384, 61.9307]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

