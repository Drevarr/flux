created: 20230722000818000
creator: Drevarr
tags: ChartData
title: 202307220008_hitsMissed_ChartData
type: text/vnd.tiddlywiki


const names = ["Cosmedicz", "Tegan Parker", "Venomina The Sly", "Tribal S", "Glorious Gluvs", "Johosh The Mighty", "Permanent Dawn", "Lord Of Bones", "Keypek The Drunk", "Luke The Ghastly", "Raelyn Sunray", "Name Is What", "Gavann", "Sofya De Nova", "Zaedy Zae", "Wall Knot", "Air One Com", "Bella Sassy", "Daphne Agla\u00e9", "Primal Clone", "Drevarr Moonwillow", "Lord Erin The Wise", "Koralia Danai", "Squishy Jellyfish", "Xanvias Einzbern", "Gestern Yesteryear", "Klengah", "Eibh\u00ebar", "Regis Hawkesburne", "Seiker Novus Terra", "Mistwalker Cael", "Mister Jekyll", "Be\u00eb", "Black Raspberry Pie", "Oo Dads Mad", "Sub Train", "Ryvalia Fazebringer", "Newtype Khan", "Arriasa", "Sirplay", "Mike The Archmagus", "Yummy Kiwi", "Rina Of Theros", "Cat Wigglebooty", "Cedryn X", "Aronorf Xideliesi", "Rozaalyna", "Arcanophage Farra", "Kahlianne", "Grasszanine"];
const professions = ["Soulbeast", "Tempest", "Druid", "Druid", "Berserker", "Berserker", "Weaver", "Scourge", "Scrapper", "Scourge", "Firebrand", "Reaper", "Firebrand", "Weaver", "Druid", "Firebrand", "Firebrand", "Firebrand", "Scourge", "Chronomancer", "Scrapper", "Weaver", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Druid", "Chronomancer", "Berserker", "Tempest", "Vindicator", "Scourge", "Scourge", "Chronomancer", "Berserker", "Firebrand", "Chronomancer", "Spellbreaker", "Druid", "Berserker", "Weaver", "Firebrand", "Scourge", "Scrapper", "Berserker", "Firebrand", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Hits Missed Against per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1, 3, 10, 2, 1, 0, 0, 0], [1, 0, 2, 3, 0, 2, 1, 1, 1, 1, 0, 6, 1, 0, 0, 0], [4, 0, 1, 2, 0, 0, 1, 1, 0, 1, 1, 8, 1, 0, 0, 0, 0], [0, 0, 0, 3, 1, 0, 1, 1, 1, 2, 2, 8, 0, 2, 0, 0, 0], [6, 0, 2, 1, 1, 0, 1, 0, 0, 3, 2, 3, 1, 0, 0, 0, 1], [0, 0, 4, 1, 0, 1, 2, 1, 0, 0, 0, 10, 2, 1, 0, 0, 0], [3, 0, 4, 1, 0, 0, 2, 0, 0, 5, 2, 4, 0, 2, 0], [6, 0, 0, 2, 1, 0, 1, 2, 0, 6, 1, 4], [3, 1, 2, 2, 2, 0, 1, 1, 0, 2, 1, 7, 2, 0, 0, 0, 0], [2, 0, 6, 2, 1, 0, 2, 2, 0, 6, 0, 0, 0, 1, 0, 0, 2], [3, 1, 4, 2, 0, 2, 1, 2, 0, 1, 0, 9, 0, 0, 0, 0], [1, 0, 7, 1, 0, 0, 2, 2, 0, 1, 1, 9, 0, 2, 0, 0, 0], [2, 0, 3, 4, 1, 0, 1, 1, 0, 0, 0, 9, 3, 2, 0, 0], [1, 4, 3, 0, 1, 2, 2, 0, 0, 0, 11, 1, 1, 0, 0, 0], [3, 0, 2, 1, 1, 5, 1, 0, 0, 4, 1, 6, 1, 2, 0, 0, 0], [3, 0, 1, 2, 0, 0, 3, 2, 0, 3, 1, 11, 0, 0, 0, 0, 1], [0, 0, 4, 0, 0, 1, 3, 0, 2, 4, 2, 10, 0, 0, 0, 0, 1], [2, 0, 0, 6, 1, 1, 1, 0, 1, 3, 2, 7, 0, 3, 0, 0, 1], [6, 0, 5, 3, 0, 0, 1, 2, 0, 1, 6, 1, 0, 2, 0, 0, 1], [1, 0, 3, 1, 1, 0, 1, 1, 1, 0, 0, 15, 0, 2, 0, 0, 3], [1, 0, 4, 1, 0, 1, 2, 2, 1, 1, 0, 13, 1, 0, 0, 0, 2], [2, 0, 0, 3, 1, 0, 1, 4, 2, 7, 1, 7, 0, 1], [2, 0, 4, 2, 1, 1, 2, 2, 1, 4, 0, 11, 0, 0, 0, 0, 0], [5, 0, 1, 3, 0, 0, 1, 2, 1, 4, 2, 8, 0, 2, 0, 0, 1], [2, 0, 5, 1, 0, 0, 1, 1, 1, 5, 1, 10, 1, 2, 0, 0, 0], [4, 2, 2, 2, 2, 3, 1, 1, 1, 3, 2, 4, 0, 1, 0, 0, 2], [2, 0, 1, 3, 0, 0, 1, 2, 1, 7, 1, 7, 1, 1, 0, 0, 3], [9, 1, 2, 1, 2, 0, 2, 0, 0, 1, 1, 7, 2, 3, 0, 0, 0], [4, 3, 1, 2, 0, 0, 1, 2, 1, 2, 1, 12, 2, 0, 0, 0, 0], [4, 0, 1, 3, 1, 2, 1, 0, 1, 4, 1, 15], [7, 0, 2, 3, 1, 1, 1, 4, 0, 5, 0, 5, 1, 2, 0, 0, 2], [3, 1, 2, 2, 6, 0, 1, 2, 0, 0, 2, 13, 2, 1, 0, 0, 0], [1, 1, 4, 1, 0, 1, 2, 1, 0, 3, 0, 17, 1, 3, 0, 0, 1], [10, 0, 3, 4, 0, 0, 1, 4, 0, 2, 3, 10, 0, 0, 0, 0, 1], [5, 0, 3, 2, 0, 2, 1, 3, 1, 8, 0, 12, 1, 0, 0, 0], [5, 1, 8, 5, 0, 3, 3, 1, 0, 6, 0, 6, 0, 0, 0, 0, 0], [4, 0, 8, 1, 1, 0, 4, 3, 1, 4, 3, 9, 0, 0, 0, 0, 1], [4, 2, 2, 3, 0, 2, 2, 3, 0, 4, 3, 10, 1, 2, 0, 0, 1], [2, 0, 2, 6, 3, 0, 1, 2, 2, 2, 1, 18, 0, 0, 0, 0], [5, 4, 4, 4, 1, 4, 3, 3, 0, 0, 2, 9], [4, 2, 3, 2, 0, 0, 2, 0, 0, 11, 5, 8, 1, 0, 0, 0, 2], [3, 1, 2, 4, 1, 1, 1, 2, 2, 6, 1, 15, 1, 0, 0, 0, 0], [5, 1, 2, 1, 0, 0, 1, 1, 0, 3, 1, 22, 0, 1, 0, 0, 3], [3, 0, 3, 3, 2, 0, 2, 3, 0, 7, 2, 8, 1, 1, 0, 0, 6], [3, 2, 5, 2, 0, 1, 4, 7, 0, 3, 0, 11, 0, 3, 0, 0, 2], [6, 0, 3, 2, 4, 2, 3, 3, 0, 4, 1, 10, 1, 3, 0, 0, 2], [7, 2, 1, 2, 0, 1, 4, 0, 5, 8, 13, 1, 2, 0, 0], [8, 0, 6, 5, 0, 6, 1, 3, 0, 3, 1, 12, 1, 1, 0, 0, 0], [7, 0, 11, 3, 0, 4, 2, 1, 1, 4, 2, 9, 1, 3, 0, 0, 1], [10, 1, 8, 5, 2, 2, 2, 4, 1, 4, 1, 11, 1, 2, 0, 0, 0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

