created: 20230702223827000
creator: Drevarr
modified: 20230705163541220
modifier: drevarr
tags: ChartData
title: 202307022238_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Jmbrage Rev", "Newtype Khan", "Zayde Sunsabre", "Artakama Nahid"];
const professions = ["Spellbreaker", "Vindicator", "Spellbreaker", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[80.0856, 96.5853, 55.728, 90.0018, 0.0, 0.0, 70.6734, 89.9078, 86.724, 0.0, 105.9189, 56.3006, 177.6407, 73.3383, 0.0, 195.9212, 67.5131, 0.0, 33.8927, 0.0, 48.194, 0.0, 57.2832, 0.0, 48.2063, 140.7536, 0.0, 0.0, 37.9663, 51.8273, 0.0], [54.0575, 64.3027, 92.1418, 3.8566, 74.8176, 19.98, 12.9156, 3.9501, 13.3402, 35.6484, 49.6353, 57.7372, 0.0, 74.4408, 6.9502, 114.0867, 113.2009, 0.0, 8.0808, 61.5296, 70.8264, 45.2844, 0.0, 73.8018, 6.9815, 143.6292, 15.7694, 50.3272, 0.0, 73.3788, 17.2872, 14.663, 50.6072, 0.1518, 3.9683, 3.856, 15.6643, 18.9266, 26.7288, 0.0, 0.0, 44.226, 79.845, 20.176, 0.0, 28.013, 4.0049, 87.6933, 22.914], [16.7832, 85.5747, 57.0888, 40.0302, 63.1831, 0.0, 121.2255, 67.2966, 59.7023, 218.666, 34.3474, 35.5839, 75.7834, 61.9691, 206.6198, 0.0, 0.0, 211.8917, 122.9886, 62.1218, 0.0, 77.9933, 35.7997, 342.5107], [0.0, 149.8, 37.1165, 57.7171, 403.9431, 109.296, 63.1539, 85.995, 83.6962, 67.3374, 47.0902, 45.6322, 111.1824, 114.4151, 372.8907, 219.4592, 0.0, 0.0, 73.9368, 31.6554, 210.5352, 93.555, 53.522, 32.8634, 380.8827, 213.3608, 193.644, 76.3942, 133.036, 55.3133, 162.2412, 138.3858, 0.0, 47.8273, 0.0, 54.66, 54.6747, 87.8217, 60.4406, 291.1574, 65.0246, 90.6972, 211.7443, 69.1079, 28.7054, 65.124, 25.0224, 328.7089, 87.318], [245.9146, 341.89, 331.6829, 430.5197, 172.2387, 768.535, 328.86, 123.5239, 64.747, 188.7039, 278.0487, 270.3215, 265.0799, 66.7397, 570.7296, 214.5698, 823.5045, 614.1643, 107.9245, 14.5072, 120.3048, 361.8912, 554.8824, 238.7826, 96.0445, 129.5308, 718.4655, 628.844, 1018.5912, 82.5794, 432.2511, 711.4882, 276.0219, 70.2937, 338.1394, 108.1702, 114.0954, 147.9771, 196.8707, 649.0747, 56.1946, 177.475, 442.4566, 848.8166, 222.15, 94.4638, 266.2697, 218.0055, 906.6957, 139.392]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

