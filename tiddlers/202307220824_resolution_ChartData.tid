created: 20230722082451000
creator: Drevarr
tags: ChartData
title: 202307220824_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Legoh Brave", "Herm E Licious", "Erin Celes", "Gamora Titus", "Darth Sies", "Pixzil", "Sister Elon\u00edth", "Gestern Yesteryear", "Aronorf Xideliesi"];
const professions = ["Tempest", "Firebrand", "Renegade", "Dragonhunter", "Guardian", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24.0221, 18.0402, 8.9309, 63.0032, 12.0544, 8.1135, 24.0732, 21.8202, 21.0298, 12.0557, 0.0, 38.1837, 1.5994, 2.5488, 7.1363, 0.0, 0.0, 19.8518, 17.9098, 49.2765, 9.0423, 0.0, 0.0], [23.571, 31.236, 60.0437, 0.0, 84.0693, 46.6038, 4.3718, 162.5501], [0.0, 0.0, 13.0507, 26.7104, 3.2371, 46.5667, 33.2556, 6.4714, 19.4017, 0.0, 9.8145, 0.0, 6.519, 57.3422, 35.6647, 6.6248, 51.4723, 3.2225, 0.0, 4.5457, 0.0, 8.6982, 0.0, 38.6631, 9.1035, 9.8525, 28.512], [0.0, 25.4074, 0.0, 10.3571, 0.0, 4.4467, 28.9195, 80.3142, 0.0, 113.2111, 0.0, 26.6085, 28.9656, 4.7478, 83.7927, 10.1338, 0.0, 74.9656], [0.0, 0.0, 30.0892, 0.0, 0.0, 39.2342, 66.1902, 21.1176, 131.0829, 16.983, 26.4222, 32.6688, 75.8902, 14.8512, 0.0, 55.1729, 0.9901, 14.0832, 11.9625, 0.0, 0.0, 2.9868, 32.8898, 0.9986, 90.4533, 41.004, 0.0, 77.1408], [420.9397, 47.8655, 113.4605, 184.0507, 435.9822, 47.6784, 494.0817, 152.9857, 159.0975, 65.3832, 227.9928, 378.2755, 202.6534, 0.0, 434.935, 45.1058, 10.0548, 146.355, 0.0, 43.5366, 257.4637, 172.9093, 386.4315, 218.2086], [114.7806, 126.0403, 140.6196, 406.566, 0.0, 2.4653, 324.9, 528.1734, 151.9762, 836.149, 135.5631, 162.6885, 218.1006, 296.7744, 535.8032, 134.7965, 40.3728, 618.0035, 71.0763], [77.5481, 24.1574, 109.1758, 302.2778, 68.9634, 90.144, 366.0768, 325.494, 14.4648, 397.8383, 111.3284, 152.2125, 216.2538, 161.376, 314.0105, 177.2098, 36.9304, 353.8017, 98.1369, 122.9364, 108.9578, 17.7293, 44.1294, 174.1918, 116.5255, 469.6629, 163.6029, 32.171, 214.9488], [95.1124, 47.952, 103.7761, 196.7847, 131.6961, 74.7072, 276.3634, 402.0846, 31.7218, 643.5927, 42.8589, 100.2915, 223.641, 191.6832, 456.5822, 179.3282, 0.0, 453.382, 53.4643, 169.3656, 109.7745, 26.3006, 23.6488, 45.1896, 213.2242, 174.1707, 310.5816, 218.6523, 51.8443, 443.0131]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

