created: 20230605220452000
creator: Drevarr
modified: 20230705163533781
modifier: drevarr
tags: ChartData
title: 202306052204_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Artakama Nahid", "My Birthday Girl", "Cyclotechnist Farra", "Arriasa", "Tootsie Pop Rocks", "Lord Erin The Wise", "Zayde Sunsabre", "Cat Wigglebooty", "Newtype Khan", "Stoic Rapidfire", "Ak\u00e1nt\u00f3r", "Etchery", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Scrapper", "Druid", "Scrapper", "Weaver", "Spellbreaker", "Scrapper", "Spellbreaker", "Druid", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 270.5858, 23.347, 158.0069, 0.0, 0.0, 0.0, 24.4094, 29.9442, 2.0902, 0.0, 32.0381, 109.512, 99.8581, 59.8136, 16.9087], [45.5472, 284.2715, 44.2915, 228.9105, 0.0, 9.1575, 15.554, 9.8518, 30.7022, 38.8981, 7.9464, 11.9894, 225.264, 89.3564, 12.0625, 0.0], [371.86, 52.9183, 302.1619, 2.2833, 7.3426, 16.973, 0.0, 79.1246, 65.5486, 13.3197, 12.7843, 282.36, 46.6127, 42.4546, 0.0], [16.983, 0.0, 0.0, 148.4889, 74.3668, 40.905, 68.2493, 463.008, 425.0417, 81.6649, 61.9448], [32.2272, 518.8835, 53.3114, 293.0054, 11.8938, 23.8928, 19.811, 11.9315, 68.1798, 63.1971, 31.8614, 347.412, 43.8491, 34.9398, 15.876], [13.6368, 821.533, 29.2438, 527.3159, 15.867, 34.632, 35.09, 18.7625, 71.1648, 67.0183, 22.5526, 43.6963, 256.62, 129.8892, 64.3613, 30.7598], [55.728, 848.5134, 109.3092, 662.5492, 59.9979, 42.3076, 47.938, 85.1446, 90.0694, 81.6827, 82.2074, 67.3882, 396.864, 279.4921, 104.8194, 55.809], [0.0, 1753.3337, 26.885, 610.8976, 5.9856, 50.5994, 20.218, 25.6694, 189.8043, 145.7942, 43.5728, 11.9674, 477.984, 427.8053, 84.632, 42.0188], [65.4336, 1614.9126, 89.9371, 846.8515, 65.8416, 54.2291, 68.695, 62.8756, 165.0245, 115.4204, 77.4585, 55.5754, 567.996, 617.5725, 96.0567, 61.9043], [17.5248, 2336.3445, 121.212, 1261.9425, 40.8285, 51.5651, 15.862, 13.5254, 178.8121, 172.8367, 5.1652, 69.7507, 590.616, 491.3681, 94.1156, 0.0], [50.76, 3001.4695, 118.8096, 1231.8907, 63.9195, 87.0628, 43.604, 56.1812, 236.2841, 194.3597, 57.46, 108.4349, 816.66, 1001.1602, 88.3201, 50.9895], [128.6928, 3087.4939, 141.0646, 1762.7282, 20.2272, 66.7998, 23.584, 43.4148, 281.4846, 219.1159, 92.1593, 94.7674, 862.68, 675.9766, 22.6277, 52.731], [21.5568, 2999.9054, 123.1994, 1729.6243, 25.284, 120.6459, 26.257, 91.1559, 317.9672, 186.1947, 37.594, 149.8349, 930.228, 655.3417, 199.5173]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

