created: 20230625212343000
creator: Drevarr
modified: 20230705163535879
modifier: drevarr
tags: ChartData
title: 202306252123_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Ateriuz", "Venomina The Siren", "K\u00f4sair", "Deutzaqio", "Newtype Khan", "Grasszanine", "Blancooo Padreee", "Tuff Spuffles", "Johosh The Mighty", "Duke Silvver", "Xanvias Einzbern", "Palm Sauce", "Zayde Sunsabre", "Aronorf Xideliesi", "Ryvalia Fazebringer", "Traidoruns Maximus", "Crusader Siolith", "Sygaldry Verdandi", "Tika Fiery", "Yummy Kiwi", "Koralia Danai", "Bella Sassy"];
const professions = ["Berserker", "Tempest", "Berserker", "Vindicator", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Firebrand", "Berserker", "Vindicator", "Berserker", "Vindicator", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 3.2232, 0.6943, 2.256, 0.9744, 1.716, 1.0511, 2.5402, 0.9192, 0.0, 1.6454, 0.0, 0.0, 1.1059, 1.7146, 0.6672, 1.2103, 0.0, 2.1418, 1.5523, 0.5689, 2.1094, 0.5179, 1.88, 0.8395, 1.5891], [0.4582, 3.3634, 1.2284, 1.645, 0.336, 1.3122, 0.3503, 1.764, 1.8713, 1.2162, 0.1269, 0.2264, 2.0736, 0.912, 3.336, 1.6293, 0.0, 1.1174, 0.3763, 0.9481, 1.5435, 2.1912, 1.2032, 0.4325, 2.1418], [2.1702, 1.9404, 3.8102, 0.7223, 2.0031, 0.2538, 0.981, 2.2253, 3.336, 2.0482, 0.0, 2.1883, 2.7754, 0.8849, 1.9037, 0.9163, 2.4816, 0.2798, 1.7963], [4.3075, 13.7337, 1.3887, 4.042, 0.4368, 2.6749, 4.2983, 0.0515, 0.0, 0.6016, 0.0, 6.909], [0.0, 2.1021, 1.2818, 1.739, 1.4448, 2.3216, 1.105, 5.0098, 2.2324, 0.0, 1.7885, 0.0, 0.0, 3.3638, 2.809, 3.4027, 2.793, 0.0, 1.583, 2.1638, 1.3906, 1.595, 0.4781, 4.6624, 0.0, 2.9018], [1.558, 2.2422, 1.9228, 3.243, 1.2768, 2.473, 1.3475, 3.7397, 2.9219, 0.0, 2.3608, 0.2961, 0.0, 3.7325, 2.3347, 2.8022, 0.931, 0.0, 3.1195, 2.6342, 0.8849, 2.8812, 1.1155, 2.7824, 0.0, 3.4545], [1.833, 6.026, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0219, 3.4471, 0.6439, 0.5499, 2.5656, 3.8707, 1.2403, 5.6045, 1.6758, 2.2372, 1.909, 1.6934, 1.7699, 2.8298, 0.7968, 4.4368, 0.4325, 2.6945], [0.0, 0.2136, 0.141, 0.0672, 5.9555, 2.183, 4.0219, 4.6947, 0.0, 3.9347, 0.2961, 5.5463, 4.7002, 6.6394, 9.0072, 6.005, 0.477, 3.4454, 3.1987], [2.1996, 6.4464, 0.8546, 2.115, 1.3104, 2.6244, 0.9433, 3.2458, 3.3487, 0.0, 2.8974, 0.0, 1.3206, 2.4883, 1.4957, 4.0032, 3.2585, 1.0199, 3.3523, 2.0227, 2.0859, 2.4181, 1.5936, 3.3088, 2.1878, 5.6654], [1.3627, 1.0241, 7.1266, 1.0177, 0.0, 4.2924, 0.0, 1.6224, 3.5942, 1.897, 5.7379, 4.655, 2.6649, 7.8221, 2.5872, 4.804, 2.6239, 1.5139, 4.9632, 1.679, 4.4909], [4.4909, 6.3063, 0.6943, 2.068, 2.9904, 3.432, 2.5063, 2.8224, 2.4623, 2.2535, 1.3113, 1.0564, 2.1197, 2.736, 5.2042, 2.5137, 0.0, 3.5851, 3.1517, 1.3274, 3.2414, 1.235, 2.3312, 0.9158, 5.5272], [0.0, 0.0, 3.0978, 0.611, 0.504, 0.0, 0.7007, 11.3602, 4.4321, 0.0, 9.4075, 0.5076, 5.0558, 5.4835, 6.1286, 10.6085, 5.1205, 1.5792, 5.4475, 3.528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.833, 10.9309, 3.4716, 5.358, 1.344, 1.0094, 1.7248, 4.8686, 4.3007, 1.3659, 3.2908, 0.0, 0.3018, 3.6403, 2.0794, 4.6037, 3.0723, 2.0233, 2.4211, 1.4582, 3.7294, 2.8812, 3.1872, 2.632, 1.272, 4.8363], [0.1833, 8.969, 3.258, 7.05, 4.7712, 4.9461, 4.6893, 6.7738, 4.7603, 6.2597, 3.1302, 4.2635, 4.7002, 5.2166, 7.2725, 2.9327, 2.6978, 4.237, 4.5629, 3.919, 4.2189, 4.6214, 8.7984, 3.4598, 7.5308], [3.7576, 3.6436, 7.8513, 8.554, 3.4272, 4.3404, 1.4553, 2.9635, 5.8109, 0.0, 4.6143, 0.7614, 2.8675, 4.7923, 4.5235, 13.6109, 9.5427, 0.0, 11.64, 4.5158, 3.5398, 3.2414, 1.7928, 9.2496, 1.501, 9.4653], [7.0571, 12.4725, 4.5399, 8.93, 4.8384, 0.3533, 5.0396, 9.455, 5.3513, 0.2088, 6.0809, 2.4111, 0.6037, 7.0963, 5.9827, 13.344, 9.3566, 8.0549, 7.103, 6.1946, 8.1806, 3.9043, 9.9264, 3.4598], [4.3992, 7.7077, 2.2432, 3.854, 6.5184, 3.331, 2.8567, 5.6448, 6.5332, 0.0, 1.6812, 3.5955, 4.9426, 9.815, 8.7552, 15.5458, 6.2843, 3.5532, 7.6824, 8.6554, 6.5106, 3.6529, 8.964, 12.5584, 2.951, 10.2944], [3.5743, 19.059, 4.3262, 8.46, 5.376, 12.7184, 7.1417, 13.6886, 8.2075, 0.0, 9.7294, 3.7647, 3.0184, 9.0778, 8.6093, 9.4075, 7.6807, 4.5567, 6.565, 7.3853, 4.7408, 7.5117, 6.6134, 15.3408, 5.2406, 14.3016], [21.721, 25.2252, 5.9819, 9.306, 6.9216, 9.0846, 4.9049, 13.477, 5.8437, 7.7621, 2.4111, 4.5653, 10.5062, 5.0707, 13.4107, 11.2185, 4.0138, 11.1278, 5.1274, 5.6889, 11.6791, 9.5218, 10.8288, 1.5518, 15.6834], [2.6579, 22.8428, 5.0739, 8.272, 5.3424, 7.52, 4.5007, 15.4526, 8.7328, 9.9798, 2.9187, 6.2254, 11.4278, 14.3002, 15.2122, 10.8461, 3.29, 12.385, 12.936, 7.7748, 7.9233, 5.976, 16.6192, 4.9354, 17.5489], [8.9817, 30.2702, 6.7831, 8.977, 6.9216, 6.662, 5.8481, 10.6546, 9.5207, 0.0, 7.2613, 1.6497, 5.0558, 12.2573, 12.4397, 19.4822, 13.6391, 12.059, 11.713, 8.1541, 6.8943, 8.1274, 16.6944, 1.7808, 16.7198], [15.3972, 38.8188, 6.3558, 10.387, 7.1568, 13.0717, 4.5007, 13.7592, 9.3894, 0.0, 8.9067, 0.7614, 3.8485, 10.967, 12.1114, 15.6125, 11.0789, 4.9515, 11.8728, 11.9482, 9.1654, 8.4893, 9.4421, 18.8752, 6.131, 18.9998]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

