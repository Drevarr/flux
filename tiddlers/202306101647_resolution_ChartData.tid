created: 20230610164704000
creator: Drevarr
modified: 20230705163534978
modifier: drevarr
tags: ChartData
title: 202306101647_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Traidoruns Maximus", "Air One Com", "Blanco Padre Guard", "Aronorf Xideliesi", "Tika Fiery", "Solus Sanctus", "Gestern Yesteryear", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[213.1016, 68.7641, 106.8, 180.4262, 222.6158, 22.4512, 134.1023, 29.9882], [0.0, 42.467, 30.0, 24.9984, 22.6042, 0.0, 63.1412, 0.0, 17.9924, 0.0, 37.2857, 0.0, 0.0, 0.0, 251.8598, 51.5444, 21.6149, 369.9817, 82.0505, 72.0966, 163.2097, 81.3616], [0.0, 42.3007, 40.128, 27.3946, 182.3851, 0.0, 103.6547, 0.0, 56.2782, 0.0, 33.7914, 48.7876, 0.0, 0.0, 0.0, 267.8323, 0.0, 0.0, 524.1529, 26.6976, 54.7232, 104.958, 262.0496], [0.0, 57.3804, 30.864, 55.5264, 97.2974, 9.8849, 128.279, 0.0, 109.8784, 0.0, 0.0, 38.0525, 0.0, 0.0, 363.3965, 68.4241, 1.0263, 471.4876, 23.6989, 108.0666, 116.0369, 142.4817], [0.0, 110.7876, 19.584, 93.4963, 237.4022, 0.0, 215.0462, 40.3564, 0.0, 0.0, 16.9016, 22.5368, 20.1344, 29.9322, 520.8653, 136.8293, 39.1354, 777.3292, 109.4979, 136.0397, 322.5709, 360.6831], [19.3306, 45.8858, 69.024, 103.4957, 245.5128, 0.0, 138.6777, 24.1798, 196.7098, 0.0, 0.0, 99.8118, 24.1613, 0.0, 0.0, 656.6765, 72.1584, 16.7905, 1000.6422, 76.7193, 85.3306, 262.6866, 264.821], [54.4316, 69.762, 79.008, 243.095, 177.7589, 19.4097, 246.9911, 91.762, 133.4911, 8.519, 0.0, 39.7778, 76.4878, 88.4083, 39.893, 498.215, 80.6831, 10.3261, 941.6511, 77.5107, 117.4432, 323.6205, 246.3117], [67.8991, 92.9544, 57.888, 164.1139, 186.1622, 0.0, 368.8645, 0.0, 103.051, 0.0, 0.0, 0.0, 40.2002, 81.2698, 655.2326, 57.655, 14.2936, 1114.3582, 124.8667, 146.3571, 445.4301, 421.1599], [84.9852, 64.8463, 214.56, 210.4013, 154.3056, 129.9049, 387.8318, 109.5846, 277.3174, 49.2899, 191.2207, 93.236, 72.9186, 48.2641, 671.2954, 111.8964, 40.8176, 991.8156, 82.7169, 225.3216, 298.0224, 253.4878]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

