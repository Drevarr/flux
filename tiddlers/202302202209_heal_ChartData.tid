created: 20230220220953000
creator: Drevarr
modified: 20230705163519722
modifier: drevarr
tags: ChartData
title: 202302202209_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Arka\u00f1", "Ravioli Fetabringer", "Etchery Howls", "Fribble Bibble", "Mac Aaroni", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Firebrand", "Druid", "Scrapper", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[289.5848, 302.1938, 101.0, 25.2241, 41.9057, 42.6667, 144.3711, 63.1172, 30.0, 22.8864, 48.6364, 330.1778, 48.92, 5.908, 54.5, 280.8718, 18.3958, 133.7557, 0.0, 26.2975, 59.5912, 216.0189, 78.0323, 8.9459], [747.4854, 595.2435, 45.0926, 335.1207, 35.283, 64.8621, 40.4, 222.0206, 66.6483, 64.1569, 113.2273, 446.625, 610.4667, 238.38, 143.4598, 771.2308, 37.3889, 322.359, 84.125, 250.3291, 286.6787, 450.2667, 156.7355, 277.9686, 86.8113, 101.1613, 120.3604], [1794.1096, 1539.8924, 231.5741, 12.7358, 35.5977, 183.1443, 142.4759, 322.0588, 23.3182, 643.9432, 1236.1333], [101.0769, 1592.9678, 1679.2324, 207.5926, 24.7931, 0.0, 268.6437, 6.1714, 389.9691, 233.1172, 186.1961, 294.3864, 479.5057, 810.6, 13.08, 55.0805, 575.7436, 54.2593, 815.3333, 0.0, 141.6203, 956.3213, 266.2667, 686.8099, 213.8868, 10.4528, 270.4194, 76.9459], [35.4615, 1951.0365, 1736.144, 73.0926, 243.6552, 44.1698, 60.7471, 46.1429, 497.2062, 375.5172, 5.8039, 134.2386, 1007.6136, 1462.4889, 172.6207, 338.0256, 512.7778, 256.2821, 38.375, 880.2715, 660.7778, 562.5785, 441.5346, 206.434, 31.8065, 812.6577], [12.4, 1936.4488, 1861.3408, 172.6667, 519.5517, 113.9434, 48.5517, 228.5714, 365.7629, 225.1103, 125.5294, 220.1932, 902.5057, 1424.0444, 79.0, 162.5287, 103.2564, 275.4074, 774.2564, 57.9062, 66.3671, 930.9412, 615.8667, 964.0, 709.6226, 700.6981, 124.9355, 179.4505], [401.7692, 2479.0497, 2196.3148, 335.1667, 742.4483, 106.0189, 253.6437, 586.6571, 567.3402, 340.6483, 250.3235, 217.6705, 1269.3011, 2638.1778, 44.86, 573.1609, 621.1538, 232.8704, 939.0, 381.0104, 108.2025, 1595.2805, 1041.8667, 765.3636, 797.239, 564.566, 1060.0323, 561.6216]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

