created: 20230215221053000
creator: Drevarr
modified: 20230705163519291
modifier: drevarr
tags: ChartData
title: 202302152210_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Rozaalyna", "Ryvalia Fazebringer", "Bambiae", "Drevarr Moonwillow", "Nekro Atsume", "Smol Gluvs", "Grasszanine", "Daring Deathblade", "\u00c9\u00efbhear", "Rina Of Theros", "Domina Flagbringer", "Be\u00eb", "Newtype Khan", "Dark Sidiuz", "Tootsie Pop Bringer", "Skye Nightroad", "My Birthday Girl"];
const professions = ["Scourge", "Chronomancer", "Chronomancer", "Scrapper", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Scrapper", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24867, 35837, 0, 2809], [7541, 13027, 0, 0, 1248, 1428, 3, 0, 0, 2324, 612, 0, 686, 4826, 12412, 0, 0, 786, 0, 5766, 0, 2508, 0, 10555], [10802, 18745, 0, 144, 1248, 1673, 1319, 4521, 0, 2742, 2496, 0, 2624, 2496, 0, 6125, 0, 0, 1248, 0, 6711, 0, 0, 0, 1248], [6658, 22478, 53, 689, 1416, 862, 1037, 631, 0, 7470, 1311, 100, 5938, 2772, 0, 2531, 35, 102, 2568, 2946, 2912, 0, 1134, 810], [5165, 5742, 2883, 4738, 0, 11447, 3713, 0, 0, 8900, 0, 6547, 2370, 0, 2227, 2259, 9441, 0, 5776, 6021], [13790, 7038, 0, 3799, 1248, 4097, 870, 2478, 0, 5102, 8816, 0, 647, 10847, 12085, 1046, 647, 4930, 0, 10608, 0, 0, 0, 2326], [12907, 29675, 0, 4725, 0, 4601, 0, 1567, 0, 6864, 1919, 0, 3432, 3164, 14091, 134, 0, 0, 0, 6854, 0, 0, 0, 1786], [8815, 0, 12522, 5029, 0, 7355, 13026, 0, 9864, 0, 0, 10849, 2282, 11104, 0, 4950, 0, 7377], [20964, 22546, 131, 1760, 1020, 2942, 2102, 2850, 72, 9061, 139, 0, 11810, 1754, 4839, 146, 0, 1397, 6852, 7541, 0, 4069, 0, 3115], [7966, 26470, 0, 2153, 1272, 1248, 3474, 2317, 0, 12865, 6573, 0, 14283, 0, 2226, 7175, 0, 0, 2621, 2684, 8050, 0, 0, 0, 9777], [19388, 22138, 0, 1258, 10320, 174, 1895, 1255, 0, 4406, 0, 0, 6852, 7868, 15657, 0, 0, 6200, 0, 5836, 0, 3842, 6234], [4356, 0, 2981, 5404, 4033, 1128, 8286, 0, 15884, 205, 946, 16586, 6731, 16012, 0, 0, 2227, 5911, 19061, 0, 0, 9921], [34206, 33220, 0, 4131, 1270, 5920, 0, 5421, 3783, 889, 0, 2002, 6646, 0, 7435, 0, 1837, 2897, 3807, 7880, 0, 6319, 0, 2522], [26374, 33956, 0, 5767, 401, 4934, 2627, 0, 0, 0, 0, 0, 0, 9962, 12575, 0, 0, 4484, 4020, 14117, 0, 3497, 3268, 5709], [52937, 87025, 861, 25505, 3998, 8533, 9968], [83431, 26498, 896, 33818, 11327, 3070, 6409, 13883, 2494, 7999, 232, 9819, 4023, 0, 16051, 3427, 0, 2117, 3035, 9696, 5933, 0, 4326], [151616, 137223, 1251, 27869, 13976, 12045, 20116, 39470, 0, 17669, 21685, 0, 23770, 16118, 46216, 1863, 1989, 9518, 19323, 31650, 114, 12224, 5730]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

