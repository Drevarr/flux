created: 20230311223557000
creator: Drevarr
modified: 20230705163521808
modifier: drevarr
tags: ChartData
title: 202303112235_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Minnie Marshmallow", "Zaylen Harker", "Blanco Padre Guard", "Sygaldry Verdandi", "Aronorf Xideliesi", "Bella Sassy", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1183.5306, 89.0735, 0.0, 23.865, 29.1357, 99.8946, 318.8352, 68.5854, 237.0578, 752.457, 701.955, 41.9782, 28.9211, 0.0, 39.7488, 48.3997, 0.0, 92.8754, 21.924], [2357.1072, 27.0314, 29.0134, 173.634, 99.13, 247.1742, 840.7181, 445.5713, 381.6878, 785.03, 941.9962, 105.1583, 73.37, 52.1321, 43.0248, 65.6581, 174.4141, 0.0], [2305.3464, 165.4183, 53.8308, 80.5605, 129.6392, 225.7632, 681.1606, 349.1303, 527.4894, 1028.8461, 1097.6063, 49.572, 71.8226, 0.0, 0.0, 0.0, 76.4479, 0.0, 80.3572, 352.944], [2635.8192, 34.8478, 0.0, 48.4124, 173.8152, 473.4982, 208.0971, 355.5216, 678.4448, 910.7888, 0.0, 45.8896, 0.0, 83.8152, 22.0806, 245.8567, 0.0, 229.4592, 233.7548, 384.93, 214.8608, 354.528], [2361.0888, 48.2549, 0.0, 121.4857, 78.0876, 97.7886, 647.4592, 385.5298, 383.1197, 1011.114, 1034.1225, 74.0542, 73.4767, 14.6639, 47.8968, 63.6023, 4.8143, 245.985, 0.0, 251.9808, 104.6903, 241.0481, 233.3716, 347.856], [2552.2056, 141.8608, 47.844, 68.3377, 120.1725, 308.3886, 1045.4438, 682.4602, 1090.7782, 1185.9292, 1777.3313, 283.2773, 136.3348, 43.8808, 69.5856, 118.4738, 97.5345, 272.5086, 58.6253, 247.8192, 413.4308, 374.8399, 91.1372, 503.232], [3707.3673, 301.9596, 143.5319, 200.6918, 167.4567, 412.1442, 939.8646, 483.3752, 844.738, 1459.62, 1079.4375, 181.5817, 304.152, 0.0, 20.5968, 259.1806, 0.0, 307.3743, 46.5696, 419.3424, 466.8368, 341.2282, 315.392, 327.216], [3753.6534, 89.5349, 39.8614, 237.7147, 223.9133, 606.177, 1121.5168, 916.0721, 1089.2161, 1485.8327, 1548.6188, 309.7035, 102.6646, 40.6283, 48.9552, 103.0428, 39.592, 260.7441, 70.7918, 293.2296, 369.288, 369.6638, 357.28, 327.504]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

