created: 20230318001239000
creator: Drevarr
modified: 20230705163522406
modifier: drevarr
tags: ChartData
title: 202303180012_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Ark Darkness", "Air One Com", "Whose Guardian", "Aronorf Xideliesi", "Viral Marketing", "Bella Sassy", "Zaylen Harker", "Sygaldry Verdandi", "Jupi Jupi Jupi", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[411.9915, 121.4909, 21.2722, 0.0, 47.8044, 102.2189, 52.015, 0.0, 0.0, 35.1718, 51.9999, 869.211], [358.8576, 41.0928, 46.667, 493.3825, 29.432, 48.481, 20.5945, 0.0, 93.6945, 843.7138, 78.4327, 0.0, 23.5935], [204.9024, 61.693, 115.2957, 35.8088, 13.4462, 39.549, 0.0, 29.8584, 42.7944, 0.0, 771.5638, 110.0011, 38.8389, 0.0, 65.4885, 44.5931, 0.0, 0.0, 0.0, 125.2221, 570.0307], [397.6944, 188.3448, 0.0, 194.4446, 59.5504, 44.2378, 54.3517, 231.3837, 21.6153, 199.9296, 173.5008, 19.867, 1066.9373, 156.0571, 0.0, 23.7787, 39.7782, 154.9435, 0.0, 40.1429, 34.8777, 0.0, 517.2342], [445.8576, 6.4344, 287.2262, 726.259, 57.6368, 0.0, 0.0, 34.0437, 39.7197, 39.5616, 21.1728, 1081.3673, 8.0962, 0.0, 0.0, 140.6349, 0.0, 17.6612, 38.7374, 19.4138, 77.8192, 47.5743, 658.2395], [393.7968, 164.3376, 216.2866, 1060.5127, 31.4704, 0.0, 45.8809, 92.9016, 39.0852, 50.0136, 82.8696, 23.8297, 1223.606, 160.4203, 70.061, 0.0, 21.3003, 112.244, 0.0, 0.0, 1.7647, 67.1372, 855.2607], [11.8017, 138.5904, 143.7744, 80.7534, 1434.7553, 164.1048, 48.8231, 128.137, 234.7002, 371.7084, 220.3556, 156.2674, 64.446, 112.4519, 113.5548, 1384.9429], [417.6, 35.3136, 535.2984, 656.4584, 63.8481, 35.4892, 0.0, 138.0249, 65.3328, 90.8688, 0.0, 664.3694, 161.196, 150.8954, 21.0269, 98.0343, 109.7563, 126.5722, 38.9717, 5.2109, 88.3095, 114.1583, 1321.63], [633.9168, 103.3368, 825.9922, 608.055, 25.2408, 108.8313, 79.7957, 263.8891, 142.4664, 43.992, 75.1872, 1223.9004, 21.9614, 70.5414, 0.0, 151.7481, 108.0112, 89.7593, 0.0, 46.1033, 89.3653, 1057.0035], [495.552, 52.2312, 939.6979, 1332.2366, 63.0032, 56.0212, 30.2934, 91.5253, 15.6087, 171.4128, 114.1272, 1762.8171, 246.9086, 27.8254, 151.7746, 230.9076, 127.9871, 46.6868, 30.3048, 0.0, 30.3434, 36.9631, 1510.7102], [751.8192, 147.42, 468.8376, 706.7315, 98.904, 99.3702, 100.7365, 106.6243, 144.7929, 215.9352, 163.7064, 9.157, 1845.8633, 0.0, 211.4182, 97.3728, 261.4248, 179.2265, 90.281, 18.0658, 28.7747, 225.9027, 1672.7483]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

