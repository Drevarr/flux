created: 20230812001414000
creator: Drevarr
tags: ChartData
title: 202308120014_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Cesare Pirane", "Solus Sanctus", "Tootsie Pop Rocks", "Emily Melia", "Tegan Parker", "J\u00e2sm\u00eene", "Tribal S", "Zaedy Zae", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Firebrand", "Scrapper", "Druid", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[180.9537, 116.2875, 4.9459, 0.0], [14.9406, 39.1897, 31.1613, 14.8542, 222.3647, 16.0808, 71.3947, 106.7949, 192.375, 41.5714, 201.4492, 116.75, 360.2934, 111.9277, 0.8478, 153.2171, 23.0, 20.8542, 92.1693, 85.7614, 67.871, 27.5833, 76.6275, 54.5153, 140.1984], [54.6535, 0.0, 9.1724, 0.0, 0.0, 182.8, 19.4408, 0.0, 146.4844, 37.4286, 58.822, 154.5833, 584.4981, 83.9509, 178.0, 0.0, 232.9908, 0.0, 53.8958, 10.5608, 0.0, 19.9032, 37.6042, 12.902, 53.5764, 262.1619], [424.9208, 0.0, 27.9138, 339.2581, 198.4583, 64.4941, 268.7677, 412.5526, 61.5385, 206.1122, 550.1949, 18.0694, 429.6098, 744.3913, 20.703, 449.1315, 10.9459, 258.1181, 89.6138, 263.1932, 165.5484, 1025.0, 101.9412, 138.8428, 760.1255], [153.9406, 84.5, 418.5484, 17.2917, 134.3176, 172.7071, 155.3224, 0.0, 29.9531, 153.7245, 19.0339, 104.7639, 807.8044, 199.6012, 218.4783, 635.37, 91.8542, 205.8995, 222.8636, 4.3871, 72.1875, 14.0392, 85.7162, 617.4615], [450.2376, 11.5641, 7.5, 0.0, 0.0, 330.0, 0.0, 0.0, 74.2551, 198.1949, 0.0, 1116.8571, 337.7283, 719.5652, 22.703, 580.4709, 11.5946, 303.7153, 30.2381, 360.0455, 12.6129, 151.1458, 416.2183, 613.996], [389.7525, 72.8448, 377.871, 0.0, 299.6, 188.697, 402.75, 462.949, 309.4492, 662.375, 2283.5058, 501.3613, 627.6957, 2.396, 1277.7217, 391.5556, 475.9048, 326.6705, 8.4516, 187.9583, 66.6471, 142.655, 1158.9919], [604.8218, 11.7436, 471.871, 18.0, 326.3529, 149.7475, 472.7961, 16.9487, 11.2031, 393.7959, 772.8305, 122.4167, 2524.8584, 450.2948, 319.5435, 1126.0061, 6.9189, 312.3472, 418.0582, 179.2386, 217.6774, 222.5833, 15.7059, 169.0699, 1110.1174], [582.4356, 0.0, 712.3103, 283.0968, 19.1042, 480.8941, 268.7172, 637.9474, 4.2308, 7.875, 532.1633, 409.2797, 1115.3333, 2107.7207, 718.4133, 423.3043, 4.297, 1317.7798, 58.4324, 397.0556, 648.455, 443.5909, 247.7419, 358.375, 188.9608, 453.7249, 1307.7247]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

