created: 20230227222028000
creator: Drevarr
modified: 20230705163520466
modifier: drevarr
tags: ChartData
title: 202302272220_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Etchery Howls", "Cat Wigglebooty", "Venomina The Siren", "Jupi Jupi Jupi", "Tegan Parker", "Newtype Khan", "Zadie Miststep", "Arcanophage Farra", "Fribble Bibble", "Mac Aaroni", "Drevarr Moonwillow"];
const professions = ["Druid", "Scrapper", "Tempest", "Dragonhunter", "Tempest", "Spellbreaker", "Tempest", "Spellbreaker", "Scrapper", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 246.0854, 110.3544, 113.0665, 0.0, 95.4547, 28.5724, 0.0, 43.8501, 100.2594, 26.8128, 0.0, 82.6297, 0.0, 0.0, 0.0, 0.0], [64.0723, 14.7463, 22.1191, 10.045, 0.0, 0.0, 3.887, 0.0559, 0.4263, 0.0, 11.4307, 4.9728, 542.3359, 0.0, 0.0, 5.0161, 0.0, 5.014, 307.152], [0.0, 63.9397, 47.9147, 26.559, 0.0, 8.4557, 0.0, 0.0, 9.0993, 0.0, 0.0, 0.0, 309.5467, 0.0, 0.0, 31.086, 0.0, 0.0, 480.636, 29.5526], [0.0, 33.0316, 0.0, 0.0, 0.0, 0.6221, 164.5286, 345.1991, 55.2494, 8.9813, 29.1785, 12.0357, 75.3673, 292.3632], [0.0, 0.0, 21.3385, 0.0, 29.9414, 0.0, 0.0, 411.8901, 0.0, 0.0, 54.8244, 0.0, 30.9128, 633.0744, 27.3562], [60.5821, 0.0, 164.6852, 45.7628, 45.9152, 1243.9656, 89.1571], [0.0, 55.21, 24.4094, 18.7239, 12.6947, 14.1696, 0.0, 0.0, 0.0, 31.483, 0.0, 0.0, 570.8578, 30.2036, 31.4798, 23.6678, 0.0, 31.663, 876.5208, 31.4496], [74.292, 256.5847, 51.6514, 0.0, 43.2649, 117.9187, 0.0, 0.0, 7.7763, 69.2507, 5.1587, 0.0, 1031.8224, 0.0, 0.0, 56.6613, 0.0, 75.7621, 1501.632, 0.0], [76.249, 241.9565, 73.4089, 0.0, 85.3021, 85.0888, 26.8416, 0.0, 7.6528, 0.0, 119.4101, 0.0, 136.2547, 1671.049, 84.3603, 0.0, 166.8047, 0.0, 95.8969, 1557.9432], [373.5619, 732.7117, 251.0848, 0.0, 0.0, 0.0, 19.9757, 0.0, 2.4765, 18.5661, 31.483, 0.0, 0.0, 380.8515, 233.9359, 23.6099, 368.0159, 114.4746, 265.3056, 4508.8776, 231.6538], [258.6086, 365.3531, 214.742, 99.6464, 88.1081, 73.0829, 0.1555, 3.9847, 1.9698, 227.4957, 21.1837, 216.3168, 2634.5026, 103.5053, 103.194, 349.9295, 73.5687, 183.582, 3234.1968, 80.7955]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

