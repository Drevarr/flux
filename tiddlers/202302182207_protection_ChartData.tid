created: 20230218220736000
creator: Drevarr
modified: 20230705163519624
modifier: drevarr
tags: ChartData
title: 202302182207_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Venomina The Fierce", "Gabeulon", "Anita Strips", "El Mas Prron Aki", "Primal Clone", "Hyde En Sikh", "Blanco Padre Guard", "Aronorf Xideliesi", "Koralia Danai", "Kahless The Drunk", "Sygaldry Verdandi", "Drevarr Moonwillow", "Johosh The Great"];
const professions = ["Tempest", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[51.0073, 31.3686, 23.0026, 14.6156, 37.0665, 36.7774, 0.0, 0.0, 16.3052], [41.2192, 13.6579, 65.3963, 25.0536, 0.0, 13.6508, 27.4496, 40.9861], [29.8701, 42.1949, 48.2259, 46.799, 63.2764, 37.4519, 19.1011, 1.1966, 30.1668, 24.9287], [43.1122, 40.5594, 59.6585, 31.4755, 0.0, 80.1073, 40.2464, 4.8921, 0.0, 38.9225, 54.4169], [256.1249, 77.5056, 0.0, 96.4933], [77.3136, 58.8411, 38.9138, 48.9376, 0.0, 97.966, 33.6939, 29.8513, 14.6431, 48.321], [78.9188, 26.7732, 67.5965, 83.0406, 0.0, 85.5677, 42.4626, 20.9084, 0.0, 24.7574, 58.6295], [198.0014, 67.8321, 123.9386, 79.4277, 0.0, 150.7713, 72.2058, 0.0, 12.2026, 155.3706], [160.5568, 149.5836, 112.1198, 109.5347, 131.435, 109.7862, 33.1868, 0.0, 146.4994], [170.8762, 70.2297, 57.7886, 114.1876, 0.0, 174.2831, 145.6321, 22.9338, 0.0, 39.0232, 159.2363], [165.6018, 66.8664, 78.6038, 139.4228, 0.0, 183.341, 24.4433, 35.3199, 0.0, 14.9199, 268.7639], [117.7155, 145.9181, 126.3399, 21.6086, 189.1868, 162.0454, 42.4908, 181.34], [254.2504, 100.1331, 98.4665, 170.4056, 80.3731, 215.6537, 150.8034, 76.4978, 57.5579, 79.8075, 205.1784], [341.654, 223.0101, 215.3491, 183.5432, 0.0, 292.035, 205.4074, 0.0, 0.0, 14.9199, 344.888]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

