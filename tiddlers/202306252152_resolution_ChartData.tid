created: 20230625215204000
creator: Drevarr
modified: 20230705163536706
modifier: drevarr
tags: ChartData
title: 202306252152_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Rafaellagabriela", "Gavann", "Imalou", "Crusader Siolith", "Traidoruns Maximus", "Sygaldry Verdandi", "Gestern Yesteryear", "Solus Sanctus", "Gabe Malhorn", "Koralia Danai", "Tika Fiery", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 290.0539, 246.923], [0.0, 0.0, 71.393, 73.1621, 0.0, 31.5652, 0.0, 60.9991, 90.336, 59.4537, 11.7192, 90.5814, 74.8372, 0.0, 155.0938, 0.0, 0.0], [17.0899, 17.6088, 101.1675, 165.0687, 202.5005, 0.0, 18.9128, 148.7934, 292.992, 74.6437], [41.9732, 91.4664, 74.7159, 226.6857, 193.0219, 49.4785, 47.9588, 46.8096, 178.3051, 254.496, 145.0949, 46.284, 45.7939, 66.0218, 0.0, 217.855, 160.1846, 39.8765], [353.941, 181.5778, 47.5948, 41.4164, 43.4424, 163.2097, 422.304, 65.8031, 139.4448, 114.2332, 59.44, 143.2388, 221.1252, 101.7878, 143.7739], [23.9734, 183.1536, 217.0084, 317.1005, 136.9805, 96.444, 40.2629, 230.5372, 424.896, 58.36, 147.1968, 58.1037, 77.9843, 23.8557, 121.2084, 80.425, 26.2642], [28.4436, 256.3488, 173.6791, 317.1005, 210.3192, 41.6836, 76.14, 38.6842, 151.2321, 259.2, 107.2414, 55.9968, 134.0914, 162.7027, 0.0, 229.2661, 63.3494, 178.3843], [71.7223, 328.5504, 260.4364, 521.5393, 268.3262, 0.0, 161.8492, 5.8512, 192.0423, 343.584, 132.2138, 28.1352, 200.2855, 85.649, 47.7113, 218.2029, 108.2189, 5.6635], [133.159, 322.9752, 250.1716, 361.2702, 235.2605, 143.1074, 116.2968, 82.248, 191.394, 404.448, 165.4495, 215.5512, 130.5301, 189.7966, 405.6514, 188.4221, 105.2554], [132.9612, 310.0584, 231.3528, 455.6415, 272.7816, 9.8132, 140.1164, 98.0683, 150.2134, 575.136, 103.7173, 221.1144, 244.8795, 70.2349, 190.7403, 352.1444, 453.2774, 58.1587], [104.6758, 340.3632, 226.4836, 369.9614, 310.5648, 0.0, 136.7136, 84.7541, 200.5624, 428.16, 172.4369, 199.7736, 232.2987, 0.0, 262.9889, 438.9106, 436.8672, 142.8466], [236.0941, 311.9904, 118.8348, 382.6091, 282.3912, 56.215, 97.0832, 48.013, 205.7177, 563.712, 79.9602, 175.6512, 256.5312, 134.1587, 204.2673, 494.9921, 356.7379, 252.3413]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

