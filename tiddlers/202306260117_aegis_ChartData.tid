created: 20230626011754000
creator: Drevarr
modified: 20230705163537795
modifier: drevarr
tags: ChartData
title: 202306260117_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Imalou", "Drevarr Moonwillow", "Air One Com", "Tika Fiery", "Gabe Malhorn", "Traidoruns Maximus", "Kosair", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Chronomancer", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 17.123, 0.0, 7.1618, 0.0, 4.347, 23.2742, 0.0, 34.7325, 48.9477, 31.1494, 0.0, 5.888, 76.0474, 24.2138, 4.0768, 31.2816, 7.1388, 21.609, 0.0, 57.6, 0.0, 0.0], [4.2808, 0.0, 18.522, 80.5248, 7.8355, 20.093, 66.4146, 35.3956, 16.0075, 53.7558, 36.7756, 123.1475, 43.0353, 0.0, 10.396, 10.7837, 5.144, 10.2239], [16.8399, 30.989, 0.0, 33.957, 27.9072, 3.6221, 12.4115, 18.711, 0.0, 37.6501, 21.3707, 28.0092, 44.7966, 26.4629, 39.4832, 0.0, 50.83, 26.3975, 52.5486, 12.3578, 17.4656, 13.8095, 28.3078, 17.2514, 38.4, 9.6336, 0.0], [7.2171, 16.239, 0.0, 22.2264, 31.536, 26.1307, 3.8597, 27.6318, 12.3017, 43.1361, 40.2583, 157.1666, 137.1573, 36.2043, 41.906, 44.0334, 14.9205, 36.946, 26.3287, 19.505, 37.5036, 0.0, 136.4, 3.0672, 0.0], [17.8119, 30.8029, 99.9625, 136.4454, 33.696, 7.4659, 16.3469, 28.917, 31.8391, 24.1983, 14.6156, 8.5042, 117.2885, 263.937, 105.8805, 0.0, 50.278, 23.5893, 120.4724, 19.3966, 42.1184, 36.7474, 10.8765, 0.0, 204.6, 19.7208, 0.0], [61.9893, 14.7965, 44.4636, 123.6035, 82.2528, 17.7778, 16.4226, 70.1712, 0.0, 107.3757, 234.3608, 53.4184, 35.0889, 26.22, 62.2308, 21.1445, 54.8776, 46.2893, 96.6668, 85.6197, 15.3139, 216.6, 0.0, 0.0], [58.6845, 48.7634, 49.7799, 231.6485, 24.1056, 24.2458, 26.488, 78.435, 32.3908, 65.7563, 62.7201, 85.822, 102.9869, 64.7579, 20.333, 121.44, 201.9693, 79.3771, 17.1672, 86.0244, 21.6115, 34.0942, 10.3831, 308.0, 37.8, 57.1148], [24.6717, 133.812, 62.4994, 136.773, 124.171, 98.8513, 148.1619, 438.6266, 175.0102, 155.112, 138.0536, 34.6156, 24.429, 52.8436, 240.6137, 92.5586, 0.0, 251.2, 81.6912], [38.5641, 80.683, 15.6267, 324.7524, 218.592, 31.8595, 27.5854, 54.5832, 25.6819, 147.6698, 118.2347, 126.6265, 190.0074, 416.6606, 108.203, 117.9851, 57.684, 80.2036, 27.1127, 70.1974, 80.215, 74.002, 68.1884, 0.0, 475.0, 67.5648, 4.3417], [53.1441, 64.8163, 325.1803, 297.7103, 119.4048, 27.1286, 39.2401, 66.4146, 93.0357, 91.8694, 144.9612, 169.4251, 393.657, 176.6497, 23.0908, 85.422, 117.3849, 57.8915, 127.6867, 108.5918, 60.0364, 44.9707, 572.8, 89.0352, 2.6604], [81.8424, 52.5789, 198.3946, 452.1838, 65.7504, 17.8147, 14.4549, 81.7614, 26.5472, 139.4033, 112.0937, 114.2993, 28.4519, 0.0, 230.2047, 76.6811, 107.87, 467.2928, 101.0331, 64.7192, 104.0113, 57.0326, 64.3948, 44.0537, 550.8, 150.2712, 68.1223]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

