created: 20230626220846000
creator: Drevarr
modified: 20230705163539540
modifier: drevarr
tags: ChartData
title: 202306262208_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Cat Wigglebooty", "\u00c1rkantor", "My Birthday Girl", "Artakama Nahid", "Zadey Starbolt", "Ak\u00e1nt\u00f3r", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Scrapper", "Vindicator", "Scrapper", "Tempest", "Scrapper", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[540.9692, 22.4763, 28.3562, 33.2258, 13.6259, 60.1997, 59.4405, 30.2703, 26.544, 27.1303, 16.1577, 36.6776, 40.9556, 72.4307, 50.37, 61.7522, 80.5315, 40.1242, 94.3902, 62.6125], [1290.7121, 0.0, 48.8189, 60.7191, 95.1658, 95.1505, 32.9562, 0.0, 51.24, 5.1862, 2.0055, 0.0, 0.0, 0.0, 5.428, 0.0, 1.5269, 0.0, 1.9949], [131.1156, 149.6109, 122.2114, 311.8667, 149.5, 451.939, 251.2255, 128.128, 228.9645, 290.0254], [16.3086, 146.8513, 129.053, 74.2526, 130.7039, 118.8121, 89.8679, 165.9168, 119.952, 185.7566, 331.3927, 164.2683, 167.5237, 135.01, 444.349, 306.936, 82.9573, 295.569, 495.8811], [1571.6354, 122.199, 44.1738, 89.8665, 43.7021, 242.5465, 87.8985, 34.0612, 118.6752, 126.4082, 58.652, 102.626, 82.3046, 199.8879, 67.022, 238.6903, 144.9333, 147.8804, 207.4149, 179.1504], [377.8702, 550.0307, 280.0296, 592.0356, 308.982, 733.3762, 518.0328, 23.8392, 544.8654, 911.196], [3539.0195, 0.0, 160.9991, 490.3729, 59.4409, 587.1132, 104.3307, 78.9857, 384.384, 39.5489], [6910.4062, 75.8142, 42.2308, 132.4469, 134.75, 487.1418, 129.0249, 170.8716, 254.6208, 97.9299, 166.388, 294.8177, 406.3672, 154.468, 604.5283, 477.7083, 53.406, 417.5235, 451.2222], [5623.6853, 288.7962, 248.3144, 351.1953, 284.592, 477.8618, 175.2233, 137.0179, 314.496, 320.7305, 503.272, 433.7956, 244.8686, 799.4036, 211.186, 788.5706, 504.5652, 161.6112, 543.0573, 770.3338]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

