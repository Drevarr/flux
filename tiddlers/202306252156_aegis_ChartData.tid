created: 20230625215649000
creator: Drevarr
modified: 20230705163536777
modifier: drevarr
tags: ChartData
title: 202306252156_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Raelyn Sunray", "Drevarr Moonwillow", "Mmathuss", "Grimdox", "Crusader Siolith", "Tika Fiery", "Sygaldry Verdandi", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Chronomancer", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.1402, 0.0, 0.0, 0.0, 44.6842, 17.2431, 65.4454, 0.0, 72.5376, 3.4976, 4.7265, 3.7044, 0.0, 0.0, 0.2264, 8.004, 0.0, 0.0, 10.956, 91.705, 0.0, 181.815], [61.3284, 0.0, 2.5112, 4.6305, 9.5396, 23.2187, 51.6725, 57.7123, 5.8731, 390.15], [0.0, 0.0, 36.4541, 37.333, 265.0858, 124.2856, 24.7136, 16.6349, 11.0208, 17.1931, 32.7741, 33.8541, 12.4309, 3.2144, 14.3237, 0.0, 3.4542, 10.143, 33.5851, 21.7152, 24.299, 114.24], [13.2224, 31.7885, 11.3859, 0.8153, 239.7245, 9.602, 23.7983, 61.0128, 126.72, 17.5302, 80.1434, 70.538, 0.0, 11.3508, 18.5632, 6.67, 0.0, 11.5542, 62.4293, 37.0829, 14.021, 7.14], [214.776, 112.6656, 154.7381, 26.7491, 28.9149, 6.5293, 9.9401, 60.6541, 7.7616, 16.2946, 89.617, 9.4921, 398.565], [26.8456, 178.9321, 3.7315, 13.6559, 84.2357, 180.0721, 123.1105, 101.9434, 16.4736, 18.7523, 76.4037, 56.0291, 11.6794, 8.3173, 10.1871, 11.2665, 139.0779, 10.2092, 11.2747, 25.8077, 4.4462, 163.455], [30.8078, 225.45, 215.3757, 47.3542, 526.8504, 77.0868, 238.8985, 0.0, 7.104, 53.6864, 24.7754, 55.4116, 0.0, 6.3685, 19.5922, 0.0, 3.9405, 0.0, 23.904, 7.5168, 22.4585, 301.92], [30.9191, 15.1052, 193.8477, 11.7536, 486.0912, 17.1755, 469.1015, 159.2352, 65.7408, 67.0026, 134.4727, 69.7147, 0.0, 15.1077, 17.2049, 29.7534, 9.702, 30.5174, 79.6781, 25.1882, 330.99], [27.8695, 106.4124, 322.633, 0.0, 738.7982, 315.7854, 527.682, 127.8259, 97.1904, 80.4031, 83.8312, 99.7616, 11.2974, 15.2282, 36.5295, 0.0, 5.8983, 24.4314, 103.345, 119.7677, 37.4308, 442.935], [96.5639, 185.6205, 178.2518, 83.5322, 746.6482, 268.1133, 532.2586, 77.5382, 63.744, 56.3833, 169.3244, 84.8411, 14.3282, 8.0762, 41.0159, 8.6791, 25.2473, 62.4691, 160.609, 29.7792, 442.425], [59.9907, 549.1962, 357.1734, 71.5748, 984.863, 450.4844, 682.5999, 118.5782, 120.576, 157.3086, 169.3763, 74.9112, 59.2715, 42.0484, 19.942, 11.571, 26.8105, 24.718, 87.0504, 176.8954, 42.6628, 643.62]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

