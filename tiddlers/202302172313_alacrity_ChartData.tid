created: 20230217231312000
creator: Drevarr
modified: 20230705163519410
modifier: drevarr
tags: ChartData
title: 202302172313_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["\u00c9\u00efbhear", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Mac Aaroni", "Tegan Parker", "Primal Clone", "Zadie Miststep", "Bambiae", "Venomina The Siren", "Arka\u00f1"];
const professions = ["Scrapper", "Chronomancer", "Scrapper", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[47.3285, 8.1533, 10.7408, 51.6186, 53.6452, 23.7626, 25.1986, 17.3318, 15.1142, 30.4013, 17.484, 0.0, 26.3808, 9.5424, 69.1171, 14.5474, 0.0, 23.9338, 26.208, 22.2566, 0.0, 0.0, 16.2578, 5.313, 16.2639, 18.8743, 3.41], [37.2931, 21.0946, 0.0, 95.7107, 100.5735, 27.1646, 0.0, 0.0, 0.0, 0.0, 40.1856, 37.3575, 18.6862, 20.2752, 25.5091, 65.0909, 9.5654, 21.1603, 0.0, 0.0, 0.0, 0.0, 33.9293, 8.855, 35.688, 35.5146, 14.806], [44.8445, 30.5064, 30.5368, 46.9773, 44.8997, 33.2156, 10.2326, 22.7664, 10.2912, 86.4864, 36.0753, 25.8432, 13.8701, 110.6098, 41.5001, 0.0, 38.7768, 2.064, 13.3363, 3.3782, 0.0, 23.1336, 5.5085, 25.7447, 14.0417, 30.118], [78.7925, 46.7035, 39.5332, 141.9354, 43.6825, 7.6352, 43.1467, 38.1154, 43.5456, 266.0986, 78.3866, 10.9814, 31.717, 175.5882, 47.8695, 59.114], [25.2374, 40.8485, 42.434, 98.2195, 60.317, 0.0, 0.0, 40.9651, 181.3594, 23.6034, 0.0, 73.4208, 26.7994, 304.764, 104.1736, 0.0, 18.2842, 88.608, 32.7226, 27.6552, 0.0, 44.1895, 1.6445, 131.6526, 43.9943, 77.814], [64.021, 53.8445, 30.6348, 162.3821, 95.5696, 24.0742, 30.8074, 0.0, 54.3283, 124.8374, 84.7391, 22.7894, 68.4672, 35.4278, 229.6075, 38.7101, 64.9704, 0.0, 27.4013, 64.2528, 30.9285, 30.9305, 0.0, 48.8687, 111.6043, 31.152], [66.803, 35.5406, 0.0, 169.344, 4.7785, 9.3752, 23.8853, 0.0, 68.7888, 0.0, 57.6576, 40.2715, 0.0, 56.7168, 34.1107, 294.251, 127.6887, 104.9285, 64.464, 41.5325, 42.0624, 0.0, 41.7262, 5.7845, 257.0618, 40.4839, 62.348], [111.4157, 82.5178, 31.6932, 194.1811, 83.8488, 72.1447, 61.8062, 27.0504, 53.4989, 163.2758, 70.8685, 32.0587, 79.9872, 17.5526, 288.9946, 80.1604, 121.3637, 96.288, 19.3642, 25.8998, 31.995, 67.1945, 3.3695, 129.7256, 120.9959, 44.572], [43.4203, 43.2288, 81.3792, 201.4566, 93.5861, 62.7695, 66.2112, 81.5184, 42.3475, 245.4816, 40.6212, 0.0, 79.7184, 53.8406, 239.0021, 260.2597, 94.6565, 39.36, 18.6797, 50.1768, 42.1268, 85.4872, 5.934, 43.1648, 82.7003, 84.48], [120.1262, 57.8938, 30.2428, 369.7344, 226.6172, 66.7429, 92.1211, 0.0, 96.5736, 30.5357, 222.8554, 109.7412, 0.0, 111.936, 102.4666, 354.9802, 282.878, 0.0, 225.419, 30.624, 64.6502, 42.0955, 0.0, 81.9315]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

