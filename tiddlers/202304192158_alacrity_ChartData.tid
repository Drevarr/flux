created: 20230419215809000
creator: Drevarr
modified: 20230705163525879
modifier: drevarr
tags: ChartData
title: 202304192158_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Kos\u00e4ir", "Tegan Parker", "Eibh\u00ebar", "Anita Strips", "Venomina The Siren", "Zadie Miststep", "Miphest\u00f6", "Mac Chiato", "Abigail Ryn"];
const professions = ["Scrapper", "Renegade", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 2.7166, 39.0298, 44.9328, 136.2067, 72.2084, 51.2903, 48.0298, 0.0, 8.1396, 23.3848, 0.0, 73.14, 70.8896, 35.5488, 66.443, 105.9674, 18.4162, 40.0003, 0.0, 21.793, 26.4461], [234.0304, 507.9536, 265.4996], [43.178, 354.4042, 84.2179, 194.975, 119.5869, 174.5429, 40.1859, 0.0, 0.0, 121.3441, 0.0, 169.5576, 234.6132, 121.7664, 209.3917, 158.6816, 105.6656, 93.8995, 23.03, 56.675], [33.8936, 388.9037, 101.8358, 336.2736, 161.4261, 249.9181, 88.8978, 0.0, 0.0, 142.6851, 40.138, 209.7528, 335.7478, 109.4688, 255.1175, 114.4836, 93.2176, 97.511, 0.0, 32.321, 31.5581], [16.6589, 49.8576, 335.0635, 92.2454, 435.3523, 205.6113, 210.0365, 142.2705, 33.4742, 25.0648, 157.1817, 29.1287, 143.9904, 271.5369, 122.7744, 207.9859, 222.2836, 147.443, 95.4317, 0.0, 15.1077, 55.2096], [95.864, 250.2086, 157.6022, 629.4787, 196.4224, 51.3878, 151.9902, 0.0, 184.2738, 75.8608, 318.1272, 154.4688, 50.6016, 240.4675, 327.3886, 21.1445, 114.529, 39.8861, 56.2985, 46.7237], [46.8214, 510.8717, 142.968, 480.3302, 209.5215, 288.142, 171.8842, 0.0, 0.0, 131.468, 14.1916, 393.9384, 151.8927, 52.752, 259.039, 166.8744, 110.7812, 17.2915, 5.767, 9.6594, 56.8454], [62.4339, 541.3637, 135.6509, 381.888, 203.3304, 284.1441, 205.0219, 0.0, 5.9949, 160.3187, 110.4096, 184.7138, 244.944, 275.9827, 268.961, 130.3341, 207.936, 28.8641, 91.5936, 18.4714], [67.2758, 545.0227, 126.096, 815.543, 195.51, 377.5587, 156.651, 42.1402, 49.1477, 164.3112, 124.0264, 462.2448, 293.9582, 201.1296, 254.8956, 370.6164, 108.337, 171.4378, 41.7698, 88.3562, 98.9342], [58.4304, 115.4395, 971.2138, 199.4803, 1387.7386, 362.4755, 388.7724, 280.4486, 129.9888, 120.479, 173.0092, 198.1957, 661.1856, 367.0423, 269.136, 390.2973, 587.9412, 252.0854, 278.1965, 45.4406, 25.6094, 133.1846]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

