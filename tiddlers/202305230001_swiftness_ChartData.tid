created: 20230523000132000
creator: Drevarr
modified: 20230705163531354
modifier: drevarr
tags: ChartData
title: 202305230001_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Zefirokai", "Black Raspberry Pie", "Fribble Bibble", "Nocta Asthariel", "Crusader Siolith", "Elonith Primal", "Grasszanine", "Miphest\u00f6", "Gavann", "Sygaldry Verdandi", "Blanco Padre Guard", "Drevarr Moonwillow", "Venomina The Fierce", "Koralia Danai", "Bella Sassy", "M\u00e4raas"];
const professions = ["Tempest", "Chronomancer", "Scrapper", "Scourge", "Firebrand", "Tempest", "Spellbreaker", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1203.5348], [12.1695, 0.0, 96.8635, 292.4586, 286.7729, 0.0, 52.7055, 38.3821, 172.5389, 11.2088, 25.3872, 240.9204], [253.2054, 0.0, 71.1048, 175.4298, 362.4053, 0.0, 8.6715, 0.0, 548.2827, 0.0, 589.628], [53.5458, 0.0, 89.3506, 232.8102, 252.9484, 0.0, 33.825, 0.0, 1011.307, 33.1663, 5.166, 471.1688], [130.7922, 336.205, 121.5648, 354.2117, 84.9202, 0.0, 0.0, 641.629, 6.732, 37.3428, 797.4652], [81.7152, 183.352, 211.7178, 311.5635, 129.9433, 83.886, 231.5174, 870.7822, 19.9043, 252.027, 787.3268], [287.28, 25.1872, 145.34, 402.1164, 450.8531, 19.7067, 35.3625, 299.1454, 973.9011, 11.5866, 604.5688], [85.8249, 0.0, 358.4755, 705.062, 172.5001, 51.0245, 35.3197, 944.246, 66.6356, 72.5454, 775.8544], [0.0, 475.3736, 11.2266, 82.7755, 175.5005, 0.0, 1037.5922, 0.0, 430.1802, 1256.8948], [63.4809, 321.3579, 139.1418, 714.0959, 227.824, 157.8295, 27.0512, 610.2889, 0.0, 71.5122, 1293.7132], [170.5326, 90.9605, 108.297, 494.972, 45.6518, 54.161, 281.2304, 1407.6072, 121.9053, 336.0852, 691.5456], [194.8317, 8.514, 193.9954, 413.6832, 730.9031, 22.7292, 0.0, 239.3266, 1341.2202, 113.3568, 1312.9228], [296.4969, 16.3077, 610.9646, 497.7126, 811.3676, 110.961, 1251.2439, 0.0, 1367.6168], [64.5582, 0.0, 378.3312, 872.2728, 832.3766, 109.8014, 149.076, 239.0714, 1471.6353, 428.9256, 1150.1748], [357.8631, 819.8965, 807.975, 1022.508, 90.1672, 141.942, 446.651, 2125.0589, 1051.4286, 1885.7424], [319.6788, 36.249, 396.6664, 897.9012, 1879.255, 117.4181, 80.5445, 375.2971, 3095.5901, 60.8685, 20.9592, 1904.4184]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

