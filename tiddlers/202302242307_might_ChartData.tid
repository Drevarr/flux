created: 20230224230708000
creator: Drevarr
modified: 20230705163520134
modifier: drevarr
tags: ChartData
title: 202302242307_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Project Jupiter", "Air One Com", "Koralia Danai", "Arka\u00f1", "Black Raspberry Pie", "Tegan Parker", "Zadie Miststep", "Blanco Padre Guard", "Zaylen Harker", "Gavann", "Kahless The Drunk", "Venomina The Siren", "Ravioli Fetabringer", "Aronorf Xideliesi", "Drevarr Moonwillow", "Bella Sassy", "Abigail Ryn", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Druid", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[15.4144, 13.5782, 9.0202, 2.2733, 2.3856, 4.6271, 4.4183, 4.9436, 3.1212, 2.2424, 2.5402, 0.0, 0.9552, 2.1319, 8.928, 1.9543, 4.8211, 2.2917, 5.0126, 8.8435, 2.0355, 2.501, 2.4931, 16.6208, 14.2992, 8.7994, 1.2608, 0.0], [23.9081, 12.7296, 3.0624, 2.4509, 2.8896, 10.8182, 3.6093, 3.3516, 0.0689, 2.5542, 4.6099, 0.0, 13.9459, 0.7319, 1.404, 0.5076, 5.0443, 12.7041, 1.7842, 9.7843, 1.7317, 4.9588, 4.8336, 14.112, 1.08, 5.9065, 3.3349, 0.0], [26.3199, 15.5938, 7.0157, 4.0138, 2.2512, 7.2339, 6.0985, 8.5466, 0.0, 3.0576, 1.6794, 6.973, 0.0, 4.032, 0.7233, 2.7677, 9.9142, 3.6816, 5.2685, 0.881, 1.2936, 5.5714, 7.6832, 13.3056, 4.5202, 1.3014, 3.2703], [9.4374, 14.3208, 7.0157, 3.7651, 4.7712, 3.454, 12.3838, 5.6977, 4.7965, 0.0, 3.6691, 0.0, 9.6475, 0.0, 4.86, 0.0, 2.2766, 9.1171, 1.5859, 7.7146, 3.5848, 0.0, 0.0, 13.328, 9.7632, 13.1389, 9.1914, 4.9054], [11.22, 7.6378, 2.1715, 4.6531, 5.9136, 8.0811, 3.8583, 5.2788, 3.9933, 0.0, 0.0, 0.0, 16.716, 0.0, 10.476, 3.5151, 7.1424, 5.6795, 3.2285, 10.4742, 4.8, 0.0, 5.2661, 13.8768, 6.9984, 14.947, 3.9043, 4.4909], [65.6424, 22.0646, 0.0, 12.8582, 3.9984, 4.4316, 0.0, 0.0, 0.0, 1.589, 17.6165, 5.8253, 3.7253, 0.0, 12.852, 0.0, 1.6963, 3.7949, 1.9443, 0.0, 0.0, 0.0, 7.3696, 17.6256, 2.1697, 2.7249, 3.846], [20.238, 24.1862, 0.0, 10.8528, 13.2947, 13.5661, 4.3571, 0.0, 0.9058, 0.0, 0.0, 0.0, 30.7574, 0.0, 10.476, 0.0, 7.4102, 1.5942, 5.1826, 16.119, 0.0, 11.2112, 3.9178, 10.2704, 4.968, 1.8081, 4.3517, 0.0], [38.4836, 29.8085, 17.0381, 1.9181, 1.6464, 9.0586, 7.2809, 6.8708, 0.0, 3.6977, 3.7162, 0.0, 5.5402, 6.014, 5.436, 2.0304, 4.7765, 6.1777, 6.457, 7.1501, 0.0, 5.1744, 5.1643, 14.1904, 9.5472, 4.0381, 4.3924, 5.0205], [14.995, 21.8525, 18.3187, 7.033, 2.5872, 11.3396, 9.6456, 17.2607, 1.0786, 0.0, 1.032, 7.355, 0.0, 9.432, 3.0837, 3.6605, 10.0636, 10.9882, 9.9725, 3.7671, 3.2556, 7.1232, 20.6192, 2.8944, 11.3308, 9.3948, 4.0993], [24.1178, 39.4618, 8.185, 8.2051, 3.0912, 12.3823, 7.5921, 14.3281, 5.4391, 0.0, 7.9262, 5.9565, 18.5309, 2.16, 3.1979, 15.133, 10.2629, 8.411, 10.3488, 8.476, 15.4801, 8.3189, 9.016, 6.5694, 10.8182, 0.7139], [39.8468, 23.9741, 11.6928, 8.9155, 0.8064, 9.9058, 11.8237, 19.6069, 4.7965, 10.4396, 11.9011, 2.191, 0.0, 25.8859, 0.0, 6.264, 2.8426, 13.1688, 14.4976, 12.0643, 16.4954, 4.5266, 4.657, 9.4891, 24.5392, 10.4976, 14.6456, 5.5718, 3.2242], [62.4966, 13.3661, 35.1341, 10.4074, 9.2064, 6.908, 7.4676, 18.4338, 0.0, 1.5147, 8.4202, 0.0, 7.9282, 16.5464, 14.94, 0.698, 2.857, 6.6759, 4.3046, 1.2544, 7.8988, 0.0, 27.048, 28.5552, 41.6466, 2.7656], [30.9337, 25.4592, 11.4144, 12.361, 12.8688, 18.2476, 16.3043, 13.7416, 1.9048, 4.6332, 6.3974, 1.968, 1.416, 21.7786, 1.416, 9.18, 3.604, 8.8834, 14.9958, 7.788, 16.6208, 13.4887, 11.664, 9.2602, 32.536, 15.6816, 20.0096, 14.3158, 3.7539], [42.8877, 47.8421, 15.6461, 13.9949, 7.224, 15.5105, 6.1608, 11.2279, 0.5508, 5.049, 14.2531, 6.127, 5.496, 27.6053, 4.104, 3.5786, 11.2493, 19.7287, 6.2304, 8.4045, 13.7925, 6.9854, 10.8629, 22.736, 14.8608, 18.744, 5.0838, 1.6812], [25.5858, 18.2458, 20.6016, 10.9046, 16.4304, 12.9688, 9.21, 23.7964, 6.1736, 6.0885, 6.1387, 6.4682, 2.096, 24.1666, 2.5774, 12.96, 3.8958, 13.1242, 15.2947, 9.0624, 17.4362, 17.5596, 5.1744, 3.2818, 33.3984, 14.1264, 27.4831, 14.1938, 7.5999], [41.4197, 56.3285, 25.0003, 13.5331, 2.0496, 20.7241, 15.2463, 18.6014, 0.0, 4.6777, 6.2328, 2.2829, 0.352, 34.6738, 0.0, 12.888, 3.7689, 9.5083, 10.7611, 13.7635, 19.1923, 10.2684, 11.5562, 9.6926, 26.0288, 13.5216, 16.3934, 12.8517, 4.6521], [116.3946, 110.5354, 37.3613, 32.1456, 28.4592, 71.4915, 34.911, 14.3281, 6.7702, 18.9634, 10.9838], [72.0388, 41.9016, 20.9357, 12.6096, 16.128, 25.7422, 34.9733, 39.6327, 4.4523, 4.1135, 12.1363, 2.9126, 2.12, 43.3661, 6.2367, 15.48, 5.609, 27.4536, 22.3692, 12.6307, 24.8371, 14.0356, 9.1414, 1.9843, 43.5904, 31.0608, 32.8471, 22.7752, 16.2822], [95.0032, 60.2534, 26.8378, 49.6214, 50.7024, 54.6776, 48.2282, 140.5158, 27.999, 9.3407, 30.4349, 13.9466, 11.856, 132.3907, 23.3877, 19.944, 20.3674, 66.8261, 89.128, 42.5366, 88.3725, 41.9548, 32.7712, 20.123, 99.2544, 77.0853, 63.3639]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

