created: 20230501220820000
creator: Drevarr
modified: 20230705163527802
modifier: drevarr
tags: ChartData
title: 202305012208_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Lord Erin The Wise", "Joint Lee", "Flanneryflame", "Xkaet", "Primal Clone", "Black Raspberry Pie", "Eibh\u00ebar", "Tegan Parker", "Venomina The Siren", "Tyzzki", "Tika Sumiko", "Elonith Primal", "Mac Aaroni", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Scrapper", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1539, 0.0095, 0.0, 0.0909, 0.1837, 0.0576, 0.1931, 0.2069, 0.1729, 0.0, 0.1293, 0.1111, 0.0256, 0.1443], [0.0664, 0.0276, 0.2273, 0.7347, 0.2199, 0.263, 0.8621, 0.4541], [0.3174, 0.0427, 0.0, 0.0, 0.5306, 0.1937, 0.4159], [0.0602, 0.0, 0.0, 0.0455, 0.3878, 0.3194, 0.7287], [0.0332, 0.1172, 0.2273, 0.3265, 0.3403, 0.904], [0.2075, 0.0521, 0.0, 0.0, 0.449, 0.1518, 0.3791, 0.6724, 0.2602, 0.0, 0.3103, 0.0, 0.0, 0.2835], [0.3728, 0.019, 0.0, 0.0, 0.6531, 0.1728, 0.372, 0.1724, 0.1444, 0.0, 0.2069, 0.0, 0.0, 0.3557], [0.4646, 0.0047, 0.0, 0.0, 0.3265, 0.1571, 0.4455, 0.6724, 0.2256, 0.2545, 0.6293, 0.0, 0.0, 0.0876], [0.2524, 0.9655, 1.0947, 0.2364, 1.1897, 0.2308, 0.7371], [0.0593, 0.0379, 0.0, 0.0, 0.5306, 0.4607, 1.0225, 1.2069, 0.4992, 0.0182, 0.4397, 0.0, 0.0769, 0.4639], [0.587, 0.0142, 0.0, 0.0, 0.2653, 0.2461, 0.7654, 1.0862, 0.3474, 0.1818, 0.6379, 0.0, 0.0, 0.1856], [0.7524, 0.1469, 0.0, 0.0455, 0.2449, 0.6754, 0.7737, 1.3448, 0.7789, 0.0, 0.8534, 0.0159, 0.0, 0.3763], [1.6233, 0.09, 0.0414, 0.1818, 1.4082, 0.8377, 1.7903, 1.8276], [1.2304, 0.1185, 0.2345, 0.1818, 0.3061, 0.9162, 1.6327, 2.5, 1.1353, 0.4, 0.6983, 0.127, 0.0, 0.634], [1.5048, 0.1185, 0.0759, 0.3182, 1.1224, 0.9058, 1.737, 2.1034, 1.3248, 0.4364, 1.0172, 0.0794, 0.1795, 0.8918], [1.5143, 0.237, 0.2483, 0.0909, 1.3469, 0.9843, 1.7488, 1.8448, 1.3549, 1.0364, 1.181, 0.2063, 0.4872, 0.9948]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

