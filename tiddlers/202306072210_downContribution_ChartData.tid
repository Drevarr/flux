created: 20230607221050000
creator: Drevarr
modified: 20230705163534017
modifier: drevarr
tags: ChartData
title: 202306072210_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Rozaalyna", "Smol Gluvs", "Demon Sekhmet", "Skye Nightroad", "Lord Erin The Wise", "No Reserv\u00e9", "Kary\u00edna", "Chrozz", "Duke Silvver", "Sister Elonith", "Permanent Dawn", "Mistwalker Cael", "Be\u00eb", "Shaca Booey", "Cyclotechnist Farra", "Xanvias Einzbern"];
const professions = ["Spellbreaker", "Reaper", "Reaper", "Berserker", "Scrapper", "Weaver", "Vindicator", "Vindicator", "Willbender", "Vindicator", "Berserker", "Weaver", "Vindicator", "Reaper", "Berserker", "Scrapper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[51.5415, 13.74, 94.3936, 10.5811, 59.2707, 22.163, 71.6, 193.5185, 0.0, 368.6813, 72.48, 0.0, 14.7672], [32.3463, 43.5, 85.6569, 13.3514, 109.3057, 46.0435, 136.4, 447.1111, 129.9259, 351.6484, 0.0, 0.0], [41.5171, 221.46, 116.6068, 3.4122, 72.3493, 5.4783, 295.55, 7.4074, 27.7778, 31.2747, 45.2, 0.0, 65.9052], [166.8488, 126.35, 129.9895], [25.6634, 60.31, 128.495, 188.9432], [190.3805, 52.01, 85.3177, 278.524, 177.75, 358.4, 310.0926, 145.3333, 261.5934], [117.9317, 0.0, 89.5717, 155.1622, 114.5852, 0.0, 402.7, 768.4815, 182.2593, 306.0659, 348.98, 0.0, 17.3103], [46.8098, 158.95, 117.1229, 0.0, 92.1354, 37.9457, 237.95, 871.3519, 0.0, 72.2088, 195.78, 35.2545, 173.8966], [20.2585, 55.18, 143.6187, 35.8986, 68.7729, 30.5543, 289.95, 436.5556, 37.3333, 302.8022, 74.24, 154.5273, 8.3621], [41.8829, 205.43, 192.0114, 0.0, 0.0, 0.0, 0.0, 554.2593, 0.0, 466.7473, 72.0, 24.3273, 43.5862], [0.0, 96.19, 231.5143, 0.0, 95.1659, 258.7826, 482.0, 0.0, 940.0879, 34.46, 216.3273, 98.5862], [0.0, 0.0, 297.5625, 10.6419, 144.5415, 79.4783, 357.05, 478.9259, 0.0, 295.2527, 0.0, 12.8545, 89.319], [13.2293, 415.13, 248.0535, 93.1419, 268.8603, 119.163, 1174.9815, 229.3333, 532.967, 14.12, 0.0, 101.3276], [25.5951, 154.49, 286.889, 88.7297, 169.2227, 95.2174, 218.95, 967.8889, 72.3333, 773.5495, 110.34, 0.0, 122.2155], [27.839, 0.0, 280.2545, 22.6149, 238.4454, 23.3478, 520.3, 1315.0741, 50.8889, 873.3736, 31.4, 0.0, 293.1638], [154.5561, 57.6, 318.5634, 31.0811, 18.8952, 216.6196, 851.9259, 67.6296, 789.6484, 296.6, 0.0, 253.1897], [0.0, 91.05, 828.2756, 38.6757, 791.6157, 288.8043, 0.0, 1340.8704, 0.0, 861.3846, 436.74, 0.0, 32.8448]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

