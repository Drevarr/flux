created: 20230513000456000
creator: Drevarr
modified: 20230705163529678
modifier: drevarr
tags: ChartData
title: 202305130004_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Sub Train", "Smol Gluvs", "Zaidy Sagemist", "Solus Sanctus", "Newtype Khan", "Air One Com", "Ark Darkness", "Lucas Ryn", "Aronorf Xideliesi", "Johosh The Great", "Arriasa", "Miphest\u00f6", "Spreadflamesoflight", "Jupiter Four", "Black Raspberry Pie", "Leetle Dim", "Eibh\u00ebar", "High Sorcer Baradun", "Mac Aaroni", "Venomina The Techie", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Scourge", "Vindicator", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Druid", "Tempest", "Willbender", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Scrapper", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 1.994, 31.991, 55.1343, 0.9922, 0.0, 0.0, 0.0, 19.8333], [3.0, 1.994, 36.0418, 45.0491, 7.9922, 13.9944, 0.0, 0.0, 28.5833, 0.9762, 0.0, 15.1172, 0.0, 0.0, 23.112, 13.0238, 0.0, 7.0438, 0.0, 5.0, 0.0, 17.0102, 0.0, 22.0526, 0.0, 0.0, 0.0], [0.0, 6.0786, 23.9922, 52.7345, 0.0, 2.9355, 84.0417, 1.9762, 12.1935, 1.0, 113.0859, 0.0, 0.0, 87.912, 59.3095, 0.0, 72.7226, 0.0, 9.0543, 60.4592, 1.9545, 73.3947, 0.0, 0.0, 1.0], [2.0, 1.994, 27.0776, 63.5535, 22.2326, 3.9944, 0.0, 0.0, 40.9667, 0.0, 0.0, 0.0, 22.125, 0.0, 0.0, 19.152, 11.0179, 0.0, 13.5693, 0.0, 1.0, 18.2041, 0.0, 20.2456, 0.9828, 0.0, 0.0], [0.0, 5.006, 42.2776, 49.0568, 11.9922, 6.9944, 1.0, 0.0, 56.6917, 0.0, 41.3438, 0.0, 25.896, 17.0357, 0.0, 37.4964, 0.0, 0.0, 0.0, 22.0204, 18.0614, 0.0, 0.0, 0.0], [1.0, 7.9881, 35.5373, 60.4214, 1.9922, 15.2486, 0.0, 0.0, 26.3417, 0.0, 25.0312, 0.0, 0.0, 30.784, 12.0238, 0.0, 45.4453, 0.0, 0.0, 16.0, 0.9545, 12.193, 0.0, 0.0], [1.0, 2.994, 32.0537, 85.4945, 16.4264, 13.0621, 0.0, 0.0, 37.8833, 0.0, 0.0, 36.9453, 1.0, 0.0, 37.0, 21.4821, 0.0, 33.7737], [0.0, 11.9821, 9.997, 85.9039, 27.5581, 15.0339, 0.0, 0.9677, 40.9417, 0.0, 0.0, 41.8047, 0.0, 34.224, 38.5774, 0.0, 33.1752, 0.0, 0.0, 0.0, 27.0204, 4.9545, 27.5088, 0.0, 0.0], [7.0139, 6.9881, 79.2866, 89.6255, 5.9922, 10.9944, 0.0, 0.0, 53.5833, 0.0, 39.9219, 0.0, 29.52, 18.0952, 0.0, 48.4526, 0.0, 0.0, 0.0, 22.0612, 0.0, 25.7105, 2.9828, 2.0], [10.0278, 14.0476, 55.4209, 106.9345, 13.9922, 14.3616, 0.0, 0.0, 29.9167, 0.0, 0.0, 30.4766, 0.0, 0.0, 26.376, 22.0417, 0.0, 12.4891, 0.0, 0.0, 0.0, 29.3265, 0.0, 23.2193, 0.0, 1.0, 0.0], [10.6774, 186.9667, 8.0323, 11.1739, 180.875, 3.0, 0.0, 134.192, 110.6845, 2.9778, 196.0146, 20.1087, 1.0, 158.5204, 6.9545, 180.1228, 0.0, 4.0161], [0.0, 6.9881, 90.8149, 146.7969, 3.9922, 24.4181, 0.0, 0.0, 31.575, 0.0, 0.0, 54.6875, 0.0, 18.936, 11.0179, 0.0, 55.2993, 0.0, 2.0, 0.0, 27.2245, 0.0, 31.1667, 0.9828, 1.0, 0.0], [3.0, 0.994, 26.991, 185.7085, 0.0, 72.9096, 14.5185, 3.9355, 82.725, 0.0], [11.8889, 23.256, 28.0119, 146.4749, 42.2326, 31.0113, 0.0, 1.9677, 58.9333, 0.0, 49.4609, 0.0, 26.488, 46.2738, 0.0, 77.6569, 0.0, 0.0, 38.8571, 0.0, 45.5965, 0.0, 0.0, 0.0], [13.0417, 14.9762, 35.0985, 162.3985, 0.0, 30.0339, 0.0, 0.0, 48.1583, 0.0, 0.0, 41.6797, 2.0, 0.0, 61.36, 20.131, 0.0, 34.927, 2.0, 0.0, 40.7347, 0.0, 61.9649, 0.0, 0.0], [10.0417, 15.9881, 55.1015, 162.1255, 31.3333, 22.1017, 5.037, 4.9355, 47.3917, 0.0, 0.0, 7.9844, 0.0, 0.0, 37.4, 91.119, 0.9778, 16.0657, 0.0, 8.0109, 0.0, 47.1939, 0.0, 28.3421, 0.0, 9.0, 7.0645], [4.0139, 11.9821, 116.9284, 192.6059, 50.5814, 57.6328, 6.8519, 0.9677, 96.3583, 2.9524, 0.0, 0.0, 66.3281, 0.0, 1.9855, 68.824, 38.7024, 0.0, 61.0876, 0.0, 0.0, 39.7245, 0.0, 57.5, 0.0, 7.0, 7.1129], [19.0972, 24.6607, 191.7642, 269.1823, 32.2403, 82.2373, 7.0741, 0.9677, 115.5333], [11.0972, 31.0536, 170.8687, 197.6135, 80.6047, 97.3616, 2.0, 1.9677, 190.3833, 12.0238, 1.0, 0.0, 179.9297, 7.0, 0.0, 162.632, 113.4048, 0.0, 170.927, 0.0, 1.0, 16.5556, 152.7245, 10.9545, 157.9912, 14.0, 6.6452], [10.0278, 21.0952, 206.9612, 273.679, 42.3256, 74.9379, 9.0741, 0.0, 152.125, 1.0, 146.5312, 18.0, 0.0, 143.992, 83.6071, 0.0, 180.4745, 2.0, 1.0, 14.0889, 121.7959, 0.0, 99.3947, 1.9828, 0.0], [28.3472, 30.0357, 221.3701, 344.4094, 81.6357, 94.1299, 0.0, 0.9677, 158.2167, 2.0, 154.5781, 16.5652, 0.9855, 169.192, 120.631, 0.0, 162.2993, 0.0, 20.1522, 160.3878, 7.9091, 159.0088, 0.0, 0.0, 0.0], [25.1528, 73.8393, 241.2179, 351.7031, 72.4031, 85.8305, 4.037, 7.9032, 179.0833, 14.8571, 3.0, 1.0, 156.5312, 29.8261, 2.9855, 159.112, 129.4286, 1.9778, 116.5474, 10.0109, 2.0, 145.2041, 4.9545, 162.2105, 0.9828, 7.2143, 3.0484], [40.1667, 73.631, 265.7433, 373.5535, 56.7054, 83.4181, 26.5556, 6.9032, 168.6083, 22.619, 13.0645, 2.0, 178.6719, 28.5652, 10.971, 143.56, 156.5179, 0.0, 213.8394, 0.0, 23.0326, 1.0, 147.398, 24.5909, 172.693, 2.9828, 4.0, 15.1613]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

