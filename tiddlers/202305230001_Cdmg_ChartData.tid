created: 20230523000132000
creator: Drevarr
modified: 20230705163531133
modifier: drevarr
tags: ChartData
title: 202305230001_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Sumatra Satyricon", "Sire Nighthawk", "Drevarr Moonwillow", "Koralia Danai", "Zefirokai", "Hrakkus", "Bella Sassy", "Cedryn X", "Husky Guard", "Soxxdodendron", "Mistwalker Caelon", "Hauzzy", "Phaydyd", "Tootsy Pop Star", "M\u00e4raas", "Kary\u00edna", "Sygaldry Verdandi", "Lord Erin The Wise", "Eruwon", "Alnerian", "Smol Gluvs", "Nocta Asthariel", "Gavann", "Xanvias Einzbern", "Be\u00eb"];
const professions = ["Soulbeast", "Vindicator", "Scrapper", "Firebrand", "Tempest", "Catalyst", "Firebrand", "Berserker", "Dragonhunter", "Willbender", "Vindicator", "Berserker", "Dragonhunter", "Reaper", "Firebrand", "Vindicator", "Firebrand", "Weaver", "Weaver", "Dragonhunter", "Scourge", "Scourge", "Firebrand", "Berserker", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7.4286, 1.1971, 0.0, 7.5794, 1.0806, 0.0, 0.0, 4.9861, 5.6667, 0.0, 18.4914], [16.9905, 0.0, 7.6058, 0.0, 12.7903, 0.0, 0.0, 19.9275, 8.4634, 0.0], [10.4952, 28.6047, 0.3942, 2.9185, 14.7517, 18.1129, 6.9, 0.0, 7.9972, 0.0, 5.6362], [0.0, 0.0, 0.0, 0.0, 21.5034, 4.1935, 0.0, 0.0, 6.8591, 0.0, 9.6034], [38.831], [0.0, 0.9261, 0.0, 0.0, 39.0966], [14.6857, 16.1875, 1.1407, 9.4497, 2.371, 0.0, 0.0, 9.9609, 0.0, 12.2948], [1.4381, 7.6298, 0.0, 1.0582, 0.0, 13.9609, 0.0, 0.0, 21.1914], [54.7429, 0.0, 0.0096, 1.8444, 9.783, 11.9032, 6.5, 0.0, 17.9428, 0.2727, 0.0], [69.0571, 0.0, 6.3462, 0.0, 11.5548, 21.7097, 20.64, 0.0, 10.6541, 0.0, 0.0, 7.431], [21.9238, 1.024, 0.0, 12.0984, 10.4032, 0.0, 0.0, 28.4003, 5.3828], [2.9958, 0.0, 0.0, 54.2603], [27.68, 0.0, 15.2706, 38.1431], [0.9333, 0.0, 3.851, 0.6444, 9.8098, 13.1774, 17.36, 4.4483, 14.1283, 6.1515, 5.5488, 27.5966], [59.8095, 0.0, 0.6538, 0.0, 13.132, 13.6129, 19.66, 0.0, 13.325, 0.0, 0.0, 21.7138], [0.0, 0.0, 6.5721, 0.0, 17.9821, 2.0161, 31.6, 0.0, 26.7503, 0.0, 0.0, 21.3328], [27.9524, 8.3558, 2.5593, 10.1924, 13.871, 48.84, 0.0, 19.1869, 0.0, 0.0, 32.5224], [34.8, 0.0, 7.4952, 2.0852, 18.4743, 55.4839, 23.02, 0.0, 17.7587, 4.1212, 0.0, 37.6862], [0.0, 12.0086, 46.7322, 71.6061, 0.0, 30.7862], [0.0, 15.5968, 0.0, 0.0, 36.3333, 21.7879, 14.5305, 65.831], [76.8762, 0.0, 18.5385, 4.2259, 49.1275, 81.6935, 135.22, 3.3707, 41.1646, 0.0, 25.7121], [50.8381, 0.0, 48.2452, 2.137, 56.8613, 21.4194, 9.52, 0.0, 33.0488, 21.3636, 0.0, 41.7052], [59.0233, 1.9183, 0.0, 79.2371, 126.4, 0.0, 85.7741, 171.1515, 0.0, 11.5172], [35.7619, 39.9567, 0.0, 11.472, 133.2419, 93.4, 0.0, 78.9651, 0.0, 0.0, 67.7672], [127.3619, 13.0048, 0.8333, 73.953, 39.6129, 48.7, 0.2586, 95.6904, 5.0, 0.0, 87.3345]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

