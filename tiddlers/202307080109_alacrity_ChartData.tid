created: 20230708010915000
creator: Drevarr
tags: ChartData
title: 202307080109_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Mike The Archmagus", "Drevarr Moonwillow", "Rahani Sunray", "Pale Pam", "Tribal S", "Tegan Parker", "Venomina The Siren", "Mother Ship", "Zaedy Zae"];
const professions = ["Weaver", "Scrapper", "Chronomancer", "Druid", "Druid", "Tempest", "Tempest", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 416.4178, 0.0, 642.073], [27.9062, 0.0, 7.7343, 2.5949, 4.6488, 0.0, 27.7805, 0.0, 22.2145, 17.7034, 7.7827, 59.925, 11.5038, 50.5305, 5.2546, 14.3157, 42.4267, 39.2196, 69.3381, 12.8726, 36.153, 33.5993, 2.5617, 9.7417, 22.4885, 15.0876, 31.8136, 9.4185, 35.9944, 8.036, 339.6616, 0.0, 0.0, 40.8918, 108.0086], [14.3326, 49.7448, 0.0, 0.0, 0.0, 0.0, 7.644, 0.0, 69.4543, 9.9014, 0.0, 8.46, 0.0, 0.0, 7.4784, 0.0, 19.9226, 0.0, 26.3718, 0.0, 4.3524, 29.9966, 0.0, 0.0, 15.7821, 14.9923, 23.76, 0.0, 0.0, 31.8578, 9.002, 527.0194, 9.4738, 339.0432, 346.7051], [73.1367, 132.5964, 21.573, 119.903, 60.3408, 7.6342, 153.9283, 0.0, 38.2674, 79.056, 52.327, 203.98, 86.355, 52.1914, 65.0715, 181.6043, 124.4622, 404.9955], [101.7127, 248.724, 131.7391, 166.3171, 26.3952, 25.4182, 240.8515, 43.5375, 5.405, 81.8035, 47.7576, 398.6775, 9.3416, 133.4228, 74.725, 110.4213, 0.0, 109.2095, 160.3468, 478.5495, 0.0, 81.2565, 91.6736, 0.0, 117.4333, 126.005, 80.2692, 151.1146, 127.4175, 108.7241, 4.942], [29.8262, 164.406, 41.7078, 40.9306, 46.4256, 41.9737, 98.28, 22.6008, 0.0, 19.9066, 17.688, 152.045, 0.0, 48.1365, 4.8806, 19.1878, 20.1471, 91.6458, 246.8544, 36.1799, 88.6977, 41.862, 0.0, 0.0, 8.7349, 41.6926, 38.9664, 44.2943, 0.0, 102.3032, 26.46, 1543.5865, 0.0, 0.0, 286.0991, 218.6485], [78.6287, 81.1596, 79.2608, 80.4902, 84.0216, 30.9757, 65.6947, 70.9371, 51.6718, 58.6051, 91.9186, 82.6025, 29.9099, 53.0528, 4.5461, 60.7, 0.0, 9.7649, 147.8739, 286.9503, 79.7226, 17.9361, 72.7984, 5.9981, 0.0, 76.838, 0.0, 69.0624, 29.1217, 40.194, 142.1255, 16.52, 2044.6175, 80.3808], [85.594, 115.62, 117.5808, 158.0429, 43.8048, 50.8658, 44.9467, 0.0, 117.5587, 87.0134, 136.5514, 231.8275, 57.02, 131.5845, 4.8806, 93.703, 41.5834, 42.6512, 54.027, 310.9002, 42.7625, 103.3344, 52.3178, 32.8957, 0.0, 76.5122, 23.8409, 101.4948, 9.4217, 45.0765, 97.3022, 22.918, 1730.3399, 42.9828, 332.1562, 631.0108], [60.3222, 0.0, 57.2084, 102.816, 45.7704, 0.0, 91.597, 0.0, 51.0232, 57.8016, 22.11, 333.5825, 49.203, 206.568, 14.5632, 6.8408, 0.0, 105.7862, 90.2451, 322.4715, 33.2543, 60.0912, 86.7786, 0.0, 4.6234, 10.6596, 70.8658, 100.1484, 51.8806, 56.385, 76.9898, 76.104, 3281.179, 63.714, 0.0, 668.1864, 500.3229]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

