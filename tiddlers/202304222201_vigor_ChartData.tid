created: 20230422220129000
creator: Drevarr
modified: 20230705163526483
modifier: drevarr
tags: ChartData
title: 202304222201_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Miphest\u00f6", "Yummy Kiwi", "Tika Sumiko", "Xyntharos", "Rey Peltrow", "Arriasa", "Zadie Miststep", "Mac Aaroni", "Blancooo Padreee", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Dragonhunter", "Tempest", "Firebrand", "Tempest", "Vindicator", "Tempest", "Druid", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 215.647, 0.0, 58.9568, 521.2952, 30.008, 0.0, 57.3475], [104.0917, 0.5643, 0.0, 681.1656, 0.0, 8.9027, 67.2966, 0.0, 71.1113, 107.1572, 2.9518, 3.0139], [0.0, 62.5083, 0.0, 0.0, 726.7728, 33.4928, 0.0, 0.0, 0.0, 0.0, 33.3606, 112.7549, 67.8978, 14.2457, 0.0, 42.2239, 0.0, 65.4976, 34.1798, 0.0, 0.0], [0.0, 168.8658, 0.0, 59.8122, 640.4624, 24.0064, 102.9018, 32.7654, 0.0, 0.0, 0.0, 98.1078, 32.4716, 68.4052, 0.0, 0.0, 0.0, 32.5562, 0.0, 65.3703, 35.905], [18.225, 161.8019, 4.2174, 14.9366, 532.084, 61.7584, 3.167, 76.5404, 33.9426, 24.156, 32.0338, 13.9308, 96.3115, 33.9187, 67.1218, 26.9177, 23.7636, 4.2479, 35.8792, 58.7466, 58.7053, 49.2617], [506.748, 0.0, 756.0392, 415.6007, 166.122], [61.5114, 153.272, 75.1014, 82.1184, 334.9432, 178.6928, 0.0, 146.3749, 0.0, 0.0, 84.77, 0.0, 66.8791, 79.807, 170.6922, 81.3657, 66.0454, 0.0, 0.0, 85.6276, 130.5274, 129.5452], [0.0, 223.6438, 0.0, 0.0, 753.2544, 69.7928, 0.0, 143.2532, 0.0, 31.2345, 23.52, 24.5622, 210.31, 62.3803, 179.9327, 29.5721, 0.0, 0.0, 31.4485, 86.3397, 108.0796, 0.0], [427.1624, 26.2944, 65.471, 923.4232, 63.404, 0.0, 63.591, 88.8786, 15.7905, 79.38, 0.0, 223.1607, 55.1745, 183.3979, 30.661, 39.2679, 0.0, 60.5371, 57.9752, 15.8894, 31.381], [126.0829, 0.0, 0.0, 974.9152, 161.0752, 290.3218, 201.6446, 0.0, 0.0, 0.0, 238.4987, 85.0532, 253.5998, 0.0, 105.2554, 0.0, 0.0, 245.7863, 193.7649, 0.0], [34.1172, 261.3621, 85.1895, 46.4219, 1194.6144, 221.4784, 0.0, 273.5569, 0.0, 130.3335, 75.7662, 71.9269, 295.9816, 116.8915, 93.4315, 46.6892, 55.9604, 0.0, 0.0, 99.9286, 153.6149, 79.1346], [105.1218, 936.0254, 31.9077, 152.2941, 3626.9984, 359.612, 0.0, 394.4954, 312.8409, 148.4505, 153.2475, 74.1632, 740.783, 178.0358, 480.2483, 162.4932, 93.0258, 2.3915, 88.7589, 279.9068, 319.2268, 123.2978]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

