created: 20230701000406000
creator: Drevarr
modified: 20230705163539955
modifier: drevarr
tags: ChartData
title: 202307010004_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Drumina", "Pale Pam", "Drevarr Moonwillow", "Mike The Archmagus", "Tegan Parker", "Morton Saltbringer", "Klengah", "Demon Staph", "Sakis Ranger", "Arriasa", "Ak\u00e1nt\u00f3r", "Tribal S"];
const professions = ["Tempest", "Druid", "Druid", "Scrapper", "Tempest", "Tempest", "Chronomancer", "Druid", "Druid", "Druid", "Druid", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[42.2022, 0.0, 11.9434, 61.9776, 32.3868, 48.168, 31.8998, 36.7718, 21.0455, 0.0, 213.1858, 22.08], [65.562, 42.4005, 40.9501, 0.0, 67.8003, 31.49, 37.459, 3.9706, 47.047, 107.6026, 106.179], [68.2633, 7.8269, 125.087, 96.9984, 45.6182, 34.416, 45.6197, 46.1765, 39.347, 46.9771, 153.5243], [16.6859, 0.3154, 18.4205, 32.256, 7.3076, 22.536, 25.452, 15.7853, 2.646, 14.9573, 19.4501, 43.608, 16.8838, 7.5852, 19.8979, 30.503, 37.412, 34.5873, 0.0, 34.4726, 87.9466, 258.485], [0.0, 136.6929, 299.1082, 691.2517], [23.7961, 0.0, 48.2602, 22.8557, 54.8283, 6.12, 39.7051, 58.0608, 36.5785, 4.8226, 198.6529, 58.857, 80.6408, 38.0318, 22.5233, 132.681, 33.37, 58.2245, 0.0, 71.8108, 135.121, 338.3369], [52.3227, 59.7483, 25.5715, 56.2176, 63.8222, 0.0, 0.0, 6.5318, 79.282, 32.7542, 68.0752, 101.8477, 55.319, 97.1405, 120.038, 67.821, 47.0884, 3.6557, 87.8924, 245.7562, 321.1481], [0.0, 0.0, 71.473, 135.936, 48.8612, 48.36, 86.4398, 67.3747, 71.4175, 44.7005, 278.3107, 117.024, 63.6888, 78.0394, 85.0728, 103.964, 98.136, 48.2671, 0.0, 82.931, 255.3034, 92.9067], [33.5152, 58.1714, 128.569, 107.0899, 115.1914, 39.456, 64.5269, 128.7014, 61.446, 65.0923, 369.9882, 133.86, 64.0633, 120.4812, 137.7655, 170.046, 113.693, 73.9207], [81.3368, 63.16, 131.5267, 125.4298, 112.597, 35.256, 57.3034, 46.6301, 26.901, 40.8816, 135.2763, 137.517, 90.2741, 58.4237, 92.0279, 0.0, 43.945, 35.2077, 0.0, 126.1287, 241.488, 503.6977], [71.3883, 16.7719, 131.8637, 197.7754, 216.2865, 112.944, 89.2517, 117.1195, 104.909, 62.7667, 457.732, 139.449, 146.7124, 193.2286, 190.0896, 167.884, 139.637, 0.0, 0.0, 0.0, 0.0, 0.0], [114.1353, 61.1818, 93.3005, 99.7171, 122.2395, 25.464, 78.78, 89.329, 73.2305, 62.1058, 678.7852, 114.057, 134.7644, 134.3462, 116.67, 155.711, 138.697, 113.0679, 0.0, 187.8031, 234.2995, 516.0998], [92.2887, 30.7342, 190.9814, 162.8928, 138.4545, 76.8, 98.5598, 141.372, 87.5875, 40.5144, 527.337, 183.7815, 116.8593, 117.9763, 132.6067, 223.344, 123.375, 91.3229, 0.0, 186.7338, 255.7526, 817.2305]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

