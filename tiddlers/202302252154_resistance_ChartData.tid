created: 20230225215428000
creator: Drevarr
modified: 20230705163520299
modifier: drevarr
tags: ChartData
title: 202302252154_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Hyde En Sikh", "Grasszanine", "Sizklea", "Koralia Danai", "Smol Daddy Tika", "Xanvias Tseli", "Blanco Padre Guard", "Newtype Khan", "Gabe Malhorn", "Sygaldry Verdandi", "Aronorf Xideliesi", "Bella Sassy", "Venomina The Fierce"];
const professions = ["Chronomancer", "Chronomancer", "Spellbreaker", "Firebrand", "Firebrand", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[13.1134, 6.5501, 24.6886, 12.692, 12.588, 12.7296, 13.0446, 3.6337, 6.4702, 18.8093], [6.8234, 6.8432, 6.8998, 32.4917, 13.984, 7.4205, 19.4064, 19.1094, 0.0, 7.0584, 23.6167], [0.0, 19.5216, 16.8531, 85.7704, 0.0, 0.0, 32.9472, 0.0, 0.0], [8.3117, 0.0, 22.2144, 73.6819, 22.876, 27.181, 27.768, 22.7909], [14.5735, 6.9888, 7.1795, 25.7119, 14.972, 7.4412, 22.5576, 17.7688, 2.4969, 18.0577, 82.12], [57.7886, 0.0, 30.4662, 33.2592, 29.868, 61.5966, 8.58, 8.512, 8.1098, 43.8184], [24.0926, 0.0, 10.0233, 86.2181, 35.948, 53.8247, 26.364, 11.8955, 0.0, 9.9994, 32.5485], [7.5816, 0.0, 51.4452, 64.6636, 24.13, 23.2537, 47.8608, 14.1086, 24.7044, 44.1861], [40.3229, 0.0, 40.3496, 91.6547, 38.532, 38.6116, 38.8752, 35.9632, 0.0, 19.5871, 44.1599], [46.8374, 5.7456, 38.8811, 52.703, 65.55, 13.8902, 30.3264, 28.7706, 6.1509, 21.6458, 78.7575], [32.3762, 18.536, 31.0256, 115.5118, 52.858, 47.1069, 15.5688, 11.8104, 6.8231, 85.719], [49.4489, 0.0, 50.909, 92.5501, 53.542, 13.7869, 71.9472, 82.6515, 14.9991, 36.1738], [75.6194, 72.9344, 25.8275, 117.1108, 17.1, 15.5232, 75.0672, 23.4718, 2.4969, 7.3525, 53.3018], [163.9295, 101.916, 75.0321, 64.428, 31.8987, 53.8052, 50.5264, 51.8307]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

