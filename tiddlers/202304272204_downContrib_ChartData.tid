created: 20230427220456000
creator: Drevarr
modified: 20230705163526967
modifier: drevarr
tags: ChartData
title: 202304272204_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Red Reaper Robin", "Stark Gandalf", "Mysterious Nature", "Joint Lee", "Puny Tinker", "Zanos De Lione", "Necrotic Windrunner", "Blaize Harlot", "Heal Warriior", "Abserns Sorcerer", "Forever Broke", "Skye Nightroad", "Morv\u00fcs", "Mistwalker Caelon", "Tootsy Pop Tart", "Smol Gluvs", "Rylov", "Binkety Bonk", "Kmpek", "Mistwalker Caelon", "Clem Storage Xviii", "Heal Warriior", "Xanvias Tlesia"];
const professions = ["Reaper", "Weaver", "Tempest", "Scrapper", "Scrapper", "Vindicator", "Scourge", "Scourge", "Spellbreaker", "Weaver", "Scourge", "Scrapper", "Berserker", "Herald", "Reaper", "Scourge", "Catalyst", "Scrapper", "Vindicator", "Vindicator", "Scrapper", "Berserker", "Daredevil"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[39451.0, 30737.0, 5785.0, 14479.0], [13808.0, 22884.0, 28505.0, 1039.0, 1545.0, 25261.0], [16302.0, 4777.0, 5072.0, 6305.0, 129.0, 0.0, 10504.0, 47197.0, 2570.0, 8260.0, 0.0, 0.0, 0.0, 188.0], [3928.0, 38554.0, 29483.0, 0.0, 30493.0], [3721.0, 24653.0, 16787.0, 8235.0, 32787.0, 5151.0, 5140.0, 99.0, 4713.0, 4959.0], [10472.0, 5706.0, 5179.0, 17075.0, 0.0, 13263.0, 16828.0, 7787.0, 2149.0, 18488.0, 13142.0, 0.0, 0.0, 0.0, 2582.0, 2214.0, 0.0], [18209.0, 1011.0, 36841.0, 30793.0, 2408.0, 7368.0, 0.0, 4579.0, 8908.0, 7711.0, 321.0], [19467.0, 1831.0, 613.0, 25670.0, 589.0, 6626.0, 16867.0, 0.0, 2668.0, 10627.0, 13748.0, 247.0, 16280.0, 0.0, 3127.0, 1956.0, 0.0, 0.0], [62467.0, 1996.0, 32674.0, 23587.0, 11012.0, 1997.0], [3643.0, 51456.0, 5741.0, 14464.0, 2382.0, 8393.0, 47702.0], [1356.0, 0.0, 24547.0, 54383.0, 7399.0, 18471.0, 27233.0, 11298.0], [47313.0, 0.0, 17673.0, 24255.0, 2855.0, 47348.0, 15047.0], [78783.0, 27475.0, 0.0, 47984.0, 15559.0, 967.0, 9999.0, 5083.0, 304.0], [4905.0, 16510.0, 53154.0, 39318.0, 0.0, 31015.0, 44735.0], [10191.0, 24699.0, 31140.0, 19356.0, 0.0, 9.0, 23985.0, 954.0, 3848.0, 24078.0, 31478.0, 1262.0, 1371.0, 1072.0, 1216.0, 9751.0, 6650.0], [22120.0, 0.0, 10189.0, 15140.0, 1656.0, 19797.0, 11316.0, 4954.0, 1448.0, 17412.0, 28724.0, 1261.0, 20232.0, 2189.0, 17439.0, 10454.0, 8915.0, 4778.0], [26476.0, 1746.0, 26410.0, 24341.0, 2799.0, 25240.0, 5705.0, 15109.0, 11340.0, 7360.0, 55217.0], [0.0, 55008.0, 52521.0, 6051.0, 48257.0, 3919.0, 20108.0, 8326.0, 9106.0, 12255.0], [0.0, 60290.0, 58278.0, 9508.0, 89296.0, 3458.0, 6961.0, 26847.0, 0.0], [12963.0, 7220.0, 139098.0, 39182.0, 9465.0, 84793.0, 4041.0, 27173.0, 7518.0, 0.0], [0.0, 19745.0, 8390.0, 122343.0, 49554.0, 8442.0, 113888.0, 4141.0, 53360.0, 32288.0, 9062.0, 9948.0], [195511.0, 50020.0, 2640.0, 56527.0, 16633.0, 19241.0, 30337.0, 31034.0, 30470.0], [53740.0, 7858.0, 23827.0, 86791.0, 11047.0, 55064.0, 97039.0, 18273.0, 8465.0, 102169.0, 44431.0, 2536.0, 121729.0, 12737.0, 41598.0, 6824.0, 1940.0, 17540.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

