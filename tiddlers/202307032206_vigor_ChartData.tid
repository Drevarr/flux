created: 20230703220627000
creator: Drevarr
modified: 20230705163541620
modifier: drevarr
tags: ChartData
title: 202307032206_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Vopiscus Zergherdus", "Grasszanine", "Fribble Bibble", "Arcanophage Farra", "Zayde Sunsabre", "Newtype Khan", "Elphaba Rine", "Smol Daddy Tika", "Drevarr Moonwillow", "Artakama Nahid"];
const professions = ["Druid", "Scrapper", "Spellbreaker", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Tempest", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[151.837, 0.0, 67.3416, 35.0179, 0.0, 0.0, 227.232, 0.0, 0.0, 0.0, 0.0, 0.0, 71.3966, 0.0, 0.0, 39.1541, 28.6272, 59.3239, 0.0, 34.6355, 0.0, 0.0, 0.0, 80.183, 0.0, 184.4132], [0.0, 0.0, 86.7283, 51.6746, 1102.233, 5.2993, 10.7778, 22.9685, 5.3044], [57.5294, 48.7707, 48.6619, 69.552, 0.0, 0.0, 830.817, 0.0, 0.0, 0.0, 47.8943, 37.0392, 0.0, 0.0, 30.155, 38.8332, 19.3116, 0.0, 37.1686, 50.7989, 52.1136, 24.2128, 103.3032, 9.2742, 105.5156], [228.9134, 39.2704, 0.0, 172.1866, 9.2819, 1.1444, 1105.389, 71.3097, 163.2443, 75.356, 0.0, 62.7357, 38.1271, 22.4073, 50.4301], [135.9955, 0.0, 104.058, 58.4237, 20.2736, 2.3001, 1108.545, 125.7438, 193.1333, 124.9232, 6.0836, 0.0, 44.9328, 0.0, 78.2212, 0.0, 0.0, 82.2268, 0.0, 0.4264, 0.0, 45.0173, 0.0, 0.0, 0.0, 0.0], [336.1906, 28.7144, 146.7979, 134.689, 64.8103, 845.4135, 224.1162, 202.2928, 66.5703, 45.3413, 44.6039, 33.0692, 0.0], [109.5931, 77.2314, 98.5759, 84.1277, 122.3743, 27.9715, 603.585, 101.7167, 38.6267, 0.0, 0.0, 27.8447, 0.0, 0.0, 53.2219, 0.0, 54.054, 54.5807, 36.1297, 18.1328, 0.0, 168.7224, 141.9898, 124.3422, 66.6259, 212.6488], [269.2118, 160.8077, 223.655, 74.4722, 16.7066, 1138.9215, 111.8523, 78.0367, 133.3155, 18.4367, 33.4954, 34.5598], [314.1422, 84.7015, 129.4877, 76.2905, 0.0, 1015.8375, 181.67, 129.559, 111.2419, 6.997, 90.6826, 28.6143, 46.0917, 17.1315, 56.0376, 32.2308], [411.3216, 5.1156, 118.6769, 231.1546, 81.7185, 63.5613, 1564.587, 192.1143, 146.3113, 127.6769, 47.8177, 95.0397, 25.6289, 49.3231, 34.6691, 35.3976, 4.788, 77.924, 23.8643, 11.8879, 77.2675, 127.1794, 76.3268, 100.3517, 39.6838, 230.2224], [516.5606, 84.7424, 306.8273, 528.8371, 2972.163, 273.2509, 419.4699, 304.1342, 110.2176, 134.3559, 107.7527, 63.9324, 60.2267, 55.7693, 93.9456, 169.1628, 246.5531, 68.0671, 232.5154, 204.6106, 145.8974, 315.5099, 232.0762, 563.1663]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

