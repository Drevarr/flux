created: 20230520220730000
creator: Drevarr
modified: 20230705163530899
modifier: drevarr
tags: ChartData
title: 202305202207_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Pedro O Mago Preto", "Primal Clone", "High Sorcer Baradun", "Tegan Parker", "Arriasa", "Tika Mi", "Tribal S", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.106, 0.0123, 0.0, 0.0, 0.0, 0.129, 0.0, 0.1739, 0.0, 0.0, 0.1362, 0.0, 0.2812, 0.0845, 0.0909, 0.2636, 0.0, 0.1169, 0.1182, 0.1765, 0.1684, 0.0, 0.3182, 0.1173, 0.0, 0.0213, 0.1607, 0.2353, 0.3125, 0.027, 0.0, 0.0111, 0.0914], [0.4728, 0.1166, 0.1724, 0.0508, 0.025, 0.7742, 0.0, 0.1304, 0.3548, 0.1321, 0.2079, 0.4314, 0.6476, 0.0563, 0.0227], [0.1719, 0.0429, 0.0517, 0.1525, 0.0, 0.2903, 0.0, 0.337, 0.0, 0.0094, 0.2437, 0.1765, 0.3368, 0.1831, 0.1364, 0.186, 0.0, 0.026, 0.121, 0.0882, 0.1701, 0.0103, 0.4318, 0.1543, 0.1154, 0.0851, 0.3036, 0.0647, 0.2292, 0.0, 0.0, 0.0, 0.1168], [0.5673, 0.2515, 0.1724, 0.339, 0.05, 0.1935, 0.0, 0.4457, 0.0, 0.1321, 0.1541, 0.3542, 0.0845, 0.0227, 0.3101, 0.0392, 0.1818, 0.2507, 0.5441, 0.378, 0.0206, 0.1591, 0.4846, 0.0, 0.2941, 0.4167, 0.0405, 0.0204, 0.2778, 0.4518], [0.6676, 0.2515, 0.1379, 0.1186, 0.0, 0.7097, 0.0, 0.4022, 0.0, 0.0283, 0.3692, 0.1569, 0.8316, 0.1479, 0.0, 1.4496, 0.1373, 0.3766, 0.6369, 0.1324, 0.9622, 0.1031, 0.4773, 0.5586, 0.1154, 0.4362, 0.3571, 0.8235, 0.3125, 0.1224, 0.3333, 0.4975], [0.6905, 0.3252, 0.3276, 0.1695, 0.0, 0.5161, 0.0, 0.4891, 0.0, 0.1887, 0.509, 0.1569, 0.9358, 0.2324, 0.0, 1.5969, 0.2941, 0.5714, 0.8991, 0.3235, 1.0241, 0.0825, 0.8182, 0.8272, 0.2128, 0.2143, 0.7824, 0.7083, 0.1081, 0.0, 0.4, 0.731], [0.6046, 0.4049, 0.3793, 0.5932, 0.075, 1.0645, 0.0, 0.5543, 0.1935, 0.217, 0.6487, 0.1176, 0.9358, 0.1972, 0.2727, 1.4264, 0.0, 0.5455, 0.7406, 0.3529, 0.9708, 0.0412, 0.6136, 0.8981, 0.5957, 0.6607, 0.7588, 0.6458, 0.2297, 0.0612, 0.3556, 0.8325], [0.8166, 0.3313, 0.3276, 0.322, 0.0, 0.6129, 0.0, 0.5109, 0.0968, 0.3208, 0.4946, 0.3922, 1.1181, 0.1479, 0.2273, 1.1628, 0.0784, 0.2078, 0.9942, 0.8676, 1.1271, 0.0455, 0.7377, 0.3846, 0.6809, 0.2857, 0.6471, 0.1875, 0.0946, 0.0204, 0.0, 0.5787], [0.7851, 0.4233, 0.1897, 0.6441, 0.0, 0.7742, 0.0, 0.5435, 0.129, 0.0755, 0.6129, 0.1373, 1.0938, 0.1972, 0.0682, 1.2868, 0.1961, 0.6364, 0.9654, 0.3382, 0.8832, 0.5909, 0.8673, 0.6923, 0.9468, 0.8214, 0.9588, 1.125, 0.1757, 0.2041, 0.2111, 0.6294], [1.1862, 0.638, 0.5172, 0.7119, 0.0, 1.0645, 0.0196, 1.163, 0.0, 0.1792, 0.871, 0.2353, 1.3542, 0.2113, 0.4091, 1.4961, 0.3922, 0.3117, 0.8761, 0.7794, 1.0292, 0.0412, 1.1818, 0.8395, 0.4231, 0.7447, 0.5893, 0.8941, 1.4792, 0.1892, 0.1224, 0.3, 1.1371]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

