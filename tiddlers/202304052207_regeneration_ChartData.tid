created: 20230405220700000
creator: Drevarr
modified: 20230705163524542
modifier: drevarr
tags: ChartData
title: 202304052207_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elon\u00edth", "Bella Sassy", "Johosh The Great", "Ak\u00e1nt\u00f3r", "Arriasa", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[115.4498, 258.5796, 14.1856, 206.701, 17.5375, 178.6415, 544.4712, 493.9061, 13.9072, 98.2638, 106.2731, 34.5055, 321.0732], [6.9997, 11.3942, 50.8401, 127.7714, 0.0, 31.937, 12.8341, 118.789, 46.7274, 45.7542, 99.2314, 112.1294, 255.4587, 22.2622, 66.7736, 28.5701, 229.8991, 338.8392, 378.1393, 43.4571, 46.7604, 86.888, 41.1908, 268.956], [52.6703, 84.473, 42.5123, 196.7288, 42.4974, 0.0, 0.0, 84.071, 52.2264, 62.8768, 22.9055, 0.0, 335.7922, 181.1656, 44.433, 114.057, 55.2552, 77.7991, 479.304, 538.792, 43.3444, 255.843, 118.9664, 8.2118, 263.5992], [398.0677, 378.5038, 820.0908, 1353.7438, 455.932, 58.6709, 221.0107, 279.5411, 333.6342, 84.9856, 0.0], [269.7543, 428.5882, 634.5613, 1983.8531, 128.9605, 26.6167, 274.6145, 714.306, 41.7402, 102.4776, 165.0173, 1412.4726, 881.089, 495.6952, 984.9106, 29.2723, 0.0, 2399.9976, 3328.8208, 431.4832, 771.156, 260.6639, 474.8391, 1231.7292], [197.4389, 210.7934, 94.9978, 1638.0421, 54.4711, 118.8933, 0.0, 275.2602, 150.8102, 246.0138, 87.6673, 1718.636, 302.3486, 413.6018, 1093.811, 262.7856, 715.4784, 2607.444, 2609.678, 535.7307, 704.0286, 1372.5748, 425.8839, 1645.2072], [283.4784, 222.9885, 408.8365, 1212.7579, 401.5642, 72.3122, 220.2993, 234.6511, 308.6772, 449.6397, 323.742, 92.1298, 1495.2287, 914.734, 470.4128, 1031.9318, 338.5166, 686.1231, 2453.976, 2438.8533, 249.608, 856.53, 549.7416, 202.2955, 1576.1268]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

