created: 20230603215001000
creator: Drevarr
modified: 20230705163533404
modifier: drevarr
tags: ChartData
title: 202306032150_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Lord Erin The Wise", "Axunar", "Be\u00eb", "Tootsie Pop Rocks", "Tegan Parker", "Feberhinizer", "Sygaldry Verdandi", "Tacitus Tacitus", "Pamtastic", "Newtype Khan", "Koralia Danai", "Zadey Starbolt", "Duke Silvver", "Grasszanine", "Mammary Mission", "Artakama Nahid", "Tribal S", "Jo Hosh", "Smol Gluvs", "Tika Fiery", "Drevarr Moonwillow", "Xanvias Einzbern"];
const professions = ["Firebrand", "Weaver", "Dragonhunter", "Scourge", "Scrapper", "Tempest", "Soulbeast", "Dragonhunter", "Reaper", "Tempest", "Spellbreaker", "Firebrand", "Scrapper", "Vindicator", "Spellbreaker", "Scourge", "Tempest", "Druid", "Reaper", "Scourge", "Firebrand", "Scrapper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[580, 681, 795, 863, 502, 1137, 554, 4433, 277, 5640, 2000, 749, 663, 2798, 10937, 1095], [418, 629, 910, 482, 947, 1272, 267, 440, 901, 6530, 6103, 741, 670, 11460, 886, 2966], [640, 780, 586, 321, 400, 1126, 279, 479, 11017, 7264, 675, 491, 429, 3553, 7362, 8049], [482, 294, 550, 294, 263, 526, 287, 329, 2054, 2344, 366, 517, 10185, 9917, 962], [644, 533, 827, 281, 477, 177, 433, 425, 3665, 4978, 566, 9886, 6492, 3734, 9135], [445, 474, 1365, 368, 576, 291, 1037, 4008, 3265, 5517, 543, 538, 8954, 1510, 987], [617, 17403, 9346, 22310, 1578, 696, 440, 1829, 6401, 6285, 10470, 1064, 5870, 1594, 1561], [651, 285, 1191, 273, 560, 1663, 276, 362, 425, 6192], [393, 804, 3555, 1019, 391, 357, 1745, 2010], [271, 483, 865, 224, 466, 363, 330, 324, 420, 5573, 6363, 416, 337, 6577, 3603, 1000], [602, 271, 748, 276, 426, 308, 203, 363, 881, 6271, 5856, 400, 322, 5879, 5797, 3310], [321, 311, 475, 286, 539, 837, 297, 383, 13211, 1258, 414, 374, 2392, 2843, 1163], [798, 401, 592, 490, 840, 200, 267, 397, 4623, 5816, 445, 11347, 793, 11429, 8437], [11527, 480, 773, 217, 423, 1216, 283, 401, 762, 4549, 1518, 390, 278, 2951, 7614, 1132], [739, 239, 372, 446, 211, 550, 743, 3113, 1542, 370, 226, 3001, 5836, 2669], [1117, 404, 326, 849, 578, 6566, 17330, 855, 6498, 2282], [346, 303, 497, 221, 381, 414, 219, 275, 490, 5575, 6035, 371, 225, 791, 6406, 1046], [373, 364, 639, 257, 686, 368, 316, 265, 391, 1272, 3335, 366, 287, 1983, 8039, 6001], [467, 7394, 773, 342, 626, 932, 260, 327, 280, 2303, 5917, 328, 298, 2334, 5944, 724], [291, 324, 545, 219, 304, 455, 239, 291, 3567, 8911, 8437, 404, 314, 1202, 10905, 836], [362, 308, 547, 211, 438, 445, 164, 334, 302, 983, 6676, 317, 219, 4009, 6723, 1850], [289, 302, 562, 233, 271, 702, 196, 233, 400, 6079, 5319, 265, 244, 5542, 249, 752], [296, 285, 671, 182, 398, 232, 200, 235, 6265, 12351, 6451, 331, 238, 702, 8560, 759]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

