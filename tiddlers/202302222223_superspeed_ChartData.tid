created: 20230222222328000
creator: Drevarr
modified: 20230705163520040
modifier: drevarr
tags: ChartData
title: 202302222223_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Mustache Bloodclaw", "Venomina The Siren", "Mac Aaroni", "One Whole Keg", "Tootsie Pop Bringer", "Zadie Miststep", "Sp\u00edcy Cheese", "Arcanophage Farra", "Skye Nightroad", "My Birthday Girl", "Smol Daddy Tika", "Jeckyll Mbs", "Mike The Archmagus", "Etchery", "Cat Wigglebooty", "Xanvias Tseli", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Herald", "Tempest", "Tempest", "Berserker", "Scrapper", "Tempest", "Berserker", "Spellbreaker", "Scrapper", "Scrapper", "Berserker", "Berserker", "Tempest", "Scrapper", "Scrapper", "Berserker", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.21, 0, 0, 0.35, 0.358, 0.129, 0.465, 0.112], [0.205, 0.213, 0.303, 0.335, 0.216, 0.614, 0.622, 0.459, 0.466, 0.522, 0.825], [0, 0, 0.276, 0, 0.303, 0.251, 0.215, 0.463, 0.521, 0.307, 0.225, 0.243, 0.548], [1.086, 1.01, 0.398, 0.714, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0.404, 0.261, 0, 0.151, 0.25, 0.351, 0.769, 1.203, 0.538, 0.302, 0.159, 0.808], [0.894, 0.808, 0.194, 0.637, 0.303, 0.502, 0.865, 0.926, 0.619, 0.573, 0.479, 0.674, 0.826], [0, 1.343, 0.393, 0, 0.505, 0, 0.36, 0, 0.485, 0.207, 0.173, 0], [0, 0, 0.453, 0, 0.504, 0, 0.36, 0.973, 1.035, 0.676, 0.52, 0.405, 0.459], [0.353, 0.705, 0.701], [0, 1.827, 0.598, 0, 0, 0.252, 0, 0.758, 1.087, 0.563, 0.306, 0.384, 0.815], [1.089, 1.346, 0.639, 0, 0, 0.838, 0.698, 0.515, 0.516, 0.781, 0.408, 0.625, 0.29], [1.092, 1.346, 0.603, 1.008, 0.698, 1.042, 0.9, 1.035, 0.845, 0.577, 0.749, 0.915], [0.328, 0.808, 0.736, 0.857, 0.605, 0.497, 0.646, 0.926, 0.908, 0.641, 0.722, 0.823, 0.823], [2.293, 2.12, 1.162], [1.318, 2.693, 1.16, 0.852, 0.075, 0.712, 1.509, 1.116, 0.428, 1.085, 0.736, 1.121, 0.547], [1.09, 1.346, 1.202, 0.714, 0.68, 0.839, 1.525, 0.515, 0.806, 0.943, 0.812, 1.123, 0.906], [0.983, 3.017, 1.25, 0.482, 0.733, 0.503, 1.267, 1.39, 0.777, 1.163, 1.009, 0.982, 1.337], [1.321, 1.919, 1.74, 1.425, 1.618, 2.004, 1.741, 1.694, 1.306, 1.975, 2.199]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

