created: 20230306221045000
creator: Drevarr
modified: 20230705163521337
modifier: drevarr
tags: ChartData
title: 202303062210_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Tribal S", "Zadie Miststep", "Mac Aaroni", "Mike The Archmagus", "Drevarr Moonwillow", "\u00c1rkantor"];
const professions = ["Firebrand", "Druid", "Tempest", "Tempest", "Tempest", "Scrapper", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[315.2825, 182.2768, 29.8837, 553.5043, 277.2245, 851.3548, 121.8476, 651.1184, 307.3802, 46.2992, 774.9125, 1361.6418, 420.0165, 285.1314, 405.2424, 997.9505, 1281.5487, 579.7568, 238.3741, 1.25, 0.0, 460.988, 356.5, 413.1092, 1.8095, 586.8974, 551.6389, 444.2167, 396.2258, 327.7603, 338.6821, 262.1382, 232.9314], [778.1152, 488.3839, 1.8372, 986.359, 86.4694, 65.8788, 658.5376, 124.8, 1889.5263, 446.0165, 40.7402, 1395.0875, 2586.8209, 1770.6612, 1589.1095, 1518.404, 1223.8416, 1772.3274, 1383.1486, 1674.5544, 0.0, 10.0, 1168.6228, 834.9792, 1462.6639, 0.0, 1577.641, 1496.1528, 1156.1675, 1185.3871, 544.405, 965.3873, 537.8618, 436.6743], [1430.777, 902.5893, 1941.5043, 0.0, 2244.129, 109.2095, 2642.1842, 823.7438, 0.0, 1788.2875, 4102.5672, 1495.9587, 2663.365, 1603.7374, 2455.198, 2070.5841, 1877.4595, 782.8401, 1510.2335, 987.3125, 2004.2521, 0.0, 1853.8718, 1376.0417, 1090.4138, 1383.2968, 900.1074, 1251.5202, 836.5263, 879.3771], [1445.7584, 690.1875, 0.0, 2552.7778, 659.0408, 1842.8925, 483.1524, 2481.4342, 963.8347, 137.7323, 2098.725, 2508.4179, 1673.5537, 1890.8102, 1422.8485, 2421.9406, 850.1504, 2409.6351, 1969.0714, 3.4167, 0.0, 1268.2814, 1141.5833, 1613.0252, 575.619, 1338.859, 1035.0972, 1242.0197, 1468.6194, 1120.6281, 1022.6647, 851.8421, 599.1314], [1478.7063, 1399.4018, 1593.3162, 822.2041, 80.3636, 2004.871, 612.5524, 2872.5, 1267.4793, 226.9685, 2321.2688, 1388.4776, 2422.4628, 2952.438, 1326.5455, 2257.6238, 278.4167, 1618.6726, 1687.3649, 219.2211, 5.9524, 1623.4731, 1368.7292, 1726.6555, 651.4762, 2205.141, 2309.0833, 1513.6158, 2120.9226, 1159.5041, 1288.6532, 1043.2697, 1022.92], [1982.0855, 766.7946, 23.814, 2381.2564, 644.9796, 339.7273, 4395.5054, 435.3238, 3065.7632, 1404.6364, 388.5906, 2712.8125, 2445.4627, 2314.3636, 2738.0, 1880.101, 2657.2673, 135.5, 3556.6637, 1415.2838, 2631.8333, 206.9167, 1890.2156, 432.8542, 2097.3613, 388.619, 2676.0385, 1889.3056, 1682.9113, 2194.7226, 916.5702, 1440.4046, 995.5, 761.9143], [3009.9145, 1535.4464, 48.7674, 6999.4786, 377.6327, 578.4545, 7579.0108, 477.3429, 5355.8947, 2126.0248, 222.1969, 4437.9563, 7766.3582, 3835.438, 4083.3139, 3470.9293, 6291.3762, 6370.9912, 3568.8514, 4308.3265, 323.2083, 3553.6168, 4565.8235, 239.8095, 3830.5128, 2919.5139, 3222.5714, 4181.5677, 1381.2893, 2170.9133, 1562.6645, 1340.6229]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

