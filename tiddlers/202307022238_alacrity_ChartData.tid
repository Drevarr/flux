created: 20230702223827000
creator: Drevarr
modified: 20230705163540907
modifier: drevarr
tags: ChartData
title: 202307022238_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Vini Boy", "Synomi\u00f1 Spyce", "Valaria Emberstorm", "Sarette Fay", "Perpetual Hope", "Spirita Demon", "Demon Staph", "S\u00e2ucy K\u00e2t", "Artakama Nahid"];
const professions = ["Tempest", "Scourge", "Tempest", "Chronomancer", "Tempest", "Druid", "Druid", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.9328, 42.9195, 291.3183, 123.2129, 57.579], [0.0, 2.4278, 8.82, 53.549, 37.7645, 55.9424, 11.3702, 32.1552, 3.6551, 42.6699, 34.6399, 0.0, 5.0736, 43.2326, 10.2384, 8.4672, 14.2171, 0.0, 49.9122, 43.0808, 69.3792, 5.0654, 39.1691, 6.1736, 22.4681, 6.3063, 20.6032, 12.3833, 3.795, 22.4424, 3.6937, 2.5563, 9.9068, 5.7809, 0.0, 0.0, 8.6486, 35.7253, 19.9454, 11.6076, 63.0002, 7.362], [19.1954, 0.0, 25.7544, 39.5778, 69.5935, 12.7764, 0.0, 87.444, 0.0, 145.7001, 115.1741, 0.0, 0.0, 0.0, 46.1067, 0.0, 34.8516, 0.0, 0.0, 86.8131, 0.0, 41.4612, 0.0, 0.0, 0.0, 77.5022, 37.1322, 0.0, 110.7545, 0.0, 0.0, 0.0, 0.0, 87.8942, 0.0, 0.0, 0.0, 81.2115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 85.1826, 72.6573, 247.5744, 0.0, 262.9407, 46.116, 58.4602, 0.0, 59.2925, 17.333, 133.8418, 66.924, 0.0, 8.064, 0.0, 47.4201, 196.7314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.2834, 0.0, 37.6992, 0.0, 0.0, 8.5925, 0.0, 0.0, 0.0, 9.3732, 0.0, 0.0, 0.0, 9.5113, 0.0, 18.8387, 0.0, 0.0, 0.0, 0.0, 56.6157, 0.0], [86.2596, 43.4707, 163.8889, 36.5712, 30.4688, 25.7341, 56.9645, 122.8248, 141.3518, 42.0768, 45.1526, 160.2455, 228.505, 106.0841, 42.2792, 230.9694, 26.568], [66.9412, 0.0, 305.8722, 391.5648, 26.1801, 113.6004, 0.0, 298.5642, 85.2453, 37.5441, 229.2802, 25.1103, 0.0, 0.0, 80.4428, 69.7435, 156.1459, 0.0, 55.6046, 234.4469, 246.9533, 40.5328, 0.0, 55.9678, 0.0, 305.7058], [179.4932, 118.6416, 228.839, 0.0, 269.0556, 139.536, 52.7955, 0.0, 85.3115, 100.1342, 130.4402, 128.6766, 0.0, 228.7656, 72.7693, 413.6769, 331.564, 53.6435, 16.5383, 64.5792, 131.479, 129.276, 111.7746], [0.0, 135.6112, 101.3846, 213.2918, 66.7258, 65.5373, 136.026, 40.4949, 0.0, 44.9158, 63.9837, 95.4525, 78.8486, 38.556, 0.0, 292.6287, 169.4725, 56.5845, 66.137, 61.0848, 250.976, 385.1712, 39.9168, 65.0364, 28.6236, 222.4719, 79.691, 285.9516, 44.4156, 133.2346, 40.5248, 153.153], [69.5617, 134.676, 139.0144, 211.9142, 70.7885, 376.534, 129.276, 45.7064, 43.2224, 61.5857, 85.6173, 134.0153, 90.4387, 75.8722, 206.64, 89.0787, 234.3159, 314.8286, 44.6505, 31.051, 66.7296, 125.0022, 221.1624, 76.8474, 42.9343, 42.3487, 265.4874, 261.8055, 376.002, 64.4905, 131.3805, 216.6863, 89.6112, 31.6994, 174.2504, 77.9367, 43.4051, 59.8653, 84.1979, 258.0883, 27.7862, 43.5326, 176.4617, 309.4237, 56.5356, 59.5898, 90.4349, 62.8082, 273.5955, 66.294]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

