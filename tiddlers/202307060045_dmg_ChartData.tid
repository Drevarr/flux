created: 20230706004528000
creator: Drevarr
tags: ChartData
title: 202307060045_dmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Artakama Nahid", "Zaedy Zae", "Mike The Archmagus", "Stoic Rapidfire", "Tegan Parker", "Ryvalia Fazebringer", "Sygaldry Verdandi", "Solus Sanctus", "Tika Fiery", "Newtype Khan", "Primal Clone", "Mistwalker Cael", "Eibh\u00ebar", "River No Hug", "Xyntharos", "Kary\u00edna", "Grasszanine", "Legacy Of Mathus", "Johosh The Mighty"];
const professions = ["Tempest", "Druid", "Tempest", "Druid", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Chronomancer", "Vindicator", "Chronomancer", "Reaper", "Vindicator", "Vindicator", "Berserker", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[186.7195, 76.3462, 101.6029, 65.8491, 118.9385], [34.0854, 4.1731, 78.8529, 76.3019, 0.0, 42.2375, 150.3294, 7.9872, 6.569, 33.4779, 93.3333, 0.0], [184.6463, 324.6346, 220.7647, 28.2264], [187.3231, 91.4875, 79.1294, 58.7308, 11.6552, 77.1062, 152.7067, 0.0549], [16.0488, 5.5769, 228.5294, 84.6792, 214.7077, 37.6375, 40.4118, 26.8333, 41.7241, 118.7788, 73.5867, 1.1209], [47.9634, 17.8077, 103.9265, 54.3585, 114.9231, 111.3375, 249.6235, 69.0128, 8.569, 26.8496, 108.12], [95.9268, 253.0, 125.8971, 128.8491, 192.9846, 191.775, 86.2353, 0.0, 53.7586, 131.6637, 105.6667, 0.0], [189.7805, 144.0, 162.9265, 42.4717, 284.6462, 242.1625, 87.5765, 164.4103, 438.8276, 153.5398, 302.5733, 0.0], [214.9024, 98.9231, 76.9853, 233.9811, 525.8308, 203.8375, 140.7176, 187.9103, 72.5, 520.7876, 606.5867, 4.5934], [570.3902, 74.6346, 383.2794, 227.7547, 624.8, 399.5125, 284.2, 254.8846, 87.1897, 522.3274, 602.5733], [766.0, 762.8654, 372.5, 576.0, 1054.9538, 708.2875, 507.4118, 394.9359, 529.2759, 833.7522, 1400.5867], [3317.7195, 3088.9423, 2515.6471, 3430.0189], [1492.6341, 1216.6154, 736.8676, 1152.717, 1072.9385, 1707.2625, 1110.7294, 1041.3077, 713.3103, 1435.9558, 1798.5733, 0.0], [541.1341, 1728.75, 1571.4412, 1826.2075, 2324.2462, 2129.0875, 1369.1765, 599.3974, 1045.2586, 2586.8673, 2018.04], [3731.0625, 1800.1529, 1982.4103, 2054.6724, 2559.9469, 3888.48, 232.2088], [298.6463, 1602.4615, 2223.6176, 3484.9434, 2241.6615, 2495.425, 39.0824, 3336.9103, 306.8793, 2131.6018, 2666.0667, 100.1868], [1402.4756, 1961.5962, 2233.7647, 1825.6226, 2946.1385, 1664.1625, 1470.9529, 2417.5769, 1327.7931, 2254.885, 2403.5867], [1177.0122, 2721.5577, 3994.6765, 3744.8113, 2113.5077, 4074.275, 929.6824, 3489.859, 2631.4483, 1703.2124, 3801.96, 811.2198], [1963.4146, 3204.8654, 3568.9559, 1615.4528, 4066.2154, 5080.9125, 3185.9176, 1930.141, 3633.069, 3947.1416, 5995.48]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

