created: 20230626012458000
creator: Drevarr
modified: 20230705163538371
modifier: drevarr
tags: ChartData
title: 202306260124_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Versimon", "Xanvias Einzbern", "Zayde Sunsabre", "Proteccdebussy", "Smol Daddy Tika", "Mistwalker Cael", "Regis Hawkesburne", "No Reserv\u00e9", "Blanco Padre Guard", "Ryvalia Fazebringer", "Raelyn Sunray", "Bender Ale Devourer", "Crusader Siolith", "Sygaldry Verdandi", "Solus Sanctus", "Bella Sassy", "Koralia Danai"];
const professions = ["Chronomancer", "Berserker", "Spellbreaker", "Firebrand", "Berserker", "Vindicator", "Berserker", "Vindicator", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.887, 3.7224, 3.676, 2.9077, 1.6402], [1.0723, 0.9072, 0.9702, 1.0937, 1.1946, 1.031, 0.7459, 0.7056, 1.0771, 0.0, 1.129, 0.9926, 1.1544, 1.0771, 0.0], [0.0, 0.0, 0.0, 3.4026, 0.0, 5.5414, 1.5926, 0.0, 0.3168, 0.0, 0.0, 0.0, 0.8506, 1.225, 1.1799, 0.0], [1.9218, 3.0929, 2.52, 1.3776, 1.5206, 1.804, 1.9958], [0.0, 1.3219, 1.323, 4.7393, 1.5322, 3.8661, 0.6854, 1.0584], [0.0, 0.2074, 0.3969, 3.038, 0.6752, 9.5364, 0.0, 0.4704, 0.1901, 0.0, 0.4637, 1.5115, 0.0304, 0.359, 0.295, 0.3216], [3.7784, 0.0, 0.2646, 3.6456, 0.3116, 2.7063, 1.4717, 0.9912, 1.3939, 0.858, 1.0483, 0.0, 1.8532, 0.5702, 1.6013, 2.219], [0.0, 1.4256, 0.7938, 14.0963, 1.2466, 9.923], [0.0, 1.0886, 0.5292, 10.3292, 3.0125, 10.4385, 2.8426, 1.68, 4.4352, 0.0, 0.7459, 2.7523, 3.3418, 4.2029, 2.6127, 0.9005], [1.1233, 4.6397, 2.2932, 10.5722, 2.0776, 3.4795, 3.0038, 4.7208, 7.033, 0.968, 3.2054, 1.5566, 4.0405, 1.6474, 4.0454, 2.6693], [2.6041, 3.4214, 4.7187, 4.6178, 3.7397, 4.3816, 3.1248, 3.7296, 3.5798, 0.462, 3.4474, 5.5046, 4.0405, 3.4426, 4.0876, 5.1456], [0.817, 4.3805, 5.1597, 6.5621, 4.0513, 7.3456, 4.8182, 0.588, 3.0413, 0.154, 2.1974, 4.2187, 6.1671, 3.0835, 5.8996, 2.0904], [7.0463, 2.6179, 3.528, 11.3014, 3.1164, 11.9849, 2.3184, 0.4704, 5.2906, 3.652, 3.8102, 1.6018, 4.0102, 1.7741, 3.4555, 4.1808], [1.7871, 4.873, 7.6734, 8.9925, 4.2071, 10.1807, 4.153, 3.108, 5.8925, 3.8506, 3.745, 3.4026, 4.583, 3.1605, 2.9909], [1.1233, 3.4474, 6.4827, 12.8811, 6.2328, 10.4385, 4.032, 4.5696, 6.9379, 0.814, 1.3104, 7.3546, 5.1646, 6.5894, 5.6889, 4.5346], [4.1359, 3.4474, 5.9976, 18.5926, 2.7009, 15.5933, 4.3142, 1.8144, 7.6349, 1.7136, 4.8053, 8.2026, 4.7942, 6.5738, 3.6984], [5.5655, 6.1949, 9.5256, 17.7419, 4.2591, 22.1656, 5.1408, 5.1576, 7.825, 4.7779, 5.0534, 8.4456, 5.4912, 8.3437, 4.9205]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

