created: 20230330095927000
creator: Drevarr
modified: 20230705163523385
modifier: drevarr
tags: ChartData
title: 202303300959_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Ryvalia Fazebringer", "Einar Xxl", "Fribble Bibble", "Ark Darkness", "Rafaellagabriela", "Gavann", "Drevarr Moonwillow", "Solus Sanctus", "Zaylen Harker", "Sygaldry Verdandi", "Koralia Danai", "Johosh The Great", "Bella Sassy", "Sister Elon\u00edth"];
const professions = ["Firebrand", "Chronomancer", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 49.8039, 0.0, 89.0006, 582.2736], [0.0, 0.0, 28.52, 1.3367, 403.448, 33.3277, 50.1795, 0.0, 62.3785, 42.0638, 0.0, 11.3942, 108.6875, 0.0, 17.0496], [595.3584, 35.6965, 37.2499, 0.0, 25.5584, 51.1056, 45.9425], [5.2361, 0.0, 24.283, 817.8, 25.7936, 13.7301, 0.0, 7.0286, 13.9277, 12.0437, 0.0, 26.0928], [0.0, 0.0, 1070.7728], [580.0928, 109.9847, 110.0256, 0.0, 110.0609, 48.073, 0.0, 0.0, 123.0813, 0.0, 46.1376], [985.7216, 34.2489, 46.9163, 0.0, 106.0674, 8.761, 6.6053, 22.2662, 0.0, 81.6192], [0.0, 45.0549, 0.23, 5.2353, 1221.248, 38.0653, 70.4977, 0.0, 55.8291, 32.8536, 58.5737, 0.0, 48.3264], [18.1094, 401.7192, 18.055, 121.7493, 1286.672, 69.9454, 179.846, 37.4827, 148.7978, 57.8448, 12.1392, 13.4376, 80.0762, 18.7024, 112.6656], [0.0, 238.1821, 0.0, 119.967, 3066.2048, 81.8552, 60.0923, 21.8498, 113.4154, 60.709, 84.9525, 18.0781, 87.3792], [391.7341, 30.636, 132.6655, 3050.9392, 57.6408, 188.1579, 0.0, 220.1217, 172.6358, 0.0, 25.1909, 160.505, 94.846, 153.1584], [0.0, 482.6963, 3.956, 286.4951, 4695.2624, 58.8581, 55.0436, 21.5865, 111.179, 73.1765, 0.0, 55.2837, 50.8286, 114.4512], [0.0, 361.7787, 100.947, 244.0555, 4939.512, 39.3484, 59.9076, 153.7785, 106.9459, 78.0062, 0.0, 64.0962, 77.8463, 178.6176], [104.0774, 635.3959, 45.103, 373.2679, 4494.6288, 81.9868, 205.2744, 44.8537, 151.2738, 267.6586, 42.9754, 202.2763, 36.1277, 132.768], [33.166, 389.0853, 5633.0064, 84.1253, 136.747, 169.7355, 141.6095, 111.7584, 0.0, 96.8788, 42.8254, 147.6288]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

