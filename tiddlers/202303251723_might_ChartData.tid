created: 20230325172304000
creator: Drevarr
modified: 20230705163523014
modifier: drevarr
tags: ChartData
title: 202303251723_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Koralia Danai", "Mac Chiato", "Aronorf Xideliesi", "High Sorcer Baradun", "Gabe Malhorn", "Zaylen Harker", "Zadie Miststep", "Blanco Padre Guard", "Whose Guardian", "Sygaldry Verdandi", "Venomina The Siren", "K\u00f4sair", "Johosh The Great", "Tika Sumiko", "Bella Sassy", "Newtype Khan", "Zefirokai", "Arcanophage Farra", "Abigail Ryn"];
const professions = ["Chronomancer", "Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Tempest", "Firebrand", "Spellbreaker", "Tempest", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.2391, 17.3003, 1.2398, 8.797, 13.9356, 70.9863, 5.3166, 12.1288, 19.3752, 4.7526, 7.6877, 0.0, 7.008, 2.2848, 14.7016, 9.1876, 5.6156, 43.2644], [14.5366, 7.722, 0.9677, 16.7083, 23.1084, 102.6075, 3.3163, 0.839, 19.6733, 7.5374, 0.0, 0.0, 2.3126, 10.3488, 20.6471, 19.1408, 20.5258, 19.004], [4.5012, 19.6762, 3.2508, 11.3947, 68.0904, 0.0, 109.0608, 6.5274, 46.5005, 0.1485, 4.8422, 0.0, 8.9002, 23.016, 20.1066, 16.5887, 11.0375, 50.6773], [13.356, 22.7947, 9.6826, 14.2002, 2.5389, 215.5402, 3.1584, 1.2944, 4.0738, 11.6588, 6.7392, 1.3192, 6.7978, 2.9232, 41.5104, 18.4602, 28.5619, 43.5339], [26.7858, 64.5975, 0.2873, 0.0, 14.553, 0.0, 260.7133, 22.2667, 13.1356, 47.8915], [10.0354, 19.899, 0.0, 26.0957, 25.3134, 5.4768, 140.6819, 5.5272, 1.4142, 50.0774, 19.9017, 7.2134, 2.3827, 4.2336, 7.1346, 26.5418, 54.2192, 51.6207], [26.343, 25.4678, 0.0, 4.9594, 16.317, 216.1856, 4.4744, 0.9588, 15.997, 8.3171, 4.6426, 3.5496, 4.9757, 11.256, 27.6736, 36.2398, 38.3407, 44.2078], [29.516, 31.9275, 0.0, 40.2062, 38.808, 3.4094, 150.3619, 12.0546, 15.2929, 38.9491, 5.6438, 3.5443, 13.4554, 5.8464, 36.2135, 17.8647, 31.6601, 29.9212], [20.1447, 21.4582, 2.4041, 34.1842, 24.0786, 6.1296, 158.1059, 8.475, 7.0472, 62.6962, 12.6985, 5.5411, 0.0, 10.3718, 1.848, 31.349, 19.9914, 37.663, 40.7036], [23.2438, 21.6067, 2.2378, 6.9077, 24.6078, 8.4509, 192.9537, 0.5264, 4.0509, 28.6157, 19.9388, 5.017, 0.0, 7.919, 9.4752, 41.4023, 36.8353, 43.7626, 50.6773], [33.2055, 39.6495, 0.0, 11.0995, 29.8116, 6.6374, 185.855, 4.1586, 7.8861, 42.8242, 22.2037, 5.9654, 0.0, 0.5606, 0.0, 15.3502, 25.4359, 23.9145, 73.8594], [44.3478, 32.8185, 7.8624, 0.0, 0.0, 0.0, 149.7166, 11.3702, 4.1228, 60.0134, 1.4852, 27.2563, 14.016, 0.0, 31.8895, 29.4342, 86.073, 34.908], [17.9296, 87.4368, 21.8696, 16.3488, 41.3472, 29.8704, 86.3719, 78.7748, 85.2016, 140.306], [22.0632, 42.3225, 5.6851, 29.1067, 48.069, 6.6374, 233.6095, 3.4742, 5.3213, 33.0869, 17.8967, 1.4227, 2.5296, 3.0134, 10.2144, 41.8347, 23.3092, 43.1817, 37.3341], [6.2722, 60.0683, 8.5882, 14.1696, 95.5206, 0.0, 213.6042, 12.4757, 15.1251, 51.071, 29.3327, 18.1958, 4.2432, 16.3286, 29.6016, 114.2617, 10.889, 57.1238, 35.7167], [50.4724, 28.3635, 1.9656, 28.4573, 17.5518, 0.0, 302.6598, 17.4765, 2.3491, 46.2024, 19.4561, 8.2368, 0.0, 2.9434, 8.6688, 60.2117, 53.0837, 50.54, 94.4808], [53.2026, 50.787, 1.769, 26.9813, 49.9212, 9.0312, 438.8244, 43.1122, 15.6284, 72.5328, 16.7456, 12.0806, 7.5752, 5.3962, 24.1248, 92.3174, 67.8008, 69.2263, 52.2946], [74.0852, 110.2613, 12.2926, 56.2061, 129.3894, 428.4991, 57.0091, 33.1026, 76.5072, 33.0086, 0.0, 7.9696, 25.439, 5.3088, 72.3189, 93.0666, 111.0525, 153.6492], [104.5604, 107.0685, 14.4094, 27.3946, 60.417, 13.7101, 783.4306, 59.799, 27.5895, 128.6712, 34.7165, 31.5494, 2.7472, 6.8678, 9.912, 99.0196, 119.4383, 136.8067, 247.9952], [118.6543, 126.8933, 10.6142, 57.623, 93.4038, 0.0, 871.1955, 42.9542, 39.5984, 168.912, 34.2339, 16.6733, 11.1384, 32.5171, 11.8608, 162.0419, 168.8639, 184.2485, 248.2648]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

