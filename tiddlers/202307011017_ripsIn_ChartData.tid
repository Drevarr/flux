created: 20230701101710000
creator: Drevarr
modified: 20230705163540525
modifier: drevarr
tags: ChartData
title: 202307011017_ripsIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Violet Stab", "Fluffy No Care Bear", "F\u00f9gly", "F\u00f9gly", "Ryvalia Routbringer", "Dizzy Bunnyhopper", "Gamora Titus", "Trodek", "Elonith Requiem", "No Reserv\u00e9", "Atros Shroudkeeper", "Grim Breacher", "Ryvalia Fazebringer", "Govinda Ektar", "Wall Knot", "Sister Elonith", "Drumina", "Legacy Of Mathus", "Sakis Ranger", "Gestern Yesteryear", "Charr Surethang", "Bella Sassy", "Drevarr Moonwillow", "Latedoctor"];
const professions = ["Firebrand", "Berserker", "Catalyst", "Tempest", "Berserker", "Holosmith", "Dragonhunter", "Scrapper", "Scourge", "Vindicator", "Vindicator", "Reaper", "Chronomancer", "Vindicator", "Firebrand", "Berserker", "Druid", "Berserker", "Druid", "Firebrand", "Berserker", "Firebrand", "Scrapper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0189, 0.0189, 0.1702], [0.2564, 0.0], [0.1957, 0.035], [0.0566, 0.027], [0.1519], [0.0, 0.035, 0.0, 0.0494, 0.0, 0.0, 0.0312, 0.1], [0.0, 0.037, 0.1053, 0.3462, 0.0], [0.0, 0.1064, 0.0, 0.0987, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.075], [0.0, 0.035, 0.0, 0.119, 0.1605, 0.0, 0.0, 0.0156, 0.175], [0.1019, 0.0952, 0.0741, 0.0, 0.0, 0.0312, 0.075], [0.0435, 0.0605, 0.0, 0.2381, 0.0617, 0.0, 0.0, 0.1875, 0.0583], [0.2692, 0.0, 0.2848], [0.0047, 0.0162, 0.1915, 0.0, 0.0605, 0.0286, 0.1429, 0.1605, 0.0, 0.0312, 0.075], [0.1667, 0.0, 0.1392, 0.0047, 0.0027, 0.1064, 0.0, 0.0414, 0.0, 0.0, 0.284, 0.0, 0.0], [0.0081, 0.1064, 0.0435, 0.1146, 0.1429, 0.0123, 0.0, 0.0, 0.0625, 0.175], [0.0, 0.0, 0.0526, 0.2821, 0.0556, 0.2342, 0.0236, 0.027, 0.1064], [0.2051, 0.0, 0.2089, 0.0236, 0.0162, 0.1064, 0.0, 0.0287, 0.0238, 0.0494, 0.0, 0.0, 0.0312, 0.1333], [0.0, 0.0633, 0.0189, 0.0162, 0.0638, 0.1087, 0.0796, 0.0, 0.4286, 0.1235, 0.0, 0.0938, 0.15], [0.0, 0.037, 0.2105, 0.4615, 0.0, 0.3354, 0.0283, 0.0189], [0.0, 0.0, 0.1404, 0.3846, 0.0, 0.1329, 0.0425, 0.0378, 0.0638, 0.087, 0.0605, 0.0286, 0.0238, 0.1235, 0.0469, 0.0, 0.1083], [0.0, 0.037, 0.0526, 0.2308, 0.0, 0.1582, 0.0189, 0.0135, 0.0638, 0.0, 0.0796, 0.0, 0.5238, 0.0864, 0.0, 0.1094, 0.15], [0.0, 0.0, 0.1404, 0.5641, 0.0278, 0.2278, 0.0377, 0.027, 0.0638, 0.1087, 0.0796, 0.0571, 0.0952, 0.1111, 0.0, 0.0156], [0.0278, 0.2342, 0.0425, 0.0162, 0.2553, 0.1304, 0.1178, 0.0571, 0.0476, 0.1358, 0.0, 0.0, 0.0, 0.2833], [0.0, 0.0185, 0.1579, 0.3077, 0.0, 0.2848, 0.0425, 0.0189, 0.1489, 0.0, 0.0701, 0.0, 0.4524, 0.1605, 0.093, 0.0, 0.0938, 0.1667]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

