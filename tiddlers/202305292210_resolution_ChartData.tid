created: 20230529221000000
creator: Drevarr
modified: 20230705163532314
modifier: drevarr
tags: ChartData
title: 202305292210_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Pu Ella", "Rx Medic", "Blanco Padre Guard", "Crusader Siolith", "Gabe Malhorn", "Sygaldry Verdandi", "Tika Fiery", "Lucas Ryn", "Koralia Danai", "Bella Sassy", "Solus Sanctus"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.6565, 499.8286, 0.0, 0.0, 163.6249, 0.0, 177.8019, 118.8096], [1207.5], [0.0, 308.5051, 0.0, 0.0, 229.0291, 134.1331, 110.3451, 71.8848, 694.37], [0.0, 993.3739, 63.9736, 0.0, 133.8541, 0.0, 58.4839, 31.1376, 110.4813, 412.6637, 44.1593, 40.0488, 325.9224, 78.7332, 769.81], [248.6025, 458.6868, 40.6591, 84.0484, 800.8821, 59.829, 1392.88], [1220.5116, 77.6158, 0.0, 276.3121, 23.9981, 193.9317, 586.9344, 456.9588, 1308.4157, 0.0, 194.1826, 1169.6076, 187.6896, 0.0], [0.0, 1642.4285, 26.2034, 0.0, 261.3125, 0.0, 193.5044, 332.7792, 346.6341, 932.1998, 94.6757, 230.8218, 809.4771, 117.6882, 1116.42], [39.942, 1521.4769, 19.285, 12.2047, 214.4864, 0.0, 297.2267, 277.8672, 309.4416, 739.922, 36.2318, 87.0791, 993.0663, 162.6114, 1497.07], [24.003, 1421.574, 35.0244, 23.8298, 463.2358, 39.3936, 207.5513, 266.3856, 383.2002, 838.6092, 36.3264, 205.223, 804.8358, 92.022, 1425.77], [41.9265, 1936.7964, 87.3664, 376.8169, 0.0, 254.8725, 367.536, 445.9968, 1017.7596, 78.745, 179.2996, 1336.5225, 228.291, 1363.9], [53.235, 1860.7697, 56.6228, 36.8626, 624.5764, 45.9917, 245.7394, 435.8016, 382.7304, 860.8486, 112.6118, 354.5942, 1117.8657, 264.6588, 1326.18], [154.539, 2036.3851, 51.2178, 23.8464, 469.4792, 63.9763, 261.8692, 442.5408, 493.2117, 1162.0066, 63.4766, 119.0099, 1041.5421, 244.1376, 1642.2]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

