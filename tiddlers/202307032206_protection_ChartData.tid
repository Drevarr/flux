created: 20230703220627000
creator: Drevarr
modified: 20230705163541469
modifier: drevarr
tags: ChartData
title: 202307032206_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Slingsshot", "Vopiscus Zergherdus", "Morton Saltbringer", "Gavann", "Miphest\u00f6", "Air One Com", "Drumina", "Il Dim Snail Il", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Fribble Bibble", "Arriasa", "Sub Train", "Zaylen Harker", "Crusader Siolith", "Gabe Malhorn", "Mmathuss", "Koralia Danai", "Solus Sanctus", "Sister Elon\u00edth"];
const professions = ["Untamed", "Scrapper", "Chronomancer", "Firebrand", "Tempest", "Firebrand", "Druid", "Firebrand", "Chronomancer", "Scrapper", "Scrapper", "Druid", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[66.8861, 38.2054, 68.4634, 4.0439, 0.0, 424.8765, 20.1684], [4.3746, 29.3731, 40.5821, 0.0, 501.4095, 19.7568, 38.8102, 1.7221, 5.3044], [45.7642, 18.7135, 44.9366, 0.0, 14.9002, 269.838, 33.8541, 0.0, 10.5501, 6.4049, 15.1265, 10.962, 10.6722, 8.177, 26.9359, 20.0534, 22.6565, 12.4533, 22.3256, 26.9696, 73.3829], [747.5775, 40.4912, 15.2458, 0.0, 33.0528], [93.5088, 100.7455, 32.2278, 99.1742, 93.361, 78.0432, 93.6918, 42.8762, 243.3108], [37.6464, 23.1233, 68.7544, 61.0738, 64.2348, 37.268, 69.993, 57.7592, 120.7008, 73.92, 78.8467, 14.9846, 21.4656, 192.281], [41.0395, 6.9034, 40.2192, 0.0, 0.0, 375.564, 65.3929, 34.8905, 0.0, 26.3315, 38.7375, 0.0, 26.1999, 7.9439, 0.0, 12.726, 32.186, 0.0, 25.9829, 31.3632, 37.5144, 19.3191, 19.8282, 26.832, 94.8537], [194.0808, 0.0, 47.4775, 31.9334, 11.236, 0.0, 843.8355, 26.5997, 23.9835, 32.2143, 0.0, 103.2093], [97.4573, 35.0885, 39.965, 82.6762, 23.069, 0.0, 473.4, 64.9299, 27.117, 22.5981, 35.8782, 37.0139, 25.6774, 7.5125, 0.0, 53.0208, 31.2374, 30.708, 13.2924, 56.1211, 46.2739, 32.6124, 73.3339, 12.5216, 80.9565], [187.6886, 10.2312, 93.3307, 111.4042, 0.0, 0.0, 878.5515, 40.8513, 127.2691, 22.1173, 0.0, 21.4792, 27.4758, 7.7207, 12.7154, 9.7421, 0.0, 29.069, 29.3304, 34.3847, 32.2661, 72.1829, 71.5427, 66.8254, 22.0986, 125.8834], [153.7824, 0.0, 73.9066, 195.048, 61.445, 25.2899, 1116.8295, 154.0927, 176.2605, 116.8368, 51.9664, 31.3168, 11.5621, 15.4219, 48.2728], [202.8816, 1.0252, 95.6318, 132.4512, 20.5721, 0.0, 881.313, 103.7747, 68.5759, 97.6918, 27.8795, 25.9725, 52.5228, 5.7276, 3.9339, 28.38, 41.0004, 23.5127, 0.0, 26.1584, 44.8114, 49.6373, 54.1226, 86.9185, 43.8944, 142.4276], [101.904, 22.3344, 57.2141, 0.0, 0.0, 641.8515, 22.9981, 22.9591, 0.0, 0.0, 109.6769, 59.6827, 48.9168, 65.6834, 52.632, 106.9236, 41.5708, 99.7234, 157.7783, 235.8418, 217.177, 139.5064, 204.6766, 14.6131, 329.4879], [222.336, 23.9249, 44.4528, 15.2798, 864.744, 94.1535, 39.1087, 54.113, 111.0725, 115.5957, 48.0461, 69.8458, 56.6774, 52.9956, 132.4708, 110.1223, 13.9194, 20.4336, 182.3606, 121.6116, 105.9142, 82.1747, 358.3117], [109.6858, 19.6809, 102.0276, 114.0048, 61.6078, 0.0, 1138.1325, 50.2152, 0.0, 0.0, 179.1866, 52.0674, 39.8997, 65.3027, 44.1077, 23.436, 69.7589, 91.9019, 44.2411, 65.8152, 189.0134, 79.3214, 119.3852, 72.6528, 332.2085], [294.6878, 37.0475, 70.2518, 62.4758, 0.0, 11.5903, 1496.3385, 202.8159, 54.234, 63.3795, 109.9544, 120.2974, 85.2357, 74.3814, 107.2813, 13.9939, 58.8672, 39.5041, 50.6172, 84.0932, 144.7459, 166.8744, 76.8746, 52.7868, 70.2861, 231.693], [149.243, 57.1851, 76.986, 144.6077, 33.8979, 0.0, 1320.786, 153.321, 121.1226, 0.0, 114.851, 70.5111, 56.0183, 54.6431, 39.4224, 44.856, 142.4993, 111.5, 128.1839, 191.1254, 195.9619, 141.9898, 133.2346, 126.592, 303.0171], [277.3642, 62.6864, 52.1136, 166.9248, 37.9417, 2.6255, 1450.182, 145.2433, 57.9701, 127.4584, 42.183, 178.3696, 107.8033, 43.402, 118.9307, 75.9552, 39.2364, 128.8795, 72.1706, 99.066, 173.6381, 132.169, 96.2667, 129.4885, 172.3302, 293.6053], [353.9774, 128.7612, 169.223, 67.47, 0.0, 2456.946, 157.2312, 81.592, 20.4563, 0.0, 175.6804, 121.8701, 73.1817, 61.7242, 56.7806, 41.706, 88.5284, 117.9882, 113.5622, 154.3925, 211.4851, 144.6192, 173.3829, 115.9693, 300.7377], [540.8323, 30.582, 194.5123, 347.0947, 72.1653, 2182.7685, 131.6091, 88.763, 108.3134, 29.5513, 88.7763, 190.5849, 100.0008, 63.5008, 92.9006, 93.24, 146.6665, 144.2078, 143.8589, 160.8077, 149.2445, 164.1939, 131.5697, 175.6326, 423.0181]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

