created: 20230422000344000
creator: Drevarr
modified: 20230705163526231
modifier: drevarr
tags: ChartData
title: 202304220003_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Laddy Lux", "Sub Train", "Aronorf Xideliesi", "Air One Com", "Ark Darkness", "Lucas Ryn", "Jupi Jupi Jupi", "Soxx", "Zaylen Harker", "Koralia Danai", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 207.9722, 157.8848, 321.6672, 0.0, 157.9341, 128.9831], [50.6405, 142.4828, 212.1594, 157.718, 62.2728, 64.8265, 326.52, 0.0, 0.0, 96.1584, 53.0108, 93.2602, 103.488], [52.037, 133.6788, 61.2622, 64.6668, 0.0, 103.4176, 69.1337, 167.7348, 58.5004, 307.26, 0.0, 0.0, 74.8512, 60.8927, 68.423, 97.4733, 62.304, 33.4896, 114.9573, 104.0228, 46.8288, 0.0, 124.3042, 0.0, 0.0], [12.8726, 93.5212, 43.5445, 89.3841, 27.2976, 49.1524, 48.5901, 122.6623, 29.0745, 495.9, 29.673, 13.4757, 61.2996, 51.6972, 45.6422, 96.2931, 59.0515, 17.9264, 52.9765, 180.6562, 143.2512, 43.2576, 150.0536, 0.0, 37.5777], [25.1988, 195.3068, 234.3978, 109.306, 0.0, 149.0088, 108.7407, 181.7127, 17.7962, 366.48, 0.0, 0.0, 150.7788, 53.0917, 133.5398, 123.4808, 63.6134, 205.6993, 149.5305, 73.0944, 0.0, 82.0803], [0.0, 96.1384, 69.5327, 17.9256, 130.0741, 147.0973, 353.6744, 76.4563, 342.9, 23.688, 0.0, 118.1832, 39.551, 79.7933, 165.3549, 63.5923, 0.0, 124.6609, 235.1528, 228.8736, 20.9664, 148.1727, 0.0, 27.5544], [46.1472, 146.9416, 54.4751, 145.0596, 156.2352, 182.4352, 141.0746, 240.6794, 218.4741, 750.78, 174.258, 59.0571, 177.4956, 36.3174, 109.2672], [0.0, 46.2068, 143.1909, 111.9858, 17.9256, 200.6647, 114.0999, 270.058, 50.2893, 471.06, 0.0, 0.0, 83.3244, 58.9526, 145.9181, 154.1215, 109.993, 0.0, 255.5287, 196.1662, 86.832, 23.8752, 231.8096, 0.0, 249.3828], [42.3218, 129.362, 164.7724, 247.2431, 122.364, 144.0018, 117.7748, 227.0781, 150.6442, 680.76, 34.65, 33.8652, 1.518, 62.0447, 87.0509, 112.597, 65.5776, 169.6822, 170.2223, 256.608, 58.9536, 132.6063, 62.0282, 197.5248], [52.4014, 225.07, 172.5001, 205.2837, 95.2248, 242.6241, 147.6077, 291.4015, 136.107, 672.3, 182.259, 47.3823, 115.0644, 82.1941, 96.2438, 212.9988, 90.9005, 189.3954, 271.9185, 302.4864, 89.7408, 122.8124, 116.5024, 30.186], [40.986, 216.55, 164.1624, 272.0662, 81.6552, 314.3076, 197.142, 259.3444, 118.6304, 887.04, 264.411, 44.9811, 103.9692, 74.5143, 118.9037, 108.4882, 91.0906, 0.0, 235.0724, 94.752, 476.6688, 29.9232, 109.7431, 127.294, 229.9941], [59.2627, 214.9312, 98.7821, 233.0333, 197.8152, 196.9976, 196.9889, 353.9673, 118.9818, 799.74, 2.331, 23.7636, 141.6432, 45.1896, 204.4627, 209.0649, 104.0794, 247.3112, 205.8953, 383.2704, 143.6544, 227.237, 166.0968, 369.4689]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

