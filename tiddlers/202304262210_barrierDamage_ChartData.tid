created: 20230426221022000
creator: Drevarr
modified: 20230705163526700
modifier: drevarr
tags: ChartData
title: 202304262210_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Kmpek", "Al Darasuum", "Sassy Daddy Demon", "Sister Elon\u00edth", "Venom The Ferocious", "Xyntharos", "Sumatra Satyricon", "Kary\u00edna", "Leana Deeb", "Xanvias Tsoli", "Necrotic Windrunner", "Black Raspberry Pie", "Khailerian", "Tegan Parker", "Mistwalker Caelon", "Johosh The Great", "Miphest\u00f6", "Solo Bloodborn", "Eibh\u00ebar", "Sygaldry Verdandi", "Jupi Jupi Jupi", "Skylar Shadowmoon", "Koralia Danai", "Ryvalia Fazebringer", "Daddys Lil Orchid", "Bella Sassy", "Primal Clone", "High Sorcer Baradun", "Freylk Nasferatu", "Tika Rucola", "Lucas Ryn", "Lord Erin The Wise", "Zadie Miststep", "Mike The Archmagus", "Inedible Plant", "Zaylen Harker", "Drevarr Moonwillow", "Blancooo Padreee", "Seren Nightroad", "Rozaalyna", "Panther B Me", "P\u00edogre", "Tootsie Poppa", "\u00c1rkantor", "Grasszanine", "Newtype Khan", "Be\u00eb", "Smol Gluvs", "Mac Adaymia", "Cyclotechnist Farra"];
const professions = ["Vindicator", "Dragonhunter", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Soulbeast", "Vindicator", "Weaver", "Holosmith", "Scourge", "Chronomancer", "Vindicator", "Tempest", "Vindicator", "Firebrand", "Tempest", "Spellbreaker", "Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Chronomancer", "Vindicator", "Firebrand", "Chronomancer", "Tempest", "Scourge", "Chronomancer", "Firebrand", "Weaver", "Tempest", "Weaver", "Vindicator", "Firebrand", "Scrapper", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scrapper", "Scourge", "Vindicator", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3686, 406, 8925, 0, 1413, 0, 0, 0, 23008], [2879, 8044, 897, 7662, 0, 0, 1116, 18525], [0, 12947, 13126, 1116, 1016, 446, 0, 14768], [0, 17149, 0, 5731, 1613, 0, 4577, 14533], [2158, 14851, 0, 8697, 2797, 0, 3149, 17404], [490, 29596, 6454, 1782, 0, 0, 0, 14371, 0], [1282, 9240, 7543, 2536, 0, 1138, 0, 7269, 1420, 9840, 0, 659, 0, 0, 2232, 9917], [0, 5573, 3411, 1145, 620, 275, 1750, 16775, 0, 13514, 0, 2255, 0, 0, 1145, 11111], [25833, 0, 18272, 304, 9402, 3975], [5226, 4432, 4390, 0, 1666, 1920, 10215, 0, 6648, 0, 922, 4685, 0, 0, 18229], [550, 21946, 1139, 7916, 2218, 0, 5872, 19259], [0, 13548, 289, 0, 523, 108, 0, 12537, 0, 17159, 519, 2588, 1109, 0, 1195, 16447], [176, 11377, 4330, 1145, 0, 3237, 2282, 11948, 989, 4199, 0, 3719, 1301, 0, 1145, 20418], [270, 9370, 1647, 0, 0, 1339, 1484, 13203, 2476, 13753, 0, 4680, 286, 0, 2340, 15743], [0, 6272, 3820, 1145, 0, 0, 1546, 10800, 731, 12660, 0, 17, 1526, 0, 2472, 28246], [0, 12547, 994, 3343, 0, 0, 0, 11203, 900, 10709, 0, 9163, 1836, 0, 3406, 16202], [0, 3687, 2889, 0, 0, 0, 1366, 15520, 2607, 14632, 0, 9035, 3595, 0, 606, 19028], [967, 7849, 6668, 1116, 0, 0, 0, 15749, 0, 17511, 0, 1388, 2, 0, 3456, 18486], [0, 15684, 3393, 1116, 0, 6218, 442, 15343, 0, 16459, 0, 4632, 0, 0, 0, 14034], [0, 14910, 6516, 1145, 0, 752, 2609, 16098, 2399, 7407, 0, 2467, 2952, 0, 1994, 20530], [0, 18871, 2629, 0, 0, 0, 947, 16432, 275, 14238, 1139, 4582, 1702, 0, 2232, 17095], [5854, 30845, 27030, 1145, 536, 2745, 6675, 9458], [480, 14295, 2736, 2312, 0, 45, 0, 18564, 2097, 17599, 0, 3165, 7, 0, 9016, 14551], [0, 12185, 6838, 0, 451, 2986, 4084, 11088, 275, 19287, 0, 9113, 1967, 0, 1712, 17242], [1071, 15651, 5673, 0, 0, 1116, 1371, 14590, 200, 15820, 653, 1408, 1665, 0, 0, 30773], [0, 12167, 13552, 0, 0, 112, 1620, 10805, 1116, 15363, 270, 5342, 2395, 0, 4095, 26177], [461, 30747, 7452, 1145, 0, 3220, 408, 14030, 2644, 5535, 0, 1761, 964, 0, 2011, 23635], [48, 24179, 5177, 0, 275, 1240, 275, 10567, 3580, 18600, 0, 7553, 743, 0, 2394, 23341], [0, 37203, 8031, 1821, 0, 4232, 3578, 43307], [877, 16363, 7892, 2290, 1288, 0, 1490, 12149, 2133, 20637, 0, 5345, 678, 0, 1116, 26062], [0, 0, 1145, 1473, 35332, 1674, 25782, 0, 15883, 1487, 0, 2805, 18863], [330, 16133, 275, 0, 1116, 2368, 9686, 4422, 10316, 709, 4992, 0, 5722, 51354], [0, 20421, 4656, 0, 417, 401, 2946, 10212, 7199, 27058, 0, 6273, 550, 0, 3234, 27645], [1519, 22611, 10980, 1391, 0, 2673, 1450, 18787, 2063, 10215, 1408, 5075, 4749, 0, 2625, 25992], [2213, 10960, 6136, 1116, 0, 0, 0, 25365, 4547, 18075, 0, 6822, 1287, 0, 6044, 33939], [1343, 26249, 7426, 2261, 0, 822, 1535, 7608, 1288, 22758, 0, 7397, 1877, 0, 1145, 45046], [369, 16619, 15083, 3410, 298, 1130, 1637, 23479, 3802, 21186, 126, 7174, 4369, 75, 2924, 27039], [0, 6361, 3875, 0, 0, 3453, 1869, 24786, 1730, 27370, 0, 6557, 3425, 0, 0, 49627], [6178, 49380, 19869, 440, 2433, 0, 5011, 32580, 6221, 14108], [0, 33738, 13386, 1116, 0, 293, 2722, 12441, 2707, 32952, 275, 8167, 7463, 0, 1145, 19989], [420, 47502, 10773, 0, 0, 828, 668, 18057, 1116, 3549, 0, 12793, 1883, 0, 1145, 43446], [4713, 78974, 1406, 24023, 16517, 0, 3379, 35806], [2248, 37312, 16342, 275, 0, 0, 3937, 45258, 9881, 14960, 0, 12855, 4683, 0, 4905, 19984], [445, 21913, 10924, 4124, 798, 543, 4296, 31044, 6781, 29123, 1139, 11246, 5366, 0, 5649, 51527], [35068, 17133, 0, 731, 715, 4968, 41010, 6757, 19895, 0, 12979, 1408, 0, 10732, 40093], [49431, 13807, 0, 192, 5397, 1144, 32675, 6218, 30018, 487, 0, 3464, 0, 0, 52423], [38529, 22611, 0, 1911, 542, 5414, 30113, 5790, 22828, 0, 9074, 3511, 0, 5771, 52433], [44651, 17639, 0, 3952, 2822, 2604, 33889, 1116, 32056, 0, 18310, 6901, 0, 2433, 63340], [1140, 37281, 6277, 3805, 0, 3407, 5477, 48754, 4672, 46552, 977, 10708, 5152, 0, 9323, 52785], [4831, 96284, 37090, 0, 2679, 769, 6562, 57873, 3480, 31885, 1782, 24036, 8658, 0, 7431, 89220]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

