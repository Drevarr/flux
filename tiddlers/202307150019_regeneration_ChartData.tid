created: 20230715001922000
creator: Drevarr
tags: ChartData
title: 202307150019_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Drumina", "Vampdru", "Artakama Nahid", "Skyew\u00edng", "Tribal S", "Drevarr Moonwillow", "Zaedy Zae", "Arriasa"];
const professions = ["Druid", "Druid", "Tempest", "Druid", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[93.8137, 44.7447, 25.4607, 54.4062, 48.9575, 0.0, 65.9697, 15.099, 44.2462, 55.3095, 99.3059, 15.6643, 43.6724, 35.5212, 0.0, 37.6272, 64.2365, 46.6281, 78.1367, 135.6696, 53.6976, 25.6828, 84.0246, 33.8182, 0.0, 31.5207, 166.9277], [239.914, 10.5742, 157.5348, 152.8521, 298.8929, 78.1591, 429.1882, 289.9588], [334.294, 42.2058, 295.7106, 83.7778, 181.9303, 58.4816, 188.7373, 110.3647, 75.2963, 45.1656, 338.3722, 82.9483, 49.0268, 236.8872, 33.3936, 85.5657, 139.4694, 206.1185, 157.707, 103.261, 96.7507, 102.9886, 121.2328, 107.5942, 50.37, 225.7109, 214.8486, 192.0719], [255.2035, 370.706, 114.3129, 180.4374, 0.0, 243.429, 41.2095, 0.0, 31.8775, 341.3581, 265.0234, 261.6204, 481.2588, 29.4516, 132.9012, 408.2637, 123.8472, 416.6492, 252.7589, 372.3667, 108.8802, 100.9826, 117.8944, 0.0, 271.7127], [333.6018, 20.2202, 497.455, 142.9793, 50.6048, 0.0, 785.1146, 242.0431, 375.8738, 132.0543, 828.4483, 356.4691, 81.6132, 513.7506, 28.4688, 931.7556, 83.0157, 242.5032, 1113.1884, 327.7454, 583.6882, 199.2276, 472.8728, 126.7739, 50.9, 121.6823, 267.3516, 109.2218], [184.3556, 865.9632, 435.7444, 322.0425, 351.9612, 1159.1149, 295.3843, 101.0344, 489.2184, 35.154, 546.4989, 402.4944, 387.3933, 917.1698, 442.6488, 281.461, 180.8378, 243.346, 293.5055, 101.93, 624.888, 622.3356, 324.2257], [532.1144, 333.2238, 797.9914, 715.1786, 1051.0672, 185.8681, 321.8997, 501.1039, 157.7812, 76.9514, 1212.1872, 62.8085, 11.5736, 528.6006, 37.1844, 381.5181, 680.5427, 962.4578, 1209.8835, 931.6296, 1202.256, 712.4832, 838.4851, 194.7655, 226.85, 454.4919, 1225.3882, 204.2586], [434.2109, 537.8926, 471.7083, 545.0702, 30.458, 593.388, 265.5676, 360.3825, 214.6514, 1467.4352, 1101.4618, 59.0456, 1436.1138, 340.2216, 771.6591, 813.7008, 842.1795, 1800.1696, 708.6182, 1198.3118, 314.9432, 658.416, 261.996, 217.06, 473.6295, 816.8194, 439.9668]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

