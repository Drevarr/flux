created: 20230222220539000
creator: Drevarr
modified: 20230705163519887
modifier: drevarr
tags: ChartData
title: 202302222205_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Dark Sidiuz", "Ark Darkness", "Sp\u00edcy Cheese", "Eibh\u00ebar", "Primal Clone", "Black Raspberry Pie", "Koralia Danai", "Ryvalia Fazebringer", "Smol Daddy Tika", "Ravioli Fetabringer", "Kiloak", "Blanco Padre Guard", "Kosair", "Sygaldry Verdandi", "Zaylen Harker", "Bella Sassy", "Newtype Khan", "Jeckyll Mbs", "Xanvias Tseli", "Arcanophage Farra"];
const professions = ["Scourge", "Firebrand", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Berserker", "Berserker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 6.0288, 15.0912, 11.9032, 29.2781, 74.6453, 17.2528], [0.0, 0.0, 0.0, 0.0, 19.008, 36.2496, 22.3852, 38.8742, 27.013, 16.0853], [0.0, 44.2224, 0.0, 20.769, 0.0, 21.2966, 0.0, 40.0896, 30.9128, 33.9782, 0.0], [12.9129, 6.5268, 6.4588, 6.5274, 25.4326, 19.6328, 19.584, 23.6928, 52.5874, 32.6074, 61.5384, 18.6364], [6.4655, 6.5268, 6.4865, 6.5274, 31.2907, 19.9656, 12.672, 16.6656, 75.1502, 22.032, 70.1698, 19.5012], [9.5718, 6.9708, 6.93, 11.7493, 33.3625, 25.7889, 20.928, 20.928, 81.1906, 30.9427, 73.5264, 34.419], [14.5383, 14.7112, 7.7616, 7.8329, 29.8619, 23.9033, 21.3504, 25.3824, 81.1906, 26.928, 81.9979, 30.268], [14.7911, 7.474, 14.8025, 9.7713, 37.6489, 22.4058, 22.4256, 26.2272, 64.4906, 43.6723, 81.1987, 29.6626], [8.416, 53.3984, 12.668, 0.0, 54.223, 31.945, 27.3792, 27.5712, 66.9778, 57.9686, 116.5234, 10.5938], [17.5904, 23.1472, 11.5038, 7.7538, 25.1469, 72.098, 38.7072, 30.7968, 118.3216, 61.5917, 76.7232, 43.413], [32.4324, 7.6351, 62.2242, 54.129, 28.1088, 50.0352, 102.6875, 52.4851, 97.5024, 54.8716], [36.0658, 12.9056, 7.7616, 7.6746, 57.5806, 48.472, 37.2864, 0.0, 133.245, 24.1862, 131.7082, 52.4934], [13.852, 12.2248, 6.93, 6.9626, 51.2225, 35.328, 33.1392, 58.752, 129.8695, 56.6957, 83.7562, 70.1785], [14.9356, 7.7108, 36.9508, 0.0, 25.0754, 54.4617, 42.8544, 64.7808, 145.1482, 64.4314, 75.4445, 36.9702], [21.6901, 21.4008, 6.8043, 55.6518, 68.8259, 33.7536, 12.2496, 139.6408, 58.6541, 120.1997, 65.4221], [15.6761, 15.836, 7.8725, 15.8636, 23.9324, 47.6401, 47.1552, 27.648, 158.6504, 30.2573, 132.6672, 82.7614], [0.0, 24.5532, 18.4338, 18.5932, 49.0793, 56.4028, 56.9856, 35.6352, 128.4482, 68.6419, 111.7282, 73.8972], [17.6988, 33.8772, 50.8742, 80.5129, 61.4497, 33.5616, 48.6912, 150.3004, 84.407, 203.1566, 72.1676], [23.6225, 46.6792, 39.1129, 51.5862, 149.0953, 107.1487, 20.736, 93.1968, 207.1516, 119.1686, 233.6861, 81.4642], [0.0, 0.0, 0.0, 75.6783, 0.0, 110.6982, 81.3696, 140.1216, 331.1582, 266.832, 324.1555, 55.9958]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

