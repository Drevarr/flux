created: 20230610101822000
creator: Drevarr
modified: 20230705163534563
modifier: drevarr
tags: ChartData
title: 202306101018_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Alarics Bane", "Gestern Yesteryear", "Ryvalia Fazebringer", "Slang\u00efn", "Charr Surethang", "Elonith Requiem", "Xanvias", "Drevarr Moonwillow", "Aronorf Xideliesi", "Tomitigas", "Cat Noises", "F\u00e2ble", "Grootyoda", "Gamora Titus", "Arriasa", "Sakis Ranger", "Vesnan", "Hit The Gas", "F\u00e2ble", "Lady The Mirage", "Grootyoda", "Scarlet Merc\u00fcry", "Brother Titus", "Synomi\u00f1 Spyce", "Shroud Dead", "Yngvar The Burdened", "Mr Cho Cho", "Maggietheskinwalker", "Arlomon", "Blinky Charr", "Danaeryn", "Elonith Primal"];
const professions = ["Reaper", "Firebrand", "Chronomancer", "Herald", "Berserker", "Reaper", "Reaper", "Scrapper", "Firebrand", "Tempest", "Virtuoso", "Vindicator", "Berserker", "Firebrand", "Druid", "Druid", "Scourge", "Spellbreaker", "Herald", "Chronomancer", "Spellbreaker", "Firebrand", "Berserker", "Scourge", "Reaper", "Scourge", "Berserker", "Scrapper", "Dragonhunter", "Mesmer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[15575.5, 2014.0769, 13.8696, 649.5, 3524.5556, 574.2075, 3943.75, 353.9375, 1643.2188, 1741.0649, 1437.3696, 1199.2162, 1041.0706, 428.5, 317.8276, 2068.3939, 2363.9571, 608.9881, 3053.25, 1618.8854, 4138.4286, 121.4444, 4391.625, 1286.9423], [3596.32, 5705.8667, 76.3684, 833.625, 4207.5, 269.6875, 2432.5814, 247.9579, 4519.6, 1831.3582, 444.7778, 1460.971, 2020.6562, 1705.8958, 89.8246, 1691.3478, 1088.8816, 261.4405, 1573.2286, 1136.3443, 2147.3226, 7.7391, 2855.2714, 2196.3864], [8487.1429, 2075.4, 605.0222, 2737.4762, 700.6667, 2151.0196, 731.24, 713.0333, 976.76, 177.875, 1802.5873, 2089.2063, 1897.4, 103.4516, 1594.6333, 1794.7397, 326.6707, 6535.625, 1022.6387, 1689.747, 48.5882, 2631.3026, 2612.122], [773.0, 7209.25, 154.8462, 6573.1818, 4020.1667, 235.4038, 824.8868, 476.5952, 2710.2963, 1886.3733, 818.1087, 2101.2593, 3030.6585, 1810.0976, 122.7143, 1377.875, 971.4658, 769.9615, 233.7397, 1811.8043, 1586.0253, 43.64, 5218.9444, 4132.8333], [3045.1333, 434.65, 906.0213, 539.6842, 590.2963, 958.8868, 496.977, 1926.7241, 2626.6596, 501.5455, 1873.7368, 2231.7458, 951.1786, 1965.5217, 1729.3043, 701.4928, 561.1918, 1385.1645, 2371.7568, 0.0, 3497.3906, 4239.0741], [9426.5556, 1374.7308, 893.2, 5952.0909, 2135.9318, 340.8302, 2688.3333, 926.5, 1154.0, 1301.4844, 783.0, 1765.6909, 570.3012, 318.6786, 302.1429, 1859.8116, 2191.1324, 7.5926, 1358.8065, 1401.5574, 1739.8841, 3996.8696], [529.2075, 1558.8421, 157.4526, 4286.3478, 2040.0149, 667.1778, 1169.0685, 2198.7667, 390.3036, 71.5862, 1678.2222, 2342.2143, 413.6506, 1903.1613, 1313.0729, 1406.3902, 27.0577, 5507.7143, 12238.875], [6425.1, 1354.9688, 0.0, 3403.4483, 3389.9677, 396.7234, 1393.0, 290.5604, 1365.5312, 2130.814, 828.2083, 739.1351, 2029.2264, 402.4655, 633.9649, 1639.1146, 1231.2603, 371.3293, 2197.4318, 1416.1167, 1234.0758, 21.9787], [370.7292, 1579.0, 351.0353, 1576.5, 1631.7763, 345.4773, 1306.5294, 1813.6981, 742.9259, 207.4211, 1354.9462, 1661.5507, 408.8256, 1728.4286, 1587.011, 1785.7703, 3.6481, 2807.5238, 1322.2679], [1560.4074, 2356.6154, 11.6818, 1569.8776, 2604.9783, 344.9455, 901.2692, 778.8471, 1031.8267, 213.2128, 552.3699, 484.8313, 575.1273, 706.0556, 1167.1964, 1537.7429, 393.8554, 1104.3235, 799.8519, 1572.5571], [960.1711, 390.5946, 312.4412, 673.75, 662.9286, 76.8904, 1255.6552, 1853.6892, 3461.8571, 326.5278, 1148.7917, 1285.7383, 148.5714, 2285.9298], [7980.2222, 336.0, 104.3684, 6286.9231, 503.1379, 383.3404, 841.8824, 246.2211, 3506.05, 1966.9762, 528.1228, 266.4138, 1120.1835, 1489.6154, 512.9241, 844.3171, 10.4902, 2472.4247, 1502.98], [438.5357, 2196.0213, 210.6316, 1775.9425, 1800.3509, 485.4605, 2331.5238, 1410.8045, 1886.64, 183.9792], [1045.5385, 103.4211, 1417.3261, 1223.125, 529.2, 1124.5556, 176.8901, 1823.4091, 2057.0, 421.122, 589.1486, 1963.4815, 1890.3171, 205.7121, 1513.0588, 1723.7606], [5703.0, 2294.3667, 233.05, 1473.0222, 4259.7879, 184.2105, 10313.0, 527.7333, 1490.2581, 716.3867, 247.0213, 1680.3542], [1683.8077, 484.3438, 71.1053, 453.2558, 720.7818, 391.2, 496.3846, 501.1609, 3998.3333, 1166.2877, 207.4444, 730.3108, 1500.3827, 1134.747], [609.8493, 1733.1565, 2047.6167, 0.0, 3808.9583], [1992.5301, 1573.0341, 0.0, 4059.9583], [326.7045, 338.8108, 773.4769, 1235.7047, 1392.8605], [824.2895, 1284.0192, 1175.6479, 3420.9474], [1753.4483, 1926.9867, 243.9268, 2110.2462], [276.9444, 2110.3111, 2206.9273], [2031.2857, 4913.625, 7073.5455], [1306.241, 81.3137, 3058.6667, 11427.5714], [0.0, 3157.2963, 1110.5098], [2040.5741, 3808.0714], [2266.8286, 9230.75], [3169.25], [13.3929, 1143.1786, 473.0732], [2446.4667], [1159.098], [262.9273]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

