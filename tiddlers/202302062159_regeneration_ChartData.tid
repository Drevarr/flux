created: 20230206215940000
creator: Drevarr
modified: 20230705163518800
modifier: drevarr
tags: ChartData
title: 202302062159_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Arkintor", "Bella Sassy", "Zadie Miststep", "Mac Aaroni", "Etchery Howls", "Arriasa", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Tempest", "Firebrand", "Tempest", "Tempest", "Druid", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[660.66, 383.2218, 395.809, 215.8969, 69.4518, 222.4192, 72.1327, 1.8117], [184.041, 175.7808, 128.0179, 65.2125, 84.352, 89.056, 92.6526, 20.9169, 295.0147, 30.1088, 67.7435, 56.2073, 137.4184, 70.0875, 311.2387, 173.6242, 43.5435], [563.134, 517.023, 367.0656, 188.0728, 0.0, 284.2432, 45.0732, 56.9862, 70.2187, 72.089, 244.3794, 55.9998, 81.3988, 219.0156, 72.8957, 140.457, 50.9385], [725.879, 366.2334, 362.6669, 240.2428, 134.7971, 335.3216, 105.6145, 52.9511, 278.953, 59.3573, 238.3591, 61.8488, 211.889, 188.146, 412.5514, 185.2312, 129.7953], [877.371, 563.0742, 586.7741, 180.3343, 251.2831, 303.8208, 109.8046, 162.3667, 403.8778, 347.8507, 473.2112, 35.0147, 590.2065, 368.2865, 549.5256], [1736.834, 1438.8192, 1451.5018, 537.5249, 109.036, 393.4656, 206.2166, 230.9368], [1495.439, 528.7464, 1067.9789, 1347.6381, 57.6259, 863.0336, 126.3302, 240.9286, 216.4219, 212.585, 1017.9067, 98.879, 128.8228, 434.0753, 68.2906, 16.2378], [1799.875, 900.2448, 1204.1117, 1119.2204, 158.8752, 722.0896, 414.2345, 272.606, 871.6594, 360.1351, 685.0924, 141.2148, 401.9925, 653.9631, 624.6115, 380.7764, 156.339]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

