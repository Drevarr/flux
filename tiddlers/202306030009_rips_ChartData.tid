created: 20230603000934000
creator: Drevarr
modified: 20230705163533226
modifier: drevarr
tags: ChartData
title: 202306030009_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Sigrid Oluvkin", "Morv\u00e4rth", "Arriasa", "A Girl Named Jeff", "Dargon Spiritwalker", "Morv\u00e4rth", "Grasszanine", "Sureting", "Newtype Khan", "Smol Gluvs", "Primal Clone", "Black Raspberry Pie", "Be\u00eb"];
const professions = ["Scourge", "Reaper", "Druid", "Spellbreaker", "Scourge", "Scourge", "Spellbreaker", "Reaper", "Spellbreaker", "Scourge", "Chronomancer", "Chronomancer", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.3037, 0.037, 0.2941, 0.0, 0.4296, 0.1581], [0.0, 0.2593, 0.0, 0.1894, 0.0, 0.4915, 0.0758, 0.0, 0.1556, 0.0882], [0.0, 0.0617, 0.0, 0.1339, 0.05, 0.0, 0.0847, 0.0975, 0.0821, 0.1135, 0.0488, 0.1304, 0.0, 0.0971, 0.0847, 0.0296, 0.0123, 0.0662, 0.0, 0.0519, 0.0515], [0.0, 0.2971, 0.2011, 0.2416, 0.1481, 0.0, 0.2206, 0.0, 0.2519, 0.0037], [0.0426, 0.3827, 0.0, 0.2771, 0.0167, 0.0, 0.1429, 0.4237, 0.2599, 0.2205, 0.2482], [0.3949, 0.3617, 0.0, 1.4348, 0.0, 0.2514, 0.3069, 0.6376, 0.2741, 0.0, 0.2132], [0.1155, 0.359, 0.2979, 1.5217, 0.0, 0.3429, 0.4603, 0.3557, 0.1185, 0.0, 0.2941, 0.0, 0.1778, 0.1324], [0.0638, 0.3333, 0.0, 0.2356, 0.0, 0.0, 0.4549, 0.2256, 0.3121, 0.3696, 0.0, 0.56, 0.1693, 0.5839, 0.1556, 0.0, 0.1324, 0.0, 0.1037, 0.0882], [0.0, 0.5926, 0.1176, 0.3233, 0.0, 0.0, 0.0952, 0.5932, 0.5054, 0.4154, 0.2837, 0.0, 1.0435, 0.1429, 0.48, 0.381, 0.4228, 0.3556, 0.0, 0.1471, 0.0, 0.2593, 0.1103], [0.0213, 0.4321, 0.1176, 0.2055, 0.0167, 0.0, 0.2381, 0.7119, 0.3141, 0.4205, 0.3759, 0.0732, 0.9565, 0.0, 0.5429, 0.4127, 0.651, 0.2963, 0.0494, 0.2721, 0.0, 0.4148, 0.1471], [0.0, 0.358, 0.1471, 0.254, 0.0, 0.0, 0.0952, 0.5085, 0.4621, 0.6, 0.3546, 0.1585, 0.0, 0.3429, 0.5979, 0.5772, 0.2815, 0.0, 0.5368, 0.0, 0.2815, 0.1287], [0.0, 0.6543, 0.0294, 0.4804, 0.0333, 0.0, 0.6974, 0.2908, 0.3415, 0.3043, 0.0357, 0.8114, 0.4656, 0.6309, 0.4148, 0.0494, 0.2868, 0.0244, 0.2889, 0.1471], [0.0426, 0.5185, 0.0882, 0.127, 0.0167, 0.0, 0.0476, 0.678, 0.9061, 0.841, 0.5816, 0.0244, 1.1739, 0.1071, 0.4286, 0.8591, 0.2741, 0.037, 0.5147, 0.0, 0.5778, 0.2463]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

