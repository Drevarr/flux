created: 20230419215809000
creator: Drevarr
modified: 20230705163526074
modifier: drevarr
tags: ChartData
title: 202304192158_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Tootsie Pop Rocks", "Mistwalker Caelon", "Abigail Ryn", "Xyntharos", "Tegan Parker", "Zadie Miststep", "Skye Nightroad", "Mac Chiato", "Grasszanine", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Vindicator", "Tempest", "Vindicator", "Tempest", "Tempest", "Scrapper", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 80.6731, 31.897, 2.9702, 39.1672, 31.3982, 52.6907, 0.0, 0.0, 2.9944, 0.0, 34.7292, 49.5936, 34.8493, 109.417, 41.7774, 48.9744, 3.0139, 12.3178, 0.0], [0.0, 92.6957, 12.432, 27.3686, 46.7921, 94.7797, 16.6541, 0.0, 0.0, 5.4659, 0.0, 8.904, 21.8489, 16.3968, 137.1035, 26.3032, 16.2562, 0.0, 40.1083, 45.2441, 5.4187], [1.9891, 9.0127, 89.3851, 22.5552, 65.9818, 33.5626, 58.4085, 37.7418, 4.0214, 0.9819, 37.0259, 12.0127, 40.5768, 74.0382, 21.5712, 59.7099, 49.8036, 24.8391, 20.8483, 2.9366, 16.0026, 8.8949], [0.0, 31.5765, 123.1877, 62.5507, 31.3997, 49.0078, 61.0413, 39.0491, 30.6422, 0.0, 31.5599, 0.0, 59.2752, 50.4719, 12.2304, 81.611, 6.1446, 39.2196, 0.0, 0.0, 0.0, 0.0], [0.0, 15.8362, 114.1272, 25.752, 95.8963, 53.2439, 56.2633, 47.6888, 9.5155, 2.9845, 40.4005, 10.9806, 52.2792, 85.5828, 29.9712, 60.2279, 58.3198, 20.8034, 23.5843, 3.922, 16.6869, 17.8238], [31.8801, 191.1413, 23.7274, 99.2909, 55.1338, 15.8941, 0.0, 0.0, 0.0, 57.5588, 0.0, 84.0792, 126.6091, 77.28, 79.1693, 103.9192, 56.3284, 55.5955, 0.0, 0.0], [0.0, 158.2099, 78.1795, 177.5779, 51.6146, 86.1988, 102.0846, 0.0, 0.0, 87.5503, 0.0, 78.6096, 66.8824, 18.48, 147.684, 31.262, 23.7023, 0.0, 0.0, 0.0, 31.1832], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.7456, 0.0, 119.3478, 91.486, 213.5688, 197.3079, 146.2944, 190.8202, 92.169, 165.8023, 72.887, 27.3475, 66.3001, 63.7637], [7.4307, 254.2162, 57.1162, 245.8934, 88.957, 119.5473, 81.9064, 0.0, 15.013, 55.7052, 0.0, 152.1312, 148.7442, 102.9504, 75.6918, 94.0016, 31.0346, 22.0522, 0.0, 14.7918, 0.0], [11.0127, 17.8177, 115.5211, 38.255, 174.6077, 109.1598, 116.9145, 106.575, 0.0, 85.3163, 35.8662, 64.1088, 177.9397, 85.2768, 117.0522, 74.382, 178.3639, 39.8362, 0.0, 48.5341, 34.7275], [0.0, 392.5627, 104.9971, 291.9322, 155.7563, 228.4659, 129.4247, 0.0, 0.0, 56.8459, 0.0, 168.0312, 280.887, 17.2704, 169.2891, 109.417, 86.7947, 12.9139, 0.0, 13.6601, 91.164], [0.0, 352.836, 111.1776, 279.839, 239.5649, 275.0757, 125.8438, 0.0, 90.6467, 142.1147, 77.1223, 218.9112, 108.4812, 52.8192, 275.0948, 238.1302, 155.0027, 173.0794, 44.3974, 50.9029, 106.6022], [51.427, 10.8664, 585.4464, 161.7226, 768.4435, 329.4343, 325.1958, 162.8466, 72.3859, 0.0, 273.7728, 24.4842, 539.964, 312.4678, 99.9936, 305.5047, 441.98, 146.704, 237.2659, 39.3838, 57.6934, 112.021]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

