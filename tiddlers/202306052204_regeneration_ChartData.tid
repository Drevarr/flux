created: 20230605220452000
creator: Drevarr
modified: 20230705163533856
modifier: drevarr
tags: ChartData
title: 202306052204_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Stoic Rapidfire", "Johosh Of The North", "Cat Wigglebooty", "Artakama Nahid", "Arriasa", "Etchery", "Ak\u00e1nt\u00f3r", "Drevarr Moonwillow"];
const professions = ["Druid", "Tempest", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.0448, 1010.0047, 89.7187, 393.4913, 100.4394, 10.0399, 19.8, 15.6961, 31.792, 31.5496, 25.5231, 26.5402, 100.932, 227.5364, 75.897, 0.0], [109.7424, 1862.8193, 239.2354, 1203.9518, 27.6318, 73.8761, 0.0, 35.1113, 63.4418, 110.5214, 24.5771, 94.4141, 354.744, 822.2631, 178.2762, 82.4175], [0.0, 2988.5659, 0.0, 963.0676, 0.0, 0.0, 0.0, 0.0, 329.7648, 205.5294, 0.0, 0.0, 1233.336, 352.4511, 5.0469, 40.176], [24.264, 2161.9496, 189.4838, 1216.3952, 87.591, 50.9823, 52.635, 33.0469, 98.6925, 140.7319, 89.4916, 83.3962, 562.068, 1017.0048, 211.8572, 152.9887], [409.9563, 24.695, 251.3201, 936.134, 420.1709, 477.7868, 445.0003, 1658.124, 3539.2504, 264.766, 102.3637], [80.1504, 4848.257, 211.6514, 3386.7015, 52.1418, 0.0, 45.243, 126.7834, 375.4391, 526.2179, 139.8945, 216.2957, 2555.904, 1096.0438, 106.7605, 85.0905], [71.1792, 5657.2774, 55.561, 3386.7015, 252.7497, 165.9839, 148.467, 170.6536, 432.3899, 432.3857, 259.3743, 208.104, 1037.556, 2178.2695, 542.9811, 247.8802], [0.0, 7580.7047, 440.8841, 5331.3842, 69.1956, 259.0074, 141.636, 246.1437, 716.4804, 558.6493, 184.243, 316.6272, 2420.964, 2139.5791, 415.7559]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

