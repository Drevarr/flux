created: 20230710221759000
creator: Drevarr
tags: ChartData
title: 202307102217_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Il Kurai Il", "Irin The Undeath", "Drevarr Moonwillow", "Tegan Parker", "Zaedy Zae", "Venomina The Siren", "Artakama Nahid", "Tribal Z"];
const professions = ["Scourge", "Scourge", "Scrapper", "Tempest", "Druid", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[81.1553, 0.0, 6.169, 20.3345, 30.8112, 0.0, 22.1784, 32.9868, 0.0, 20.8138, 0.0, 1.8782, 0.0, 81.0489, 11.3729, 24.9194, 10.656, 5.952, 3.66, 22.6736, 0.0, 18.1552], [153.103, 9.4802, 0.0, 23.0614, 55.0368, 4.7002, 37.8383, 58.212, 1.184, 15.84, 15.9936, 1.3829, 3.5856, 86.141, 1.1915, 18.2122, 14.8294, 3.2256, 5.6832, 13.8202, 5.9523, 0.0, 19.0942], [137.8997, 0.0, 0.0, 99.0236, 70.7168, 0.0, 7.5573, 49.1274, 2.955, 4.8154, 31.3421, 0.0, 14.8608, 101.6294, 5.0102, 11.6242, 20.1586, 26.754, 2.6976, 4.6464, 2.5766, 10.3774, 0.0, 25.2503], [384.1492, 0.0, 178.2581, 133.0448, 0.0, 25.6324, 160.4358, 0.0, 51.9552, 42.5242, 0.0, 0.0, 267.122, 22.332, 28.0502, 44.3597, 122.6862, 8.736, 0.0, 9.4867, 46.6004, 0.0], [809.1973, 40.9424, 0.0, 0.0, 300.4288, 0.0, 89.5186, 205.947, 35.9968, 47.1398, 0.0, 0.0, 0.0, 421.794, 12.7393, 16.3675, 74.3281, 5.1215, 36.0288, 1.2864, 0.0, 74.6781, 0.0, 140.6503], [657.8074, 0.0, 42.383, 378.9072, 0.0, 78.7151, 329.6916, 88.609, 19.488, 42.9931, 0.0, 347.1101, 57.0674, 53.1432, 148.1172, 139.2737, 13.9584, 47.0784, 41.6069, 56.9778, 99.3665], [628.2574, 44.6153, 0.0, 185.8933, 321.5184, 84.5784, 78.6631, 312.4926, 45.5704, 91.3018, 95.209, 80.1658, 37.1952, 484.1719, 11.334, 72.673, 128.9827, 129.0307, 12.0384, 3.744, 13.3224, 120.0254, 106.9485], [974.5056, 0.0, 194.4634, 265.9328, 25.7285, 119.3321, 285.5916, 23.7213, 58.2595, 85.3709, 72.6322, 41.1696, 613.3835, 47.2608, 91.3243, 115.6155, 120.5459, 40.032, 38.4384, 16.9531, 121.8268, 0.0, 60.1694]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

