created: 20230429215910000
creator: Drevarr
modified: 20230705163527547
modifier: drevarr
tags: ChartData
title: 202304292159_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Tsolice", "Zenek Tryst", "Newtype Khan", "Blancooo Padreee", "Hauzzy", "Kaotic Reaper Z", "Miphest\u00f6", "Magister Boombottom", "Venomina The Fierce", "Tootsie Pop Rocks", "Fribble Bibble", "Skye Nightroad", "Owl Scowls", "Drevarr Moonwillow"];
const professions = ["Weaver", "Weaver", "Spellbreaker", "Spellbreaker", "Berserker", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.409, 1.249, 0, 0.529, 0, 0, 0, 0.186, 0.261, 0.089, 0, 0.208, 0, 0, 0, 0.197, 0, 0, 0, 0], [0.504, 0.992, 0.336, 0, 0, 0.13, 0.525, 0, 0.104], [0, 0, 0, 0.729, 0, 0, 0.903, 0.388, 0.248, 0.175, 0, 0.424, 0, 0, 0.21, 0.145, 0, 0, 0, 0], [0, 0, 1.395, 0.387, 0.26, 0.876, 0.173, 0, 0, 0.263, 0.001, 0, 0, 1.096, 0.018], [2.413, 0.84, 0, 0.35, 0.903, 0.31, 0.495, 0.175, 0.522], [0.406, 0.186, 0.447, 0.514, 1.108, 0.519, 0, 0, 0.253, 0.198, 0, 0.741, 0.658, 0.223], [0, 0.502, 0, 0, 0.145, 0.186, 0.615, 0.506, 1.106, 0.311, 0, 0.126, 0.197, 0, 0, 0.657, 0.447], [0, 0.504, 0.834, 0.377, 0.407, 0.524, 0.335, 0.63, 0, 0.388, 0, 0.19, 0.395, 0.678, 0.967, 0.658, 0.39], [0, 0, 1.37, 0.31, 0.342, 0.686, 1.769, 0.603, 0.646, 0, 0.211, 0.52, 0, 0, 1.341, 0.747], [0.607, 1.766, 0, 0.235, 2.104, 1.076, 0, 0, 0.498, 1.506, 0, 0, 1.729, 1.002], [1.042, 1.174, 0.957, 0.464, 1.249, 1.616, 2.293, 1.518], [2.276, 1.479, 1.043, 0.56, 1.128, 0.419, 1.207, 1.143, 1.99, 0.727, 0.194, 0, 1.029, 1.127, 0, 0, 1.319, 0.575], [3.771, 2.733, 0.886, 0.802, 0.827, 1.541, 1.792, 1.134, 1.647, 1.357, 0, 0.831, 0, 0.821, 1.685, 1.874, 1.445], [0, 2.495, 4.449, 2.541, 0.99, 1.07, 0.948, 1.505, 1.605, 1.891, 1.296, 1.164, 0.649, 1.607, 0.593, 1.441, 2.053, 1.326]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

