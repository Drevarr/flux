created: 20230417215912000
creator: Drevarr
modified: 20230705163525826
modifier: drevarr
tags: ChartData
title: 202304172159_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Cat Wigglebooty", "Tootsie Pop Rocks", "Fribble Bibble", "Demon Staph", "Tribal S", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Scrapper", "Scrapper", "Scrapper", "Druid", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[15.0878, 13.3333, 0.0, 40.9859, 858.2007, 0.0, 192.8287, 21.447, 180.6512, 126.4078, 55.2759, 124.559, 63.6023, 50.904, 48.2998, 173.1366, 163.5816, 208.7395, 0.0, 1.6517, 91.3088, 52.6656, 0.0, 121.8941, 146.2577, 131.074, 143.2123, 174.649, 105.9012, 75.166], [133.1537, 9.408, 1124.3707, 318.6254, 0.0, 237.2933, 33.3616, 27.7536, 0.0, 212.8959, 186.648, 0.0, 113.4811, 257.3161, 95.6323, 224.1848, 5.0261, 170.8553, 40.8346, 2.5029, 60.4085, 29.1325, 87.1563, 0.0, 1.9829, 20.3776, 52.1115], [0.0, 0.0, 5.4424, 72.1781, 684.4702, 0.0, 322.7963, 2.6226, 424.145, 24.4485, 319.9181, 89.0526, 0.0, 21.1415, 101.0808, 229.7757, 25.6074, 255.4914, 210.0429, 14.5174, 2.735, 0.0, 47.424, 0.0, 127.7285, 163.8006, 24.7724, 0.0, 106.7256, 146.5673, 140.7525], [323.1862, 72.1781, 1390.3084, 405.1712, 88.5856, 205.2296, 129.8647, 256.663, 0.0, 332.165, 359.7216, 36.3706, 246.913, 445.263, 371.9384], [2.2953, 103.9038, 210.0424, 15.1601, 2078.4947, 1281.9498, 433.6615, 507.3205, 563.2746, 664.294, 567.911, 27.0547, 568.0975, 314.4898, 235.9891, 260.6825], [2090.8045, 0.0, 587.5727, 650.8128, 164.7311, 162.6433, 195.0269, 388.4681, 4.9183, 352.0629, 131.1869, 0.0, 183.5648, 662.4482, 437.7381, 354.3945, 105.53, 53.9904, 231.6066, 132.0384, 0.3159, 576.2592, 107.5599, 249.7942, 6.8188, 109.3306, 134.1713, 135.6075], [55.9946, 67.7191, 342.6232, 253.9481, 3044.6963, 880.8005, 312.9053, 671.8841, 385.9705, 769.8155, 182.6916, 51.2107, 649.4065, 391.0882, 411.8484, 714.4273, 349.1314, 837.239, 220.5014, 176.0904, 441.0226, 231.8534, 139.7007, 853.7971, 424.3258, 336.5624, 216.3123, 366.444, 272.7124, 204.33], [293.3942, 139.3678, 683.6504, 377.107, 4155.1314, 185.4415, 877.002, 587.8121, 796.9546, 700.1365, 133.6798, 528.5826, 201.271, 710.2847, 569.5915, 248.8666, 419.3939, 1629.8919, 878.3074, 904.5596, 1263.1626, 360.3682, 479.7046, 264.1018, 331.8165, 1103.0606, 599.9144, 459.4867, 203.5547, 206.3362, 467.7045, 111.8425]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

