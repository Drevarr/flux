created: 20230412220340000
creator: Drevarr
modified: 20230705163525420
modifier: drevarr
tags: ChartData
title: 202304122203_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elon\u00edth", "K\u00f4sair", "Tegan Parker", "Koralia Danai", "Ark Darkness", "Fribble Bibble", "Sub Train", "Gavann", "Johoshua", "K\u00f4sair", "Drevarr Moonwillow", "Mac Chiato", "Venomina The Siren", "Sygaldry Verdandi", "Solus Sanctus", "Lucas Ryn", "Bella Sassy", "Newtype Khan", "Grasszanine", "Arcanophage Farra"];
const professions = ["Firebrand", "Berserker", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Spellbreaker", "Scrapper", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3.135, 24.8717, 1.2615, 13.3229, 6.9062, 10.826, 41.1757, 7.8826, 7.6464, 10.463, 136.2528], [0.0, 0.0, 0.0, 4.7334, 8.2663, 7.0109, 238.8544, 0.0, 12.1745, 0.9475, 2.4624, 0.0, 2.8728], [6.2548, 0.0, 4.6609, 25.4163, 36.2536, 0.0, 15.0028, 40.6, 1.485, 5.4835, 0.0, 0.0, 2.9822, 3.7844, 40.3838, 11.5315, 0.0, 0.0, 86.5944], [32.7957, 0.7115, 7.1618, 11.1132, 26.216, 9.508, 40.4838, 58.0, 6.369, 11.1629, 1.0754, 5.4432, 8.8944, 9.8644, 16.1337, 3.2458, 1.4256, 2.9333, 29.1384], [45.4745, 0.5821, 8.8102, 22.8438, 20.1934, 20.7446, 45.4847, 46.69, 7.953, 9.6614, 0.0, 7.6723, 13.6555, 7.4138, 16.7276, 3.3264, 6.6614, 2.4494, 32.0112], [30.429, 2.2153, 2.6999, 18.3162, 19.1306, 14.502, 46.4373, 46.69, 5.28, 13.6435, 0.8272, 3.7843, 13.2893, 2.4816, 25.6358, 3.2256, 7.439, 5.1106, 71.4096], [40.741, 2.5872, 10.6291, 37.044, 23.8542, 19.208, 47.628, 0.0, 66.41, 10.098, 14.8838, 1.582, 5.6506, 12.1382, 11.4154, 30.3869, 1.8547, 1.3478, 2.9938, 45.5544], [5.2067, 11.027, 40.8513, 41.2134, 34.5744, 65.9648, 0.0, 123.25, 8.415, 10.3142, 1.9232, 7.4131, 7.3771, 8.1583, 11.1847, 4.415, 4.3286, 8.2555, 78.7968], [30.2599, 5.5786, 6.0535, 27.5772, 14.5251, 18.9199, 59.535, 0.0, 56.26, 3.3, 20.6285, 6.7417, 15.0854, 11.0395, 2.7298, 30.8818, 4.4554, 13.919, 7.1971, 160.8768], [0.0, 266.51, 20.79, 93.5462, 12.346, 48.1075, 59.4355], [47.5031, 5.4331, 1.1652, 29.7381, 16.5326, 27.1793, 80.9676, 1.0152, 65.25, 7.59, 23.6314, 2.2851, 12.5453, 16.9517, 12.9664, 17.2225, 6.5117, 11.8195, 6.8342, 157.1832], [60.3508, 0.0, 6.9345, 11.2161, 76.8766, 36.2071, 74.0615, 0.0, 44.37, 8.4864, 0.8686, 2.2291, 15.853, 5.2734, 61.8625, 0.0, 7.0243, 5.0803, 147.744], [79.4535, 1.2613, 2.6999, 26.5482, 108.1704, 4.6099, 39.7694, 0.0, 63.8, 1.32, 0.0, 0.0, 13.7376, 15.8006, 15.7892, 67.3064, 10.2211, 0.0, 5.0198, 124.3512], [54.4341, 1.4715, 9.7481, 41.7774, 46.2913, 20.8407, 91.4458, 0.0, 95.12, 13.299, 13.4477, 1.8715, 6.6874, 13.8125, 10.9501, 27.7144, 13.5562, 10.8864, 114.0912], [76.7487, 3.0885, 19.6098, 44.7615, 48.8893, 14.31, 54.0578, 0.0, 90.19, 10.692, 15.4061, 0.9203, 7.6723, 11.1965, 11.1052, 68.1972, 3.2861, 6.3245, 14.1826, 138.7152], [88.7512, 1.0187, 18.132, 36.7353, 51.2511, 29.1962, 129.0719, 126.15, 18.249, 22.9786, 4.6737, 11.3011, 16.9517, 16.3475, 32.4654, 6.0682, 7.8538, 9.7373, 93.1608], [91.4561, 3.994, 19.354, 50.5239, 38.7335, 33.71, 102.8765, 0.0, 107.88, 13.53, 27.3523, 3.2468, 16.1741, 15.4867, 14.6725, 40.1859, 4.2739, 8.3981, 10.4328, 179.7552], [175.1358, 14.456, 20.4624, 92.8158, 117.9719, 60.5052, 225.7567, 11.3364, 249.98, 19.173, 78.9235, 4.5082, 30.4301, 37.0426, 39.8607, 130.4556, 33.0019, 30.2746, 33.0826, 508.4856], [161.9499, 13.3402, 36.0081, 116.9973, 106.6353, 74.2389, 261.7159, 0.0, 310.01, 32.538, 75.3984, 7.1449, 36.4954, 43.4256, 22.0862, 83.7371, 13.2854, 33.9811, 40.0075, 456.7752], [210.1292, 22.7512, 36.7186, 127.6989, 105.4544, 102.5707, 364.3542, 14.382, 394.98, 35.211, 84.9293, 21.4141, 56.9722, 42.7978, 21.0005, 129.1689, 14.3942, 40.487, 37.7093, 703.0152]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

