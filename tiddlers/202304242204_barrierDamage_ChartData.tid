created: 20230424220408000
creator: Drevarr
modified: 20230705163526495
modifier: drevarr
tags: ChartData
title: 202304242204_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Rucola", "Inedible Plant", "Eibh\u00ebar", "Tegan Parker", "Smol Bee", "Sassy Daddy Demon", "Arriasa", "Newtype Khan", "Grasszanine", "Mike The Archmagus", "Cat Wigglebooty", "Seren Nightroad", "Fribble Bibble", "Smol Gluvs", "Drevarr Moonwillow", "Panther B Me", "Rina Of Theros", "Leana Deeb", "Cyclotechnist Farra", "Tootsie Pop Rocks", "Arka\u00f1tor"];
const professions = ["Chronomancer", "Vindicator", "Chronomancer", "Tempest", "Vindicator", "Vindicator", "Druid", "Spellbreaker", "Spellbreaker", "Weaver", "Scrapper", "Scourge", "Scrapper", "Scourge", "Scrapper", "Scourge", "Scourge", "Weaver", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8728, 0, 617, 256, 2460, 112, 0, 3862, 0, 2725, 210, 1734, 0], [6005, 0, 1248, 758, 1123, 0, 0, 781, 2465, 5211, 1719, 1885, 0], [4983, 224, 2672, 6762, 750, 0, 0, 1746, 0, 2465, 1248, 673, 292], [14848, 0, 43, 2487, 1328, 0, 0, 1657, 0, 1774, 166, 180, 452], [6561, 402, 3439, 0, 4472, 0, 0, 1409, 311, 2190, 2738, 1593, 0], [12777, 0, 225, 1742, 3045, 70, 0, 1785, 37, 2827, 651], [6847, 0, 0, 3007, 2171, 0, 0, 3496, 3559, 1093, 0, 5501, 650], [8625, 0, 489, 2973, 1984, 304, 0, 2677, 0, 3293, 1094, 1497, 3478], [9627, 0, 1522, 1377, 1118, 1089, 0, 4850, 430, 2924, 2064, 1706, 371], [9196, 0, 1450, 1862, 4907, 0, 0, 726, 270, 1894, 1610, 4155, 2358], [7906, 0, 3399, 3865, 3256, 0, 0, 2086, 1567, 1613, 1952, 7670, 287], [13626, 449, 3460, 6504, 6523, 703, 919, 4775], [10749, 0, 2466, 6773, 4033, 0, 379, 2019, 5459, 3850, 841, 1488, 237], [14647, 0, 656, 4179, 5789, 0, 0, 3191, 2873, 4726, 4156, 9538, 1252], [10485, 201, 2721, 5667, 4753, 158, 1127, 2360, 1847, 8925, 4291, 3810, 4950], [13886, 0, 4678, 5214, 5156, 0, 0, 3473, 3475, 8684, 4152, 9550, 1149], [13692, 0, 7839, 3762, 7727, 0, 0, 4466, 4686, 8431, 4568, 6243, 2963], [24947, 0, 4006, 5896, 9377, 0, 0, 11056, 612, 1363, 9135, 9670, 946], [37538, 0, 8389, 23849, 13951, 1767, 19584, 10604, 18379, 11381, 16896, 15630], [50989, 331, 3395, 17833, 17387, 0, 951, 11797, 15687, 14161, 12735, 9875, 24252], [53309, 686, 8460, 23010, 14087, 2508, 1536, 20818, 4416, 29622, 5582, 16719, 19559]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

