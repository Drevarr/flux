created: 20230215221053000
creator: Drevarr
modified: 20230705163519300
modifier: drevarr
tags: ChartData
title: 202302152210_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "F\u00f9gly", "Cat Wigglebooty", "Primal Clone", "Bambiae", "Fribble Bibble", "Abigail Ryn", "Tegan Parker", "Mac Chiato", "Etchery Howls", "Tribal S", "Zadie Miststep", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Scrapper", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1343, 0.0831, 0.0, 0.0772, 0.0955, 0.0762, 0.25, 0.0763, 0.1111, 0.2615, 0.0492, 0.0, 0.1268, 0.1722, 0.3433, 0.12, 0.25, 0.1039, 1.04, 0.2632, 0.0, 0.1892, 0.0, 0.3077], [0.7636, 0.7048, 0.9375, 1.5169, 0.4], [0.4613, 0.3641, 0.0, 0.1545, 0.3455, 0.0667], [0.238, 0.2257, 0.0, 0.0285, 0.0045, 0.1857, 0.3542, 0.2288, 0.0, 1.0769, 0.5082, 0.0, 0.5563, 0.3444, 0.0, 0.2164, 0.08, 0.0833, 0.2857, 1.6, 0.6541, 0.0, 0.0, 0.0, 0.0], [0.2131, 0.2022, 0.0108, 0.0935, 0.05, 0.2381, 0.2917, 0.5, 0.0, 1.2462, 0.459, 0.0476, 0.2535, 0.351, 0.2059, 0.5597, 0.24, 0.0, 0.2987, 0.44, 0.3985, 0.0513, 0.2432, 0.0, 0.3333], [0.0554, 0.0, 0.3171, 0.2, 0.1048, 0.6875, 0.5932, 0.1333, 0.9308, 0.9508, 0.1905, 0.9296, 0.9338, 1.2836, 0.22, 0.0833, 1.1169, 2.28, 1.0677, 0.4103, 0.4234], [0.1727, 0.2095, 1.2292, 0.7288, 1.2308, 1.1475, 0.1429, 0.6127, 1.0066, 0.0, 1.6343, 0.72, 0.4167, 1.1039, 2.68, 0.9624, 0.2342, 0.0, 1.2821], [0.7869, 0.6938, 0.0, 0.2805, 0.1136, 0.3286, 1.9167, 1.161, 1.4231, 1.4262, 0.0, 1.1408, 1.4305, 0.0, 2.3284, 0.32, 0.1667, 1.7922, 3.92, 1.9023, 0.1538, 0.5405, 1.8205], [1.0759, 0.9505, 0.043, 0.4675, 0.1409, 0.5, 1.1667, 0.839, 1.3769, 1.2787, 0.0476, 1.4718, 1.5298, 2.0522, 0.66, 0.1389, 0.961, 3.44, 1.6992], [1.0934, 0.8691, 0.0, 0.1951, 0.5227, 0.3524, 2.8958, 0.8983, 0.0, 2.6077, 2.0164, 0.0952, 0.8944, 1.4503, 0.2941, 2.8806, 0.1, 0.25, 1.3247, 6.2, 1.7594, 1.3063, 0.0, 0.5385], [1.0832, 0.8977, 0.0, 0.7805, 0.5, 0.7, 1.5208, 0.8729, 0.1556, 2.2923, 1.5738, 0.2857, 1.0352, 1.6623, 0.0, 2.7985, 0.64, 0.7222, 2.5195, 4.92, 2.015, 0.4103, 1.2793, 0.1515, 1.8718], [1.2701, 1.073, 0.129, 0.8821, 0.7955, 0.7476, 1.5833, 1.0932, 0.3778, 1.1538, 1.6721, 0.5, 1.6549, 1.6225, 0.0588, 2.694, 0.62, 0.2778, 2.1039, 2.56, 2.2331, 0.3077, 0.4775, 0.0, 2.8718], [1.3212, 1.1628, 0.0968, 0.8415, 0.5864, 0.681, 1.7292, 1.4237, 0.0, 1.7538, 2.2459, 0.0238, 2.0775, 1.6358, 2.1343, 0.32, 1.3889, 2.2208, 4.0, 2.1128, 0.4359, 1.1802, 0.0, 2.9231], [1.3547, 1.2693, 0.1075, 0.8455, 0.7773, 0.7476, 1.5417, 0.7627, 0.2, 1.8231, 2.3115, 0.5476, 1.5493, 1.3046, 0.1765, 2.4104, 0.64, 0.5556, 2.2078, 3.0, 2.0602, 0.2308, 1.2973, 2.359]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

