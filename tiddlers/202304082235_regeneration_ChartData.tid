created: 20230408223537000
creator: Drevarr
modified: 20230705163525047
modifier: drevarr
tags: ChartData
title: 202304082235_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["The Gun Guardian", "Tootsie Pop Rocks", "Sygaldry Verdandi", "Bella Sassy", "Cat Wigglebooty", "Skye Nightroad", "Ak\u00e1nt\u00f3r", "Zadie Miststep", "Fribble Bibble", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Druid", "Tempest", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 584.2603, 82.5686, 142.295, 150.3292, 62.2908, 121.6644, 57.156, 436.5999, 93.7744, 39.3994], [321.6228, 7.9002, 111.8124, 26.6112, 13.9207, 27.3487, 399.171, 0.0, 0.0, 32.0914, 13.038, 235.2402, 67.1814, 0.0, 207.5332, 114.3078, 204.9029], [51.0324, 43.7052, 346.2165, 35.1175, 306.2321, 414.9278, 0.0, 56.1607, 46.8574, 0.0, 47.1978, 40.4976, 31.68, 125.6122, 33.0636, 57.8323, 16.3918, 36.7227, 12.6475, 27.104, 5.8266, 48.1433, 43.5404, 101.1685, 9.7075, 0.0, 0.0, 38.4946, 88.2252, 166.3757, 100.3118], [161.4048, 51.8826, 407.7864, 16.6842, 252.3931, 285.9325, 37.5652, 50.6722, 94.0102, 59.5508, 48.6486, 27.3874, 83.688, 218.0659, 6.1034, 4.6301, 2.3932, 7.6429, 67.3379, 11.7824, 2.5896, 31.2656, 78.2694, 16.386, 38.9699, 77.3121, 0.0, 31.1277, 84.1806, 124.8999, 84.8351], [338.8314, 14.1372, 369.054, 0.0, 46.8234, 223.5727, 1226.0852, 3.3163, 0.0, 0.0, 0.0, 4.4959, 192.9435, 88.2773, 0.0], [106.7976, 1.3094, 200.4998, 332.7296, 152.6569, 126.2596, 95.0912, 356.2126, 29.5, 0.0, 131.6952, 693.9411, 660.4016], [1435.4346, 809.655, 2271.6918, 29.1088, 65.3292], [186.8221, 136.7058, 305.2917, 21.2352, 18.0711, 964.6862, 1193.7314, 61.6085, 84.084, 162.7705, 102.184, 100.269, 115.5554, 5.808, 172.8143, 45.6746, 84.0403, 107.2045, 161.6384, 110.2198, 79.5766, 114.6004, 243.501, 34.1405, 12.3222, 22.7937, 117.3312, 248.4489, 266.9248], [1066.3398, 66.8052, 99.2061, 10.36, 0.0, 495.5882, 1353.1897, 0.0, 18.517, 114.8795, 0.0, 171.873, 15.7357, 68.156, 215.1792, 349.9159, 456.8054, 131.4222, 286.5409, 590.016, 183.7321], [680.8276, 650.265, 711.9819, 27.8432, 49.9491, 1609.7726, 2295.6534, 0.0, 129.6002, 39.5729, 178.8644, 229.32, 394.148, 44.44, 373.7158, 287.9521, 96.9696, 0.0, 179.2103, 156.0384, 191.6951, 115.726, 151.655, 185.752, 80.9178, 0.0, 180.4374, 38.9137, 92.1375, 277.7656, 476.2738], [1176.8111, 284.4996, 1026.2259, 114.4864, 283.7452, 1815.072, 3630.7754, 196.5117, 242.2728, 683.6658, 74.5604, 366.2568, 234.663, 210.65, 765.6103, 329.9485, 488.7355, 182.3144, 301.0896, 336.5949, 621.8688, 273.1381, 361.1588, 358.3233, 599.6804, 159.5397, 55.366, 73.3656, 104.7155, 166.9815, 969.8829, 966.4957]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

