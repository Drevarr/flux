created: 20230429215910000
creator: Drevarr
modified: 20230705163527498
modifier: drevarr
tags: ChartData
title: 202304292159_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Gabe Malhorn", "Belvyn Brightblade", "Johosh The Great", "Sakis Ranger", "Kenley Ellesmera", "Miphest\u00f6", "Kaotic Reaper Z", "Fallendruid", "Magister Boombottom", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Druid", "Druid", "Tempest", "Tempest", "Tempest", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[39.7845, 51.9259, 21.793, 0.0, 24.2659, 30.7188, 464.8669, 205.5178, 17.2353, 213.9525, 20.664, 56.923, 1.7644, 0.0, 28.3028, 41.7312, 199.8337], [2.4768, 0.0, 41.5838, 0.5506, 0.0, 32.7005, 152.1772, 609.7354, 314.0458, 11.4498, 318.3845], [22.1886, 82.976, 37.1813, 0.0, 28.3066, 67.5556, 548.5687, 94.705, 15.979, 169.0803, 95.1713, 9.2674, 51.0311, 35.4089, 31.7011, 92.46, 151.1804], [382.0995, 75.8632, 892.6168, 237.5802, 0.0, 0.0, 0.0, 0.0], [138.8142, 140.1653, 418.509, 366.1392, 2.8762, 86.2749, 227.181, 30.7709, 595.2679, 69.2359, 136.5581, 136.4477, 90.8224, 306.5049], [54.6494, 91.8338, 0.0, 21.5749, 6.0499, 126.9324, 1159.5919, 402.0106, 47.0554, 420.3878, 21.8325, 112.6106, 12.8372, 50.9327, 33.8455, 43.5344, 286.43], [53.7869, 425.2976, 1079.4313, 527.7888, 94.4965, 684.9949, 106.4258, 0.0, 429.5356, 134.0001, 77.2415, 77.1962, 61.9896, 258.928], [71.8956, 269.7559, 16.2883, 162.2659, 617.7248, 2612.7839, 1010.7955, 85.8127, 746.8677, 253.8413, 80.2043, 0.0], [103.2413, 265.9734, 26.111, 329.1241, 188.2762, 301.1344, 2436.3662, 995.6016, 72.7438, 154.1805, 26.0467, 377.8393, 101.5724, 77.9114, 112.8976, 123.2248, 462.5291], [39.2969, 359.4861, 226.033, 121.8448, 2765.7006, 1352.8301, 219.9482, 1194.2019], [79.233, 224.9856, 188.348, 477.3397, 94.7356, 397.2778, 359.617, 616.8876, 4865.65, 1934.5402, 1595.7387, 428.655, 795.211, 230.249, 192.3425, 88.8083, 180.0256, 858.2675]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

