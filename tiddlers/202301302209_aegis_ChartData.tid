created: 20230130220929000
creator: Drevarr
modified: 20230705163518327
modifier: drevarr
tags: ChartData
title: 202301302209_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["\u00c2 R K", "\u00c9\u00efbhear", "Whose Guardian", "Zaylen Harker", "Doctor House", "Belvyn Brightblade", "Sygaldry Verdandi", "Drevarr Moonwillow", "Tyrisai", "Gavann", "Arkitrix", "Bella Lunabringer", "Koralia Danai", "Ravioli Fetabringer"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[377.6842, 82.1363, 307.0948, 40.9746, 48.5512, 56.056, 81.6806, 72.8424, 48.3773, 6.5817, 0.0], [451.5683, 566.685, 41.4893, 0.0, 22.2244, 2.6435, 16.8317, 91.434, 54.4824, 37.9574, 7.8753, 19.572, 41.4936, 0.0, 0.0, 9.1185, 13.3668, 2.4872, 0.3436, 4.2435, 18.5885, 10.764, 8.9978], [62.5853, 148.8365, 421.8155, 65.7653, 54.9074, 23.0714, 200.676, 50.4533, 50.8003, 40.5178, 118.9081, 28.0496, 107.4251, 28.0313, 31.2699, 26.8793, 22.932, 85.5119], [478.7888, 59.535, 210.3173, 0.0, 21.8638, 19.4922, 56.305, 167.7814, 72.1022, 28.1299, 28.7005, 189.504, 48.397, 32.855, 0.0, 95.519, 14.0812, 13.4627, 7.7606, 10.1467, 9.393, 5.6909, 33.2584], [811.7536, 915.075], [633.3622, 947.0475, 223.4679], [288.1097, 98.4998, 54.782, 208.3027, 439.4928, 94.3589, 80.3326, 37.7405, 102.648, 59.927, 39.9528, 35.9176, 58.3091, 29.6476, 58.8647, 0.0, 19.0863, 50.9786, 28.679, 32.5919], [616.8355, 714.42, 144.6568, 0.0, 38.2729, 13.2177, 26.6573, 68.5755, 25.116, 35.8837, 5.546, 46.872, 49.7923, 2.6784, 0.0, 10.8359, 11.3176, 13.2258, 37.4289, 7.2611, 0.5264, 7.151, 2.7993], [914.3165, 1242.5175, 147.9908, 88.2216], [934.2458, 711.1125, 51.6764, 46.748, 96.7603, 231.7133, 245.5003, 76.3526, 93.8566, 35.9381, 200.34, 70.7962, 61.0675, 11.8162, 133.9965, 16.4124, 74.1829, 11.2974, 18.7468, 34.9398, 0.7862, 221.5446], [1384.8419, 1549.5638, 198.4632, 0.0, 65.9971, 85.1669, 82.1933, 445.1312, 194.9774, 83.1275, 32.7214, 273.42, 155.9866, 131.7326, 116.6592, 58.6184, 115.3211, 9.0339, 16.8043, 12.9133, 2.939, 34.1248], [1392.6192, 1664.775, 295.8889, 49.3495, 111.3025, 143.2613, 273.0662, 426.5396, 235.7813, 176.0825, 34.2188, 168.84, 97.0142, 21.2933, 71.0596, 158.5714, 13.818, 28.5046, 5.5375, 18.9166, 32.4723, 22.3704, 86.7783], [1838.3546, 2160.9, 315.7075, 79.7667, 164.9477, 87.0461, 387.5558, 581.3678, 176.353, 381.0162, 86.1016, 333.48, 299.5618, 129.9917, 175.3772, 47.3384, 145.6022, 30.0523, 70.6496, 71.722, 33.3029, 418.1621], [2346.3082, 1831.2525, 464.2539, 57.8336, 174.144, 126.763, 200.9549, 705.8705, 213.7565, 129.1091, 89.5402, 269.724, 252.4867, 111.2875, 169.0168, 209.3568, 68.1876, 167.869, 39.8541, 64.5578, 100.674, 29.5027, 267.9996]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

