created: 20230625215649000
creator: Drevarr
modified: 20230705163536781
modifier: drevarr
tags: ChartData
title: 202306252156_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Raziel Umbra", "Tegan Parker", "High Sorcer Baradun", "Eibh\u00ebar", "Primal Clone", "Momomeko", "Miphest\u00f6", "Artakama Nahid", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[31.9654, 2.7054, 169.9277, 15.6941, 173.3021, 131.6561, 41.8759, 34.9114, 0.0, 29.8351, 31.8392, 24.7475, 0.0, 5.0828, 13.8709, 0.0, 0.0, 7.1663, 44.7802, 35.8301, 24.5058, 204.255], [0.0, 170.6656, 83.8157, 36.8914, 112.0123, 123.677, 199.5398, 9.576, 47.5776, 36.5354, 32.4106, 53.1993, 38.4384, 0.0, 0.0, 0.0, 45.4532, 0.0, 9.0437, 36.7488, 37.1206, 202.98], [0.0, 43.8124, 0.0, 0.0, 339.9619, 97.7109, 94.5068, 0.0, 0.0, 124.7765, 229.1593, 161.4501, 0.0, 22.2195, 77.5866, 14.4901, 29.2824, 119.7192, 206.879, 107.9703, 372.81], [0.0, 42.2343, 160.264, 143.4553, 585.121, 105.352, 380.7731, 50.1782, 0.0, 72.0594, 113.3331, 54.7942, 0.0, 7.2324, 8.623, 0.0, 0.0, 27.2318, 48.7642, 83.8541, 0.0, 365.16], [84.1428, 222.3689, 257.6662, 86.3517, 857.4528, 134.4962, 321.735, 153.8726, 154.8288, 93.7615, 82.8443, 110.103, 0.0, 0.0, 0.0, 0.0, 0.0, 138.4762, 5.6043, 553.35], [62.2242, 142.5632, 77.01, 925.9886, 128.5456, 384.2056, 149.2762, 28.992, 48.2924, 172.285, 194.1723, 63.7683, 82.7708, 98.6811, 0.0, 35.6517, 54.3973, 162.4675, 171.216, 42.2286, 445.74], [33.3455, 104.1579, 106.8746, 34.9212, 900.6274, 206.7143, 295.6484, 132.313, 133.44, 81.583, 145.9514, 173.9524, 0.0, 58.482, 31.7755, 0.0, 39.8417, 26.3057, 149.2406, 126.1152, 61.978, 633.93], [11.5731, 241.305, 132.2112, 1141.2576, 210.7039, 733.4002, 135.815, 65.3568, 132.4039, 210.8764, 172.8206, 29.5434, 22.4807, 89.3584, 74.9821, 109.4342, 192.9451, 223.3325, 59.517, 445.995], [40.8248, 248.4459, 341.769, 0.0, 1364.3765, 318.2873, 972.9852, 180.959, 50.0736, 183.7725, 228.536, 123.8916, 10.7184, 44.3386, 42.436, 2.378, 0.0, 23.7699, 132.468, 138.0586, 43.1385, 697.425], [63.2184, 152.5545, 497.3446, 188.2957, 1249.345, 260.5399, 886.4874, 160.6579, 108.2496, 214.2819, 244.6893, 151.829, 32.0074, 38.4723, 38.464, 51.4886, 33.053, 115.2571, 80.7638, 12.3253, 647.445], [67.1139, 288.8766, 483.3754, 139.4129, 1599.8741, 424.9241, 1106.393, 237.4848, 137.2032, 217.1896, 381.4474, 131.6606, 63.6082, 93.318, 139.306, 0.0, 98.114, 85.6863, 189.001, 190.5091, 90.992, 931.26]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

