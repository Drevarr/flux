created: 20230501220820000
creator: Drevarr
modified: 20230705163527990
modifier: drevarr
tags: ChartData
title: 202305012208_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Black Raspberry Pie", "Eibh\u00ebar", "Lord Erin The Wise", "Venomina The Siren", "Be\u00eb", "Smol Gluvs", "Sub Train", "Tika Sumiko", "Mac Aaroni", "Tyzzki", "Xkaet", "Sygaldry Verdandi", "Elonith Primal", "Miphest\u00f6", "Blancooo Padreee", "Zadie Miststep", "Kiloak", "Drevarr Moonwillow", "Gabe Malhorn", "Koralia Danai", "Whose Guardian", "Johosh The Great", "Bella Sassy"];
const professions = ["Firebrand", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Scourge", "Scourge", "Firebrand", "Tempest", "Tempest", "Tempest", "Tempest", "Firebrand", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[759.145, 0.0, 0.0, 0.0, 16.4493, 74.2417, 314.2212], [459.968, 123.8486, 8.8044, 0.0, 85.0248, 141.9818, 276.3425, 16.3792, 73.0303, 10.7712, 0.0, 0.0, 0.0, 14.938], [446.7884, 0.0, 98.5072, 0.0, 53.8461, 69.5851, 430.44, 0.0, 51.8035, 0.0, 8.4634, 0.0, 0.0, 51.8756], [81.3363, 24.4992, 40.5306, 69.9647, 118.7867, 419.2486, 29.4408, 514.7499], [85.6674, 125.8868, 0.0, 0.0, 31.3551, 143.3875, 419.2486, 75.4, 470.5274, 26.1558, 1.1902, 7.8939, 0.0, 65.3877], [466.5578, 0.0, 0.0, 0.0, 95.5426, 69.2337, 600.4638, 58.0232, 220.8598, 0.0, 0.0, 0.0, 0.0, 143.3369], [767.492, 0.0, 0.0, 0.0, 0.0, 67.5643, 622.8467, 19.9056, 76.5681, 7.5834, 0.0, 0.0, 0.0, 101.3068], [78.5215, 133.342, 7.0191, 67.6494, 43.315, 764.031, 85.1904, 685.8278, 0.0, 201.093, 0.0, 0.0, 47.8695], [753.4338, 61.9243, 0.0, 0.0, 57.8372, 31.6296, 482.9537, 14.5232, 545.0739, 46.3518, 56.0698, 68.4212, 16.1327, 140.1456], [862.3852, 85.3157, 6.061, 32.3037, 0.0, 115.7995, 733.4698, 14.5232, 666.3699, 5.0094, 37.997, 0.0, 0.0, 218.5701], [1216.0378, 158.1107, 61.3756, 27.9873, 55.8306, 69.9366, 411.0702, 44.892, 767.4499, 116.721, 111.7869, 118.7613, 88.6002, 53.0299], [290.7918, 619.6894, 15.9687, 69.5016, 255.7605, 2053.6292], [514.0044, 205.5731, 23.0318, 16.9389, 95.1237, 277.5497, 425.7052, 32.596, 845.0288, 114.5826, 206.4707, 52.7877, 1.8615, 534.373], [1372.4357, 522.0857, 159.9466, 38.709, 50.5827, 103.2355, 1086.0001, 21.3904], [1118.948, 525.1917, 17.1622, 33.1452, 26.3056, 392.7342, 1187.584, 84.68], [1137.8388, 303.1184, 267.8324, 45.8667, 41.0792, 296.0882, 623.7076, 2.4128, 809.3981, 144.3024, 104.0288, 100.5039, 83.1168, 119.2324], [1388.6905, 54.2565, 163.0728, 53.1828, 44.7394, 99.0182, 1120.0049, 11.6696, 886.977, 101.4156, 84.1928, 54.8824, 0.0, 196.4347], [2027.4618, 59.4007, 101.6972, 26.4726, 85.3555, 262.5257, 1393.3343, 32.8048, 1492.6989, 8.1378, 91.7305, 8.0042, 26.3492, 69.6654], [1748.4936, 190.7229, 236.8894, 11.0088, 27.8933, 417.95, 1497.5008, 19.6504, 845.5342, 100.089, 201.666, 75.8079, 63.997, 264.7421], [1951.4594, 418.2315, 58.1856, 18.8397, 96.0057, 305.8407, 1627.4936, 36.2384, 1391.3662, 112.5432, 217.1822, 15.6334, 80.505, 188.083], [2160.1364, 868.5899, 252.5842, 51.9057, 165.375, 239.9457, 800.188, 50.808, 1000.9447, 189.783, 322.4893, 119.9277, 379.6289], [2367.0562, 369.7986, 488.1976, 61.8552, 102.0033, 453.3576, 1372.6732, 18.0264, 1484.1071, 130.2444, 191.2631, 124.362, 7.9654, 330.4014], [2727.7379, 542.7595, 385.7986, 56.4399, 21.3885, 620.9066, 1359.76, 9.2104, 1448.9818, 138.6594, 401.701, 157.0401, 159.2062, 380.1042], [2880.1819, 802.2009, 344.3286, 44.0847, 182.5078, 920.1578, 1783.3129, 97.1384, 1875.034, 181.3482, 501.8949, 275.2502, 128.73, 528.3299]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

