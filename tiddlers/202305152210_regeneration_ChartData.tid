created: 20230515221048000
creator: Drevarr
modified: 20230705163530299
modifier: drevarr
tags: ChartData
title: 202305152210_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Rosetendril", "Cat Wigglebooty", "Tika Mi", "Tootsie Pop Rocks", "Fribble Bibble", "Artakama Nahid", "Tribal S", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[358.625, 60.8441, 45.0792, 506.5698, 464.2637, 218.1504, 69.89, 28.2803, 699.7445, 28.4616, 3.9744, 44.5236, 52.9502, 154.5938, 41.1768, 78.741, 153.2491, 126.6432, 20.5843, 4.8166, 21.7967, 268.6214, 162.8385, 46.8588, 66.298], [0.0, 163.835, 0.0, 0.0, 42.4466, 565.6896, 1663.6339, 0.0, 16.5158, 96.0596, 92.9462, 101.6928, 354.16, 7.3292, 25.6536, 352.053, 0.0, 264.0576, 402.144, 29.5804, 426.1434, 12.4907, 153.4621, 0.0, 213.4625], [464.174, 112.4587, 91.3464, 605.8112, 1129.9738, 1049.0189, 52.7673, 5.7077, 543.2336, 141.9682, 54.2808, 80.3404, 99.3524, 100.9546, 23.9148, 121.9118, 269.5248, 236.7197, 59.4075, 262.9594, 346.8304, 216.5972, 71.1684, 183.8326], [0.0, 147.376, 0.0, 0.0, 94.0602, 813.2813, 1747.1002, 0.0, 116.4309, 229.6186, 194.724, 10.8147, 423.7229, 8.2048, 239.5764, 617.5845, 95.3064, 562.7952, 340.1184, 0.0, 266.3396, 0.0, 137.8346, 0.0, 528.7649], [540.127, 64.6061, 67.8024, 465.817, 1334.231, 1710.5837, 32.3215, 11.4002, 415.2093, 269.833, 238.788, 74.7681, 392.559, 230.3179, 264.1716, 610.9155, 300.9629], [167.61, 798.639, 112.7848, 838.2713, 1281.7613, 853.3949, 183.575, 26.6561, 759.3677, 175.4707, 105.3, 165.8498, 252.2612, 160.3988, 98.91, 202.176, 185.1221, 420.9744, 204.9571, 47.7214, 315.6445, 313.3326, 299.923, 94.1528, 204.665], [717.401, 5.8938, 196.6896, 392.482, 1303.5456, 1146.9494, 530.3152, 217.7808, 208.8288, 0.0, 260.6686, 402.1969, 197.3664, 650.754, 228.4229, 711.3072, 531.5117, 95.206, 521.3729, 319.2231, 376.3727], [452.1211, 1628.233, 72.9076, 132.9696, 880.9172, 2850.7008, 3507.479, 28.7357, 1234.8627, 403.3051, 267.3648, 152.9639, 480.7959, 307.0148, 393.1704, 725.517, 508.9406, 1029.0576, 1040.735, 187.1155, 918.318, 768.1083, 641.2276, 155.3719, 997.6365], [191.8373, 2264.094, 207.5119, 337.6296, 2269.4006, 4592.5094, 3798.8995, 384.3272, 3352.48, 278.8954, 333.9792, 115.5523, 444.7008, 850.6389, 304.038, 679.3605, 215.0755, 1001.8848, 742.2624, 61.5987, 718.1262, 1540.3329, 963.9042, 111.5592, 728.3626]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

