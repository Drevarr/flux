created: 20230304223548000
creator: Drevarr
modified: 20230705163521142
modifier: drevarr
tags: ChartData
title: 202303042235_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Nelliel T", "Tribal S", "Hyde En Sikh", "Venomina The Fierce", "Sygaldry Verdandi", "Demon Maddx", "Oo Dads Mad", "Drevarr Moonwillow", "I Make Tools", "Cat Wigglebooty", "Be\u00eb", "Lucky Leipreach\u00e1n", "Newtype Khan", "Tootsie Pop Bringer", "Nimplet", "Pinky Aldar"];
const professions = ["Scourge", "Druid", "Chronomancer", "Spellbreaker", "Firebrand", "Scourge", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper", "Scourge", "Scrapper", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6268, 9542, 5361, 0, 0, 0, 0, 0, 2907, 0, 2935], [0, 5625, 4234, 0, 0, 0, 0, 0, 0, 3063, 9065, 0, 0, 2580, 2458, 974, 0, 0, 0, 1165, 3836], [0, 3734, 4279, 0, 3067, 3255, 5647, 0, 475, 3043, 0, 0, 2580, 1867, 0, 0, 3368, 968, 0, 3352], [3182, 716, 0, 0, 2616, 3893, 0, 3924, 0, 0, 2570, 0, 0, 1289, 6757, 4645, 0, 3367, 0, 3404], [8487, 6251, 0, 0, 3504, 0, 6330, 0, 1185, 796, 0, 0, 2580, 2616, 269, 0, 493, 2318, 1840, 1064], [12427, 13139, 5002, 0, 3287, 8008, 0, 0, 0, 1198], [13681, 5885, 8267, 0, 0, 1775, 0, 0, 0, 4521, 12066], [7956, 3711, 2347, 0, 3116, 327, 2940, 0, 18, 4918, 7738, 0, 0, 832, 5038, 135, 0, 1811, 1861, 1514, 2172], [0, 2292, 4158, 19433, 0, 0, 4133, 14125, 1381, 1036], [2707, 5004, 9699, 0, 0, 58, 2405, 827, 2491, 11248, 13, 0, 3873, 6832, 1362, 0, 727, 909, 1297, 0], [13512, 4995, 5967, 0, 11665, 14231, 0, 1346, 0], [27758, 53, 0, 70, 0, 0, 7329, 0, 22235, 12550], [5708, 6111, 11686, 60, 3061, 3331, 6254, 0, 4942, 0, 6526, 14813, 1924, 2886, 2076, 7220, 1620], [20066, 6952, 12840, 0, 0, 0, 11878, 0, 0, 148, 12984, 20503, 0, 0, 17, 2129, 269, 0, 20261, 1639, 982, 10151], [19811, 2886, 0, 8667, 59263, 0, 89, 27866, 11612, 11748, 34990], [6047, 50676, 147104, 18843, 7344]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

