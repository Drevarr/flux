created: 20230531221142000
creator: Drevarr
modified: 20230705163532579
modifier: drevarr
tags: ChartData
title: 202305312211_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Soxx", "Kira Dragonblaze", "Sub Train", "Brace Stonebrow", "Gavann", "Blanco Padre Guard", "Sygaldry Verdandi", "Crusader Siolith", "Koralia Danai", "Tika Fiery", "Bella Sassy", "Solus Sanctus"];
const professions = ["Firebrand", "Willbender", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[186.6345, 65.7466, 23.9328, 1010.7779], [286.416, 0.0, 0.0, 628.721, 219.6415, 0.0, 0.0, 0.0, 124.1975, 0.0, 68.9584, 50.6886, 90.1678, 0.0, 15.2703], [405.093, 93.3221, 20.2608, 1310.3541], [1076.712, 235.2749, 40.176, 1130.6084, 199.085, 39.7705, 21.0073, 36.0528, 216.3175, 49.5883, 64.0892], [1138.6502, 40.2781, 267.9104, 312.132, 149.695, 71.69, 190.6226, 489.5689, 351.5062, 64.2893, 38.6312], [730.9575, 136.2475, 55.08, 1104.9304, 359.7384, 14.9234, 59.0999, 101.9424, 25.2625, 39.2206, 71.393, 104.0148, 296.2464, 0.0, 117.5009], [694.4925, 469.5989, 0.0, 2510.9932, 540.2779, 0.0, 44.494, 228.9264, 369.3025, 285.7957, 145.3522, 482.1147, 441.2697, 70.1747, 157.9538], [1376.388, 308.6285, 141.264, 2458.0811, 600.1598, 0.0, 236.2643, 135.2424, 254.27, 128.2705, 141.5358, 342.3198, 499.7642, 157.5788], [1443.6825, 673.3589, 59.832, 3279.7758, 845.7204, 121.3418, 132.986, 284.7816, 676.2125, 307.6564, 291.0334, 487.9634, 613.9229, 227.7299, 58.0807], [1946.2365, 998.1523, 96.768, 4768.3194, 1196.2978, 148.6507, 143.67, 428.1936, 631.915, 0.0, 388.8403, 82.903, 275.9906], [1635.621, 547.9786, 288.3168, 4316.2316, 1114.2953, 46.2931, 157.5546, 283.5384, 476.11, 340.5277, 281.6898, 739.8007, 745.0638, 105.2339, 108.8746], [1947.894, 731.0909, 197.64, 3382.4876, 1173.7303, 163.4218, 99.8071, 509.4456, 930.0125, 430.7028, 527.3212, 539.7988, 853.2922, 156.823, 167.1696], [1958.1705, 932.9491, 189.648, 4361.3626, 941.3527, 61.9018, 253.3496, 427.7496, 636.2625, 421.2192, 419.9356, 595.8773, 813.8016, 57.7562, 267.8464]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

