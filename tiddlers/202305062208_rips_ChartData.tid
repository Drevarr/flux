created: 20230506220820000
creator: Drevarr
modified: 20230705163528980
modifier: drevarr
tags: ChartData
title: 202305062208_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Hyde En Sikh", "Antherisa", "Venomina The Fierce", "Im Killin It", "Johosh The Mighty", "Arriasa", "Ria Zerria", "Blancooo Padreee", "Smol Daddy Tika", "Mammary Mission", "Smol Gluvs", "Im Killin It", "Newtype Khan", "Dargon Spiritwalker", "Puny Demon", "Rina Of Theros", "Be\u00eb"];
const professions = ["Chronomancer", "Reaper", "Spellbreaker", "Harbinger", "Spellbreaker", "Druid", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0268, 0.0803, 0.0128, 0.0063, 0.0165, 0.0078, 0.0159, 0.0129, 0.0725, 0.1235, 0.0324, 0.0, 0.0, 0.1014, 0.0], [0.0125, 0.0329, 0.013, 0.0833, 0.0525, 0.058, 0.0494, 0.0354, 0.0, 0.0, 0.0878, 0.1585], [0.0238, 0.1159, 0.2593, 0.2153, 0.0, 0.0, 0.2297, 0.3171], [0.3248], [0.1104, 0.2205, 0.0538, 0.0312, 0.0453], [0.0401, 0.0821, 0.0436, 0.0125, 0.0535, 0.0365, 0.0794, 0.0595, 0.0, 0.0741, 0.0678, 0.0, 0.0, 0.0878, 0.0122], [0.0278, 0.1249, 0.1884, 0.3333, 0.1298, 0.0317, 0.0, 0.3378, 0.2805], [0.0033, 0.053, 0.0308, 0.0, 0.0165, 0.0938, 0.1746, 0.1169, 0.0, 0.1358, 0.1209, 0.0, 0.0, 0.1689], [0.0268, 0.1214, 0.0359, 0.0, 0.0741, 0.0781, 0.1032, 0.11, 0.4783, 0.3457, 0.2094, 0.0, 0.0, 0.2162, 0.2317], [0.0502, 0.0889, 0.0179, 0.025, 0.1358, 0.1823, 0.1548, 0.1943, 0.0, 0.0864, 0.118, 0.0159, 0.0, 0.3041, 0.1341], [0.0669, 0.0615, 0.0128, 0.0312, 0.0412, 0.1849, 0.131, 0.2012, 0.2029, 0.3086, 0.1976, 0.0, 0.1824, 0.4634], [0.1179, 0.15, 0.2675, 0.3307, 0.5437, 0.1675], [0.0769, 0.0821, 0.1282, 0.025, 0.0329, 0.1302, 0.1984, 0.1913, 0.1159, 0.4691, 0.2153, 0.0, 0.0, 0.25, 0.1707], [0.0602, 0.1726, 0.0615, 0.0563, 0.0741, 0.1276, 0.2063, 0.1635, 0.2464, 0.3827, 0.2507, 0.0794, 0.0, 0.2905, 0.3659], [0.0736, 0.2906, 0.1128, 0.0563, 0.1276, 0.1328, 0.246, 0.2141, 0.2174, 0.0741, 0.1121], [0.0602, 0.2171, 0.1231, 0.0125, 0.1029, 0.0677, 0.25, 0.1833, 0.0435, 0.3951, 0.2124, 0.0794, 0.0417, 0.3716, 0.2683], [0.1371, 0.3795, 0.1949, 0.0312, 0.2222, 0.276, 0.3571, 0.2498, 0.058, 0.4691, 0.2802, 0.0, 0.0417, 0.5541, 0.5732]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

