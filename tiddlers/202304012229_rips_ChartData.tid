created: 20230401222944000
creator: Drevarr
modified: 20230705163524023
modifier: drevarr
tags: ChartData
title: 202304012229_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Nelliel T", "Oo Dads Mad", "Tac Mancer", "Morv\u00e4rth", "Newtype Khan", "Venomina The Fierce", "Smol Gluvs", "Rina Of Theros", "Macette", "Be\u00eb"];
const professions = ["Druid", "Reaper", "Spellbreaker", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Chronomancer", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0303, 0.0377, 0.026, 0.0554, 0.0588, 0.1151, 0.0294, 0.0381, 0.0, 0.0841, 0.0741, 0.0455, 0.0965, 0.0, 0.027, 0.0541, 0.0298, 0.0, 0.0661, 0.0147, 0.0674, 0.022, 0.0256, 0.1071, 0.0, 0.0, 0.0417, 0.0229, 0.0941], [0.0, 0.0896, 0.0714, 0.1792, 0.0588, 0.0, 0.2206, 0.0762, 0.0, 0.1589, 0.0, 0.1605, 0.0, 0.2544, 0.0, 0.0, 0.0, 0.0476, 0.0, 0.1488, 0.0, 0.0345, 0.011, 0.0, 0.125, 0.0244, 0.0, 0.1875, 0.0229, 0.0], [0.2294, 0.1344, 0.2013, 0.3062, 0.2941, 0.2086, 0.2059, 0.219, 0.0698, 0.3364, 0.9138, 0.2593, 0.0682], [0.2771, 0.1392, 0.1948, 0.228, 0.0, 0.0811, 0.5676, 0.1905, 0.0, 0.4876, 0.0147, 0.1069, 0.1209, 0.1964, 0.0244, 0.0, 0.125, 0.0992, 0.0706], [0.0, 0.1038, 0.1494, 0.2508, 0.0588, 0.2302, 0.1471, 0.181, 0.0698, 0.3551, 0.4138, 0.3827, 0.0, 0.2456, 0.0, 0.0, 0.1892, 0.125, 0.0, 0.1322, 0.0, 0.1135, 0.3626, 0.0256, 0.1071, 0.0, 0.0, 0.0, 0.1298, 0.0], [0.1039, 0.217, 0.0519, 0.3029, 0.3235, 0.4604, 0.4265, 0.2762, 0.0233, 0.2897, 0.6049, 0.1591, 0.2807, 0.0, 0.0541, 0.0, 0.131, 0.0, 0.2562, 0.0588, 0.2747], [0.1688, 0.1651, 0.1494, 0.43, 0.0, 0.3597, 0.6176, 0.2857, 0.0, 0.243, 0.0, 0.0, 0.3947, 0.0, 0.0, 0.0, 0.0893, 0.0, 0.314, 0.0, 0.278, 0.3516, 0.0, 0.1071, 0.0, 0.0625, 0.0763, 0.2], [0.2035, 0.2665, 0.2403, 0.3453, 0.5588, 0.0863, 0.5, 0.3524, 0.0698, 0.2056, 0.5862, 0.4938, 0.1023, 0.3246, 0.0185, 0.0, 0.0811, 0.2262, 0.0, 0.3058, 0.0, 0.1743, 0.1868, 0.0, 0.3214, 0.0244, 0.0, 0.1458, 0.2443, 0.1647], [0.0996, 0.2005, 0.2143, 0.3485, 0.7059, 0.4892, 0.4265, 0.4476, 0.0465, 0.4299, 0.7759, 0.0247, 0.0909, 0.4035, 0.0185, 0.0, 0.1892, 0.1548, 0.0, 0.314, 0.0441, 0.3372, 0.2088, 0.0256, 0.3571, 0.0, 0.0, 0.0625, 0.2977, 0.2353], [0.2511, 0.1769, 0.1364, 0.5472, 0.3235, 0.7122, 0.2647, 0.1714, 0.0, 0.486, 0.1897, 0.8395, 0.1818, 0.4649, 0.0556, 0.0811, 0.0541, 0.1369, 0.0, 0.281, 0.1176, 0.3289, 0.2747, 0.3077, 0.3929, 0.0732, 0.1667, 0.3542, 0.3282, 0.1294], [0.2684, 0.3042, 0.3506, 0.8274, 0.5294, 0.5324, 0.3971, 0.4095, 0.0698, 0.4579, 1.3276, 0.5679, 0.1591, 0.8246, 0.0093, 0.1351, 0.2703, 0.0714, 0.0, 0.5868, 0.0147, 0.4178, 0.3077, 0.0, 0.875, 0.122, 0.0, 0.2917, 0.3511, 0.1059]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

