created: 20230204220933000
creator: Drevarr
modified: 20230705163518706
modifier: drevarr
tags: ChartData
title: 202302042209_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Mac Arons", "Ravioli Fetabringer", "Tootsie Pop Bringer", "Vinthry Stormgrave", "Cat Wigglebooty", "Tegan Parker", "Mike The Archmagus", "Arkintor", "Zaidy Sagemist", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Tempest", "Tempest", "Tempest", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[638.7356, 285.5416, 12.1219, 292.4849, 245.2151, 462.9105, 97.3056, 225.3951, 20.237, 514.2633, 354.2308], [493.6613, 254.7363, 66.6413, 144.9175, 187.8043, 211.335, 22.7942, 374.4722, 30.5882, 915.7277, 831.871], [968.1155, 257.5009, 70.2134, 215.9685, 394.1687, 508.0725, 53.2224, 171.8802, 22.3807, 618.7274, 495.3518], [887.6095, 237.5564, 0.0, 1094.0205, 53.4374, 17.0035, 10.535, 1163.2742, 1077.5472], [1327.3277, 493.8725, 85.439, 345.1521, 474.3866, 631.9785, 43.1693, 288.9275, 0.0, 802.373, 925.2851], [1896.1824, 348.3371, 25.7078, 384.7353, 683.2678, 672.219, 76.6618, 116.2564, 84.378, 1352.1986, 1151.2501], [2027.7709, 563.1844, 101.8358, 591.2634, 511.0352, 879.7905, 109.0253, 320.0347, 55.5905, 1183.278, 1138.9663], [2262.7504, 1784.7339, 386.1446, 1067.9178, 636.2381, 1336.6215, 177.408, 543.9799, 79.576, 1014.3573, 1232.0947], [2888.8175, 1194.496, 357.2746, 788.8481, 774.0241, 1673.889, 320.5709, 735.368, 68.649, 1834.5115, 1677.4542], [3065.3587, 1155.1995, 276.7546, 790.3386, 1271.3751, 2378.8215, 445.0253, 250.8344, 92.6958, 890.4452, 2301.6432], [6798.8764, 2152.0281, 599.5373, 2219.308, 2256.4823, 4110.321, 598.8326, 1766.254, 170.2995, 4005.4751, 4369.037]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

