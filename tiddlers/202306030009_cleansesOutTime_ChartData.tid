created: 20230603000934000
creator: Drevarr
modified: 20230705163532995
modifier: drevarr
tags: ChartData
title: 202306030009_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "N\u00f3b\u00fa", "Sister Elon\u00edth", "Air One Com", "Ana Larive", "Newtype Khan", "Miphest\u00f6", "Dusknant", "High Sorcer Baradun", "Black Raspberry Pie", "Cat Wigglebooty", "Primal Clone", "Venomina The Siren", "Tegan Parker", "Sakis Ranger", "Pamtastic", "Zadey Starbolt", "Arriasa", "Drevarr Moonwillow", "Johosh Of The North"];
const professions = ["Firebrand", "Druid", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Tempest", "Vindicator", "Tempest", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Druid", "Tempest", "Scrapper", "Druid", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 2.0, 0.0, 39.418, 0.0, 0.0, 12.4407, 22.1552, 15.9692, 13.0071, 0.0, 3.0, 0.0, 36.3886, 12.0106, 17.1544, 1.0, 0.0, 9.0147, 0.0, 10.0667, 8.9926], [15.0333, 0.0, 0.0, 13.9322, 44.065, 30.3077, 35.0213, 4.0122, 26.8913, 0.0, 4.9829, 43.1323, 12.0268, 20.0222, 0.0, 19.0221, 0.0, 15.9481, 14.989], [12.0123, 0.0, 35.9931, 2.0167, 1.0, 11.0, 45.8087, 12.0205, 3.9929, 0.0, 23.4348, 0.0, 35.1657, 13.0265, 28.443, 13.0148, 1.0, 11.0, 1.0, 4.9778, 3.9963], [0.0, 1.0, 0.9706, 50.3926, 3.0, 0.0, 0.0, 29.6101, 31.6564, 15.9787, 0.0, 11.587, 29.4057, 20.0741, 22.5839, 10.0222, 0.0, 5.9853, 0.0, 9.963, 1.9963], [12.0123, 0.0, 53.0462, 4.0, 0.0, 0.0, 0.0, 66.4585, 68.0051, 18.9716], [0.0, 1.0, 0.0, 49.0924, 0.0, 0.0, 0.0, 0.9831, 57.4982, 19.9795, 20.9787, 0.0, 17.087, 0.0, 25.9714, 33.0688, 19.0268, 8.0074, 0.0, 16.9559, 0.0, 2.9852, 18.0147], [78.7621, 64.6751, 25.0103, 12.9787, 8.0488, 13.2391, 0.0, 28.96, 21.0212, 27.0403], [7.0213, 22.3704, 0.0, 105.1686, 6.0667, 16.1525, 88.4621], [5.0213, 36.0617, 0.9706, 134.7529, 3.0, 0.0, 1.4762, 52.2542, 17.0542, 26.0256, 76.8014], [2.4681, 10.0123, 0.0, 106.3834, 0.0, 0.0, 51.0359, 23.0071, 0.0, 10.0435, 0.0, 35.2114, 43.1534, 37.0805, 27.1111, 7.0247, 39.2574, 0.0, 28.2815, 35.1066], [0.0, 27.1235, 0.0, 105.7136, 19.05, 0.0, 0.0, 7.9831, 135.6462, 44.041, 54.1702, 0.0, 33.7391, 0.0, 67.4286, 38.1058, 58.2617, 0.0, 0.0, 29.375, 14.4512, 47.2296, 41.989], [0.0, 16.2222, 0.0, 131.7436, 0.0, 0.0, 0.0, 29.9661, 116.2094, 97.1077, 28.4823, 2.0, 0.0, 34.3886, 64.2434, 66.604, 30.1259, 0.0, 32.9706, 0.0, 34.8963, 38.0515], [3.0, 51.358, 195.9122, 5.0, 0.0, 0.0, 60.7797, 117.8231, 143.1692, 56.2908, 10.8049, 90.2391, 125.1486, 73.254, 85.0, 46.1481, 56.5221, 2.0122, 69.6519, 47.25], [15.0426, 38.284, 2.9706, 232.5681, 7.15, 0.0, 1.0, 67.3898, 214.7256, 72.6154, 99.7801, 7.0122, 90.9783, 33.7543, 113.6296, 107.443, 40.1926, 6.0247, 67.8676, 2.0, 90.3481, 50.2426], [0.0, 55.4321, 0.0, 220.933, 35.5667, 2.0, 3.0, 35.2542, 187.2347, 155.759, 61.1418, 21.8171, 93.1522, 0.0, 108.4343, 89.3228, 103.4094, 53.2889, 15.0617, 30.0147, 0.0, 43.8741, 86.386], [4.0, 36.1481, 0.0, 221.7806, 4.0, 0.0, 8.4762, 46.678, 208.3285, 168.3949, 64.773, 5.0122, 58.1522, 0.0, 78.0457, 124.5079, 96.4765, 71.7037, 3.0123, 65.6544, 2.0854, 92.6741, 83.511], [23.0851, 61.5062, 234.7321, 34.4667, 8.0476, 7.8095, 59.6271, 191.2058, 118.0667, 94.2837, 17.3659, 67.6522, 0.0, 139.3314, 97.0423, 153.2685, 71.4889, 7.037, 86.4265, 0.0, 79.9926, 78.239], [19.5319, 30.1481, 8.9412, 316.2864, 20.05, 0.0, 56.4915, 203.935, 171.6513, 149.305, 11.2073, 71.087, 0.0, 179.6057, 106.8413, 37.2148, 4.0123, 70.8015, 16.3171, 50.9407, 102.5699], [5.0, 60.5309, 1.9706, 285.5012, 25.2, 3.0238, 11.2381, 73.3729, 202.5451, 194.5641, 127.9787, 29.378, 65.6522, 0.0, 177.6743, 133.1852, 167.1745, 63.9704, 9.0988, 65.125, 2.0244, 82.8222, 98.6544], [19.0638, 65.2222, 0.0, 265.8037, 24.1667, 1.0, 2.0, 70.9322, 231.1011, 207.4308, 143.922, 18.0488, 83.3043, 0.0, 136.6343, 130.2011, 163.7785, 72.5111, 2.0, 95.3235, 15.9634, 88.1259, 113.614]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

