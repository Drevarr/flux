created: 20230217231312000
creator: Drevarr
modified: 20230705163519465
modifier: drevarr
tags: ChartData
title: 202302172313_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["K\u00f4sair", "Minka Bringer", "Aronorf Xideliesi", "Fruji", "Mistwalker Caelon", "Lord Erin The Wise", "Sofya De Meme", "Tribal S", "Mike The Archmagus", "Cat Wigglebooty", "Arcanophage Farra", "Veron Blackburn", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Berserker", "Scrapper", "Firebrand", "Scrapper", "Vindicator", "Weaver", "Weaver", "Druid", "Weaver", "Scrapper", "Spellbreaker", "Herald", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[40.0421, 0.0, 0.0, 57.7651, 55.3132, 39.5783, 2.5171, 0.0, 0.6365, 0.0, 13.2787, 32.5202, 0.0, 46.0416, 63.84, 50.999, 0.0, 0.0, 53.9794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 92.6845, 4.158], [7.6507, 28.6186, 16.1308, 82.4768, 41.2031, 32.3846, 13.8989, 0.0, 18.6163, 32.5853, 12.2388, 0.0, 32.1408, 27.6058, 186.661, 103.1274, 13.5245, 16.5893, 14.016, 0.0], [0.0, 0.0, 58.8784, 73.5078, 89.8895, 18.3348, 4.0219, 0.0, 18.4824, 0.2611, 0.0, 32.462, 0.0, 30.9504, 54.2438, 89.6957, 82.8008, 21.0576, 0.0, 0.0, 21.3955, 0.0, 47.8094, 0.0, 23.2782, 58.8111, 15.312], [49.3488, 34.0358, 29.4588, 120.297, 26.0562, 31.1121, 35.7869, 0.0, 17.0381, 16.9728, 45.7766, 52.8017, 0.0, 19.584, 28.3584, 174.4704, 79.8116, 8.1946, 64.919, 8.496, 8.5229, 38.1542, 16.9573, 47.1883, 8.5905, 16.9576, 62.6407, 21.516], [32.8219, 47.8526, 51.5088, 81.975, 59.5958, 20.3605, 34.3915, 5.7915, 18.9965, 27.1411, 109.4621, 29.8976, 8.9446, 53.1456, 12.0691, 230.2786, 68.0043, 0.0, 39.3931, 35.904, 20.0707, 59.7154, 17.8817, 24.1189, 13.156, 103.8268, 32.4145, 33.022], [58.4237, 59.3712, 29.8704, 122.743, 31.7814, 35.5789, 7.9344, 26.9428, 27.7848, 12.4416, 127.9824, 0.0, 0.0, 40.2048, 29.4067, 233.1864, 99.2414, 15.4368, 12.3778, 103.968, 39.5011, 44.0165, 3.9461, 15.755, 87.4858, 43.4929], [70.4794, 47.8526, 68.7764, 117.5373, 12.6224, 0.0, 47.2781, 0.0, 0.0, 159.6067, 33.6276, 19.926, 84.7104, 46.6637, 292.6853, 94.8075, 7.6877, 29.9942, 71.856, 41.0467, 65.3126, 31.8172, 48.3664, 8.1995, 79.5466, 53.7506, 26.092], [68.4922, 95.1581, 69.09, 181.6998, 89.5289, 40.9807, 38.8512, 50.1228, 28.2744, 36.9715, 178.2144, 55.0746, 30.199, 78.7968, 25.5898, 220.3248, 265.9392, 13.248, 26.4504, 97.008, 38.9712], [37.2931, 59.0702, 43.218, 129.5168, 23.8473, 29.6577, 17.2368, 15.444, 45.949, 43.8528, 229.32, 45.5167, 15.9408, 66.2784, 21.047, 251.1926, 120.0662, 111.3485, 67.824, 34.8422, 92.736, 31.8172, 47.7666, 22.379, 63.6681, 68.6129], [43.4203, 85.5, 59.9368, 278.1005, 123.1135, 13.1928, 24.7334, 141.1272, 53.7293, 126.1478, 51.5778, 47.5272, 100.3008, 0.0, 178.0493, 130.2793, 24.169, 77.5022, 53.712, 18.9667, 76.441, 80.9474, 63.0605, 21.206, 112.9993, 61.5465, 45.87], [143.9395, 118.332, 88.3568, 247.4931, 91.6026, 54.3552, 96.8818, 114.8112, 93.8189, 427.1904, 105.953, 200.8704, 39.2717, 483.4843, 130.1298, 0.0, 122.699, 106.32, 76.8384, 91.3118, 191.4012, 173.7805, 28.6005, 368.7507, 143.3805, 118.624], [243.8626, 206.0482, 140.0224, 352.5491, 105.0364, 31.7353, 147.0053, 81.3899, 58.1634, 273.7685, 233.1264, 79.8336, 850.3195, 394.1758, 37.0483, 204.0533, 441.312, 132.8774], [130.2941, 97.4563, 133.6132, 433.0816, 236.1741, 87.8825, 41.2315, 94.9824, 106.3066, 364.728, 163.0674, 28.9886, 168.8832, 84.6182, 608.4096, 208.1978, 15.7133, 277.8576, 117.36, 92.6035, 229.5547, 122.2565, 143.0428, 36.3745, 158.939, 89.9947, 119.02], [182.3256, 115.213, 108.3488, 347.2179, 178.2463, 48.6678, 40.739, 103.6973, 103.6186, 576.2266, 109.5664, 179.4432, 94.1606, 671.8229, 309.9302, 43.3997, 261.936, 173.472, 74.9616, 158.148, 150.9453, 161.978, 32.154, 158.014, 91.6359, 160.754]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

