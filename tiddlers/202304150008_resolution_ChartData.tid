created: 20230415000841000
creator: Drevarr
modified: 20230705163525634
modifier: drevarr
tags: ChartData
title: 202304150008_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Air One Com", "Lucas Ryn", "Mmathuss", "Solus Sanctus", "Bella Sassy", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[141.0912, 144.3632, 164.079, 57.024, 255.8394, 51.03, 23.9085, 155.0913, 118.872, 92.1072, 26.772, 403.2618, 130.6805, 61.1414, 72.864, 121.7753, 384.4741, 364.7943, 111.0432, 111.7481, 189.1243], [65.4912, 146.0164, 120.2319, 76.068, 244.7055, 158.6925, 165.4468, 308.085, 85.41, 110.3903, 47.909, 271.0426, 256.7462, 40.9666, 50.1142, 82.3101, 533.3842, 368.6751, 124.7688, 83.5897, 139.5148], [292.464, 253.1052, 202.2251, 64.116, 566.5473, 90.1125, 39.9538, 466.716, 190.5696, 242.828, 24.035, 834.423, 0.0, 200.7403, 246.3693, 128.1597, 249.6558, 363.2733, 457.0896, 187.6176, 129.4171, 64.2919], [341.4096, 239.6534, 91.3559, 237.348, 646.6473, 98.0775, 46.5419, 240.9618, 195.0624, 280.2394, 86.066, 720.6687, 279.6625, 206.0198, 80.9195, 197.4352, 402.6462, 515.8076, 314.3988, 170.6292, 254.8392], [333.8064, 376.3512, 252.2367, 199.152, 505.1907, 212.49, 135.5878, 381.2388, 188.37, 279.3175, 0.0, 720.3991, 238.8642, 228.3782, 130.5885, 215.7506, 571.0744, 665.8086, 122.6532, 246.9928, 244.8785], [264.4704, 320.8905, 222.0165, 275.148, 596.8251, 354.7125, 722.568, 627.8379, 230.49, 387.7874, 196.121, 766.7634, 304.5191, 203.5514, 75.9405, 409.1521, 1012.5887, 1052.369, 258.6708, 172.6805, 261.2425], [268.056, 289.9287, 193.4186, 237.06, 716.3343, 239.1525, 472.2194, 728.916, 165.1104, 439.1799, 95.404, 976.2115, 391.989, 248.8377, 117.1896, 340.3604, 831.3727, 1052.7065, 281.3748, 285.3144, 348.3665], [246.4992, 666.4302, 239.2123, 142.596, 690.2217, 532.305, 901.6161, 640.4235, 252.9072, 390.3992, 68.103, 944.4035, 480.2455, 130.1153, 143.1373, 421.5803, 908.4357, 1262.1004, 198.8148, 180.466, 423.7834]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

