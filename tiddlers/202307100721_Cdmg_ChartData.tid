created: 20230710072127000
creator: Drevarr
tags: ChartData
title: 202307100721_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Latedoctor", "Gestern Yesteryear", "Danaeryn", "Elonith Requiem", "Anti Jimbo", "Yngvar The Burdened", "Luke The Knight", "Charr Surethang", "Tybalt Returns", "Legoh Brave", "Hit The Gas", "Mirhayna"];
const professions = ["Reaper", "Firebrand", "Tempest", "Reaper", "Weaver", "Scourge", "Berserker", "Berserker", "Mechanist", "Tempest", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3.9217, 0.2708, 73.1818, 13.5, 26.4091, 0.0, 11.3852, 18.451, 10.5152, 9.3776, 3.8705, 11.4915, 20.1455, 8.4839, 92.7037, 23.1243, 25.2281, 0.0, 1.8488, 0.0, 19.9091, 17.9887, 48.1681, 35.65, 4.6084, 12.027], [8.1913, 2.3333, 6.3636, 34.75, 11.0, 0.0, 4.4747, 0.9804, 5.9848, 51.7143, 10.1192, 28.6271, 13.9818, 32.7407, 34.8595, 0.2632, 2.436, 0.0, 32.0227, 55.5198, 10.3445, 6.7812, 28.4, 0.6119, 9.8919], [11.1089, 0.0, 0.2879, 0.0, 15.8705, 9.7119, 90.1273, 0.0, 21.3519, 12.6595, 4.8421, 0.0, 5.843, 0.0, 0.0, 25.7288, 73.8824, 0.0, 0.0, 0.0, 245.2973], [24.4848, 45.0918, 69.9171, 45.4576, 85.7091, 0.0, 37.5926, 23.027, 44.2281, 14.5926, 22.6337, 0.5195, 57.0227, 37.6949, 76.1261, 5.1562, 60.625, 21.993, 22.2703], [55.7704, 0.0, 18.6818, 20.8673, 78.1762, 88.5085, 236.2727, 0.0, 67.7037, 77.0595, 19.7368, 79.2593, 6.907, 1.4675, 44.2955, 85.1186], [0.0, 0.0, 176.6296, 118.2541, 245.7018, 1.963, 7.0, 0.0, 10.8182, 72.0508, 218.4874, 0.0, 20.05, 1.2168, 180.5946], [68.5019, 187.0588, 108.0606, 11.8265, 102.3212, 253.661, 330.0727, 334.0741], [50.4609, 0.0, 140.5, 20.5909, 141.5385, 57.1946, 45.3137, 44.8182, 0.0, 3.715, 65.0847, 99.3818, 146.9444, 69.1459, 86.807, 9.3519, 22.4709, 0.0, 0.0, 91.3842, 233.8571, 0.0, 185.85, 0.0], [19.7946, 248.7593, 132.3547, 253.6215, 271.8908, 104.8594, 359.4], [27.9831, 281.4545, 0.0, 499.7963, 145.6865, 149.6667, 0.0, 63.5233, 0.0, 411.8182, 122.6384, 113.9244, 12.1562, 52.525, 54.0105, 108.0541], [124.2865, 118.3158, 208.5741, 58.7791, 4.6234, 259.4773, 173.9153, 559.7731, 18.0781, 328.95, 162.493, 215.9459], [47.4286, 112.5959, 241.3559, 154.6182, 0.0, 343.3333, 91.2324, 318.0175, 45.1667, 171.4302, 0.0, 380.4091, 288.5932, 741.3025, 0.0, 87.65]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

