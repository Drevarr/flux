created: 20230429215910000
creator: Drevarr
modified: 20230705163527504
modifier: drevarr
tags: ChartData
title: 202304292159_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Ria Zerria", "Duchess Hazel", "Hyde En Sikh", "Miphest\u00f6", "Hauzzy", "Zady Stardust", "Tika Fiery", "Blancooo Padreee", "Jupi Jupi Jupi", "Gabe Malhorn", "Newtype Khan", "Johosh The Great", "Venomina The Fierce"];
const professions = ["Spellbreaker", "Scourge", "Vindicator", "Chronomancer", "Tempest", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.154, 6.864, 3.3925, 6.9426, 3.4196, 0.0, 3.4445, 6.5688, 82.4141, 40.3267, 5.3888, 34.2324], [3.3736, 9.5042, 4.6368, 9.2158, 1.1482, 12.3648, 82.736, 29.1312, 8.1879, 31.6881, 4.5818, 0.0, 8.0776, 6.662, 4.5878, 5.5051, 0.0, 18.2988], [0.0, 20.0857, 0.0, 0.0, 0.0, 0.0, 198.9527, 99.7315, 0.3637, 0.0], [6.6624, 7.0308, 14.6513, 3.5356, 14.3594, 7.3526, 13.3952, 145.5124, 59.519, 9.0915, 43.0218, 0.0, 21.1917, 12.533, 0.0, 14.1702, 6.4032, 21.528], [6.8607, 19.942, 0.0, 7.144, 3.599, 13.3308, 178.6712, 79.0541, 8.8821, 34.8107, 6.9495, 28.0339, 15.0883, 7.0238, 10.5085, 8.7952, 19.5367], [13.7781, 38.2322, 0.0, 31.9337, 41.2234, 24.2144, 225.6729, 29.7024, 58.4032], [1.8805, 39.118, 5.5931, 5.0008, 21.528, 11.6564, 219.2343, 55.0637, 27.8806, 51.8112, 7.4108, 7.5074, 11.2858, 0.0, 9.2671, 10.2304, 49.9988], [11.6424, 26.3101, 0.0, 36.5058, 9.4502, 19.1268, 253.037, 139.487, 6.2373, 119.1195, 7.8413, 23.6625, 1.886, 20.9496, 8.8658, 15.3272, 41.4414], [0.0, 0.0, 31.8394, 38.7044, 321.93, 263.7802, 23.3613, 0.0, 0.0, 63.29, 2.5857, 0.0, 0.0, 27.1032, 0.8073], [0.0, 6.911, 15.5848, 328.6905, 109.3277, 19.847, 136.2357, 7.9335, 0.0, 15.965, 64.3687, 22.5533, 7.3234, 22.0432, 60.8704], [9.2137, 77.1826, 7.274, 32.3623, 47.207, 10.304, 358.952, 261.0384, 18.0728, 109.4049, 17.466, 37.8219, 54.178, 0.0, 15.2236, 58.8432, 88.9106], [0.0, 40.0128, 20.1096, 126.6187, 0.0, 40.8637, 67.079, 76.8936, 355.7326, 124.7501, 0.0, 191.0538, 40.59, 0.0, 78.3997, 48.2461, 0.0, 27.7009, 32.016, 67.8132], [4.2809, 88.1231, 0.0, 0.0, 24.9062, 29.8172, 637.4214, 236.7053, 45.5016, 224.9393, 7.9028, 0.0, 7.9825, 76.0804, 7.5365, 21.0128, 49.4606], [0.0, 0.0, 86.6861, 46.7544, 463.2573, 316.7875, 23.131, 274.4375, 113.6828, 0.0, 123.444, 32.2148, 0.0, 0.0, 64.952, 125.7773]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

