created: 20230626012920000
creator: Drevarr
modified: 20230705163538601
modifier: drevarr
tags: ChartData
title: 202306260129_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Vipares", "Synomi\u00f1 Spyce", "Nbezerkzz", "Kosair", "Reaper Madnesss", "Tootsie Pop Rocks", "Toushay", "Sl\u00e4ngin", "Alarics Bane", "Charr Surethang", "Sofya De Nova", "Xanvias", "Fablegodx", "Johosh The Mighty"];
const professions = ["Renegade", "Scourge", "Scourge", "Dragonhunter", "Reaper", "Scrapper", "Reaper", "Berserker", "Reaper", "Berserker", "Weaver", "Reaper", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[458.3611, 0.0, 52.2424, 85.2759, 823.8776, 579.8889, 0.0, 671.3918, 481.6098, 263.4776, 260.75, 82.871, 178.8571, 156.4314, 182.4961, 310.3529, 252.8125, 62.2469], [246.2041, 296.0139, 5883.3235, 726.1649, 296.878, 154.2239, 92.9, 0.0, 242.2698], [977.1944, 1156.234, 848.5758, 265.569, 429.1837, 408.0417, 1674.6471, 357.1856, 173.8049, 919.8657], [3580.6129, 858.127, 1621.1373, 802.0294, 1338.4961], [321.9167, 51.7872, 274.4848, 479.3621, 405.5102, 321.0, 1559.4412, 1438.1753, 419.6341, 334.9701, 556.05, 248.5484, 259.5873, 22.2157, 197.9412, 468.6693, 677.7882, 704.1094, 450.1481], [138.1111, 1078.7234, 126.0303, 685.8793, 729.4444, 1418.0, 1060.6495, 0.0, 629.8358, 0.0, 0.0, 452.8235, 0.0, 523.4252, 724.8471, 1083.7031, 614.7037], [3.5556, 72.1277, 113.0303, 30.6122, 180.6111, 138.1707, 163.0746, 17385.1935, 763.381, 58.0588, 119.2913, 48.4588, 116.9159, 16.8462, 63.8333], [780.2222, 2683.2979, 586.2424, 811.2069, 362.3469, 856.4861, 1124.8235, 193.732, 849.9024, 199.4776, 1359.7, 0.0, 130.873, 878.0196, 0.0, 409.3228, 259.9882, 451.8594, 546.9383, 552.4953, 35.9231, 553.3333], [1333.2047, 1993.5176, 3055.3125, 907.4568, 1540.0187, 178.3846, 0.0], [1516.2778, 2576.6596, 2320.697, 444.9483, 201.7347, 785.2361, 4871.5294, 3619.6289], [1438.4824, 1373.3438, 3807.3333, 3287.6822, 244.1923, 1196.4], [2864.5957, 994.5758, 1429.3448, 2167.8163, 1198.5139, 3272.2353, 2884.9588, 582.5122, 2462.0448, 1043.2, 1221.3226, 383.6984, 1920.6471, 613.7059, 790.4803], [779.3611, 3343.4681, 9849.2424, 3039.7069, 711.0, 2645.3056, 4960.0294, 3470.3918, 413.7805, 5186.5075, 61.6, 766.7742, 1484.5714, 693.0196], [1223.6389, 4675.0213, 5779.2121, 4081.0172, 290.7347, 1599.6528, 5845.2941, 2965.433, 814.0, 356.6269, 4447.35, 925.4839, 714.6508, 243.5098, 2263.7647, 1234.9685, 1649.6471, 3439.2344, 2472.3457, 2168.4393, 127.4231, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

