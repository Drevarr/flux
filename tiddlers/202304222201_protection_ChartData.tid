created: 20230422220129000
creator: Drevarr
modified: 20230705163526420
modifier: drevarr
tags: ChartData
title: 202304222201_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Ever Moore", "Belvyn Brightblade", "Ark Darkness", "Oo Dads Mad", "Mac Aaroni", "Zaylen Harker", "Newtype Khan", "Hyde En Sikh", "Zadie Miststep", "Tika Sumiko", "Tempie Magie", "Miphest\u00f6", "Jupi Jupi Jupi", "Arriasa", "Yummy Kiwi", "Drevarr Moonwillow", "Sygaldry Verdandi", "Bella Sassy", "Koralia Danai"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Tempest", "Firebrand", "Spellbreaker", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Firebrand", "Druid", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 104.0917, 7.7814, 4.606, 377.608, 39.9784, 0.0, 16.0712, 14.2735, 48.015, 0.0, 22.2893, 18.5161, 0.0, 66.6085, 13.646, 0.0, 17.9416, 4.2862, 18.4547, 25.6469, 13.0694], [16.66, 38.9329, 311.8723, 20.1798, 112.4714, 21.7963, 0.0, 187.4551, 64.5705, 112.3108], [32.805, 0.0, 0.0, 30.6628, 135.8408, 106.0928, 72.3781, 134.9366, 0.0, 34.4225, 34.607, 115.7948, 79.2644, 164.4035], [691.9544, 92.5408, 171.2332], [31.5738, 128.2154, 15.6915, 36.3874, 460.4856, 43.3664, 13.6729, 74.1124, 66.1684, 10.296, 44.4062, 16.3137, 102.9441, 42.2401, 86.2445, 26.2371, 17.3011], [63.5746, 0.0, 49.1526, 622.3176, 90.8952, 0.0, 94.4615, 47.4314, 16.8795, 31.2375, 58.9126, 202.8482, 35.4564, 68.6619, 68.3663, 24.3142, 0.0, 23.791, 23.736, 73.315, 23.4819], [151.2212, 88.308, 0.0, 60.0124, 498.2771, 137.3031, 366.0257, 15.1774, 93.3446, 44.9576, 119.9666, 160.396, 29.2727, 111.1619], [20.574, 199.5202, 14.5728, 53.627, 654.684, 99.22, 0.0, 81.859, 65.1384, 31.68, 43.6713, 27.2384, 169.4087, 46.5516, 130.6501, 5.1385, 32.3127, 10.3194, 48.4008, 65.1553, 67.7164, 67.286], [30.213, 179.1283, 15.3351, 55.5352, 769.928, 115.2888, 15.2876, 118.7417, 65.8742, 44.946, 64.925, 30.2445, 143.1545, 39.9186, 108.9607, 32.2604, 42.8324, 16.2926, 54.18, 16.3778, 60.5715, 49.6925], [0.0, 167.6662, 18.6417, 37.8679, 549.7384, 115.4824, 4.0748, 219.9092, 160.933, 107.712, 109.76, 22.2526, 168.856, 42.1195, 254.8832, 82.1484, 26.2269, 18.7496, 9.4394, 69.1904, 85.2054, 190.4401], [19.5858, 254.8314, 23.6808, 53.627, 798.8616, 100.3816, 203.8381, 68.2776, 81.378, 39.2, 18.4766, 189.0302, 79.4151, 178.5209, 14.701, 17.1851, 5.46, 29.2813, 175.3497, 84.0856, 53.5703], [430.4696, 625.6198, 317.2554, 85.7835, 179.7075, 116.2489, 960.2128, 201.4623, 497.7025, 48.765, 204.1061], [543.6491, 48.015, 179.4366, 2126.3744, 0.0, 298.9933, 119.5349, 0.0, 49.4288, 45.5317, 346.518, 50.9179], [965.7469, 35.4024, 185.5889, 2036.1408, 317.4072, 0.0, 538.6736], [37.3896, 502.5989, 43.7184, 88.5997, 1528.5768, 200.6664, 0.0, 275.7537, 133.367, 58.212, 47.04, 53.0837, 434.1616, 55.2348, 299.2889, 58.1573, 72.6529, 21.3049, 75.1296, 141.4072, 155.9077, 148.0004], [92.4048, 390.777, 20.9682, 75.0449, 1842.9232, 251.0992, 176.783, 84.5622, 22.968, 98.735, 68.6275, 556.7272, 87.3144, 413.3831, 47.5059, 144.6102, 70.5214, 124.012, 240.3863, 216.5858, 167.9636], [28.3014, 699.4534, 67.4784, 154.5971, 1693.8416, 321.6664, 18.0873, 306.393, 157.0091, 89.7435, 151.41, 97.1123, 442.8669, 83.4552, 380.3998, 81.5359, 110.8485, 5.2525, 121.7966, 188.4638, 236.0476, 209.9724], [602.5589, 10.8504, 77.7756, 2384.8152, 426.2104, 0.0, 514.3934, 199.3392, 194.337, 134.505, 23.3891, 593.4831, 139.4437, 228.1885, 85.7896, 148.8123, 44.3024, 177.4214, 294.3264, 185.7669, 109.3666], [82.458, 552.4456, 28.017, 74.9791, 2218.5696, 375.584, 23.763, 403.8607, 190.9026, 120.978, 91.9975, 127.6135, 559.4908, 200.5879, 504.1195, 117.6077, 87.0269, 11.87, 208.2438, 358.4136, 131.3272, 191.4455], [133.569, 698.6538, 75.5469, 106.0367, 3019.3928, 385.1672, 0.0, 476.1232, 173.1955, 74.9925, 113.68, 15.0673, 594.5885, 93.8871, 540.4397, 134.0782, 124.2662, 27.431, 211.2779, 281.1529, 195.5244, 195.5386]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

