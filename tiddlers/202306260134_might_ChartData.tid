created: 20230626013408000
creator: Drevarr
modified: 20230705163538902
modifier: drevarr
tags: ChartData
title: 202306260134_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Traidoruns Maximus", "Fribble Bibble", "Crusader Siolith", "Sygaldry Verdandi", "Koralia Danai", "Venomina The Siren", "Aronorf Xideliesi", "Drevarr Moonwillow", "Artakama Nahid", "Solus Sanctus", "Bella Sassy", "Miphest\u00f6", "Newtype Khan", "Zayde Sunsabre", "Arcanophage Farra"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.2336, 8.811, 0.0, 59.277, 5.3721, 0.578, 2.4342, 0.0254, 0.3067, 0.462, 7.9763, 1.2408, 0.0, 12.3552, 6.4116, 16.1078, 2.1271, 0.9823, 6.2867, 6.1927, 3.2209, 1.9853, 9.9884, 0.2688, 6.2896, 0.0, 4.7301, 0.0], [4.9248, 7.6032, 4.0691, 11.5128, 54.2705, 5.2193, 3.5439, 7.064, 3.2981, 2.2009, 5.4208, 9.6026, 5.0666, 3.6, 6.5232, 4.095, 4.8899, 3.4299, 2.3575, 4.6699, 4.5176, 7.817, 1.8161, 5.1878], [9.9017, 9.1164, 8.0423, 5.8421, 8.6625, 12.744, 5.2884, 34.9003, 5.328, 2.8952, 4.9068, 6.9438, 4.9632, 10.1614, 4.2739, 11.7443, 0.644, 14.4459, 4.7053, 1.2732, 0.0, 6.1142], [65.6853, 3.3098, 1.4612, 0.9548, 2.633, 12.0978, 2.295, 8.64, 5.9436, 24.6412, 2.7167, 8.658, 6.2867, 0.0677, 4.0993, 4.3842, 7.0481, 4.9459, 10.2971, 7.8246, 16.1718, 2.8525, 4.6053, 0.596, 1.8266], [6.1517, 31.7952, 6.5682, 1.0037, 71.8933, 10.1076, 0.0, 5.298, 6.2664, 1.8942, 1.6016, 0.8131, 6.3591, 2.115, 7.2576, 2.3166, 19.4636, 0.1332, 3.4742, 0.2707, 8.7843, 1.8198, 5.4915, 2.4461, 6.6792, 0.0, 0.0, 8.6931, 0.9021, 0.7043, 0.1987, 3.0698], [6.9208, 10.5793, 1.9122, 18.7572, 8.0925, 21.3521, 8.64, 4.2336, 3.2526, 10.355, 9.8901, 8.4788, 0.0, 34.5516, 13.8556, 32.5165, 20.2138, 0.0, 0.0, 0.0, 2.8764, 3.2669, 0.0, 0.0, 23.036], [4.9421, 19.5264, 25.1514, 2.9225, 59.0767, 7.2052, 10.6014, 9.8324, 0.1268, 1.3169, 6.8376, 8.5184, 8.1686, 7.245, 6.264, 3.3462, 18.8884, 4.3173, 6.0773, 1.9853, 5.0422, 6.1908, 3.1847, 5.405, 1.3978, 7.4584, 1.5617, 0.0, 11.2499, 2.7306, 4.0093, 0.4154, 1.7505], [9.7978, 11.4912, 7.8498, 3.0996, 75.0975, 5.4484, 8.7305, 12.1234, 3.5518, 1.822, 5.236, 12.5453, 7.9101, 4.95, 14.2128, 7.2774, 6.3281, 0.5686, 3.3134, 5.232, 7.0726, 10.2484, 5.7077, 6.0536, 6.5318, 6.6792, 3.7191, 2.401, 6.6477, 3.5107, 4.9033, 2.6909, 4.2875], [5.7542, 4.0608, 34.475, 17.7415, 96.9258, 5.2957, 1.521, 5.3935, 0.7611, 0.0, 0.0, 24.897, 0.0, 10.62, 16.7184, 6.552, 23.203, 0.1166, 0.4136, 0.0, 0.0, 0.0, 0.6486, 4.6234, 0.4453, 9.0321, 0.0, 0.0, 10.7276, 2.3478, 0.1268], [4.4928, 25.704, 17.8783, 10.0663, 72.6944, 9.1656, 8.0613, 8.6869, 8.1438, 1.2628, 3.388, 8.7507, 4.2394, 2.5425, 9.72, 3.744, 30.6816, 6.9597, 6.5349, 2.6734, 6.2745, 6.204, 8.9939, 2.6074, 14.249, 4.1377, 1.0682, 14.3181, 3.7545, 4.7407, 1.4809, 7.1543], [10.5408, 29.1168, 17.7822, 9.5645, 126.7646, 11.788, 4.4413, 9.2119, 7.0529, 0.8118, 1.2628, 7.1245, 7.2897, 2.1375, 6.8256, 3.4866, 12.2726, 7.4426, 5.4802, 1.3198, 4.685, 8.3547, 10.2046, 6.5318, 17.7555, 5.8604, 0.0196, 21.7328, 1.926, 2.3839, 0.0, 6.3425], [17.6774, 21.4272, 14.1296, 11.3062, 76.2991, 30.5265, 0.0, 23.5309, 0.1268, 1.7318, 4.9896, 24.7034, 31.4336, 6.7275, 2.3328, 11.0448, 22.2442, 18.648, 18.6327, 3.6886, 0.3765, 16.7508, 4.6267, 10.5638, 20.8168, 6.2468, 0.0, 12.2726, 0.707], [18.5414, 37.8432, 19.224, 5.3726, 167.4174, 14.2067, 12.1528, 23.9127, 4.4398, 6.5124, 6.006, 9.9123, 20.7317, 15.975, 15.336, 8.2134, 23.3947, 3.5942, 10.0732, 10.5261, 15.8033, 22.4209, 9.6369, 15.8691, 13.4938, 13.3027, 1.1431, 4.6746, 8.4374, 7.826, 6.0682, 10.3664, 16.9218], [45.4464, 72.9216, 32.4886, 28.103, 302.5929, 43.2056, 34.6028, 56.035, 15.222, 14.0892, 21.6832, 24.471, 30.2962, 13.5225, 54.432, 34.3512, 53.1175, 0.0, 31.7349, 18.3845, 42.0631, 22.7137, 38.2166, 31.8679, 37.6858, 28.1083, 5.0232, 7.4186, 79.3247, 37.3989, 28.2278, 15.4955, 25.8267], [42.0768, 94.7376, 54.5962, 47.0549, 392.7099, 50.589, 20.427, 68.588, 31.332, 16.2901, 27.7508, 42.0886, 22.7997, 38.52, 58.1904, 12.9402, 75.6493, 13.8013, 33.4332, 36.707, 15.7018, 38.0235, 51.5346, 46.3965, 38.3578, 23.3215, 26.6455, 44.6162, 19.4065, 23.162, 23.8392, 26.9937]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

