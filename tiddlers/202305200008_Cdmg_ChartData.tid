created: 20230520000848000
creator: Drevarr
modified: 20230705163530637
modifier: drevarr
tags: ChartData
title: 202305200008_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Drogo Discourteous", "Zaylen Harker", "Blanco Padre Guard", "Lucky Leipreach\u00e1n", "Grasszanine", "Heiimdallz", "Paul Bjart Mist Cop", "Jupi Jupi Jupi", "Soxxdodendron", "High Sorcer Baradun", "Khailerian", "Miphest\u00f6", "Cedryn X", "Grenths Agony", "Solus Sanctus", "Venomina The Siren", "Nomi No Mi", "Aronorf Xideliesi", "Kosa\u00efr", "Rozaalyna", "Tika Fiery", "Hauzzy", "Lord Erin The Wise", "Sister Elonith", "Morv\u00e4rth", "Cerys Fireblade", "Spreadflamesoflight", "Madame Charrlotte", "Grilo Gringo", "Smol Gluvs", "Xanvias Einzbern", "Be\u00eb", "\u00c1rk\u00e1ntor"];
const professions = ["Dragonhunter", "Firebrand", "Firebrand", "Scrapper", "Spellbreaker", "Firebrand", "Scrapper", "Firebrand", "Willbender", "Tempest", "Vindicator", "Tempest", "Berserker", "Scourge", "Firebrand", "Tempest", "Berserker", "Firebrand", "Weaver", "Scourge", "Firebrand", "Berserker", "Weaver", "Berserker", "Scourge", "Berserker", "Firebrand", "Scourge", "Dragonhunter", "Scourge", "Berserker", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.5699, 88.1957, 6.92, 17.0362, 18.4444, 2.766, 0.0, 0.0, 6.0658, 24.4247, 10.7433, 0.0, 21.5217, 132.717, 75.4123], [1.8302, 30.1358, 8.3922, 1.5271, 0.0, 7.3287, 10.2333, 0.0, 5.9211, 0.0, 14.5782, 8.1833, 0.0, 15.0435, 0.0, 4.971, 1.0175], [3.5472, 29.2108, 0.0, 1.2054, 0.0513, 3.965, 14.2667, 0.0, 19.0132, 0.0, 2.8009, 8.8722, 3.0725, 0.0, 5.5, 9.9783, 2.2807, 0.0, 0.0, 0.0, 5.2105, 5.3425, 1.5401, 0.0, 2.837, 19.9057, 3.2719], [11.6698, 6.8993, 27.1373, 14.9884, 38.9231, 10.1119, 0.0, 7.0865, 33.9474, 0.6804, 23.5261, 7.4389, 6.7461, 14.5435, 11.38, 7.3841, 31.7544, 3.3617, 0.0, 0.0, 9.6316, 37.7534, 3.508, 0.8182, 2.5652, 27.6604, 17.5], [4.4623, 40.4087, 16.1176, 1.2326, 0.0, 0.0, 0.0, 3.3942, 4.7237, 0.0, 13.4976, 7.5611, 5.601, 0.0, 0.0, 3.7971, 1.462, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0489, 0.0, 0.0175], [1.8342, 0.0, 66.8967, 452.0566, 69.2368], [7.0849, 13.9391, 2.0426, 5.1026, 4.3147, 11.0667, 9.0577, 39.3684, 0.0, 17.0142, 11.0389, 6.5078, 97.6304, 4.74, 26.3913, 9.2749, 9.7766, 0.0, 0.0, 2.6053, 0.0, 22.6257, 0.3636, 6.5163, 54.8302, 17.0877], [7.1509, 6.4895, 26.902, 17.8372, 33.7179, 0.0, 0.0, 11.4135, 53.0658, 0.0, 1.5166, 17.6611, 0.0, 81.2174, 25.58, 25.0797, 2.6491, 4.0, 0.0, 0.0, 20.4737, 24.726, 4.7487, 0.0, 1.2228, 197.4528, 16.7719], [0.0189, 17.1838, 40.9216, 6.8256, 82.7436, 2.0699, 1.4, 14.0481, 38.6447, 0.0, 7.2938, 24.2, 7.0777, 16.6522, 24.5, 5.0507, 1.2924, 2.4574, 0.0, 0.0, 8.0789, 6.6027, 0.2032, 0.0, 11.3967, 76.566, 39.1842], [22.4528, 36.5035, 5.1961, 4.9225, 0.0, 21.6434, 0.0, 3.7885, 29.6053, 0.0, 17.0758, 32.1389], [1.7453, 39.7307, 0.0, 2.9225, 0.0, 9.2448, 0.0, 20.5096, 4.5, 35.8626, 16.9444, 0.0, 0.0, 0.0, 12.9058, 0.1637, 0.0, 0.0, 0.0, 2.1579, 7.2055], [25.8774, 29.3794, 53.4118, 1.8062, 102.8462, 1.7692, 0.0, 4.0, 11.1842, 0.0, 28.5213, 0.4778, 0.0, 139.6087, 0.0, 5.7826, 11.0117, 0.0, 0.0, 0.6053, 0.0], [16.4245, 10.3138, 5.2248, 5.1795, 4.3986, 0.0, 14.5481, 85.1579, 0.0, 31.4265, 33.3944, 1.2798, 42.3696, 31.84, 4.2391, 10.4912, 0.0, 0.0, 0.0, 28.8684, 6.0411, 10.6578, 0.0, 11.6685, 61.5351], [117.6425, 429.2391, 308.8], [2.9151, 22.0773, 9.2941, 20.2132, 0.0, 20.1469, 0.0, 3.7019, 10.0395, 0.0, 38.455, 0.8111, 11.9326, 55.7609, 42.22, 17.8841, 9.7427, 16.3191, 0.0, 0.0, 6.9605, 9.6575, 2.2567, 14.4545, 15.5163, 54.0755, 19.6579], [5.8302, 11.9344, 2.0588, 12.9884, 0.0, 6.8811, 0.0, 4.1538, 201.0526, 0.0, 13.4502, 9.1778, 9.7617, 24.7391, 0.0, 44.5435, 12.3099, 0.0, 0.0, 0.0, 0.0, 18.0959, 15.9786, 0.0, 22.0272, 95.3774, 30.0789], [18.4245, 35.5785, 15.9216, 37.1434, 0.0, 35.1469, 0.8333, 13.7308, 43.4211, 15.9691, 18.9573, 0.0, 24.0259, 21.4348, 0.0, 7.0936, 11.6596, 0.0, 0.0, 7.8289, 19.8493, 30.5348], [4.3019, 36.5, 0.4314, 5.5465, 53.5385, 2.2028, 0.0, 4.3462, 108.5, 0.0, 25.6256, 3.9, 0.8705, 29.6304, 23.76, 20.5145, 5.6842, 2.5213, 0.0, 0.0, 6.0, 6.4384, 8.0, 26.3939, 8.2935, 213.6226, 61.5439], [0.0189, 38.7073, 43.9216, 6.3721, 90.5641, 37.0909, 0.0, 24.3173, 71.25, 0.0, 17.6209, 7.5278, 1.6373, 26.4565, 0.0, 1.1159, 17.0994, 25.4149, 0.0, 28.7808, 1.3476, 0.0, 4.6902, 316.0755], [25.2264, 57.6405, 24.6471, 32.2868, 28.5804, 0.0, 0.0, 86.75, 0.0, 41.6493, 27.6611, 0.0622, 24.6739, 7.88, 9.2391, 0.614], [6.0377, 52.7869, 17.3137, 10.8992, 12.4872, 8.1259, 0.0667, 1.7981, 131.8289, 3.7216, 18.6682, 9.8333, 2.6995, 36.1087, 0.0, 42.058, 8.9298, 15.6064, 0.0, 0.0, 31.7105, 11.3288, 13.3262, 1.9697, 9.8478, 110.5283, 12.5789], [37.2453, 69.4731, 33.6078, 29.1047, 35.1795, 12.6573, 5.0667, 0.5385, 93.0395, 7.9381, 71.2085, 10.3444], [18.4434, 50.2002, 1.7255, 18.876, 119.8205, 5.7902, 172.5667, 36.9231, 90.8816, 0.0, 54.872, 29.8389, 5.9637, 29.413, 5.08, 0.0, 24.2573, 39.0957, 0.0, 0.0, 12.5263, 27.9726, 10.877], [12.3774, 94.5574, 3.5389, 12.8043, 14.54, 22.1594, 44.386, 3.1064, 0.0, 38.6842, 6.2329, 8.9091, 18.2424, 22.5326, 13.1509, 16.2632], [58.2941, 41.4225, 0.6923, 25.3147, 23.7333, 26.2788, 123.1316, 14.3196, 93.7867, 21.4333, 8.9585, 102.587, 53.06, 70.1884, 7.1462, 5.8298, 0.0, 12.0526, 49.7397, 2.3743, 20.6061, 21.2283, 523.9623, 82.0526], [11.0283, 72.4953, 17.9412, 20.9535, 83.1795, 9.5944, 26.0, 22.0, 76.9737, 0.0, 46.5024, 6.3778, 12.9689, 107.5435, 1.78, 59.558, 8.9708, 3.1277, 0.0, 0.0, 23.0921, 0.0, 23.5134, 0.0, 11.8098, 114.9434, 17.7982], [31.6132, 82.3138, 15.1373, 41.2946, 41.8718, 24.5455, 13.0333, 171.1316, 0.0, 39.5687, 40.0444, 6.6528, 281.3696, 0.0, 77.1159, 75.0058, 0.0, 0.0, 0.0, 2.3421, 0.3562, 0.0, 0.0, 20.6522, 102.0755, 121.9211], [29.3491, 130.1077, 108.3529, 55.2442, 38.8974, 17.0909, 16.0667, 45.6635, 240.3816, 3.2371, 104.0142, 23.35], [57.1321, 82.507, 14.2745, 42.5194, 230.3846, 47.3986, 88.6333, 222.4615, 40.5789, 0.0, 126.5118, 22.6222, 24.0622, 273.0, 27.58, 34.6232, 22.2164], [32.9811, 96.0632, 85.3725, 22.6395, 1.1538, 18.6014, 9.0333, 16.125, 147.8421, 25.701, 30.7299, 6.3111, 46.0, 142.6087, 4.56, 30.3188, 25.8655, 13.734, 0.0, 0.0, 6.75, 12.411, 6.1176, 3.8788, 18.1522, 523.566, 114.1754], [43.8585, 112.1101, 76.9216, 45.2674, 6.3077, 30.7692, 0.0, 0.3654, 56.3553, 13.5567, 31.1611, 28.5056, 20.7927, 304.2174, 18.7, 64.9638, 26.5848, 4.0426, 0.0, 0.0, 28.4247, 18.5615, 1.9091, 36.7989, 276.6038, 93.1228], [20.3396, 147.1054, 59.6471, 27.8256, 4.1795, 48.7343, 13.2333, 60.7212, 290.0789, 19.3402, 63.7014, 14.9056, 11.2176, 365.2609, 35.58, 103.442, 31.5263, 17.4468, 0.0, 0.0, 81.6842, 8.2603, 22.9358, 1.6061, 31.788, 737.4906, 76.5965], [68.3491, 195.1733, 251.7843, 54.3721, 9.7436, 106.042, 5.0333, 41.5577, 117.75, 8.3711, 103.5829, 47.2611, 25.6736, 320.5435, 53.36, 86.529, 45.6433, 5.4149, 0.0, 0.0, 36.1447, 67.5342, 11.1658, 0.303, 21.3696, 283.2642, 22.5]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

