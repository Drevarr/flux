created: 20230330095927000
creator: Drevarr
modified: 20230705163523522
modifier: drevarr
tags: ChartData
title: 202303300959_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["X E R E C A R D", "Oo Dads Mad", "Emerald Vermilion", "Al Darasuun", "Rina Of Theros", "River No Hug", "Arcanophage Farra", "Rozaalyna", "Newtype Khan", "Smol Gluvs", "Grasszanine", "Primal Clone", "Fungus", "Be\u00eb", "Black Raspberry Pie", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Chronomancer", "Scourge", "Scourge", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.4417, 0.4786, 0.0, 0.904, 0.0303, 0.8984], [0.0625, 0.0269, 0.0, 0.0, 0.0944], [0.4908, 0.4615, 0.0417, 0.848, 0.1061, 1.0078], [0.5, 0.3359, 0.0, 0.6012, 0.6923, 0.0, 0.0, 0.616, 0.0606, 0.7188], [0.0625, 0.0976, 0.06, 0.0169, 0.138], [0.0833, 0.0774, 0.06, 0.0127, 0.1074, 0.2, 0.687, 0.0667, 0.5337, 0.3333, 0.125, 0.4, 0.1212, 0.4609], [0.0, 0.1145, 0.0, 0.0, 0.1109, 0.4143, 0.4351, 0.2444, 0.5337, 0.4444, 0.0, 0.544, 0.0606, 0.7344], [0.0, 0.0303, 0.08, 0.0127, 0.1699, 0.4714, 0.4275, 0.0222, 0.5828, 0.4359, 0.0], [0.1042, 0.0741, 0.14, 0.0127, 0.1609, 0.3571, 0.7099, 0.1111, 0.4663, 0.2479, 0.0, 0.512, 0.0, 0.7109], [0.0625, 0.0842, 0.18, 0.0211, 0.1418, 0.8143, 0.5115, 0.0667, 0.5644, 0.4188, 0.125, 0.0, 0.872, 0.0758, 0.75], [0.1667, 0.0337, 0.08, 0.0295, 0.1928, 0.4571, 0.5573, 0.0889, 0.5031, 0.359, 0.824, 0.0, 0.6562], [0.0417, 0.101, 0.06, 0.0, 0.1918, 0.3429, 0.5038, 0.2, 0.6626, 0.3162, 0.0417, 0.0, 0.832, 0.0758, 0.7188], [0.0417, 0.0842, 0.18, 0.0084, 0.1859, 0.6286, 0.4656, 0.1333, 0.6564, 0.641, 0.1667, 0.0, 1.168, 0.0, 0.6562], [0.0625, 0.0539, 0.02, 0.0169, 0.2532, 1.2571, 0.6718, 0.1556, 0.7669, 0.4103, 0.0, 0.0455, 1.144, 0.1515, 1.0156], [0.4375, 0.229, 0.1, 0.0464, 0.3755, 0.5429, 0.7557, 0.0889, 0.681, 0.735, 0.0, 0.0909, 1.0, 0.0909, 0.6094], [0.1458, 0.303, 0.16, 0.1013, 0.5077, 0.9, 0.8397, 0.0222, 0.7423, 0.4444, 0.25, 0.0455, 1.04, 0.1061, 1.2578]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

