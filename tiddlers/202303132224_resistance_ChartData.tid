created: 20230313222416000
creator: Drevarr
modified: 20230705163521952
modifier: drevarr
tags: ChartData
title: 202303132224_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Morton Saltbringer", "Black Raspberry Pie", "Cerys Fireblade", "Primal Clone", "Eibh\u00ebar", "Ryvalia Fazebringer", "Ark Darkness", "Smol Daddy Tika", "Koralia Danai", "Whose Guardian", "Sygaldry Verdandi", "Blanco Padre Guard", "Newtype Khan", "Johosh The Great", "Ravioli Fetabringer", "Bella Sassy", "Arcanophage Farra"];
const professions = ["Spellbreaker", "Chronomancer", "Chronomancer", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.7052, 13.6629, 155.1203, 40.9027, 3.7523, 13.6475, 9.2213, 31.9594, 8.1144, 3.432, 0.0, 6.7914, 6.662, 17.1093, 8.0904, 6.9222, 13.608, 13.7842, 3.9468, 20.123, 0.0, 8.0438, 35.1977, 17.5824, 9.5472, 6.93], [5.0654, 20.6941, 173.8848, 34.67, 2.7685, 9.9931, 8.4466, 13.1183, 2.7656, 0.0, 3.5192, 40.7798, 16.3895, 15.1743, 5.5728, 11.736, 17.9371, 0.0, 15.1939, 45.8052, 11.2622, 11.544, 9.6012], [7.0382, 28.2047, 237.6843, 67.1325, 6.9326, 14.0356, 12.6699, 47.0059, 7.068, 21.2327, 5.9643, 7.8007, 11.1544, 27.9604, 23.4215, 8.8259, 14.0694, 6.6715, 5.2422, 25.0253, 46.8901, 20.9563, 17.472, 21.1932], [0.0, 0.0, 203.9081, 91.6741, 9.8842, 0.0, 10.6457, 47.5891, 8.0457, 3.9896, 0.0, 0.0, 0.0, 87.8178, 30.4535, 65.7683, 18.5176, 4.896, 54.7832, 0.0, 10.4141, 0.0, 0.0, 0.0, 23.9976, 23.1504, 0.0], [13.1434, 35.7153, 205.5761, 47.7848, 15.3938, 12.52, 52.1381, 18.5617, 8.5966, 6.2854, 8.0879, 48.855, 24.3628, 10.2582, 8.1967, 16.704, 20.6762, 3.2651, 20.0688, 6.5016, 13.034, 52.7965, 17.5349, 14.6328, 19.0008], [5.1454, 26.9263, 209.746, 45.5773, 4.9535, 8.3761, 13.0448, 59.4864, 6.7264, 21.0636, 13.428, 7.6043, 11.1132, 51.4794, 21.8712, 20.2066, 10.121, 11.844, 20.1461, 5.5435, 14.9702, 2.2807, 23.9826, 52.5554, 31.9334, 9.984, 6.7536], [17.7022, 24.5293, 239.7692, 42.0714, 8.5686, 27.5537, 14.6191, 62.2858, 2.3324, 18.8322, 17.0598, 9.372, 8.0262, 42.5967, 25.0826, 20.7486, 11.0956, 16.56, 36.2718, 0.0, 24.4622, 7.4377, 20.631, 67.7435, 26.7538, 19.6248, 14.5404], [38.0705, 19.4956, 281.8852, 75.7025, 0.0, 46.4726, 46.1565, 34.4088, 0.0, 56.936, 35.4525, 0.0, 27.7624, 85.0924, 67.1084, 36.7358, 27.2141, 62.172, 54.3414, 85.8619, 11.1651, 30.2016, 76.4224], [0.0, 6.2322, 375.708, 23.373, 31.8261, 29.9145, 29.6631, 85.1472, 6.4319, 31.0376, 8.4966, 25.8433, 0.0, 153.025, 71.9256, 40.0648, 0.0, 10.908, 50.9837, 0.0, 55.7587, 0.0, 88.3705, 109.5709, 29.7475, 16.8168, 9.576], [5.85, 29.3793, 9.2684, 315.2444, 117.3844, 0.0, 39.1961, 38.0098, 52.0214, 26.6085, 22.9575, 0.0, 11.9364, 129.4051, 47.9504, 69.7167, 22.8159, 13.248, 50.8954, 3.6059, 97.5778, 30.2016, 172.1311, 59.8752, 57.9072, 45.3096], [38.0705, 49.3782, 428.2487, 130.6291, 7.619, 7.7616, 33.6865, 66.4848, 3.9227, 46.2183, 11.562, 19.3895, 45.0908, 110.3274, 69.3786, 56.3618, 33.3117, 13.464, 71.2623, 0.0, 58.6877, 0.0, 54.5566, 135.728, 64.7698, 32.1048], [34.4181, 94.2021, 277.7153, 101.5427, 0.0, 28.5562, 50.6547, 120.7224, 27.2509, 38.7845, 0.0, 26.754, 166.551, 95.7901, 61.936, 14.2693, 43.308, 72.2785, 13.3832, 40.5173, 7.0803, 42.3419, 173.9392, 77.9328, 86.9544, 39.9168], [18.4221, 47.141, 387.8007, 173.4796, 7.5275, 62.4485, 40.6837, 186.1574, 0.0, 56.4627, 7.5636, 5.9207, 5.6801, 115.7782, 87.8722, 39.3681, 11.9702, 12.06, 64.5912, 10.6205, 39.0528, 0.0, 67.4044, 263.8621, 51.2741, 43.6488, 107.7552], [0.8496, 21.3813, 55.0511, 555.4307, 100.6337, 25.7286, 57.1771, 59.1263, 116.2901, 4.606, 73.0634, 34.2196, 0.0, 58.0356, 172.7083, 84.1624, 41.7681, 47.381, 43.092, 34.0628, 0.0, 62.9184, 18.1433, 47.3693, 93.6596, 46.7597, 34.2264, 48.8376], [30.7123, 45.3832, 674.6898, 124.3963, 0.0, 55.4308, 34.6611, 165.2789, 0.0, 41.8906, 22.2911, 0.0, 22.247, 131.0201, 85.9342, 69.5232, 14.919, 33.228, 68.6115, 20.326, 79.2989, 0.0, 43.608, 190.8148, 72.3254, 37.0968, 28.098], [70.2224, 74.5467, 582.535, 119.0725, 21.0267, 26.4541, 46.6063, 99.4939, 0.0, 77.8306, 52.4457, 7.2675, 34.4921, 175.03, 107.8054, 49.1617, 57.1022, 55.224, 80.9378, 17.5453, 122.3112, 12.9182, 37.091, 155.7377, 95.9904, 80.028, 79.5312], [34.9513, 106.7464, 741.4082, 185.1661, 19.5853, 75.7726, 37.0852, 94.4784, 0.0, 57.5784, 26.7226, 6.566, 50.7297, 77.9257, 61.4053, 34.4519, 37.8099, 57.888, 123.3506, 0.0, 111.7344, 0.0, 34.0001, 163.0906, 97.9387, 53.9136, 69.93], [0.0, 0.0, 513.3147, 86.0906, 0.0, 128.6162, 26.6144, 112.7909, 0.0, 26.507, 60.8756, 0.0, 27.7418, 379.2316, 168.6016, 60.5812, 127.349, 123.444, 181.3589, 93.7365, 267.7286, 0.0, 74.3683, 391.1523, 84.1579, 72.072, 128.4696]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

