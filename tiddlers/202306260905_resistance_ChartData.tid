created: 20230626090515000
creator: Drevarr
modified: 20230705163539241
modifier: drevarr
tags: ChartData
title: 202306260905_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Govinda Ektar", "Charr Surethang", "Gestern Yesteryear", "Yngvar The Burdened", "Urilstormwalker", "Koralia Danai", "Illusive Heart", "Traidoruns Maximus", "Brace Stonebrow"];
const professions = ["Vindicator", "Berserker", "Firebrand", "Scourge", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[9.2397, 9.192, 6.6759, 2.3099, 5.7634, 9.1054, 10.3764, 1.1458, 0.0, 4.5888, 56.3691, 9.1598, 5.4641, 11.4853], [0.0, 9.6937, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9981, 21.8625, 22.1098, 0.0, 29.1536, 0.0, 42.9027, 79.0743, 0.0, 0.0, 1.9968, 31.9717, 0.0, 0.0, 9.9238], [0.0, 0.0, 12.8222, 0.0, 33.9822, 0.0, 15.198, 4.6114, 16.2323, 0.0, 19.3132, 16.5953, 34.199, 11.3546, 0.0, 59.8601, 13.2759, 38.8573, 0.0, 0.0, 27.5069, 0.0, 0.0, 0.0], [5.4687, 6.864, 4.7573, 4.7416, 5.0358, 9.6354, 11.2946, 24.4161, 8.013, 32.8961, 61.5966, 13.9339, 0.0, 4.585, 91.2111, 13.8411, 2.0121, 13.7768], [127.0821, 23.8515, 0.0, 218.8589, 76.5232, 17.1629, 34.6038], [23.7802, 60.386, 10.6029, 31.2617, 102.4601, 45.1257, 36.5954, 22.7304, 186.501], [0.0, 5.5453, 6.7716, 14.9523, 75.9717, 7.5018, 14.9406, 19.4443, 3.8118, 7.5421, 14.8294, 21.7858, 18.7581, 6.4061, 15.1995, 66.4513, 88.3719, 14.3651, 7.5198, 7.4381, 133.8667, 26.8372, 15.1171, 21.4553], [6.0544, 11.7348, 12.1915, 105.5792, 15.2854, 8.0137, 6.9676, 6.3062, 10.164, 27.984, 39.0161, 34.3897, 21.9498, 80.143, 112.6887, 1.5277, 6.3709, 6.2669, 154.2775, 26.1781, 5.5913, 33.8831], [21.8533, 60.0718, 14.5566, 170.5623, 287.9574, 60.1955, 0.0, 46.7059, 312.9402, 69.2562, 20.6523, 45.5902]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

