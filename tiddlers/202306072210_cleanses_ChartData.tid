created: 20230607221050000
creator: Drevarr
modified: 20230705163533967
modifier: drevarr
tags: ChartData
title: 202306072210_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Grasszanine", "Rafaellagabriela", "Johosh The Great", "Etcherii", "Tootsie Pop Rocks", "Primal Clone", "Uneeta Healah", "Eibh\u00ebar", "Inedible Plant", "Venomina The Siren", "Arriasa", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Chronomancer", "Scrapper", "Chronomancer", "Vindicator", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.01, 0.1926, 0.0, 0.3275, 0.3043, 0.0, 0.2593, 0.5185, 0.3956, 0.32, 0.4182, 0.2328], [0.0293, 0.0, 0.2111, 0.0, 0.4803, 0.4348, 0.0, 0.3148, 0.0, 0.3077, 0.44, 0.0, 0.0776], [0.2176, 0.0135, 0.3493, 0.3696, 0.0, 0.4074, 0.3704, 0.4066, 0.44, 0.2, 0.2586], [0.0, 0.0, 0.2624, 0.027, 0.3712, 0.5326, 0.0, 0.3148, 0.3333, 0.3407, 0.4, 0.0545, 0.3879], [0.039, 0.04, 0.2975, 0.0203, 0.3974, 0.5435, 0.0, 0.3333, 0.5185, 0.4286, 0.44, 0.4], [0.0049, 0.01, 0.4015, 0.0, 1.5066, 1.0, 0.05, 0.9444, 0.5185, 1.011, 0.88, 0.0, 0.8534], [0.0, 0.04, 0.4037, 0.0878, 1.1572, 1.087, 0.0, 1.0556, 0.8148, 0.6593, 1.3, 1.0182, 1.3017], [0.0146, 0.2, 0.5858, 0.0946, 0.4585, 0.5109, 0.0, 0.8519, 0.8889, 0.2198, 1.1, 0.5636, 1.2931], [0.0634, 0.0, 0.4572, 0.1216, 1.1048, 1.2717, 0.0, 1.1852, 0.8889, 1.1429, 0.5, 0.8727, 1.2845], [0.0488, 0.04, 0.6262, 0.1554, 1.1266, 1.2283, 0.0, 0.8333, 0.2593, 0.9121, 0.64, 0.4545, 0.681], [0.02, 1.287, 0.1892, 2.3799, 2.0543, 0.1, 1.8148, 0.7778, 1.2418, 0.9, 1.2364, 1.9397], [0.2146, 0.6, 1.3475, 0.3378, 2.1747, 1.913, 0.45, 1.7593, 1.5556, 1.9121, 2.0, 1.3273, 3.3103], [0.0878, 0.06, 1.7815, 0.2973, 2.4192, 1.0326, 0.0, 2.2778, 2.4074, 1.0659, 1.56, 2.3455, 2.6724], [0.2, 0.33, 2.0149, 0.3581, 2.5983, 2.3043, 0.4, 2.2037, 1.8519, 2.2747, 1.72, 1.4727, 1.7672], [0.1707, 0.97, 2.014, 0.5338, 2.7817, 2.3804, 0.0, 2.0185, 2.7037, 2.2418, 2.24, 1.4364, 2.1897]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

