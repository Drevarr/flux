created: 20230325172304000
creator: Drevarr
modified: 20230705163522913
modifier: drevarr
tags: ChartData
title: 202303251723_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Morton Saltbringer", "Primal Clone", "High Sorcer Baradun", "Venomina The Siren", "Eibh\u00ebar", "Black Raspberry Pie", "Tika Sumiko", "Mac Chiato", "Zadie Miststep", "Abigail Ryn"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[65.8207, 64.6718, 5.8212, 17.712, 55.3014, 52.1925, 417.5285, 53.9034, 13.9026, 72.036, 45.8556, 0.0, 0.0, 0.0, 73.2918, 26.0314, 0.0, 110.6544], [51.3578, 176.5665, 0.0, 0.0, 101.871, 24.5548, 1008.6508, 48.3762, 0.0, 182.9218, 32.7115, 36.2419, 0.0, 0.0, 0.0, 105.0732, 65.2487, 129.1579, 228.8564], [205.5051, 294.4755, 50.7881, 37.6675, 126.9198, 43.4515, 1234.5163, 77.7493, 89.9594, 192.4603], [250.5908, 113.2312, 21.2285, 0.0, 36.0738, 40.9488, 1617.197, 80.276, 43.5055, 211.0406, 72.0322, 88.8826, 43.2394, 9.3408, 94.6956, 150.3187, 246.4069, 355.4149], [205.0624, 252.9698, 0.0, 152.6184, 99.666, 0.0, 1862.4224, 148.8659, 0.0, 272.7432, 88.8521, 22.9882, 0.0, 81.7133, 67.032, 318.2464, 195.3207, 208.2598, 322.1242], [351.0928, 313.038, 52.3908, 147.3048, 271.0386, 1605.581, 124.1251, 148.8058, 385.02, 109.5335, 66.6432, 0.0, 77.5085, 90.7872, 198.6878, 278.349, 359.1054, 634.4095], [183.2206, 264.4785, 22.8161, 75.5712, 279.6822, 40.9851, 1988.2617, 92.6464, 19.3438, 235.6819, 138.6806, 70.0627, 23.12, 60.6192, 141.96, 410.78, 294.4273, 324.347, 549.3633], [190.9685, 252.45, 38.5711, 139.4525, 278.5356, 56.3636, 2050.2134, 108.5963, 360.2794, 78.4186, 87.6096, 28.6824, 69.0989, 111.1824, 373.4855, 276.9879, 308.6622, 412.6964], [270.9569, 265.0725, 13.3661, 257.4734, 411.1884, 30.1404, 1904.3688, 141.549, 80.4913, 311.9904, 56.8089, 82.8422, 141.2813, 84.672, 298.6803, 211.9094, 312.6318, 419.4354], [453.8823, 528.066, 35.154, 267.097, 431.298, 32.099, 3981.6861, 253.988, 166.8552, 592.285, 194.784, 97.968, 35.8768, 254.04, 78.4224, 552.391, 540.9601, 641.142, 859.4921]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

