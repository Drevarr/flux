created: 20230729001543000
creator: Drevarr
tags: ChartData
title: 202307290015_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Vee Usagi", "Readnull", "\u00c1rk\u00e1ntor", "Drevarr Moonwillow", "Tegan Parker", "Venomina The Sly", "Klengah", "Zaedy Zae", "Arriasa", "Tribal S"];
const professions = ["Scourge", "Willbender", "Scourge", "Scrapper", "Tempest", "Druid", "Druid", "Druid", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.3052, 16.9519, 31.6705, 5.8604, 109.98, 9.885, 40.5046, 17.0314, 51.1341, 1.0886, 72.6797, 60.3466, 7.1888, 20.097, 0.0, 4.0365, 98.2247, 21.5032, 154.6879, 224.9236], [0.0, 0.0, 0.0, 12.7958, 103.0579, 145.942, 54.7623, 18.535, 0.0, 14.5004, 224.4027, 48.8667, 101.3569, 302.6012], [13.041, 19.607, 24.5461, 6.9906, 166.944, 3.681, 30.0142, 26.5267, 38.6002, 3.4042, 72.576, 121.9467, 28.084, 5.082, 5.0301, 22.9149, 73.9597, 34.3059, 168.0904, 325.6484], [38.0052, 2.0424, 43.3591, 4.8976, 143.068, 0.0, 32.5202, 32.857, 41.0959, 0.0, 58.2682, 152.5676, 46.5192, 0.0, 48.0033, 0.0, 265.9444, 22.9006, 220.0254, 579.5944], [32.4576, 0.0, 54.6025, 0.0, 286.888, 86.9387, 58.1634, 48.6826, 38.5447, 118.921, 342.5609, 18.6268, 0.0, 0.0, 0.0, 218.9674, 37.0107, 161.3892, 556.5472], [71.4978, 56.2171, 140.0406, 0.0, 366.036, 0.0, 41.845, 46.5725, 90.3998, 0.0, 253.6013, 473.4611, 53.7719, 53.086, 0.0, 0.0, 367.4692, 57.477, 772.881, 899.6944], [198.1404, 61.272, 177.6667, 75.5992, 578.664, 66.5069, 198.7348, 235.8768, 161.0558, 0.0, 469.7741, 871.1756, 47.1262, 0.0, 94.0608, 95.7582, 467.8292, 122.1668, 1182.4967, 1832.6792], [212.7546, 51.2642, 158.965, 64.2132, 968.388, 0.0, 310.6907, 381.9245, 276.8009, 0.0, 582.6816, 823.0057, 162.977, 38.39, 86.1327, 48.1896, 721.9323, 206.4213, 1423.4636, 2029.434], [258.8328, 265.2056, 237.5012, 235.2113, 1302.84, 0.0, 298.3353, 287.0462, 276.3017, 0.0, 712.1779, 1296.6459, 141.3468, 57.717, 0.0, 882.4695, 304.3802, 2045.8449, 3292.762], [222.4008, 114.4255, 222.306, 97.4501, 1457.564, 106.4193, 253.0518, 251.0242, 283.9552, 0.0, 768.8909, 1231.4644, 174.7665, 0.0, 87.0228, 0.0, 1019.3241, 265.8368, 2044.7281, 3382.8168]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

