created: 20230301221309000
creator: Drevarr
modified: 20230705163520958
modifier: drevarr
tags: ChartData
title: 202303012213_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Grasszanine", "Newtype Khan", "Demon Sekhmet", "Arcanophage Farra", "Jeckyll Mbs", "Ark Darkness", "Blanco Padre Guard"];
const professions = ["Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.6964, 5.6554, 2.7209, 2.7298, 0.0, 0.0, 0.0, 5.4746, 2.736, 5.4317, 5.4228, 9.6589, 0.0, 0.0, 0.3801, 5.495, 8.3035, 0.0, 0.0, 0.0, 2.7562, 0.0, 2.7706, 0.0, 0.0, 2.84, 0.0, 0.0, 4.5878, 0.0, 0.0, 8.1162, 7.1797, 13.6242, 0.0, 5.3645, 0.0, 8.9545, 2.8844, 2.6888, 2.0563, 2.691, 5.6602, 9.6809], [19.8803, 0.0, 6.7078, 21.3533, 12.9692, 12.6456, 12.96, 13.1003, 9.918, 13.0968, 12.5664, 0.0, 9.2664, 13.0909, 13.0601, 18.5674, 13.1261, 13.1186, 12.54], [0.0, 12.7246, 8.2524, 0.0, 0.0, 9.5472, 0.0, 11.0347, 0.0, 13.3824, 9.9127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.1915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.0606, 38.52, 32.5882, 0.0, 11.1375, 0.0, 13.3588, 0.0, 0.0, 0.0, 0.0], [78.6968, 41.6602, 26.8829, 44.8987, 58.557, 12.5066, 8.856, 14.0644, 13.0637, 12.611, 26.5489, 13.5364, 12.584, 12.5928, 25.3258, 25.3843, 0.0, 131.9041, 16.7245, 0.0, 15.3023, 25.2912, 11.5506, 10.9571, 27.6862, 8.5747, 51.1224, 2.3166, 25.2204, 34.6135, 24.7363, 14.6362, 12.3226, 35.3126], [20.7144, 87.5992, 49.5742, 14.036, 34.8872, 0.0, 0.0, 55.601, 14.8474, 12.3197, 45.4818, 43.314, 13.8107, 13.878, 0.0, 14.3078, 13.7842, 0.0, 0.0, 13.823, 41.7701, 13.9104, 13.8902, 0.0, 0.0, 114.5483, 15.2065, 24.3046, 24.865, 0.0, 0.0, 13.9308, 19.3662, 30.5271, 34.5734, 15.0654, 20.1812, 1.775, 15.1514, 0.0, 15.1395, 9.2272, 41.8334], [95.8903, 46.0742, 41.3674, 63.4413, 55.3122, 21.2995, 24.897, 51.179, 30.6912, 17.2224, 0.092, 141.3709, 21.3568, 12.659, 34.4129, 21.4368, 14.6772, 21.3516, 50.6538, 37.5091, 44.6964, 17.0627, 51.5501, 36.9182], [26.6112, 0.0, 24.1434, 62.7596, 118.644, 0.0, 83.9942, 24.257, 106.7759, 9.4824, 7.8656, 57.888, 0.0, 0.0, 33.0786, 6.2726, 40.9147, 8.6774, 5.4288, 6.4346, 204.6407, 6.9716, 61.1526, 57.6312, 27.6882, 39.6, 10.7406], [15.0444, 72.5771, 29.7804, 22.3995, 12.3253, 40.5297, 9.2581, 118.2163, 30.2784, 52.585, 94.5205, 48.068, 0.0, 49.3171, 7.3137, 18.7404, 38.4744, 13.2616, 38.3486, 28.8586, 14.8262, 0.0, 65.6365, 27.7037, 12.3192, 21.3408, 24.5256, 4.6656, 7.0458, 49.6422, 37.0273, 38.4595, 24.8115, 40.4514, 20.302, 12.4199, 7.0459, 17.5595, 26.4141, 83.4161]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

