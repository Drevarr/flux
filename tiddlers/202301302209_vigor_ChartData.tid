created: 20230130220929000
creator: Drevarr
modified: 20230705163518401
modifier: drevarr
tags: ChartData
title: 202301302209_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Xyntharos", "Vinthry Stormgrave", "Arriasa", "Newtype Khan", "Zaidy Sagemist", "Lord Erin The Wise", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Mac Aaroni"];
const professions = ["Scrapper", "Vindicator", "Tempest", "Druid", "Spellbreaker", "Vindicator", "Tempest", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[184.2243, 762.3787, 81.3116, 0.0, 13.6142, 0.0, 34.4323, 89.1481, 12.2875, 34.7116, 4.9359, 73.668, 32.6074, 11.5171, 0.0, 15.0066, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [246.4426, 431.0775, 110.1133, 20.8692, 12.5322, 22.9001, 61.8586, 81.5287, 56.1826, 39.6704, 14.7246, 56.112, 83.795, 9.8208, 14.6846, 24.9429, 8.93, 26.1358, 12.894, 3.508, 9.9852, 11.7936], [479.2749, 618.5025, 113.8177, 39.2196, 13.2815, 5.1264, 126.6361, 71.5613, 51.5715, 9.3173, 84.84, 57.8707, 29.4624, 0.0, 33.0391, 40.4012, 65.7342, 0.0, 0.0, 0.0, 21.659], [469.0672, 482.3438, 0.0, 0.0, 79.431, 65.3562, 68.1811, 122.5216, 107.0328, 160.4848, 0.0, 34.524, 129.3278, 85.7534, 0.0, 0.0, 0.0, 41.375, 24.3328, 0.0, 0.0, 0.0, 67.783], [770.4368, 852.2325, 180.6821, 67.709, 107.065, 146.6693, 153.023, 449.8553, 206.6467, 72.8493, 33.2483, 170.772, 238.9003, 114.1445, 46.1283, 128.3537, 32.1856, 69.4453, 61.4182, 24.2728, 5.8068, 26.0582, 83.9123], [1377.0646, 1694.5425, 283.8496, 54.637, 41.1502, 160.969, 282.2263, 159.0422, 155.3457, 35.8549, 136.836, 140.6376, 100.5293, 46.0922, 86.237, 42.864, 91.3567, 38.0756, 27.8751, 21.7633, 50.7125, 73.9149], [1393.1053, 1723.2075, 281.9048, 56.7424, 106.8396, 77.2044, 191.3856, 245.1955, 183.3854, 122.7979, 37.4632, 87.192, 132.7795, 123.6082, 48.1668, 204.7362, 62.2844, 106.0038, 22.999, 38.0595, 30.926, 7.3008], [1337.6922, 2373.6825, 309.8731, 0.0, 36.605, 26.2125, 132.0902, 415.1104, 202.5509, 88.8076, 15.1128, 110.292, 146.6597, 5.6246, 16.1819, 173.0056, 50.008, 28.8599, 0.0, 12.9568, 0.0, 11.4566, 75.6478], [1488.863, 2562.21, 354.8815, 2.9462, 85.4717, 64.974, 191.2147, 504.5633, 258.1925, 293.1102, 82.6077, 157.248, 217.5293, 53.6573, 10.8601, 145.5684, 37.976, 127.8757, 13.6013, 5.3751, 5.4285, 35.3808, 128.2346], [3562.9664, 3734.1675, 644.3804, 11.6213, 230.6744, 144.3124, 342.9562, 897.1199, 427.2038, 419.1538, 105.9563, 434.868, 264.5309, 228.5122, 134.5604, 271.7549, 99.6588, 215.245, 92.966, 137.5083, 77.7262, 57.9946, 260.2683]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

