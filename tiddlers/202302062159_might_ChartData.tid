created: 20230206215940000
creator: Drevarr
modified: 20230705163518794
modifier: drevarr
tags: ChartData
title: 202302062159_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Arkintor", "Gavann", "Sygaldry Verdandi", "Tyrisai", "Johosh The Great", "Koralia Danai", "Ravioli Fetabringer", "Drevarr Moonwillow", "Bella Sassy", "High Sorcer Baradun", "\u00c9\u00efbhear", "Mac Aaroni", "Grasszanine", "Veron Blackburn", "Etchery Howls", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Scrapper", "Tempest", "Spellbreaker", "Herald", "Druid", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[93.291, 2.106, 3.8678, 5.9126, 0.0, 0.0, 0.0, 0.0], [52.877, 16.0758, 20.0976, 9.1297, 4.9144, 1.3248, 1.5272, 0.6588], [13.189, 8.6346, 5.1571, 10.6079, 6.4627, 17.1488, 1.0965, 0.0, 4.8048, 7.0196, 12.3329, 4.9104, 8.0398, 1.4329, 10.0526, 11.3665, 0.9048], [56.386, 23.7276, 29.5776, 0.0, 5.8568, 21.712], [26.862, 13.4082, 8.1149, 11.3904, 2.6704, 11.04, 0.7049, 0.2745, 3.7752, 12.1467, 10.2872, 3.7346, 12.4858, 1.7444, 18.1958, 14.4937, 0.1044], [30.008, 16.0056, 11.3002, 10.8688, 3.164, 7.36, 0.0, 0.0, 10.9138, 0.0, 10.4625, 5.3648, 8.7808, 2.5855, 25.9459, 13.5014, 0.2001], [61.226, 25.7634, 26.7715, 8.4342, 2.6479, 18.1792, 0.235, 1.1255, 18.8074, 5.5744, 16.5998], [35.695, 21.6216, 19.1875, 21.6505, 4.4656, 17.2224, 7.2838, 6.7801, 13.3162, 9.7724, 15.3723, 1.9464, 2.5194, 11.3698, 12.8045, 6.4651, 4.9155], [42.229, 21.2706, 17.6707, 18.2595, 1.9074, 17.1488, 4.895, 0.0549, 11.8061, 14.1425, 20.6328, 5.2068, 12.6341, 8.6909, 21.0038, 19.7259, 1.3485], [113.619, 20.5686, 35.1139, 36.3451, 0.0, 9.1264, 8.9285, 4.0351, 0.0, 2.3399, 2.1626, 0.0, 9.3366, 20.0606, 0.0, 0.0, 0.0], [57.475, 25.3422, 34.9622, 28.6066, 3.9046, 24.0672, 3.172, 5.7096, 10.3646, 8.2584, 24.3152, 3.4185, 3.9644, 17.2883, 6.4022, 5.8035], [64.977, 3.7206, 29.881, 7.5646, 10.3, 41.1424, 10.2599, 17.9797, 3.9811, 14.521, 4.6175, 5.4439, 0.0, 1.8067, 35.8301, 21.3196, 10.7271], [72.8676, 81.3005, 84.2545, 12.6562, 50.048, 22.9478, 15.5916], [136.972, 71.3232, 66.7392, 53.3873, 28.0949, 55.4944, 21.4597, 22.2345], [99.583, 42.5412, 75.0058, 64.343, 4.0168, 25.6128, 2.6629, 10.3212, 15.9931, 30.0055, 35.8883, 10.7297, 20.2664, 31.8665, 46.5005], [127.897, 53.9136, 52.1779, 72.8641, 16.7178, 29.44, 10.534, 16.6896, 30.888, 22.2977, 43.253, 8.0423, 18.9325, 29.7171, 46.5566, 19.9063, 30.1803], [155.364, 70.4808, 114.5184, 68.6035, 21.5873, 99.4336, 34.6174, 25.4187, 66.924, 0.585, 94.3383, 7.8842, 24.7494, 49.9023, 22.464, 35.8434, 13.4676]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

