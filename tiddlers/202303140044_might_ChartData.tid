created: 20230314004438000
creator: Drevarr
modified: 20230705163522086
modifier: drevarr
tags: ChartData
title: 202303140044_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Mac Chiato", "Ark Darkness", "Koralia Danai", "Blanco Padre Guard", "Fribble Bibble", "Sygaldry Verdandi", "Johosh The Great", "Bella Sassy", "Drevarr Moonwillow", "Venomina The Siren", "Whose Guardian", "Ravioli Fetabringer", "Zadie Miststep", "High Sorcer Baradun", "Veron Blackburn", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Tempest", "Tempest", "Herald", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 50.2571, 46.2859, 5.8432, 0.0, 0.0, 0.0, 22.9781, 0.0, 0.0, 19.8587, 0.0, 19.0777, 37.8731, 13.9356, 0.0, 8.676, 0.0, 9.4903, 0.9763, 0.0681, 6.5915, 2.0492, 0.0, 0.0, 2.3436], [2.1061, 11.7453, 79.2281, 21.0357, 0.0, 8.5378, 6.3225, 17.6126, 0.0, 5.4096, 4.5648, 8.3619, 1.7493, 15.9485, 12.3475, 6.0388, 4.0484, 8.064, 1.5463, 5.7494, 1.668, 16.6463, 10.2459], [8.6112, 21.573, 87.9849, 16.491, 5.9374, 2.1991, 3.8485, 39.6576, 2.1638, 1.9326, 5.4156, 3.0253, 12.0119, 7.1427, 3.9871, 1.8742, 1.728, 1.4579, 3.7136, 8.136, 3.575, 12.054, 2.471, 1.5288, 3.7044], [3.3592, 28.2846, 117.5912, 29.7356, 5.823, 3.2017, 7.7719, 34.6421, 0.0, 7.6411, 1.4994, 7.941, 0.0, 20.6927, 0.3876, 2.8645, 2.2991, 0.0, 7.9082, 5.0232, 0.3797, 0.0, 1.5641, 5.9065, 0.5702, 2.2776, 5.5188], [2.2661, 18.6966, 87.5679, 18.3088, 3.3062, 13.3241, 4.4982, 17.9626, 3.2395, 10.0078, 3.232, 7.3517, 6.7914, 17.7654, 15.5036, 8.4001, 3.3237, 12.06, 7.599, 1.5249, 7.4851, 4.6294, 3.9474, 12.8978, 6.9379, 7.8624, 3.402], [11.4905, 39.5505, 106.7494, 25.4506, 4.9535, 6.5974, 11.5704, 26.7106, 8.9596, 4.4649, 8.9511, 5.4331, 37.045, 15.0606, 3.6775, 2.6239, 4.32, 18.3347, 1.6864, 10.3598, 0.0, 12.1402, 38.2112, 10.3594, 6.9264, 14.364], [6.4784, 26.367, 155.5373, 49.343, 5.2395, 6.3063, 7.2721, 61.8192, 0.0, 9.8049, 3.1321, 10.3822, 6.7091, 21.5002, 9.4683, 4.5291, 7.547, 6.804, 3.7995, 0.0, 4.068, 0.868, 8.4535, 18.5632, 6.5578, 0.9048, 5.0904], [10.0242, 31.0012, 172.2169, 45.0579, 6.3034, 6.5974, 6.2225, 53.5378, 0.0, 10.3797, 2.1991, 10.9995, 7.9439, 12.7184, 14.064, 5.6517, 3.1737, 9.756, 15.7723, 4.0544, 12.9091, 0.0, 14.0767, 18.9248, 6.8904, 8.8608, 11.34], [4.3189, 27.8851, 121.7611, 34.4103, 7.4818, 17.5283, 7.1971, 45.2563, 6.2198, 13.2873, 8.7632, 1.1505, 5.5154, 27.9604, 14.3408, 12.3485, 6.0226, 10.512, 16.5233, 4.7362, 15.4042, 6.4846, 9.0121, 36.6442, 19.4357, 14.9448, 10.6092], [0.0, 293.144, 35.9685, 14.4258, 2.0051, 3.8984, 63.4522, 0.0, 19.4746, 4.7981, 0.0, 3.869, 37.3478, 0.0, 3.7549, 0.0, 0.936, 4.3296, 0.0, 0.0, 0.0, 6.368, 4.2189, 0.0, 0.0, 21.9996], [13.5433, 36.3545, 170.1319, 42.8505, 5.2738, 14.1326, 14.6691, 39.541, 6.2081, 12.4421, 6.664, 10.9995, 9.2404, 23.3171, 23.3108, 8.8646, 3.4236, 6.336, 12.8122, 0.0, 14.1024, 0.0, 17.5773, 35.1977, 15.0638, 4.2744], [11.1972, 44.2646, 184.7266, 26.8789, 3.3862, 1.811, 11.2955, 62.1691, 0.0, 13.7269, 5.8976, 12.6831, 0.4116, 35.1271, 12.569, 8.5936, 4.7481, 8.424, 14.4027, 2.3143, 8.1902, 1.9062, 13.8533, 28.9296, 4.5144, 6.7392, 19.4796], [19.1419, 74.1472, 199.7382, 19.6074, 0.0, 7.988, 21.1165, 75.6994, 5.1243, 18.9336, 25.3898, 25.4785, 0.0, 18.0683, 20.9299, 4.7613, 0.0, 0.0, 0.0, 0.0, 2.929, 0.0, 0.0, 9.0405, 4.9421, 2.5896, 18.27], [13.0101, 67.3557, 357.3604, 7.4014, 25.6456, 0.0, 48.8722, 0.0, 25.2566, 0.0, 0.2019, 20.4315, 5.3807, 13.5446, 8.604, 0.9278, 0.0, 0.0, 0.0, 12.885, 36.7647, 3.8016, 18.3456, 35.1036], [91.7378, 67.2623, 9.3007, 22.1529, 19.7421, 132.503, 17.1046, 34.52, 28.222, 23.1495, 17.246, 67.7307, 14.9499, 30.3874, 21.4664, 24.48, 10.1172, 8.1448, 9.1666, 7.5739, 13.2202, 26.0366, 8.221, 7.8, 5.0652], [13.0901, 50.9762, 230.5955, 52.7191, 4.576, 23.6082, 13.7445, 73.0166, 0.0, 27.1832, 11.762, 4.1248, 15.8878, 51.5803, 27.1867, 16.6453, 16.7683, 8.172, 17.7162, 3.1395, 24.0826, 6.8931, 15.827, 43.756, 17.1547, 13.104, 2.0664], [27.1399, 131.9948, 718.0568, 160.2349, 20.4776, 53.361, 40.084, 154.3147, 5.0183, 48.1454, 28.6552, 37.7688, 33.6071, 148.8865, 86.7094, 24.7744, 28.2137, 40.284, 59.3779, 21.6177, 81.0346, 6.0932, 61.2598, 181.6538, 58.117, 46.176, 44.6544]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

