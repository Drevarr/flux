created: 20230130220929000
creator: Drevarr
modified: 20230705163518380
modifier: drevarr
tags: ChartData
title: 202301302209_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tyrisai", "Lord Erin The Wise", "Etchery Howls", "Arkitrix", "Cat Wigglebooty", "Mac Aaroni", "Zaidy Sagemist", "Joh Oshi", "\u00c9\u00efbhear", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Druid", "Firebrand", "Scrapper", "Tempest", "Vindicator", "Druid", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1039.7251, 1473.4913, 142.249, 125.4126], [721.3427, 766.7887, 122.3378, 47.249, 78.4843, 103.7355, 24.6922, 235.7473, 37.8672, 130.6418, 7.6258, 84.336, 111.4819, 96.5563, 62.9596, 72.2117, 63.1492, 29.2942, 17.3402, 6.0729, 9.0311, 0.6365], [607.9618, 447.1936, 148.7437, 274.848, 220.0262, 384.2165, 245.6868, 284.2264, 42.6948, 116.6634, 162.6501, 128.9647, 4.7376, 3.6317, 12.9301], [1095.1382, 800.415, 116.6886, 0.0, 12.7576, 51.597, 70.488, 254.3389, 143.9726, 69.6937, 11.1475, 41.076, 173.1715, 74.7274, 99.4445, 8.648, 106.517, 17.4614, 16.9551, 0.0, 0.0, 14.5964], [1099.0269, 1941.5025, 302.5569, 2.4825, 33.5395, 4.7138, 130.2106, 501.5155, 108.1147, 56.2598, 44.1739, 275.604, 125.509, 145.9728, 83.886, 72.13, 33.2572, 7.8565, 1.0711, 0.0, 0.0, 23.3438, 0.0], [2261.7302, 2063.3288, 318.671, 9.7117, 142.1372, 104.5954, 217.4448, 488.7147, 171.3298, 273.0946, 73.54, 304.584, 169.7933, 181.5062, 86.7544, 242.5186, 74.9556, 155.2354, 67.4812, 98.6944, 54.6634, 62.5435, 199.4835], [2688.0224, 2857.68, 603.3542, 245.7762, 176.3535, 491.9635, 913.1209, 409.8931, 691.978, 149.2983, 440.832, 413.1734, 159.5434, 189.0231, 200.6472, 147.6552, 212.8762, 82.5578, 59.1072, 77.5618, 74.7302, 300.3915], [1078.6115, 4421.5763, 824.229, 55.3784, 433.1737, 53.7947, 619.2691, 1177.0604, 281.9174, 258.669, 4.6586, 691.992, 617.9242, 467.113, 217.6165, 508.2627, 103.2308, 198.1106, 137.5695, 80.6076, 5.9549, 119.2651, 234.8746], [4439.8547, 5439.1838, 772.5526, 46.1305, 228.24, 94.4671, 468.0403, 1377.4532, 841.8883, 375.2459, 102.5178, 532.98, 503.4312, 54.2822, 140.1528, 296.2072, 141.9964, 259.3046, 9.3572, 85.9262, 137.3081, 138.6965, 399.1668], [4524.4326, 6783.1313, 748.3814, 83.4222, 565.3934, 241.2001, 1108.9258, 1288.9146, 838.5653, 1174.1537, 134.4905, 590.016, 711.707, 95.7974, 90.4345, 180.2431, 56.682, 47.6918, 163.2564, 13.5038, 48.9552, 0.0, 293.0601], [6566.4547, 7713.09, 1566.776, 339.1722, 340.5343, 251.8698, 912.4138, 1342.7083, 979.1376, 756.3522, 273.806, 893.34, 903.7526, 340.871, 51.2156, 511.7792, 221.5768, 496.382, 231.3237, 179.8678, 59.0061, 255.528, 325.5186]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

