created: 20230318225613000
creator: Drevarr
modified: 20230705163522559
modifier: drevarr
tags: ChartData
title: 202303182256_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Mylania Svenson", "S\u00edzz", "Ark Darkness", "S\u00edzz", "Gavann", "Blanco Padre Guard", "Aronorf Xideliesi", "Zaylen Harker", "Bella Sassy", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[14.526, 0.0, 39.9813, 20.1531, 140.9562, 174.2541, 154.0898, 138.6072], [27.5173, 324.3802, 153.1795, 137.1315, 53.1582, 17.8114], [50.1221, 53.5248, 200.0392, 475.1155, 94.4194], [388.4231, 164.4784, 276.3421, 125.8171, 131.9472, 28.7712, 63.3053], [132.076, 152.8934, 0.0, 147.0053, 598.1261, 145.4275, 0.0, 31.8261, 73.8528, 223.8204], [52.5707, 129.6691, 40.1465, 151.6838, 515.8272, 111.7063, 0.0, 0.0, 106.4448, 249.306, 170.3776, 63.1378, 268.8941, 116.2498, 113.4267, 0.0, 13.4999, 14.1174, 150.4899, 280.8781, 68.955, 35.7232], [64.4798, 239.1379, 68.0388, 179.9091, 633.4387, 171.1642, 0.0, 0.0, 169.7472, 307.7808, 263.511, 126.3736, 118.6998, 46.9814, 191.129, 36.1152, 72.6566, 69.4902, 160.2427, 170.7156, 196.8845, 119.1274, 65.1186], [69.3399, 251.2944, 212.6395, 220.7234, 640.151, 306.049, 23.7463, 76.3728, 288.0672, 405.2563, 197.8774, 129.9782, 104.6549, 192.1163, 53.136, 104.089, 69.8554, 162.5956, 258.4791, 249.0214, 153.12, 177.3101], [87.8899, 250.871, 64.2528, 138.9717, 724.6387, 385.1969, 144.5807, 29.0072, 171.528, 383.8824, 277.8271, 152.9751, 232.1222, 75.335, 99.3344, 39.6252, 73.9051, 59.3476, 281.4682, 160.6027, 400.5146, 173.8167, 130.6724], [80.9522, 407.5142, 254.9507, 664.0819, 440.7012, 60.8951, 306.1296, 335.5752, 406.7509, 144.8378, 469.9901, 154.741, 45.0595, 42.9084, 135.4234, 126.8353, 166.0943, 329.4918, 445.4707, 207.7328, 78.8454], [74.7936, 348.7882, 66.411, 310.5702, 731.0592, 305.5838, 0.0, 81.7892, 172.2336, 478.7208, 454.7335, 178.1714, 320.7747, 91.2384, 273.409, 47.7036, 253.319, 126.4112, 153.2249, 275.7645, 404.5619, 222.3813, 212.4306]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

