created: 20230429000309000
creator: Drevarr
modified: 20230705163527264
modifier: drevarr
tags: ChartData
title: 202304290003_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Kos\u00e4ir", "High Sorcer Baradun", "Tegan Parker", "Viral Marketing", "Koralia Danai", "Aronorf Xideliesi", "Sister Elon\u00edth", "Air One Com", "Miphest\u00f6", "Johosh The Great", "Drevarr Moonwillow", "Bella Sassy", "Newtype Khan", "Demon Sekhmet", "Blancooo Padreee"];
const professions = ["Tempest", "Herald", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[35.6872, 12.6608, 7.0524, 0.0, 29.2923, 0.0, 3.8602, 5.8106, 0.0, 30.9648, 0.0, 0.0, 0.0, 38.9789], [44.4523, 8.8612, 0.8484, 15.9324, 21.42, 36.9894, 0.0, 19.5027, 25.2199], [53.8592, 23.7776, 21.7068, 59.3554, 15.5257, 0.0], [13.1364, 42.074, 1.4349, 44.1954, 3.7976, 0.0, 0.0, 5.7936, 20.4057, 2.0505, 1.6777, 40.9118], [3.2667, 108.9468, 32.7978, 5.4722, 22.5553, 5.6712, 11.5956, 6.718, 2.4648, 6.5485], [14.596, 21.9248, 1.4349, 70.9182, 23.3612, 0.0, 0.0, 0.0, 12.956, 0.0, 0.0, 8.4968, 62.8173], [20.7263, 1.4668, 8.3652, 1.9914, 45.994, 12.889, 1.612, 24.1798, 7.2624, 4.2107, 5.0453, 10.5062, 15.2077, 66.0387], [32.914, 28.2552, 12.9753, 4.9706, 76.8281, 29.7482, 5.0056, 20.6184, 5.0184, 13.2799, 6.8259], [20.8723, 22.8512, 5.8312, 75.0294, 8.4008, 4.6662, 10.1218, 0.0, 14.3164, 0.0, 0.0, 6.6568, 76.6693], [43.3501, 50.0256, 12.3952, 24.1533, 12.889, 7.8053, 8.2474, 1.02, 42.9491, 1.4299, 2.8037, 9.5792, 95.6756], [21.0182, 47.2464, 5.3122, 6.9462, 101.7522, 8.5735, 3.5209, 34.0516, 0.0, 7.3201, 2.3203, 2.3108, 0.92, 84.0785], [27.0756, 23.932, 10.716, 1.7405, 90.9603, 10.9901, 11.9624, 14.9327, 2.3664, 3.1742, 9.7668, 2.4648, 8.7133, 115.004], [44.4448, 54.6576, 4.8237, 5.2371, 115.3705, 17.3195, 11.0292, 21.743, 0.0, 27.5315, 10.846, 11.03, 29.9825, 129.5003], [71.3015, 86.0008, 22.5006, 4.2179, 225.859, 26.8136, 11.2413, 49.1718, 15.912, 55.1926, 23.0949, 21.721, 59.2614, 270.5976], [107.3536, 122.4392, 43.0778, 3.7475, 280.0755, 52.1888, 31.8998, 86.8472, 21.2976, 53.3139, 0.0, 25.3874, 79.8811, 409.4399], [107.9374, 102.3672, 21.4626, 21.9677, 348.9381, 89.0144, 20.9555, 40.2371, 22.9296, 35.7586, 36.2611, 56.1666, 80.2058, 479.3443]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

