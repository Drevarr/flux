created: 20230702223827000
creator: Drevarr
modified: 20230705163541055
modifier: drevarr
tags: ChartData
title: 202307022238_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Koranthin", "Tootsie Pop Rocks", "Kittendoo", "Tika Fiery", "K\u00e2 Otik", "Spirita Demon", "Artakama Nahid", "Demon Staph"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Druid", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.3333, 113.373, 23.7746, 307.3238, 520.7635, 76.9412, 18.55, 82.2174, 221.1944, 723.0, 395.1013, 47.6566, 376.0455, 203.5806, 124.6364, 0.0, 276.6631], [0.7556, 105.2169, 0.0, 1.9206, 37.7797, 77.427, 1015.1282, 0.0, 184.5873, 158.0141, 638.3143, 1793.3941, 191.9118], [594.3333, 153.55, 305.9022, 376.4653, 1643.2024, 305.5, 53.6897, 552.481, 283.197, 597.875, 0.0, 818.5325, 1002.984], [25.1366, 78.4186, 125.3178, 271.935, 17.8696, 253.9862, 28.8593, 469.3735, 9.1818, 693.2222, 381.1017, 250.1798, 243.9103, 27.0714, 195.1667, 83.8592, 210.1905, 310.0887, 7.625, 173.5543, 314.0972, 754.0238, 8.8182, 28.4828, 196.443, 104.7778, 9.3871, 252.5065, 131.0, 225.1176, 428.4286, 5.1364, 273.5926, 0.0, 51.1695, 135.9388, 412.7647, 50.223, 81.8125, 66.5672, 106.3333, 59.3304, 117.5472, 54.7097, 79.1852, 120.9545, 74.821, 580.6667], [78.7519, 323.243, 685.0488, 256.4312, 7.4741, 717.7711, 774.9841, 206.0678, 411.6854, 578.6154, 4.6429, 132.6429, 221.169, 255.7048, 601.2611, 138.5588, 96.8571, 24.3, 231.2826, 128.6528, 880.4286, 85.5909, 217.962, 87.7929, 173.3902, 66.871, 323.6883, 71.9032, 387.2834, 483.4921, 0.0, 378.1975, 68.9091, 54.898, 392.7843, 161.3986, 45.3284, 309.9316, 195.3524, 345.8302, 43.3871, 194.9259, 174.25, 151.4236], [590.5909, 1.0345, 3145.9051, 2522.3826, 299.5806, 2652.987, 141.7742, 3347.492, 1688.5873, 82.0909, 1776.5988, 24.4182, 105.9661, 0.0, 1170.3878, 2278.2745, 475.3311, 50.0417, 345.5821, 1027.359, 1168.533, 298.8302, 4.871, 736.4259, 64.4091, 1343.441], [730.0, 319.0775, 1005.7103, 1313.0732, 276.8478, 1063.1606, 92.2444, 861.3735, 29.2727, 1674.8095, 981.6949, 479.0674, 1489.0513, 223.6667, 747.1587, 751.7465, 946.8571, 2102.3645, 37.7941, 0.0, 450.9, 469.663, 739.3889, 2003.5952, 16.6364, 37.1034, 1563.5633, 419.697, 909.9924, 342.4839, 1620.5844, 1614.5668, 984.6111, 0.0, 885.463, 59.6545, 16.4068, 840.1224, 1618.0588, 463.2027, 42.25, 519.6119, 635.1282, 715.8502, 218.2453, 189.5161, 737.5741, 733.8864, 607.1397, 1841.7833], [987.0775, 1823.6916, 2977.5285, 26.7174, 2225.3578, 461.763, 5686.6506, 175.4545, 5298.1746, 1407.8814, 1556.3708, 4708.8718, 137.381, 1096.0952, 1296.7606, 2282.7381, 4668.0197, 1138.7647, 1205.3333, 1685.2, 1779.9783, 1576.375, 4408.7262]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

