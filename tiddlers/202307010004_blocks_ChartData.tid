created: 20230701000406000
creator: Drevarr
modified: 20230705163539970
modifier: drevarr
tags: ChartData
title: 202307010004_blocks_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elonith", "High Sorcer Baradun", "K\u00f4sair", "Seiker Soulkeeper", "Fluffy No Care Bear", "Mistwalker Cael", "Sumatra Satyricon", "Vhalloe", "Brad Bellick", "Xyntharos", "Blancooo Padreee", "Klengah", "Drumina", "Latedoctor", "Melli Dragonswrath", "Mike The Archmagus", "Erin Celes", "Arcanophage Farra", "Gavann", "Sakis Ranger", "Lucky Leipreach\u00e1n", "Zayde Sunsabre", "Air One Com", "Demon Staph", "Newtype Khan", "Morv\u00e4rth", "Tribal S", "Kary\u00edna", "Smol Daddy Tika", "Johosh The Mighty", "Xanvias Einzbern", "Arriasa", "Smol Gluvs", "Ak\u00e1nt\u00f3r", "Broken Cheese", "Duke Silvver", "Dingle Mcbingle", "Morton Saltbringer", "Gamora Titus", "Be\u00eb", "Mmathuss", "Aronorf Xideliesi", "Koralia Danai", "Tegan Parker", "Gestern Yesteryear", "Solus Sanctus", "Bella Sassy", "Drevarr Moonwillow", "Ryvalia Fazebringer", "Primal Clone"];
const professions = ["Berserker", "Tempest", "Berserker", "Firebrand", "Berserker", "Vindicator", "Soulbeast", "Druid", "Scrapper", "Vindicator", "Berserker", "Druid", "Druid", "Reaper", "Berserker", "Weaver", "Herald", "Spellbreaker", "Firebrand", "Druid", "Scrapper", "Spellbreaker", "Firebrand", "Druid", "Spellbreaker", "Reaper", "Druid", "Vindicator", "Berserker", "Berserker", "Berserker", "Druid", "Reaper", "Druid", "Chronomancer", "Vindicator", "Firebrand", "Chronomancer", "Firebrand", "Scourge", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Blocked Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4, 6, 4, 5, 5, 1, 8, 8, 36], [8, 4, 0, 4, 9, 3, 5, 6, 9, 4, 18, 9], [3, 5, 13, 9, 7, 1, 4, 4, 7, 8, 0, 3, 5, 13], [12, 8, 14, 10, 15, 8, 7, 10], [11, 4, 4, 5, 6, 10, 0, 7, 11, 33], [12, 18, 15, 16, 5, 1, 4, 9, 8, 6], [3, 3, 8, 1, 5, 1, 1, 2, 1, 2, 8, 8, 9, 8, 4, 1, 4, 4, 0, 8, 13], [4, 9, 9, 7, 11, 5, 7, 3, 0, 5, 6, 28], [4, 4, 7, 8, 10, 3, 4, 8, 3, 4, 12, 4, 6, 1, 8, 11], [4, 8, 8, 1, 12, 2, 7, 2, 3, 8, 11, 5, 4, 5, 7, 3, 2, 5], [2, 5, 6, 6, 4, 1, 2, 4, 1, 3, 6, 5, 0, 3, 12, 5, 6, 4, 0, 5, 7, 12], [5, 5, 8, 10, 7, 2, 2, 3, 5, 5, 12, 5, 3, 1, 6, 4, 6, 4, 0, 3, 4, 5], [15, 9, 6, 2, 16, 8, 7, 6, 14, 14, 19], [10, 9, 4, 9, 3, 8, 9, 0, 10, 15, 40], [3, 5, 10, 0, 9, 2, 5, 4, 4, 5, 18, 9, 5, 4, 14, 1, 3, 1, 0, 5, 8, 9], [10, 4, 5, 10, 6, 2, 3, 4, 6, 4, 20, 9, 8, 2, 8, 8, 8, 7], [0, 9, 87, 32], [4, 6, 9, 3, 10, 4, 4, 9, 3, 1, 2, 12, 9, 3, 13, 7, 4, 8, 5, 13, 3], [7, 7, 4, 8, 5, 23, 9, 10, 2, 9, 1, 6, 3, 5, 7, 32], [4, 4, 2, 10, 6, 4, 3, 6, 3, 5, 10, 8, 7, 5, 9, 0, 1, 7, 0, 7, 12, 38], [6, 5, 16, 9, 7, 4, 4, 4, 6, 7, 11, 7, 5, 3, 4, 8, 6, 3, 7, 8, 22], [2, 3, 3, 6, 11, 4, 6, 5, 2, 5, 16, 6, 5, 3, 8, 5, 7, 10, 1, 7, 16, 36], [4, 5, 3, 7, 7, 3, 8, 6, 1, 9, 20, 8, 8, 6, 8, 6, 9, 7, 0, 6, 10, 28], [7, 5, 12, 22, 9, 4, 3, 5, 6, 7, 27, 9, 5, 10, 11, 7, 14, 13], [6, 3, 7, 8, 5, 3, 5, 6, 5, 7, 10, 7, 8, 5, 14, 12, 7, 5, 0, 5, 12, 36], [1, 5, 7, 10, 4, 4, 8, 5, 5, 6, 20, 9, 9, 5, 7, 7, 8, 10, 0, 9, 6, 35], [5, 5, 9, 10, 5, 3, 2, 7, 6, 7, 22, 9, 9, 5, 11, 6, 8, 6, 0, 7, 12, 27], [6, 5, 3, 13, 13, 2, 3, 5, 4, 9, 17, 9, 5, 2, 7, 3, 3, 9, 1, 8, 11, 43], [4, 10, 8, 9, 2, 8, 6, 8, 5, 15, 10, 10, 5, 9, 6, 9, 6, 0, 6, 15, 32], [12, 5, 16, 13, 6, 2, 5, 4, 4, 5, 19, 9, 5, 5, 5, 9, 9, 9, 0, 9, 9, 33], [10, 4, 4, 9, 8, 0, 7, 6, 7, 7, 18, 8, 8, 4, 10, 14, 9, 8, 0, 8, 13, 32], [6, 5, 5, 20, 5, 4, 6, 6, 7, 4, 16, 9, 7, 7, 5, 7, 9, 12, 0, 6, 12, 36], [5, 5, 11, 16, 6, 5, 3, 6, 6, 5, 24, 8, 10, 4, 8, 4, 9, 5, 1, 7, 12, 35], [5, 5, 11, 9, 10, 5, 4, 8, 6, 6, 11, 5, 8, 4, 14, 8, 12, 8, 0, 11, 15, 36], [12, 4, 12, 26, 12, 4, 3, 8, 8, 10, 21, 10, 11, 11, 21, 1, 2, 9, 16, 6], [2, 10, 8, 21, 12, 2, 6, 10, 8, 6, 23, 6, 8, 6, 12, 0, 11, 18, 0, 34, 5], [16, 13, 10, 15, 8, 14, 10, 18, 9, 13, 13, 16, 12, 43], [12, 8, 11, 13, 12, 3, 7, 6, 7, 9, 17, 10, 2, 11, 10, 6, 10, 0, 9, 16, 32], [17, 16, 6, 3, 11, 4, 7, 9, 20, 12, 7, 4, 16, 7, 12, 7, 0, 7, 18, 35], [3, 8, 16, 9, 1, 4, 10, 7, 8, 20, 11, 8, 8, 9, 5, 14, 13, 0, 8, 19, 41], [9, 10, 12, 7, 11, 3, 4, 6, 8, 9, 15, 9, 9, 6, 14, 7, 10, 12, 1, 7, 18, 42], [8, 5, 11, 11, 10, 4, 4, 10, 8, 8, 16, 8, 7, 5, 8, 13, 15, 15, 9, 19, 37], [10, 7, 14, 16, 10, 5, 5, 5, 10, 6, 26, 12, 9, 4, 13, 13, 9, 12, 1, 8, 12, 32], [5, 6, 16, 12, 10, 2, 7, 7, 12, 10, 24, 11, 12, 12, 13, 9, 7, 12, 0, 11, 15, 45], [15, 4, 10, 19, 12, 3, 2, 4, 7, 7, 27, 11, 10, 9, 13, 13, 12, 8, 1, 13, 12, 46], [8, 6, 16, 17, 12, 8, 6, 7, 12, 14, 28, 10, 8, 6, 14, 9, 19, 12, 1, 11, 18, 45], [9, 8, 9, 18, 10, 5, 9, 6, 13, 10, 38, 21, 11, 5, 18, 11, 15, 13, 0, 12, 15, 38], [13, 21, 23, 16, 14, 5, 10, 6, 8, 13, 36, 16, 12, 5, 21, 15, 17, 13, 0, 12, 14, 38], [9, 9, 16, 21, 14, 6, 9, 6, 7, 21, 50, 15, 10, 5, 8, 18, 20, 16, 0, 12, 18, 39], [9, 5, 21, 23, 20, 2, 6, 8, 8, 4, 32, 12, 14, 7, 29, 10, 18, 14, 0, 8, 31, 65]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

