created: 20230401223327000
creator: Drevarr
modified: 20230705163524065
modifier: drevarr
tags: ChartData
title: 202304012233_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Gabe Malhorn", "Einar X", "Cat Wigglebooty", "Charr Surethang", "High Sorcer Baradun", "Macette", "Astraea Lumena", "Johosh The Great", "Hyde En Sikh", "Bella Sassy", "Zenek Tryst", "Tribal S", "Sygaldry Verdandi", "Tac Mancer", "Rina Of Theros", "Newtype Khan", "Venomina The Fierce", "Morv\u00e4rth", "Drevarr Moonwillow", "Smol Gluvs", "Tootsie Pop Rocks", "Be\u00eb", "Your Arch Nemesis", "Skye Nightroad"];
const professions = ["Firebrand", "Vindicator", "Scrapper", "Berserker", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Weaver", "Druid", "Firebrand", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scrapper", "Scourge", "Scrapper", "Scourge", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2963, 0, 0, 1259, 0, 2472, 2465, 0, 0, 0, 0, 0, 502, 1558, 0, 0, 0, 2642, 0, 3175, 0, 6114, 495, 0, 0, 0, 224, 0, 696, 3712], [0, 2053, 1682, 2620, 0, 0, 0, 2465, 0, 535, 0, 31, 0, 2678, 0, 2419, 0, 6574, 0, 0, 0, 0, 3264, 2468, 2998], [462, 1636, 1952, 942, 0, 1772, 157, 1807, 47, 4183, 0, 0, 0, 873, 1267, 0, 9379, 1228, 0, 3147, 0, 63, 101, 2622, 238], [1437, 10044, 0, 514, 215, 0, 0, 2465, 0, 2461, 0, 2581, 0, 2927, 3876, 261, 0, 261, 0, 2210, 4573, 1248, 0, 0, 0, 1248, 0], [1248, 0, 1237, 8176, 195, 0, 106, 0, 1526, 1113, 0, 5016, 0, 0, 0, 0, 0, 975, 0, 11532, 0, 3308, 0, 0, 0, 0, 2499, 2465], [4667, 1557, 2414, 5842, 0, 2665, 461, 0, 0, 6835, 0, 164, 0, 1273, 0, 0, 0, 3186, 0, 1188, 0, 8783, 0, 0, 1248, 540, 0, 0, 0, 0], [11241, 2677, 1491, 6946, 269, 2824, 0, 1972, 0, 0, 3728, 0, 0, 0, 0, 0, 0, 1398, 0, 0, 6792, 3007, 0, 0, 0, 0, 538, 4767], [4072, 2789, 0, 7836, 2929, 1247, 518, 0, 0, 0, 2004, 2719, 0, 6530, 0, 2203, 0, 765, 15, 0, 10966, 0, 0, 0, 0, 0, 269, 2734, 929], [2216, 5939, 3923, 11729, 0, 3165, 881, 1285, 0, 0, 3459, 2877, 0, 1988, 0, 0, 0, 3606, 0, 102, 0, 7350, 0, 0, 1248, 269, 0, 0, 0, 0], [8613, 564, 1543, 7771, 0, 327, 0, 1248, 0, 0, 1248, 4478, 0, 2964, 0, 1657, 0, 3214, 0, 3341, 0, 14654, 1824, 0, 152, 0, 0, 152, 0, 0], [5766, 2035, 1517, 6146, 35, 1430, 538, 1248, 0, 1517, 0, 269, 1532, 998, 0, 121, 0, 3500, 0, 1465, 0, 18449, 442, 3711, 2625, 349, 0, 538, 2567, 538], [6230, 7164, 2496, 3720, 0, 1377, 0, 3474, 0, 2609, 1248, 0, 0, 0, 1629, 0, 2376, 0, 2164, 0, 18027, 0, 0, 2436, 0, 0, 283, 3596, 2465], [3769, 1158, 2812, 20364, 2903, 1376, 0, 1763, 0, 2874, 0, 2465, 0, 4653, 1188, 0, 0, 4698, 0, 302, 0, 10891, 148, 0, 4112, 0, 0, 0, 2421, 3855], [15811, 9742, 6793, 22140, 1188, 0, 314, 7983, 0, 8100, 8, 15741, 3871, 0, 0, 0, 0, 4858, 4568], [3474, 11980, 1189, 11954, 2092, 3241, 1891, 826, 0, 4388, 4656, 0, 0, 7185, 0, 0, 0, 0, 0, 5019, 0, 26532, 0, 0, 0, 3115, 0, 0, 10637, 6731], [12163, 6742, 1324, 11619, 2876, 2364, 411, 2883, 0, 9281, 2962, 0, 14511, 0, 835, 0, 6521, 0, 3148, 0, 35992], [4664, 4593, 1732, 19462, 0, 5135, 0, 0, 0, 6144, 0, 1652, 745, 0, 3471, 0, 6957, 0, 12449, 0, 26976, 1853, 3442, 904, 2676, 3442, 989, 6865], [0, 4680, 4719, 31295, 0, 8809, 4386, 11382, 0, 3006, 0, 2465, 0, 6495, 0, 0, 0, 4613, 0, 5221, 0, 24247, 4216, 0, 362, 0, 0, 0, 6579, 2734], [10307, 4751, 2368, 24227, 1162, 3073, 2130, 4429, 0, 2223, 1550, 10403, 228, 6933, 54, 0, 90, 150, 5133, 192, 31742, 3923, 286, 364, 106, 24, 1693, 3741, 4257], [13869, 7244, 5066, 33098, 0, 98, 3945, 25, 0, 6890, 9702, 12511, 0, 5275, 0, 0, 0, 8073, 0, 812, 0, 18111, 1555, 0, 3977, 1227, 0, 1416, 7300, 9514], [3764, 4049, 12473, 49675, 221, 5220, 5483, 3399, 0, 18698, 13141, 0, 1132, 12857, 0, 0, 0, 5009, 0, 3649, 89, 37323, 1368, 592, 642, 0, 0, 321, 13729], [13147, 18564, 5672, 30798, 4412, 11694, 2689, 5812, 0, 13436, 10452, 8854, 808, 8557, 0, 2702, 0, 6303, 0, 13123, 0, 35702, 5550, 0, 5915, 0, 0, 2459, 3746, 7187], [2384, 19654, 5015, 73219, 3268, 1284, 9088, 8399, 0, 1137, 5592, 8785, 4034, 4220, 1379, 4106, 907, 0, 5078, 0, 52887, 6275, 0, 5382, 0, 0, 4468, 2586, 15751], [20594, 26647, 9351, 55644, 3768, 16751, 4106, 7235, 0, 8707, 1307, 770, 1105, 6885, 0, 606, 2386, 6788, 0, 8971, 0, 66329, 2463, 0, 5736, 2527, 0, 2771, 5446, 9107]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

