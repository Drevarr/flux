created: 20230222220539000
creator: Drevarr
modified: 20230705163519893
modifier: drevarr
tags: ChartData
title: 202302222205_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Forever Broke", "Dark Sidiuz", "Panther B Me", "Newtype Khan", "Arcanophage Farra", "Primal Clone", "Smol Gluvs", "Rina Of Theros", "Black Raspberry Pie", "Elonith Tenebris", "Eibh\u00ebar", "\u00c1rk\u00e1ntor"];
const professions = ["Druid", "Reaper", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Chronomancer", "Scourge", "Scourge", "Chronomancer", "Scourge", "Chronomancer", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0465, 0.0811, 0.0303, 0.0349, 0.0461, 0.0678, 0.025, 0.05, 0.0291, 0.0245, 0.0541, 0.0851], [0.0455, 0.0, 0.0263, 0.0932, 0.225, 0.5], [0.0, 0.0, 0.2625, 0.119, 0.1373, 0.036, 0.2447], [0.0233, 0.027, 0.0606, 0.2093, 0.0263, 0.0169, 0.3875, 0.725, 0.1931, 0.1275, 0.0691, 0.4681], [0.0233, 0.0541, 0.1061, 0.1163, 0.0, 0.0169, 0.2125, 0.675, 0.2778, 0.1765, 0.0661, 0.5213], [0.0, 0.0, 0.1061, 0.093, 0.0, 0.161, 0.5375, 1.075, 0.2222, 0.1667, 0.033, 0.5638], [0.0233, 0.1351, 0.2273, 0.093, 0.0658, 0.1441, 0.1375, 0.875, 0.2857, 0.2941, 0.1201, 0.5851], [0.0465, 0.0, 0.3023, 0.0132, 0.0593, 0.35, 0.8, 0.4259, 0.1912, 0.1321, 0.7447], [0.1163, 0.1081, 0.3788, 0.186, 0.0066, 0.1271, 0.6, 0.8875, 0.3148, 0.2745, 0.1111, 0.5426], [0.186, 0.2703, 0.0303, 0.0581, 0.0855, 0.0593, 0.5125, 0.7125, 0.4312, 0.3039, 0.1592, 0.5319], [0.0698, 0.4054, 0.4545, 0.1395, 0.0987, 0.2458, 0.7125, 0.625, 0.463, 0.3922, 0.2132, 0.6702], [0.0698, 0.1081, 0.1515, 0.2326, 0.0197, 0.1186, 0.4125, 1.0875, 0.4312, 0.3578, 0.4054, 0.7553], [0.0, 0.2162, 0.1212, 0.1163, 0.0461, 0.0763, 0.575, 1.425, 0.4921, 0.5392, 0.2342, 0.9574]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

