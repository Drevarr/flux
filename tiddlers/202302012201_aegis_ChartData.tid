created: 20230201220146000
creator: Drevarr
modified: 20230705163518479
modifier: drevarr
tags: ChartData
title: 202302012201_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["\u00c9\u00efbhear", "Whose Guardian", "Arkitrix", "Zaylen Harker", "Raelyn Sunray", "\u00c2 R K", "Sygaldry Verdandi", "Bella Lunabringer", "Koralia Danai", "Johosh The Great", "Ravioli Fetabringer"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.5092, 140.3762, 10.5096, 27.7939, 12.9948, 13.1641, 0.0, 29.2517, 0.0, 12.8674, 3.2345, 14.7557, 10.9976, 18.081, 18.2182, 28.0637, 4.6648, 27.3171, 13.9844, 26.9321, 2.1806, 1.2472, 31.5296], [28.8698, 65.8031, 109.5003, 67.2025, 101.303, 15.9289, 72.0967, 36.1665, 23.184], [88.535, 46.6284, 71.3054, 0.0, 28.4102, 37.6376, 25.4584, 52.4349, 39.9722, 36.456, 8.3829, 68.5225, 18.8334, 20.4019, 16.0822], [0.0, 95.4089, 103.5648, 64.5427, 20.6388, 7.7112, 1.9051, 87.3974, 0.0, 0.0, 16.8721, 16.6375, 18.8964, 43.3062, 20.137, 36.1584, 7.2853, 57.5957, 7.0458, 22.7976, 3.271], [46.6531, 22.0266, 83.6665, 115.3215, 73.6058, 8.3328, 9.4119, 28.5425, 4.9294, 8.5201, 9.7138, 82.3165, 248.1239], [79.918, 155.4305, 103.008, 59.7274, 59.0117, 45.8954, 5.0973, 99.5558, 0.0, 0.0, 30.7718, 62.102, 114.2896, 33.4719, 7.7185, 17.5286, 12.0187, 141.0788, 19.1548], [2.0894, 175.959, 64.728, 74.1312, 55.5464, 18.6033, 81.0322, 0.0, 0.0, 32.8699, 43.4543, 81.9045, 96.7995, 34.7763, 34.5514, 19.455, 126.0671, 50.7671, 7.1291, 12.9352, 54.302, 301.1541], [16.3934, 786.7322, 224.1816, 100.151, 172.2448, 80.3342, 7.388, 147.4027, 61.0229, 106.965, 52.1023, 89.5176, 131.91, 122.5539, 94.2819, 43.033, 9.7138, 125.5055, 32.3623, 35.4136, 24.7057, 33.6749, 332.7558], [201.1813, 629.1512, 332.8968, 180.0269, 117.157, 143.4691, 177.9797, 74.9622, 58.0177, 142.4241, 140.1733, 86.436, 67.6337, 114.6355, 28.8943, 155.2735, 91.1128, 22.2566, 14.7937, 47.4903, 402.3806], [31.0591, 717.5217, 298.584, 152.6131, 162.8682, 138.237, 22.2661, 206.4067, 164.9894, 111.9336, 103.039, 84.5135, 165.0849, 132.2118, 124.9618, 86.4826, 42.9436, 225.9916, 31.2104, 85.4717, 55.9285, 117.4625, 447.7629], [216.4497, 829.5489, 476.412, 184.1664, 130.7634, 99.2955, 12.7518, 156.4858, 271.1434, 238.4673, 104.3503, 220.351, 195.8902, 169.8732, 69.7682, 74.6083, 15.1194, 284.0978, 62.3939, 42.7552, 32.5114, 101.5045, 417.6764]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

