created: 20230626090515000
creator: Drevarr
modified: 20230705163539211
modifier: drevarr
tags: ChartData
title: 202306260905_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Necrotic Windrunner", "C H A R C O A L", "Louie Runesoldier", "Utopia Skye", "Koralia Danai", "Yngvar The Burdened", "Urilstormwalker", "Brace Stonebrow", "Gestern Yesteryear", "Koralia Danai", "Illusive Heart", "Traidoruns Maximus", "Drevarr Moonwillow"];
const professions = ["Scourge", "Scourge", "Tempest", "Tempest", "Dragonhunter", "Scourge", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3.8069, 0.0, 4.704, 2.3919, 6.4051, 0.0, 1.4599], [2.6394, 4.6332, 0.0, 2.8531, 1.2757, 10.7146, 0.0, 2.5964], [0.0, 2.2226, 0.0, 0.0, 6.4414, 11.175, 0.0, 0.0, 0.0, 9.0892, 9.8189], [0.0, 27.3834, 17.5224, 0.0, 0.0, 0.0, 7.2554], [8.4565, 17.6118, 2.501, 1.2453, 2.1197, 20.8893], [4.5896, 0.0, 0.0, 1.5498, 3.5343, 3.2065, 3.0391, 3.836, 0.0, 8.1791, 11.0409, 3.9178, 0.0, 5.0611, 4.3054, 0.338, 0.0, 3.696], [13.0524, 9.9915, 0.4128, 17.6203, 10.0724, 2.0383, 6.8376], [5.7466, 5.2937, 0.0, 17.2869, 33.0333, 5.6056, 2.4493, 3.0106, 30.6163, 13.0806, 1.1781, 4.3613], [2.1098, 3.4262, 0.0, 5.236, 0.0, 7.4615, 0.0, 15.6631, 0.0, 2.0328, 0.0, 0.0, 1.5067, 4.6799, 0.0, 2.1571, 22.2159, 4.3613, 4.6853, 0.0, 42.6556, 4.6306, 0.0, 1.0349], [17.654, 6.3721, 16.471, 0.9299, 11.9658, 1.168, 17.1853, 28.7, 29.9001], [0.0, 0.0, 3.2851, 2.38, 28.4357, 0.0, 5.537, 0.0, 0.1882, 1.7556, 3.6729, 8.4888, 4.7304, 1.3618, 0.0, 22.6498, 11.8008, 12.32, 0.117, 4.1626, 18.9757, 5.5601, 0.0, 3.4558], [3.2714, 0.4521, 1.8981, 18.1238, 9.5349, 4.9364, 9.8624, 1.0406, 6.006, 3.3867, 11.5279, 11.4696, 13.8449, 6.0519, 8.6271, 0.0, 1.1146, 2.4691, 37.3934, 18.4379, 0.8415, 4.5091], [2.8182, 3.7409, 1.7503, 1.4354, 5.3708, 3.3178, 10.867, 6.9496, 15.4591, 2.1582, 21.8109, 35.1789, 14.3774, 6.7424, 3.6403, 42.3366]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

