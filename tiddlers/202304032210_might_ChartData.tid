created: 20230403221011000
creator: Drevarr
modified: 20230705163524348
modifier: drevarr
tags: ChartData
title: 202304032210_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Black Raspberry Pie", "Zenek Tryst", "Cat Wigglebooty", "Fribble Bibble", "Koralia Danai", "Tegan Parker", "Zaylen Harker", "Viral Marketing", "Sygaldry Verdandi", "Drevarr Moonwillow", "Mac Chiato", "Johosh The Great", "Solus Sanctus", "Bella Sassy", "High Sorcer Baradun", "Tika Sumiko", "Newtype Khan", "Legacy Of Mathus", "Blancooo Padreee"];
const professions = ["Tempest", "Chronomancer", "Tempest", "Scrapper", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.8018, 9.234, 3.5636, 26.9178, 31.9176, 19.4687, 4.1059, 35.7411, 0.0, 0.0, 0.0, 6.6082, 3.4916, 24.5938, 0.0, 9.1766], [22.7493, 45.9135, 4.0841, 14.202, 22.0522, 7.4705, 15.1603, 21.2558, 5.3194, 17.446, 0.0, 0.0, 24.5199, 0.0, 5.0379, 0.0, 0.0, 1.0164], [39.6552, 2.9429, 39.1642, 38.4178, 7.5721, 6.3692, 0.0, 29.7369, 4.7242, 3.7659, 7.0663, 7.8011, 21.1702], [18.7796, 41.8095, 4.3243, 16.514, 16.4424, 21.8457, 24.0038, 19.0514, 5.0752, 7.4768, 0.3496, 24.1721, 3.5415, 0.7565, 1.0567, 4.8497], [12.2144, 0.0, 0.0, 34.8445, 47.3928, 32.8251, 47.5339, 24.7197, 6.5136, 4.945, 0.0, 0.0, 31.9976, 5.3872, 6.2101, 2.8228, 0.0, 4.9078], [39.5441, 65.664, 2.5225, 36.9914, 55.3238, 32.146, 33.9528, 48.3371, 0.2714, 0.1582, 38.9536, 0.0, 1.8456, 2.3432, 0.0, 13.039], [18.7796, 101.8305, 8.6086, 42.2758, 55.7107, 57.7269, 23.688, 21.4132, 1.737, 0.0, 23.8243, 14.1659, 1.1808, 0.0, 10.6286], [44.4299, 84.3885, 13.013, 47.23, 41.3962, 10.6399, 59.2012, 1.5198, 8.9801, 0.0, 56.1697, 12.894, 8.7453, 0.7459, 5.2562], [45.1933, 105.4215, 11.6516, 25.927, 58.6123, 50.1432, 41.6909, 56.0522, 8.8205], [46.7201, 97.2135, 15.2152, 37.6519, 35.2061, 37.9186, 39.1642, 35.4263, 10.6389, 5.9736, 0.0, 54.4307, 4.9132, 8.1549, 2.4864, 8.5958], [57.1023, 61.8165, 13.8538, 54.6613, 52.4222, 39.5033, 44.0597, 36.8433, 10.7203, 12.9757, 0.2873, 61.7345, 2.3088, 11.6719, 9.2065, 4.0093, 9.2928], [33.895, 52.0695, 3.6837, 100.0748, 112.5821, 96.5511, 14.3707, 36.2135, 0.0, 0.0, 7.4115, 0.0, 35.6495, 0.0, 0.1247, 0.0554, 1.1966, 15.8558], [63.3622, 87.723, 9.1291, 44.7529, 74.281, 37.2395, 53.6928, 64.2396, 0.7328, 3.1252, 0.8565, 62.2562, 1.2077, 2.918, 7.6752, 0.0, 9.9607], [62.2934, 111.0645, 21.3013, 62.2578, 74.6678, 62.7073, 53.0611, 82.5038, 4.6138, 8.1889, 0.0, 0.6669, 67.9949, 3.3034, 3.9156, 1.8081, 0.1399, 17.8306], [66.2631, 155.1825, 5.1251, 91.6527, 114.1296, 44.4837, 70.7482, 68.1758, 7.5992, 4.8263, 0.0, 79.6462, 0.0, 2.3444, 5.4059, 0.0, 11.8483], [55.4228, 190.323, 0.0, 80.9186, 107.1658, 13.8092, 113.7024, 35.1114, 12.5115, 24.8041, 0.0, 0.0, 90.0802, 17.6076, 11.3468, 16.1172], [154.9702, 165.4425, 4.7247, 93.4692, 157.6536, 116.0197, 65.5368, 50.2266, 10.666, 14.6768, 8.268, 0.0, 102.7749, 14.9066, 3.7161, 16.402, 0.3885, 3.9494], [152.0693, 336.528, 43.4034, 174.3878, 160.5552, 28.6371, 188.3986, 150.6797, 24.9145, 31.9249, 3.1289, 11.1218, 131.6423, 6.2515, 32.2724, 27.0293, 12.2144, 29.2723], [192.6822, 332.937, 46.5265, 213.1957, 187.0565, 39.5033, 201.1901, 163.5905, 42.8812, 47.6302, 8.9498, 0.0, 169.2047, 5.8963, 36.6119], [190.6973, 366.282, 50.9309, 171.9107, 204.4661, 130.0553, 191.7149, 175.3993, 31.5095, 28.2854, 1.8704, 6.197, 162.4226, 2.4982, 26.5611, 15.2028, 23.2478, 20.6184]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

