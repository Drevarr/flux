created: 20230408223537000
creator: Drevarr
modified: 20230705163525103
modifier: drevarr
tags: ChartData
title: 202304082235_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Xyntharos", "Yuuka Chou", "Skye Nightroad", "Sarah Dresser", "The Gun Guardian", "Grasszanine", "Zadie Miststep", "Fribble Bibble", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Vindicator", "Tempest", "Scrapper", "Tempest", "Scrapper", "Spellbreaker", "Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[64.4828, 10.9494, 61.7526, 3.9536, 10.8054, 67.0841, 135.0879, 7.9355, 7.9649, 9.9424, 5.0032, 11.934, 9.9528, 10.318, 34.4068, 8.4074, 16.5984, 8.0296, 5.6942, 12.8683, 20.9216, 18.5804, 14.8907], [89.4056, 33.7722, 75.0897, 12.1072, 11.6437, 113.5646, 220.1743, 17.845, 16.8538, 31.9438, 8.0136, 16.5438, 33.7366, 18.81, 53.3657, 16.6126, 31.1438, 4.0379, 17.2042, 23.0873, 43.7248, 25.1191, 21.8333], [0.0, 59.4317, 23.0202, 68.9149, 154.8736, 95.7828, 69.2824, 33.5403, 153.7098, 0.0, 0.0, 0.0, 221.0912, 223.6793], [20.5733, 34.8044, 102.0004, 113.0752, 31.3018, 67.0799, 71.3959, 115.697, 4.8476, 0.0, 48.2517, 259.392, 270.8736], [79.2254, 543.0826, 34.0712, 22.7674, 61.1805, 50.4348, 99.2862, 41.4586, 0.0, 148.316, 113.9844, 89.6314], [0.0, 582.1594, 51.1711, 122.8039, 112.042, 56.4876, 50.7421, 0.0, 263.6296, 73.3623, 6.9014], [107.1087, 66.7128, 16.8084, 0.0, 0.0, 108.7817, 225.8468, 0.0, 52.0951, 65.561, 0.0, 0.0, 0.0, 0.0, 65.6148, 43.6536, 50.3194, 95.7957, 10.219, 61.152, 33.9238, 49.7713, 0.0, 85.2137, 12.2774, 0.0, 0.0, 48.4785, 49.6493, 120.3741], [92.0759, 19.173, 62.8488, 23.4192, 0.0, 227.1293, 412.6168, 0.0, 23.4511, 0.0, 0.0, 24.687, 29.4294, 0.0, 46.3439, 20.1696, 52.9838, 0.0, 41.7536, 35.6717, 29.7574, 41.8866, 71.216, 0.0, 0.0, 0.0, 12.7953, 57.5526, 101.3945], [320.2382, 5.1744, 76.9167, 0.0, 0.0, 210.6955, 441.8193, 0.0, 0.0, 21.3123, 0.0, 97.812, 0.0, 0.0, 83.1693, 67.2185, 80.7206, 46.7712, 75.696, 139.0592, 11.7503], [0.0, 0.0, 0.0, 0.0, 0.0, 311.5056, 633.2113, 0.0, 0.0, 61.6234, 0.0, 73.3122, 0.0, 23.056, 115.3916, 68.5927, 64.1659, 18.9697, 0.0, 35.6402, 199.8976, 26.3815, 15.561, 21.809, 55.8914, 0.0, 40.3854, 0.0, 36.5526, 71.4004, 158.9065], [215.7998, 85.2852, 71.4357, 0.0, 68.9517, 118.9608, 667.8761, 0.0, 0.0, 85.8397, 0.0, 95.94, 94.5173, 76.428, 118.2783, 109.8616, 128.856, 20.1986, 19.8838, 131.8372, 120.6464, 69.8868, 80.582, 103.2825, 216.5669, 63.7562, 34.7424, 51.1326, 59.7618, 272.6318, 248.9005], [352.3807, 77.4312, 400.8438, 12.3312, 33.12, 585.4834, 821.0317, 68.4188, 88.2974, 114.3381, 5.4484, 94.7232, 83.7751, 33.528, 201.2916, 81.2038, 98.8478, 27.1933, 76.5208, 143.5701, 201.2416, 69.1423, 23.9161, 95.4788, 194.2104, 31.1991, 0.0, 0.0, 0.0, 27.783, 260.6755, 132.3478]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

