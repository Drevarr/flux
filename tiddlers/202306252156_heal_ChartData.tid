created: 20230625215649000
creator: Drevarr
modified: 20230705163536919
modifier: drevarr
tags: ChartData
title: 202306252156_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Pale Pam", "Tribal S", "Etchery Howls", "Elon The Mender", "Artakama Nahid", "Tegan Parker", "Drevarr Moonwillow", "Demon Staph"];
const professions = ["Firebrand", "Druid", "Druid", "Druid", "Druid", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[109.8113, 67.2754, 116.2356, 0.0, 475.3863, 125.0612, 166.1113, 271.8509, 74.425, 414.3372, 271.2453, 677.2762, 72.1786, 1289.122, 1686.0238, 53.6552, 434.0222, 401.5301, 475.0287, 1100.8636, 213.77], [583.0171, 140.1579, 105.725, 1275.1977, 1630.3585, 1181.7619, 89.5357, 7098.0244, 4232.0, 343.5517, 307.4, 1489.2892, 308.3391], [31.2632, 69.6, 1017.5, 1065.9811, 2157.1429, 63.3571, 2273.9024, 1163.0952, 0.18, 300.931, 1395.8889, 1752.6265, 1279.7931, 2186.75, 582.372], [202.7107, 5.3605, 413.3105, 1193.9298, 310.8375, 2179.1395, 1231.8868, 1155.9714, 16.2857, 4579.5122, 1680.8571, 94.6897, 3464.4, 769.3855, 957.523, 393.1818, 883.136], [119.3962, 116.4012, 251.5192, 942.6709, 1364.8569, 349.0272, 274.7923, 794.9298, 323.425, 576.4651, 650.6887, 1267.3143, 6.6071, 2204.1707, 407.3333, 177.4828, 1502.6444, 1204.2892, 454.2816, 1190.3182, 386.01], [192.6604, 64.3293, 122.4952, 388.9241, 1221.9873, 569.5986, 331.3854, 731.614, 102.875, 1065.7791, 885.5283, 2212.5905, 132.1071, 3375.3659, 36.381, 59.3793, 1742.4889, 2198.4819, 613.592, 1269.7045, 512.806], [0.0, 89.1018, 140.3269, 1094.3418, 1202.9332, 421.5578, 248.0086, 741.2281, 7.7125, 950.8372, 1022.5943, 1892.8095, 163.1071, 2912.0, 2801.5, 5.4138, 1689.9111, 1778.7711, 907.9023, 1138.4091, 542.064], [364.1698, 277.2036, 202.1154, 2158.519, 2298.3879, 988.0, 530.4475, 1459.1404, 205.9, 887.5349, 1291.5, 2839.1429, 618.8214, 2754.7805, 2130.8333, 89.18, 108.2414, 1546.8444, 2712.5663, 1420.8448, 3314.7955, 604.582], [485.4528, 125.7066, 569.2837, 1539.2911, 3125.7679, 1112.7551, 773.5268, 2204.0088, 79.825, 1404.186, 2071.6698, 5217.5143, 61.8571, 6138.878, 2081.8571, 116.7241, 1402.1778, 3003.2048, 1388.0805, 673.0, 804.036]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

