created: 20230520220730000
creator: Drevarr
modified: 20230705163530881
modifier: drevarr
tags: ChartData
title: 202305202207_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Kary\u00edna", "Primal Clone", "Grasszanine", "Saurlex Varok", "Drevarr Moonwillow", "Newtype Khan", "Be\u00eb", "Demon Maddx", "Smol Gluvs", "Tootsie Pop Rocks", "Lucky Leipreach\u00e1n", "My Birthday Girl"];
const professions = ["Vindicator", "Chronomancer", "Spellbreaker", "Untamed", "Scrapper", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[10290, 0, 0, 0, 0, 0, 0, 4360, 924, 0, 0, 0, 3744, 1248, 0, 1247, 0, 0, 389, 0, 11324, 0, 0, 4840, 0, 447, 2688, 0, 0, 0, 0, 695], [8889, 0, 1837, 728, 0, 0, 0, 778, 0, 0, 0, 0, 16948, 0, 0, 1116, 0, 0, 7822, 297, 5122, 0, 0, 3955, 0, 0, 0, 2573, 0, 0, 0, 0, 4363], [12036, 1469, 1197, 48, 0, 0, 3334, 0, 0, 611, 0, 19525, 0, 0, 3154, 0, 5445, 0, 8847, 0, 0, 2147, 0, 0, 0, 1259, 1672, 0, 0, 0, 5110], [22918, 1576, 0, 5687, 0, 3980, 4105, 0, 6675, 0, 0, 7547, 5349, 0, 3879, 0, 0, 0, 269, 5342], [15011, 588, 1963, 0, 0, 1, 128, 3730, 66, 496, 3849, 0, 11052, 50, 0, 4455, 0, 102, 3321, 2067, 3886, 0, 429, 9303, 0, 1572, 1064, 2508, 767, 77, 0, 288, 3660], [11075, 0, 1433, 597, 12, 0, 0, 197, 0, 0, 1181, 0, 17016, 690, 1271, 1652, 0, 0, 1469, 0, 16267, 0, 0, 10386, 2528, 806, 4858, 515, 0, 0, 0, 5208], [6639, 1248, 0, 1535, 0, 302, 0, 785, 0, 1248, 2475, 0, 15995, 870, 0, 3467, 0, 0, 4110, 634, 12036, 0, 1250, 12929, 5624, 1950, 5850, 3474, 2496, 0, 436, 3460], [15738, 0, 2473, 0, 0, 0, 0, 9542, 0, 868, 5975, 0, 15679, 1363, 0, 2491, 0, 0, 4043, 0, 11757, 0, 0, 6100, 0, 242, 0, 8300, 0, 0, 0, 0, 7982], [21462, 1253, 0, 0, 20, 870, 0, 3715, 0, 0, 5864, 0, 20088, 5970, 0, 4687, 0, 0, 10211, 1360, 8442, 0, 903, 9429, 1479, 0, 6113, 1375, 0, 0, 689, 1863], [36981, 5329, 0, 1058, 0, 2525, 560, 4925, 0, 1337, 27916, 0, 31805, 8726, 252, 16281, 0, 0, 13701, 8334, 23985, 0, 2576, 29721, 106, 369, 15113, 3661, 169], [56772, 0, 2938, 2553, 401, 2666, 1491, 1332, 601, 3925, 18665, 4, 56604, 7544, 2822, 14133, 0, 594, 38788, 2831, 48113, 0, 2388, 29223, 0, 10015, 0, 27744, 14076, 228, 330, 492, 12486], [46120, 8286, 4641, 2151, 29, 1453, 0, 12648, 2157, 2550, 24740, 0, 90291, 23716, 0, 14273, 0, 0, 34430, 6841, 44055, 0, 483, 35022, 10166, 4937, 11690, 9167, 0, 0, 0, 19778]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

