created: 20230607222341000
creator: Drevarr
modified: 20230705163534228
modifier: drevarr
tags: ChartData
title: 202306072223_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Johosh The Great", "Etcherii", "Artakama Nahid", "Skye Nightroad", "Drevarr Moonwillow", "Kary\u00edna", "Rafaellagabriela", "Mistwalker Cael", "Wh\u00f4o", "Chrozz", "Eibh\u00ebar", "Sub Train", "Venomina The Siren", "Ria Zerria", "Smol Gluvs", "Lord Erin The Wise", "Demon Sekhmet", "Permanent Dawn", "Solus Sanctus", "Be\u00eb", "Sister Elonith", "Xanvias Einzbern"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Scrapper", "Vindicator", "Firebrand", "Vindicator", "Scourge", "Willbender", "Chronomancer", "Firebrand", "Tempest", "Scourge", "Reaper", "Weaver", "Berserker", "Weaver", "Firebrand", "Reaper", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2878, 7.01, 15.8627, 2.9595, 2.7118, 3.6712, 6.65, 0.0, 0.0, 6.956, 3.8649, 0.0, 1.65, 7.3053], [0.0, 5.53, 14.7183, 0.1419, 12.8428, 5.7397, 0.0, 3.4259, 0.0, 13.2198, 1.3243, 27.6154, 7.625, 10.6183], [0.0, 8.15, 14.1738, 1.5608, 6.2445, 33.0137, 52.9, 13.6111, 0.0, 32.3297, 0.0, 7.0256, 0.0], [0.0, 0.0, 15.4888, 0.0, 18.2533, 0.0, 0.0, 4.5926, 0.0, 6.8901, 0.0, 9.6154, 15.0375, 9.542], [0.2732, 9.68, 12.9653, 55.4498], [0.1854, 9.39, 14.692, 0.3919, 15.9913, 28.5616, 0.0, 12.7222, 6.2963, 17.4835, 0.0, 0.0, 0.0, 12.0687], [0.5561, 24.39, 13.7604, 0.0, 10.2664, 32.5479, 7.85, 25.0741, 29.3333, 0.4945, 0.0, 12.641, 0.0, 24.0611], [15.0667, 0.0, 36.0742, 23.0411, 4.85, 0.0, 0.0, 2.5714, 0.0, 14.641, 0.0, 2.4275], [0.0, 2.39, 15.0281, 0.0, 24.5022, 54.8493, 0.9074, 0.0, 4.5165, 0.0, 1.7436, 1.225, 19.7557], [132.1481, 31.967, 51.7297, 223.5128, 84.825, 195.6794], [2.1561, 1.14, 14.6191, 0.2703, 18.559, 27.5479, 10.0, 101.1852, 3.6667, 34.7033, 0.0, 62.4103, 4.1125, 39.9237], [0.2537, 4.6, 15.007, 1.0203, 37.1616, 19.7671, 4.2, 31.4259, 0.0, 25.011, 1.4324, 104.7436, 25.25, 30.6489], [19.8144, 0.0, 27.7293, 14.7123, 129.55, 21.963, 0.0, 14.3956, 4.973, 35.6154, 1.0, 10.0305], [15.15, 23.326, 12.8176, 15.2009, 19.137, 0.0, 20.7037, 4.037, 17.956, 6.1622, 7.1795, 12.875, 7.1985], [0.0, 1.63, 9.9105, 2.3851, 219.3843], [0.0, 0.66, 19.7933, 1.1081, 36.559, 48.6301, 22.15, 33.7037, 25.963, 24.967, 3.973, 61.7179, 8.175, 61.9237], [0.7317, 1.89, 26.8846, 58.6463, 14.9452, 47.5, 82.7593, 6.5556, 85.3736, 21.5676], [15.0, 17.0, 39.6358], [0.0, 0.0, 38.5331, 0.0, 54.5983, 95.1233, 0.0, 94.2222, 0.0, 13.2088, 0.0, 0.0, 0.0, 54.8092], [0.2976, 4.83, 51.1953, 1.2905, 10.5764, 21.4384, 0.0, 13.0556, 0.0, 6.9451, 0.0, 45.6923, 49.2125, 5.1374], [3.3171, 24.49, 41.5695, 9.7027, 70.4847, 68.1233, 0.0, 51.0185, 23.6667, 68.2527, 0.0, 128.4872, 11.825, 53.4656], [4.639, 12.96, 80.5621, 33.4054, 31.5895, 154.9178, 41.037, 0.0, 138.1429, 84.6667, 55.3375, 55.2595], [0.0, 3.28, 129.814, 22.1959, 220.4847, 270.3151, 0.0, 73.7778, 0.0, 95.4835, 0.0, 65.8974, 20.225, 42.9847]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

