created: 20230513000456000
creator: Drevarr
modified: 20230705163529755
modifier: drevarr
tags: ChartData
title: 202305130004_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Fiery", "Solus Sanctus", "Johosh The Great", "Arriasa", "Mac Aaroni", "Tegan Parker", "Artakama Nahid", "Zaidy Sagemist", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Druid", "Tempest", "Tempest", "Tempest", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[15.4861, 83.3452, 278.1731, 218.1201, 203.7442, 68.2881, 5.7037, 7.4839, 536.1917, 20.0238, 36.2903, 0.0, 469.2344, 98.5217, 34.8551, 449.584, 102.506, 4.0222, 536.8759, 31.1522, 119.7556, 394.551, 0.0, 75.5351, 32.9138, 0.0, 78.9194], [59.2222, 376.3631, 247.9522, 304.5142, 321.4651, 157.3729, 28.4444, 52.2258, 864.875, 218.619, 157.7419, 33.7391, 448.9453, 23.4783, 229.913, 492.336, 217.8571, 4.7111, 315.2044, 166.7065, 538.7653, 69.5455, 422.0088, 100.7931, 23.8571, 207.3065], [31.4722, 379.9464, 547.1642, 500.2762, 143.7984, 107.3107, 60.4815, 608.8083, 0.0, 643.9844, 7.9565, 108.7971, 748.704, 173.4405, 114.7111, 168.1095, 84.0326, 14.9556, 534.949, 54.6818, 747.8158, 2.4524, 103.6452], [320.7742, 3851.6167, 163.5161, 166.2174, 2078.0703, 131.913, 138.4928, 2312.424, 792.1905, 18.2889, 5077.5912, 202.75, 30.4444, 2161.5306, 796.1818, 2054.8947, 231.0476, 80.8065], [21.6389, 52.6488, 884.409, 456.5841, 863.0465, 497.0226, 11.8519, 4.7742, 2642.1167, 261.2857, 0.0, 1433.5703, 690.5652, 0.0, 2202.36, 444.881, 1753.0219, 0.0, 134.6196, 456.2222, 1099.0306, 33.8636, 1436.4386, 338.5238, 659.5484], [205.9861, 197.4702, 1727.1731, 1122.0721, 958.6822, 453.5198, 9.7778, 4.7097, 2384.95, 3.0323, 1590.0625, 676.4348, 33.5507, 1764.328, 698.869, 4.1556, 1628.0803, 157.9348, 1512.5816, 926.2273, 1427.2368, 280.2419], [237.8889, 647.25, 1526.4687, 1127.2566, 712.0233, 616.2486, 31.9259, 36.9355, 2215.1333, 212.5238, 34.3226, 0.0, 1498.7188, 439.2609, 38.4493, 1901.512, 658.8512, 363.0667, 1153.1679, 379.8478, 418.5111, 1670.1224, 184.5455, 1708.4737, 37.8966, 27.9286, 271.4839], [159.917, 1981.1628, 1213.4859, 255.6296, 156.5161, 6603.9333, 242.2381, 308.5161, 256.5217, 4879.1641, 187.7826, 14.6522, 4733.48, 1699.3988, 647.7556, 3464.9416, 663.8478, 3070.7755, 373.8636, 4017.3684, 0.0, 228.3065], [291.6806, 1530.3512, 2423.4776, 1799.0906, 842.093, 533.1695, 306.4444, 175.3226, 4677.7833, 972.5238, 63.2581, 326.913, 2873.1875, 997.7826, 329.1884, 1946.672, 885.8214, 120.5333, 4082.6642, 0.0, 343.3804, 60.0, 2076.0, 797.3636, 2342.9737, 102.3276, 14.5238, 551.5645]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

