created: 20230401223327000
creator: Drevarr
modified: 20230705163524174
modifier: drevarr
tags: ChartData
title: 202304012233_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Macette", "Aronorf Xideliesi", "Astraea Lumena", "Zadie Miststep", "Svess", "Miphest\u00f6", "Koralia Danai", "Gabe Malhorn", "High Sorcer Baradun", "Sygaldry Verdandi", "Drevarr Moonwillow", "Johosh The Great", "Bella Sassy", "Newtype Khan", "Venomina The Fierce"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Tempest", "Druid", "Catalyst", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12.4925, 20.4877, 10.9771, 17.9319, 0.0, 3.1372, 0.0, 0.0, 0.0, 5.6753, 0.0, 1.0465, 0.0, 6.8947, 13.352, 0.0, 0.0, 6.3168, 0.0, 10.9892, 0.0, 40.201, 12.1594, 0.0, 4.4934, 1.5892, 0.0, 10.9344, 19.1077, 3.2368], [1.6442, 10.5735, 0.0, 11.6844, 0.0957, 9.0801, 6.0562, 7.5103, 0.8845, 7.8581, 6.5238, 17.9424, 4.7196, 17.5644, 13.6177, 82.9434, 2.9702, 1.8252, 4.76, 0.0, 1.9206, 0.9955, 4.5876, 7.3984], [22.8413, 40.0256, 9.5542, 30.1904, 1.7313, 22.1149, 1.6177, 5.7855, 1.023, 2.3786, 6.5267, 2.524, 8.9866, 5.6225, 2.5272, 4.107, 7.9158, 14.1792, 3.9083, 7.2352, 36.0422, 5.2907, 0.0, 1.2566, 11.3193, 6.6132, 1.8442, 7.839], [27.6461, 50.0659, 27.951, 18.5397, 0.0, 5.4002, 0.0, 2.9526, 0.0, 6.7185, 0.0, 0.0, 9.9959, 10.9577, 32.643, 0.0, 2.4464, 17.6064, 0.0, 0.0, 9.535, 40.8941, 1.0829, 0.1333, 0.3903, 0.0, 5.8589, 1.1135, 0.0], [27.888, 10.8972, 22.0704, 8.7856, 105.3542, 15.2844, 14.4144, 17.7262, 7.3882, 0.0495, 18.1478, 31.9797, 28.033], [23.5805, 109.4148, 0.0, 0.0, 0.0, 0.3354, 44.5259, 6.6177, 0.0, 0.0, 0.0958, 9.9456, 0.8424, 40.1405, 0.0, 88.0262, 21.2248], [41.543, 64.041, 24.4952, 45.2856, 0.0, 22.012, 0.0, 8.6982, 0.0, 10.349, 4.8041, 5.9098, 13.7403, 10.6704, 14.3208, 7.8307, 0.3093, 21.7056, 0.0, 5.3797, 11.3954, 36.9664, 0.0, 4.1418, 1.8278, 1.5473, 3.6333, 0.7181, 13.362, 5.1731], [33.5597, 46.8096, 31.1018, 27.6576, 0.3359, 16.2005, 1.8829, 7.6608, 0.0, 8.1791, 2.737, 0.0, 5.1119, 7.223, 24.5981, 4.3808, 5.0475, 29.568, 4.9788, 0.5058, 11.783, 75.088, 5.4764, 1.8603, 5.3312, 5.3808, 3.0096, 9.2371, 21.7355, 7.3695], [0.0, 13.8394, 39.8429, 62.2043, 0.0, 0.0, 27.8103, 0.0, 12.3521, 0.3078, 0.0, 41.9018, 17.3956, 7.7075, 5.2584, 59.7408, 0.2052, 11.3571, 0.0, 54.9875, 10.2102, 0.0, 0.2094, 1.854, 0.0, 19.0781, 32.247, 25.6343], [42.1344, 46.5382, 11.4853, 38.1939, 5.8269, 16.5605, 7.9295, 6.2643, 1.1068, 12.1434, 0.7465, 3.1088, 8.1074, 13.5432, 3.5802, 2.0535, 4.4008, 19.152, 6.6312, 9.288, 14.7805, 97.4989, 14.7274, 3.2877, 11.4621, 10.4689, 5.4153, 2.2195, 14.52, 15.6638], [21.215, 60.9203, 8.1312, 50.0471, 6.783, 22.6292, 17.4236, 19.0722, 7.0434, 16.9007, 7.7326, 9.0493, 12.1449, 18.7553, 4.1278, 3.2308, 6.0458, 20.6976, 17.1505, 7.9329, 97.961, 18.8734, 5.9904, 11.0622, 5.6457, 2.4156, 9.1882, 10.556, 9.3636], [62.3146, 100.8102, 32.2199, 38.3965, 4.6254, 11.2117, 5.5692, 13.4862, 0.0, 15.148, 5.9143, 10.0651, 12.5682, 14.405, 21.1442, 8.6521, 6.1161, 23.9232, 9.7018, 14.7546, 101.8886, 6.4665, 5.3235, 3.3701, 8.0016, 4.8906, 0.0163, 9.8879, 11.0976], [57.0662, 115.735, 43.7052, 71.2209, 3.3334, 15.8404, 7.0808, 10.8129, 3.8739, 4.1313, 6.9861, 10.496, 12.2751, 7.5103, 27.2095, 5.3802, 9.0687, 23.7888, 7.5168, 10.9432, 14.8322, 125.2237, 5.693, 6.0255, 0.0, 8.4755, 7.7517, 8.927, 26.8131, 5.0286], [90.9216, 230.3846, 68.4037, 136.4646, 13.4497, 57.3959, 41.9016, 31.0422, 14.8247, 48.532, 0.8311, 45.8119, 70.1374, 19.5437, 21.151, 22.2992, 77.3472, 10.0548, 46.8076, 15.2456, 306.128], [111.0278, 259.8272, 72.7742, 199.4794, 18.2043, 64.0303, 43.4132, 36.1893, 19.3358, 55.9599, 9.4495, 36.7602, 88.8926, 29.821, 18.5499, 24.9987, 118.5408, 3.672, 75.4072, 27.2095, 397.8509, 43.5635, 21.6099, 44.0014, 23.7816, 42.3667, 48.994, 51.9044]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

