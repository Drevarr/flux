created: 20230320222849000
creator: Drevarr
modified: 20230705163522596
modifier: drevarr
tags: ChartData
title: 202303202228_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Primal Clone", "Venomina The Siren", "High Sorcer Baradun", "Eibh\u00ebar", "Avanda Corone", "Zadie Miststep", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24.3712, 33.1452, 21.6432, 21.546, 30.3618, 41.1232, 13.5817, 121.7268, 7.6506, 17.9894, 2.7503, 4.3848, 33.961, 154.2737, 0.0, 43.47, 80.4195, 30.6176, 22.7818, 122.2646, 27.864, 36.969, 0.0, 0.0, 15.9914], [52.3219, 0.0, 0.0, 28.0155, 0.0, 12.8018, 0.0, 236.2932, 15.4207, 13.2022, 0.0, 0.0, 18.5856, 146.6995, 101.9822, 84.7665, 17.1051, 72.5696, 0.0, 96.3922, 49.0716, 32.414, 9.3157, 0.0], [15.0282, 52.4448, 100.833, 110.5216, 65.1904, 38.4169, 623.7972, 60.6068, 75.4732, 0.0, 34.0049, 100.9254, 386.8137, 32.6628, 66.2918, 163.8175, 151.6896, 76.8544, 399.9931, 109.0179, 22.0838, 59.2548, 28.4931], [1181.8872, 0.0, 92.4528, 0.0, 52.9654, 214.185, 505.4755, 115.6975, 57.4088, 215.7285, 114.7424, 80.4913, 533.4768, 25.0002, 83.0481, 123.5802, 107.2302], [78.2208, 114.3705, 70.9135, 102.6503, 147.9247, 954.4392, 263.8248, 64.0288, 74.3917, 44.105, 113.0906, 348.1456, 125.6357, 17.199, 106.1197, 126.7392, 12.4202, 540.1166, 57.7791, 48.682, 31.9027, 136.6693, 49.7358], [73.4563, 44.0867, 88.7328, 53.238, 65.4412, 67.7902, 121.7701, 1276.236, 375.4751, 45.4036, 33.3555, 54.3564, 187.6019, 415.9144, 64.1491, 171.801, 114.7999, 132.7376, 81.0745, 426.5525, 121.7502, 60.761, 25.9706, 50.116, 136.096], [234.0492, 202.3133, 59.0436, 319.2218, 971.4857, 286.0085, 152.0505, 338.9533, 282.3296, 132.7111, 982.0094, 153.8712, 89.962, 320.2118, 114.921], [121.0182, 64.9123, 77.3424, 186.7605, 53.9116, 81.5767, 148.2351, 1540.3284, 451.2635, 64.2158, 60.8919, 82.9483, 138.9978, 598.2258, 88.0193, 77.679, 397.6723, 161.2944, 44.1913, 581.5584, 86.2623, 44.0049, 87.6333, 172.1632, 54.8178], [150.7206, 102.2749, 142.6176, 194.1705, 123.3154, 99.6567, 140.3965, 1800.63, 416.5969, 61.336, 94.6331, 43.5456, 41.7331, 593.0434, 33.4058, 23.1525, 274.2773, 152.6464, 146.6066, 737.7091, 93.4992, 55.1892, 35.1366, 143.8624, 68.4037]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

