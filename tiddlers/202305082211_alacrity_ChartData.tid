created: 20230508221143000
creator: Drevarr
modified: 20230705163529054
modifier: drevarr
tags: ChartData
title: 202305082211_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Drevarr Moonwillow", "Tika Rucola", "Primal Clone", "Tegan Parker", "High Sorcer Baradun", "Osh Kosh Johosh", "Artakama Nahid", "Eibh\u00ebar", "Mac Aaroni", "Miphest\u00f6"];
const professions = ["Chronomancer", "Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 62.3007, 141.6561, 81.2224, 26.4522, 34.3791, 0.0, 118.8346, 53.6864, 30.2938, 47.6977, 38.6316, 0.0, 102.8597, 33.642, 35.7632], [24.2077, 4.9679, 200.5178, 7.7939, 0.0, 28.3636, 410.3347, 11.2471, 29.3664, 17.0396, 16.6404, 0.0, 48.3483, 51.282, 25.5904], [30.8085, 8.0849, 32.7594, 31.9217, 151.1661, 275.9386, 116.5548, 32.697, 81.9727, 59.4173, 20.6606, 37.5194, 86.777, 136.3572, 34.1569, 260.6558, 80.703, 138.6528], [33.8245, 104.7028, 0.0, 0.0, 126.7524, 548.2512, 188.7078, 40.4834, 1108.6147, 49.4603, 93.5861, 164.2118, 219.912, 0.0, 205.9319, 126.567, 71.3152], [7.5238, 109.2327, 319.7908, 796.2696, 204.4138, 6.0858, 69.8025, 1508.7926, 79.3333, 46.6771, 13.6185, 76.8516, 41.2095, 186.8051, 219.87, 58.4672], [43.2292, 115.7121, 0.0, 234.6268, 1183.5264, 214.4514, 0.0, 138.0461, 1025.329, 54.7529, 9.3422, 106.6632, 85.3016, 151.633, 273.924, 138.4064], [60.936, 154.1299, 0.0, 0.0, 485.5767, 920.2788, 270.8985, 28.4256, 59.2416, 1238.6218, 18.4023, 83.076, 169.3435, 105.9576, 0.0, 372.7601, 245.889, 44.7392], [82.4046, 159.7492, 20.0361, 396.0126, 595.3892, 375.5262, 42.525, 137.1408, 1877.9923, 75.2861, 110.9354, 123.0931, 142.4724, 0.0, 262.0372, 133.749, 74.4832], [30.6464, 189.222, 0.0, 0.0, 186.935, 954.7258, 217.758, 42.3549, 152.1273, 1555.5139, 66.208, 131.917, 184.212, 270.9504, 0.0, 399.4313, 141.309, 118.976], [78.5779, 210.6098, 0.0, 0.0, 530.004, 935.508, 373.1644, 31.4685, 81.3189, 2106.0125, 120.744, 128.8644, 64.4742, 44.5116, 44.6904, 369.2535, 276.822, 183.1808], [134.6169, 150.4028, 32.2955, 44.0014, 1758.9726, 540.616, 44.4906, 143.4774, 3142.0061, 116.0931, 90.3017, 133.4221, 195.804, 50.6915, 396.031, 338.247, 78.6368]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

