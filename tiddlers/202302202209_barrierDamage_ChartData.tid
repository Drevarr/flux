created: 20230220220953000
creator: Drevarr
modified: 20230705163519669
modifier: drevarr
tags: ChartData
title: 202302202209_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Tseli", "Rina Of Theros", "Rozaalyna", "Fribble Bibble", "Ch\u00e4\u00ef\u00ef", "Drevarr Moonwillow", "Newtype Khan", "Be\u00eb", "Dark Sidiuz", "Aveliad Frostmoon", "Tootsie Pop Bringer", "Skye Nightroad", "My Birthday Girl"];
const professions = ["Berserker", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper", "Spellbreaker", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 4077, 41863, 214, 254, 0, 0, 0, 0, 85, 856, 0, 0, 0, 0, 0, 0, 0, 0, 3448, 0, 0, 0, 0, 1424, 0, 0, 322], [0, 7177, 19529, 158, 714, 3127, 2926, 0, 4777, 1371, 3320, 0, 1780, 0, 0, 367, 7, 928, 3144, 0, 0, 0, 0, 3592, 0, 0, 0, 5956], [14779, 47578, 0, 0, 0, 0, 0, 2094, 349], [0, 14998, 28929, 0, 8, 0, 107, 0, 167, 9, 2144, 6850, 857, 705, 0, 373, 1144, 99, 8791, 0, 875, 2719, 29, 113, 468, 65, 0, 0], [2906, 2632, 27075, 1800, 6839, 7275, 3303, 3264, 16797], [634, 20312, 41697, 1094, 294, 0, 103, 221, 769, 325, 437, 398, 1036, 209, 0, 83, 1962, 182, 1209, 122, 212, 2977, 85, 2623, 138, 19, 0, 2994], [0, 17583, 59041, 0, 1553, 0, 0, 0, 249, 0, 0, 0, 3600, 1203, 1747, 0, 888, 2, 0, 0, 0, 4294, 1912, 3412, 2340, 0, 1072, 3484], [35629, 76570, 0, 1053, 0, 0, 0, 1422, 0, 476, 752, 2907, 3806, 0, 0, 264, 1584, 0, 877, 0, 3564, 0, 390, 0, 0, 2026, 2058], [0, 34801, 74857, 0, 0, 0, 1258, 2690, 0, 722, 3831, 3940, 0, 0, 0, 0, 1258, 3397, 2215, 0, 1363, 0, 2386, 3569, 5316, 0], [2700, 31883, 114056, 2517, 124, 0, 0], [23888, 115448, 1096, 165, 0, 7144, 9466, 5603, 4259, 912, 8611, 0, 0, 9966, 1534, 2118, 5126, 0, 760, 7078, 887, 10578, 4040, 79, 1456, 4725], [0, 34269, 228841, 5643, 761, 1229, 0, 0], [2328, 79667, 213183, 385, 11146, 0, 2843, 0, 15642, 9747, 413, 7768, 15912, 9701, 8147, 16886, 11217, 242, 0, 3246, 0, 39114, 2037, 4346, 8600, 1959, 1599, 24247]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

