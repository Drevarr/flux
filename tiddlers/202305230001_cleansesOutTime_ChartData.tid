created: 20230523000132000
creator: Drevarr
modified: 20230705163531151
modifier: drevarr
tags: ChartData
title: 202305230001_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Crusader Siolith", "Bamm\u00edt", "Blanco Padre Guard", "Need Ragee", "Venomina The Fierce", "Sygaldry Verdandi", "Zefirokai", "Grasszanine", "Gavann", "Miphest\u00f6", "Primal Clone", "Black Raspberry Pie", "Cat Wigglebooty", "Fribble Bibble", "Tribal S", "Elonith Primal", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Berserker", "Firebrand", "Druid", "Spellbreaker", "Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Tempest", "Chronomancer", "Chronomancer", "Scrapper", "Scrapper", "Druid", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9905, 0.9952, 2.9963, 26.0626, 0.0, 0.0, 0.0, 37.3361, 0.0, 0.0, 42.2121], [0.0, 25.0224, 0.0, 0.0, 1.9914, 86.2259, 0.0, 0.0], [0.9905, 0.0, 3.9926, 39.2752, 0.0, 0.0, 0.0, 57.1353, 0.0, 0.0, 31.6621], [43.9952, 0.0, 178.2013], [10.9714, 0.0, 3.9952, 0.9963, 41.085, 0.0, 38.0474, 0.0, 71.1121], [2.9905, 13.9904, 3.9926, 51.1655, 6.0, 0.0, 0.0, 54.1395, 0.0, 0.0, 61.7655], [189.5931], [6.981, 0.0, 1.9952, 0.0, 60.1141, 2.0, 0.0, 0.0, 83.0948, 0.0, 63.0845], [0.0, 27.9663, 0.9963, 41.0626, 0.0, 0.0, 95.3961, 0.0, 0.0, 89.2362], [0.0, 1.0, 4.9904, 66.5794, 0.0, 0.0, 0.0, 107.7308, 0.0, 0.0, 162.6431], [8.0476, 0.0, 4.9904, 0.0, 85.2461, 7.0, 5.0, 0.0, 144.8828, 0.0, 0.0, 137.0586], [20.7238, 0.0, 17.0, 4.9926, 77.6779, 0.0, 0.0, 0.0, 158.7378, 3.1818, 0.0, 125.5397], [11.9714, 0.0, 23.9712, 1.9963, 141.1298, 17.0, 7.0, 2.9914, 194.1395, 0.0, 0.0, 201.1448], [41.619, 0.0, 42.9856, 0.9963, 173.1119, 0.0, 7.0, 2.9914, 208.3529, 0.0, 257.0224], [346.8494, 1.9697, 7.0244, 333.7948], [81.0667, 74.2981, 14.9926, 258.9396, 31.2742, 16.0, 7.9828, 301.0893, 0.9697, 6.0183, 330.231], [55.5048, 0.0, 79.4375, 11.0074, 264.1342, 22.0645, 4.0, 23.9655, 342.8717, 0.0, 6.0, 339.2103], [93.9619, 0.0, 110.5048, 21.1815, 278.4653, 44.7742, 16.06, 24.0517, 351.0586, 4.1463, 328.2569]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

