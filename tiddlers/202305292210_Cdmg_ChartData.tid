created: 20230529221000000
creator: Drevarr
modified: 20230705163532143
modifier: drevarr
tags: ChartData
title: 202305292210_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Legacy Of Mathus", "Drevarr Moonwillow", "Grilo Gringo", "Miphest\u00f6", "Jeckyll Mbs", "Solus Sanctus", "Johosh Of The North", "Sygaldry Verdandi", "Tika Fiery", "\u00c4big\u00e4il", "Lucas Ryn", "Fluffy Mccutestuff", "Sister Elonith", "Riann Swordbreak", "Lord Erin The Wise", "Tuandha Lan", "Rozaalyna", "Rx Medic", "Smol Gluvs", "Xanvias Einzbern"];
const professions = ["Berserker", "Scrapper", "Dragonhunter", "Tempest", "Berserker", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Reaper", "Firebrand", "Harbinger", "Berserker", "Berserker", "Weaver", "Renegade", "Scourge", "Firebrand", "Scourge", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 27.7157, 0.0, 0.0, 14.8889, 7.1207, 75.1284, 73.2923, 31.7069], [0.0, 15.1765, 0.7391, 0.0, 28.5062, 15.6724, 37.1468, 36.9308, 7.0517, 14.0484, 12.4773, 0.3089, 26.212, 12.3, 14.094], [77.1494, 75.2593, 63.5, 21.1382, 21.9634, 0.0, 0.0], [0.0, 14.0658, 0.0, 0.0, 21.6852, 9.1724, 44.9633, 72.9769, 46.8678, 30.6353, 0.0, 4.3089, 26.1492, 7.7, 8.264], [0.6267, 20.7437, 0.0, 0.0, 19.9506, 16.9655, 6.0, 2.2231, 0.2011, 26.604, 0.0, 5.6585, 75.0079, 13.1571, 10.61], [0.1733, 25.8838, 0.0, 5.25, 19.8827, 16.3448, 128.5688, 19.7923, 22.069, 8.208, 88.4091, 0.0569, 25.1597, 68.3286, 6.388], [0.0, 31.7745, 0.0, 0.0, 32.9074, 6.4828, 17.4495, 55.6231, 8.3621, 26.5897, 5.5909, 0.3496, 27.3508, 39.3286, 13.338], [0.0, 22.0546, 4.1739, 0.0, 14.3395, 0.0, 60.0092, 9.5385, 7.523, 50.2479, 10.6136, 0.0, 22.6387, 17.6429, 28.518], [0.0, 33.535, 7.3913, 0.0, 20.9506, 1.8966, 32.1927, 54.7692, 7.9195, 29.4615, 0.0, 0.0, 34.0471, 23.6571, 28.758], [0.0, 21.5994, 28.3261, 0.0, 40.1975, 110.1552, 92.6422, 235.3846, 35.2529, 15.9288, 0.0], [0.0, 27.7003, 0.0, 0.0, 21.8765, 65.1207, 39.3119, 47.8385, 30.069, 49.7009, 15.6818, 4.3577, 19.2592, 24.7286, 27.894], [50.8, 176.758], [27.069, 69.4074, 19.6591, 3.6016, 96.5471, 10.0143, 69.76], [12.5455, 1.2439, 154.9529, 18.5571, 100.878], [0.0, 51.3235, 27.1087, 30.7222, 52.5247, 2.6552, 18.9541, 88.0154, 9.7126, 44.6809, 0.0, 2.4797, 66.4843, 18.2, 27.986], [62.1739, 10.6667, 107.4815, 5.5345, 140.2844, 266.1846, 74.0287, 96.3162, 50.7727, 13.9268, 0.0], [0.0, 109.3711, 20.6522, 13.8611, 55.6975, 0.2759, 24.789, 175.0538, 11.7414, 153.4843, 61.4545, 5.2033, 156.6126, 23.8857, 63.81], [4.6267, 86.0714, 37.0435, 9.0833, 208.3395, 141.1034, 390.9541, 8.7615, 239.364], [0.0, 123.8754, 3.2391, 5.6111, 101.8519, 14.3103, 166.7615, 237.7692, 75.4368, 133.0484, 19.8636, 31.4878, 153.0288, 124.3429, 102.03], [0.0, 100.3025, 8.1304, 0.3333, 68.0309, 0.0, 158.8349, 292.1308, 104.6437, 241.2507, 0.0, 39.8049, 278.2147, 40.2429, 127.644]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

