created: 20230520220730000
creator: Drevarr
modified: 20230705163531051
modifier: drevarr
tags: ChartData
title: 202305202207_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Sygaldry Verdandi", "Black Raspberry Pie", "Ryvalia Fazebringer", "La Morte Vivante", "Sub Train", "Gabe Malhorn", "Crusader Siolith", "Koralia Danai", "Cerys Fireblade", "Blanco Padre Guard", "Aronorf Xideliesi", "Xanvias Einzbern", "Grasszanine", "Newtype Khan"];
const professions = ["Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Berserker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[77.5548, 13.5551, 7.8439, 11.7705, 0.0, 7.931, 3.4496, 13.5691, 4.8921, 20.3743, 54.2264, 0.0, 82.5696, 13.4815, 6.8037, 32.7402, 0.0, 6.7267, 71.5098, 5.5386, 122.511, 6.7987, 6.8244, 68.6783, 5.473, 20.2617, 5.0809, 37.8726, 5.7456, 0.0, 0.0, 13.6224, 32.1799], [73.2621, 21.9757, 7.308, 5.5507, 0.0, 7.2701, 0.0, 11.4328, 0.0, 14.9047, 66.9433, 0.0, 120.4704, 7.7418, 7.755, 38.6613, 0.0, 15.4909, 58.5805, 8.874, 126.003, 0.0, 70.9625, 21.2769, 10.4989, 28.2047, 7.2792, 7.3926, 0.0, 15.0084, 27.6588], [75.2653, 28.0001, 12.3992, 6.9632, 6.9864, 7.4226, 3.4496, 5.2615, 7.8514, 17.5939, 62.3844, 0.0, 116.4096, 21.0898, 7.0726, 33.2627, 8.415, 21.021, 67.5193, 3.4272, 120.765, 14.3482, 7.1139, 76.2923, 2.197, 15.7779, 6.9832, 37.6329, 6.9552, 5.2947, 13.9327, 6.6132, 40.1585], [72.9759, 22.0441, 15.5417, 16.6026, 0.0, 5.3382, 4.5931, 31.015, 9.0911, 21.6961, 50.5074, 0.0, 122.9069, 23.0253, 0.0, 42.957, 7.4725, 7.4059, 69.1155, 8.6598, 122.802, 16.9343, 7.5689, 60.4552, 5.564, 16.5393, 15.5557, 41.9475, 10.8864, 7.5258, 7.5117, 15.84, 43.7931], [235.5264, 59.9325, 9.761, 49.8069, 12.903, 19.2423, 105.5088, 0.0, 160.923, 0.0, 6.6176, 78.1196, 3.6075, 18.9504, 6.4053, 53.1335, 6.3936, 12.987, 11.2984, 6.4944, 49.9986], [79.2719, 22.7972, 0.0, 1.8833, 0.0, 7.537, 6.3954, 19.1075, 5.8785, 15.2693, 60.4649, 0.0, 222.8026, 22.9586, 0.0, 37.2681, 7.652, 11.9335, 102.9549, 6.0894, 137.643, 7.5495, 16.606, 72.6376, 0.0, 23.0535, 0.0, 28.3645, 18.8784, 0.0, 5.7212, 17.1864, 93.5258], [115.8678, 0.0, 16.9462, 131.6865, 0.0, 311.952, 11.4703, 7.8998, 204.2075, 44.2035, 20.9496, 68.7939, 29.6136, 0.0, 0.0, 19.1268, 110.4579], [173.4251, 30.0539, 7.576, 18.7089, 5.6088, 7.4353, 0.0, 46.3248, 7.1715, 22.5165, 104.8538, 0.0, 278.8416, 35.7726, 7.5689, 32.7402, 0.0, 13.8092, 62.2518, 7.5582, 307.296, 0.0, 6.9898, 107.0528, 4.2055, 79.7778, 15.0259, 69.9924, 61.8624, 7.0929, 0.0, 7.2468, 67.2854], [159.9746, 43.7459, 4.263, 24.6313, 0.0, 7.7023, 11.7889, 6.0518, 16.1809, 106.6533, 7.8948, 327.5712, 35.3722, 7.9204, 87.133, 6.1261, 0.0, 148.9255, 12.852, 336.396, 23.2742, 0.0, 103.0936, 39.1698, 15.7002, 30.8414, 35.3592, 5.661, 0.0, 15.3252, 77.8347], [195.604, 95.5017, 19.9508, 9.912, 33.8332, 11.8076, 0.0, 19.9778, 21.8079, 18.0497, 155.961, 18.1356, 385.2346, 0.0, 22.6446, 66.5834, 0.0, 83.8005, 35.649, 239.493, 10.0104, 26.367, 140.4022, 0.0, 22.4907, 33.1585, 0.0, 0.0, 1.9963, 36.9468, 99.3766], [184.1568, 23.8925, 8.0388, 5.9224, 0.0, 7.8421, 0.0, 27.4546, 7.9447, 23.9751, 167.1182, 378.1958, 34.7715, 7.755, 107.6827, 11.6464, 44.1441, 157.0661, 31.6404, 319.809, 20.3545, 7.9411, 109.0325, 0.0, 75.2094, 7.6334, 71.1909, 36.2664, 7.7922, 0.0, 37.62, 105.4935], [271.2986, 59.081, 7.1618, 18.8824, 0.0, 10.257, 0.0, 27.336, 0.0, 24.7955, 70.0625, 6.7932, 395.2512, 91.1001, 0.0, 91.6029, 7.1359, 7.0501, 134.0808, 17.5032, 286.344, 30.6986, 21.2177, 170.0968, 1.703, 47.6721, 11.2694, 71.8301, 12.1392, 30.3696, 13.768, 46.728, 100.2632], [227.5131, 52.0296, 8.5747, 33.899, 0.0, 39.9984, 59.7356, 49.7609, 74.7056, 114.5713, 21.5016, 468.887, 27.8306, 0.0, 83.592, 25.7162, 90.4226, 197.4499, 0.0, 355.02, 53.3888, 19.3978, 267.556, 0.0, 69.7527, 56.0342, 89.6478, 30.0024, 0.0, 0.0, 66.4875], [400.2227, 85.1642, 0.0, 38.4833, 0.0, 0.0, 44.3072, 0.0, 25.3881, 153.3217, 9.2004, 511.1194, 226.5156, 50.6246, 86.4365, 123.1831, 131.3673, 103.581, 373.062, 0.0, 0.0, 172.2287, 0.0, 24.0264, 0.0, 127.84, 39.8952, 0.0, 0.0, 43.4016, 166.0414], [501.1012, 48.4697, 33.9578, 38.0621, 145.4516, 117.6565, 25.4847, 120.8162, 7.4381, 34.8231, 118.5304, 28.0092, 1105.3498, 143.224, 73.1245, 114.5327, 7.0013, 169.5586, 308.2262, 24.2046, 1103.763, 14.0146, 0.0, 315.5242, 195.5529, 32.8933, 263.0308, 97.7832, 6.993, 55.7924, 62.37, 314.6189]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

