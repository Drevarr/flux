created: 20230427220456000
creator: Drevarr
modified: 20230705163527098
modifier: drevarr
tags: ChartData
title: 202304272204_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Tuandha Lan", "Mistwalker Caelon", "Zanos De Lione", "Ever Moore", "Vinnakh", "Choo Sayaccho", "Malfax Jinn", "Elusive In The Mist", "La Morte Vivante", "Fuzzy Toe Beans", "Al Darasuum", "Klenga", "Evil Stepmother", "Koralia Danai", "Johosh The Great"];
const professions = ["Herald", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.4075, 0.8127, 10.9819, 8.257, 0.243, 1.8232], [2.856, 0.7342, 5.738, 2.1672, 0.3206, 8.5277, 1.2636, 2.0055, 3.2534, 0.0], [0.0, 8.9244, 1.4544, 0.0, 0.0, 3.9933, 6.5525, 0.0, 0.0, 1.0811, 0.0, 6.0922, 2.5718, 0.3159, 0.0, 1.0373, 0.0], [6.2445, 10.3259, 14.1523, 3.1334], [3.3667, 20.4394, 1.0692, 2.6892, 6.5067, 3.3869, 2.6656], [2.7608, 5.0618, 11.0603, 1.6405, 1.1222, 11.5056, 3.5964, 2.4157, 3.8663, 0.6048, 0.0], [4.8552, 3.7481, 2.578, 3.4013, 7.2144, 11.7763, 1.3851, 2.6436, 8.2512, 10.0397, 0.0], [2.1862, 1.8819, 6.9379, 10.472, 4.8686, 8.6486, 1.9264, 3.1262, 12.8592, 3.1833, 1.4586, 0.0, 4.1126, 0.903], [5.4096, 10.0624, 3.2357, 6.4128, 21.3869, 3.6936, 4.2845, 3.9606, 6.169, 0.2067], [0.0, 0.0, 6.885, 14.3576, 6.7592, 1.6615, 13.4719, 2.2425, 5.0501, 17.5968, 3.3048, 1.9144, 3.5834], [7.0325, 17.0478, 5.7943, 9.1382, 27.4781, 6.9498, 3.8287, 7.1197, 8.2253, 0.9466], [3.861, 2.412, 3.9456, 2.0104, 1.1102, 4.7277, 15.3212, 7.4732, 5.1778, 18.4615, 4.1538, 11.9438, 18.2736, 4.3254, 1.1851, 5.8938, 10.7654, 3.3837], [17.4174, 4.8722, 4.32, 6.885, 5.1069, 10.0521, 22.741, 12.9948, 9.66, 25.5301, 6.0501, 9.2986, 27.2074, 5.2245, 2.5069, 4.2435, 14.6362, 4.5152], [11.4114, 10.7575, 4.8384, 6.5408, 3.638, 13.9995, 28.7153, 11.8524, 9.3509, 25.2806, 5.9448, 14.9098, 25.177, 3.0618, 4.2389, 7.3554, 17.1763, 2.0237], [23.595, 7.429, 5.328, 6.4719, 3.1598, 10.4193, 15.8994, 19.3256, 11.7852, 27.4428, 7.1638, 14.4288, 36.1411, 9.7686, 4.2845, 7.8269, 17.7811, 5.7882]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

