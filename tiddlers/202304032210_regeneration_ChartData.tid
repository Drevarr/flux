created: 20230403221011000
creator: Drevarr
modified: 20230705163524359
modifier: drevarr
tags: ChartData
title: 202304032210_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Mac Chiato", "Bella Sassy", "Tegan Parker", "Johosh The Great", "Lagertha Scorned", "Sygaldry Verdandi", "Tika Sumiko", "Cat Wigglebooty", "Zenek Tryst", "Tribal S", "Drevarr Moonwillow", "Ak\u00e1nt\u00f3r"];
const professions = ["Tempest", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[379.8678, 417.8385, 80.2001, 287.0133, 104.651, 113.0768, 291.6782, 155.8755, 52.8144, 26.5843, 0.0, 0.0, 158.5968, 24.9469, 31.9731, 12.2877, 45.3457, 59.7062], [217.569, 216.2295, 0.0, 374.3724, 458.8397, 282.6354, 94.1203, 151.4669, 18.618, 49.4896, 31.8136, 255.1113, 18.0797, 55.3668, 65.8665, 24.3201, 74.5166], [220.0119, 610.47, 51.6916, 420.7767, 47.0059, 44.3705, 623.9419, 208.9361, 41.5513, 78.5662, 270.4145, 80.207, 6.273, 0.0, 0.0], [263.0676, 492.2235, 81.5214, 258.9395, 306.2155, 166.6157, 396.695, 230.5068, 21.0064, 68.0432, 7.5339, 306.5857, 0.0, 62.9236, 67.3056, 0.0, 60.6355], [737.694, 210.6104, 128.9743, 27.0816, 0.0, 470.7595, 324.8194, 183.9278, 136.3238, 0.0, 0.0, 415.4471, 0.0, 184.8802], [351.0113, 535.572, 86.2061, 465.8599, 240.8328, 166.5025, 429.8582, 268.7672, 52.5159, 47.7885, 20.0891, 301.8904, 55.0176, 22.8227, 0.0, 64.6721], [214.6681, 731.2815, 54.8948, 366.9411, 218.0069, 79.0066, 483.551, 421.3362, 44.4282, 71.7223, 0.0, 0.0, 408.1433, 0.0, 32.9707, 42.7487, 0.0, 0.0], [216.0422, 822.5955, 352.352, 420.2813, 88.9824, 177.7083, 803.0232, 805.3567, 212.6148, 115.6339, 0.0, 507.6141, 42.6225, 13.2102, 0.0, 13.9682], [708.3773, 530.9743, 1167.9763, 673.0987, 102.2364, 88.4562, 67.2235, 1091.0486, 26.7229, 98.7624, 122.8586, 68.6402, 52.4172], [867.3751, 2372.625, 264.1038, 1539.4351, 1562.8018, 631.9398, 1753.7016, 1370.2874, 7.6263, 316.4009, 0.0, 0.0, 1383.7223, 186.5512], [1894.3008, 3953.4345, 752.5118, 1893.4952, 2228.2354, 960.6435, 2307.527, 1947.3416, 335.6404, 523.0623, 3.5397, 2118.7976, 94.6963, 506.9304, 347.9117, 164.9416, 233.7139], [2598.4609, 3729.7665, 447.0466, 2786.0769, 1959.9341, 939.2506, 1462.3392, 2443.624, 554.0088, 750.1367, 0.0, 238.9349, 2134.4486, 0.0, 345.9677, 239.2042, 51.5928, 593.5486]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

