created: 20230626011754000
creator: Drevarr
modified: 20230705163537818
modifier: drevarr
tags: ChartData
title: 202306260117_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Morv\u00e4rth", "Arch Wells", "Jacob Pine", "Kosair", "Elonith Requiem", "Daddy Demon", "Traidoruns Maximus", "Tika Fiery", "Cedryn X", "Elon The Archmagus", "Cerys Fireblade", "Lord Erin The Wise", "Be\u00eb", "Rina Of Theros", "Xanvias Einzbern", "Johosh The Mighty"];
const professions = ["Tempest", "Reaper", "Reaper", "Reaper", "Firebrand", "Reaper", "Tempest", "Firebrand", "Firebrand", "Berserker", "Weaver", "Berserker", "Weaver", "Scourge", "Scourge", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.8704, 5.5724, 0.0, 109.18, 11.2134, 73.8276, 77.3385, 92.9342, 27.5181, 59.898, 31.105, 52.4667, 0.0], [12.8586, 0.7039, 18.1905, 13.7222, 32.9886, 18.75, 20.0119, 51.3892, 45.3258, 41.3012, 40.2981, 3.1821, 1.4108, 1.4082, 10.52, 12.8661, 8.0517, 16.7538, 29.8947, 16.7711, 21.6939, 0.0, 2.5675, 24.5556, 0.0], [46.1296, 4.2424, 0.0, 24.5833, 22.9389, 61.7159, 0.5, 0.0, 38.8503, 25.7865, 21.4639, 29.4161, 10.212, 11.7003, 2.3265, 40.84, 8.1841, 14.1552, 20.9692, 44.1184, 5.6265], [40.1481, 10.6667, 0.0, 3.504, 14.0111, 36.2955, 4.4205, 21.4286, 0.0, 36.9461, 10.8764, 7.9096, 29.6211, 10.462, 5.6465, 8.4286, 32.59, 12.4895, 11.5862, 35.2308, 22.0658, 35.0482, 68.8571, 5.7407, 16.32, 23.6889], [22.8068, 74.25, 0.0, 45.509, 8.7079, 14.5241, 18.0435, 9.3098, 19.7576, 51.18, 0.0, 71.9138, 21.7231, 79.8684, 20.9036, 129.8163, 7.2963, 7.7825, 23.5556], [0.0, 38.9521, 6.6404, 12.8012, 36.6646, 37.1277, 29.5051, 21.6122, 26.55, 9.4937, 21.5, 31.6615, 10.6316, 9.4096, 21.0612, 16.7778, 39.155], [49.2963, 5.4141, 6.1341, 30.619, 6.75, 91.4205, 35.8068, 45.869, 0.0, 25.3114, 33.0562, 6.259, 38.4161, 5.0788, 24.5354, 0.0, 47.32, 17.7448, 7.7759, 38.0154, 6.3684, 68.0843, 4.3673, 1.4074, 7.235, 0.0, 0.0], [14.963, 72.2424, 1.4525, 33.3095, 0.2611, 46.4205, 15.6136, 8.9048, 0.0, 30.4431, 42.0787, 2.759, 17.0932, 1.1044, 2.1224, 51.19, 8.5774, 70.1897, 14.2615, 8.2237, 3.8434, 128.2653, 5.6296, 21.9625, 227.5556, 0.0], [38.0556, 18.4747, 0.0, 26.4762, 35.5056, 5.9545, 11.9545, 48.5833, 0.0, 38.1198, 47.382, 24.2169, 44.5528, 22.2038, 3.1044, 0.0, 39.12, 34.8326, 41.1552, 69.0615, 8.75, 5.6627, 61.3469, 15.1111, 28.785, 45.7111, 11.0], [35.0926, 44.6263, 0.0, 36.5913, 53.6111, 0.0, 0.7727, 103.3571, 0.0, 20.3114, 34.3146, 16.0301, 53.4161, 11.6685, 11.4411, 0.0, 178.77, 11.1046, 93.9483, 70.1846, 52.2105, 29.0723, 110.6122, 5.4444, 0.0], [48.1667, 82.2323, 11.7263, 95.3214, 153.45, 147.3182, 326.6818], [102.2593, 3.2424, 1.5251, 46.5198, 33.3722, 0.0, 60.7045, 71.4167, 0.0, 85.6946, 237.8427, 15.4819, 0.0, 2.6734, 0.0, 137.6207, 70.1538, 74.5921, 65.1325, 59.7755, 6.7037, 22.96, 53.9556, 55.6087], [18.8333, 14.6667, 50.877, 71.6278, 63.6136, 74.2273, 83.0, 0.0, 20.6108, 43.2472, 0.5663, 128.5155, 24.2283, 8.5017, 0.0, 42.77, 16.0544, 88.0172, 48.9231, 42.8816, 49.7229, 118.1224, 8.4444, 24.755, 22.4889], [3.2179, 74.2103, 191.0222, 381.5455, 203.236, 103.0361, 283.3975, 48.7473], [37.8148, 64.2828, 15.5419, 66.881, 10.35, 151.5909, 83.1667, 0.0, 55.5749, 89.0, 54.747, 120.7143, 66.7609, 21.1953, 0.0, 155.7, 34.0711, 254.6552, 143.7692, 49.6974, 102.1928, 380.0204, 3.8889, 110.01, 211.7333, 24.5217], [158.7407, 40.6465, 0.7263, 70.8056, 69.8444, 55.25, 272.9886, 0.0, 0.0, 207.9641, 242.1236, 109.5361, 97.0621, 17.1223, 82.3131, 0.0, 227.44, 22.0126, 87.1207, 40.0769, 64.9211, 191.6386, 0.0, 0.0, 24.86, 12.5778, 0.0], [169.9444, 170.9495, 18.3631, 83.6706, 143.6667, 309.3977, 536.6932, 296.7143, 0.0, 166.9162, 186.5843, 145.1687, 357.3354, 41.1793, 86.0741, 0.0, 261.48, 65.4268, 148.0517, 168.5231, 247.3158, 257.6024, 294.1429, 0.0, 58.135, 125.1111, 14.1739]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

