created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Fiery", "Luke The Knight", "Erin Celes", "Ggclaudx", "Kittendo", "Lucky Leipreach\u00e1n", "S\u00e2ucy K\u00e2t", "Scythe User", "Lost Uber Driver", "Glorious Gluvs", "Jello Jawn", "Tantai Jin", "Free H\u00e4nd", "Jerryatric Reflexes", "Audra Storm", "Red Reaper Robin", "Jmbrage Rev", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Berserker", "Herald", "Holosmith", "Soulbeast", "Scrapper", "Chronomancer", "Reaper", "Herald", "Berserker", "Virtuoso", "Reaper", "Vindicator", "Berserker", "Weaver", "Reaper", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[131.856, 47.1961, 0.0, 18.4298, 25.3661, 26.5675, 0.0, 87.569, 9.614, 0.0, 12.6102, 0.0, 2.0577], [44.0873, 0.0, 26.4052, 132.3721, 0.0, 100.0847, 0.0, 125.5], [0.0, 0.0, 0.0, 9.6579, 46.3822, 25.3532, 0.0, 198.7328, 30.6558, 0.0, 24.7627, 0.0, 0.0], [61.8254, 102.8889, 131.6897, 76.7023, 19.5758, 95.1864, 87.2885], [150.3175, 188.25, 31.819, 74.5581, 0.0, 51.2712, 95.6731], [52.184, 247.2745, 28.5862, 117.6842, 138.1556], [35.0, 5.549, 78.7241, 9.5877, 75.1144, 96.1389, 206.0, 89.6983, 51.907, 44.5152, 19.8814], [187.2, 171.8627, 207.5862, 69.3947, 135.9908], [100.6468, 0.0, 333.8707, 215.5628, 0.0, 0.0, 0.0], [50.8, 7.3922, 0.0, 0.0, 87.5789, 24.2341, 0.0, 412.3621, 74.4093, 17.3636, 47.2881, 0.0, 85.8462], [335.488, 136.5686, 64.1724, 18.8596, 243.6911], [4.32, 143.8627, 59.1034, 42.3684, 153.3204, 45.2897, 123.6667, 256.6897, 211.2791, 0.0, 96.2203, 0.0, 10.6923], [122.808, 265.7451, 109.9655, 126.9298, 92.2746, 185.7976, 3.9722, 361.2241, 135.5953, 0.0, 0.0, 0.0, 0.0], [188.1667, 444.9444, 1192.3707, 274.0977, 53.1818, 54.8644, 0.0, 292.6154], [104.408, 227.9804, 35.9655, 216.5614, 262.8078, 157.2262, 0.0, 472.569, 137.9395, 0.0, 0.0, 0.0, 0.0], [232.888, 126.7255, 43.069, 155.1491, 262.0641, 149.8294, 372.6667, 812.1983, 90.6791, 0.0, 21.8305, 0.0, 34.6154], [639.216, 235.5882, 212.3103, 270.386, 299.9703, 67.9722, 475.25, 622.3362], [434.352, 274.1176, 136.4483, 143.7719, 339.9588, 135.1071, 148.1944, 822.569, 206.1767, 89.3939, 18.1695, 0.0, 166.9038]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

