created: 20230208220141000
creator: Drevarr
modified: 20230705163518911
modifier: drevarr
tags: ChartData
title: 202302082201_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Gabe Malhorn", "Sp\u00edcy Cheese", "Zefirokai", "Arka\u00f1", "Raziel Umbra", "Black Raspberry Pie", "Ryvalia Fazebringer", "Stabby Beech", "Whose Guardian", "Koralia Danai", "Zaylen Harker", "Blanco Padre Guard", "Bella Sassy", "Jupi Jupi Jupi", "Smol Daddy Tika", "Demon Sekhmet", "Newtype Khan", "Xanvias Einzbern", "Johosh The Great", "Arcanophage Farra"];
const professions = ["Firebrand", "Berserker", "Catalyst", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Berserker", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[42.0449, 22.4204, 0.0, 0.0, 0.0, 202.8312, 0.0, 22.9699, 0.0], [83.0189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.3568, 29.7778, 29.8541, 46.8825], [143.8008, 104.9477, 38.3059, 85.785], [164.4019, 12.5246, 25.2492, 0.0, 0.0, 6.4714, 12.6403, 134.5344, 16.2361, 12.78, 121.03], [206.5248, 13.1765, 29.6984, 0.0, 0.0, 6.932, 6.5696, 160.2744, 25.0797, 20.2435, 113.05], [193.847, 13.8749, 28.6973, 6.957, 0.0, 6.886, 12.2245, 166.452, 24.3888, 13.9728, 118.7025], [201.2083, 14.8992, 36.4834, 14.3697, 0.0, 7.5769, 7.4844, 161.6472, 25.2869, 22.2883, 133.665], [244.1491, 7.1702, 29.476, 7.352, 6.909, 15.1351, 177.0912, 27.3596, 18.9485, 118.7025], [216.3398, 14.0611, 30.1433, 15.3115, 0.0, 13.9331, 7.6507, 190.1328, 30.745, 15.3701, 121.3625], [265.415, 14.8526, 22.6909, 0.0, 0.0, 7.1854, 21.8711, 188.4168, 25.7015, 15.6768, 105.07], [287.4989, 13.4093, 47.4952, 6.7444, 0.0, 6.6557, 6.736, 250.8792, 41.9376, 20.2776, 174.23], [371.7446, 7.8221, 36.8171, 15.2811, 0.0, 7.8532, 7.9002, 286.9152, 34.4759, 14.7226, 181.2125], [384.4224, 21.8366, 44.7145, 15.0989, 7.314, 7.2314, 0.0, 282.1104, 62.0428, 15.6427, 205.485], [16.2162, 627.7128, 123.4638, 67.717, 274.3125], [456.3994, 12.7109, 42.4899, 50.9473, 0.0, 8.3829, 0.0, 350.7504, 52.3702, 16.5288, 132.0025], [487.0714, 0.0, 80.753, 0.0, 0.0, 7.4387, 0.0, 376.8336, 75.3772, 11.0078, 163.9225], [430.6349, 0.0, 83.7562, 0.0, 20.378, 20.1282, 0.0, 442.0416, 79.868, 66.7627, 330.1725], [754.1222, 10.5691, 139.5936, 17.8331, 0.0, 33.4165, 0.0, 407.3784, 96.1733, 20.4139, 211.1375], [591.3562, 31.6142, 91.4311, 33.6914, 0.0, 30.5378, 7.9002, 464.0064, 85.0498, 37.7606, 365.085], [721.8144, 0.0, 71.9658, 0.0, 0.0, 20.0131, 0.0, 1003.5168, 115.3803, 93.6178, 86.1175]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

