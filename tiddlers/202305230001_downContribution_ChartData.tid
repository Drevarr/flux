created: 20230523000132000
creator: Drevarr
modified: 20230705163531188
modifier: drevarr
tags: ChartData
title: 202305230001_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Fierce", "Sumatra Satyricon", "Hauzzy", "Smol Gluvs", "Husky Guard", "Grasszanine", "Phaydyd", "Nocta Asthariel", "Cedryn X", "Alnerian", "Sire Nighthawk", "Kmpek", "Kaye X Kaye", "Eruwon", "Lord Erin The Wise", "Binkety Bonk", "Kary\u00edna", "Tootsy Pop Star", "Soxxdodendron", "Cyclotechnist Farra", "Be\u00eb", "My Birthday Girl", "Xanvias Einzbern", "Mistwalker Caelon"];
const professions = ["Spellbreaker", "Soulbeast", "Berserker", "Scourge", "Dragonhunter", "Spellbreaker", "Dragonhunter", "Scourge", "Berserker", "Dragonhunter", "Vindicator", "Vindicator", "Vindicator", "Weaver", "Weaver", "Scrapper", "Vindicator", "Reaper", "Willbender", "Scrapper", "Scourge", "Scrapper", "Berserker", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[39.6381, 0.0, 23.1683, 0.0, 31.9664, 0.0, 23.2664, 0.0, 27.4362], [26.2095, 35.6394, 0.0, 18.698, 83.7581, 52.2, 0.0, 16.3291, 123.2727, 0.0, 32.6569], [16.5397, 0.0, 0.0, 104.8966], [22.1048, 0.0, 41.9952, 8.6074, 39.4564, 98.9355, 119.64, 0.0, 43.2636, 0.0, 17.9517], [182.0381, 0.0, 25.8462, 41.3704, 11.1074, 150.7581, 14.36, 0.0, 56.4505, 39.1515, 0.0], [89.7429, 0.0, 0.0, 0.0, 68.6532, 27.9677, 253.24, 0.0, 53.7392, 0.0, 36.5241], [54.24, 0.0, 74.6611, 102.2086], [4.619, 0.0, 41.3654, 5.8074, 87.1163, 43.8387, 114.18, 0.0, 50.8047, 0.0, 0.0, 39.9414], [134.2381, 23.375, 0.0, 4.7114, 0.0, 83.2399, 0.0, 0.0, 83.119], [0.0, 173.0, 0.0, 0.0, 57.8982, 170.0, 0.0, 157.5121], [346.8, 0.0, 68.9952, 0.0, 144.8871, 209.26, 0.0, 92.3013, 0.0, 77.131], [205.3238, 22.75, 16.0296, 122.0067, 225.3387, 404.86, 0.0, 18.1046, 0.0, 0.0, 98.7948], [88.649, 37.2185, 52.5951, 183.0645, 423.86, 0.0, 82.2762, 60.8485, 0.0, 140.0276], [0.0, 5.7328, 221.2455, 0.0, 0.0, 132.8], [214.5524, 0.0, 120.1394, 26.7074, 43.6957, 148.4032, 69.54, 0.0, 131.3515, 0.0, 0.0, 105.9862], [188.9194, 673.18, 0.0, 168.6778, 0.0, 143.1414], [0.0, 0.0, 35.9519, 4.1815, 40.3132, 271.5645, 371.52, 9.6983, 188.6597, 0.0, 0.0, 106.581], [253.8, 0.0, 133.4327, 0.1926, 65.651, 350.0, 206.28, 0.0, 161.6416, 0.0, 0.0, 111.5483], [297.3143, 0.0, 99.0096, 18.9148, 82.0805, 260.7097, 364.18, 12.0172, 171.5872, 46.0909, 0.0, 106.9534], [0.0, 0.0, 137.1298, 56.0481, 212.9911, 270.1774, 127.92, 96.8017, 77.4881, 0.0, 0.0, 245.631], [416.1714, 88.9183, 80.1481, 83.6622, 190.2419, 375.64, 0.0, 182.3166, 151.697, 0.0, 150.4828], [0.0, 16.9087, 36.3556, 26.4474, 495.9839, 111.9, 109.9741, 412.6597, 0.0, 0.0, 90.669], [390.6857, 220.9279, 47.737, 22.7875, 499.7581, 511.62, 0.0, 296.9107, 0.0, 0.0, 272.8103], [734.5714, 133.6106, 5.4037, 164.0783, 785.6613, 561.18, 0.0, 306.9261, 124.8517]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

