created: 20230417215912000
creator: Drevarr
modified: 20230705163525684
modifier: drevarr
tags: ChartData
title: 202304172159_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Tegan Parker", "Primal Clone", "Daddy Demon", "Eibh\u00ebar", "Venomina The Siren", "Zadie Miststep", "Miphest\u00f6", "Black Raspberry Pie", "Mac Chiato"];
const professions = ["Scrapper", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.6901, 0.0, 0.0, 45.2622, 125.4204, 55.86, 2.2146, 13.5181, 15.2856, 17.1147, 9.5168, 0.0, 10.778, 16.2408, 20.1214, 18.4412, 1.3632, 20.5285, 0.0, 0.0, 5.4163, 15.9744, 0.0, 16.067, 5.0009, 16.2347, 5.4807, 2.2162, 4.9495, 5.6595], [34.7038, 74.025, 72.8654, 0.0, 47.6603, 83.9884, 38.5885, 56.2417, 46.0901, 47.2771, 73.6048, 6.2899, 0.0, 182.6616, 10.8751, 93.786, 44.8169, 32.387, 113.7491, 46.3785], [41.6962, 46.4033, 0.0, 231.7955, 0.0, 106.5809, 0.0, 112.2786, 0.0, 167.8515, 0.0, 19.2535, 88.3562, 82.6099, 18.3494, 83.5974, 99.4676, 74.0836, 92.8672, 0.0, 0.0, 44.8662, 42.4819, 0.0, 56.2795, 65.3297, 52.0997, 28.5948, 82.1534, 64.4771, 30.4535], [377.0403, 142.9766, 225.5534, 193.0403, 38.113, 158.0422, 29.1034, 159.4138, 115.4979, 106.7867, 77.2976, 72.4334, 146.5227, 76.342], [8.6112, 27.0481, 67.8682, 476.8298, 0.0, 154.8439, 34.56, 117.4736, 60.7257, 214.1653, 65.2033, 0.0, 142.4241, 105.5894, 0.0, 116.3799, 65.8339, 48.8648, 86.8716, 66.2418, 0.0, 33.0231, 15.575, 0.0, 78.3605, 17.1858, 27.6507, 33.214, 53.6933, 42.1375, 15.9495], [710.2511, 193.9459, 111.8976, 143.0575, 74.3036, 55.9119, 81.9055, 124.895, 109.4678, 92.2513, 150.5868, 106.6426, 43.3381, 43.5521, 88.5869, 0.0, 0.0, 51.971, 42.7858, 117.8793, 43.6987, 88.6853, 126.0113, 89.572], [0.0, 0.0, 147.3938, 56.3472, 589.7081, 0.0, 152.0882, 39.1642, 151.0454, 15.952, 132.2922, 52.9347, 113.7616, 144.4704, 28.9884, 209.0634, 104.8076, 81.4625, 197.8625, 82.8504, 88.8027, 29.1533, 0.0, 62.0242, 81.4836, 53.0053, 28.8331, 48.0168, 71.5669, 36.015], [532.8044, 0.0, 247.646, 88.469, 156.8549, 72.8875, 77.5944, 75.1787, 198.0909, 151.2091, 0.0, 95.0649, 96.6966, 168.5624, 248.037, 0.0, 46.3536, 182.1325, 33.671, 0.0, 121.2658, 148.5994, 79.8475, 136.1189, 43.6536, 43.218], [0.0, 133.9721, 61.2608, 974.563, 3.8958, 406.065, 111.9559, 168.8648, 120.3685, 155.0154, 131.2857, 0.0, 188.2604, 100.2566, 0.0, 95.2354, 207.439, 96.8906, 133.8592, 110.4538, 31.009, 115.0757, 66.0691, 26.4141, 187.8677, 96.5658, 58.115, 35.3769, 121.0334, 67.2863, 63.7245], [40.3366, 4.5989, 166.0534, 108.3174, 897.6849, 33.4985, 208.8419, 84.4477, 213.9997, 73.8871, 181.2079, 0.0, 44.3124, 201.9994, 206.1854, 29.8224, 78.0129, 248.8122, 189.2199, 244.192, 167.0004, 68.5714, 131.2437, 19.1693, 269.28, 148.7978, 100.0923, 70.2956, 74.3386, 124.7628, 4.41]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

