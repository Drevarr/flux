created: 20230206215940000
creator: Drevarr
modified: 20230705163518757
modifier: drevarr
tags: ChartData
title: 202302062159_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Smol Gluvs", "Tahlia Tano", "Sp\u00edcy Cheese", "Kira Dragonblaze", "Belvyn Brightblade", "Kahless The Drunk", "Arcanophage Farra", "\u00c2 R K", "Arkintor", "Ravioli Fetabringer", "Sumatra Satyricon", "Bella Sassy", "Etchery Howls", "Zadie Miststep", "\u00c9\u00efbhear", "Cat Wigglebooty", "Rina Of Theros", "Be\u00eb", "Koralia Danai", "Xanvias Tsollice", "Veron Blackburn", "Johosh The Great", "Lord Erin The Wise", "Oo Dads Mad", "Sygaldry Verdandi", "Gyppa X", "Drevarr Moonwillow", "Reyga Bannerclaw", "Mac Aaroni", "Tyrisai", "Mirrors Dancer"];
const professions = ["Scourge", "Soulbeast", "Berserker", "Dragonhunter", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Tempest", "Firebrand", "Ranger", "Firebrand", "Druid", "Tempest", "Scrapper", "Scrapper", "Scourge", "Scourge", "Firebrand", "Vindicator", "Herald", "Firebrand", "Weaver", "Spellbreaker", "Firebrand", "Herald", "Scrapper", "Spellbreaker", "Tempest", "Firebrand", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.0834, 1.0336, 1.9964, 8.9441, 1.1623, 9.9419, 20.582, 38.414, 3.5283, 14.9032, 4.7764, 0.022, 0.0285, 5.8317, 4.3015, 0.5345, 2.1678], [3.2969, 14.6298, 5.1783, 1.6766, 25.7835, 0.115], [0.7104, 1.4244, 2.3294, 4.3198, 0.0, 7.0486, 25.5173, 49.9708, 5.8652, 18.9699, 7.0372, 0.0, 0.2493, 2.9947, 5.7725], [1.4597, 2.1625, 2.6643, 8.1836, 0.0, 6.9314, 14.6596, 33.5824], [0.898, 1.3879, 2.3369, 8.6893, 0.0, 3.129, 21.7974, 32.0669], [3.7036, 9.9044, 5.0998, 0.0518, 24.0418, 0.1172, 0.967], [0.6423, 1.3188, 1.9668, 9.3336, 0.0, 2.9776, 24.5923, 41.2488, 3.0406, 11.254, 6.7739, 0.0, 4.8, 4.7704, 9.8756, 1.2635, 0.0], [0.8117, 1.6174, 2.1269, 6.3298, 0.0042, 2.6666, 31.8958, 34.1602, 11.9482, 16.7065, 6.6994, 0.0046, 0.0, 1.3909, 1.6626, 0.569, 0.1326], [1.1193, 1.3408, 1.9958, 6.9185, 0.0, 4.6447, 12.5653, 35.3914], [0.8384, 0.9687, 1.4544, 7.87, 0.0, 5.1649, 86.8914, 19.3382, 5.2503, 4.4496, 4.6934], [2.0302, 1.5652, 4.0743, 11.5364, 0.0998, 5.8457, 10.2544, 71.9985, 3.2541, 6.2467, 4.3387, 0.0123, 1.8042, 2.8542, 2.9954], [0.6814, 0.8895, 1.8889, 6.3779, 0.0, 5.2366, 23.8656, 35.7994, 8.5312, 11.0708, 5.5294, 0.8, 0.1447, 0.8556, 3.8723, 0.1658, 0.0], [1.1431, 0.6401, 1.9536, 7.1502, 0.0, 6.0601, 44.5163, 30.225, 3.9785, 12.9805, 3.9355, 0.5468, 0.8139, 0.6153, 3.5329], [0.5652, 1.1856, 1.2175, 7.0207, 0.0, 5.4025, 19.5639, 35.5523, 3.2955, 19.8992, 5.5919, 0.133, 1.568, 1.4189, 4.2964, 0.0229, 0.3484], [0.7429, 1.0239, 1.7481, 6.9836, 1.1922, 6.3215, 13.7012, 33.2299, 3.8258, 19.6562, 5.2107, 0.0, 0.2533, 1.0391, 3.1427, 0.1769], [5.4518, 0.0, 7.2924, 2.6, 27.3754, 3.0523, 14.2682, 3.5828, 0.0, 1.1599, 2.5541, 4.0484, 0.5953, 1.1011], [0.8534, 1.3782, 3.279, 17.9306, 1.129, 5.7818, 23.1989, 28.6455, 2.9707, 3.4889, 5.6726, 1.5337, 0.454, 4.0946, 3.1738, 0.5433, 1.0322], [0.8946, 1.0592, 3.0774, 8.41, 0.3554, 3.9517, 24.1525, 21.6061, 3.5688, 7.9345, 4.9703, 1.1062, 0.1122, 3.905, 3.3306, 0.0], [0.5858, 0.7583, 1.2368, 4.8903, 0.0, 9.0019, 18.1645, 33.1738, 8.4989, 25.9747, 3.823, 0.0, 0.1098, 1.1808, 5.3752, 0.0, 0.2818], [0.6981, 1.0751, 1.4539, 7.4788, 0.0, 5.9486, 17.3762, 30.5231, 3.2506, 7.3038, 4.4094, 0.0, 0.1902, 2.9758, 3.1355], [1.1991, 0.4974, 2.077, 7.0269, 0.6858, 4.9838, 14.4398, 5.1729], [0.5042, 0.9791, 2.0332, 6.064, 0.0, 2.8483, 23.7956, 21.1661, 8.7899, 9.9358, 5.0719, 0.4314, 0.5661, 1.7422, 3.592, 0.0, 0.1308], [1.2757, 0.88, 2.9618, 8.022, 0.0, 5.409, 7.4011, 17.466, 3.4782, 4.0586, 6.8728, 0.7292, 4.2254, 4.1695, 0.5187, 0.1401], [0.8436, 1.0417, 2.1778, 7.7624, 0.0, 7.3554], [0.5618, 0.641, 2.317, 6.55, 0.0, 1.8809, 23.9596, 29.5859, 10.3765, 7.9209, 4.6375, 0.0, 0.529, 1.282, 3.1829, 0.0486, 0.0], [11.2291, 18.3146, 3.9029, 0.0, 0.2541, 3.6114, 2.2456, 0.0931, 0.0], [0.5669, 1.0935, 1.1399, 5.7326, 0.0135, 4.7598, 21.5438, 26.7602, 2.7775, 11.87, 5.0019, 0.4923, 1.7309, 2.3883, 3.236, 0.3638, 0.0], [4.8506, 18.759, 2.2866, 10.0508, 0.2065, 2.9666, 3.3686, 0.7151, 1.4828], [0.6033, 1.1254, 1.4911, 5.4502, 0.02, 2.0669, 17.4055, 20.1066, 4.1127, 15.4349, 4.2122, 2.3877, 1.0786, 3.9562, 4.6544, 0.0243, 0.1885], [1.1785, 1.8786, 3.0191, 3.1695, 0.0, 6.714], [1.0557, 1.0378, 2.0217, 7.3212, 0.0, 1.4783]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

