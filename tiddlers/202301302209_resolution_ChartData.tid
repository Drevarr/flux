created: 20230130220929000
creator: Drevarr
modified: 20230705163518384
modifier: drevarr
tags: ChartData
title: 202301302209_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Tyrisai", "Whose Guardian", "\u00c2 R K", "Whose Guardian", "Belvyn Brightblade", "Sygaldry Verdandi", "Doctor House", "Zaylen Harker", "Gavann", "Bella Lunabringer", "Arkitrix", "Ravioli Fetabringer", "Koralia Danai"];
const professions = ["Firebrand", "Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[483.6496, 503.2912, 105.0197, 58.7843], [499.6902, 573.3, 169.9393, 24.9066, 51.3912], [805.4346, 103.635, 287.8319, 0.0, 96.2007, 25.5437, 230.688, 317.276, 134.6218, 31.8265, 0.0], [96.7603, 169.7693, 364.5169, 285.1632, 138.6661, 10.8424, 193.2, 348.5462, 171.2837, 182.8534, 39.9086, 39.7996, 106.4776, 63.1158, 93.2627, 25.4975, 98.2238, 81.7796], [1334.7757, 986.7375, 238.3781], [349.6954, 112.159, 74.3379, 194.4614, 564.7573, 378.5174, 91.4222, 119.1835, 318.864, 252.6336, 170.8819, 118.7573, 199.2979, 134.2884, 131.271, 31.8105, 39.8323, 64.303, 93.1694, 167.1582], [1701.28, 2058.3675], [1047.9885, 180.81, 293.9441, 0.0, 113.286, 104.8184, 240.0864, 534.4317, 214.1429, 82.857, 59.3422, 513.744, 216.648, 182.533, 0.0, 101.1619, 65.0668, 134.3504, 56.0019, 72.0829, 43.0496, 78.3619, 40.5232], [1349.8442, 2243.0362, 262.2715, 122.302, 58.604, 298.1002, 231.9376, 144.9773, 155.9768, 100.1885, 172.872, 356.9184, 221.0126, 63.0678, 177.5035, 20.2664, 159.6966, 24.6158, 64.9727, 34.6437, 8.8546, 97.1757], [2449.3571, 2275.56, 420.6346, 23.87, 186.4509, 160.5877, 308.8656, 526.0503, 343.9733, 137.9448, 84.9924, 266.448, 323.136, 188.0683, 63.5188, 87.9135, 56.024, 157.6831, 84.0938, 62.4643, 31.913, 104.3266, 86.5117], [2152.3622, 2673.0113, 414.8002, 0.0, 162.5134, 190.6223, 274.3478, 520.869, 470.0942, 121.8963, 82.3858, 276.192, 325.0454, 381.181, 120.1757, 104.434, 280.5844, 110.3466, 57.787, 99.7363, 22.1083, 74.5147], [2455.1901, 2567.1712, 361.6421, 39.8561, 156.1571, 187.1824, 380.977, 565.3669, 317.3117, 116.7572, 169.7908, 263.676, 355.009, 257.2157, 0.0, 222.7278, 110.7884, 205.8092, 73.625, 50.5637, 37.6705, 81.563, 143.8307], [2417.7619, 2914.4587, 616.1343, 39.8561, 268.9924, 174.3787, 290.8378, 610.0172, 326.4307, 171.7548, 124.5354, 464.184, 359.4888, 259.9834, 253.0273, 137.6348, 134.6268, 93.7542, 45.1886, 38.9207, 71.5853, 93.2433]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

