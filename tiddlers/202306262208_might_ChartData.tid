created: 20230626220846000
creator: Drevarr
modified: 20230705163539522
modifier: drevarr
tags: ChartData
title: 202306262208_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Mike The Archmagus", "Primal Clone", "Rozaalyna", "Zadey Starbolt", "Artakama Nahid", "Eibh\u00ebar", "Tika Fiery", "Regis Hawkesburne", "Black Raspberry Pie", "Tegan Parker", "Zaylen Harker", "Koralia Danai", "My Birthday Girl", "Johosh The Mighty", "Xanvias Einzbern", "Gavann", "Sub Train", "Ateriuz", "Crusader Siolith", "Solus Sanctus", "Drevarr Moonwillow", "Bella Sassy", "Sygaldry Verdandi", "Arcanophage Farra", "Grasszanine", "Newtype Khan", "Blancooo Padreee"];
const professions = ["Tempest", "Chronomancer", "Reaper", "Scrapper", "Tempest", "Chronomancer", "Firebrand", "Berserker", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Berserker", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[81.9743, 4.6147], [27.0178, 0.0, 0.0, 2.3386, 1.3152, 11.0878, 1.9966, 0.0, 2.688, 1.3759, 4.73, 1.7848, 0.7079, 6.2951, 2.392, 6.5578, 7.2036, 0.0, 7.4169, 3.5393], [34.0792, 1.8711, 2.0645, 1.8823, 0.9918, 4.5798, 3.7868, 1.5654, 3.6288, 2.2226, 4.2759, 3.0788, 1.1012, 6.5173, 3.45, 1.8823, 3.6801, 1.8886, 6.0147], [8.514, 7.7639, 3.8806, 11.9237, 7.958, 20.0983, 11.4318, 0.9443, 11.4021, 19.3694], [88.4218, 0.0, 0.9715, 2.6809, 1.8326, 2.2899, 0.0, 0.0, 0.0, 0.5998, 3.2921, 0.0, 1.4159, 1.9996, 0.0, 7.9543, 3.6801, 0.0, 6.0885, 1.5444], [36.8424, 0.0, 2.5502, 4.4206, 0.0, 4.0374, 1.354, 0.0, 2.2176, 1.8698, 5.1841, 9.7272, 2.9629, 12.8124, 1.702, 14.2085, 9.2002, 0.0, 11.0331, 6.5637], [50.3513, 2.1021, 1.5484, 3.1657, 3.3202, 5.6042, 1.0786, 0.7167, 4.4016, 5.9976, 6.1301, 4.819, 3.1988, 5.4064, 0.0, 13.4798, 2.5839, 2.0588, 3.321, 7.915], [51.2723, 3.6267, 3.9164, 4.335, 1.811, 10.3647, 2.4556, 3.5268, 5.04, 1.6229, 3.784, 1.7402, 3.5659, 4.4436, 3.22, 4.979, 7.2036, 2.4923, 10.9224, 11.1969], [44.8249, 6.6297, 3.8557, 2.3101, 0.0, 8.7377, 3.4196, 1.2259, 2.0496, 4.0572, 3.3678, 3.4357, 1.4945, 15.4045, 9.43, 3.2182, 7.4385, 0.0, 0.9594, 22.0721], [84.7375, 1.8078, 0.0, 1.6974, 2.4528, 6.8796, 1.2487, 2.9895, 4.0379, 12.9605, 5.336, 3.036, 6.9687, 0.0, 6.5313, 14.2214], [55.8776, 4.2808, 2.082, 0.884, 10.1839, 2.6852, 1.1316, 4.2, 5.9976, 5.1841, 3.3465, 8.4166, 17.33, 6.9, 2.611, 3.2103, 5.0929, 7.4538, 12.2265], [88.4218, 0.0, 3.0056, 0.5134, 0.9055, 6.8094, 2.6163, 1.2636, 2.3856, 8.82, 1.892, 3.5696, 4.0641, 11.6274, 7.498, 5.3434, 5.7942, 0.0464, 5.2767, 12.8056], [8.4546, 10.201, 15.8856, 5.6056, 9.7019, 10.0521, 7.0159, 12.2304, 3.3516, 14.6819, 10.3072, 6.2141, 8.3688, 7.682, 13.3584, 6.8904, 2.4458, 10.4796, 21.4929], [58.6408, 2.4486, 3.5825, 3.3654, 4.9157, 3.4951, 3.3966, 4.9225, 8.1648, 5.0803, 10.3303, 14.3676, 5.1653, 11.0349, 5.336, 15.0586, 11.8233, 2.0124, 11.5128, 19.9485], [60.79, 5.0589, 6.6792, 8.9268, 5.2606, 13.679, 2.1573, 1.8671, 8.4, 3.4222, 3.8975, 12.3597, 7.4465, 6.4432, 7.682, 15.5443, 10.2965, 3.1579, 13.7268, 18.211], [97.3253, 4.6147, 4.4206, 6.2955, 5.6644, 0.8492, 4.2812, 10.3488, 2.9137, 9.5487, 4.405, 11.1831, 19.136, 9.5938, 9.67, 4.0093, 7.8966, 13.7065], [105.6149, 4.6893, 2.4288, 2.795, 3.3202, 12.7149, 2.5704, 2.5461, 3.9648, 7.8322, 2.7245, 7.3623, 5.008, 15.3304, 9.384, 6.6792, 5.1678, 2.3375, 4.428, 19.1763], [13.5072, 10.4076, 19.639, 32.3495, 39.7109, 34.0997, 29.9259, 46.4607], [121.8869, 0.0, 5.7988, 4.4776, 4.5707, 7.4722, 2.9376, 0.6601, 2.3184, 9.702, 1.0974, 5.3098, 6.0568, 17.256, 6.44, 8.3186, 9.0828, 5.5728, 9.7785, 19.7554], [122.194, 2.9799, 4.554, 5.7896, 7.1795, 7.9543, 3.3736, 1.5465, 2.8224, 9.3845, 5.2219, 4.819, 1.8092, 18.8112, 9.016, 14.2085, 11.8624, 7.9103, 7.011, 14.8005], [114.8255, 4.4121, 3.8861, 5.6184, 4.4629, 6.5683, 1.3311, 4.9979, 7.2912, 4.7628, 7.795, 9.5933, 10.0423, 23.1808, 4.416, 16.4551, 6.6164, 5.4335, 11.07, 19.4337], [192.1945, 1.8942, 2.3984, 7.1585, 4.7863, 6.9299, 0.436, 0.811, 1.008, 8.5025, 3.2542, 9.5933, 2.9891, 16.6635, 9.89, 12.5083, 9.9049, 3.127, 7.3431, 6.435], [155.3521, 0.0, 7.0435, 2.7094, 6.4249, 10.3647, 8.7669, 1.8106, 6.0144, 9.6667, 3.8218, 9.5933, 2.7007, 18.4409, 9.476, 9.8366, 11.8624, 7.5388, 17.0478, 20.0772], [381.6259, 8.4315, 18.975, 22.3597, 7.007, 45.1347, 15.2159, 12.6362, 19.3536, 22.0853], [227.1948, 7.0224, 11.5975, 9.6968, 7.9988, 29.5877, 9.7308, 9.694, 5.544, 2.7518, 14.7576, 22.0869, 8.6788, 52.2123, 10.672, 36.6749, 22.7462, 3.1115, 29.1879, 53.4105], [321.4499, 12.7512, 24.299, 1.7679, 26.2131, 8.0325, 12.6173, 13.7088, 6.7738, 18.4659, 21.373, 14.4734, 30.883, 13.294, 54.1622, 25.0952, 13.4676, 34.1694, 45.3667], [315.6166, 4.4814, 17.8517, 25.2687, 7.007, 25.0079, 10.098, 9.298, 22.512, 27.1303, 20.812, 22.9793, 21.8675, 39.7702, 19.136, 47.8474, 28.3837, 12.1363, 32.3244, 47.1685]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

