created: 20230506220820000
creator: Drevarr
modified: 20230705163528841
modifier: drevarr
tags: ChartData
title: 202305062208_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["My Birthday Girl", "Miphest\u00f6", "Bluntnips", "Kosa\u00efr", "Permanent Dawn", "Grilo Gringo", "Inkcubi", "Na Ting Wong", "Tootsie Pop Rocks", "Venomina The Fierce", "Lord Erin The Wise", "Kosa\u00efr", "Aronorf Xideliesi", "Abigail Ryn", "Johoshua", "Smol Daddy Tika", "Arriasa", "Blancooo Padreee", "Artofliving", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Tempest", "Herald", "Catalyst", "Weaver", "Dragonhunter", "Daredevil", "Scrapper", "Scrapper", "Spellbreaker", "Weaver", "Weaver", "Firebrand", "Catalyst", "Scrapper", "Spellbreaker", "Druid", "Spellbreaker", "Herald", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[118.3591, 196.9636, 97.0593, 0.0, 15.5326, 334.3603, 192.4474, 254.7725], [69.3829, 169.0416, 154.7832, 5.976, 286.7558, 139.104, 294.628, 0.0, 26.4805, 126.9352], [101.4671, 842.3065, 152.1185, 61.879, 155.918], [218.877, 1159.897], [64.3687, 271.674, 124.992, 104.1595, 291.0835, 211.0752, 23.207, 73.9834, 48.7922, 7.4786, 124.1616, 71.855], [392.8781, 44.8762, 458.086, 10.6087, 106.6705, 200.3219, 73.5059, 83.2411, 57.3656], [468.1421, 236.5978, 251.241, 89.5661, 38.7407, 55.935, 44.4263, 22.9133, 265.3788], [0.0, 275.4662, 200.1888, 749.1825, 0.0, 120.1781, 292.5028], [132.0025, 170.8025, 196.677, 39.384, 104.959, 77.3338, 91.5667, 518.626, 0.0, 28.2982, 238.5068, 0.0, 0.0, 63.8309, 20.4721], [88.2875, 65.2084, 193.3826, 555.1735, 170.7199, 95.1818, 381.2036, 163.0291], [275.063, 971.1625, 62.7977, 224.7841, 37.1763, 13.5439, 101.3785, 68.739], [422.4558, 119.664, 125.06, 356.5632, 238.1702, 1003.955, 91.4522, 221.8009, 48.0778, 15.7061, 91.578], [24.2549, 598.1859, 358.176, 56.304, 182.1649, 496.9306, 75.2371, 551.4185, 76.626, 140.9562, 0.0, 0.0, 100.8694, 101.6751], [161.2435, 271.5102, 152.712, 166.6324, 380.8358, 256.0723, 1036.243, 20.3405, 82.1146, 272.6645, 86.63, 31.3747, 121.3615, 77.5884], [666.0864, 423.7229, 1855.551, 46.9331, 167.7218, 604.3963, 0.0, 49.2617, 302.0354, 142.0896], [410.817, 777.038, 469.6263, 167.976, 231.9605, 439.5418, 262.7251, 1335.916, 85.6055, 122.6016, 320.5448, 54.9839, 0.0, 245.9686, 109.7144], [488.3627, 1045.4418, 597.7062, 212.112, 402.0192, 349.0368, 405.095, 1407.555, 62.4077, 93.163, 389.6059, 78.1364, 0.0, 187.038, 98.4968], [413.8489, 761.6934, 328.5945, 233.064, 349.2542, 628.4544, 428.6822, 1789.966, 134.915, 88.4585, 511.768, 118.5937, 0.0, 232.8588], [309.0165, 381.8529, 351.1404, 132.624, 79.2617, 366.5357, 521.3376, 2271.259, 240.8894, 202.756, 934.1891, 282.1959, 56.9462, 128.4892, 43.9044], [698.3773, 1888.1343, 1026.7179, 192.096, 581.2147, 1129.1482, 539.3606, 2288.412, 107.3606, 180.2671, 709.7033, 27.9153, 49.1774, 363.1298, 255.9171]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

