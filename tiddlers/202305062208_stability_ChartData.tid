created: 20230506220820000
creator: Drevarr
modified: 20230705163529016
modifier: drevarr
tags: ChartData
title: 202305062208_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Husky Guard", "Sub Train", "Arriasa", "Dargon Spiritwalker", "Mammary Mission", "Blancooo Padreee", "Xanvias Einzbern", "Smol Daddy Tika", "Audrinafa", "Ever Moore", "Aronorf Xideliesi", "Lil Red Robin", "Sygaldry Verdandi", "Ark Darkness", "Bella Sassy", "Koralia Danai", "Jupi Jupi Jupi"];
const professions = ["Dragonhunter", "Firebrand", "Druid", "Scourge", "Scourge", "Spellbreaker", "Berserker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.6325, 10.5651, 3.3579, 1.008, 1.4847, 0.9408, 3.145, 13.117, 0.0, 1.3543, 3.5798, 0.0, 0.0, 1.4637, 2.3993], [1.584, 9.8221, 16.7462, 11.975, 10.09], [2.7986, 6.5403, 4.1574, 2.808, 2.17, 4.5158, 3.3869, 15.135, 0.877, 0.891, 4.4748, 0.979, 0.0, 2.0365, 1.4645], [3.3817, 10.062, 5.2767, 1.08, 2.3984, 6.3974, 4.7174, 11.099, 1.754, 0.0, 2.9832, 0.0, 0.0, 2.9274, 1.0283], [2.3322, 7.5465, 1.599, 0.0, 3.0837, 7.7146, 6.048, 17.6575, 0.0, 1.5682, 2.2374, 1.1642, 0.6926, 2.291, 1.0594], [3.7315, 12.829, 7.0356, 0.0, 3.5405, 10.7251, 9.7978, 23.207, 3.7626, 2.2453, 12.082, 0.0, 0.0, 2.482], [7.463, 18.3632, 10.3935, 3.24, 6.51, 7.7146, 5.2013, 19.171, 1.5277, 1.7107, 6.8614, 0.0, 1.273, 3.182, 2.0877], [7.1132, 17.6085, 11.8326, 0.0, 5.2537, 8.8435, 5.8061, 22.198, 0.2829, 3.2432, 10.4412, 1.5876, 0.0, 5.3458, 2.4305], [5.4821, 20.1331, 15.241, 28.7565, 0.0, 7.7339, 21.9265, 0.0, 0.0936, 9.1005, 3.3341], [24.8371, 19.8374, 40.8645, 6.3935, 0.4633, 28.0421, 0.0, 2.2558, 11.0097, 7.0422], [3.3817, 26.4127, 15.3504, 2.88, 12.9057, 16.9344, 8.3462, 35.315, 4.6332, 17.3026, 0.0, 0.8611, 8.4641, 3.0848], [2.232, 10.6215, 26.1542, 26.9741, 72.1435, 2.3198, 9.7297, 22.5232, 0.0, 1.0764, 11.9643, 8.7248], [15.2759, 41.2542, 3.816, 5.1395, 16.1818, 16.2086, 61.0445, 3.027, 1.8889, 22.0757, 0.9261, 0.0936, 4.8366, 8.5067], [7.5796, 41.5057, 19.5078, 3.096, 11.0784, 12.4186, 13.5475, 49.441, 0.0, 6.736, 20.1366, 0.0, 2.9578, 14.1281, 4.7363], [27.8698, 65.403, 27.9825, 7.272, 19.3015, 33.8688, 22.0147, 82.738, 2.5178, 12.082, 33.4118, 3.3869, 1.638, 17.0555, 9.2545], [25.0712, 73.7041, 28.1424, 10.8, 18.6162, 31.9872, 26.1274, 92.3235, 0.0, 8.5892, 30.2795, 2.5666, 1.0202, 13.1098, 4.9233], [23.5552, 74.9619, 51.4878, 13.896, 29.1236, 28.4122, 30.24, 107.963, 4.0172, 8.019, 31.9202, 1.5347, 2.5834, 15.8464, 4.4559]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

