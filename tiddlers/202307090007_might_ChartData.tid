created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Sonia Truestrike", "Miphest\u00f6", "Greg The Knight", "Valaria Emberstorm", "Hayuf", "Koranthin", "Aisling Vexwind", "Blaze All Might", "Tika Fiery", "Drevarr Moonwillow", "Lost Uber Driver", "Newtype Khan", "Enter Effore", "Boof Floof", "Naithan Stone", "Artakama Nahid", "Danaeryn", "Jerryatric Reflexes", "K\u00e2 \u00d4tik R\u00e6j", "Erin Celes", "Zayde Sunsabre", "Whip \u00d1 Sl\u00e0pper", "Perpetual Hope"];
const professions = ["Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Herald", "Spellbreaker", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Herald", "Spellbreaker", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[10.0548, 10.1825, 23.4672, 1.0164, 2.2267, 0.0, 3.5693], [47.397, 3.4398], [23.0202, 0.0, 10.6418, 14.7167, 4.4237, 0.2838], [5.92, 2.9866, 9.2169, 50.22], [14.6612, 6.6586, 2.777, 9.5555, 41.0081], [5.2725, 0.767, 0.0, 5.342, 34.322, 6.7032, 0.0, 5.5123, 9.3869, 0.0, 4.628, 1.5382, 4.759], [2.9866, 0.9744, 4.2511, 31.2018, 8.7318, 4.3117, 17.915, 7.0004, 0.5676, 0.0, 1.325], [42.6425, 11.907, 2.2864, 5.9717, 19.9671, 3.7653, 2.5104, 0.6855, 0.0], [5.0413, 2.807, 0.0, 4.6273, 35.9564, 23.373, 0.0, 6.2396, 8.5914, 1.7787, 3.7766, 0.0, 2.9744], [7.955, 6.1037, 0.0, 2.6334, 53.9345, 9.0846, 2.2759, 6.0482, 9.8642, 5.7634, 2.445, 1.0199, 2.4066], [42.6888, 11.6719, 16.1159, 22.5922, 6.6066, 7.0948, 4.2588], [1.85, 3.2803, 5.9816, 52.8945, 15.435, 2.1715, 2.4499, 36.1157, 4.7702, 1.9647], [9.5737, 6.7565, 2.842, 8.314, 49.4771, 12.1716, 9.6152, 8.5747, 24.8992, 0.0, 0.2675, 4.759], [12.21, 6.0547, 5.4079, 7.9002, 49.7743, 15.3468, 1.9836, 8.4216, 32.6155, 1.5499, 5.7517, 0.7166], [20.6275, 6.2669, 19.4393, 24.3401, 113.3665], [8.0937, 11.1302, 0.0752, 80.2332, 40.8366, 0.0, 17.3408, 43.1957, 0.0, 17.0711, 4.0797], [23.6338, 1.0771, 7.6978, 3.461, 83.7991, 22.932, 0.0, 22.8149, 50.8325, 0.0, 14.7789, 0.6855, 3.38], [31.4038, 16.6627, 5.416, 25.6945, 197.0171], [111.573, 23.8763, 14.6995, 93.5508, 26.4143, 6.2031, 9.1125], [9.435, 11.881, 4.3523, 24.5659, 84.6906, 58.3884, 5.6898, 15.3503, 43.673, 9.5403, 15.9359, 15.767, 8.477], [94.7268, 15.4199, 17.0729, 108.0289, 19.0344, 41.3024, 15.466, 9.5046], [44.7238, 4.4227, 3.4266, 10.4584, 119.6069, 28.5768, 9.4586, 37.8972, 51.1506, 1.6401, 14.1022, 0.4732], [46.99, 18.1478, 4.2468, 19.6376, 155.2661, 56.9772, 18.009, 21.0157, 99.6762, 1.1319, 14.7571, 16.001, 2.5282]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

