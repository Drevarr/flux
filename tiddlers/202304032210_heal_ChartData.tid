created: 20230403221011000
creator: Drevarr
modified: 20230705163524315
modifier: drevarr
tags: ChartData
title: 202304032210_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Johosh The Great", "Zenek Tryst", "Tika Sumiko", "Mac Chiato", "Tribal S", "Drevarr Moonwillow", "Ak\u00e1nt\u00f3r"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[216.1095, 423.7439, 641.5165, 305.468, 116.9851, 80.1905, 339.881, 482.9104, 279.4237, 204.4651, 0.0, 0.0, 324.1216, 15.4595, 461.2931, 50.9556, 188.2703, 0.0], [351.8271, 481.2018, 550.978, 345.7214, 116.2184, 142.1472, 387.9673, 646.2836, 299.322, 251.1395, 0.0, 305.827, 8.0541, 344.3621, 135.6222, 4.8108, 8.4394], [165.5087, 130.974, 858.131, 1740.6537, 1022.3559, 405.8837, 203.4074, 1151.5622, 86.5676, 1413.5862, 297.6, 179.1622, 11.0], [279.0865, 618.4421, 1066.4615, 649.1058, 73.4342, 34.7662, 480.3869, 876.2418, 669.678, 319.8372, 0.0, 728.8324, 0.0, 753.5862, 42.8222, 0.0, 0.0], [519.7406, 742.5175, 1955.5604, 831.8301, 143.9181, 62.9827, 461.0238, 918.5821, 872.2373, 546.8953, 0.0, 0.0, 959.3595, 9.1351, 1245.2759, 180.1778, 148.1081, 3.0152], [284.5331, 1020.5579, 1453.5495, 1066.0418, 250.8561, 143.2294, 1012.4018, 1367.8149, 995.7119, 403.1512, 0.0, 3.963, 944.0514, 1262.6379], [781.6052, 1291.6509, 2655.967, 1478.0028, 294.6452, 339.7229, 1143.3333, 2062.397, 1184.1186, 950.3488, 266.8148, 1382.9757, 560.7027, 1752.2241, 738.7556, 315.5946, 158.9242], [1208.0375, 1637.1789, 3883.1978, 2139.8162, 260.3176, 435.329, 797.1696, 2172.9254, 1318.6102, 1488.5698, 81.7778, 2084.0027, 26.4054, 2403.2069, 391.0889, 256.9189, 49.8788]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

