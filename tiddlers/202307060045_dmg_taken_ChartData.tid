created: 20230706004528000
creator: Drevarr
tags: ChartData
title: 202307060045_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Legacy Of Mathus", "Newtype Khan", "Kary\u00edna", "Primal Clone", "Zaedy Zae", "Eibh\u00ebar", "Johosh The Mighty", "Tika Fiery", "Grasszanine", "Stoic Rapidfire", "River No Hug", "Tegan Parker", "Ryvalia Fazebringer", "Solus Sanctus", "Sygaldry Verdandi", "Xyntharos", "Mike The Archmagus", "Artakama Nahid", "Mistwalker Cael"];
const professions = ["Berserker", "Spellbreaker", "Vindicator", "Chronomancer", "Druid", "Chronomancer", "Berserker", "Firebrand", "Berserker", "Druid", "Reaper", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Vindicator", "Tempest", "Tempest", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1106.9268, 911.2885, 911.3235, 864.3333, 1023.254, 1418.4815, 1477.8824, 1994.6275, 3235.5758, 2534.6739, 1067.0556, 3617.6875], [1072.2222, 934.6304, 525.0656, 1116.566, 771.9273, 1213.1899, 1161.28, 3195.4727, 4499.2857, 699.823, 1341.1286], [3655.6111, 1092.2, 416.9706, 1188.9091, 1159.2344, 1453.7179, 3438.1111, 1314.0533, 4905.9375, 1296.1667, 897.1233, 9372.125], [846.642, 714.3617, 513.2154, 1169.6154, 736.3182, 1813.8171, 926.012, 2702.0345, 3644.1481, 1108.3333, 1137.913], [666.0875, 913.06, 524.0656, 513.4182, 787.375, 994.8519, 554.5412, 2509.8654, 2949.3, 913.4766, 1248.3562, 3643.9167], [1004.3418, 622.2917, 766.6719, 700.9434, 801.2881, 1081.2405, 579.6329, 1222.6447, 3020.5333, 1240.1667, 1283.4366, 74.5862], [366.76, 495.1346, 1218.75, 993.2, 1374.0781, 1329.8875, 562.6941, 2350.4828, 2584.5, 953.6514, 1029.3378], [319.8667, 674.7755, 433.2206, 809.6538, 822.5625, 941.3537, 899.0122, 1691.9481, 1126.1273, 1063.1727, 1209.3562, 105.2235], [502.1375, 543.4667, 853.2679, 872.9636, 1038.6406, 1361.5125, 839.6154, 1109.8667, 2976.6333, 537.1296, 1217.1127], [777.9194, 951.1875, 815.7763, 1278.5526, 3504.7742, 927.4862, 998.527, 7900.6667], [4043.8333, 213.898, 384.0, 931.0189, 515.7576, 638.9375, 752.9176, 2190.15, 3050.2759, 539.9561, 879.973], [357.7407, 434.4783, 427.0923, 425.7843, 359.4154, 654.9383, 716.5412, 2962.2593, 902.3051, 553.5221, 982.5634, 435.3333], [324.4375, 247.5306, 386.35, 688.3396, 464.7049, 370.6585, 718.6364, 1029.0, 1290.1731, 700.6019, 849.8472], [284.1139, 397.7, 338.1493, 527.6038, 653.9062, 551.878, 261.4824, 1059.7273, 2057.3684, 564.0, 751.7606, 10.5893], [320.3951, 625.7273, 467.1719, 608.6909, 659.5469, 436.1923, 599.6364, 2225.1071, 833.7719, 445.4865, 744.9565, 66.963], [982.975, 397.9529, 815.3067, 834.8103, 863.018, 875.8493, 78.1951], [529.8415, 660.8043, 411.5, 765.1111], [236.5663, 344.8846, 512.6667, 848.7885, 389.0], [604.1899, 508.3556, 492.4828, 411.8302]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

