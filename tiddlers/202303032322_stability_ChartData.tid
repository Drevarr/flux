created: 20230303232222000
creator: Drevarr
modified: 20230705163521121
modifier: drevarr
tags: ChartData
title: 202303032322_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Blackchars", "Smol Gluvs", "Demon Sekhmet", "Arcanophage Farra", "Jupi Jupi Jupi", "Seren\u00e1 Joy", "Cerys Fireblade", "Heks Appeal", "Air One Com", "Ryvalia Fazebringer", "Aronorf Xideliesi", "Viral Marketing", "Kahless The Drunk", "Ravioli Fetabringer", "Ace Hammers", "Koralia Danai", "Blanco Padre Guard", "Bella Sassy"];
const professions = ["Renegade", "Scourge", "Berserker", "Spellbreaker", "Firebrand", "Chronomancer", "Berserker", "Scourge", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.258, 5.5642, 0.0, 0.1764, 24.1286, 2.0124, 5.94, 9.6256], [0.0, 4.9572, 0.0, 0.0, 0.187, 1.2705, 0.0, 0.7524, 2.5284, 1.475, 2.0563, 1.4625, 10.2784, 1.0496, 0.6273, 0.0, 7.6437, 0.0, 3.0964, 2.0866, 0.3518, 0.0, 10.8749, 0.774, 2.4552, 3.182], [0.0, 5.0949, 0.2718, 0.0, 0.0, 0.0, 0.0, 1.0716, 2.0124, 6.2689, 0.0, 0.0, 8.176, 0.9496, 1.1849, 1.0873, 5.9065, 0.0, 8.257, 2.0866, 1.2152, 0.0, 14.6131, 0.0, 1.0296, 2.1479], [1.4511, 4.4064, 0.0, 1.6515, 2.1021, 0.0, 0.8208, 0.4644, 1.8438, 2.6928, 2.34, 7.008, 3.3487, 2.2165, 0.0, 9.902, 0.0, 7.4829, 3.7094, 0.0, 0.0, 11.5546, 0.0, 5.8608, 0.0], [2.6629, 19.8288, 0.0, 0.0, 3.5055, 1.4091, 0.2134, 0.0, 0.0, 24.7069, 5.6794, 4.1438, 8.8465], [0.0, 7.5735, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2148, 1.29, 10.694, 3.2069, 0.0, 10.512, 1.0496, 0.0, 0.0, 5.7328, 0.0, 10.0632, 3.0139, 0.0, 0.0, 11.5546, 1.7802, 1.584, 0.0], [1.0771, 4.6818, 1.0664, 0.0, 0.0, 0.0, 0.0, 0.6156, 2.322, 6.8221, 1.5667, 2.145, 7.4752, 1.0496, 0.0, 1.066, 7.1225, 0.1987, 12.1274, 3.0912, 1.0553, 0.0, 18.6912, 2.1672, 6.6528, 1.0341], [0.1197, 5.508, 0.7109, 0.0, 0.5141, 1.7556, 4.5872, 1.2768, 0.774, 10.8784, 0.0245, 1.2675, 12.3808, 1.3495, 1.0455, 1.6843, 3.127, 0.0, 15.7398, 3.6322, 0.7355, 0.2268, 14.953, 2.1672, 5.6232, 3.6593], [1.7653, 10.1898, 0.0, 18.2406, 0.0, 31.4797, 7.2643, 1.9828, 0.0, 42.8198, 3.87, 6.4944, 7.7959], [4.5179, 12.6684, 0.0, 0.0, 3.9106, 0.0, 0.0, 3.762, 1.4964, 8.6659, 6.4627, 0.0, 44.8512, 6.3974, 1.9934, 0.0, 17.8932, 0.0, 12.1274, 0.0, 3.6777, 0.0, 32.9645, 2.2446, 2.772, 11.137], [3.4408, 19.4157, 0.1882, 0.0, 2.4928, 2.3331, 0.6934, 1.9608, 2.4768, 18.6224, 3.721, 2.0475, 35.5072, 9.2963, 0.1115, 0.0853, 18.0669, 0.0, 27.0932, 5.1005, 0.3038, 0.0, 48.2573, 0.3096, 6.8904, 5.0117], [3.7884, 0.0, 3.8076, 7.0692, 12.1691, 3.4272, 5.2163, 47.888, 3.7485, 0.0, 2.6863, 19.9778, 0.0, 31.4797, 5.9506, 1.647, 0.0, 61.511, 2.0124, 6.5736, 6.5231], [3.8447, 19.0026, 2.3419, 0.0, 3.1472, 4.2042, 2.987, 4.2408, 7.5336, 30.7915, 6.5851, 6.6788, 22.8928, 4.0984, 2.1468, 2.5797, 18.7618, 32.5118, 8.8872, 2.6383, 0.0, 44.519, 3.1734, 12.4344, 12.012], [1.1968, 18.0387, 0.2927, 0.0, 1.7605, 2.4948, 2.2936, 2.622, 4.8504, 21.9412, 3.3782, 4.6312, 48.1216, 5.9976, 0.0, 0.4051, 27.1003, 0.0, 38.4465, 11.2056, 2.3026, 1.386, 76.8038, 4.8762, 10.8504, 4.773], [3.2164, 25.0614, 0.0, 0.0, 1.0283, 1.848, 8.1077, 4.2408, 7.0176, 39.0886, 0.6365, 5.6062, 51.1584, 3.7485, 1.394, 0.7675, 28.1426, 38.4465, 13.2149, 0.0, 2.646, 42.8198, 17.5698, 4.5936, 8.2732], [3.5904, 25.6122, 0.0, 0.0, 3.8483, 2.2869, 6.4541, 6.612, 12.5388, 42.9605, 5.6549, 15.3562, 71.248, 12.7449, 3.4014, 1.0234, 40.6505, 0.0, 5.1606, 12.2292, 20.0376, 20.6035], [3.3959, 21.3435, 2.9692, 0.0, 3.5834, 3.5805, 4.9606, 5.4264, 7.3788, 25.9976, 3.8678, 7.9463, 41.3472, 7.1971, 2.6625, 2.2599, 21.1938, 2.1427, 43.8651, 14.5286, 0.0, 2.8728, 48.5971, 6.0372, 18.3744, 13.5235], [3.8746, 19.5534, 5.0184, 0.2381, 6.6527, 6.8838, 7.7876, 6.27, 10.7844, 39.2729, 7.956, 10.3837, 67.2768, 12.7449, 4.3632, 6.8437, 32.4856, 43.8651, 17.6971, 6.476, 0.1764, 79.8624, 10.7586, 20.8296, 15.9896]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

