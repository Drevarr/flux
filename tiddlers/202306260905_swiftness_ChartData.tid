created: 20230626090515000
creator: Drevarr
modified: 20230705163539310
modifier: drevarr
tags: ChartData
title: 202306260905_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Geradenil", "Yngvar The Burdened", "Koralia Danai", "Utopia Skye", "Koralia Danai", "Illusive Heart", "Louie Runesoldier", "Urilstormwalker", "Brace Stonebrow", "Drevarr Moonwillow", "Traidoruns Maximus", "Gestern Yesteryear"];
const professions = ["Vindicator", "Scourge", "Dragonhunter", "Tempest", "Firebrand", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[40.7053, 0.0, 0.0, 174.21, 59.319, 0.0, 28.3853], [0.0, 0.0, 0.0, 2.0627, 0.4966, 7.049, 58.4561, 29.5947, 12.0999, 57.0139, 13.1418, 40.1139, 0.0, 0.0, 75.7435, 27.4963, 68.0007, 5.9321], [102.2591, 169.86, 28.9274, 29.7285, 0.0, 213.5169], [37.1722, 165.3492, 137.4972, 60.2325, 0.0, 0.0, 427.9109], [114.5464, 60.7979, 89.861, 69.7631, 103.1993, 54.1718, 277.4579, 59.3057, 310.3856], [0.0, 30.2049, 12.1456, 19.5636, 273.5762, 0.0, 0.0, 13.6772, 4.9335, 20.455, 76.2352, 64.0418, 34.1056, 0.0, 49.961, 97.1902, 156.8076, 88.9381, 50.74, 67.8221, 182.1033, 0.0, 10.3187, 27.027], [113.9341, 93.0139, 23.3996, 99.6464, 192.463, 192.8358, 14.8702, 5.2907, 11.8118, 835.6501, 42.4021], [304.0494, 203.2184, 177.9787, 763.9729, 132.2932, 15.8763, 87.3642], [105.6398, 107.3696, 35.5191, 239.9496, 380.7099, 119.1221, 51.6688, 10.2374, 584.2614, 223.0293, 43.1297, 94.8948], [89.6322, 46.2176, 55.4829, 31.6491, 114.1486, 116.6795, 111.4366, 120.0237, 131.0761, 203.2419, 236.3844, 289.7454, 142.7518, 14.8952, 21.2544, 847.8488], [43.3972, 15.3038, 78.4924, 197.2725, 31.6175, 133.4362, 265.2184, 63.0732, 0.0, 0.0, 55.6114, 142.5458, 283.6708, 167.1169, 269.8986, 6.0984, 75.7075, 49.1443, 501.0233, 221.221, 33.7572, 126.5141], [0.0, 0.0, 20.6184, 127.2348, 440.2648, 64.3221, 54.0426, 183.1104, 0.1255, 40.8755, 32.224, 61.074, 13.0232, 8.1131, 479.5196, 164.6901, 490.9401, 22.7427, 22.7453, 115.4074, 449.5975, 109.6472, 30.1294, 14.6639]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

