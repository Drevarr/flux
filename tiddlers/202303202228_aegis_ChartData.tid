created: 20230320222849000
creator: Drevarr
modified: 20230705163522594
modifier: drevarr
tags: ChartData
title: 202303202228_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Fribble Bibble", "Kiloak", "Drevarr Moonwillow", "Ark Darkness", "Raelyn Sunray", "Avanda Corone", "Zaylen Harker", "Viral Marketing", "Koralia Danai", "Johosh The Great", "Solus Sanctus", "Bella Sassy"];
const professions = ["Chronomancer", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[20.6774, 0.0, 0.2448, 45.0015, 0.0, 32.6543, 20.489, 75.3948, 57.0206, 15.4462, 0.0, 0.0, 0.0, 49.83, 20.1859, 2.2207, 21.6154, 8.464, 13.6897, 80.136, 19.1565, 19.1556, 7.7827, 8.0634], [0.3427, 9.5515, 1.6128, 2.1945, 15.7376, 0.0, 4.967, 187.0128, 6.6942, 13.651, 0.0, 0.0, 10.3629, 57.1384, 5.2013, 12.6158, 34.7208, 14.6464, 34.7217, 119.0592, 8.8236, 11.4689], [3.7057, 29.9574, 0.0, 0.0, 46.2387, 351.9991, 0.0, 16.821, 92.3335, 53.9488, 0.4803, 219.1147, 0.0, 25.012, 0.0, 7.7924], [6.7021, 8.3398, 21.2112, 10.2885, 8.4915, 7.2478, 11.6415, 328.1148, 16.2574, 13.5014, 0.0, 0.3478, 35.8195, 129.1594, 0.0, 7.749, 63.3995, 18.032, 7.5482, 228.5021, 28.9476, 46.2825, 6.6067, 3.4197, 23.7499], [38.247, 4.3967, 74.6441, 27.4739, 556.4052, 186.3629, 20.4578, 0.0, 0.0, 52.0397, 94.2119], [454.0536, 212.1835, 28.3866, 26.9997, 48.1572, 101.9955, 98.9956, 46.8425, 37.3275, 51.06, 71.1344, 30.0899, 139.8946], [66.7964, 97.9871, 81.0886, 142.8838, 307.883, 245.6057, 44.6512, 229.0892, 54.1696, 3.8427, 224.8387, 29.2959, 9.5981, 286.6046, 2.6426], [6.5498, 17.4874, 54.936, 67.545, 0.0, 63.1745, 512.6004, 98.3814, 20.0838, 0.0, 13.3207, 25.344, 270.5437, 13.6843, 46.7302, 182.3693, 17.5904, 15.5767, 328.0997, 25.2711, 22.5719, 0.0, 133.3675, 21.2428], [825.9732, 151.4572, 35.1934, 36.4077, 3.9161, 71.6954, 220.315, 36.1922, 39.501, 20.7644, 92.5888, 20.1057, 353.9722, 39.8997, 37.0097, 5.0706, 48.7872], [40.6694, 2.0552, 9.0144, 220.134, 41.0422, 55.7762, 123.6327, 921.1644, 302.0776, 43.6832, 236.578, 44.4544, 82.5842, 504.6278, 26.1999, 47.1365, 139.6762, 27.8832], [43.6397, 71.6126, 18.144, 116.793, 18.2284, 99.6961, 39.0378, 1038.258, 457.9577, 28.611, 32.8189, 72.0468, 113.0906, 242.9046, 28.8547, 23.9085, 269.5968, 104.144, 45.6666, 445.0982, 64.0872, 66.4141, 37.3217, 45.8058], [128.1392, 19.0436, 5.6448, 91.6275, 30.9468, 157.6782, 274.5066, 922.0068, 349.4154, 0.8976, 10.8166, 40.0529, 65.4438, 366.6159, 31.2696, 31.3268, 139.6491, 101.2, 67.3162, 506.6885, 39.8223, 47.9499, 191.3252, 69.4879], [32.5203, 106.3616, 75.1824, 145.749, 59.9689, 77.0075, 258.9846, 916.9524, 594.9506, 65.6744, 28.1065, 25.9006, 220.9434, 363.6926, 121.4251, 46.7775, 470.9434, 98.0352, 93.4947, 748.6992, 65.8287, 59.8662, 40.3744, 300.4012, 26.5958]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

