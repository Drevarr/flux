created: 20230523000132000
creator: Drevarr
modified: 20230705163531283
modifier: drevarr
tags: ChartData
title: 202305230001_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Hyde En Sikh", "Black Raspberry Pie", "Cat Wigglebooty", "Primal Clone", "Tribal S", "Fribble Bibble", "Elonith Primal", "Blanco Padre Guard", "Gavann", "Arriasa", "Miphest\u00f6", "Drevarr Moonwillow", "M\u00e4raas", "Crusader Siolith", "Sygaldry Verdandi", "Bella Sassy", "Koralia Danai"];
const professions = ["Chronomancer", "Chronomancer", "Scrapper", "Chronomancer", "Druid", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Druid", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[40.1793, 79.1544, 41.958, 211.7707, 27.5652, 27.8185, 27.1022, 261.5042, 0.0, 0.0, 353.2432], [26.8527, 0.0, 80.4066, 67.1328, 216.6028, 29.6689, 0.0, 14.6485, 386.8645, 30.3613, 11.3652, 295.3476], [15.8802, 0.0, 98.5629, 91.854, 171.0133, 0.0, 7.6875, 19.191, 462.6873, 0.0, 33.3576, 311.8892], [59.8899, 0.0, 66.0962, 134.8326, 228.3678, 23.7689, 35.5265, 42.3632, 397.9852, 0.0, 40.6638, 366.85], [740.367, 2.9396, 0.0, 656.5948], [111.6801, 0.0, 143.5512, 33.1128, 397.9105, 4.2799, 53.5665, 65.127, 592.0914, 31.2174, 754.7772], [77.2065, 86.4885, 80.7408, 516.1911, 18.812, 57.6665, 0.0, 639.944, 78.1585, 43.6896, 656.0612], [93.1665, 116.0037, 223.965, 456.3155, 14.6773, 0.0, 52.0608, 784.8497, 1.5708, 28.2654, 799.8664], [0.9997, 224.2261, 323.19, 711.1546, 0.0, 99.4259, 1068.5953, 19.3208, 0.0, 391.3956], [104.7375, 0.0, 177.9856, 162.8424, 564.932, 18.812, 49.569, 177.9765, 900.4373, 4.2412, 72.0288, 778.7892], [95.76, 0.0, 216.9814, 352.1108, 33.8036, 19.1265, 0.0, 1556.8938, 1.7952, 0.0, 834.8172], [102.3435, 5.1277, 187.019, 152.523, 580.6888, 30.7086, 90.1795, 97.9458, 1085.7818, 30.0366, 824.412], [105.8148, 0.0, 142.8357, 152.8632, 516.1911, 19.4649, 32.2465, 0.0, 1029.1675, 14.4738, 0.0, 1193.93], [104.0991, 93.4648, 322.7364, 573.3356, 79.0928, 38.827, 61.8094, 1120.4918, 21.98, 37.3428, 1065.0656], [156.9267, 257.0506, 185.409, 704.2217, 53.3894, 65.5795, 46.5485, 1131.2754, 73.9847, 26.8632, 1111.4888], [184.8567, 187.1085, 445.8888, 691.6163, 84.3157, 54.407, 137.859, 1339.5352, 147.231, 1081.0736], [173.7645, 0.0, 277.264, 372.9726, 902.9668, 62.602, 68.0805, 157.6115, 1958.2489, 142.1388, 1125.6292]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

