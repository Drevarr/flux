created: 20230708010915000
creator: Drevarr
tags: ChartData
title: 202307080109_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Pet Pirate", "Etchery Howls", "Pale Pam", "Tribal S", "Arriasa", "Drevarr Moonwillow", "Zaedy Zae"];
const professions = ["Druid", "Druid", "Druid", "Druid", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1872.3692, 51.5209, 33.2023, 1999.1068, 2016.8288], [72.7348, 723.4992, 289.4298, 105.0682, 299.5512, 116.9122, 138.0725, 312.4251, 378.0797, 50.5958, 203.3825, 1120.245, 40.5821, 365.2133, 49.692, 42.6802, 304.5094, 59.0382, 156.078, 498.6423, 160.3716, 133.1343, 195.1734, 110.0585, 24.9984, 44.4446, 217.0409, 181.2096, 510.853], [360.0576, 291.5316, 444.0522, 705.1219, 354.9, 57.0375, 449.4672, 15.9444, 118.9641, 82.0109, 70.2214, 1235.0425, 498.2085, 182.0006, 208.0619, 291.9924, 567.6837, 1019.3508], [450.206, 645.78, 375.6259, 739.0022, 29.0472, 392.0085, 359.4427, 469.9341, 101.3438, 36.5472, 132.7484, 524.05, 0.0, 239.6993, 96.1565, 51.0895, 22.663, 237.7243, 231.6491, 630.1425, 0.0, 224.7804, 188.2813, 128.3339, 95.6699, 190.3793, 93.0204, 316.0559, 406.1295, 165.278, 16.744], [450.6078, 1071.3744, 406.0838, 391.7779, 326.6328, 135.8077, 303.3576, 525.7008, 503.4757, 227.6813, 116.9472, 517.3525, 38.3645, 291.4268, 278.0194, 98.5416, 156.5741, 177.8443, 172.753, 660.4611, 973.2008, 565.5312, 445.4842, 489.6245, 29.2051, 118.5584, 298.3394, 620.532, 562.1218, 536.8545, 772.7996, 175.882, 9719.0348, 411.0559, 28.1463, 2923.692, 2221.9449], [520.3957, 505.2876, 399.2124, 541.057, 396.708, 272.0542, 438.7656, 191.1006, 409.1585, 241.9891, 164.4689, 1340.0875, 230.4641, 817.9785, 119.4576, 176.8276, 528.482, 770.1849, 1296.5238, 407.0972, 460.8279, 443.9961, 254.0749, 269.4214, 278.5171, 337.9464, 424.4668, 404.775, 574.6759, 83.384, 10621.3741, 234.1539, 157.3244, 2768.1596, 1900.801], [165.8301, 791.1228, 413.1469, 554.0803, 455.1768, 179.0977, 375.7354, 429.57, 191.9315, 261.7142, 356.9733, 1242.445, 76.4518, 768.9442, 150.2371, 189.4749, 0.0, 368.8768, 493.8468, 1010.2014, 117.024, 308.1429, 463.8894, 69.4465, 296.3923, 198.4166, 218.2387, 304.9596, 247.5955, 343.287, 747.7949, 258.426, 15415.9207, 170.0598, 43.4834, 3232.7479, 2803.9634]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

