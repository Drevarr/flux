created: 20230218220736000
creator: Drevarr
modified: 20230705163519541
modifier: drevarr
tags: ChartData
title: 202302182207_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Tseli", "Tegan Parker", "Primal Clone", "Sheep Poh", "Kahless The Drunk", "Liyo Morgaine", "Kira Dragonblaze", "Legacy Of Mathus", "Ark Est Destroyer", "Krahli\u00e1", "Drevarr Moonwillow", "Nelliel T", "Kalenthian", "Morv\u00e4rth", "Newtype Khan", "Dark Sidiuz", "Rina Of Theros", "Be\u00eb", "Flower Redrose", "Minka Bringer", "Aveliad Frostmoon", "Kia Forte"];
const professions = ["Berserker", "Tempest", "Chronomancer", "Catalyst", "Firebrand", "Herald", "Dragonhunter", "Berserker", "Spellbreaker", "Untamed", "Scrapper", "Scourge", "Mechanist", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 2506, 0, 1237, 0, 2490, 0, 1129, 0, 0, 0], [0, 0, 2496, 1244, 0, 0, 0, 0, 3664], [3365, 1363, 591, 0, 0, 0, 0, 0, 0, 2911], [3386, 3201, 0, 0, 2074, 0, 0, 0, 0], [0, 3384, 0, 2721, 0, 0, 0, 0, 0, 0, 2699], [522, 9152], [5313, 1763, 333, 2591, 0], [2318, 0, 0, 3383, 0, 628, 0, 0, 0, 0, 3687], [2496, 2687, 4984, 0], [0, 10856], [2682, 1802, 2453, 1451, 0, 1287, 1379, 1399, 0, 329, 4935], [4992, 0, 8351, 164, 2314, 4117, 0], [9189, 703, 3030, 0, 726, 3677, 2231, 0, 0, 949], [3518, 5761, 712, 0, 0, 2011, 0, 0, 0, 8943], [4750, 4750, 3439, 6823, 0, 1176, 1180, 0, 532, 0, 434], [9306, 4739, 4104, 5485], [2319, 4901, 3737, 5164, 0, 0, 162, 0, 0, 1750, 6273], [6605, 5387, 5818, 2717, 0, 0, 0, 0, 0, 7635], [7279, 13697, 0, 9303, 1859, 2134, 148, 6889], [5715, 3337, 10198, 9950, 0, 2323, 1503, 0, 3324, 531, 9669], [17244, 16271, 10495, 8883, 0], [14901, 0, 15657, 12026, 782, 2, 759, 24415]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

