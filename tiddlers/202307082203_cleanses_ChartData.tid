created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Aronorf Xideliesi", "Chocolate Teapot", "Newtype Khan", "Primal Clone", "Rahani Sunray", "Venomina The Siren", "Tegan Parker", "Mechanical Dark", "Sakis Ranger", "Arriasa", "Drevarr Moonwillow", "Artakama Nahid", "Zaedy Zae"];
const professions = ["Firebrand", "Firebrand", "Chronomancer", "Spellbreaker", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Scrapper", "Druid", "Druid", "Scrapper", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0149, 0.1721, 0.2326, 0.1786, 0.3276, 0.0, 0.16, 0.6, 0.0351, 0.4462, 0.16, 0.0862, 0.0943, 0.0], [0.1343, 0.2541, 0.5349, 0.0, 0.0, 0.3103, 0.0, 0.26, 0.5778, 0.1228, 0.0, 0.12, 0.069, 0.0943, 0.0172], [0.0, 0.5902, 0.3256, 1.0714, 0.3421, 0.431, 0.0759, 0.0, 0.12, 0.2759, 0.2453, 0.1207], [0.0149, 0.1721, 0.4186, 0.6786, 0.1053, 0.6897, 0.1139, 0.0488, 0.24, 0.3333, 0.5614, 0.1692, 0.08, 0.4138, 0.217, 0.3966], [0.5224, 0.4508, 0.5116, 0.75, 0.0, 0.7759, 0.038, 0.0, 0.36, 0.2667, 0.2281, 0.0308, 0.0, 0.1724, 0.217, 0.431], [0.0984, 0.7442, 1.5357, 0.1053, 0.3534, 0.4177, 0.2439, 0.32, 0.8, 0.0877, 0.0615, 0.6, 0.4655, 0.217, 0.1724, 0.1593], [1.2558, 0.0357, 0.2368, 1.9397, 0.0732, 0.54, 0.4667, 0.0702, 0.3231, 0.36, 0.5862, 0.1887, 0.1552], [1.25, 0.0526, 1.431, 0.3165, 0.1707, 0.32, 0.9778, 1.0877, 0.0, 0.72, 0.6321, 0.2414], [0.2308, 1.3333, 0.9655, 0.6698, 0.6724, 0.8296], [1.3197, 2.0233, 1.6429, 0.0, 2.0259, 0.481, 0.1463, 0.5, 1.1333, 0.8246, 0.8769, 0.5333, 0.9655, 0.1321, 0.1897], [1.4836, 0.2791, 1.8929, 0.5789, 2.1466, 1.0506, 0.1707, 0.94, 0.3556, 0.0, 1.2769, 1.52, 0.8448, 0.5943, 0.7586], [2.0149, 1.5082, 1.2791, 1.8571, 0.5263, 1.4483, 0.6456, 0.3171, 1.3, 2.6889, 0.5965, 0.9538, 1.1467, 1.6552, 0.8491, 1.3103, 0.0074], [1.4627, 0.7623, 1.8372, 0.9643, 0.9737, 1.6207, 0.7975, 0.2683, 0.98, 2.2444, 1.0877, 1.0462, 1.5467, 1.2759, 1.0849, 0.7759, 1.2222], [1.4925, 0.3033, 2.9535, 0.7857, 0.7895, 2.5948, 0.7975, 0.0, 1.26, 2.3333, 1.6491, 0.3846, 1.3867, 1.3793, 0.8774, 1.1552, 1.3259]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

