created: 20230626220846000
creator: Drevarr
modified: 20230705163539357
modifier: drevarr
tags: ChartData
title: 202306262208_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Grasszanine", "Solus Sanctus", "Newtype Khan", "Etchery", "Cat Wigglebooty", "Drumina", "Gavann", "Rahani Sunray", "\u00c1rkantor", "Crusader Siolith", "Etchery Howls", "Black Raspberry Pie", "Cyr", "Primal Clone", "Eibh\u00ebar", "Mike The Archmagus", "My Birthday Girl", "Ak\u00e1nt\u00f3r", "Zadey Starbolt", "Zadie Miststep", "Tegan Parker", "Arriasa", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Scrapper", "Scrapper", "Druid", "Firebrand", "Chronomancer", "Vindicator", "Firebrand", "Druid", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Scrapper", "Druid", "Scrapper", "Tempest", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1583, 0.0, 0.3636, 0.2097, 0.6327, 0.1145, 0.1176, 0.3171, 0.1714, 0.1071, 0.2558, 0.1959, 0.386, 0.2236, 0.0, 0.2727, 0.1264, 0.0, 0.2561, 0.1049], [0.1387, 0.0, 0.2273, 0.0323, 0.4898, 0.4427, 0.1961, 0.2195, 0.2857, 0.0, 0.3721, 0.3299, 0.2632, 0.3043, 0.0, 0.2197, 0.2989, 0.0, 0.1707, 0.3077], [0.0588, 0.0, 0.3788, 0.5484, 0.5102, 0.1679, 0.2745, 0.5122, 0.2143, 0.2143, 0.5581, 0.4021, 0.2982, 0.3975, 0.16, 0.2273, 0.1494, 0.0, 0.1829, 0.1608], [0.1989, 0.3182, 0.4194, 0.2245, 0.1221, 0.1373, 0.122, 0.2429, 0.1667, 0.2093, 0.2474, 0.3333, 0.2733, 0.13, 0.3258, 0.069, 0.0278, 0.3902, 0.1958], [1.0814, 1.6186, 0.9298, 1.3975], [0.2801, 0.0, 0.6818, 0.7258, 1.4694, 0.2519, 0.1961, 0.0, 0.6286, 0.0119, 0.0, 0.1959, 0.0, 0.1863, 0.09, 0.0, 0.2184, 0.0244, 0.0629], [0.6082, 0.7895, 0.5342, 0.61, 0.6591, 0.5632, 0.0, 1.2073, 0.8951], [0.2941, 0.1667, 0.0484, 0.9388, 0.3588, 0.1176, 0.0, 0.5, 0.2674, 0.2165, 0.6491, 0.2112, 0.01, 0.3409, 0.3793, 0.0, 0.1341, 0.4266], [0.0364, 0.5909, 0.3065, 0.3673, 0.3893, 0.2549, 0.9268, 0.2143, 0.0952, 0.7093, 0.4948, 0.2807, 0.8571, 0.36, 0.6364, 0.3678, 0.0, 0.6951, 0.3916], [1.2791, 0.6804, 0.4386, 1.0, 0.81, 0.947, 0.5977, 0.0, 0.8293, 0.5734], [0.2129, 0.0, 0.6667, 0.6774, 0.4898, 0.3359, 0.3137, 0.3171, 0.4857, 0.3571, 0.5, 0.3918, 1.0, 0.5031, 0.13, 0.4091, 0.4713, 0.0, 0.4024, 0.3287], [0.0, 2.2879, 1.0484, 1.0992, 2.3725, 3.1951, 1.3429, 1.2857], [0.2955, 0.0, 0.9394, 0.129, 0.6735, 0.3588, 0.5098, 0.3171, 0.2143, 0.3214, 0.407, 0.4639, 0.6842, 0.472, 0.23, 0.4242, 0.4483, 0.0, 0.3415, 0.5245], [0.7143, 0.7857, 0.6744, 1.0412, 1.0175, 0.4907, 0.43, 1.3258, 0.8506, 0.0833, 1.0976, 1.0559], [0.2983, 0.0, 0.2121, 1.0, 0.7959, 0.4962, 0.5882, 0.3902, 1.0143, 0.2024, 1.2209, 0.4742, 0.5088, 1.1118, 0.13, 0.9394, 0.6552, 0.0, 0.6098, 0.6853], [0.3627, 0.0, 0.7576, 0.8387, 0.3878, 0.2748, 0.6471, 0.1707, 0.7857, 0.1786, 1.1628, 1.134, 1.0351, 1.1553, 0.13, 0.7045, 0.6207, 0.0, 0.8902, 0.993], [1.9482, 1.7719], [0.1091, 1.2727, 1.2258, 0.6939, 0.5191, 0.9804, 0.7073, 0.5714, 0.6071, 1.4651, 1.6392, 1.386, 0.5901, 0.68, 1.25, 0.908, 0.2222, 1.0122, 1.3566], [1.105, 0.0, 2.0303, 1.5968, 1.9592, 1.4885, 1.0, 1.0244, 1.8, 1.0714], [1.7907, 2.0825, 2.4211, 1.5031, 1.34, 1.6288, 1.6322, 0.25, 1.622, 1.9021], [1.2633, 0.0909, 1.2879, 2.8548, 2.4082, 1.5649, 1.7647, 1.7561, 1.3857, 1.5238], [0.7535, 0.6947, 1.0392, 2.0488, 1.3429, 1.2976, 1.3023, 1.6907, 2.2456, 2.2919, 0.97, 1.8182, 1.4828, 0.4444, 2.2073, 1.5455], [1.4426, 0.0, 1.2273, 0.5161, 3.4082, 1.3511, 3.1176, 0.5854, 2.0143, 0.4186, 2.2268, 1.8947, 1.2112, 1.33, 1.5758, 1.5402, 0.1389, 1.4024, 1.6154], [1.416, 0.0909, 1.1364, 1.6452, 1.2449, 1.1145, 1.9608, 1.2927, 2.1857, 1.6548, 1.2209, 1.6907, 1.2632, 2.5901, 0.69, 1.6742, 1.5862, 0.4722, 2.3049, 1.6294], [1.7689, 0.2364, 1.4697, 1.6452, 2.6327, 1.0305, 1.7843, 1.6829, 1.7857, 1.2738, 2.4419, 2.0206, 1.7193, 2.4534, 1.1, 1.4773, 1.4828, 0.4167, 2.061, 1.3986]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

