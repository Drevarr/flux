created: 20230506002551000
creator: Drevarr
modified: 20230705163528388
modifier: drevarr
tags: ChartData
title: 202305060025_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Mrs Stealth Monkey", "Lucas Ryn", "Miphest\u00f6", "\u00c1rkantor", "Tegan Parker", "Stoic Rapidfire", "Artakama Nahid", "Mac Adaymia", "Zaidy Sagemist", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Firebrand", "Tempest", "Vindicator", "Tempest", "Druid", "Tempest", "Vindicator", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[187.599, 132.0885, 82.1511, 0.0, 624.0208, 288.711, 509.1909, 170.7829, 3.1786, 9.8246, 656.3592, 80.2414, 168.072, 2003.076], [157.762, 651.8936, 146.236, 28.8378, 0.0, 32.993, 540.1251, 302.8865, 153.3939, 39.2238, 28.1942, 25.2926, 366.0552, 138.7662, 946.674, 1357.9677], [515.1485, 807.0939, 207.1845, 29.8368, 19.4283, 1202.0104, 416.2901, 494.0335, 54.3312, 0.0, 84.2404, 1144.8864], [810.1412, 2079.005, 572.607, 224.3421, 109.0274, 3015.7913], [365.0302, 807.3552, 87.3662, 35.1315, 0.0, 885.3597, 229.2781, 462.9101, 125.1835, 133.7885, 56.3162, 729.8424, 92.066, 915.372, 1963.8], [453.3769, 1310.0579, 289.2537, 127.539, 56.8128, 25.6349, 1822.319, 456.2154, 271.7235, 217.2971, 174.3667, 136.8724, 929.88, 87.603, 1185.246, 1174.8433], [570.5207, 1311.103, 421.141, 66.9663, 50.2856, 1575.8289, 626.5809, 645.4063, 168.6485, 268.3613, 190.06, 1459.9116, 287.7925, 1320.888, 2906.915], [728.7271, 2183.7782, 615.519, 174.159, 48.1836, 27.8107, 3166.1354, 1103.3442, 742.5154, 234.2894, 248.3405, 307.4001, 1837.5336, 178.5648, 1319.196, 2227.9311], [1023.9865, 2228.9797, 525.3368, 145.9206, 13.4969, 135.2161, 3728.9049, 1290.3561, 984.5301, 0.0, 351.8449, 2198.826, 428.031, 2695.638, 5211.4343], [1938.7771, 1226.2774, 4658.0998, 810.7686, 393.3396, 82.7257, 82.7595, 6965.5721, 2052.3191, 1652.6727, 388.1354, 307.3709, 251.0839, 3506.1012, 677.4052, 4250.022, 8301.9645]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

