created: 20230130220929000
creator: Drevarr
modified: 20230705163518329
modifier: drevarr
tags: ChartData
title: 202301302209_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Tegan Parker", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Kahvokean", "Raziel Umbra", "Lord Erin The Wise", "Bambiae", "Black Raspberry Pie", "Mac Aaroni", "Vinthry Stormgrave"];
const professions = ["Chronomancer", "Tempest", "Scrapper", "Scrapper", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[226.9994, 90.405, 35.8401, 0.0, 0.0, 0.0, 0.1709, 56.0795, 19.6291, 29.843, 0.0, 0.0, 4.4798, 83.6554, 35.7012, 0.0, 36.4908, 28.5046, 13.1567, 0.0, 0.0, 0.0, 14.5297], [0.0, 14.0199, 0.0, 82.4496, 132.7317, 76.6618, 0.0, 109.368, 0.0, 32.989, 0.0, 125.2461, 0.0, 27.5176, 0.0, 31.5528, 9.5739, 0.0, 117.3707], [193.4598, 122.9288, 45.7493, 10.8574, 32.142, 8.2173, 28.1098, 126.9409, 35.8579, 23.2613, 7.5703, 61.572, 42.8155, 8.0352, 2.688, 26.0878, 8.6104, 61.5888, 5.3961, 14.6165, 6.1029, 10.633, 73.3816], [280.4682, 116.865, 70.8467, 0.0, 29.7979, 11.0838, 12.2179, 140.656, 59.892, 35.7034, 19.6606, 90.972, 72.0446, 30.8909, 0.0, 37.4143, 5.3956, 29.689, 7.8819, 18.6337, 0.0, 13.5158, 18.8619], [77.7728, 539.6738, 78.9963, 0.0, 70.5502, 43.0294, 30.0749, 83.8145, 43.1222, 20.286, 20.742, 40.74, 116.6962, 26.6947, 0.0, 86.4415, 43.0144, 62.181, 0.0, 0.0, 43.2306, 0.0], [346.089, 276.1762, 190.2209, 0.0, 26.507, 8.2492, 108.7651, 257.2343, 121.0978, 114.5934, 0.0, 125.916, 113.3914, 79.9056, 33.2477, 0.0, 22.2404, 46.389, 0.0, 17.4644, 7.3861, 38.1701, 42.9892], [889.0403, 868.2188, 165.031, 0.0, 70.46, 33.3151, 126.3658, 156.5045, 130.9896, 35.3427, 0.0, 59.136, 43.7702, 75.4862, 0.0, 105.9869, 35.5132, 44.0597, 0.0, 0.0, 13.0284, 0.0], [1105.832, 1379.7788, 289.4062, 33.3634, 145.3379, 46.6921, 192.4109, 387.5278, 226.1986, 81.5948, 33.2483, 242.424, 179.6342, 91.0656, 15.2979, 75.1558, 22.8608, 101.7794, 0.0, 40.6433, 1.8753, 33.6773, 85.4453], [1535.0406, 1482.3113, 310.8918, 33.1452, 77.2671, 33.124, 317.495, 372.5935, 188.1768, 144.6166, 136.2098, 188.16, 167.8104, 146.3299, 88.1074, 85.6237, 8.2908, 86.3822, 0.0, 19.2938, 33.2126, 50.2819, 63.3841], [1830.0912, 1822.9837, 341.1752, 8.7023, 161.1159, 43.0931, 67.9248, 431.8733, 173.1072, 239.7354, 57.2347, 246.96, 152.7552, 111.5107, 77.7885, 173.2918, 43.146, 86.2638, 33.3869, 82.1542, 43.0003, 68.0285, 138.4321], [1666.2822, 2171.3737, 333.396, 153.5876, 74.8475, 177.1171, 596.9116, 263.7566, 256.2347, 38.517, 134.568, 136.8922, 123.5189, 81.8836, 90.326, 57.3588, 92.1858, 0.0, 38.0783, 0.0, 40.6786]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

