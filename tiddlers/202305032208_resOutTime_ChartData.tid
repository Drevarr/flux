created: 20230503220838000
creator: Drevarr
modified: 20230705163528171
modifier: drevarr
tags: ChartData
title: 202305032208_resOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Slautorn", "Tegan Parker", "Binkety Bonk", "Blancooo Padreee", "Inedible Plant", "Zaylen Harker", "Maaaathexxs", "Sub Train", "Husky Guard", "Hauzzy", "Ryvalia Fazebringer", "Bella Sassy", "Belvyn Brightblade", "Eibh\u00ebar", "Kary\u00edna", "Primal Clone", "Sygaldry Verdandi", "Mac Adaymia", "Skye Nightroad", "Venomina The Fierce", "Farra The Bloodless", "Koralia Danai", "Solus Nex", "Smol Daddy Tika", "Newtype Khan"];
const professions = ["Weaver", "Tempest", "Scrapper", "Spellbreaker", "Vindicator", "Firebrand", "Scourge", "Firebrand", "Dragonhunter", "Berserker", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Vindicator", "Chronomancer", "Firebrand", "Vindicator", "Scrapper", "Spellbreaker", "Vindicator", "Firebrand", "Scourge", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Time Spent Ressurecting per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 886.38, 0.0, 0.0, 1031.04, 4101.79], [0.0, 2215.95, 0.0, 0.0, 1718.4, 2237.34], [0.0, 687.36, 7084.91], [4998.24, 1060.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3356.01], [5553.6, 1325.45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 886.38, 0.0, 0.0, 2062.08, 0.0], [11107.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1491.56], [9996.48, 1590.54, 0.0, 0.0, 0.0, 0.0], [4442.88, 2650.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1031.04, 2610.23], [6664.32, 1325.45, 0.0, 0.0, 0.0, 308.7, 0.0, 0.0, 3545.52, 0.0, 0.0, 0.0, 0.0], [3887.52, 2120.72, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3988.71, 0.0, 0.0, 343.68, 2237.34], [10551.84, 1855.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3102.33, 0.0, 0.0, 1374.72, 1118.67], [7775.04, 2915.99, 0.0, 0.0, 0.0, 0.0, 2659.14, 0.0, 1031.04, 2610.23], [14439.36, 2915.99, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1772.76], [10551.84, 1325.45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3988.71, 0.0, 0.0, 343.68, 4101.79], [2221.44, 3181.08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7091.04, 0.0, 0.0, 687.36, 4101.79], [2221.44, 4241.44, 0.0, 0.0, 0.0, 0.0, 95.88, 0.0, 3988.71, 0.0, 0.0, 2405.76, 4847.57], [7775.04, 1060.36, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3545.52, 0.0, 8592.0, 2983.12], [22769.76, 530.18, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1772.76, 0.0, 0.0, 5155.2, 1118.67], [11662.56, 2385.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1329.57, 0.0, 9966.72, 1491.56], [10551.84, 2385.81, 0.0, 0.0, 0.0, 0.0, 0.0, 10636.56, 0.0, 4811.52, 745.78], [5553.6, 3446.17, 0.0, 0.0, 0.0, 0.0, 0.0, 3102.33, 0.0, 0.0, 5498.88, 10440.92], [15550.08, 3976.35, 0.0, 0.0, 0.0, 0.0, 10636.56, 0.0, 0.0, 343.68, 2610.23], [4442.88, 2120.72, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4431.9, 0.0, 0.0, 0.0, 19017.39], [34987.68, 2385.81, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5761.47, 0.0, 0.0, 3780.48, 2237.34], [29989.44, 3976.35, 0.0, 0.0, 0.0, 0.0, 0.0, 137.24, 15954.84, 0.0, 0.0, 4124.16, 4101.79]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

