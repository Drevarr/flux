created: 20230213220222000
creator: Drevarr
modified: 20230705163519247
modifier: drevarr
tags: ChartData
title: 202302132202_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Zady Stardust", "Gavann", "Koralia Danai", "Zaylen Harker", "Drevarr Moonwillow", "Sygaldry Verdandi", "Veron Blackburn", "\u00c9\u00efbhear", "Ravioli Fetabringer", "High Sorcer Baradun", "Bella Sassy", "Grasszanine", "Abigail Ryn", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Herald", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Spellbreaker", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 8.4378, 0.0, 7.6705, 23.5812, 6.396, 10.5448, 59.786, 10.3776, 37.9176], [2.6921, 0.0, 6.3636, 4.0733, 32.0705, 7.8792, 115.992, 3.9198, 16.5168], [33.696, 60.8304, 11.4513, 6.9075, 2.9624, 34.0918, 0.0, 10.9368, 68.02, 4.0848], [47.808, 61.8883, 9.7236, 0.0, 4.9197, 20.0778, 4.4296, 65.514, 3.8916, 16.872], [33.552, 67.9714, 9.3619, 0.0, 9.0459, 30.184, 5.4096, 106.684, 7.0218, 26.0184], [22.176, 73.261, 11.5317, 0.096, 6.5268, 16.2403, 32.7443, 11.2504, 97.376, 10.7724, 16.6944], [39.312, 73.5254, 11.5317, 0.0, 0.9971, 2.9624, 41.7725, 6.2244, 13.4064, 93.796, 5.2734, 16.7832], [118.224, 184.0781, 10.8084, 0.642, 9.4095], [34.272, 89.1298, 14.8666, 7.1251, 13.4895, 40.425, 6.9576, 10.6624, 126.374, 4.794, 19.4472], [56.016, 121.3963, 12.5763, 0.546, 3.7166, 4.2849, 42.042, 9.0168, 14.1904, 107.758, 3.5814, 26.64], [40.0207, 34.3784, 276.018, 25.38, 64.2024], [55.44, 106.321, 13.4603, 1.0878, 10.7387, 49.9922, 13.9308, 9.5256, 136.04, 11.2518, 34.0992], [131.472, 213.9643, 22.6615, 18.6376, 50.2021, 113.3247, 12.1524, 42.4536, 341.174, 19.5426, 55.5], [187.2, 325.3104, 40.4211, 11.2587, 31.1052, 195.3875, 44.492, 304.658], [105.408, 363.66, 41.1443, 8.034, 29.0624, 86.0683, 145.1257, 11.5284, 61.936, 448.574, 34.2912, 93.24], [125.424, 408.3571, 52.4751, 32.8878, 79.2442, 153.3455, 7.41, 53.2728, 516.594, 38.7186, 98.7456]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

