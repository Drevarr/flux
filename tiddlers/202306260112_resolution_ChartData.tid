created: 20230626011254000
creator: Drevarr
modified: 20230705163537723
modifier: drevarr
tags: ChartData
title: 202306260112_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Good Sir Ragnarok", "Eoooeee", "Crusader Siolith", "Belvyn Brightblade", "Sub Train", "Mmathuss", "Imalou", "Yummy Kiwi", "Gestern Yesteryear", "Traidoruns Maximus", "Sygaldry Verdandi", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[83.8089, 68.3059, 100.4571, 24.5944, 84.5848, 58.8403, 0.0, 44.3097, 200.041, 137.8915, 138.384, 139.5853, 172.0013, 138.9678], [21.2134, 0.0, 178.464, 630.005, 219.5842, 310.8256, 123.8642], [168.952, 82.3032, 111.4488, 158.7264, 75.4406, 184.9427, 96.1262, 205.7098, 110.2752, 64.2114, 130.0772, 20.1274, 76.7906], [136.802, 0.0, 0.0, 335.72, 473.7247, 172.9354, 216.9632, 17.836, 188.4042, 161.1162, 58.3664], [106.9888, 0.0, 0.0, 27.632, 478.4728, 37.8101, 0.0, 235.7806, 38.416, 137.2682, 73.2085, 74.4401, 60.7253, 0.0, 108.773, 36.3796, 14.0024, 41.7715, 0.0, 0.0, 91.0022, 141.1488, 113.6736, 76.3333, 166.1121, 72.4838, 103.0014], [256.9032, 313.5245, 304.584, 380.6436, 254.1949, 18.212, 113.0585, 66.1513, 153.7168, 56.1439, 110.4184, 169.2365, 23.4859, 30.9716, 163.968, 240.9134, 84.8736, 127.2553, 223.9997, 113.5411, 32.8495], [144.3648, 0.0, 35.5318, 378.488, 411.0498, 155.1686, 28.3381, 205.9426, 132.0413, 558.501, 160.0628, 56.2399, 9.8389, 22.059, 154.5103, 0.0, 101.2301, 0.3929, 114.3045, 103.2706, 158.521, 109.6992, 18.481, 147.8949, 89.7811, 70.415], [37.8491, 293.5075, 100.7048, 906.066, 233.9417, 112.563, 99.4354, 121.6323, 163.6832, 47.2181, 88.5592, 138.2707, 40.0957, 164.0573, 160.513, 236.4451, 127.584, 131.2546, 203.9448, 166.5523, 111.9879], [183.9308, 19.4166, 38.8238, 250.536, 735.6842, 259.403, 0.0, 274.84, 71.783, 355.2354, 101.745, 86.7953, 146.4708, 116.7332, 196.5976, 65.9198, 99.5808, 97.1174, 58.7608, 136.0056, 174.6403, 124.9056, 140.8925, 139.026, 150.0154, 76.487], [206.2688, 18.0256, 0.0, 360.448, 921.4027, 84.325, 20.479, 326.5693, 249.3198, 438.8108, 118.4072, 101.9185, 57.4308, 58.1229, 128.547, 28.6709, 129.2048, 126.7392, 57.3306, 70.2382, 142.008, 206.879, 154.1376, 154.7284], [228.4316, 57.7088, 53.4301, 369.248, 877.7202, 217.129, 0.0, 253.0987, 175.2318, 608.6782, 103.6123, 77.125, 29.6726, 31.0109, 111.0583, 81.7043, 83.628, 90.0749, 23.2716, 34.9365, 40.6992, 119.1413, 140.1408, 102.8128, 138.0273, 157.5974, 72.2973], [177.2732, 135.0082, 232.1106, 682.0, 1179.835, 94.3243, 22.9208, 387.8198, 286.5285, 1128.5076, 284.7424, 7.1042, 114.038, 95.9053, 15.9017, 92.0212, 130.8056, 69.6461, 24.0931, 80.4983, 88.0157, 256.2394, 127.296, 68.2355, 205.2631, 10.4966, 74.888]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

