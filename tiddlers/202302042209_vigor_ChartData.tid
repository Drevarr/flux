created: 20230204220933000
creator: Drevarr
modified: 20230705163518729
modifier: drevarr
tags: ChartData
title: 202302042209_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Cat Wigglebooty", "Tegan Parker", "Grasszanine", "Vinthry Stormgrave", "Arkintor", "Zaidy Sagemist", "Newtype Khan", "Domina Flagbringer", "Drevarr Moonwillow", "Mike The Archmagus"];
const professions = ["Firebrand", "Scrapper", "Tempest", "Spellbreaker", "Tempest", "Tempest", "Vindicator", "Spellbreaker", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[582.7492, 39.6915, 8.784, 52.6672, 4.4041, 231.3105, 65.2646, 69.2002, 0.0, 290.888, 198.8263], [512.051, 73.2614, 4.9776, 12.5871, 195.9833, 181.5165, 24.5683, 51.9331, 0.0, 452.8629, 211.9671], [516.9549, 116.9022, 0.0, 167.4418, 170.5024, 237.6795, 54.1901, 0.0, 20.629, 377.571, 298.2395], [479.3582, 240.7159, 49.0147, 167.9387, 200.8593, 206.4135, 66.9312, 180.3161, 0.0, 466.1987, 402.2234], [637.5096, 271.3238, 27.816, 143.5925, 223.8237, 306.0015, 33.0624, 151.4497, 0.0, 376.7375, 420.7919], [994.2698, 311.4102, 92.759, 236.1741, 214.5436, 530.0745, 78.6509, 183.3477, 33.8957, 663.1802, 513.9203], [1150.3779, 388.4235, 42.2218, 217.6247, 381.1137, 644.1375, 73.9738, 54.7011, 35.9905, 268.9394, 642.7575], [1238.2398, 497.032, 300.0614, 477.9793, 460.0732, 913.083, 100.6925, 301.054, 60.8212, 641.2316, 525.6328], [1293.0002, 514.0144, 123.7958, 334.0555, 421.3799, 935.3745, 126.8198, 189.9382, 0.0, 744.3066, 851.0109], [2128.7099, 688.7754, 158.6976, 526.6716, 823.4131, 1138.6035, 134.7226, 510.2365, 80.1028, 1514.7292, 1378.6434], [3460.1242, 1516.5696, 326.3549, 1087.2953, 1043.9337, 2076.5835, 313.367, 863.3555, 108.4002, 1932.5855, 1892.8494]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

