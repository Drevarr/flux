created: 20230916001624000
creator: Drevarr
tags: ChartData
title: 202309160016_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Pafema", "Revenant Brandorf", "Venomina The Fierce", "Kyrillien", "Legoh Brave", "Arcanophage Farra", "Tegan Parker", "Drevarr Moonwillow", "Kosa\u00efr", "Kahlyanne"];
const professions = ["Druid", "Vindicator", "Spellbreaker", "Vindicator", "Tempest", "Spellbreaker", "Tempest", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[38.1087, 20.3895, 33.0504, 0.0, 5.6192, 173.238, 231.0518, 471.2093], [94.1365, 55.9209, 29.3043, 80.603, 52.4216, 27.2215, 49.9302, 72.1243, 11.8381, 89.987, 5.8397, 63.2702, 10.1678, 54.6885, 19.2357, 157.8931, 29.3278, 9.5013, 9.2496, 11.8665, 94.1177, 174.9926, 14.8005, 310.6568], [173.3657, 17.8587, 80.2245, 0.0, 42.0532, 0.0, 47.4922, 83.5397, 47.952, 253.1113, 0.0, 54.2837, 0.0, 37.2618, 15.9471, 121.968, 0.0, 26.5825, 121.987, 382.9613, 68.1506, 442.6512], [71.4075, 72.8482, 146.5845, 54.9525, 64.7864, 21.7732, 74.5053, 42.6779, 32.9171, 137.9862, 0.0, 124.476, 26.2642, 64.4644, 0.0, 196.3315, 29.5886, 30.1185, 16.544, 4.9748, 1.6226, 158.4768, 397.6906, 726.1429], [150.2806, 73.2267, 397.1088, 46.9608, 116.0966, 47.1629, 157.4419, 0.0, 351.5635, 89.4447, 49.5192, 37.2438, 248.1071, 548.281, 887.0437], [42.9733, 70.5355, 0.0, 92.7296, 43.148, 0.1382, 114.7323, 111.4295, 50.7492, 459.4986, 0.0, 0.0, 44.6954, 80.3326, 0.0, 341.2147, 39.8765, 90.2776, 120.0975, 703.0483, 20.1059, 1071.6268], [258.1161, 128.9297, 261.7221, 147.1411, 101.0758, 66.0303, 137.1131, 137.6978, 64.885, 463.8704, 94.6167, 220.3529, 96.1474, 28.8666, 353.0419, 87.7514, 19.8306, 14.1, 312.8204, 973.2317, 22.4512, 1439.0516], [363.571, 117.3665, 175.9518, 157.2841, 53.4842, 70.1757, 110.1001, 149.1131, 221.2286, 569.7054, 192.3966, 234.8042, 83.363, 159.5317, 61.074, 647.5392, 41.0357, 117.7623, 121.6736, 0.0, 427.2496, 1113.9293, 20.1742, 1657.7652], [383.6314, 139.0154, 383.0986, 165.083, 211.8116, 202.4028, 315.6736, 104.945, 297.5584, 0.0, 333.1706, 22.9522, 258.7077, 0.0, 494.6726, 87.6935, 59.3055, 91.4432, 395.1291, 1206.0422, 2137.6813], [675.8869, 175.6964, 390.1568, 336.387, 200.8958, 137.9826, 209.1316, 333.3804, 359.3902, 850.505, 218.4318, 432.6907, 162.7517, 288.0709, 139.7916, 1442.1792, 219.4655, 202.653, 186.0824, 98.5218, 1026.9106, 3199.9048]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

