created: 20230628220723000
creator: Drevarr
modified: 20230705163539946
modifier: drevarr
tags: ChartData
title: 202306282207_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Crusader Siolith", "Cat Wigglebooty", "Demon Staph", "Drumina", "Xyntharos", "Miphest\u00f6", "Oo Dads Mad", "Belvyn Brightblade", "Arriasa", "Tegan Parker", "Vopiscus Zergherdus", "Grasszanine", "Arcanophage Farra", "Zayde Sunsabre", "Tootsie Pop Rocks", "Fribble Bibble", "My Birthday Girl", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Scrapper", "Druid", "Druid", "Vindicator", "Tempest", "Spellbreaker", "Firebrand", "Druid", "Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[20.4918, 12.7689, 18.8131, 0.0, 69.6427, 30.3717, 0.0, 1.617, 2.4576, 0.0, 35.0921, 74.183, 0.0, 0.0, 15.6106, 0.0, 3.5213, 0.0, 17.374, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58.8703, 45.2563, 34.0305, 0.0, 5.2843, 0.0, 0.0, 86.4448, 67.5465, 0.0, 66.5827, 0.0, 0.0, 0.0], [24.3886, 24.0883, 17.3112, 48.1552, 12.0393, 24.0923, 20.9607, 23.9155, 9.6212, 15.0288, 0.0, 0.0, 63.9803, 48.2229, 0.0, 48.2621, 8.9082, 0.0, 18.2131], [0.0, 65.5747, 50.7591, 49.1176, 0.0, 0.0, 0.0, 39.8746, 0.0, 60.1487, 34.2662, 31.5315, 0.0, 0.0, 0.0, 0.0, 25.7191, 0.0, 0.0, 0.0, 51.1781, 0.0, 0.0], [15.5056, 2.1119, 38.9628, 21.2905, 26.7687, 38.9099, 11.3121, 4.5965, 11.1843, 12.841, 2.1413, 27.8052, 14.8262, 6.8355, 3.6418, 13.6714, 3.1952, 18.1094, 37.5467, 19.4956, 25.6496, 34.8032, 9.3712, 0.0, 20.4941], [0.0, 20.945, 65.0328, 46.6137, 79.4662, 9.0307, 0.2419, 0.0, 3.0106, 0.0, 0.0, 24.9869, 0.0, 0.0, 26.4216, 0.0, 0.3773, 41.8333, 41.6288, 0.0, 51.938, 0.0, 3.013, 31.968], [0.0, 82.4175, 94.375, 41.5422, 81.8261, 51.9978, 43.7184, 13.4211, 67.1539], [0.0, 0.0, 34.8748, 128.672, 34.4862, 66.7341, 0.0, 0.0, 0.0, 18.1862, 0.0, 87.3147, 49.0406, 14.8103, 0.0, 48.1891, 0.0, 19.6186, 17.9399, 34.3467, 0.0, 0.0, 10.2753, 0.0, 0.0], [0.0, 0.0, 75.5619, 64.1655, 0.0, 78.7097, 0.0, 0.0, 70.3488, 0.0, 86.1002, 61.7414, 34.6185, 76.5984, 0.0, 0.0, 0.0, 82.1109, 84.3042, 0.0, 0.0, 0.0, 0.0], [63.2389, 127.0462, 30.1644, 57.624, 0.0, 0.0, 0.0, 0.0, 57.528, 38.5171, 31.9725, 0.0, 22.8826, 0.0, 46.2797, 73.109, 72.1911, 31.9488, 53.8353, 6.7693, 39.9168], [83.8811, 43.3552, 64.4742, 86.8202, 56.3706, 5.7024, 18.6225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 45.3994, 55.1691, 97.5927, 10.4107, 120.5366, 15.9642, 61.5514], [0.0, 121.1785, 119.8462, 51.8175, 88.8507, 35.3623, 0.0, 0.0, 7.0349, 0.0, 78.302, 0.0, 0.0, 0.0, 168.6134, 0.0, 47.8517, 83.0315, 1.0321, 0.0, 25.6726, 17.1108, 36.8093, 55.8144], [0.0, 39.5685, 57.5231, 0.0, 23.324, 0.0, 0.0, 79.9337, 80.3328, 52.4308, 68.4583, 20.736, 0.0, 39.5131, 0.0, 0.0, 92.3078, 203.6097, 55.9065, 0.0, 131.1495, 19.2276, 74.1032, 40.4006], [0.0, 55.4161, 130.6075, 58.6089, 135.2792, 50.8571, 44.7552, 17.4367, 17.9712, 59.1382, 52.6701, 24.1056, 43.806, 30.602, 34.7117, 0.0, 0.0, 80.2532, 110.8956, 83.421, 67.6274, 0.0, 12.4416], [0.0, 71.3141, 228.6987, 56.889, 101.1987, 53.1385, 0.0, 48.2405, 58.7366, 0.0, 100.2905, 49.8701, 6.7253, 20.1701, 0.0, 0.0, 11.8843, 110.5763, 72.4778, 70.8382, 68.1835, 31.9946, 0.0, 0.0], [124.0553, 194.0145, 123.5241, 82.6493, 70.6296, 34.249, 56.3794, 62.1466, 5.2588, 75.106, 44.8416, 31.3477, 35.9246, 121.4424, 0.0, 118.3402, 189.6388, 69.152, 45.3017, 127.7107, 10.9588, 0.6532, 84.672], [0.0, 0.0, 225.3485, 264.2345, 95.6088, 208.7086, 38.4993, 39.1565, 67.8601, 76.7078, 0.0, 172.0726, 94.1414, 50.7885, 37.1786, 91.9666, 219.8914, 237.2668, 183.8894, 72.875, 131.6831, 48.1131, 73.4711, 116.7437], [80.0302, 70.1321, 178.1591, 324.0801, 160.6563, 166.451, 94.7273, 12.4416, 75.2983, 99.287, 28.1206, 105.5319, 102.4877, 52.038, 21.3307, 126.9206, 0.0, 278.6842, 201.7046, 120.2993, 85.5867, 215.4599, 38.9403, 34.618, 65.9405]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

