created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Aronorf Xideliesi", "Black Raspberry Pie", "Chocolate Teapot", "Newtype Khan", "Primal Clone", "Venomina The Siren", "Rahani Sunray", "Tegan Parker", "Mechanical Dark", "Sakis Ranger", "Arriasa", "Drevarr Moonwillow", "Artakama Nahid", "Zaedy Zae"];
const professions = ["Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Spellbreaker", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Scrapper", "Druid", "Druid", "Scrapper", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9851, 20.0902, 10.0, 5.6071, 33.9569, 0.0, 6.66, 27.0444, 2.0, 27.5846, 11.0, 4.9828, 10.0094, 0.0], [8.0746, 28.0, 21.6047, 0.0, 0.0, 31.3707, 0.0, 13.1, 25.4667, 8.5614, 0.0, 8.96, 3.9828, 10.0094, 0.9828], [21.0082, 0.0, 58.7241, 5.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.9867, 13.1207, 3.0, 0.0, 21.3667], [0.0, 61.541, 14.0, 32.9286, 12.2368, 46.9224, 6.0127, 0.0, 8.96, 15.931, 22.6415, 6.9828], [0.9851, 20.0082, 18.1163, 21.3929, 4.0263, 73.2241, 9.0127, 2.0, 12.1, 16.1778, 33.0351, 11.0615, 5.9733, 22.0345, 22.066, 23.2414], [24.8657, 47.5164, 21.2791, 32.6786, 0.0, 74.819, 3.0, 0.0, 16.12, 11.1333, 13.7719, 2.0, 0.0, 9.9655, 23.0377, 22.7069], [49.7907, 1.0, 7.6316, 139.2069, 3.0, 26.3, 24.3111, 4.0175, 21.1385, 26.0, 31.9483, 20.0283, 8.0172], [11.041, 29.1628, 48.2857, 4.0263, 38.3017, 31.1266, 8.1463, 16.12, 43.1111, 6.1228, 4.0154, 39.4, 23.6379, 19.6132, 11.4138, 30.337], [36.8214, 2.0, 124.8879, 25.0506, 9.122, 15.14, 44.6667, 57.1754, 0.0, 46.36, 56.6509, 13.0], [15.0923, 85.2, 46.1034, 61.5094, 36.4483, 79.7074], [121.5492, 81.814, 46.5714, 0.0, 159.1552, 35.2278, 7.2195, 25.2, 46.6889, 44.193, 52.7231, 38.6, 54.2931, 14.0189, 11.6207], [131.5082, 12.0, 59.4643, 19.3947, 164.5431, 63.7722, 8.3171, 39.72, 15.1556, 0.0, 71.4462, 93.2533, 38.5345, 55.2642, 42.2414], [95.0597, 133.418, 45.7442, 51.4643, 18.2895, 107.3534, 47.0886, 11.4634, 52.68, 99.9111, 32.2456, 55.3692, 72.2267, 74.1724, 75.5, 62.8448, 1.9963], [64.3433, 69.0328, 62.7674, 36.1071, 33.9211, 120.431, 55.5696, 11.0244, 42.7, 99.0889, 58.7368, 59.0, 92.6267, 63.9483, 94.1415, 38.3103, 86.4704], [76.6866, 35.9672, 117.6744, 24.75, 28.3421, 196.4569, 56.5443, 0.0, 49.52, 102.3333, 76.1228, 24.1692, 82.3467, 70.4655, 85.2075, 52.431, 95.2556]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

