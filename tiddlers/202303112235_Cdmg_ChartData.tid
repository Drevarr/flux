created: 20230311223557000
creator: Drevarr
modified: 20230705163521704
modifier: drevarr
tags: ChartData
title: 202303112235_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "My Birthday Girl", "Xyntharos", "Zaylen Harker", "Drevarr Moonwillow", "Ryvalia Fazebringer", "Mistwalker Caelon", "Sygaldry Verdandi", "Seren Nightroad", "Sheep Paws", "Sp\u00edcy Cheese", "Johosh The Great", "Smol Daddy Tika", "Slautorn", "Aronorf Xideliesi", "Rina Of Theros", "Morton Saltbringer", "Sofya De Nova", "Dark Sidiuz", "Lord Erin The Wise", "Xanvias Tseli", "Panther B Me", "Smol Gluvs", "Be\u00eb"];
const professions = ["Druid", "Scrapper", "Vindicator", "Firebrand", "Scrapper", "Chronomancer", "Vindicator", "Firebrand", "Scourge", "Berserker", "Berserker", "Firebrand", "Berserker", "Weaver", "Firebrand", "Scourge", "Chronomancer", "Weaver", "Scourge", "Weaver", "Berserker", "Scourge", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.3662, 5.5763, 6.437, 18.4933, 4.6606, 8.7949, 6.6118, 0.6541, 11.5866, 5.1313, 7.2505, 6.2155, 0.0, 1.375, 33.5556, 5.7097, 0.0, 2.9824, 11.0531, 9.619, 9.2182, 12.9375], [14.7369, 34.0678, 0.0, 62.6133, 8.5229, 11.7949, 1.8191, 0.1504, 5.4099, 6.4893, 1.4211, 11.7037, 6.1897, 21.4286, 31.175, 0.0, 0.5914, 0.0], [11.4349, 3.9661, 2.8319, 21.72, 0.0, 0.1667, 2.7138, 2.1353, 17.7774, 15.4153, 4.9937, 0.0, 2.3448, 0.0, 11.475, 2.963, 0.0, 0.7957, 0.0, 5.8412, 19.2222, 8.2143, 1.9818, 16.0375], [27.5542, 0.0, 0.0, 0.0, 0.0, 3.5, 1.5, 0.0, 0.8375, 1.9976, 10.6484, 0.0, 12.75, 0.0, 10.975, 9.7778, 4.043, 24.6071], [3.0316, 24.9831, 12.2689, 11.24, 2.3211, 5.3718, 4.6809, 2.5977, 2.6643, 6.7518, 3.5368, 15.963, 2.4741, 0.0, 11.65, 12.6667, 0.0, 34.6237, 6.3571, 14.8647, 29.3623, 16.127, 3.9273, 60.3125], [16.1935, 2.1356, 1.0, 0.0, 43.2018, 8.25, 22.9309, 1.1992, 0.1272, 6.3962, 2.6632, 0.0815, 10.0345, 0.0, 10.1, 0.2593, 0.0, 0.0, 5.4643, 0.3706, 19.4734, 15.9365, 3.8182, 12.2875], [16.9331, 0.0, 0.0, 0.0, 18.8257, 22.3397, 11.3158, 8.203, 18.8233, 19.7184, 9.6779, 6.9185, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0882, 12.1643, 63.5714, 5.8545, 34.9188], [33.594, 0.0, 0.0, 11.4128, 2.3718, 9.2105, 0.6278, 2.3004, 13.0549, 5.5495, 0.9778, 7.0517, 0.0, 46.175, 13.9074, 1.1505, 0.0, 39.9588, 20.6135, 10.6825, 0.0, 23.8062], [34.2441, 7.0169, 0.8487, 4.96, 34.6881, 48.641, 13.2599, 0.0, 18.8763, 17.1337, 4.4716, 0.0, 0.0, 0.0, 1.625, 67.5, 0.0, 11.2796, 6.25], [43.2622, 5.5424, 6.7731, 0.0, 17.6881, 10.7244, 6.3783, 0.8985, 31.9011, 28.8902, 15.5747, 0.0, 0.0172, 0.0, 6.35, 5.8333, 4.1714, 52.2688, 0.0], [57.67, 4.2542, 0.2269, 3.16, 9.0367, 67.6667, 7.0066, 0.0, 13.0141, 0.0, 24.4989, 0.0, 0.0, 0.0, 0.0, 28.5926, 5.9429, 17.0323, 21.9286], [33.5931, 0.0, 3.6218, 0.0, 4.0367, 21.1282, 14.8849, 0.8008, 14.0848, 48.5155, 10.0989, 0.0, 9.0345, 0.0, 0.0, 3.7963, 0.0, 0.0, 121.25, 14.6882, 48.8164, 12.7619, 17.4091, 16.5437], [27.2107, 72.9831, 0.0, 6.8133, 12.3303, 20.9295, 7.4901, 0.0, 0.9647, 43.0191, 11.4379, 0.0, 2.4914, 0.425, 10.9259, 0.0, 9.5054, 16.75, 0.4882, 79.4928, 21.3175, 39.1273, 103.6063], [28.1184, 9.1864, 6.7647, 26.76, 0.0, 22.0192, 6.5329, 0.8835, 26.6749, 18.1265, 12.1895, 0.0, 5.1897, 0.0, 0.0, 21.8333, 28.9247, 0.0, 60.0882, 87.4203, 115.254, 12.2545, 75.6625], [43.3707, 24.2881, 0.3025, 69.0, 5.1009, 12.7115, 4.3914, 3.812, 0.5088, 9.1551, 17.4211, 7.9407, 5.9138, 0.0, 58.625, 4.8704, 0.0, 82.1828, 0.0, 13.7647, 35.1691, 64.9286, 39.1636, 163.0125], [46.6338, 105.9322, 17.2269, 56.28, 18.5505, 26.9551, 29.3059, 12.1391, 10.6749, 43.3866, 47.6042, 33.6296, 26.4569, 2.8929, 11.175, 52.6667, 2.1429, 54.0753, 137.0357], [79.5606, 28.7458, 0.0, 0.0, 26.9038, 31.3421, 3.4211, 8.8551, 24.1981, 33.4905, 0.0, 30.5259, 69.775, 26.7407, 0.0, 43.4731, 104.9286], [36.7893, 40.1017, 7.4286, 0.0, 0.0, 14.7628, 16.0033, 0.6955, 4.0742, 18.5728, 14.6295, 0.0, 18.0086, 7.1071, 13.15, 11.8519, 0.0, 48.4624, 52.1824, 71.6329, 131.5873, 132.7909, 139.3313], [145.0759, 29.8814, 23.2185], [59.1492, 20.9322, 0.0, 0.0, 7.945, 59.5385, 15.0526, 4.3459, 21.0106, 0.0, 32.2084, 0.0, 30.9397, 38.3, 28.6111, 43.4409, 107.9643, 136.5353, 74.1546, 70.7143, 80.0818, 81.0062], [59.8002, 14.6949, 0.0, 9.1867, 0.0, 27.5192, 19.3421, 0.0, 9.1025, 12.7422, 39.6737, 0.0, 3.4741, 0.0, 14.65, 123.5185, 18.9714, 58.1828, 0.0, 171.9941, 116.6377, 68.627, 164.8182, 122.7812], [54.1221, 120.6949, 5.1345, 10.4533, 59.4128, 50.1474, 16.4868, 2.9361, 14.9823, 39.8592, 21.1768, 5.7037, 36.4828, 1.7857, 105.85, 35.963, 0.0, 174.9247, 6.3929, 56.2471, 93.0531, 93.5556, 93.2455, 183.4938], [60.2586, 5.9661, 64.3782, 11.08, 36.7431, 46.6218, 15.4474, 2.6805, 22.3781, 12.8807, 19.0884, 0.0, 70.3276, 15.275, 269.9815, 12.1143, 53.9785, 7.8214, 137.0471, 232.372, 172.5873, 63.2455, 363.925], [67.1483, 275.678, 5.6975, 1.1376, 62.2949, 11.2566, 0.1842, 26.2049, 37.2291, 19.3789, 0.0, 7.25, 8.3571, 81.25, 5.8519, 0.0, 121.5806, 69.1786, 79.9765, 161.8019, 216.873, 341.9273, 478.7563]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

