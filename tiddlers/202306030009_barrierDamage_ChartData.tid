created: 20230603000934000
creator: Drevarr
modified: 20230705163532967
modifier: drevarr
tags: ChartData
title: 202306030009_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Cael", "Cat Wigglebooty", "Grasszanine", "Morv\u00e4rth", "Kardknight", "Drevarr Moonwillow", "Zadey Starbolt", "N\u00f3b\u00fa", "Sakis Ranger", "Newtype Khan", "Be\u00eb", "Dusknant", "Smol Gluvs", "The Fancy Cheese", "Latedoctor", "Cyclotechnist Farra", "Morv\u00e4rth"];
const professions = ["Vindicator", "Scrapper", "Spellbreaker", "Scourge", "Renegade", "Scrapper", "Scrapper", "Druid", "Druid", "Spellbreaker", "Scourge", "Vindicator", "Scourge", "Scrapper", "Reaper", "Scrapper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 1248, 0, 4548, 1311, 0, 0, 1217, 7426, 3684, 434, 0, 4842, 0, 0, 1247, 4385, 3406, 0, 6871, 0, 4572, 7246], [56, 925, 0, 4256, 0, 0, 0, 1719, 13921, 4914, 2946, 0, 4015, 0, 4222, 3042, 2395, 588, 0, 4665, 0, 3365, 2940], [0, 9314, 4344, 6329, 0, 10052, 4632, 9656, 3103, 498, 3437, 0, 3421, 1237], [9785, 3892, 0, 6711, 0, 4707, 8299, 15158, 8549, 0, 14287], [7807, 25395, 3831, 23481, 17403], [503, 3124, 361, 9893, 13, 0, 157, 97, 16682, 6398, 6446, 60, 5182, 0, 4363, 6168, 3572, 664, 38, 6865, 0, 3020, 7347], [23, 736, 21399, 127, 0, 0, 1837, 13924, 9425, 6630, 0, 391, 0, 6332, 5716, 6729, 5558, 0, 1588, 0, 2915, 8276], [1097, 0, 0, 3884, 11384, 19422, 7705, 4282, 4213, 0, 4998, 8209, 5609, 4711, 0, 9724, 0, 8396, 5195], [0, 1248, 0, 15849, 0, 0, 0, 4273, 31032, 343, 0, 0, 4340, 0, 11782, 4010, 17654, 1736, 0, 394, 0, 2305, 6658], [0, 5125, 0, 21309, 0, 0, 0, 0, 20707, 14424, 5753, 0, 3493, 0, 13712, 6091, 12561, 3550, 292, 10155, 0, 773, 1268], [0, 5799, 0, 4, 0, 0, 0, 3223, 40776, 20705, 4847, 0, 8936, 0, 8377, 10797, 7008, 0, 5761, 0, 6518, 6300], [824, 5715, 1203, 59010, 3516, 8594, 58573], [0, 8517, 0, 31914, 1248, 0, 0, 1719, 32365, 14374, 9600, 0, 7950, 0, 13467, 8163, 11178, 7335, 0, 7085, 0, 5199, 13442], [0, 13055, 0, 22276, 325, 0, 0, 14733, 36850, 26734, 12845, 0, 37026, 25054, 26475, 13196, 0, 10053, 0, 16149, 22787], [66316, 79734, 44050, 11220, 12008, 45325, 486, 52307, 56345], [0, 17646, 0, 32323, 1739, 798, 0, 8060, 27538, 39619, 33237, 561, 24281, 0, 23237, 28940, 41117, 17922, 1246, 20591, 4052, 26260, 29515], [12798, 27978, 4564, 202919, 5606, 21477, 119160, 0, 22327, 65630]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

