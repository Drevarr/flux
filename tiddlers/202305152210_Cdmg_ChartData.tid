created: 20230515221048000
creator: Drevarr
modified: 20230705163530146
modifier: drevarr
tags: ChartData
title: 202305152210_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Blancooo Padreee", "Drevarr Moonwillow", "Necrotic Windrunner", "Legacy Of Mathus", "Spreadflamesoflight", "Elonith Requiem", "Eibh\u00ebar", "River No Hug", "Sumatra Satyricon", "High Sorcer Baradun", "Husky Guard", "Jeckyll Mbs", "Mistwalker Caelon", "Sheep Poh", "Be\u00eb", "Kary\u00edna", "Sygaldry Verdandi", "Lagmeloves", "Kyllarian", "Solus Sanctus", "Demon Sekhmet", "Panther B Me", "Smol Gluvs", "Rozaalyna", "Lord Erin The Wise", "Elonith Requiem", "Mike The Archmagus", "Be\u00eb", "River No Hug", "Gavann", "Xanvias Einzbern", "Hauzzy"];
const professions = ["Berserker", "Scrapper", "Scourge", "Berserker", "Willbender", "Reaper", "Chronomancer", "Reaper", "Soulbeast", "Tempest", "Dragonhunter", "Berserker", "Vindicator", "Tempest", "Reaper", "Vindicator", "Firebrand", "Dragonhunter", "Reaper", "Firebrand", "Berserker", "Scourge", "Scourge", "Scourge", "Weaver", "Scourge", "Weaver", "Scourge", "Scourge", "Firebrand", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.9275, 2.543, 2.6498, 0.0, 0.5888, 12.1186, 5.8889, 3.0256, 10.1047, 2.0, 0.0, 15.4308, 5.5806, 42.9118, 10.2676, 159.8095, 46.6855, 2.9669, 9.6917, 1.1304, 0.0], [7.3623, 0.3974, 1.0351, 3.625, 1.9434, 0.791, 11.4271, 0.0, 11.8491, 31.1695, 92.4889, 0.7179, 7.8023, 0.0, 2.0893, 18.0692, 21.4516, 8.4235, 10.6831, 77.4286, 6.3306, 0.5828, 13.4887, 0.6304, 5.5556], [1.3808, 0.0, 3.9583, 12.1557, 1.4795, 8.3097, 0.9697, 0.5976, 8.7797, 96.5556, 0.0, 58.2791, 0.1159, 16.1429, 57.6538, 79.3871], [5.4437, 0.0, 0.0, 16.8066, 5.498, 52.9656, 0.0, 0.1515, 2.2189], [103.7143, 99.2581, 65.6159, 87.5865, 0.0, 0.0], [34.1, 74.169, 29.619, 42.7581, 17.0199, 36.4586, 18.1522, 38.4902], [14.3478, 2.2748, 0.0, 0.0, 0.4151, 2.8402, 8.0688, 4.7358, 3.7879, 4.2574, 6.5254, 41.0444, 12.5897, 22.6628, 3.6232, 0.0, 21.4077, 22.1398, 20.5529, 58.4859, 0.0, 31.7097, 2.351, 11.7744, 0.0, 14.0131], [74.8235, 60.0, 12.2857, 69.9435, 24.2185, 28.0602, 0.0, 14.1699], [5.1159, 0.0, 0.0, 5.1458, 5.5236, 15.7684, 4.7186, 144.2075, 16.8788, 5.7988, 24.0847, 12.4444, 0.0, 1.4186, 0.0, 3.0893, 45.4923, 24.0215, 25.2529, 26.5211], [78.2034, 9.2667, 0.0, 39.0698, 0.0, 23.0179, 41.8462, 48.129, 15.8176, 29.6549, 2.0952, 112.5403, 0.0, 26.4286, 0.0, 0.0], [1.2914, 0.0, 0.0, 1.9387, 5.2152, 13.7874, 24.3939, 10.074, 29.2034, 33.3556, 3.0769, 53.6628, 2.8696, 14.5714, 21.1615, 24.2903, 10.9706, 53.4507, 12.0, 18.0081, 11.053, 6.0226, 3.9783, 12.4444], [85.9855, 1.1854, 0.0, 0.0, 12.3208, 3.627, 19.2692, 6.9057, 18.303, 6.4556, 2.2034, 19.7111, 0.0, 79.686, 4.8261, 0.0, 27.0645, 33.4882, 12.4507, 0.0, 8.371, 12.7682, 0.0, 0.0435, 4.7647], [5.1159, 0.3046, 0.0, 0.8125, 0.0, 3.3893, 14.1134, 2.3208, 11.303, 1.8787, 17.4237, 50.4667, 0.0, 21.0814, 0.0, 8.0, 30.0, 30.5269, 13.4647, 22.5, 17.9524, 39.5, 42.4636, 11.9549, 2.2391, 25.7647], [71.8765, 118.8028, 1.7619, 113.7339, 0.9735, 14.4812, 3.7391, 3.1569], [41.3235, 43.162, 13.0952, 119.2177, 0.0, 53.4436, 35.8043, 64.7647], [6.2319, 0.7086, 0.0, 0.0, 4.5283, 9.6598, 15.5992, 0.0, 3.7576, 0.5799, 21.5254, 1.8222, 0.0, 40.8023, 1.0145, 0.0, 39.9385, 35.1935, 35.8529, 38.493, 28.1905, 51.1371, 20.5894, 2.2481, 1.3696, 8.5621], [126.8261, 0.0, 3.0175, 5.2083, 1.9057, 8.625, 21.502, 0.0, 0.0, 3.8521, 27.9492, 0.0, 0.0, 34.4419, 10.6087, 1.75, 23.7, 9.6129, 14.9647, 28.1127, 11.3333, 84.1935, 4.3113, 5.7143, 11.587, 3.7255], [11.0688, 0.0, 1.0414, 56.1525, 41.0889, 3.2821, 13.3605, 12.7679, 0.0, 100.9462, 51.8706, 109.1056, 18.4286, 39.3145, 0.0, 24.8947, 0.0, 27.5294], [25.1417, 4.1321, 0.0, 1.2308, 27.7288, 68.0667, 7.2564, 72.2558, 13.3333, 11.9107, 23.7923, 54.6667, 30.0353, 41.1479, 29.2381, 62.1532, 3.9139, 14.6241, 3.0, 35.0261], [0.0, 33.4737, 0.0, 0.2783, 10.0164, 35.7287, 0.0, 10.2727, 10.503, 0.0, 24.3556, 0.0, 2.3953, 1.8841, 8.9464, 43.2615, 14.8817, 10.8412, 70.1056, 31.4286, 36.2823, 0.0, 22.3383, 28.3333], [71.1294, 145.8521, 172.381, 154.5968, 0.0, 1.0752, 0.0, 89.6732], [99.4928, 1.1026, 4.1053, 5.1667, 10.8113, 5.7828, 21.0547, 8.1887, 55.8788, 7.8373, 194.8644, 56.5333, 0.0, 83.4186, 5.1159, 125.5, 113.3462, 116.2581], [85.2899, 5.0596, 8.2456, 3.875, 1.5, 4.373, 36.4757, 2.8491, 1.2121, 3.5355, 201.9831, 158.4667, 4.8462, 34.7907, 0.9565, 37.0893, 29.2615, 25.2473, 128.6647], [0.1788, 0.0, 0.0, 2.4528, 0.2029, 49.7409, 0.0, 0.1243, 140.3559, 49.5778, 0.0, 114.7209, 0.7246, 147.5714, 137.9692, 148.9355], [1.394, 0.0, 0.0, 14.1698, 11.8832, 23.7429, 0.0, 0.0, 2.4349, 84.2712, 33.7111, 0.0, 91.814, 0.0, 33.4286, 111.5462, 21.4624, 44.1118, 73.2394, 9.5714, 25.4516, 0.2649, 95.7594], [54.9811, 13.8485, 13.2899, 197.9661, 87.4667, 0.0, 220.2442, 2.2754, 91.875, 239.0615, 107.5484], [20.6087, 1.7748, 0.0, 0.0, 3.8632, 14.4324, 57.5445, 0.0, 10.5917, 143.6271, 8.4, 0.0, 8.6279, 4.8986, 73.0714, 124.7154, 75.7742, 38.3471, 98.5915, 95.2381, 64.0565, 1.0066, 53.7895, 10.0652, 39.7124], [64.4058, 11.1159, 0.0, 0.8125, 19.9717, 24.8258, 7.1113, 61.9811, 0.0, 5.4053, 250.9661, 272.4444, 1.7436, 127.7558, 4.8406, 57.4464, 328.3, 227.3011], [30.6126, 9.4737, 54.9583, 23.3349, 39.8525, 59.0121, 15.3962, 120.0303, 18.3521, 244.9153, 268.3333, 0.9744, 150.0233, 24.5507, 43.6964, 156.9615, 58.8065], [1.4139, 4.9825, 0.0, 10.8443, 11.5, 0.0059, 254.7966, 383.7556, 12.7436, 158.7674, 23.5797, 63.0, 239.4308, 18.3333, 222.2059, 103.7535, 0.0, 150.7419, 10.2649, 0.0, 56.0435, 22.6536], [64.4493, 7.3874, 6.7895, 13.2083, 12.2783, 10.2336, 56.9939, 0.0, 6.3333, 7.5917, 19.5932, 53.6889, 0.0, 209.3488, 6.6232, 148.3571, 230.5769, 228.3656, 83.7176, 103.6127, 3.4762, 230.1532, 5.5099, 51.1353, 0.0, 56.4575], [22.1689, 0.0, 6.6458, 7.4953, 13.0164, 17.4919, 3.7736, 11.4545, 7.6746, 15.7119, 423.0667, 30.8462, 283.2326, 0.0, 53.8929, 357.7154, 36.1183, 119.5176, 253.6127, 280.2381, 359.6613, 5.0728, 128.8496, 0.0, 159.3137]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

