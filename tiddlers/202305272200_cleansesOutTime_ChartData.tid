created: 20230527220043000
creator: Drevarr
modified: 20230705163531910
modifier: drevarr
tags: ChartData
title: 202305272200_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Fierce", "Newtype Khan", "Rx Medic", "Gravlyn Isshtail", "Aronorf Xideliesi", "Black Raspberry Pie", "Lucas Ryn", "Tribal S", "Tootsie Pop Rocks", "Tegan Parker", "Daddy Demon", "Zadey Starbolt", "Drevarr Moonwillow", "Johosh Of The North"];
const professions = ["Spellbreaker", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Druid", "Scrapper", "Tempest", "Tempest", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 13.0, 54.1561, 7.9932, 27.0489, 33.0939, 0.0, 2.9938, 14.0437, 2.9815, 12.9951, 0.0, 11.0641, 0.0, 0.0, 7.981, 5.0, 13.0469], [1.991, 0.0, 0.0, 4.025, 7.0341, 24.0038, 0.9815, 17.0265, 71.3924, 0.0, 4.0, 46.8263, 6.0, 15.9814, 18.9802, 29.2963, 19.0049, 0.0, 18.1026, 0.0, 0.0, 20.9905, 0.0, 18.0234], [16.274, 21.12, 63.5728, 8.0, 40.087, 37.0476, 50.6944, 30.0971, 0.0, 18.4231, 17.4194, 0.0, 29.9048, 5.0, 42.125], [9.982, 9.7805, 2.0, 0.0, 16.15, 7.0341, 35.2214, 1.9815, 24.0796, 75.4093, 16.0, 40.1378, 52.3099, 18.0, 51.5652], [4.982, 0.0, 0.0, 0.0, 4.025, 0.0, 21.0229, 0.9815, 31.4248, 86.5992, 24.0068, 20.0356, 37.8357, 0.0, 15.9814, 26.996, 15.9444, 33.8301, 0.0, 38.8205, 1.871, 0.0, 23.1143, 0.0, 32.6797], [24.4589, 30.24, 91.4131, 11.0164, 59.5901, 64.0675, 32.1852, 47.7913, 0.0, 32.2692, 10.9355, 9.9619, 1.0, 13.9922], [0.0, 0.9756, 0.0, 0.0, 1.0, 0.0, 35.1908, 13.9074, 28.1681, 94.9916, 35.0753, 5.0, 42.2864, 20.0, 14.9938, 31.0278, 31.3519, 35.5146, 0.0, 8.141, 1.9677, 0.0, 22.981, 2.0, 28.2109], [0.0, 117.0124, 150.254, 89.5648, 151.1068], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 132.0, 0.0, 79.2044, 152.1408, 36.0492, 74.4161, 39.1429, 71.6389, 57.4369, 0.0, 43.7821, 19.1613, 0.0, 48.1048, 0.0, 61.4297], [88.0616, 78.8978, 173.2347, 41.7705, 152.8447, 112.6389, 114.5093, 177.2427, 0.0, 95.7179, 36.9355, 0.0, 112.3524, 7.0127, 91.7188], [124.2133, 200.5211, 49.0984, 162.2236, 164.1508, 117.3704, 177.9854, 2.0, 119.3333, 41.4839, 7.4815, 113.781], [16.991, 0.0, 33.6066, 2.0, 43.975, 21.5455, 115.1183, 47.8333, 69.5752, 184.1899, 96.1096, 112.3867, 204.9531, 56.6721, 92.0186, 165.2024, 135.5926, 126.0049, 2.0, 80.7564, 30.0645, 0.963, 117.2667, 40.2785, 107.6797], [31.027, 23.0, 39.8852, 13.1579, 39.775, 28.2727, 122.187, 57.9074, 102.2655, 222.5316, 147.3699, 130.7911, 198.8263, 55.3443, 169.1366, 167.8849, 128.7778, 207.3495, 4.0435, 110.5128, 34.6452, 0.0, 146.4476, 57.9241, 143.4141], [36.4775, 2.9512, 25.9672, 3.0263, 37.6, 39.5795, 138.7099, 53.1852, 129.5133, 260.0802, 105.3288, 122.5911, 202.5587, 47.4754, 191.2422, 168.2302, 129.8796, 226.2136, 0.0, 109.359, 34.3871, 129.781, 43.8101, 129.6328]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

