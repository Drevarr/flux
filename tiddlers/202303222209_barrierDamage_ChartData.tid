created: 20230322220917000
creator: Drevarr
modified: 20230705163522759
modifier: drevarr
tags: ChartData
title: 202303222209_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Sassy", "Gabe Malhorn", "Zadie Miststep", "Sizzln Sisigbringer", "Solus Sanctus", "Zaylen Harker", "Primal Clone", "Drevarr Moonwillow", "Ark Darkness", "Eibh\u00ebar", "Smol Daddy Tika", "Rozaalyna", "Charred Fishbringer", "Rina Of Theros", "\u00c1rkantor", "Seren Nightroad", "Panther B Me", "Newtype Khan", "Dark Sidiuz", "Grasszanine", "Tootsie Poppa", "Nazhul Naxxremis", "Smol Gluvs", "Be\u00eb", "My Birthday Girl"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Tempest", "Firebrand", "Firebrand", "Chronomancer", "Scrapper", "Firebrand", "Chronomancer", "Berserker", "Scourge", "Scrapper", "Scourge", "Vindicator", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4471, 1109, 3255, 0, 2903, 2357, 0, 2983, 5412, 0, 2338, 1175, 10090, 1304, 5857, 0, 0, 1304, 9909, 6927, 1169, 0, 2410, 0, 1099, 3401], [28563, 3570, 7944, 4376, 628, 8214, 3641, 4846, 5856, 0, 3063, 0, 0, 0], [4336, 676, 1248, 0, 2287, 1159, 3665, 1915, 6025, 0, 2357, 6867, 13322, 1109, 6439, 1248, 255, 2496, 4762, 1256, 1185, 0, 4110, 3254, 0, 933], [1517, 4386, 1109, 326, 5146, 1109, 0, 1103, 7795, 0, 1769, 1114, 13063, 0, 8276, 6184, 0, 14725, 2226, 1641], [5525, 4440, 1110, 0, 1950, 2003, 2066, 1611, 1295, 0, 1248, 282, 13288, 3605, 13237, 0, 0, 9170, 8691, 3872, 3437, 0, 0, 1106, 0, 4487], [6039, 1109, 1095, 0, 6417, 3574, 1691, 896, 2312, 150, 1608, 17233, 69, 10720, 1109, 1039, 4850, 6799, 0, 4997, 1109, 2060, 4224, 330, 3384], [3928, 5217, 2110, 0, 1313, 1109, 1822, 1526, 1276, 4710, 3557, 17072, 2218, 14578, 0, 0, 4782, 8785, 2616, 2437, 1109, 105, 2963, 0, 1099], [8004, 2361, 744, 0, 6958, 9778, 2074, 1595, 4132, 0, 2815, 3326, 15792, 4537, 8070, 2839, 246, 3446, 7335, 3809, 860, 17, 944, 1404, 0, 703], [1664, 9378, 6061, 0, 1199, 11379, 0, 3671, 23716, 1109, 3860, 2470, 0, 16418, 4846, 6904, 0], [6978, 2398, 1158, 0, 4979, 6624, 487, 5080, 2480, 0, 3111, 4458, 29543, 4810, 3033, 2110, 0, 6190, 3294, 117, 3794, 1109, 0, 7204, 1043, 0], [8163, 6247, 1259, 0, 12481, 5412, 6008, 3574, 7818, 0, 3317, 1248, 24187, 3713, 9366, 6846, 0, 3580, 5820, 4135, 474, 0, 1248, 0, 0, 0], [8513, 1026, 4159, 0, 10837, 3565, 2690, 3802, 6457, 0, 3453, 7878, 25413, 5995, 7691, 4788, 9883, 3676, 2465, 6220], [6611, 6568, 3217, 0, 9759, 10551, 1442, 1580, 4798, 2469, 3268, 37678, 4967, 4877, 3799, 42, 9862, 2618, 3204, 1975, 0, 55, 553, 0, 837], [16200, 5017, 2226, 0, 8995, 1248, 0, 6224, 5521, 0, 6478, 2533, 23322, 5878, 16181, 2514, 0, 5505, 9427, 3904, 97, 298, 0], [8322, 1951, 203, 0, 8759, 4208, 1557, 3880, 8951, 1583, 4821, 19786, 1087, 11663, 6234, 0, 10305, 16142, 6784, 3399, 1109, 643, 4942, 1099, 5790], [8214, 4249, 0, 21950, 5839, 8041, 5481, 7512, 0, 5266, 3835, 34840, 6438, 18104, 1958, 672, 8, 0, 1244], [4455, 10591, 1798, 0, 9583, 12860, 5970, 1445, 6257, 1919, 3860, 18732, 3700, 9092, 2303, 0, 15636, 8712, 14728, 6847, 1109, 2884], [14346, 3859, 3155, 0, 13127, 7116, 3127, 1061, 8871, 8029, 5900, 32339, 2991, 6868, 3070, 66, 4366, 6680, 4636, 9790, 0, 3084, 5538, 0, 4088], [19636, 11385, 7233, 0, 18329, 4828, 3474, 0, 6858, 60844, 0, 8346, 7095, 7535, 0, 930], [18394, 5600, 124, 0, 3161, 2357, 5067, 9042, 6005, 3811, 9187, 22396, 3962, 16463, 4492, 1538, 11664, 7678, 12683, 2519, 1248, 4591, 1187, 1763, 3401], [9847, 5321, 3928, 0, 9956, 2614, 2496, 9097, 10926, 3948, 5471, 40527, 8392, 3875, 5925, 0, 11837, 12187, 4605, 5272, 298, 2453], [5487, 2363, 4147, 0, 3474, 8501, 4227, 5754, 6525, 0, 7871, 9445, 37435, 5860, 11119, 7251, 0, 12166, 7404, 14761, 3756, 0, 3421], [17719, 5457, 2114, 0, 9469, 10051, 5888, 7364, 2595, 0, 3643, 10087, 32379, 7110, 9618, 5312, 1620, 8624, 10613, 6682, 1109, 0, 7049], [11169, 7569, 3262, 0, 14175, 2582, 3289, 8587, 10637, 0, 4878, 2611, 33139, 6816, 19028, 7177, 584, 12854, 16031, 845, 0, 0, 5806], [71931, 20000, 19956, 2314, 34140, 21452, 1791, 32059, 46513, 0, 18886, 20337, 155223, 3140, 47258, 21680, 1257, 47547, 33693, 42562, 9557, 1051, 12459, 14170, 0, 9945]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

