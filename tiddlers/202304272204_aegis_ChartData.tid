created: 20230427220456000
creator: Drevarr
modified: 20230705163526902
modifier: drevarr
tags: ChartData
title: 202304272204_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Wanguazen", "Malfax Jinn", "Klenga", "Vinnakh", "Drevarr Moonwillow", "La Morte Vivante", "Fuzzy Toe Beans", "Choo Sayaccho", "Al Darasuum", "Evil Stepmother", "Johosh The Great", "Koralia Danai"];
const professions = ["Guardian", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.2162, 9.3009, 43.3666, 148.896, 35.3203, 8.0186], [8.4252, 26.3525, 0.0, 3.9431, 31.0219, 121.2826, 0.0, 64.0855, 15.1823, 88.4218, 0.1523], [165.5082, 5.9818, 7.6032, 0.0, 0.0, 0.0, 0.0, 6.0928, 9.5827, 28.1081, 1.5953, 108.8573, 32.6218, 5.2488, 15.0414, 4.102, 26.8531, 0.0], [64.128, 172.7194, 16.3296, 86.9666, 84.6342, 46.0858, 7.8118], [185.4138, 10.854, 0.3312, 1.0465, 0.427, 2.0655, 20.1392, 27.7984, 25.9274, 84.3242, 11.5283, 2.4048, 86.9011, 3.0132, 12.8991, 17.2097, 59.0285, 4.9504], [88.6015, 84.5737, 14.1169, 66.613, 182.8714, 38.2968, 33.4101, 38.4744, 13.1846, 1.001], [0.0, 0.0, 39.1986, 107.8268, 14.7084, 0.1932, 140.2909, 38.3925, 29.4989, 187.2029, 42.282, 4.558, 11.5518], [52.5504, 87.3264, 132.4739, 10.2792, 105.8112, 239.5872, 21.4812, 218.0091, 77.5146, 69.3101, 0.0], [107.4192, 227.9416, 67.0177, 377.3131, 301.7174, 52.4151, 90.1117, 129.0496, 155.9174, 6.713], [200.4288, 304.3462, 21.5136, 53.0971, 47.5678, 70.686, 179.4223, 58.31, 61.7854, 189.189, 17.4731, 100.5206, 183.6835, 33.9228, 12.4433, 24.8952, 122.0486, 0.0], [112.4838, 59.0458, 14.1408, 67.9549, 0.0, 100.6587, 159.5722, 139.3728, 101.6618, 242.9935, 29.0314, 158.3962, 299.281, 43.2783, 25.616, 14.7579, 222.6874, 22.5542], [134.3628, 212.7866, 37.368, 81.422, 0.0, 127.0053, 218.2554, 108.1472, 99.8071, 166.2368, 36.4812, 126.1718, 250.9574, 44.8821, 108.8906, 49.6961, 145.6358, 28.201]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

