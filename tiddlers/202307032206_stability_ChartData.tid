created: 20230703220627000
creator: Drevarr
modified: 20230705163541584
modifier: drevarr
tags: ChartData
title: 202307032206_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Vopiscus Zergherdus", "\u00c1rkantor", "Gavann", "Arcanophage Farra", "Ateriuz", "Zayde Sunsabre", "Air One Com", "Grasszanine", "Xanvias Einzbern", "Erma Starr", "Johosh The Mighty", "Mistwalker Cael", "Smol Daddy Tika", "Sub Train", "Ryvalia Fazebringer", "Zaylen Harker", "Crusader Siolith", "Mmathuss", "Gabe Malhorn", "Koralia Danai", "Solus Sanctus", "Sister Elon\u00edth"];
const professions = ["Scrapper", "Vindicator", "Firebrand", "Spellbreaker", "Berserker", "Spellbreaker", "Firebrand", "Spellbreaker", "Berserker", "Guardian", "Berserker", "Vindicator", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 1.2182, 1.8749, 0.0, 20.514, 1.9551, 0.0, 0.8901, 0.0], [2.5013, 0.0, 1.2859, 2.4797, 0.0, 0.0, 7.89, 0.0, 3.013, 0.0, 0.0, 3.5061, 0.6831, 1.103, 0.4061, 0.9082, 3.2004, 0.2033, 0.2222, 0.2257, 0.3326], [29.5875, 2.4181, 0.1808, 0.0, 3.0636], [1.297, 0.0, 0.0, 0.0, 0.0, 0.0, 9.468, 2.7783, 0.0, 0.0, 0.0, 1.2935, 2.5047, 0.0, 0.0, 1.2384, 1.0332, 1.8295, 1.511, 1.6302, 1.4731, 3.6221, 3.5424, 2.6866, 0.8531, 3.8971], [0.0, 0.0, 0.0, 0.0, 0.0, 15.78, 0.0, 0.0, 2.7974, 0.0, 2.9955, 1.012, 1.1416, 0.3807, 0.3302, 0.882, 1.4907, 2.1331, 0.6521, 2.281, 2.4394, 0.84, 1.6271, 0.0826, 4.1912], [6.0216, 2.568, 0.0, 3.6288, 0.0, 18.5415, 4.2189, 1.8078, 0.0, 1.736, 1.9734, 0.5612, 0.0], [2.1505, 2.322, 2.1319, 1.6718, 2.5704, 2.1006, 3.9552, 3.135, 3.7066, 5.4701, 4.3094, 2.0434, 1.9264, 9.4118], [3.4277, 1.7153, 1.8612, 0.0, 0.0, 0.0, 21.6975, 0.0, 0.0, 0.0, 0.7489, 1.2144, 0.0, 0.3807, 0.3922, 0.0, 0.9486, 0.6222, 0.8778, 1.8058, 2.6981, 1.753, 2.0434, 1.4035, 4.2647], [2.316, 1.2182, 1.2701, 0.0, 19.3305, 2.6754, 1.2052, 0.0, 0.9133, 1.1914, 0.6325, 1.3545, 1.5482, 0.4541, 0.7056, 2.9137, 0.711, 1.4296, 1.3781, 2.2546, 2.3008, 2.0812], [3.1498, 1.6646, 3.6209, 0.5443, 0.0, 0.5722, 29.193, 3.7044, 3.3746, 2.8849, 2.7232], [3.9835, 1.4109, 1.2859, 1.7539, 0.9228, 18.936, 2.8812, 1.9283, 1.2239, 2.0898, 1.668, 1.4927, 0.7159, 1.4467, 0.227, 1.4112, 0.0339, 1.9998, 1.4546, 0.1426, 0.924, 0.913, 3.3678, 3.0272, 4.6324], [0.6485, 0.0, 1.1167, 3.145, 0.8956, 0.0, 37.083, 0.0, 2.1091, 0.0, 0.0, 3.6082, 1.1385, 0.8901, 1.9289, 0.0, 0.5544, 0.3049, 1.2888, 0.2759, 0.5227, 1.3306, 1.6799, 0.2649, 0.4678, 6.6912], [7.3186, 4.0608, 4.9594, 1.7912, 0.0, 35.505, 4.8363, 4.8208, 4.4147, 1.6873, 2.9615, 1.8975, 2.8638, 1.3198, 1.9608, 0.8064], [1.6675, 0.0, 0.0, 0.0, 0.0, 19.725, 0.2573, 0.0, 0.0, 2.2136, 4.7316, 2.7577, 2.7283, 2.0304, 1.3416, 3.1248, 2.3038, 4.5329, 3.0096, 6.9379, 7.2072, 4.3459, 8.9302, 3.8803, 12.0589], [3.7982, 2.1822, 0.0, 2.4797, 0.0, 0.0, 46.9455, 0.0, 5.9657, 0.0, 3.0976, 1.9734, 4.4311, 2.7157, 1.4654, 0.8568, 3.964, 4.444, 0.9029, 3.1838, 3.733, 4.4189, 7.3788, 3.8803, 11.3236], [9.5419, 2.2334, 2.5402, 2.1169, 47.7345, 5.8138, 5.0016, 8.1738, 6.1953, 4.7564, 1.2577, 3.4263, 2.9515, 1.512, 2.6088, 4.2218, 2.8842, 2.0434, 5.581, 5.0398, 6.3571, 3.2198, 13.8972], [5.0952, 4.0905, 4.9068, 1.9958, 4.3695, 0.0, 63.12, 5.9167, 8.4364, 1.8795, 8.1356, 2.6818, 2.5542, 1.9543, 1.6099, 1.2096, 4.4044, 6.3549, 6.0192, 4.9421, 4.8787, 4.9667, 5.3733, 4.761, 13.456], [3.7982, 4.6386, 5.6174, 7.3181, 3.9082, 1.4249, 54.8355, 6.1225, 4.64, 4.2399, 6.4336, 4.807, 2.1479, 4.0354, 3.4262, 3.2508, 6.1323, 3.9107, 5.0912, 5.94, 9.0922, 7.0484, 9.1951, 3.7978, 15.0736], [6.2995, 0.4162, 3.4517, 5.1408, 1.547, 0.3815, 59.5695, 7.7175, 7.7133, 5.2452, 2.1053, 8.0334, 5.3636, 4.0054, 4.2131, 2.7245, 3.276, 4.9465, 5.555, 4.6147, 8.5536, 9.0552, 6.6466, 7.1518, 3.3299, 15.5148], [11.4874, 4.466, 6.971, 11.0074, 3.3925, 0.4376, 75.3495, 9.5697, 8.3159, 5.726, 3.2198, 7.0463, 3.0866, 1.877, 6.2181, 3.0754, 4.4856, 6.8099, 5.9105, 3.5614, 7.0805, 8.0203, 5.9893, 6.6598, 6.6048, 18.7502], [9.5419, 4.2638, 9.9792, 2.9854, 0.0, 106.9095, 8.0262, 1.9886, 0.6994, 0.2322, 6.1612, 5.2877, 4.644, 2.9695, 2.869, 5.1912, 3.5235, 6.3549, 4.1633, 6.3677, 9.5726, 6.5371, 6.622, 4.816, 16.3972], [17.1384, 3.4815, 8.8999, 13.4266, 3.6096, 74.166, 3.8073, 3.6759, 3.6279, 2.3684, 8.1356, 3.6685, 3.9861, 5.3552, 3.8803, 6.174, 7.7924, 4.7106, 6.6964, 7.6507, 11.125, 6.6832, 6.6977, 7.1827, 16.3972]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

