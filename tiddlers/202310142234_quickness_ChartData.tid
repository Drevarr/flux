created: 20231014223416000
creator: Drevarr
tags: ChartData
title: 202310142234_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Morv\u00e4rth", "Newtype Khan", "Amiti\u00e9l", "Atria Ruinheart", "Aronorf Xideliesi", "Sygaldry Verdandi", "Bella Bitty", "Koralia Danai", "Gabe Malhorn"];
const professions = ["Firebrand", "Reaper", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.4029, 82.0849, 58.737, 0.0, 47.8328], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 320.9356, 118.6144, 0.0, 0.0, 0.0, 0.0, 0.0], [207.4901, 34.5345, 0.0, 182.5217, 32.1798, 15.3282, 0.0, 52.3032, 83.4816, 48.4344, 39.5138, 118.3462, 56.0557, 15.9997, 85.8096, 34.5235, 51.8364, 15.9628, 52.8163, 0.0, 56.6166, 16.0945, 0.0, 167.9622, 13.7514, 10.168], [29.2563, 175.6755, 50.5155, 32.1645, 104.2272, 66.3062, 111.0037, 33.6224, 73.9164, 107.4432, 57.4554, 183.7568, 168.5036, 69.0293, 43.1297, 64.2845, 81.8381, 23.6502, 25.4945], [26.384, 174.2083, 39.6165, 13.3446, 153.7351, 96.5642, 69.5366, 0.0, 67.008, 59.0178, 35.4925, 125.1966, 76.074, 126.9338, 19.9414, 49.2826, 69.1866, 10.8715, 169.0801, 166.3913, 67.7513, 37.7614, 220.5801], [35.0662, 149.3435, 54.0015, 3.2202, 192.5101, 57.1402, 69.305, 22.2163, 64.8396, 104.3328, 46.2396, 151.4697, 143.0706, 53.1495, 98.9446, 77.2771, 65.4106, 20.349, 39.1413, 69.0359, 99.2876, 70.2484, 10.6704, 151.164, 0.0, 37.1778, 13.7663], [22.7174, 209.5751, 25.872, 9.7069, 100.6909, 72.7866, 100.2702, 9.8739, 99.8076, 121.8816, 77.1528, 155.0831, 208.0311, 88.8847, 82.4947, 106.3005, 20.7055, 39.0348, 37.323, 140.1164, 149.0119, 70.9618, 34.412, 20.0889, 3.9302, 81.2442, 11.3115], [20.5741, 221.3125, 44.667, 46.5021, 211.3703, 31.145, 80.193, 28.9834, 77.5248, 125.8368, 50.2572, 156.1321, 174.4091, 90.6983, 104.7552, 92.015, 89.068, 40.2192, 35.0262, 167.9897, 166.351, 107.2963, 32.7374, 187.629, 139.9961, 68.499, 10.7753], [36.2086, 255.0577, 51.7965, 21.0563, 235.9381, 83.4064, 55.2509, 36.5165, 87.5316, 154.2144, 97.0176, 172.5088, 213.7004, 84.072, 94.3206, 86.5206, 166.8848, 58.3758, 21.9919, 180.7338, 147.4027, 100.6715, 41.0366, 213.486, 0.0, 13.287], [248.494, 16.0545, 15.1914, 239.2883, 84.0717, 50.4633, 61.6694, 104.904, 157.7856, 38.4462, 186.7291, 185.039, 102.9743, 123.4147, 91.9504, 110.2013, 42.6636, 35.3899, 173.3736, 165.1844, 108.5703, 63.1777, 225.0885, 83.6088, 85.6818, 23.9537]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

