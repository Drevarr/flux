created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Hayuf", "Koranthin", "Luke The Knight", "Tika Fiery", "Lucky Leipreach\u00e1n", "Ggclaudx", "Glorious Gluvs", "S\u00e2ucy K\u00e2t", "Lost Uber Driver", "Tantai Jin", "Scythe User", "Kittendo", "Jello Jawn", "Free H\u00e4nd", "Jmbrage Rev", "Jerryatric Reflexes", "Red Reaper Robin", "Drevarr Moonwillow", "Audra Storm"];
const professions = ["Firebrand", "Firebrand", "Berserker", "Firebrand", "Scrapper", "Holosmith", "Berserker", "Chronomancer", "Herald", "Reaper", "Reaper", "Soulbeast", "Virtuoso", "Vindicator", "Vindicator", "Berserker", "Reaper", "Scrapper", "Weaver"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[286.856, 197.0588, 194.7931, 800.5351, 175.627], [113.28, 12.098, 0.0, 549.1491, 108.4622, 40.877, 0.0, 514.6466, 55.2279, 0.0, 54.3559, 184.5395, 184.0385], [147.4127, 0.0, 139.1207, 451.9488, 9.5152, 126.678, 520.8289, 1425.7885], [260.208, 83.3529, 0.0, 108.9474, 172.5195, 158.873, 72.25, 371.1983, 249.3953, 14.5152, 22.4237, 132.8421, 266.6923], [252.504, 496.7451, 24.6552, 587.4386, 658.4737], [443.7063, 549.75, 716.75, 406.5814, 137.6667, 113.0, 2487.7692], [91.056, 194.8431, 0.0, 342.6754, 267.9771, 172.0794, 90.5, 1161.1121, 181.5023, 17.3636, 214.8475, 187.6316, 788.9231], [124.8, 53.8235, 142.2069, 167.9298, 231.4531, 468.0437, 526.9444, 733.8879, 452.5628, 91.9091, 60.661], [664.5, 77.2778, 1977.2414, 985.4558, 0.0, 95.9153, 373.8462], [314.152, 696.3333, 140.9655, 362.0965, 445.9405, 156.9722, 375.1667, 987.4138, 462.1628, 0.0, 235.2712, 169.9211, 706.1731], [673.584, 294.4902, 551.0, 451.2632, 1109.1693], [664.119, 185.1389, 1135.2931, 1333.3674, 281.4848, 331.4068, 881.75], [1142.84, 930.9804, 977.7586, 1520.8772, 1193.1945], [604.36, 468.6275, 109.9655, 1366.2018, 743.0046, 485.6508, 117.9167, 908.4741, 532.3721, 173.0, 31.9322, 144.5789, 1090.5], [1320.12, 954.8431, 1051.8276, 987.9737, 1280.984, 441.4841, 766.5, 1895.6897], [896.1349, 739.3333, 3535.4224, 1027.5767, 176.0303, 274.9492, 1456.5263, 5302.8269], [648.504, 733.4706, 931.7931, 2161.4825, 912.7346, 624.6984, 562.8056, 2810.8103, 573.8977, 0.0, 211.3051, 535.6316, 1411.4615], [1305.728, 1664.5098, 904.3448, 2005.9912, 1434.7735, 1009.9683, 1176.6944, 2316.3448, 1157.1442, 150.8485, 236.9322, 584.4605, 1720.5192], [487.992, 649.0196, 921.6207, 2622.9474, 1689.2426, 843.0159, 406.6389, 1981.8362, 1128.7023, 238.5758, 316.7966, 1483.6053, 2439.0769]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

