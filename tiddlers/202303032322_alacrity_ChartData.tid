created: 20230303232222000
creator: Drevarr
modified: 20230705163520999
modifier: drevarr
tags: ChartData
title: 202303032322_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Seren\u00e1 Joy", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Hud Da Bu Dah", "High Sorcer Baradun", "Zadie Miststep", "Eibh\u00ebar", "Venomina The Siren"];
const professions = ["Chronomancer", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 32.4972, 32.4523, 16.0803, 19.5685, 22.9845, 8.161, 17.3508, 0.0, 0.0, 15.2021, 24.1312, 40.6464, 63.3746, 0.0, 0.0, 88.5972, 0.0, 54.7024, 0.0, 29.3257, 0.0, 109.4285, 0.0, 58.608, 51.2302], [0.0, 93.0852, 37.0943, 0.0, 9.3636, 0.0, 0.0, 37.3236, 37.4616, 35.9541, 36.0346, 35.7825, 107.6896, 17.2431, 76.3494, 37.2674, 130.29, 0.0, 43.6071, 0.0, 18.5484, 0.0, 250.8019, 35.9136, 48.312, 0.0], [0.0, 122.553, 0.0, 0.0, 21.1421, 0.0, 5.4407, 12.6312, 19.2984, 130.3567, 58.3848, 11.0663, 194.3552, 49.5302, 15.334, 0.0, 142.7978, 0.0, 248.2249, 5.4096, 18.2926, 2.6964, 171.959, 0.0, 18.4536, 31.6609], [0.0, 495.6232, 0.0, 641.2045, 142.6589, 31.122, 803.0419, 41.022, 169.092, 177.8738], [39.9133, 396.3006, 32.2432, 41.0192, 41.2091, 69.6696, 70.5155, 22.2756, 85.6044, 487.5007, 84.8232, 191.295, 497.1008, 90.2639, 41.9733, 110.7787, 148.3569, 1030.0558, 212.3654, 35.6097, 38.2536, 1126.9094], [89.745, 212.4711, 26.5062, 48.8277, 5.3592, 207.5459, 55.6548, 72.0852, 517.0015, 39.2904, 130.1138, 585.4016, 126.3494, 30.9747, 0.0, 641.7217, 749.8352, 123.9571, 0.0, 0.0, 918.2477, 129.3354, 131.6304, 100.7103], [0.0, 296.8812, 79.5835, 0.0, 73.4753, 43.4973, 32.4307, 74.1, 34.1592, 439.5619, 99.1685, 106.08, 758.032, 113.9044, 0.0, 0.0, 516.9907, 0.0, 745.1906, 188.0995, 8.4587, 0.0, 913.1501, 208.0512, 126.72, 137.5419], [35.9938, 272.7837, 7.3394, 0.0, 39.5888, 39.3624, 38.9915, 111.1956, 65.9448, 391.9919, 79.7069, 76.4887, 810.3584, 180.4278, 43.5625, 77.2637, 464.8747, 0.0, 684.2956, 244.0502, 43.848, 1011.3638, 124.1496, 162.9144, 140.7239]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

