created: 20230626220846000
creator: Drevarr
modified: 20230705163539325
modifier: drevarr
tags: ChartData
title: 202306262208_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Zadey Starbolt", "My Birthday Girl", "Drevarr Moonwillow", "Zadie Miststep", "Mike The Archmagus", "Tegan Parker", "Rahani Sunray", "Artakama Nahid", "Primal Clone", "Eibh\u00ebar", "Black Raspberry Pie"];
const professions = ["Chronomancer", "Scrapper", "Scrapper", "Scrapper", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[54.3425, 49.5726, 0.0, 0.0, 0.0, 45.195, 14.9405, 0.0, 17.4048, 0.0, 0.0, 59.88, 23.126, 33.4751, 0.0, 18.9446, 0.0, 0.0, 29.52, 15.7014], [28.6827, 56.2658, 13.4246, 59.0258, 25.53, 58.5948, 29.8714, 5.2322, 33.1731, 65.0579], [0.0, 36.9178, 19.1369, 7.5891, 28.9851, 19.2321, 8.1287, 19.992, 10.6546, 9.8006, 42.9244, 13.8966, 23.9954, 24.15, 50.1547, 34.2563, 2.74, 29.8152, 56.1132], [168.861, 0.0, 18.8839, 38.7302, 22.2715, 33.6853, 12.9438, 7.7326, 17.7744, 29.8116, 42.7592, 59.1661, 20.7662, 34.586, 11.684, 35.8855, 50.4643, 5.2168, 29.2248, 20.7207], [750.0499, 6.2832, 32.7888, 45.2898, 10.0901, 78.6996, 23.868, 34.3252, 20.0256, 43.0063], [1093.6052, 40.9556], [551.7149, 12.4136, 7.6194, 27.7242, 27.5856, 10.2665, 16.9902, 88.6599, 45.046, 62.951, 29.808, 63.9989, 47.0583, 44.2728, 82.8036, 97.2972], [0.0, 79.1182, 114.7074, 0.0, 124.0753, 53.7948, 33.948, 62.9328, 48.263, 154.8791, 141.847, 73.3636, 207.8124, 68.908, 196.6721, 130.252, 25.124, 135.2754, 239.5107], [1337.0721, 39.9168, 23.954, 65.3393, 35.1859, 57.6086, 41.4936, 9.694, 76.0704, 71.1245, 58.5385, 72.9091, 11.5368, 175.7444, 34.822, 94.1767, 79.6311, 45.8982, 80.9217, 102.8313], [1044.482, 0.0, 43.3237, 108.6612, 73.1962, 191.6268, 59.7389, 24.7066, 75.2304, 98.3606, 180.2319, 64.8775, 58.6541, 196.4812, 77.188, 182.0993, 135.9679, 44.4121, 160.2567, 214.5429], [1120.623, 8.5932, 74.048, 114.6219, 60.6483, 79.8445, 59.7159, 45.8487, 39.5472, 50.8032, 133.7266, 176.1151, 77.6112, 295.4994, 51.014, 226.8499, 106.9186, 32.9414, 144.3897, 297.1683], [1206.2816, 72.0489, 100.6434, 54.131, 65.6502, 157.8209, 80.807, 57.0704, 60.7152, 68.2315, 87.4482, 146.5767, 85.2674, 176.559, 70.702, 227.3964, 125.8672, 34.1024, 176.8248, 383.6547]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

