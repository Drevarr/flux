created: 20230222222328000
creator: Drevarr
modified: 20230705163520036
modifier: drevarr
tags: ChartData
title: 202302222223_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Dark Sidiuz", "Sassy Daddy Demon", "Smol Daddy Tika", "Jeckyll Mbs", "Kosair", "Arcanophage Farra", "Xanvias Tseli", "Mistwalker Caelon", "Xyntharos", "Ryvalia Fazebringer", "Kosair", "Kiloak", "Veron Blackburn", "Blanco Padre Guard", "Zaylen Harker", "Sygaldry Verdandi", "Ace Hammers", "Ravioli Fetabringer", "Bella Sassy", "Koralia Danai"];
const professions = ["Druid", "Scourge", "Vindicator", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Berserker", "Vindicator", "Vindicator", "Chronomancer", "Dragonhunter", "Firebrand", "Herald", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.8608, 0.8764, 44.4783, 0.9521, 0.9514, 1.7877, 1.6651, 0.9326, 0.5789, 4.2687, 2.3543, 3.6787, 1.2206], [0.0, 48.1848, 0.0, 0.1544, 3.3794, 1.6677, 11.0361, 0.8283], [0.0, 0.0, 37.0652, 0.0, 0.0, 0.0, 1.1656, 1.904, 2.4701, 14.0513, 6.7687, 2.719, 4.5773], [1.0622, 1.0695, 61.1577, 0.0, 0.0, 2.7173, 2.1647, 0.8937, 1.0807, 7.1146, 2.1581, 4.9582, 0.5667], [1.0073, 0.9952, 55.5979, 1.9821, 2.5743, 3.0528, 1.7486, 2.007, 7.1146, 2.9429, 5.598, 1.7437], [2.3992, 1.9014, 2.5482, 2.2992, 4.8626, 9.6578, 4.5464, 5.2104, 22.2331, 10.7907, 16.1543, 5.7108], [0.0, 0.0, 77.837, 0.0, 1.8235, 0.0, 1.9427, 3.3029, 3.1262, 11.2055, 5.1011, 5.9179, 1.5694], [0.989, 0.9952, 107.4892, 1.0081, 1.4271, 3.0033, 4.3294, 1.0103, 1.7754, 8.5375, 3.9239, 8.7969, 1.9181], [1.1904, 3.7582, 148.261, 2.3802, 0.0, 1.8592, 2.9973, 0.5052, 1.3122, 12.8062, 5.2973, 10.2364, 4.3594], [0.0, 0.1783, 151.9675, 0.0, 0.5946, 4.076, 4.3294, 5.4013, 2.8561, 14.407, 7.7497, 23.1918, 4.0978], [1.8681, 0.0, 150.1143, 0.0, 0.0, 1.8592, 0.0, 4.3132, 8.2594, 22.9445, 10.1041, 13.1153, 6.6698], [253.897], [161.2338, 3.5843, 2.5371, 8.7955, 10.6569, 10.4528, 5.056, 20.8101, 10.3983, 18.8733, 10.5061], [324.3209], [2.3259, 3.4462, 240.9241, 2.4362, 2.6164, 10.4402, 8.7697, 2.7978, 0.0, 20.0987, 5.984, 22.7119, 8.1084], [3.205, 2.4361, 253.897, 5.7877, 6.5787, 8.0482, 5.5178, 1.2736, 26.5018, 8.1421, 20.9526, 9.7214], [2.8571, 3.7582, 313.2014, 1.2601, 1.1496, 2.7173, 7.9372, 8.6265, 5.3262, 26.8575, 11.4774, 21.9122, 6.7134], [4.5603, 1.7974, 328.0275, 3.8364, 1.665, 13.5865, 8.1037, 1.9818, 2.3543, 17.7864, 12.8508, 29.2696, 4.0542], [3.9926, 4.7386, 418.8373, 5.7966, 5.0345, 9.2246, 7.9927, 9.7145, 8.1436, 26.6797, 15.107, 16.3142, 10.1137], [4.7984, 3.8621, 398.4514, 7.6167, 7.7302, 12.6569, 10.6569, 8.6265, 9.5716, 33.6164, 11.4774, 28.6298, 11.8139], [5.4028, 5.0208, 446.6363, 6.1606, 6.422, 15.3743, 9.0473, 9.5202, 10.1506, 36.8179, 13.7337, 31.8287, 12.773]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

