created: 20230902220918000
creator: Drevarr
tags: ChartData
title: 202309022209_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Aira Draugr", "Sofya De Nova", "Greg The Knight", "Sygaldry Verdandi", "Elfina Lightborn", "Fqa Necr", "Sygaldry Verdandi", "Revenant Brandorf", "Mistwalker Cael", "Val Haden", "Mistwalker Cael", "Sly The Ele", "Sight Beyond Sights", "Glorious Gluvs", "Rina Of Theros", "Legacy Of Mathus", "Koralia Danai", "Gabe Malhorn", "Melody Phoenixstorm", "Zaedy Zae", "Newtype Khan", "Bella Sassy", "Xanvias Einzbern", "Be\u00eb", "Tootsie Pop Rocks", "Hyde En Sikh", "Drevarr Moonwillow", "Mort\u00e4rion", "Daphne Agla\u00e9"];
const professions = ["Firebrand", "Herald", "Tempest", "Firebrand", "Willbender", "Berserker", "Scourge", "Firebrand", "Herald", "Vindicator", "Reaper", "Herald", "Tempest", "Vindicator", "Berserker", "Reaper", "Berserker", "Firebrand", "Firebrand", "Scrapper", "Druid", "Spellbreaker", "Firebrand", "Berserker", "Reaper", "Scrapper", "Chronomancer", "Scrapper", "Scrapper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3574, 0, 16226, 611, 0, 3064, 269, 291, 26359, 7348], [0, 0, 22768, 0, 0, 3564, 0, 0, 269, 24306, 7649], [0, 2992, 998, 12121, 6745, 259, 5656, 3879, 3973, 9429, 8351, 7154, 2840], [634, 0, 0, 0, 291, 2197, 1574, 2957, 8895, 621, 0, 3971, 421, 21728, 7783, 1804, 11971], [2936, 0, 21089, 2962, 0, 3594, 245, 13249, 12131, 9189, 263], [0, 269, 5738, 0, 585, 0, 5962, 8409, 272, 7687, 1590, 6169, 9778, 11803, 9318, 5034], [524, 12701, 11231, 10072, 16340, 5994, 12724, 4362], [9775, 18894, 0, 7871, 1850, 1115, 10079, 9106, 19859, 5042], [9888, 6495, 8398, 0, 5495, 2475, 15750, 9346, 7293, 12074, 6876], [7514, 0, 30458, 224, 0, 3336, 0, 13465, 16374, 14719], [0, 0, 0, 873, 6232, 631, 2336, 9372, 15378, 272, 6718, 2543, 8271, 27190, 8986, 5276, 3783], [5756, 10661, 6292, 441, 8854, 5203, 11150, 14918, 11416, 13350, 9884], [0, 0, 3281, 0, 851, 16158, 6945, 507, 10344, 9368, 0, 6929, 2358, 16053, 14393, 2358, 13590, 7427], [0, 82571, 0, 829, 7105, 8252, 0, 2064, 6432, 3728, 2962, 0, 831, 6790, 0, 1248], [614, 0, 25985, 3218, 0, 6375, 0, 0, 10873, 33569, 13994, 6958, 6794, 6918, 272, 102, 71, 1465, 4358, 4454, 278, 4690], [4011, 0, 30216, 961, 0, 4295, 0, 0, 9664, 23920, 5119, 6260, 2956, 4390, 0, 7737, 1083, 7427, 7225, 2732, 2373, 11821], [0, 0, 36194, 545, 1319, 2798, 0, 0, 12042, 1040, 10299, 5123, 3613, 6033, 0, 6729, 421, 2605, 13578, 5864, 8837, 21225], [9561, 0, 30058, 856, 1863, 0, 12716, 16446, 14808, 7427, 12679, 13089, 0, 3136, 3513, 11304, 18187, 12518, 8229, 8608], [2587, 0, 27286, 172, 0, 3244, 0, 0, 12535, 25588, 11172, 6375, 4619, 18095, 617, 7875, 1087, 14517, 12722, 7637, 15084, 14584], [7946, 58731, 6783, 0, 22043, 0, 743, 64662, 28249], [5687, 35300, 3497, 0, 3903, 0, 0, 10150, 36362, 13857, 12555, 21140, 11353, 5973, 8114, 516, 5746, 16467, 10811, 5672, 12871], [5796, 30832, 3393, 0, 5919, 0, 842, 13482, 33309, 24612, 114, 18093, 20509, 4429, 7417, 5524, 8174, 27768, 7349, 18739, 31234], [1283, 70359, 4158, 0, 3524, 194, 27149, 62173, 31542, 8763, 26205, 11003, 1947, 13915, 9135, 7516, 16826, 27232, 26247, 15425], [6362, 0, 86846, 7518, 0, 8589, 1580, 23574, 80008, 29230, 10170, 15126, 21410, 28, 15325, 9089, 15707, 433, 15945, 18197, 23974], [5088, 0, 81535, 4314, 0, 13019, 0, 0, 21904, 93450, 29823, 12947, 16528, 18256, 595, 3762, 9687, 12093, 25290, 17652, 9943, 31959], [15174, 118628, 12968, 0, 17975, 0, 0, 11968, 133658, 24525, 6832, 12721, 12119, 1758, 3730, 1723, 6463, 17758, 17314, 12147, 5099], [7726, 84272, 4634, 0, 9214, 0, 20009, 73770, 26897, 7599, 19200, 17715, 4251, 12549, 8337, 15687, 26954, 32475, 39720, 58060], [5019, 0, 101049, 4899, 357, 11254, 0, 22, 29284, 98383, 35514, 15416, 27880, 22096, 2599, 10916, 7899, 15358, 31207, 30030, 23112, 22586], [18392, 1537, 98858, 10218, 0, 21290, 2717, 2394, 128040, 6491, 19772, 41806, 17868, 7231, 37082, 7585, 16233, 63439, 41360, 12157, 31416], [26680, 0, 238950, 12585, 0, 43717, 686, 75706, 126296, 84749, 44960, 65702, 66790, 9051, 48718, 2589, 46677, 10286, 20105, 48835, 29840]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

