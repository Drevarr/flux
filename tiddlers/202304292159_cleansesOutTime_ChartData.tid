created: 20230429215910000
creator: Drevarr
modified: 20230705163527375
modifier: drevarr
tags: ChartData
title: 202304292159_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Smol Gluvs", "Xanvias Tsolice", "Stark Gandalf", "Newtype Khan", "Skye Nightroad", "Johosh The Great", "Miphest\u00f6", "Duchess Hazel", "Magister Boombottom", "Kaotic Reaper Z", "Yuuka Chou", "Fribble Bibble", "Fallendruid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Scourge", "Weaver", "Tempest", "Spellbreaker", "Scrapper", "Firebrand", "Tempest", "Vindicator", "Tempest", "Tempest", "Tempest", "Scrapper", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[921.6, 0.0, 1484.28, 1796.76, 0.0, 0.0, 144642.4, 8698548.6, 341463.36, 628.14, 742473.0], [0.0, 4476.78, 0.0, 43435.52, 0.0, 36064.0, 9162771.66, 465642.24, 628.14, 357011.55, 0.0, 0.0, 41908.23, 79122.42, 0.0, 0.0, 1674.4, 51882.48], [764.4, 4608.0, 0.0, 30834.72, 0.0, 0.0, 0.0, 0.0, 10805902.38, 93105.6, 0.0, 891198.9, 0.0, 0.0, 0.0, 7087.86, 0.0, 0.0, 0.0, 29654.82], [3062088.96, 8287.04, 3318345.45, 0.0, 0.0, 0.0, 73677.24, 9378.6, 4195.2, 237453.84], [0.0, 3686.4, 0.0, 25448.22, 0.0, 21717.76, 0.0, 126417.2, 18016812.45, 279431.04, 0.0, 623700.45, 0.0, 0.0, 62814.83, 49706.28, 0.0, 0.0, 0.0, 81537.3], [1549.8, 25615.8, 0.0, 0.0, 25502.4, 225915.2, 19575597.51, 1471296.96, 6623.02, 535112.55, 4612.5, 0.0, 0.0, 43165.98, 0.0, 0.0, 0.0, 29654.82], [1077.3, 16470.72, 3622.5, 32576.64, 16979.52, 108320.8, 20577121.74, 1250928.0, 4077.4, 1086416.1, 9255.75, 0.0, 0.0, 23666.76, 815.1, 4195.2, 89610.3], [2494.8, 4476.78, 0.0, 0.0, 0.0, 27048.0, 31012804.62, 2163819.84, 308.56, 686267.1, 0.0, 0.0, 28412.28, 0.0, 0.0, 0.0, 81537.3], [255.15, 37513.98, 0.0, 0.0, 22455.36, 171561.6, 38937755.43, 2646826.56, 7846.24, 863442.9], [2334.15, 20971.44, 0.0, 54294.4, 31110.72, 216834.8, 43236486.72, 3069057.6, 0.0, 11592.75, 0.0, 0.0, 60779.16, 0.0, 401.28, 7065.6, 201609.72], [20534.4, 262687.6, 37620095.94, 2497971.84, 5025.12, 2755014.3, 0.0, 0.0, 20906.6, 58771.44, 3511.9, 0.0, 5869.6, 215979.66], [82497.24, 7273.98, 79155.52, 49878.72, 81530.4, 58663694.25, 4048322.88], [16315.74, 184743.84, 40759.68, 127318.8, 56123022.69, 4548465.6, 19725.8, 5059456.2], [6038.55, 127025.64, 0.0, 26473.92, 743304.8, 72900082.71, 7460557.44, 23615.86, 7149483.0, 52644.0, 0.0, 0.0], [0.0, 8563.2, 8079.75, 106269.66, 13359.78, 130378.0, 64915.2, 667119.6, 75443651.64, 7061631.36, 5105947.5, 85454.25, 315499.6, 149909.76, 8992.9, 6232.38, 29495.2, 630447.48]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

