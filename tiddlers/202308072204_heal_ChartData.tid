created: 20230807220400000
creator: Drevarr
tags: ChartData
title: 202308072204_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Jmbrage Gaurdian", "Solus Sanctus", "Tootsie Pop Rocks", "Tegan Parker", "Zaedy Zae", "Arriasa", "Klengah", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Tempest", "Druid", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1880.8, 1720.871, 1214.5965, 920.7895, 247.1529], [145.5385, 84.3733, 244.3, 274.4857, 31.2857, 35.62, 222.6349, 227.078, 239.7667, 119.1753, 264.7131, 1.1667, 273.2766, 276.1379, 296.2987, 189.08, 220.3065, 401.2807, 603.1447, 448.2824], [264.5714, 26.8933, 226.1385, 2256.2381, 100.619, 187.48, 1915.254, 624.4488, 493.5167, 1352.4948, 1919.4754, 1030.766, 3452.1724, 662.4286, 2585.8, 1347.6129, 2893.6667, 1202.1053, 632.8706], [30.0659, 151.7333, 369.0462, 2075.4762, 0.0, 847.66, 1829.5556, 1378.5171, 2026.3689, 1150.1277, 2269.2414, 1995.5974, 2167.48, 2039.2258, 2121.0526, 1472.3026, 503.3529], [129.7033, 395.0, 904.4846, 3630.4, 130.1905, 608.58, 1270.3016, 796.4585, 1208.5667, 2464.7423, 1332.2213, 133.5417, 2107.3617, 2681.7586, 2256.4675, 4271.92, 590.5484, 2168.1579, 2165.6579, 2933.0], [416.1319, 250.2267, 1098.6769, 231.5714, 0.0, 173.34, 2743.381, 655.6293, 1194.4833, 1693.2577, 2819.8689, 1802.5532, 4773.9138, 2178.7273, 4267.18, 4114.5806, 3379.9298, 4.8857, 2774.6053, 530.5529], [380.7802, 703.6, 1311.4231, 3227.3714, 20.0952, 859.44, 1111.6032, 1345.6927, 474.6833, 2104.2165, 2293.2377, 1482.2128, 3970.569, 3453.5974, 4101.18, 820.8387, 405.5263, 2843.3289, 3163.4824], [130.9121, 264.0267, 1054.8077, 4093.0, 285.381, 923.48, 3428.8254, 2283.9171, 1388.9833, 3813.6701, 2120.3607, 39.7917, 1379.6809, 4550.431, 2456.2078, 3823.5, 3615.7258, 3150.2105, 648.9211, 3443.0588], [410.9231, 685.7067, 643.5462, 3374.0095, 351.0, 1280.66, 3653.3016, 2080.7268, 1315.5, 3677.6495, 3570.7049, 130.9167, 1247.5106, 4734.1724, 3133.0909, 7091.52, 3280.371, 4851.5614, 0.0, 1567.4868, 3334.4471]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

