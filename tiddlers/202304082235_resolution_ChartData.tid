created: 20230408223537000
creator: Drevarr
modified: 20230705163525058
modifier: drevarr
tags: ChartData
title: 202304082235_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Traidoruns Maximus", "Venom The Ferocious", "Kosair", "Sister Elon\u00edth", "Aronorf Xideliesi", "Sygaldry Verdandi", "Mmathuss", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[328.5458, 258.3042, 552.1194, 0.0, 27.0549], [458.2116, 0.0, 53.5923, 810.3171, 16.2658, 21.7879, 38.2439, 0.0, 116.3214, 81.9047, 22.0], [62.375, 64.2495, 118.6535, 298.0544, 153.2396, 95.7361, 109.4582, 297.8334, 52.5872, 21.516, 35.1416, 119.0889, 469.6752, 380.4841], [210.7997, 139.025, 99.2975, 171.2622, 351.4112, 123.5239, 144.4061, 163.8514, 130.5571, 45.2243, 0.0, 119.3724, 385.2377, 261.0016], [128.5903, 221.0639, 281.344, 239.7646, 135.7159, 162.2235, 230.034, 25.7302, 47.124, 143.6022, 484.0633, 347.2379], [123.625, 88.3806, 96.4656, 0.0, 69.138, 213.8842, 417.2387, 5.9023, 0.0, 33.9624, 47.4552, 71.4886, 0.0, 163.998, 130.597, 167.8622, 37.8193, 15.9558, 137.1044, 154.1568, 122.5204, 86.1122, 86.409, 180.9755, 40.5289, 16.1975, 0.0, 17.7159, 78.9264, 300.3949, 207.9478], [464.1377, 206.514, 611.3142, 51.8432, 298.0152, 886.7899, 23.8064, 53.8138, 66.1517, 0.0, 87.8904, 49.7297, 65.604, 227.2723, 158.6889, 191.7989, 98.3044, 50.9124, 35.8294, 292.8128, 93.6464, 18.5056, 175.8412, 105.6133, 0.0, 0.0, 18.2292, 11.9127, 80.325, 364.0269, 210.2407], [649.0807, 195.7032, 222.5286, 0.0, 118.9629, 877.9798, 1579.0364, 34.7029, 57.5837, 105.823, 216.6004, 190.9674, 77.2543, 73.172, 511.5771, 166.5708, 205.6018, 49.1106, 131.879, 110.0115, 199.6288, 120.2869, 140.432, 136.3318, 99.1783, 10.3895, 23.595, 52.1321, 58.3443, 281.0755, 286.9235], [780.9144, 151.4898, 533.1186, 0.0, 113.85, 929.4886, 1200.6644, 65.8921, 18.979, 92.5828, 46.004, 210.2022, 75.178, 49.566, 427.7837, 229.2622, 160.9171, 36.7105, 88.7922, 158.7724, 307.4624, 161.7205, 98.9201, 118.4247, 373.9254, 54.1097, 188.2818, 397.5317, 374.4335], [661.8388, 224.6706, 794.9277, 69.8521, 1108.175, 1602.7766, 88.6523, 64.7354, 154.6, 51.7068, 188.5572, 46.6924, 50.6, 552.5376, 326.3915, 308.1187, 57.6391, 109.8332, 310.4482, 261.5424, 98.243, 146.2255, 121.0346, 324.1372, 42.3925, 0.0, 62.0268, 39.6874, 86.2407, 389.831, 419.8445]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

