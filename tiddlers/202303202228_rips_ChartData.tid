created: 20230320222849000
creator: Drevarr
modified: 20230705163522720
modifier: drevarr
tags: ChartData
title: 202303202228_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Morton Saltbringer", "Seren Nightroad", "Oo Dads Mad", "Dark Sidiuz", "Jeckyll Mbs", "Rozaalyna", "Primal Clone", "Newtype Khan", "Nazhul Naxxremis", "Smol Gluvs", "Rina Of Theros", "Black Raspberry Pie", "Be\u00eb", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Chronomancer", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.3056, 0.1, 0.2267, 0.4706, 0.1881, 0.196, 0.1026, 0.0647, 0.4235], [0.375, 1.0, 1.075, 0.2933, 0.4314, 0.4455, 0.1307, 0.0395, 0.0216], [0.5, 0.6944, 0.625, 0.24, 0.6275, 0.2871, 0.1307, 0.1143, 0.018], [0.0, 0.2533, 0.3137, 0.2871, 0.0955, 0.0021, 0.0, 0.6588, 0.093, 0.0, 0.3828, 0.394, 0.0278, 0.0, 0.1297, 0.5125, 0.0, 0.1006, 0.7209, 0.1807], [0.3543, 0.0, 0.2571, 0.0, 0.75, 0.137, 0.2474, 1.0233, 0.5542, 0.0, 0.0299, 1.0779], [0.0441, 0.8611, 0.775, 0.32, 1.2549, 0.3465, 0.1357, 0.1688, 0.0432, 0.0353, 0.2558, 0.6016, 0.5795, 0.0694, 0.3429, 0.0432, 0.75, 0.2329, 0.3187, 0.8837], [0.8889, 0.375, 0.2667, 1.0196, 0.396, 0.1106, 0.1934, 0.0576, 0.6941, 0.1395, 0.0, 0.4922, 0.5364, 0.0278, 0.8286, 0.0973, 0.75, 0.0685, 0.2851, 1.186, 0.1325, 0.0224, 0.4675], [0.5, 0.8889, 0.75, 0.2, 1.0196, 0.3564, 0.1658, 0.1346, 0.0324, 0.6353, 0.1628, 0.0, 0.6016, 0.457, 0.1111, 0.781, 0.0216, 1.1, 0.137, 0.2369, 1.3837, 0.7108, 0.0323, 0.0373, 0.8571], [1.0278, 1.225, 0.5733, 0.8627, 0.5842, 0.1608, 0.0897, 1.5176, 0.2093, 0.0, 0.8203, 0.6821, 0.0694, 1.0571, 0.0973, 0.9625, 0.2329, 0.3669, 0.5581, 0.759, 0.0323, 0.1418, 1.3117], [1.0, 0.9, 0.2267, 0.5098, 0.4455, 0.2462, 0.172, 0.0755, 1.3294, 0.0233, 0.0556, 0.7578, 0.5099, 0.0278, 1.0857, 0.1405, 0.8, 0.2192, 0.3438, 1.0349, 1.4337, 0.0, 0.0075, 1.2338], [0.5147, 1.4167, 0.575, 0.4, 1.0784, 0.0891, 0.2161, 0.1538, 0.1115, 0.8824, 0.0465, 0.0556, 0.7656, 0.596, 0.0556, 1.4857, 0.1027, 0.9125, 0.0685, 0.2935, 0.7093, 0.7711, 0.0, 0.0299, 1.5065], [0.7059, 1.0833, 1.15, 0.2267, 0.7647, 0.2475, 0.1709, 0.3483, 0.1403, 0.7529, 0.1628, 0.0833, 0.2266, 0.7219, 0.0278, 0.219, 0.2541, 0.7, 0.3151, 0.4591, 0.593, 1.1446, 0.0, 0.0224, 0.7532], [0.7279, 1.5833, 0.5333, 1.0196, 0.6733, 0.2613, 0.265, 0.1295, 1.5176, 0.0465, 0.1389, 1.0078, 0.7583, 0.0417, 1.5333, 0.0649, 1.1375, 0.274, 0.1635, 1.4186, 1.3976, 0.0, 0.0896, 0.8701], [0.0294, 1.6944, 1.25, 0.28, 1.1961, 0.4257, 0.2362, 0.4647, 0.2482, 0.8824, 0.2791, 0.0833, 0.6797, 0.7185, 0.2361, 1.8857, 0.4162, 1.4, 0.5342, 0.3899, 2.0, 1.8675, 0.0, 0.0299, 2.039]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

