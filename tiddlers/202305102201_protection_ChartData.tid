created: 20230510220110000
creator: Drevarr
modified: 20230705163529563
modifier: drevarr
tags: ChartData
title: 202305102201_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Artakama Nahid", "Raelyn Sunray", "Belvyn Brightblade", "Eibh\u00ebar", "Primal Clone", "Gavann", "Black Raspberry Pie", "Ryvalia Fazebringer", "Etchery Howls", "Sub Train", "Ark Darkness", "Mac Aaroni", "Solus Sanctus", "Tribal S", "Zaidy Sagemist", "Lucas Ryn", "Johoshua", "Sygaldry Verdandi", "Drevarr Moonwillow", "Tika Fiery", "Miphest\u00f6", "Bella Sassy", "Koralia Danai"];
const professions = ["Tempest", "Tempest", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Druid", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Druid", "Vindicator", "Firebrand", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[228.8245, 0.0, 0.0, 0.0, 49.5475, 10.6891, 0.0, 29.0521, 0.6115, 152.9114, 9.2962, 0.0], [0.0, 13.9167, 128.6335, 107.2761, 36.0264, 151.7079, 18.6797, 12.1118, 12.5326, 0.0, 9.2782, 16.8168, 121.3318, 14.843, 9.2257, 75.294], [263.6935, 10.7971, 48.6346, 0.0, 45.9346, 34.7116, 20.1419, 205.8902, 46.3781, 11.1661, 90.0182], [23.2596, 27.5021, 383.515, 244.1598, 0.0, 263.9179], [20.6669, 0.0, 159.4615, 101.4923, 40.8408, 281.8715, 20.4682, 10.4458, 0.0, 0.0, 5.9682, 30.92, 149.1717, 16.3325, 20.533, 106.5828], [0.0, 13.7842, 226.9895, 141.5659, 34.1088, 233.1724, 0.0, 17.7653, 0.0, 0.0, 10.1528, 24.2697, 152.4958, 20.2872, 15.1351, 80.6482], [0.0, 26.9942, 0.0, 115.736, 41.8803, 97.2699, 683.9459, 18.1814, 0.0, 45.8457], [21.4157, 25.4256, 187.7205, 170.0719, 82.3344, 211.1792, 68.2934, 7.9373, 0.0, 32.8104, 29.8239, 38.2582, 104.9188, 21.109, 10.2841, 89.1816], [22.8197, 31.7433, 158.544, 168.6947, 33.1296, 275.8122, 45.1757, 30.2328, 32.9089, 0.0, 14.3717, 40.5514, 125.6948, 22.4443, 22.3499, 100.5593], [20.7646, 244.2385, 179.1607, 0.0, 293.0925, 26.1648, 33.3029, 34.7155, 22.4836, 43.2268, 182.8288, 68.5142], [56.9743, 195.978, 188.525, 28.8864, 313.5147, 0.0, 58.9867, 0.0, 0.0, 50.6097, 83.74, 198.203, 83.8709, 86.6718], [278.0025, 171.5867, 32.3544, 462.3052, 29.6755, 10.2024, 0.0, 22.491, 71.5155, 78.2746, 319.5349, 42.6288], [0.0, 44.909, 377.0925, 335.4616, 37.1688, 197.714, 38.6179, 24.3547, 0.0, 63.9803, 50.7983, 31.1111, 189.2694, 42.6288, 0.0, 96.209], [22.1364, 64.061, 246.624, 249.2551, 43.5336, 476.2192, 27.0259, 52.9027, 52.298, 57.0478, 64.2954, 119.5139, 338.0255, 15.6648, 98.8722, 163.137], [19.0195, 62.4484, 353.421, 344.5504, 4.692, 615.8085, 3.4445, 37.5898, 21.5888, 0.0, 53.2508, 47.1635, 237.6774, 53.4658, 50.0094, 244.6218], [0.0, 14.0934, 180.197, 242.5073, 17.7888, 555.8883, 69.0581, 90.4403, 16.1381, 87.2563, 478.8868, 140.2642, 8.0086, 321.9237], [54.6948, 527.012, 412.0283, 52.0608, 544.2185, 34.4448, 63.9288, 0.0, 82.9256, 30.9558, 93.9448, 375.8378, 91.0099, 15.3468, 193.4219], [40.9219, 69.5835, 586.099, 459.9514, 49.6536, 750.0116, 93.9283, 45.3211, 22.0823, 0.0, 25.3991, 60.1965, 479.3023, 33.384, 16.952, 330.1224], [64.9446, 641.3325, 271.9772, 178.908, 649.2471, 0.0, 103.5029, 162.1998, 77.1578, 85.8421, 538.9294, 73.6502, 76.2224, 188.4023], [39.7426, 62.3822, 520.5895, 354.8787, 139.1688, 658.4483, 139.6339, 37.0469, 5.4401, 36.6206, 48.2772, 66.8086, 623.9033, 70.62, 66.0089, 349.0295], [43.8703, 83.0142, 511.4145, 391.9227, 182.9064, 810.3806, 70.4131, 87.853, 0.0, 121.8748, 65.5473, 77.3955, 367.3197, 82.2787, 15.0469, 375.1314], [19.881, 742.6245, 611.9832, 178.0104, 736.322, 0.0, 74.412, 110.2853, 47.7627, 137.3245, 565.7305, 0.0, 260.6846], [21.7807, 32.8257, 674.546, 454.9938, 122.9304, 612.4422, 144.4032, 52.079, 188.7127, 58.3786, 110.494, 443.9831, 133.6387, 92.6982, 406.7549], [73.9721, 22.2888, 517.47, 578.2443, 153.816, 997.7713, 0.0, 81.3384, 0.0, 38.367, 52.3933, 124.9412, 601.673, 117.563, 16.3699, 279.2571]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

