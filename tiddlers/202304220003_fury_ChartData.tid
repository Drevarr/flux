created: 20230422000344000
creator: Drevarr
modified: 20230705163526166
modifier: drevarr
tags: ChartData
title: 202304220003_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Smol Daddy Tika", "Elonith Primal", "Xanvias Einzbern", "Konztantin\u00eb", "Burnockholmes", "Aronorf Xideliesi", "Newtype Khan", "Klee Flamepumpkin", "Lord Erin The Wise", "Naiama Supreme", "Skye Nightroad", "Blancooo Padreee", "Domina Flagbringer", "Mac Saharlot", "Stoic Rapidfire", "Solo Bloodborn", "Drevarr Moonwillow"];
const professions = ["Berserker", "Tempest", "Berserker", "Herald", "Scrapper", "Firebrand", "Spellbreaker", "Weaver", "Weaver", "Druid", "Scrapper", "Spellbreaker", "Spellbreaker", "Druid", "Druid", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 23.7708, 0.0, 0.0, 0.0, 53.7362, 0.0, 24.6915, 0.0, 47.52, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2122, 13.8336, 0.0, 21.5053, 90.0285, 110.592, 0.0, 71.6054, 0.0, 0.0], [0.0, 15.7052, 31.3174, 23.5889, 0.0, 29.5479, 24.295, 39.0879, 32.1097, 73.44, 0.0, 0.0, 32.844, 19.9271, 23.7888, 31.2089, 31.2365, 0.0, 31.4275, 23.3708, 24.1056, 0.0, 23.6739, 0.0, 39.1257], [0.0, 85.4556, 0.0, 0.0, 0.0, 39.3149, 0.0, 58.8411, 0.0, 53.64, 0.0, 0.0, 76.5348, 0.0, 16.7328, 0.6994, 0.0, 0.0, 58.0469, 46.389, 0.0, 0.0, 13.653, 0.0, 117.1449], [49.0618, 460.7712, 0.0, 36.9702, 17.5012, 136.7271], [0.0, 40.5836, 46.3661, 85.6465, 0.0, 79.6523, 15.899, 60.0129, 83.4853, 109.62, 172.557, 42.2073, 9.1356, 15.9053, 47.255, 50.2228, 20.3808, 0.0, 33.0448, 0.0, 197.0784, 7.9776, 31.0031, 0.0], [30.4207, 51.6028, 28.8009, 67.3819, 0.0, 67.8402, 108.0262, 111.1955, 119.5569, 64.98, 0.0, 0.0, 79.3224, 8.6095, 1.7338, 12.3699, 29.0611, 0.0, 115.2196, 70.4647, 96.6816, 0.0, 0.0, 75.8227, 10.3716], [69.1601, 91.4232, 155.3203, 120.0461, 140.4486, 101.7608, 266.22, 94.626, 0.0, 0.0, 0.0, 0.0, 0.0, 16.7693, 43.4915, 20.163, 38.88, 0.0, 0.0, 16.3282, 33.3594], [43.697, 88.5026, 25.6608, 62.0929, 15.8734, 24.1056, 29.7135, 266.94, 169.785, 19.9548, 43.608, 20.2908, 19.6762, 48.6055, 37.2768, 20.0031, 82.3496, 41.0663, 109.3824, 23.8752, 50.7854, 59.4007, 47.9493], [51.6727, 44.9856, 39.9602, 77.713, 16.7904, 40.6548, 37.1061, 40.5108, 67.4784, 182.34, 164.241, 63.135, 36.7632, 50.8888, 46.7309, 83.3987, 21.3312, 47.931, 77.0607, 48.2572, 189.9936], [182.0804, 185.0244, 106.2082, 393.984, 160.128, 143.2433, 178.296, 143.2287], [32.6674, 95.2252, 91.1815, 158.0706, 40.392, 138.7128, 125.6094, 207.1157, 145.724, 331.2, 197.505, 0.0, 67.1784, 33.973, 104.7917, 72.6023, 76.4966, 0.0, 38.0277, 61.2645, 105.84, 12.528, 44.948, 64.8434, 79.2963], [71.5889, 50.7224, 125.2443, 94.0032, 62.436, 98.0228, 89.8049, 141.5785, 115.4673, 437.76, 233.163, 73.5678, 80.3712, 26.8389, 71.0035, 159.8038, 64.5638, 134.8016, 100.7092, 322.8768, 55.0944, 52.8609, 117.0654, 45.6273], [91.1407, 59.5264, 24.0473, 170.6231, 216.7968, 166.7798, 130.4838, 123.6667, 64.539, 723.78, 58.212, 101.7198, 71.9532, 67.2185, 53.424, 188.9146, 69.0413, 219.7739, 123.4455, 239.5872, 84.7584, 123.0718, 173.7448, 170.9766], [208.8768, 110.8736, 206.5883, 119.3551, 128.5152, 155.9902, 85.7727, 158.2349, 221.4774, 489.78, 435.582, 113.8914, 98.5872, 0.0, 141.4426, 124.4424, 19.8317, 37.6191, 107.5703, 111.9188, 437.7024, 110.5056, 57.5632, 22.0524, 26.7804], [31.3315, 169.264, 192.9124, 196.1866, 105.3096, 145.8001, 136.6851, 174.3889, 93.9969, 977.94, 141.624, 104.9076, 38.3364, 44.4014, 67.4554, 120.4648, 40.0858, 146.5596, 119.2507, 309.3984, 165.1104, 111.4943, 155.9152, 97.6401], [107.7173, 66.6548, 217.646, 209.0213, 33.3432, 168.0139, 173.0001, 205.7346, 264.4821, 614.88, 386.001, 79.488, 93.8952, 64.5912, 164.8685, 180.6971, 89.4643, 208.8027, 142.8682, 116.2944, 77.2992, 80.7507, 172.3841, 17.6085], [62.2987, 229.188, 142.3266, 243.8934, 156.7632, 259.4783, 178.3593, 328.5643, 228.0591, 799.38, 239.715, 14.5107, 68.172, 32.1541, 162.8928, 111.6791, 100.679, 176.1513, 126.054, 335.8368, 86.3136, 110.4566, 131.0945, 235.7604]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

