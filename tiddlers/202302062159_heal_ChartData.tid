created: 20230206215940000
creator: Drevarr
modified: 20230705163518775
modifier: drevarr
tags: ChartData
title: 202302062159_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Demon Sekhmet", "Ravioli Fetabringer", "Arkintor", "Etchery Howls", "Mac Aaroni", "Zadie Miststep", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Berserker", "Firebrand", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[289.4327, 202.3718, 200.0063, 384.9676, 193.125, 338.3371, 161.6393, 54.3523, 108.957, 254.0838, 1.2308, 104.6211, 76.7416, 103.25, 17.0309, 0.0], [24.1636, 0.0, 40.7848, 55.3568, 420.9563, 8.6629, 53.3443, 1033.4602, 97.0323, 423.8084, 7.2692, 521.9579, 28.5506, 13.9103], [422.0909, 211.4359, 729.8734, 473.2054, 0.0, 429.6875, 91.1011, 540.3934, 451.9375, 296.914, 438.0898], [866.1927, 992.0449, 1564.4747, 2719.4108, 76.7255, 1629.8875, 3531.4382, 1700.3115], [1083.3018, 757.9103, 1517.7595, 3313.5514, 9.1373, 870.7313, 98.1124, 777.3279, 917.5, 1706.5376, 1456.1198, 175.3462, 251.5474, 1030.0787, 356.7308], [782.0945, 633.1474, 1171.2089, 2520.227, 14.9216, 1296.5687, 2832.809, 1131.8033, 862.8977, 1821.3978, 1457.5509, 14.6154, 180.5158, 1347.3483, 364.3462, 9.6289, 27.069], [1013.8436, 749.4808, 1660.2911, 2247.2919, 1825.9875, 2393.9438, 1233.6721, 1151.5852, 1545.3548, 1438.9162, 141.8846, 204.3789, 1026.4607, 245.4103, 301.5155, 124.3103], [860.4109, 719.3526, 1797.5, 3562.4757, 22.5294, 2244.7937, 360.3708, 1648.2787, 162.1534, 1698.1505, 1765.4132, 49.3846, 221.4842, 1223.809, 396.6474, 17.8454], [1211.1745, 1018.1987, 1997.4557, 3353.5297, 58.5882, 1358.2188, 3721.4944, 1857.4426, 1246.8693, 1391.4086, 1624.2156, 113.6154, 204.3368, 1774.6404, 564.0833, 238.8041, 42.1034]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

