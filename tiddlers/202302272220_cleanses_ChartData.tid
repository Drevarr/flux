created: 20230227222028000
creator: Drevarr
modified: 20230705163520349
modifier: drevarr
tags: ChartData
title: 202302272220_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Bringer", "Black Raspberry Pie", "Primal Clone", "Cat Wigglebooty", "Eibh\u00ebar", "High Sorcer Baradun", "Fribble Bibble", "Etchery Howls", "Venomina The Siren", "Tegan Parker", "Mac Aaroni", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Scrapper", "Druid", "Tempest", "Tempest", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.6932, 1.3902, 0.0, 0.6707, 0.0959, 0.4167, 0.0, 0.5789, 0.0, 0.0083, 0.0, 0.0, 0.0129, 0.0, 0.0, 0.0, 0.0, 0.0106, 0.0194, 0.0], [0.0, 0.4583, 0.0769, 0.6053, 0.5, 0.0165, 0.4062, 0.0068, 0.1869, 0.5591, 0.0, 0.1019, 0.0, 0.1383, 0.2996, 0.0], [0.0132, 0.3665, 0.4715, 0.2927, 0.3973, 0.0625, 0.1923, 0.5263, 0.2, 0.0, 0.6875, 0.1216, 0.1904, 0.6129, 0.0, 0.1975, 0.0, 0.1383, 0.3224, 0.0781], [0.1523, 0.2151, 0.561, 0.2927, 0.0, 0.0625, 0.8846, 0.5526, 0.8, 0.0165, 1.0, 0.0811, 0.493, 0.0, 0.0, 0.1783, 0.0, 0.2021, 0.3814], [0.0, 0.6932, 0.6179, 0.5122, 0.3151, 1.125, 0.0, 0.4211, 2.1667, 0.0, 1.2188, 0.0, 0.4778, 0.4301, 0.0, 0.2293, 0.0, 0.117, 0.4599, 0.125], [0.2119, 0.0, 1.1382, 0.2439, 0.6849, 0.3125, 0.4474, 0.3333, 0.0579, 0.9688, 0.0068, 0.465, 0.3763, 0.0741, 0.1465, 0.2, 0.4043, 0.6203, 0.0], [0.2053, 0.6096, 0.6911, 0.0, 0.6829, 1.0, 1.1667, 1.2692, 0.6842, 0.1667, 0.0165, 0.875, 0.1554, 0.9124, 0.3871, 0.0, 0.7516, 0.0, 0.1489, 0.5907], [0.3974, 0.9124, 2.3008, 0.9024, 2.6849, 1.4375, 2.9231, 2.9737, 2.9333, 0.0331, 2.9375, 0.25, 0.8902, 0.7204, 0.037, 0.6178, 0.5556], [0.0, 1.0518, 1.8211, 0.878, 0.6301, 2.1458, 0.5769, 0.1316, 3.2, 0.0165, 2.0312, 0.0946, 0.5853, 0.1828, 0.0, 0.3248, 0.0, 0.1702, 0.7738, 0.375], [0.5208, 0.3846, 1.0526, 1.5, 0.1488, 1.5625, 0.1419, 1.1051, 0.0, 0.0, 0.4331, 0.1111, 0.4149, 1.1089, 0.2031], [0.1722, 1.2948, 1.6341, 0.0, 0.9878, 1.2329, 1.7292, 0.3077, 1.4737, 2.3667, 0.0331, 2.4688, 0.1149, 0.84, 0.172, 0.0556, 0.4777, 0.0889, 0.4468, 1.2734, 0.0938], [0.3245, 1.3187, 0.9675, 1.122, 1.5205, 1.875, 0.0, 0.4737, 0.7, 0.0, 4.1875, 0.1892, 1.2418, 0.6344, 0.0064, 0.2222, 0.383, 1.3072, 0.2344], [0.1854, 1.1873, 1.3659, 1.2683, 1.4658, 1.9375, 1.5, 0.6316, 2.9667, 0.0165, 1.9375, 0.1622, 1.6554, 0.6882, 0.1481, 0.586, 0.1333, 0.6809, 1.4262, 0.3594], [0.3444, 1.3586, 1.6585, 1.0976, 1.1507, 1.3542, 0.8462, 1.2895, 2.3333, 0.0744, 1.1875, 0.3243, 1.771, 0.9247, 0.1667, 0.879, 0.0444, 0.9043, 1.4354, 0.1875]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

