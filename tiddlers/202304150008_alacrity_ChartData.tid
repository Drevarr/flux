created: 20230415000841000
creator: Drevarr
modified: 20230705163525487
modifier: drevarr
tags: ChartData
title: 202304150008_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Yuuka Chou", "Drevarr Moonwillow", "Stark Gandalf", "Drogo Deception", "Tegan Parker", "Zadie Miststep", "High Sorcer Baradun", "Primal Clone", "Venomina The Siren", "Mac Chiato", "Black Raspberry Pie"];
const professions = ["Chronomancer", "Tempest", "Scrapper", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[61.5168, 21.4929, 69.8031, 28.188, 63.9198, 0.0, 0.0, 0.0, 25.4592, 96.4091, 0.0, 106.8805, 0.0, 37.4946, 0.0, 32.1411, 28.4542, 0.0, 81.1591, 50.568, 0.0, 10.7369], [47.2608, 108.5918, 36.9873, 90.792, 184.5504, 0.0, 274.6821, 180.6558], [10.7568, 21.1172, 27.9027, 24.696, 54.2277, 0.0, 115.2921, 55.9797, 45.7236, 42.4815, 7.659, 79.9245, 0.0, 45.885, 0.0, 0.0, 58.2167, 77.0631, 104.9501, 80.2896, 38.4615, 56.2716], [240.8045, 118.6275, 97.152, 107.7118, 440.5047], [75.2251, 135.2493, 91.692, 227.8845, 63.45, 165.6593, 173.9697, 58.7808, 61.8401, 0.115, 275.4903, 0.0, 168.9617, 92.8988, 56.672, 73.4795, 175.6634, 228.2917, 53.4576], [54.5184, 19.6141, 85.2377, 103.32, 211.6242, 71.4825, 105.9412, 320.2773, 58.4064, 85.347, 0.0, 266.1905, 118.2522, 2.7533, 39.6299, 83.5093, 215.2045, 265.4123, 33.5916, 28.951, 146.5649], [111.9924, 164.1643, 118.036, 334.7935, 0.0, 182.8058, 55.4924, 89.9061, 504.5446, 342.4091, 421.9937, 72.4464, 38.5081, 93.2039], [176.1264, 257.0881, 35.3651, 78.084, 157.6368, 56.295, 301.1408, 108.0264, 69.8256, 113.1559, 0.0, 463.5084, 69.3257, 130.7324, 98.5688, 118.9408, 242.7992, 87.2334, 85.914, 0.0, 145.0772], [193.6656, 151.803, 87.7869, 53.676, 270.0972, 67.2975, 133.8876, 248.5656, 42.7284, 159.0942, 33.557, 328.8632, 16.6014, 143.4758, 111.5545, 77.8026, 127.0083, 221.7667, 358.5512, 48.7104, 120.1864, 94.6268], [135.1296, 120.24, 94.6931, 52.704, 377.9919, 121.095, 141.8571, 245.6814, 104.5512, 146.1116, 43.355, 348.9454, 87.6771, 94.1565, 419.1819, 443.8699, 457.7645, 126.5232, 119.0675, 182.7857], [145.584, 265.8807, 143.6387, 110.88, 276.6654, 314.6175, 401.8753, 430.2702, 133.2864, 118.3028, 87.101, 346.9237, 115.1058, 72.2968, 87.7606, 125.8091, 765.4147, 533.0181, 153.9228, 185.128, 294.3587], [206.3232, 202.4541, 142.5263, 211.284, 363.9744, 201.15, 307.4102, 335.3538, 145.2204, 177.9919, 42.389, 566.7499, 0.0, 122.6572, 190.7345, 78.0859, 486.7743, 733.1088, 662.7714, 164.2944, 127.0395, 42.236]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

