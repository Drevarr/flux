created: 20230925092820000
creator: Drevarr
tags: ChartData
title: 202309250928_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Reina Armitage", "Gamora Titus", "Drevarr Moonwillow", "Grae Leon", "Leafzel", "Alo Penn", "Koralia Danai", "Gestern Yesteryear"];
const professions = ["Druid", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 51.6684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.8027, 0.0, 0.0, 27.1823, 0.0, 0.0, 0.0, 166.378, 0.0, 0.0, 25.0906, 0.0, 0.0, 0.0, 0.0, 0.0, 28.6083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.7941, 0.0, 0.0, 0.0], [0.0, 34.9762, 41.5206, 23.628, 4.0995, 131.464, 44.4509, 95.2128, 0.0, 84.4578, 0.0, 45.264, 0.0], [0.0, 0.0, 11.9422, 13.9052, 10.8908, 18.9684, 34.9657, 18.5501, 11.9288, 9.936, 13.9795, 27.8293, 11.8837, 8.7264, 9.67, 0.0, 6.997, 18.182, 0.0, 0.0, 10.0246, 31.1526, 5.0184, 11.6042, 11.8859, 0.0, 11.8346, 41.3182, 8.0272, 9.9682, 39.0735, 0.0, 21.5474, 11.9879, 0.656, 0.0, 35.6573, 1.386, 9.4895, 29.4624], [0.0, 20.2214, 14.4704, 81.774, 130.4963, 72.0403, 0.0, 0.0, 0.0, 45.7626, 11.4328, 11.9048, 0.0, 0.0, 64.3431, 52.1113, 0.0, 19.7784, 0.0, 325.1408, 0.0, 58.1846, 0.0, 0.0, 0.0, 51.6321, 14.4643, 40.1679, 29.862, 67.7766, 11.8776, 76.448, 35.9388, 111.9993, 0.0092, 82.6403, 25.5096], [0.0, 22.5661, 26.0148, 0.0, 22.3905, 34.9834, 0.0, 0.0, 0.0, 11.6239, 30.2641, 0.0, 21.762, 0.0, 20.333, 52.2684, 0.0, 0.0, 367.1392, 0.0, 61.9846, 0.0, 51.3975, 4.8611, 85.6277, 0.0, 17.8387, 83.619, 35.2869, 53.0026, 26.1733, 37.728, 20.088, 198.1168, 30.9032, 102.3935, 214.488, 0.0, 34.6752], [78.5538, 111.9659, 83.6582, 0.0, 35.2141, 0.0, 366.9084, 53.142, 89.4425, 0.0, 0.0, 0.0, 49.9806, 72.6317, 66.2625, 98.9997, 93.4011, 0.0, 118.528, 144.7146, 0.0, 125.4646, 99.5976, 0.0, 68.2272], [134.7984, 261.2168, 179.7293, 43.8494, 71.6515, 39.8477, 391.4957, 116.4208, 69.9788, 87.0304, 136.2876, 146.1629, 126.8573, 0.0, 789.0838], [0.0, 44.7626, 182.0597, 113.6048, 135.5904, 220.8, 111.8189, 15.5104, 121.4438, 0.0, 230.4364, 73.7759, 126.7146, 73.8153, 56.525, 262.2476, 242.4006, 46.8936, 66.6037, 63.9349, 1234.9121, 169.2894, 381.755, 167.2051, 49.6111, 465.2811, 69.5768, 156.7728, 290.4093, 39.27, 177.4205, 101.3124, 253.696, 15.3742, 290.2486, 48.2744, 239.8029, 310.5648, 20.748, 74.9664]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

