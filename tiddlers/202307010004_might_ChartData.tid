created: 20230701000406000
creator: Drevarr
modified: 20230705163540158
modifier: drevarr
tags: ChartData
title: 202307010004_might_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Tegan Parker", "Oo Dads Mad", "Air One Com", "Gestern Yesteryear", "Zefirokai", "K\u00f4sair", "Ak\u00e1nt\u00f3r", "Melli Dragonswrath", "Gavann", "Primal Clone", "Tribal S", "Koralia Danai", "Aronorf Xideliesi", "Mmathuss", "Erin Celes", "Arriasa", "Xanvias Einzbern", "Johosh The Mighty", "Drevarr Moonwillow", "Solus Sanctus", "Bella Sassy", "Arcanophage Farra", "Newtype Khan", "Zayde Sunsabre"];
const professions = ["Tempest", "Tempest", "Spellbreaker", "Firebrand", "Firebrand", "Catalyst", "Berserker", "Druid", "Berserker", "Firebrand", "Chronomancer", "Druid", "Firebrand", "Firebrand", "Firebrand", "Herald", "Druid", "Berserker", "Berserker", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7.3969, 5.562, 0.0, 7.511, 14.3989, 16.128, 15.3197, 7.1971, 3.185, 2.2766, 29.7214, 16.353], [1.6342, 0.0, 0.7114, 1.4746, 0.0, 0.0, 5.7206, 0.0, 0.735, 3.3293, 3.8245, 3.4845, 15.1818, 0.0, 8.8435, 6.862, 0.235, 0.4963, 0.0, 12.5316, 24.7104, 36.771], [12.4141, 3.2397, 9.36, 20.736, 15.307, 11.76, 21.5736, 10.2514, 9.6285, 9.4248, 8.8509, 13.3515, 2.8253], [0.0, 1.3762, 1.1981, 2.0736, 5.1888, 2.904, 10.7141, 7.8926, 2.499, 0.7589, 10.4899, 1.311, 3.3359, 5.3273, 3.4545, 7.191, 6.392, 1.2718, 1.6666, 10.222, 25.609, 41.3402], [0.6021, 0.0, 2.6957, 0.8294, 0.908, 4.8, 7.5144, 12.731, 0.049, 0.0, 9.0694, 0.0, 2.1445, 2.0815, 6.8629, 2.961, 10.152, 1.2718, 3.0912, 14.2852, 28.7539, 41.7754], [4.5299, 6.078, 5.5786, 0.7834, 11.4586, 0.0, 7.9022, 6.2294, 5.194, 5.8018, 17.7017, 4.3125, 11.1651, 4.9039, 7.3235, 4.747, 10.34, 4.4048, 0.9139, 13.5581, 20.4422], [2.7685, 3.8678, 16.4998, 9.6945, 19.9134, 10.5487, 12.4823, 8.507, 17.954, 5.9558, 1.3843, 7.998, 18.6451, 24.369], [3.7558, 2.4943, 6.0278, 3.9629, 16.388, 1.344, 4.8965, 6.3202, 5.4145, 1.9339, 16.8276, 6.4515, 3.8465, 7.691, 6.3563, 7.144, 8.225, 4.1877, 0.0, 13.1304, 16.0618, 33.0722], [0.6307, 3.6698, 3.5942, 9.216, 8.9939, 4.776, 4.3632, 9.8885, 6.517, 3.1824, 23.1652, 3.1395, 13.8543, 6.809, 12.252, 2.585, 3.29, 3.2261, 1.8144, 5.0469, 23.6995, 21.9756], [9.24, 5.3328, 7.5902, 8.085, 4.7981, 17.1554, 9.108, 5.5826, 10.1606, 8.8435, 0.0, 2.162, 5.9248, 13.7292, 27.5184, 42.6457], [5.2466, 7.0815, 8.8358, 9.769, 8.5183, 1.752, 3.0058, 5.4432, 2.303, 1.9829, 17.9203, 5.727, 9.4631, 3.8808, 8.1066, 3.619, 6.768, 6.4211, 2.7955, 7.0571, 23.2502, 34.8128], [5.7913, 0.7454, 2.6208, 6.6355, 4.8861, 1.2, 12.7502, 7.439, 5.6105, 3.8434, 27.3175, 4.5195, 6.3314, 2.7166, 5.0666, 8.883, 6.251, 4.9632, 0.0, 6.8004, 22.5763, 38.0765], [1.4048, 2.9817, 5.8032, 1.5206, 0.908, 3.96, 10.1323, 2.7518, 2.5725, 1.224, 20.4335, 3.726, 2.553, 5.7506, 4.8824, 4.982, 7.332, 4.2187, 0.0, 15.2689, 31.225, 59.3993], [4.8739, 1.2328, 9.8093, 1.5206, 4.0213, 2.568, 6.3024, 3.0845, 2.842, 1.175, 3.9337, 6.348, 10.0078, 8.0791, 3.086, 12.361, 9.729, 7.0415, 10.3503, 33.1344, 51.5665], [7.1102, 1.6342, 5.3165, 0.599, 3.1565, 12.864, 10.2778, 3.1752, 5.341, 3.9902, 22.5096, 2.829, 2.8934, 6.1387, 6.4484, 1.974, 6.674, 2.7918, 6.1286, 8.7678, 30.888, 43.2984], [8.3731, 28.8698, 60.3158, 104.4384], [1.4048, 1.0035, 7.9747, 6.2208, 12.4099, 7.944, 4.3147, 6.5923, 8.722, 1.5912, 26.3341, 6.7275, 9.9056, 10.831, 10.1332, 9.87, 5.076, 4.1877, 0.0, 8.8534, 25.0474, 47.2149], [5.7627, 6.8808, 2.0592, 10.5062, 10.2911, 3.84, 8.2901, 3.3264, 7.1295, 5.8997, 22.0725, 10.0395, 16.3052, 3.7044, 11.2386, 7.849, 8.413, 6.204, 1.9488, 12.2322, 36.3917, 50.9137], [4.6445, 8.7443, 8.424, 5.76, 13.2314, 4.728, 6.1085, 7.1971, 10.584, 1.6402, 30.3771, 12.282, 19.0624, 5.6448, 12.4823, 16.262, 5.687, 8.8097, 2.1101, 7.1426, 24.2611, 46.3445], [7.1675, 1.4908, 10.1088, 9.769, 8.2156, 3.048, 11.6352, 10.9166, 3.2585, 5.508, 37.6981, 6.1065, 11.1992, 10.5487, 9.949, 7.896, 7.285, 6.5452, 2.016, 17.1508, 36.2794, 82.898], [0.9748, 0.6881, 14.1898, 2.857, 7.4805, 9.768, 23.0765, 10.2514, 3.626, 3.4272, 27.9731, 11.9025, 14.9436, 12.2422, 1.8885, 12.972, 6.956, 6.3591, 4.6234, 9.5805, 43.4678, 92.0363], [7.9989, 1.3475, 6.4397, 4.7462, 12.064, 14.664, 12.5078, 6.8342, 4.7775, 2.5459, 29.0658, 8.694, 12.731, 7.1266, 7.692, 12.549, 14.006, 8.7476, 0.6854, 12.831, 54.4752, 103.5681], [14.0483, 16.1125, 37.9642, 23.4086, 31.8679, 18.528, 40.5778, 18.2952, 19.5265, 11.065, 12.129, 20.976, 33.4273, 31.0464, 20.4967, 32.289, 29.375, 24.0405, 41.2303, 110.4106, 54.6126], [11.7834, 7.6836, 20.6294, 15.529, 23.3928, 10.536, 26.2762, 18.0533, 13.426, 6.6586, 81.9525, 24.8055, 21.5473, 21.4502, 19.8058, 39.48, 20.445, 12.1909, 6.9485, 26.3891, 115.9142, 180.1562], [26.7778, 10.0345, 35.568, 23.3165, 51.8448, 24.864, 44.5531, 35.8344, 31.654, 26.1936, 155.0541, 36.3975, 43.1968, 49.639, 21.6943, 49.162, 35.72, 32.0126, 6.9485, 43.0266, 155.5632, 305.0472]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

