created: 20230610101822000
creator: Drevarr
modified: 20230705163534597
modifier: drevarr
tags: ChartData
title: 202306101018_evades_ChartData
type: text/vnd.tiddlywiki


const names = ["Grootyoda", "Ryvalia Fazebringer", "Scarlet Merc\u00fcry", "Sakis Ranger", "Arriasa", "Xanvias", "Hit The Gas", "Grootyoda", "F\u00e2ble", "Cat Noises", "Elonith Requiem", "Gamora Titus", "Alarics Bane", "Drevarr Moonwillow", "Charr Surethang", "Tomitigas", "Gestern Yesteryear", "Slang\u00efn", "Aronorf Xideliesi", "F\u00e2ble"];
const professions = ["Spellbreaker", "Chronomancer", "Firebrand", "Druid", "Druid", "Reaper", "Spellbreaker", "Berserker", "Herald", "Virtuoso", "Reaper", "Firebrand", "Reaper", "Scrapper", "Berserker", "Tempest", "Firebrand", "Herald", "Firebrand", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Evaded Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[20, 27, 4, 1], [0, 6, 0, 6, 0, 0, 10, 2, 0, 0, 0, 4, 17, 0, 5, 4, 4, 0, 3, 0, 0, 3, 2], [0, 42, 32], [27, 3, 9, 3, 16, 0, 2, 9, 0, 11, 0, 6, 0, 0], [4, 5, 5, 22, 13, 1, 0, 1, 21, 15, 0, 1], [5, 8, 0, 1, 3, 0, 4, 2, 1, 1, 3, 24, 0, 9, 15, 7, 0, 8, 0], [31, 12, 0, 56], [17, 1, 0, 14, 11, 11, 0, 28, 18, 0], [14, 9, 15, 56, 13], [19, 2, 11, 7, 14, 0, 11, 2, 0, 2, 15, 28, 0, 3], [20, 12, 5, 5, 3, 1, 0, 5, 7, 1, 7, 16, 13, 1, 0, 17, 6, 1, 4, 24, 2, 8], [13, 1, 19, 22, 6, 17, 4, 13, 9, 1, 3, 2, 8, 0, 27, 31], [0, 16, 2, 0, 3, 10, 36, 2, 14, 27, 3, 21, 9, 0, 0, 11, 3, 2, 19, 23, 1, 0, 5, 10], [18, 8, 0, 0, 23, 2, 17, 13, 14, 31, 6, 4, 21, 7, 2, 13, 16, 2, 0, 21, 5, 0], [0, 5, 6, 8, 1, 13, 4, 3, 3, 0, 10, 18, 4, 6, 1, 6, 30, 36, 8, 0, 76, 19], [23, 11, 0, 29, 15, 1, 23, 27, 8, 8, 9, 9, 0, 21, 35, 19, 8, 4, 23, 11], [10, 5, 2, 16, 10, 9, 18, 9, 8, 31, 5, 9, 21, 5, 1, 21, 18, 7, 6, 45, 12, 0, 47, 25], [56, 23, 3, 4, 39, 4, 17, 8, 9, 15, 12, 21, 12, 6, 0, 11, 27, 7, 16, 17, 22, 0, 20, 35], [13, 42, 28, 8, 23, 2, 26, 14, 12, 0, 20, 34, 8, 0, 38, 50, 0, 59, 35], [14, 11, 2, 8, 22, 16, 31, 47, 12, 29, 13, 5, 104, 25, 31, 1, 2, 115, 23]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

