created: 20230429000309000
creator: Drevarr
modified: 20230705163527186
modifier: drevarr
tags: ChartData
title: 202304290003_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Smol Gluvs", "Koisx", "Redoxone", "Endless Endings", "Kos\u00e4ir", "Demon Sekhmet", "Newtype Khan", "Maaaathexxs", "Rudjulin", "Lord Erin The Wise", "Rina Of Theros", "Permanent Dawn", "Morv\u00e4rth", "Kos\u00e4ir", "Panther B Me", "Xyntharos", "Jupi Jupi Jupi", "Be\u00eb", "Xanvias Tsoli", "Cyclotechnist Farra", "Mistwalker Caelon"];
const professions = ["Scourge", "Dragonhunter", "Soulbeast", "Spellbreaker", "Herald", "Spellbreaker", "Spellbreaker", "Scourge", "Willbender", "Weaver", "Scourge", "Weaver", "Reaper", "Vindicator", "Scourge", "Vindicator", "Dragonhunter", "Scourge", "Holosmith", "Scrapper", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17296.0, 19828.0, 23659.0, 0.0, 6852.0, 3353.0, 398.0, 6241.0, 0.0, 0.0, 5630.0, 7840.0, 1660.0, 36963.0], [5480.0, 30599.0, 44061.0, 0.0, 6520.0, 0.0, 1272.0, 42838.0], [15549.0, 0.0, 10147.0, 9802.0, 0.0, 34230.0, 0.0, 0.0, 5797.0, 5729.0, 8035.0, 42342.0], [34390.0, 1618.0, 0.0, 35538.0, 0.0, 0.0, 14868.0, 6999.0, 0.0, 51632.0], [60877.0, 20718.0, 3029.0, 59344.0, 0.0, 0.0, 0.0, 2855.0, 0.0], [38204.0, 28057.0, 7932.0, 0.0, 25400.0, 7326.0, 8123.0, 7730.0, 0.0, 0.0, 0.0, 606.0, 0.0, 31270.0], [27526.0, 34669.0, 9020.0, 0.0, 35567.0, 1380.0, 7292.0, 6537.0, 744.0, 0.0, 0.0, 12828.0, 3678.0, 29144.0], [6672.0, 5976.0, 16368.0, 0.0, 29445.0, 26060.0, 8747.0, 74543.0, 0.0, 20547.0, 9913.0, 6547.0], [29664.0, 18254.0, 40386.0, 0.0, 31669.0, 22345.0, 11082.0, 67460.0, 0.0, 0.0, 21934.0, 6574.0, 8902.0], [31439.0, 37100.0, 85216.0, 0.0, 45794.0, 30492.0, 0.0, 34262.0, 0.0, 0.0], [17185.0, 57279.0, 26409.0, 0.0, 35657.0, 22517.0, 10493.0, 55990.0, 5819.0, 0.0, 16273.0, 5893.0, 1663.0, 49258.0], [24190.0, 50397.0, 42778.0, 137224.0, 22526.0, 3568.0, 0.0, 0.0, 29308.0], [34815.0, 59162.0, 64184.0, 0.0, 57332.0, 24585.0, 27223.0, 49326.0, 35137.0, 0.0], [104635.0, 96956.0, 48310.0, 113427.0], [39203.0, 69043.0, 32560.0, 0.0, 78517.0, 21716.0, 35224.0, 49681.0, 3879.0, 0.0, 3120.0, 14526.0, 4339.0, 57498.0], [83375.0, 75734.0, 39719.0, 0.0, 81081.0, 11101.0, 7743.0, 6635.0, 0.0, 0.0, 16018.0, 6000.0, 0.0, 166319.0], [60012.0, 55533.0, 127396.0, 0.0, 104973.0, 45696.0, 63034.0, 0.0, 0.0, 19761.0, 5756.0, 0.0, 127084.0], [83830.0, 60873.0, 58673.0, 0.0, 95956.0, 21211.0, 53699.0, 38783.0, 23409.0, 1938.0, 31542.0, 9863.0, 11131.0, 172858.0], [129453.0, 25526.0, 164991.0, 9843.0, 38509.0, 52036.0, 0.0, 0.0, 17706.0, 12775.0, 19771.0, 230965.0], [57061.0, 110104.0, 80009.0, 0.0, 77932.0, 33711.0, 22012.0, 62212.0, 19826.0, 0.0, 13009.0, 0.0, 8506.0, 301348.0], [102928.0, 96035.0, 80998.0, 0.0, 183351.0, 74343.0, 19630.0, 77449.0, 0.0, 11063.0, 0.0, 5093.0, 4593.0, 301329.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

