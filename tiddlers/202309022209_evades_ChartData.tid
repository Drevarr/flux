created: 20230902220918000
creator: Drevarr
tags: ChartData
title: 202309022209_evades_ChartData
type: text/vnd.tiddlywiki


const names = ["Scarlet Redwitch", "Melmyr", "Aethli", "Serene Azura", "Lady Sherena", "Zatoshin", "Melmyr", "Fqa Necr", "Willowshaven", "Melody Phoenixstorm", "Kandy Land", "Sygaldry Verdandi", "Aira Draugr", "Puppy Sky", "Daphne Agla\u00e9", "Belvyn Brightblade", "Jamaass", "Val Haden", "Sub Train", "Elfina Lightborn", "Tootsie Pop Rocks", "Scuba Steves", "Mistwalker Cael", "Leyviathan", "Bella Sassy", "Sygaldry Verdandi", "Zatoshin", "Gabe Malhorn", "Agent Pickpocket", "Greg The Knight", "Mort\u00e4rion", "Leriel Nova", "Crusader Siolith", "Unbreakable Nemesis", "Mistwalker Cael", "Zaedy Zae", "Legacy Of Mathus", "Rina Of Theros", "Sly The Ele", "Xanvias Einzbern", "Revenant Brandorf", "Be\u00eb", "Koralia Danai", "Drevarr Moonwillow", "Lord Erin The Wise", "Newtype Khan", "Glorious Gluvs", "Sofya De Nova", "Hyde En Sikh", "Sight Beyond Sights"];
const professions = ["Harbinger", "Firebrand", "Renegade", "Dragonhunter", "Willbender", "Vindicator", "Willbender", "Scourge", "Catalyst", "Scrapper", "Soulbeast", "Willbender", "Herald", "Reaper", "Reaper", "Firebrand", "Reaper", "Reaper", "Dragonhunter", "Berserker", "Scrapper", "Spellbreaker", "Vindicator", "Herald", "Firebrand", "Firebrand", "Herald", "Firebrand", "Thief", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Herald", "Druid", "Berserker", "Reaper", "Tempest", "Berserker", "Herald", "Reaper", "Firebrand", "Scrapper", "Weaver", "Spellbreaker", "Berserker", "Tempest", "Chronomancer", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Evaded Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 1, 29, 25, 0, 4], [12, 0, 44, 0, 3], [5, 11, 24, 0, 26], [2, 37, 19, 8, 3], [21, 48, 2, 0, 1], [52, 22], [19, 7, 0, 1, 15, 3, 20, 7, 1, 9, 7, 0, 0, 0], [0, 10, 3, 9, 34, 7, 26, 0], [18, 17, 0, 23, 5, 2, 8, 0, 6, 2, 2, 1, 6], [1, 37, 0, 0, 6, 0, 1, 37, 13], [0, 13, 1, 0, 2, 1, 1, 4, 6, 24, 13, 6, 4, 0, 7, 0, 6, 0, 2, 10, 4], [1, 0, 35, 10, 0, 3, 0, 2, 32, 13, 9], [3, 0, 32, 4, 0, 2, 0, 0, 2, 33, 44], [4, 0, 60, 2, 0, 4, 1, 0, 0, 52, 16], [0, 0, 19, 4, 0, 5, 0, 1, 6, 19, 5, 23, 27, 0, 3, 1, 3, 17, 5, 2, 1], [5, 0, 48, 9, 0, 7, 3, 2, 60, 32], [8, 0, 3, 4, 27, 16, 5, 9, 3, 20, 0, 19, 37, 5, 4, 15], [10, 0, 0, 3, 45, 10, 18, 14, 26, 0, 4, 4, 14, 18, 4, 7, 1], [2, 0, 33, 3, 0, 0, 0, 3, 0, 24, 3, 27, 39, 22, 1, 14, 3, 13], [0, 0, 1, 16, 7, 3, 22, 22, 2, 13, 13, 12, 21, 49, 7, 3], [4, 31, 3, 0, 11, 0, 0, 0, 17, 5, 10, 34, 2, 0, 13, 5, 1, 37, 0, 6, 13], [21, 0, 0, 0, 0, 0, 0, 30, 1, 17, 0, 90, 0, 13, 0, 0, 13, 3, 10, 1], [5, 0, 47, 14, 0, 8, 0, 15, 61, 53], [1, 0, 21, 2, 0, 9, 0, 0, 28, 0, 19, 0, 22, 19, 8, 53, 6, 17, 14], [0, 13, 1, 0, 0, 0, 0, 8, 18, 2, 13, 15, 0, 19, 0, 5, 43, 39, 49, 1], [30, 30, 0, 13, 1, 0, 37, 61, 55, 0], [0, 16, 0, 3, 37, 9, 65, 4, 16, 43, 39], [5, 0, 35, 1, 0, 0, 0, 2, 0, 23, 19, 16, 4, 21, 1, 5, 10, 17, 16, 21, 43, 3], [0, 43, 27, 11, 1, 28, 0, 99, 0, 8, 0, 33, 14], [4, 12, 0, 3, 2, 27, 1, 23, 40, 0, 20, 1, 0, 84, 2, 44, 8], [7, 0, 26, 3, 0, 4, 2, 0, 53, 17, 4, 38, 12, 0, 14, 9, 21, 31, 25, 2, 5], [0, 49, 1, 0, 7, 0, 0, 3, 39, 21, 68, 20, 24, 0, 14, 11, 19], [1, 31, 1, 0, 0, 0, 0, 4, 17, 16, 26, 16, 37, 2, 11, 0, 30, 36, 18, 29, 8], [4, 1, 0, 0, 3, 30, 7, 0, 47, 0, 18, 34, 50, 70, 20], [7, 36, 51, 8, 46, 5, 24, 44, 31, 42, 21], [0, 24, 0, 0, 0, 0, 0, 1, 63, 15, 55, 23, 21, 0, 10, 10, 13, 28, 21, 32, 6], [0, 0, 19, 0, 0, 12, 0, 1, 3, 17, 8, 19, 17, 55, 0, 19, 0, 6, 64, 5, 58, 20], [1, 0, 38, 3, 0, 5, 0, 0, 2, 45, 7, 12, 4, 40, 1, 8, 9, 21, 48, 48, 39, 2], [1, 0, 7, 0, 5, 26, 16, 11, 29, 75, 0, 27, 3, 41, 64, 6, 20, 7], [4, 0, 35, 2, 0, 2, 4, 0, 38, 13, 6, 22, 47, 0, 26, 1, 38, 3, 29, 68, 8], [0, 15, 90, 0, 22, 4, 34, 89, 43, 36, 16], [0, 0, 28, 3, 0, 11, 0, 0, 0, 46, 22, 30, 21, 32, 0, 35, 1, 10, 37, 73, 14, 1], [0, 0, 22, 5, 2, 1, 0, 23, 14, 30, 43, 50, 0, 16, 3, 10, 55, 32, 52, 10], [10, 0, 37, 5, 0, 1, 0, 0, 8, 40, 31, 9, 20, 55, 0, 1, 0, 11, 50, 54, 43, 2], [17, 0, 1, 1, 36, 19, 22, 12, 57, 2, 29, 12, 2, 45, 41, 73, 17], [3, 46, 2, 0, 4, 0, 0, 0, 48, 33, 0, 25, 56, 0, 17, 2, 22, 34, 24, 82, 11], [4, 0, 53, 7, 1, 11, 1, 0, 3, 71, 42, 13, 15, 27, 0, 50, 6, 29, 30, 25, 26, 10], [27, 13, 36, 78, 30, 0, 18, 1, 66, 89, 42, 66, 4], [2, 35, 0, 0, 0, 0, 0, 30, 17, 20, 29, 47, 0, 22, 1, 30, 85, 63, 77, 13], [0, 64, 0, 2, 10, 132, 29, 11, 26, 40, 37, 4, 8, 99, 13, 4]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

