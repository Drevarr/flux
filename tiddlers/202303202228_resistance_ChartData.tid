created: 20230320222849000
creator: Drevarr
modified: 20230705163522713
modifier: drevarr
tags: ChartData
title: 202303202228_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Misaki Amakase", "Kiloak", "Demon Sekhmet", "Primal Clone", "Black Raspberry Pie", "Eibh\u00ebar", "Ark Darkness", "Ryvalia Fazebringer", "Raelyn Sunray", "Smol Daddy Tika", "Koralia Danai", "Jeckyll Mbs", "Zaylen Harker", "Xanvias Einzbern", "Viral Marketing", "Newtype Khan", "Bella Sassy", "Solus Sanctus", "Johosh The Great"];
const professions = ["Vindicator", "Firebrand", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[19.5228, 0.0, 18.7186, 0.0, 100.3244, 19.9073, 17.4825, 29.0191, 0.0, 26.8647, 103.4899, 38.7774, 0.0, 0.0, 0.0, 20.057], [28.5701, 37.3626, 0.0, 0.0, 19.4304, 104.3108, 7.709, 22.0185, 0.0, 20.1296, 7.7541, 109.4429, 0.0, 28.2656, 19.4568, 30.0854], [0.0, 57.0522, 161.715, 0.0, 38.3198, 0.0, 42.688, 16.5717, 137.605, 40.4802, 7.3206, 0.0, 53.0561], [6.4984, 19.1088, 14.2215, 4.5854, 4.8844, 17.8503, 230.3964, 46.6206, 11.594, 4.9639, 2.7821, 9.9686, 56.3411, 0.0, 22.0658, 13.1054, 20.3504, 6.5875, 96.1632, 20.0466, 12.4857, 12.4995, 8.9443], [4.9885, 9.4327, 8.0208, 10.431, 11.6428, 3.8996, 19.3249, 269.9892, 59.4114, 16.643, 5.031, 6.925, 8.8986, 60.5933, 2.8793, 10.3478, 13.8713, 13.3216, 12.3516, 87.6917, 11.0682, 11.3876, 1.7658, 7.0162, 19.4471], [3.1987, 2.3404, 13.8384, 10.3455, 8.6613, 6.8932, 15.6772, 276.7284, 30.0045, 14.8104, 6.9931, 5.171, 14.8122, 51.6903, 7.9258, 24.7118, 16.6796, 20.1664, 13.9299, 78.3043, 13.545, 13.7871, 0.0, 8.4902, 28.4931], [37.4775, 19.8135, 51.0888, 31.9753, 303.6852, 52.7171, 86.6558, 0.0, 0.0, 54.743, 140.7199], [10.3958, 9.6347, 7.5024, 14.193, 15.5678, 0.0, 18.704, 279.2556, 36.5792, 13.09, 7.58, 7.6507, 17.9098, 61.1248, 7.4923, 30.3345, 29.8701, 27.8208, 15.0621, 103.7189, 15.0156, 20.0503, 20.636, 28.9335], [352.1232, 38.0137, 96.7912, 7.2446, 7.2122, 96.7578, 306.2884, 0.0, 111.51, 27.0618, 64.0688, 19.3851, 187.2893], [45.4675, 0.0, 22.7088, 54.8625, 0.0, 4.2541, 83.1203, 412.3548, 123.4848, 48.2834, 11.0514, 0.0, 60.4314, 120.2564, 0.0, 0.0, 37.444, 0.0, 28.5116, 165.5381, 19.8144, 49.4141, 0.0, 38.2061, 0.0], [34.5005, 7.7933, 28.8288, 53.8365, 35.5322, 15.0864, 46.7212, 490.2768, 49.7286, 0.0, 14.467, 74.8512, 27.2078, 224.8387, 52.8642, 85.6103, 32.5459, 61.7294], [224.833, 0.0, 22.302, 105.524, 93.1776, 33.761, 497.5301, 111.5721, 39.6939, 18.0346, 96.6944, 114.2772], [0.0, 61.5622, 33.0048, 35.3115, 0.0, 53.7061, 416.988, 62.9976, 53.1454, 0.0, 0.0, 63.7542, 234.2674, 17.0899, 86.94, 35.5718, 76.8752, 34.2414, 193.2422, 66.1383, 61.2083, 0.0, 6.8394, 54.8517], [0.0, 20.0772, 0.0, 0.0, 0.0, 0.0, 0.0, 683.1864, 253.0662, 25.2076, 0.0, 0.0, 63.8106, 213.671, 0.0, 71.631, 0.0, 55.2368, 25.7668, 232.3944, 37.3455, 63.0385, 0.0, 0.0, 76.1284], [622.9548, 87.5033, 57.3342, 7.3453, 13.865, 68.7667, 275.1945, 25.3253, 66.6225, 34.4655, 42.5408, 63.1647, 292.153, 114.5907, 99.2755, 14.4452, 68.4037], [55.2541, 66.2785, 66.9456, 70.0245, 35.0416, 32.1816, 46.3332, 818.3916, 214.8134, 24.6466, 24.6854, 4.158, 60.9946, 159.7218, 0.0, 60.669, 37.6993, 61.0512, 40.4172, 261.9302, 39.1257, 36.725, 20.455, 20.3412, 33.3379], [17.593, 27.7279, 61.1136, 86.754, 62.9126, 31.5514, 96.4692, 769.1112, 110.2159, 68.2176, 0.0, 24.4642, 59.7555, 331.2698, 18.2974, 100.926, 131.1391, 107.5664, 55.9939, 392.6664, 96.5952, 103.3425, 0.0, 77.8862, 83.5481], [0.0, 44.6569, 28.1952, 69.7965, 64.1014, 69.996, 126.8147, 767.4264, 231.549, 30.1818, 0.0, 21.7879, 78.3411, 355.3211, 53.5918, 92.7045, 113.8638, 85.928, 21.9584, 307.9512, 146.2473, 70.9285, 36.9679, 118.8172], [84.1187, 51.3572, 56.4768, 88.236, 64.0825, 86.5004, 92.0455, 689.5044, 165.2043, 112.9106, 13.9694, 29.2118, 86.4512, 362.098, 44.2418, 124.0785, 129.2669, 71.2448, 53.0089, 418.3099, 117.8415, 97.6893, 18.7493, 87.1394]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

