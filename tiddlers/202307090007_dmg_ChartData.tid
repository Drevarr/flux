created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_dmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Aidoneusz", "Thalia Mavren", "Gwydianna", "Constantine Elvis", "Carllgenii", "Bella Sassy", "Siofra Sen", "Zaedy Zae", "Magister Boombottom", "Executorj", "Heavenm", "Verna Mae", "Enginart", "Sonia Truestrike", "Amiti\u00e9l", "Zayde Sunsabre", "Artofliving", "Valaria Emberstorm", "Miphest\u00f6", "K\u00e2 Otik", "Sarette Fay", "Brutal Araden", "Chainer Valentine", "K\u00e2 \u00d4tik R\u00e6j", "Prolly Getn Carried", "Greg The Knight", "Enter Effore", "Artakama Nahid", "Thats Not Nice", "Dalveirric", "Aisling Vexwind", "Zerille Maede", "Tru Master", "Perpetual Hope", "Hayuf", "Newtype Khan", "Whip \u00d1 Sl\u00e0pper", "Danaeryn", "Naithan Stone", "Boof Floof", "Porlen", "Blaze All Might", "Jerryatric Reflexes", "Hayuf", "Koranthin", "Erin Celes", "Luke The Knight", "Tika Fiery", "Lucky Leipreach\u00e1n", "S\u00e2ucy K\u00e2t", "Glorious Gluvs", "Ggclaudx", "Tantai Jin", "Lost Uber Driver", "Kittendo", "Scythe User", "Jello Jawn", "Free H\u00e4nd", "Jmbrage Rev", "Jerryatric Reflexes", "Red Reaper Robin", "Drevarr Moonwillow", "Audra Storm"];
const professions = ["Firebrand", "Firebrand", "Virtuoso", "Vindicator", "Druid", "Firebrand", "Necromancer", "Druid", "Tempest", "Reaper", "Guardian", "Renegade", "Mechanist", "Firebrand", "Firebrand", "Spellbreaker", "Vindicator", "Tempest", "Tempest", "Firebrand", "Chronomancer", "Renegade", "Soulbeast", "Spellbreaker", "Specter", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Soulbeast", "Tempest", "Soulbeast", "Scourge", "Tempest", "Dragonhunter", "Spellbreaker", "Tempest", "Tempest", "Tempest", "Firebrand", "Ranger", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Herald", "Berserker", "Firebrand", "Scrapper", "Chronomancer", "Berserker", "Holosmith", "Reaper", "Herald", "Soulbeast", "Reaper", "Virtuoso", "Vindicator", "Vindicator", "Berserker", "Reaper", "Scrapper", "Weaver"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7.0], [15.592], [28.7442, 0.0], [129.3636, 45.1864], [136.6346], [79.328], [46.1581, 23.9091, 45.1356], [43.344, 34.2549, 39.8966, 0.0, 12.2792], [0.464, 68.8039, 0.0, 98.886], [0.0, 44.6441, 276.0192], [98.7349, 39.9697, 44.1695], [208.136], [39.4186, 91.9697, 311.3051], [22.3294, 85.0259, 62.5907, 0.0, 29.1356, 0.0, 189.8654], [42.304, 19.3725, 8.3448, 259.4649, 20.4325], [57.7579, 0.0, 1.6552, 106.0047, 0.0, 0.2712, 29.2632, 101.1538], [361.56], [88.688, 64.9804, 41.1579, 62.0618], [101.2449, 18.5159], [121.672, 0.0877, 77.9108], [21.192, 0.0, 0.0, 31.2456, 32.4828, 22.123, 57.3333, 141.25, 23.4744, 0.0, 3.7627, 7.6447, 20.4231], [191.7209, 0.0, 190.1017], [38.1373, 399.8276, 71.6842, 15.1259, 52.7024, 43.8621, 40.1767], [66.4643, 141.3889, 0.0, 85.3116, 60.2712, 31.1053, 212.8654], [100.128, 507.098, 119.0, 138.0439], [17.4325, 12.1944, 228.9397, 118.4233, 5.4242, 29.2712], [34.424, 29.5294, 0.0, 64.0702, 28.4554, 18.369, 63.6389, 118.8793, 29.4233, 21.678, 45.5132, 69.2115], [1.152, 15.6863, 12.8596, 28.6682, 10.8929, 30.0278, 287.0517, 49.2558, 0.0, 2.7627, 4.0395], [522.248], [97.968, 178.9216, 112.4649, 57.5744, 0.0, 71.3448, 22.6605, 0.0], [43.6078, 14.1034, 23.4035, 68.659, 27.4048, 14.8611, 71.6724, 31.5163, 21.3898, 188.3026, 10.8654], [417.1515, 165.6441, 695.6184], [18.1468, 323.4167, 20.5259, 227.1395, 0.0, 166.1525], [119.816, 6.1176, 0.0, 23.6491, 106.1899, 18.4246, 205.3056, 97.431, 28.1628, 16.303, 8.7966, 18.75, 183.8077], [479.75], [56.56, 164.5882, 89.7719, 114.1396, 67.9087, 97.4444, 44.9828, 98.507, 20.1212, 3.5593], [131.552, 13.6863, 0.0, 102.7018, 74.4325, 37.0873, 115.0833, 124.3966, 144.3674, 0.0, 26.7119, 248.4423], [130.232, 163.0784, 0.0, 161.193, 115.3524, 43.5595, 0.0, 81.8966, 38.2512, 45.697, 43.4407, 13.75, 158.4231], [93.536, 101.6471, 9.2069, 679.1491, 108.595], [14.84, 24.5098, 8.8621, 127.0351, 111.3524, 101.5754, 22.5278, 179.9569, 38.2465, 17.2203, 211.1053, 93.2308], [186.5995, 202.6349, 0.0, 0.0, 481.8182, 186.7627], [114.1876, 134.7381, 46.5556, 392.7672, 152.0512, 18.0, 57.2203, 0.0, 123.2692], [363.808, 239.8039, 3.0345, 284.8421, 267.254], [301.672, 202.1569, 221.4483, 859.9737, 191.833], [133.528, 12.098, 5.2759, 628.7719, 134.2609, 47.4683, 0.0, 551.2155, 67.9395, 0.0, 78.6102, 201.0658, 216.5962], [94.632, 136.8824, 0.0, 300.307, 232.611, 119.1667, 102.8889, 531.6466, 75.5116, 20.6061, 112.1186, 229.7763, 311.9231], [180.5595, 0.0, 162.6293, 511.0279, 9.5152, 229.5085, 616.9474, 1596.6538], [283.92, 118.7451, 0.0, 160.0351, 227.6636, 242.9762, 72.25, 413.3448, 291.7814, 14.5152, 27.3051, 151.8553, 401.3846], [261.68, 498.3529, 32.2069, 595.5439, 685.6957], [128.208, 53.8235, 142.2069, 169.4211, 233.2197, 477.7738, 526.9444, 743.819, 460.7535, 91.9091, 60.661], [101.288, 194.8431, 0.0, 346.2193, 272.7506, 196.0635, 90.5, 1165.319, 184.0419, 17.3636, 244.7119, 187.6316, 904.9038], [709.7063, 629.7222, 824.5172, 624.0837, 137.7273, 113.5932, 3079.1923], [316.64, 738.2941, 166.069, 368.2719, 473.7346, 160.5516, 375.1667, 1002.1983, 480.9628, 0.0, 246.1017, 169.9474, 743.5962], [671.5198, 77.2778, 2042.3707, 1039.3953, 0.0, 95.9153, 634.1346], [669.5992, 188.25, 1141.6552, 1346.7907, 283.6364, 341.2373, 885.3462], [720.208, 332.7451, 565.5517, 453.0439, 1146.1762], [1150.728, 946.1176, 977.7586, 1528.8421, 1207.6041], [631.256, 524.7255, 112.0345, 1369.4035, 775.3066, 494.6786, 121.1389, 942.8276, 539.8186, 173.0, 37.1864, 155.6447, 1130.2115], [1362.64, 962.9804, 1093.3448, 997.3158, 1314.7666, 445.4524, 791.5833, 1911.0345], [1013.8611, 792.8889, 3750.0345, 1126.6186, 178.1515, 274.9492, 1751.2895, 6250.7692], [681.304, 782.7843, 987.0, 2220.7544, 970.0297, 662.8373, 575.8611, 2845.75, 621.5907, 0.0, 232.7797, 555.3158, 1492.9808], [1323.328, 1691.1569, 916.7241, 2043.7544, 1468.0092, 1026.8214, 1181.1111, 2346.1724, 1183.6186, 152.6667, 246.1017, 588.5526, 1736.8077], [503.456, 714.098, 986.1034, 2661.0, 1757.6018, 857.7341, 406.6389, 2030.8793, 1167.893, 238.5758, 316.7966, 1526.5, 2511.1538]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

