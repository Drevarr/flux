created: 20230318225613000
creator: Drevarr
modified: 20230705163522591
modifier: drevarr
tags: ChartData
title: 202303182256_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Euljian", "Tegan Parker", "Zadie Miststep", "Jupi Jupi Jupi", "Flower Redrose", "Venomina The Fierce", "Demon Sekhmet", "Newtype Khan", "\u00c1rkantor", "Boysto Yardbringer", "Drevarr Moonwillow"];
const professions = ["Dragonhunter", "Tempest", "Tempest", "Dragonhunter", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Vindicator", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[139.7712, 0.0, 57.092, 1.3619, 65.9736, 0.0, 0.0, 0.0, 49.4171, 4.1738, 0.0, 0.0, 8.8299, 104.7254], [0.0, 0.0, 44.077, 97.4746, 21.3955, 0.0, 0.0, 16.9008, 79.476, 11.4844, 15.6864, 30.8134, 21.8434, 13.3144, 0.0, 30.7811, 0.0, 47.8467, 61.6678, 0.0, 61.4358], [0.0, 16.511, 0.0, 54.6037, 62.8915, 0.0, 0.0, 31.584, 111.7104, 106.3483, 27.876, 55.1578, 31.5691, 69.205, 0.0, 31.3834, 23.4893, 28.5212, 62.6373, 63.017, 22.917, 0.0], [25.599, 25.0387, 0.0, 0.0, 366.1133, 118.5281, 66.46, 0.0, 0.0, 74.4588, 108.1575, 0.0, 0.0, 0.0, 8.8862, 0.0, 0.0, 0.0, 0.0, 57.915], [74.4597, 54.311, 0.0, 0.0, 239.7466, 76.1246, 14.9317, 0.0, 105.2724, 143.2399, 88.7916, 0.0, 0.0, 0.0, 0.0, 52.93, 45.2628, 96.2227, 0.0, 0.0], [11.6865, 252.8064, 56.7722, 33.4579, 214.7942, 56.4346, 35.6832, 83.664, 56.2992, 137.183, 30.2617, 53.4554, 0.0, 0.0, 12.1716, 68.3971, 0.0, 49.6769, 0.0, 0.0, 0.0, 49.9856], [53.9063, 262.7251, 0.0, 20.9612, 272.5786, 301.5528, 29.7148, 0.0, 86.7576, 102.8086, 25.9806, 155.8973, 9.8842, 0.0, 111.335], [112.1904, 194.1408, 114.1845, 194.191, 320.2944, 251.785, 0.0, 0.0, 124.488, 177.4668, 193.0316, 71.7653, 207.9482, 42.673, 0.0, 19.8288, 130.6008], [20.4792, 58.2422, 13.37, 139.2179, 340.1395, 102.7915, 0.0, 115.9872, 238.6944, 155.0389, 50.5886, 78.3955, 78.4714, 139.6067, 42.2388, 13.2192, 61.9275, 154.3093, 105.8062, 174.6458, 113.7682, 60.5653], [43.8151, 191.6611, 46.3103, 74.4876, 427.5456, 176.9006, 41.503, 22.0782, 79.0944, 191.6304, 238.0252, 7.2876, 199.0106, 53.4917, 7.452, 29.939, 66.3214, 14.7926, 131.868, 125.8598, 56.3737, 75.1961], [105.5495, 183.7987, 0.0, 100.1273, 606.0058, 260.5447, 89.8664, 72.9472, 87.8976, 195.3156, 261.7018, 48.7259, 196.4995, 103.3718, 159.9822, 0.0, 72.0936, 58.4641, 89.9217, 155.9695, 202.8467, 94.2454, 197.2976]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

