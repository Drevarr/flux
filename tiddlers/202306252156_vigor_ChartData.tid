created: 20230625215649000
creator: Drevarr
modified: 20230705163537071
modifier: drevarr
tags: ChartData
title: 202306252156_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Blancooo Padreee", "Zayde Sunsabre", "Demon Staph", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow", "Tegan Parker", "Artakama Nahid"];
const professions = ["Spellbreaker", "Spellbreaker", "Druid", "Spellbreaker", "Spellbreaker", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 425.4053, 91.828, 395.8759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.9838, 0.0, 0.0, 108.63], [0.0, 0.0, 128.4026, 209.2552, 442.3128, 161.4089, 166.5882, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42.585], [0.0, 42.0089, 48.2227, 0.0, 477.3355, 96.5614, 243.0175, 66.047, 0.0, 104.4651, 114.8913, 138.2976, 0.0, 74.2325, 22.7409, 0.0, 0.0, 37.2504, 82.8518, 24.0715, 234.09], [51.9326, 53.5819, 0.0, 116.2453, 706.4928, 127.058, 259.7221, 45.9101, 72.6912, 0.0, 98.686, 52.3761, 0.0, 0.0, 0.0, 0.0, 0.0, 26.3277, 34.1429, 17.3722, 57.9454, 364.395], [54.6706, 77.0287, 0.0, 0.0, 883.7198, 133.4819, 340.499, 89.2483, 96.8832, 101.2624, 165.5328, 129.3453, 0.0, 0.0, 51.9439, 0.0, 43.7073, 0.0, 36.4934, 185.999, 4.3842, 630.87], [116.2862, 319.3875, 391.1398, 141.7568, 1670.5234, 320.5188, 859.7143, 238.4698, 97.8048, 113.1038, 158.5728, 168.1901, 42.7627, 60.6517, 42.827, 0.928, 64.9064, 38.2568, 130.0378, 181.2384, 52.4238, 799.425], [18.921, 156.6126, 380.9978, 153.1028, 1625.2354, 296.7842, 631.342, 284.9818, 42.8544, 191.3156, 229.8345, 286.8852, 32.3523, 73.3687, 86.4566, 0.0, 74.7826, 87.6708, 260.5138, 278.3722, 81.231, 896.58], [121.406, 358.4655, 890.7808, 318.197, 2429.2483, 530.0732, 1613.0227, 369.4694, 171.4176, 326.4164, 471.9788, 230.496, 73.3533, 87.0098, 67.5847, 121.1211, 83.812, 184.8576, 139.1443, 79.3905, 1396.635]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

