created: 20230603000934000
creator: Drevarr
modified: 20230705163533185
modifier: drevarr
tags: ChartData
title: 202306030009_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elon\u00edth", "Cat Wigglebooty", "Johosh Of The North", "Sakis Ranger", "Zadey Starbolt", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Firebrand", "Scrapper", "Tempest", "Druid", "Scrapper", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[86.2132, 26.026, 191.5375, 30.7296, 1.4496, 45.0253, 148.6991, 120.0186, 98.9764, 24.436, 47.6505, 28.9856, 142.0825, 141.2057, 153.0826, 107.7435, 56.4538, 58.0992, 76.8627, 58.1458, 244.4355], [0.0, 84.7519, 0.0, 486.5404, 39.8376, 0.0, 0.0, 20.84, 652.0081, 145.8522, 234.2095, 11.8736, 81.4743, 0.0, 291.249, 310.5194, 180.88, 0.0, 0.0, 89.8906, 79.0398, 103.9216, 501.6659], [104.9632, 91.3097, 36.5507, 561.168, 53.3016, 30.5575, 33.9803, 81.6997, 426.857, 442.221, 197.1095, 42.8696, 49.1538, 27.608, 211.554, 274.0122, 387.394, 197.2917, 125.132, 278.8762, 176.6403, 262.5493, 414.101], [192.0664, 208.2089, 0.0, 1282.5027, 489.7992, 41.701, 34.6928, 189.0962, 600.1482, 523.5789, 441.8912, 386.6136, 93.3432, 48.4624, 321.678, 619.1262, 578.1081, 615.3489, 281.057, 889.6358, 152.1756, 451.3415, 1660.4022], [191.9414, 397.1365, 2521.359, 204.3888, 60.1927, 63.8656, 245.768, 1586.5064, 592.7376, 701.396, 112.176, 246.4156, 12.0064, 640.941, 994.8431, 785.671, 570.078, 163.7302, 637.0675, 27.5643, 610.2337, 742.5029], [166.2409, 438.372, 199.4117, 3053.4943, 218.6976, 110.8145, 222.3094, 377.9446, 1615.0485, 1183.5915, 878.399, 305.3352, 207.4352, 107.5312, 916.573, 1033.263, 773.608, 690.2415, 348.1672, 683.808, 206.3079, 660.5077, 1355.0578], [237.7523, 502.8804, 112.4819, 2774.2743, 431.5344, 82.072, 604.0125, 1138.2429, 1491.711, 479.7046, 349.5168, 225.1599, 25.0208, 1118.306, 1254.8844, 552.8142, 220.8254, 1644.0768, 348.2622, 1665.9216, 2302.0122]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

