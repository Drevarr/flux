created: 20230320222849000
creator: Drevarr
modified: 20230705163522668
modifier: drevarr
tags: ChartData
title: 202303202228_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Johosh The Great", "Stoic Rapidfire", "Misaki Amakase", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow", "\u00c1rkantor"];
const professions = ["Firebrand", "Firebrand", "Druid", "Vindicator", "Druid", "Tempest", "Scrapper", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.375, 76.9722, 243.55, 112.9867, 327.7843, 106.0, 91.8392, 509.0855, 173.277, 245.5412, 0.0, 11.0833, 272.625, 248.7881, 112.25, 452.7429, 34.5459, 195.8375, 316.0, 300.3333, 1057.7907, 1036.1446, 44.4776, 884.9351], [148.4926, 0.0, 406.575, 370.8533, 328.8039, 91.2079, 90.6683, 605.5256, 142.8957, 619.6706, 1.2326, 34.1111, 328.7578, 228.5166, 78.0833, 953.3429, 22.8811, 335.5625, 219.726, 213.7296, 785.4302, 823.3976, 128.2015, 517.013], [566.7721, 759.6111, 1064.75, 523.04, 1328.0, 426.8911, 324.7136, 611.8632, 475.9281, 977.3059, 15.093, 48.6667, 843.4766, 159.8245, 30.219, 31.3027, 851.675, 440.7808, 815.174, 901.186, 1382.3735, 5.5806, 72.4403, 1486.3377], [2551.3176, 0.0, 130.75, 1266.3594, 1100.1026, 351.5972, 1181.6857, 154.5243, 2258.85, 700.137, 628.3166, 1586.6744, 3833.5422, 0.1613, 159.2239, 4833.2468], [425.6103, 134.0556, 1223.45, 283.96, 1191.1373, 299.703, 263.8141, 1415.3974, 331.7014, 1073.4706, 37.0, 2.8056, 1146.6641, 492.1325, 109.4444, 634.3333, 62.0, 1028.9125, 779.6712, 902.3795, 2351.9767, 1049.5783, 58.0, 1038.8831], [515.0956, 703.7778, 73.925, 1212.52, 1227.9804, 377.6535, 322.005, 1748.8921, 514.5108, 881.7294, 35.7674, 0.0, 1184.7109, 924.6887, 0.4583, 2407.0, 70.8324, 1159.675, 468.9452, 953.8386, 2258.3488, 619.3976, 1.1613, 22.7687, 2126.1169], [676.1985, 445.8611, 1580.65, 600.56, 945.1176, 303.5644, 354.8492, 2029.1421, 110.8489, 1886.2, 154.6744, 102.1667, 1204.3516, 724.6921, 224.1111, 3904.4571, 206.373, 933.0125, 655.7808, 1167.8889, 2698.2209, 2240.2771, 20.8387, 93.4851, 3137.6883], [697.0809, 1468.0556, 3293.15, 1881.0267, 2827.1569, 537.2277, 668.9698, 4031.5983, 878.7122, 4203.8706, 177.9767, 189.1667, 2788.5469, 2157.1722, 353.1944, 5649.6857, 568.4595, 2022.975, 1181.0274, 2279.9706, 7530.2442, 3858.8193, 216.0821, 5972.7273]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

