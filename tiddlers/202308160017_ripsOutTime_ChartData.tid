created: 20230816001725000
creator: Drevarr
tags: ChartData
title: 202308160017_ripsOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Alarics Bane", "Necrotic Windrunner", "Jimbo The Plug", "Elonith Requiem"];
const professions = ["Reaper", "Scourge", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Duration of Boons Stripped per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.0741, 0.0, 10.9727, 11.6885, 18.2, 43.12, 8.824, 0.0, 0.0, 16.2235, 2.9487, 11.2545, 12.3696, 11.7667, 10.1957, 0.0, 6.25, 41.1935, 0.0, 6.4375, 27.3654, 8.4545, 6.0702, 24.9474, 1.8302, 8.8545, 3.5814, 2.0366, 0.0, 21.2143, 22.2414, 12.203, 0.0, 9.3571, 9.7391, 6.4, 12.266, 21.708, 28644.8533, 25.3678, 0.0, 12.2048, 29.0213, 23.3378, 0.0, 0.0, 0.0, 10.8485, 26.02, 0.0], [46697.8696, 8.4667, 25.4681, 26.531, 14.6533, 10.7471, 0.0, 8.6024, 19.5106, 7.6081, 1.0, 4.0, 18.5946, 3.7879, 18.1, 23.5, 9.0462, 0.0, 23.8621, 3.8, 17.6635, 27.225, 19.2081, 17.5455, 12.5158, 19.1569, 13.0118, 3.0, 16.0909, 27.4348, 4.0132, 0.0, 16.5714, 2.9818, 0.9783, 13.3881, 20.6842, 16.5227, 10.4468], [11.6316, 22.2632, 1.0377, 0.0, 3.0, 5.5244, 0.0, 9.6522, 15.8667, 16.2766, 15.6549, 85913.74, 1.0, 25.0909, 9.4, 0.0, 51.5517, 0.0, 16.8673, 21.55, 17.3988, 20.2857, 18.5368, 2.0, 0.2824, 4.0, 14.1136, 16.5217, 9.5658, 7.7111, 0.0, 15.8857, 6.4909, 0.0, 1.0, 13.9211, 0.0, 14.5909, 20.234, 5.9091, 0.0, 6.2, 12.1757, 0.0, 7.32, 10.6107, 11.7442, 0.0, 0.0, 4.2128, 0.9722, 0.0, 6.2991], [30.4867, 5.32, 29.8621, 3.3636, 23.0964, 47.117, 2.2162, 1.0, 34.0541, 2.1212, 23.92, 1.0, 74.1364, 17.0923, 15.4857, 32.4483, 4.32, 24.8768, 31.175, 29.4509, 14.987, 17.5579, 23.4314, 6.0824, 1.0, 14.8636, 15.5652, 24.8158, 13.2778, 1.0, 13.8714, 19.4727, 10.9348, 25.2537, 19.1053, 1.1481, 31.3864, 22.2553, 5.3636, 1.9783, 18.6667, 4.0203, 0.0, 23.04, 17.2483, 22.4767, 5.8378, 7.1277, 0.9722, 2.9901, 6501.1541]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

