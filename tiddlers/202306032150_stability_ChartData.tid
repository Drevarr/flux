created: 20230603215001000
creator: Drevarr
modified: 20230705163533635
modifier: drevarr
tags: ChartData
title: 202306032150_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Kira Dragonblaze", "Newtype Khan", "Mistwalker Cael", "Xanvias Einzbern", "Pocket Stabbs", "Sygaldry Verdandi", "Duke Silvver", "Blanco Padre Guard", "Aronorf Xideliesi", "Crusader Siolith", "Koralia Danai", "Tika Fiery"];
const professions = ["Spellbreaker", "Dragonhunter", "Spellbreaker", "Vindicator", "Berserker", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.5139, 0.0, 1.4861, 0.0, 1.9133, 0.0, 0.8938, 0.0, 0.0, 0.3352, 2.6762, 1.888, 0.9405, 0.7862, 0.0], [2.4221, 5.4459, 1.2038, 0.9011, 1.1923, 0.0, 1.148, 0.0, 1.6088, 0.8257, 0.0], [2.5566, 3.9162, 2.4259, 0.0, 1.6762, 0.0, 1.7119, 0.0, 0.0, 0.0, 0.0, 1.613, 1.5104, 1.8811, 0.1966, 0.0], [2.3548, 1.1626, 1.8058, 0.0, 1.8835, 0.0, 2.6383, 0.0, 2.9495, 0.4781, 0.5202, 1.3198, 3.9176, 2.4575, 0.0437, 0.0], [4.3732, 6.3026, 1.0762, 0.0, 1.2787, 1.0745, 0.0, 0.0, 0.9385, 0.0, 0.0, 1.833, 2.3128, 2.3665, 0.5897, 0.4493], [1.9526, 0.0, 3.3432, 0.0, 4.3796, 0.6302, 0.9942, 3.3727, 8.0712, 0.9405, 0.9173, 0.7441], [2.0463, 6.2322, 11.092, 3.5801, 2.2058, 1.3057], [2.2202, 8.9337, 0.8573, 0.0, 0.4147, 0.0, 2.2355, 0.0, 3.7093, 0.1304, 0.0, 3.776, 3.1624, 4.4296, 0.0, 1.2496], [5.0525, 0.0, 3.3523, 0.0, 2.8397, 0.0, 2.9495, 1.2603, 2.1889, 1.63, 9.0917, 10.2424, 4.3993, 2.9047, 1.6146], [7.199, 14.2573, 2.3712, 0.169, 3.6288, 1.2454, 3.303, 0.0, 5.6309, 2.4989, 1.8253, 0.104, 7.1487, 5.9472, 4.369, 3.0794, 2.8642], [5.1806, 21.1105, 4.56, 0.0, 4.5619, 3.4554, 5.4378, 2.4039, 8.357, 6.7798, 1.8727, 5.719, 9.912, 7.7064, 1.1575, 0.0], [6.1225, 23.1298, 6.4205, 0.4224, 7.4131, 0.2442, 8.8012, 4.5647, 4.6031, 2.7814, 0.5918, 14.8106, 9.5816, 7.8884, 0.9828, 1.8954], [19.2421, 23.5582, 5.8368, 0.0, 6.7565, 2.4054, 6.042, 8.3731, 7.6867, 2.7597, 0.0, 0.6242, 9.4216, 11.6112, 7.5243, 3.6691, 4.2682]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

