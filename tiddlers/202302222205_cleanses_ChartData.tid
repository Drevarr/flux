created: 20230222220539000
creator: Drevarr
modified: 20230705163519807
modifier: drevarr
tags: ChartData
title: 202302222205_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Kiloak", "Pixil Ranger", "Newtype Khan", "Primal Clone", "Black Raspberry Pie", "Eibh\u00ebar", "Cat Wigglebooty", "Tootsie Pop Bringer", "Venomina The Siren", "Fribble Bibble", "Mac Aaroni", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow", "Mike The Archmagus"];
const professions = ["Firebrand", "Druid", "Spellbreaker", "Chronomancer", "Chronomancer", "Chronomancer", "Scrapper", "Scrapper", "Tempest", "Scrapper", "Tempest", "Druid", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0455, 0.0116, 0.0395, 0.0932, 0.1, 0.225, 0.2116, 0.3627, 0.1471, 0.5957], [0.5882, 0.6246, 0.5851], [0.0, 0.0, 0.0455, 0.0, 0.0, 0.0169, 0.275, 0.3875, 0.2963, 0.2696, 0.2282, 0.9574], [0.0, 0.0, 0.197, 0.0, 0.0395, 0.1525, 0.5125, 0.8, 0.3254, 0.2402, 0.1231, 0.5213], [0.4884, 0.1622, 0.197, 0.0581, 0.2237, 0.1271, 0.725, 0.55, 0.2222, 0.2304, 0.2012, 0.4468], [0.6279, 0.4324, 0.1212, 0.2209, 0.1382, 0.0763, 0.55, 1.2875, 0.4101, 0.2794, 0.2342, 0.734], [1.0465, 0.4054, 0.2273, 0.0, 0.4671, 0.3983, 0.35, 0.325, 0.3624, 0.1618, 0.3844, 0.6596], [0.0, 0.0, 0.1364, 0.0, 0.3618, 0.3644, 0.775, 1.2875, 0.4974, 0.2206, 0.1081, 0.9894], [0.1515, 0.0, 0.2961, 0.0508, 1.0, 1.85, 0.8122, 0.5392, 0.2462, 1.4043], [0.9302, 0.4595, 0.0758, 0.1047, 0.5592, 0.5169, 0.9875, 0.65, 0.6905, 0.6471, 0.5616, 1.5106], [1.2093, 0.973, 0.3636, 0.2209, 1.1513, 0.3475, 1.3875, 1.825, 0.791, 0.8627, 0.5766, 1.883], [1.6279, 1.1351, 0.5152, 0.4186, 1.0329, 0.7712, 1.5, 2.0875, 1.0397, 0.9412, 1.018, 1.6489], [2.2093, 2.0, 0.8333, 0.1628, 0.7368, 0.7881, 1.5375, 1.2375, 1.1746, 0.7892, 0.991, 2.3085], [0.8182, 0.3837, 0.9737, 0.7203, 1.2875, 2.3625, 1.1693, 0.8873, 1.2823, 2.2979], [1.7907, 1.5946, 0.697, 0.3605, 1.1974, 0.9831, 1.8875, 2.7125, 1.336, 0.9657, 1.2823, 2.7128]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

