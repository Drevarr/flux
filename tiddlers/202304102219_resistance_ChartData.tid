created: 20230410221909000
creator: Drevarr
modified: 20230705163525253
modifier: drevarr
tags: ChartData
title: 202304102219_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Blancooo Padreee", "Sp\u00edcy Cheese", "Black Raspberry Pie", "Asorlia", "Eibh\u00ebar", "Jeckyll Mbs", "Ryvalia Fazebringer", "Sub Train", "Smol Daddy Tika", "Ark Darkness", "Newtype Khan", "Grasszanine", "Gavann", "Sygaldry Verdandi", "Zaylen Harker", "Arcanophage Farra", "Koralia Danai", "Xanvias Einzbern", "Bella Sassy", "Johosh The Great", "Solus Sanctus"];
const professions = ["Spellbreaker", "Berserker", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Berserker", "Chronomancer", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[13.9277, 26.8152, 90.6608, 266.5056], [0.0, 25.872, 33.9315, 42.791, 0.0, 0.0, 0.0, 56.9866, 0.0, 33.7355, 17.7184, 15.6996, 12.8204, 27.1867, 12.9213, 38.4469, 0.0, 28.9797, 8.5182, 42.1939, 69.6875], [0.0, 0.0, 38.1342, 32.6061, 159.1526, 0.0, 0.0, 0.0, 35.9719, 0.0, 0.0, 0.0, 43.7472, 46.0865, 51.2726, 0.0, 0.0, 0.0, 27.4499, 36.0464, 16.4659, 37.8538], [1.3751, 18.5702, 59.9637, 130.4243, 352.0877, 17.8483, 7.0157, 6.8851, 10.5581, 6.6211, 16.0014, 6.7424, 14.112, 15.7976, 27.4635, 7.1001, 9.0552, 8.7519, 19.888, 22.0226, 13.0891, 35.0123], [19.8202, 53.361, 132.8101, 372.3571, 17.3383, 4.8989, 12.9254, 20.4055, 13.5044, 10.8388, 11.5013, 14.309, 18.4382, 6.3504, 12.6018, 0.0, 27.9307, 18.2309, 13.5715, 26.777], [10.3565, 54.8432, 108.952, 418.151, 6.6294, 12.8218, 6.7162, 10.3889, 8.5606, 24.7666, 1.1172, 8.5025, 9.4786, 12.126, 4.4321, 12.1491, 15.2704, 24.565, 26.0219, 11.8992, 27.403], [0.0, 0.0, 109.8212, 0.0, 295.033, 0.0, 35.7437, 15.9667, 16.3447, 0.0, 72.0065, 24.206, 20.9563, 53.5599, 0.0, 16.1406, 35.2021, 23.7885, 63.8166, 48.512, 29.2334], [8.2138, 44.4675, 135.461, 424.9075, 16.3184, 18.9907, 13.0522, 23.3834, 7.4404, 21.1484, 16.5816, 15.0293, 23.6053, 21.096, 6.8355, 15.507, 14.751, 26.0949, 34.592, 19.296, 32.7488], [31.6897, 26.4298, 67.1194, 70.6241, 0.0, 68.5922, 62.4848, 59.4115, 57.3271, 71.7041, 28.8855, 47.8794, 5.6615, 69.8049, 107.0483, 63.7733, 125.3123], [40.4828, 31.9622, 201.8555, 230.6283, 328.0646, 0.0, 24.4944, 46.8019, 21.0146, 55.0368, 4.2336, 0.0, 0.0, 31.1179, 15.0822, 56.2932, 29.7876, 8.5235, 28.5151, 12.9605, 0.0], [25.8912, 82.1975, 88.5401, 611.0861, 37.6634, 25.704, 9.7574, 66.4279, 0.0, 43.4179, 28.9884, 41.8068, 56.2941, 60.0765, 16.8903, 57.1232, 28.1515, 51.3155, 103.3087, 64.1914], [78.8525, 23.2128, 134.3458, 238.3159, 301.7894, 53.6904, 72.455, 60.8256, 40.2358, 0.0, 63.9548, 20.678, 41.8421, 57.7524, 42.6903, 20.6388, 33.8815, 36.9553, 50.3539, 62.6396, 57.0197, 60.9224], [178.1405, 725.1955, 30.1599, 0.0, 46.295, 86.935, 0.0, 142.739, 0.0, 0.0, 49.0637, 58.0831, 0.0, 36.6736, 0.0, 97.517, 118.2674, 42.001, 115.0061], [33.9264, 62.9283, 137.3166, 730.4506, 35.8422, 56.9117, 33.7498, 63.653, 5.1665, 57.1262, 13.9748, 53.6962, 65.3778, 53.5428, 14.3325, 61.8017, 18.5945, 90.6983, 31.8912, 69.4334, 106.7226], [69.9955, 123.8353, 207.8306, 740.2099, 30.7427, 35.9251, 47.7312, 63.0375, 12.7988, 49.8154, 74.8867, 60.5748, 17.9487, 83.7606, 7.0638, 136.6375, 44.3048, 67.4074, 106.5299], [82.5419, 44.64, 115.6155, 197.7571, 574.3008, 44.9485, 76.0234, 34.6368, 82.8065, 0.0, 53.508, 15.2096, 54.9662, 55.6258, 34.5509, 36.3163, 20.9401, 45.6293, 77.8912, 110.2167, 78.1166, 192.1584], [0.0, 0.0, 321.1093, 69.4536, 157.6512, 138.8521, 73.9066, 125.495, 133.668, 0.0, 99.423, 118.7172, 128.137, 28.3445, 56.6989, 79.7108, 45.4269, 0.0, 84.7537, 153.8982, 9.7766, 289.8269], [62.1161, 70.7098, 177.87, 284.7067, 915.1277, 47.5711, 71.9107, 64.8384, 28.4256, 5.5009, 44.59, 34.0452, 50.0976, 55.9903, 62.5681, 18.2133, 85.383, 29.0864, 98.2164, 106.0095, 12.0278, 168.56], [36.0555, 0.0, 164.395, 349.6537, 1054.7616, 16.3913, 28.0022, 14.9107, 65.9542, 38.5229, 85.0522, 51.2344, 74.6878, 64.1626, 132.9434, 8.9743, 37.5036, 84.5323, 35.9296, 94.2192, 32.1922, 94.5862], [66.5434, 49.3718, 186.0897, 296.3706, 984.1939, 53.1076, 85.3373, 100.0666, 62.5363, 4.9658, 40.0546, 17.1304, 34.5391, 73.5804, 65.5581, 14.5089, 50.2941, 13.5044, 143.5874, 138.3162, 63.0979, 149.6813], [67.08, 109.0109, 166.2815, 294.515, 1128.3322, 26.7359, 72.0317, 24.7526, 77.4936, 21.4183, 58.0434, 52.0576, 69.6074, 80.9323, 70.7075, 47.0547, 80.4781, 0.0, 159.7601, 124.8118, 91.4309, 188.3538], [37.1405, 148.6292, 551.3872, 1473.6634, 56.823, 72.0922, 73.3709, 74.3803, 86.4791, 36.4364, 24.6254, 60.2132, 83.8302, 0.0, 40.4466, 21.2954, 99.0032, 108.6585, 58.3061, 181.1779]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

