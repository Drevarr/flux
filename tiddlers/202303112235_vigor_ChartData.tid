created: 20230311223557000
creator: Drevarr
modified: 20230705163521837
modifier: drevarr
tags: ChartData
title: 202303112235_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Xyntharos", "Mom You Never Had", "Venomina The Fierce", "Tegan Parker", "Zadie Miststep", "K\u00f4sair", "Mac Chiato", "Vopiscus Zergherdus", "Demon Sekhmet", "Newtype Khan", "\u00c1rkantor", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Vindicator", "Tempest", "Spellbreaker", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[314.5464, 7.7892, 7.9825, 6.966, 0.0, 14.04, 56.4954, 43.0707, 50.64, 80.9508, 98.325, 16.8885, 0.0, 7.8624, 7.9947, 9.4544, 0.0, 35.4552, 30.6877, 21.5561, 11.858, 29.952], [438.4737, 31.4824, 19.0864, 27.4125, 20.552, 57.8448, 87.4, 47.8694, 97.3746, 191.0053, 170.3587, 14.8837, 24.4922, 2.966, 12.7512, 23.2735, 12.9115, 27.9353, 3.0341, 51.2856, 67.068, 65.6183, 27.7816, 73.104], [591.2676, 0.0, 0.0, 0.0, 98.5608, 91.735, 134.7363, 318.4065, 473.67], [91.0791, 5.1295, 45.3878, 0.0, 64.1084, 74.3418, 248.0762, 332.2766, 339.5094, 126.2447, 352.26, 54.3105, 65.1526, 61.4208, 0.0, 7.3154, 81.6], [863.5095, 31.6181, 42.0849, 85.0122, 281.9174, 157.5358, 152.3106, 211.243, 177.6262, 31.7723, 0.0, 0.0, 0.0, 0.0, 31.8711, 0.0, 45.1778, 62.9647, 65.2036, 91.632], [814.7349, 23.5032, 31.3672, 0.0, 0.0, 133.4502, 244.9997, 177.4326, 47.9062, 368.1334, 346.0612, 0.0, 31.429, 31.248, 33.7046, 0.0, 55.229], [1118.8296, 75.3678, 0.0, 0.0, 152.0532, 50.4822, 88.7163, 109.8719, 423.257, 72.8888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.8488, 83.4727, 37.674, 46.7236, 130.224], [991.4184, 31.8624, 0.0, 30.9277, 55.868, 111.1968, 321.9117, 212.5446, 96.4634, 412.2709, 222.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 38.3309, 0.0, 16.8096, 46.8338, 59.1646, 74.7824, 109.872], [1915.1496, 123.7584, 0.0, 0.0, 124.2437, 245.2086, 558.3811], [1612.0503, 102.4264, 49.072, 100.9102, 107.1743, 128.3256, 297.999, 246.2522, 433.7598, 0.0, 391.1625, 132.3742, 138.149, 0.0, 84.7438, 0.0, 67.8063, 0.0], [1262.1672, 0.0, 62.9903, 63.1455, 70.2396, 190.3122, 370.4362, 82.3962, 319.3315, 733.7612, 523.26, 63.666, 109.5481, 0.0, 48.552, 85.5306], [1560.2895, 65.2717, 33.2093, 52.116, 116.0523, 174.447, 334.9168, 201.4258, 221.8267, 529.4568, 725.2537, 16.6455, 112.2161, 43.0954, 68.5272, 85.3276, 11.515, 94.7149, 6.7334, 231.024], [2252.5902, 106.5516, 180.7324, 78.8835, 213.9561, 201.474, 646.2006, 393.6055, 637.1009, 844.2012, 1120.6913, 72.3533, 95.7812, 44.583, 0.0, 104.8448, 10.7677, 64.2556, 46.499, 99.348, 288.2475, 138.2144, 91.322, 280.752]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

