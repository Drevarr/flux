created: 20230129012318000
creator: Drevarr
modified: 20230705163518300
modifier: drevarr
tags: ChartData
title: 202301290123_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Ace Peppers", "P\u00ebst Control", "Zaylen Harker", "Palatine Of Ruin", "Joh Oshi", "Ele Otis", "\u00c2 R K", "Fribble Bibble", "Hyde En Sikh", "Sola Machina", "Aronorf Xideliesi", "Koralia Danai", "Drevarr Moonwillow", "Bella Lunabringer", "Bubble Teabringer"];
const professions = ["Scrapper", "Tempest", "Firebrand", "Firebrand", "Druid", "Catalyst", "Firebrand", "Scrapper", "Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.9381, 9.9852, 13.8267, 16.8017, 26.6951, 11.8993, 79.4056, 62.764, 11.9177, 0.0, 8.9575, 44.9414, 11.8655, 8.829], [13.6231, 0.0, 40.6782, 50.8682, 64.8907, 40.5042, 29.111, 83.6451, 0.0, 52.728, 5.3401, 13.2916, 0.0], [212.432, 13.4973, 112.488, 70.3682, 60.0096, 19.6647, 99.6304], [348.1478, 55.8944, 242.5032], [0.0, 50.397, 83.2761, 77.473, 95.5587, 49.574, 104.3579, 71.5751, 17.0476, 11.04, 0.0, 32.0404, 36.4532, 0.0, 41.1628], [28.9313, 113.7936, 132.6051, 68.3903, 73.6729, 100.8923, 9.2272, 141.7018, 18.3144], [246.5289, 168.7223, 333.3474], [105.0437, 121.2825, 81.3321, 14.9491, 134.6604, 66.2408, 350.6321], [44.2394, 37.4916, 55.5741, 34.8899, 114.4474, 63.1013, 184.5432, 207.0005, 21.4112, 25.056, 0.0, 40.883, 76.5254, 0.0, 53.0132], [75.1414, 193.3455, 99.6057, 119.9533, 175.2955, 45.698, 206.2465, 237.0548, 25.8529, 65.04, 0.0, 52.568, 128.0468, 59.4274, 77.9306], [61.5182, 86.7582, 138.2184, 114.6786, 172.0196, 106.435, 362.9783, 212.1906, 27.8079, 57.12, 0.0, 0.0, 64.4252, 103.3718, 38.4628, 37.5134], [71.657, 197.7729, 188.7624, 107.5771, 268.2056, 158.3346, 430.6874, 235.2443, 55.9286, 138.408, 7.8989, 81.8809, 118.9006, 16.865, 162.9637], [102.7303, 116.2899, 102.6189, 147.6902, 256.0081, 185.6992, 458.7588, 402.5345, 33.454, 41.016, 13.5346, 0.0, 97.7288, 182.3976, 162.7504, 73.7712], [50.4941, 118.7391, 120.3093, 166.2415, 319.0866, 143.0632, 646.9409, 617.5012, 96.2016, 30.312, 44.6602, 30.001, 128.7931, 249.1188, 46.862, 115.9934], [92.5344, 193.7223, 155.5929, 243.0199, 405.1661, 159.4199, 450.4414, 618.3461, 120.8659, 66.144, 142.0284, 224.1806, 61.1272, 150.2107]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

