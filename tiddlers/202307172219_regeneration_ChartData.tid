created: 20230717221937000
creator: Drevarr
tags: ChartData
title: 202307172219_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sub Train", "Belvyn Brightblade", "Bella Sassy", "Cat Wigglebooty", "Solus Sanctus", "Sygaldry Verdandi", "Tegan Parker", "Drumina", "High Sorcer Baradun", "Xx Zen Xx", "Miphest\u00f6", "Crusader Siolith", "Klengah", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Firebrand", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 396.0104, 114.6256, 51.5012, 99.3644, 88.6144, 10.1069, 103.9311, 24.4013, 17.8272, 51.4067, 109.2811, 99.6538], [0.0, 511.4147, 122.5081, 110.7322, 515.9656], [108.3323, 522.4808, 93.9338, 101.115, 163.4043, 113.3824, 7.3062, 278.6724, 42.4445, 0.0, 53.3318, 33.8275, 67.4218], [28.7154, 119.712, 316.8049, 561.4564, 331.7371, 0.0, 80.3738, 172.7837, 276.2093], [0.0, 827.5907, 306.1061, 35.1431, 213.5423, 119.712, 43.9184, 164.9192, 98.808, 61.2429, 34.8403, 98.5162], [65.4626, 1171.0369, 399.5473, 0.0, 289.6366, 157.835, 0.0, 60.1901, 204.9907, 157.5955], [47.5456, 1302.6451, 153.3815, 213.0156, 481.7806, 205.2992, 43.3501, 403.1613, 138.8467, 0.0, 28.5459, 292.3954, 118.9171], [37.4072, 1231.5055, 711.0726, 122.4166, 808.5892, 329.6896, 27.2765, 424.8612, 189.7114, 0.0, 43.4054, 274.0637, 70.2278], [191.1438, 1855.9531, 688.246, 362.3063, 538.2998, 159.8912, 26.3835, 91.5964, 268.1563, 45.7056, 90.8416, 150.4008, 154.2586], [629.6576, 51.7928, 1274.5836, 1072.7971, 212.832, 338.9114, 706.5293, 637.9661], [169.6434, 2247.2209, 735.0487, 122.057, 772.581, 460.1344, 16.2766, 529.2491, 142.9709], [205.0404, 2279.629, 663.1204, 263.7079, 416.1454, 443.76, 65.7152, 647.1139, 65.557, 92.7216, 65.4842, 226.2595, 38.8301], [1821.3768, 1431.728, 554.2564, 2482.2401, 1969.4582, 33.6384, 371.7888, 1520.4154, 1283.7437], [162.9573, 6531.4057, 1887.052, 793.91, 2126.0791, 1396.64, 351.0223, 1618.3557, 878.532, 0.0, 194.9485, 1569.7387, 649.4179], [210.5466, 5163.5493, 1956.0244, 1052.6746, 3480.2609, 1588.592, 570.533, 2268.8959, 1228.9138, 90.2304, 402.7712, 1347.024, 1021.6406]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

