created: 20230625214256000
creator: Drevarr
modified: 20230705163535992
modifier: drevarr
tags: ChartData
title: 202306252142_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Hayuf", "Govinda Ektar", "Booboo Hurts", "Gamora Titus", "Tacitus Kilgore I", "Vesnan", "Scythe User", "Charr Surethang", "No Reserv\u00e9", "Hayuf", "Drac Tepes", "Ateriuz", "Elonith Requiem", "Latedoctor", "Fluffy No Care Bear", "Drevarr Moonwillow", "Drev Of The Dead", "Yngvar The Burdened", "Surethang", "Xanvias Tsolice", "Elonith Requiem", "Yedrax", "Jerryatric Reflexes"];
const professions = ["Firebrand", "Vindicator", "Firebrand", "Dragonhunter", "Spellbreaker", "Scourge", "Reaper", "Spellbreaker", "Vindicator", "Dragonhunter", "Scourge", "Berserker", "Scourge", "Reaper", "Berserker", "Scrapper", "Reaper", "Scourge", "Guardian", "Weaver", "Reaper", "Scrapper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 11.7771, 37.759, 5.1209, 0.0, 150.1878, 68.473], [5.6139, 65.9554, 85.7194, 52.2857, 0.0, 35.0718, 0.0, 0.0], [0.0, 0.0, 0.0, 7.3333, 26.4746, 0.0, 75.7273, 10.9405, 20.5156, 48.5446, 59.4204, 65.4568, 30.1648, 0.0, 6.3978, 115.1757, 0.0, 0.0], [105.8807, 0.0, 201.209, 0.0, 126.4773, 122.1304, 0.0, 0.0, 134.5091, 109.0357, 20.2344, 215.2871], [138.3394, 55.6907, 0.0, 0.0, 110.5909, 18.3043, 0.0, 2.137, 73.5818, 34.6548, 0.0, 24.2178, 97.7325, 101.4712, 138.1978, 54.5135, 20.1713], [0.0, 0.0, 79.4493, 0.0, 0.0, 131.2242, 25.2143, 110.2482, 269.967, 9.547, 140.3514, 0.0, 110.9848], [419.9633, 75.0825, 83.1493, 0.0, 368.7727, 41.5145, 127.0678, 4.7671, 186.3515, 70.8095, 6.1719], [0.0, 19.3608, 0.0, 64.7045, 108.9565, 0.0, 0.0, 245.8121, 0.0, 8.651, 13.0396, 424.2102], [583.844, 0.0, 0.0, 0.0, 109.6591, 0.3043, 198.0339, 0.0, 310.9939, 57.7381], [0.0, 10.5876, 59.3433, 0.0, 10.8409, 207.5507, 184.3898, 0.0, 401.103, 108.2262, 103.3698], [40.9745, 240.9029, 229.8242, 125.0, 75.0276, 394.7297, 0.0, 0.0], [0.0, 609.903, 106.2143, 71.6406, 248.1287], [500.367, 142.7732, 0.0, 363.8182, 198.0725, 35.1864, 22.2671, 249.6848, 51.5357], [155.1274, 265.0324, 185.2308, 143.7027, 75.8619, 370.3514, 0.0, 19.9545], [429.6716, 0.0, 55.6818, 72.5797, 0.0, 0.0, 590.9273, 68.0238, 55.1719, 97.6535], [475.2018, 0.0, 340.7463, 0.0, 174.9091, 127.0072, 0.0, 23.1507, 266.6545, 66.6548, 36.6823, 234.4653], [214.3822, 429.9712, 386.3956, 146.7297, 36.6077], [24.137, 179.5455, 53.4048, 17.5312, 61.4752, 155.2675, 84.0899, 390.1538, 96.2973, 115.0829, 805.4189, 0.0, 0.0], [652.1475, 209.2198, 56.0811, 191.3425, 309.1622], [0.0, 1145.4667, 58.5476, 214.25, 586.8515], [96.0677, 94.1683, 263.586, 512.1367, 683.8132, 216.8108, 179.9061], [111.5879, 144.2143, 0.0, 130.1485, 263.6879, 339.3489, 271.5604, 725.6216, 105.7459, 1107.5135, 0.0, 83.7576], [61.0909, 290.7857, 60.4635, 264.802, 269.6752, 337.777, 653.0989, 90.5135, 512.2376, 494.3243, 0.0, 35.9848]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

