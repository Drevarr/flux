created: 20230628220723000
creator: Drevarr
modified: 20230705163539870
modifier: drevarr
tags: ChartData
title: 202306282207_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Rahani Sunray", "Eibh\u00ebar", "Primal Clone", "Black Raspberry Pie", "Ryvalia Fazebringer", "Gavann", "Oo Dads Mad", "Miphest\u00f6", "Arriasa", "Crusader Siolith", "Legacy Of Mathus", "Tribal S", "Ateriuz", "Blanco Padre Guard", "Xanvias Einzbern", "Sub Train", "Johosh The Mighty", "Tika Fiery", "Zayde Sunsabre", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy", "Solus Sanctus", "Arcanophage Farra", "Grasszanine"];
const professions = ["Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Spellbreaker", "Tempest", "Druid", "Firebrand", "Spellbreaker", "Druid", "Berserker", "Firebrand", "Berserker", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[29.2648, 12.5244, 23.8728, 16.3503, 11.9232, 9.9984, 18.2784, 6.7074, 17.8976, 14.2042, 10.29, 5.4827, 22.6886, 0.0, 20.1216, 31.117, 23.1654, 13.1266, 25.8504, 13.9135, 15.2064], [4.2656, 19.0777, 31.4325, 17.7723, 22.2264, 12.9757, 5.495, 7.9503, 9.7997, 8.6283, 19.8152, 18.455, 10.3635, 6.6433, 19.1981, 0.0, 11.4442, 32.0695, 11.124, 18.0679, 23.301, 11.1793, 6.8899, 17.4528], [3.1979, 23.0143, 38.4777, 12.1716, 20.6349, 18.1565, 11.0592, 3.3957, 14.5306, 13.9501, 16.4914, 16.5888, 9.4815, 6.1097, 23.5128, 6.9405, 32.0688, 22.3852, 16.9726, 16.031, 19.8621, 13.7812, 13.5901, 11.8541], [4.0597, 4.5793, 19.0272, 36.1551, 13.8474, 23.0496, 25.5236, 12.1651, 11.2651, 22.3027, 0.0, 16.4914, 23.7946, 16.0598, 11.9393, 18.18, 5.5439, 29.7422, 31.8314, 33.6012, 5.3562, 22.8267, 7.1222, 5.3307, 18.6278], [8.6486, 4.5793, 28.7174, 39.0197, 18.2133, 26.3973, 28.7556, 10.1952, 10.6722, 10.4755, 7.1797, 20.0709, 19.3363, 11.5762, 5.9096, 22.3493, 0.0, 25.655, 24.5284, 27.9819, 15.4275, 33.1431, 9.3712, 7.6905, 13.6166], [16.857, 54.2714, 6.4827, 31.0072, 16.4929, 23.328, 8.0581, 10.3526, 0.0, 22.8194, 11.1974, 8.1218, 4.749, 56.2368, 0.0, 27.1013, 34.3715, 36.5829, 3.8474, 27.5699, 10.7825, 9.4815, 32.1754], [0.0, 83.5278, 40.6455, 82.1583, 127.8155, 70.6771, 27.9245, 35.4931, 15.6058], [6.8376, 33.5121, 81.9104, 13.671, 34.3, 28.6131, 13.1328, 13.5019, 24.6067, 0.0, 14.382, 16.848, 11.9805, 5.7229, 22.931, 0.0, 36.7848, 51.0413, 40.8261, 8.1475, 28.4592, 11.2234, 14.6858, 43.9603], [0.0, 53.0944, 75.6393, 63.8127, 52.7946, 30.4192, 0.0, 0.0, 22.8864, 0.0, 60.5322, 25.7645, 15.2145, 38.0568, 0.0, 30.2453, 41.357, 54.5877, 30.44, 46.6019, 0.0, 0.0, 21.911], [6.5239, 8.0247, 79.4329, 80.4825, 55.7581, 52.8534, 7.3613, 19.2962, 14.6842, 0.0, 56.8249, 47.1226, 14.9205, 12.7397, 20.6525, 11.109, 47.663, 45.2466, 31.709, 5.6957, 34.5661, 24.1889, 5.6257, 45.1008], [0.0, 54.9618, 65.4199, 40.5279, 124.9069, 40.9709, 17.28, 0.0, 92.7744, 0.0, 197.8324, 43.3901, 53.7285, 44.3822], [0.0, 56.8292, 135.485, 58.6971, 51.8067, 54.707, 7.8451, 29.3755, 26.3578, 0.0, 72.4853, 51.6326, 22.4542, 2.4412, 40.6262, 0.0, 17.2291, 70.807, 50.2298, 29.7234, 57.6299, 8.5995, 0.0, 15.7594], [72.0712, 74.478, 19.0071, 43.0259, 50.667, 0.0, 27.8124, 36.4339, 0.0, 38.4798, 43.079, 8.7097, 17.8623, 74.9986, 0.0, 30.6226, 78.9831, 110.2075, 54.8826, 58.875, 15.7217, 0.0, 21.8074], [0.0, 38.0544, 97.7815, 56.8008, 78.6979, 43.7276, 24.192, 32.2592, 38.0006, 10.927, 46.2142, 50.544, 45.0555, 8.4576, 44.3304, 67.473, 86.2967, 17.5775, 78.1442, 22.8438, 35.8387], [0.0, 46.8362, 106.2977, 73.2501, 90.4971, 44.1554, 7.6378, 19.5657, 8.3251, 0.0, 69.2254, 17.2627, 16.8315, 39.6598, 126.3389, 0.0, 85.5797, 118.8319, 90.8266, 0.0, 77.1956, 24.1227], [0.0, 66.1157, 124.2591, 39.4254, 96.6437, 66.8272, 32.4173, 48.9142, 25.3747, 11.4939, 97.4141, 61.6896, 46.5622, 24.8124, 77.665, 7.2156, 54.3912, 84.2222, 53.7849, 31.9866, 62.966, 54.4855, 0.0, 61.8278], [18.5447, 0.0, 110.5293, 70.0651, 48.1572, 102.2963, 40.1153, 10.7827, 2.8297, 9.4618, 0.0, 57.3362, 56.8166, 19.551, 30.722, 98.3659, 0.0, 89.8555, 110.8939, 76.9503, 66.9907, 134.7662, 19.4702, 18.2466, 44.7898], [0.0, 52.2364, 123.1752, 27.1215, 115.3029, 64.4982, 17.9366, 24.3359, 59.5968, 0.0, 65.8376, 33.7478, 52.0748, 39.1662, 77.8104, 7.406, 83.5675, 189.877, 44.2665, 28.6672, 96.3462, 43.9898, 0.0, 59.4778], [0.0, 77.2696, 155.3045, 73.3383, 83.3078, 35.0771, 55.0195, 14.7416, 43.4381, 20.8464, 111.9878, 68.5325, 54.5738, 10.2184, 34.4208, 0.0, 0.0, 81.2851, 140.311, 199.333, 30.5833, 0.0, 27.959], [21.7673, 87.3636, 176.3628, 79.5123, 85.3384, 88.5484, 57.9571, 21.2905, 40.8269, 6.0776, 45.7028, 108.3974, 74.1248, 6.9368, 83.2886, 8.2312, 101.1739, 41.5951, 72.6498, 19.5012, 59.4086, 14.7515, 7.522, 87.9898], [49.5029, 7.8831, 103.514, 152.9045, 43.5267, 68.0512, 92.9687, 56.5056, 54.3042, 31.7338, 0.0, 126.1781, 44.9971, 31.5315, 39.6732, 92.5968, 8.9084, 55.6488, 77.9512, 98.5101, 40.5113, 70.5551, 47.9367, 63.5558], [38.1608, 79.036, 143.8464, 99.5337, 91.3203, 81.5615, 17.7638, 42.7157, 73.2672, 9.573, 58.9982, 54.7949, 40.6455, 13.7002, 95.0208, 0.0, 74.387, 152.7271, 72.4204, 38.8139, 84.3697, 46.0624, 0.0, 73.129], [0.0, 0.0, 59.5546, 163.6659, 72.6327, 87.369, 83.2726, 33.0739, 29.5372, 34.2528, 10.864, 88.4653, 82.2701, 49.7595, 42.4612, 122.0726, 11.765, 59.6102, 113.434, 110.5515, 39.87, 112.5917, 38.9844, 7.9855, 76.1357], [0.0, 0.0, 300.1573, 46.4373, 81.5517, 32.3204, 0.0, 42.6349, 86.4461, 0.0, 142.9251, 59.9789, 84.8558, 83.8953, 0.0, 0.0, 89.9184, 143.1221, 198.9698, 0.0, 175.9134, 53.6476, 0.0, 0.0], [0.0, 137.127, 319.1252, 94.9032, 150.7554, 111.5054, 20.3904, 35.6818, 19.8758, 0.0, 221.4189, 13.271, 0.0, 14.4205, 118.1458, 0.0, 26.0952, 206.3086, 137.0426, 140.2807, 77.6106, 37.4188, 0.0, 50.2502]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

