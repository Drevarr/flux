created: 20230424220408000
creator: Drevarr
modified: 20230705163526489
modifier: drevarr
tags: ChartData
title: 202304242204_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Fribble Bibble", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Raziel Umbra", "Primal Clone", "Eibh\u00ebar", "Tika Rucola", "High Sorcer Baradun", "Tegan Parker", "Zadie Miststep", "Mac Aaroni", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[48.044, 0.0, 2.7298, 15.7062, 22.7674, 0.0, 0.0, 16.5274, 31.7966, 8.7465, 34.8831, 15.3102, 34.8], [116.915, 26.4355, 27.6698, 19.1866, 16.7194, 27.9688, 0.0, 0.0, 0.0, 0.0, 35.3241, 35.5838, 0.0], [81.6512, 31.8745, 28.1972, 14.68, 34.2451, 2.6987, 4.9277, 24.361, 16.9037, 13.0462, 37.485, 36.8437, 58.98], [117.747, 134.5491, 97.0536, 206.76], [266.7271, 0.0, 65.7314, 48.5466, 67.3882, 0.0, 0.0, 30.9658, 0.0, 52.185, 65.1357, 98.1226, 123.12], [326.3679, 0.0, 65.0489, 70.8566, 64.727, 32.1259, 39.2544, 54.8659, 59.2651, 81.2542, 70.6923, 102.2842, 112.02], [266.7271, 53.3365, 102.428, 102.9383, 43.008, 0.0, 116.5382, 61.2864, 75.4531, 52.2218, 67.6053, 56.85, 111.96], [144.6054, 41.699, 173.8981, 56.9797, 68.4902, 34.2795, 12.9178, 94.4333, 77.7365, 80.4458, 109.5444, 81.4379, 161.34], [740.0671, 25.284, 90.2372, 72.9983, 40.0512, 35.8196, 0.0, 35.7581, 0.0, 109.1107, 63.3717, 86.6686, 116.28], [804.2047, 40.18, 118.0621, 64.5205, 81.5002, 30.8311, 62.5286, 67.1846, 49.7227, 124.5457, 78.5862, 83.4615, 89.1], [1010.8176, 53.5325, 79.2251, 116.949, 102.4666, 57.6276, 133.2979, 85.248, 65.2973, 83.1652, 106.3251, 53.9865, 155.4], [838.9952, 50.519, 128.6089, 151.1279, 69.216, 45.3061, 33.6029, 163.2768, 128.5838, 131.4915, 241.227, 122.0615, 1.08]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

