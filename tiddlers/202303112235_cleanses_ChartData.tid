created: 20230311223557000
creator: Drevarr
modified: 20230705163521711
modifier: drevarr
tags: ChartData
title: 202303112235_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Primal Clone", "Black Raspberry Pie", "Mom You Never Had", "\u00c1rkantor", "Vopiscus Zergherdus", "High Sorcer Baradun", "Tegan Parker", "Tribal S", "Zadie Miststep", "Mac Chiato", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Chronomancer", "Chronomancer", "Tempest", "Vindicator", "Scrapper", "Tempest", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1537, 0.1695, 0.0, 0.0, 0.0917, 0.0256, 0.0724, 0.0827, 0.1166, 0.1241, 0.0653, 0.0815, 0.0776, 0.0, 0.375, 0.1111, 0.1429, 0.1183, 0.3214, 0.1059, 0.1981, 0.1429, 0.1455, 0.1812], [0.2215, 0.6271, 0.0, 0.0133, 0.1193, 0.1987, 0.1612, 0.0789, 0.0424, 0.1265, 0.0526, 0.0593, 0.0086, 0.0, 0.0, 0.2593, 0.2581, 0.0, 0.3285, 0.2698, 0.2273, 0.3875], [0.3273, 0.0169, 0.0756, 0.1333, 0.0, 0.0833, 0.125, 0.1165, 0.1131, 0.2578, 0.1558, 0.1037, 0.0086, 0.0, 0.0, 0.1667, 0.0, 0.3871, 0.0, 0.2545, 0.6], [0.6239, 0.0, 0.0252, 0.0, 0.2821, 0.1645, 0.1802, 0.6802, 0.4063], [0.5425, 0.4068, 0.042, 0.0, 0.0734, 0.1923, 0.2434, 0.1541, 0.1519, 0.4153, 0.2358, 0.0, 0.181, 0.1429, 0.2, 0.3519, 0.0857, 0.3226, 0.1429, 0.825], [0.9494, 0.1356, 0.042, 0.04, 0.3761, 0.4103, 0.5888], [0.7667, 0.1695, 0.0084, 0.0133, 0.2477, 0.3205, 0.5987, 0.2707, 0.1943, 0.0143, 0.3179, 0.0074, 0.1207, 0.0714, 0.1, 0.037, 0.0286, 0.5054], [1.2939, 0.4915, 0.3394, 0.5705, 0.6711, 0.6805, 0.5336, 0.9427, 0.6611, 0.2, 0.0345, 0.0, 0.1667, 0.0, 0.6882, 0.0471, 0.6763, 1.1349, 1.4273, 1.5562], [1.2749, 0.5763, 0.1008, 0.0, 0.1927, 0.6923, 0.5789, 0.688, 0.6961, 0.9547, 0.7347, 0.0, 0.5357, 0.0, 0.2407, 0.8925, 0.0, 0.4059, 0.6812, 1.2778, 1.5455, 1.95], [1.5316, 0.8305, 0.2101, 0.1067, 0.3486, 0.7564, 1.0263, 0.9624, 0.7208, 1.4463, 0.9347, 0.0, 0.1983, 0.575, 1.3704, 0.2571, 0.9785], [1.443, 1.0847, 0.0084, 0.0667, 0.4862, 0.9487, 0.7599, 0.8383, 0.424, 1.2029, 0.7032, 0.0, 0.0259, 0.0357, 0.0, 0.1667, 0.0, 0.7957, 0.2857, 0.4529, 0.8647, 0.9048, 1.3545, 1.9812], [1.4512, 1.1186, 0.1092, 0.0267, 0.4312, 0.9744, 1.0132, 0.9398, 0.8516, 1.5895, 1.0232, 0.2519, 0.3103, 0.2143, 0.875, 1.0556, 0.8286, 1.1828, 0.6786, 0.5353, 1.2367, 1.2937, 1.1182, 1.9125]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

