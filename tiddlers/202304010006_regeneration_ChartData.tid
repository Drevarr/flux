created: 20230401000636000
creator: Drevarr
modified: 20230705163523675
modifier: drevarr
tags: ChartData
title: 202304010006_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Cat Wigglebooty", "Mac Chiato", "Zadie Miststep", "Mike The Archmagus", "Arriasa", "Arkintor", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Tempest", "Tempest", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[155.8234, 120.7634, 0.0, 40.5629, 116.7876, 129.2306, 124.3032, 0.0, 118.1136, 0.0, 94.1549, 0.0, 65.0955, 134.7343, 22.1184, 18.6138, 54.706, 25.8149, 87.0038, 0.0, 68.4288, 22.3992, 0.0, 153.6246, 71.5162, 0.0, 46.9075, 1.6031, 0.0, 143.506], [267.9091, 161.2472, 80.509, 229.9381, 85.9989, 142.0902, 120.5576, 20.7019, 427.5216, 49.1832, 394.7328, 0.0, 127.1514, 28.6562], [212.0947, 117.6412, 34.8214, 10.2498, 110.7258, 126.7963, 79.5211, 69.371, 165.0528, 55.6459, 94.6675, 0.0, 64.5803, 236.1202, 4.9248, 0.0, 110.6028, 46.6939, 44.3489, 0.0, 134.244, 75.0006, 0.0, 121.986, 70.7063, 62.1511, 92.3155, 44.9811, 11.6052, 32.186], [167.5738, 363.8779, 79.2742, 20.445, 159.9179, 243.2732, 121.7513, 126.6883, 292.4064, 119.3227, 42.4637, 54.0355, 238.5376, 420.6258, 109.1232, 0.0, 180.3911, 82.9046, 0.0, 17.496, 213.2222, 0.0, 0.0, 218.5542, 121.1963, 199.3517, 111.9813, 19.1494, 89.056], [250.6752, 404.9968, 220.206, 111.3844, 176.7949, 147.0118, 116.4005, 154.1808, 85.8528, 189.2246, 149.0928, 95.9851, 152.9114, 480.4519, 147.96, 38.8152, 232.7157, 126.4099, 212.8003, 114.9811, 264.2587, 63.1584, 194.5944, 201.96, 144.5664, 303.7875, 130.2584, 189.97], [437.1408, 10.0359, 1078.9727, 653.7586, 339.6131, 13.5389, 557.5046, 107.9874, 410.913, 816.75, 52.241, 300.3053, 752.3726, 109.801, 392.4272], [316.5427, 390.92, 241.4446, 124.1693, 252.8508, 466.5427, 142.8664, 214.2019, 386.9712, 444.0744, 409.2576, 58.0919, 352.3453, 666.5494, 210.5136, 599.1867, 146.2406, 293.5024, 426.6821, 273.258, 124.752, 394.0488, 307.4963, 54.5054, 267.4214, 548.0245, 201.3348, 507.716], [937.6166, 528.3533, 372.251, 566.5991, 503.4775, 945.0454, 580.3972, 295.0901, 695.64, 344.9477, 917.2838, 80.8685, 397.0131, 1326.4795, 324.5832, 0.0, 1294.4894, 312.8798, 580.4322, 538.6867, 428.247, 111.564, 670.2426, 466.2225, 80.2397, 286.4928, 633.2716, 188.4367, 727.21]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

