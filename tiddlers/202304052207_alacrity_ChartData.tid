created: 20230405220700000
creator: Drevarr
modified: 20230705163524409
modifier: drevarr
tags: ChartData
title: 202304052207_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Yuuka Chou", "Drevarr Moonwillow", "Ryvalia Fazebringer", "Morton Saltbringer", "Black Raspberry Pie", "Eibh\u00ebar", "Venomina The Siren", "Mac Chiato"];
const professions = ["Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 46.2048, 45.8744, 45.9724, 0.0, 46.2384, 86.3352, 46.0161, 0.0, 48.825, 0.0, 0.0, 93.4092], [2.2491, 6.2005, 2.7871, 75.8439, 8.0652, 0.0, 0.0, 8.1434, 8.0652, 13.5162, 21.5551, 0.0, 15.836, 9.7434, 5.4226, 85.652, 0.0, 0.0, 27.216, 43.7557, 0.0, 155.2914, 0.0, 0.0, 24.8868], [0.0, 0.0, 0.0, 85.5221, 37.2654, 0.0, 0.0, 18.808, 0.0, 35.7818, 0.0, 0.0, 78.8396, 104.5128, 0.0, 81.282, 36.1099, 0.0, 35.8344, 56.1881, 0.0, 0.0, 0.0, 0.0, 54.2376], [0.0, 70.6662, 111.1352, 38.4155, 106.9776, 7.0039, 114.4553, 123.228, 27.7711, 5.3194, 0.0, 0.0, 118.0728], [0.0, 142.9085, 152.5204, 391.9687, 79.1424, 0.0, 41.1996, 147.9719, 89.3658, 72.2848, 107.9313], [8.262, 31.46, 101.7138, 286.8109, 54.0368, 8.3248, 31.4777, 30.6029, 33.0504, 31.5795, 43.8893, 0.0, 213.1054, 67.7468, 41.6874, 151.202, 8.7226, 90.2713, 396.144, 417.3741, 41.9244, 87.606, 66.0688, 95.6206, 265.8312], [40.4838, 0.0, 0.0, 254.426, 41.6288, 0.0, 40.4734, 36.225, 42.2154, 7.9968, 74.7417, 365.4209, 211.5375, 110.2816, 211.1584, 83.8071, 331.7328, 341.3264, 42.0371, 169.9668, 126.0831, 42.5068, 225.2088], [82.3446, 83.3518, 147.2147, 287.0901, 0.0, 40.0347, 0.0, 40.2662, 21.5551, 30.6782, 317.2316, 205.0673, 97.4002, 296.1112, 45.3684, 204.1943, 544.1688, 620.3293, 50.422, 123.876, 102.1836, 41.2171, 227.664]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

