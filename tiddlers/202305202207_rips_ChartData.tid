created: 20230520220730000
creator: Drevarr
modified: 20230705163531067
modifier: drevarr
tags: ChartData
title: 202305202207_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Ryvalia Fazebringer", "Necrotic Windrunner", "Newtype Khan", "Smol Gluvs", "Grasszanine", "Primal Clone", "Demon Maddx", "Black Raspberry Pie", "Be\u00eb"];
const professions = ["Druid", "Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Chronomancer", "Scourge", "Chronomancer", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0258, 0.0123, 0.0172, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0179, 0.0196, 0.0382, 0.0, 0.0, 0.031, 0.0, 0.013, 0.0173, 0.0147, 0.0241, 0.0, 0.0, 0.0278, 0.0106, 0.0179, 0.0176, 0.0208, 0.0135, 0.0, 0.0333, 0.0203], [0.0315, 0.0061, 0.0, 0.0508, 0.0, 0.0, 0.0, 0.0109, 0.0323, 0.0, 0.0036, 0.0, 0.033, 0.0141, 0.0, 0.0233, 0.0, 0.0, 0.0144, 0.0, 0.0223, 0.0309, 0.0, 0.0123, 0.0, 0.0638, 0.0179, 0.0235, 0.0833, 0.027, 0.0, 0.0, 0.0305], [0.0563, 0.1591, 0.3023, 0.0392, 0.039, 0.0778, 0.4118, 0.0292, 0.0206, 0.0909, 0.0278, 0.0, 0.4149, 0.125, 0.1176, 0.4583, 0.0, 0.0204, 0.0, 0.1218], [0.1375, 0.0184, 0.0517, 0.0847, 0.125, 0.0, 0.0196, 0.0, 0.0, 0.0189, 0.0036, 0.1961, 0.0469, 0.0211, 0.1818, 0.1395, 0.0, 0.1039, 0.0432, 0.1324, 0.0601, 0.0103, 0.0, 0.0741, 0.266, 0.0, 0.1118, 0.1875, 0.0, 0.0, 0.0, 0.1929], [0.1203, 0.0675, 0.0345, 0.0339, 0.025, 0.2581, 0.0, 0.0326, 0.0645, 0.0377, 0.0143, 0.2157, 0.1024, 0.0352, 0.1364, 0.3023, 0.0392, 0.0, 0.0692, 0.4265, 0.0275, 0.0, 0.2045, 0.0926, 0.5745, 0.0357, 0.2118, 0.1667, 0.0, 0.0408, 0.0111, 0.1117], [0.1375, 0.0245, 0.0345, 0.2034, 0.05, 0.4194, 0.087, 0.129, 0.0377, 0.0215, 0.098, 0.1736, 0.0423, 0.1364, 0.3023, 0.0909, 0.0663, 0.3971, 0.0241, 0.0, 0.3409, 0.0401, 0.0, 0.1809, 0.0893, 0.1059, 0.3958, 0.027, 0.0, 0.0222, 0.0761], [0.1003, 0.1595, 0.1034, 0.1695, 0.0, 0.3548, 0.0, 0.1413, 0.1613, 0.0189, 0.0108, 0.1176, 0.1892, 0.1127, 0.3182, 0.2791, 0.0, 0.1818, 0.0836, 0.0588, 0.0808, 0.0103, 0.2045, 0.0586, 0.0, 0.2766, 0.2143, 0.0706, 0.2292, 0.0, 0.0, 0.0222, 0.1624], [0.1862, 0.0613, 0.0, 0.1017, 0.05, 0.2258, 0.0, 0.1304, 0.1613, 0.1038, 0.0394, 0.1765, 0.1875, 0.0563, 0.1136, 0.3798, 0.0196, 0.0779, 0.1297, 0.2794, 0.0533, 0.0, 0.1591, 0.0895, 0.0, 0.2234, 0.1429, 0.1, 0.25, 0.0, 0.1224, 0.0667, 0.2132], [0.212, 0.1043, 0.2241, 0.2034, 0.075, 0.5161, 0.0196, 0.2826, 0.129, 0.0472, 0.0323, 0.098, 0.25, 0.0704, 0.1591, 0.4651, 0.0, 0.0779, 0.098, 0.0735, 0.0584, 0.0103, 0.2273, 0.0988, 0.0, 0.2447, 0.2143, 0.0765, 0.2708, 0.0811, 0.0204, 0.0111, 0.2893], [0.2178, 0.092, 0.0172, 0.3051, 0.0, 0.4839, 0.1176, 0.1087, 0.0968, 0.1038, 0.0502, 0.0196, 0.2535, 0.1056, 0.1364, 0.0233, 0.1569, 0.1688, 0.2075, 0.1912, 0.0722, 0.0, 0.1591, 0.1728, 0.6383, 0.1786, 0.2294, 0.5208, 0.0541, 0.0204, 0.1889, 0.2893]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

