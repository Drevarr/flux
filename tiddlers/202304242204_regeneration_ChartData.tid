created: 20230424220408000
creator: Drevarr
modified: 20230705163526632
modifier: drevarr
tags: ChartData
title: 202304242204_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Mac Aaroni", "Zadie Miststep", "Sassy Daddy Demon", "Cat Wigglebooty", "Tribal S", "Fribble Bibble", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Tempest", "Tempest", "Vindicator", "Scrapper", "Druid", "Scrapper", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[612.0286, 0.0, 46.1267, 53.4548, 55.8566, 0.0, 29.8166, 50.5344, 45.4968, 57.2932, 112.4991, 25.4661, 58.38], [493.9303, 40.376, 56.3944, 123.1066, 58.679, 18.0597, 0.0, 66.1709, 53.9146, 96.726, 87.9795, 83.0797, 65.76], [723.0269, 0.0, 80.4038, 100.7966, 89.2147, 8.6823, 91.1482, 124.7846, 91.7774, 125.0235, 57.7269, 166.7702, 90.72], [952.5968, 0.0, 87.6005, 231.3993, 128.567, 121.1843, 86.8051, 139.6531, 113.9294, 123.2228, 97.9461], [753.5573, 2.499, 73.4554, 144.9258, 137.76, 0.0, 33.9648, 218.2349, 265.3469, 227.5927, 234.9207, 149.1693, 0.0], [1510.4279, 0.0, 224.9881, 128.4164, 186.1978, 0.0, 23.0794, 103.8643, 74.9078, 296.3888, 152.0568, 374.2022, 244.32], [1812.6555, 73.3285, 187.0506, 140.6869, 174.1286, 0.0, 68.6813, 302.6534, 193.0973, 105.9135, 437.2515, 272.8343, 515.4], [2836.7266, 180.7855, 415.9162, 598.2203, 464.6477, 376.8559, 231.2947, 476.16, 628.2307, 459.375, 506.7972, 680.673, 848.64], [4037.5902, 178.85, 316.7762, 437.276, 519.671, 180.7611, 594.3005, 364.1549, 647.7926, 439.236, 850.7331, 509.5121, 408.6]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

