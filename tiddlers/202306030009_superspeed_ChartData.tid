created: 20230603000934000
creator: Drevarr
modified: 20230705163533284
modifier: drevarr
tags: ChartData
title: 202306030009_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Newtype Khan", "Melli Dragonswrath", "Venomina The Siren", "Pamtastic", "Cyclotechnist Farra", "Johosh Of The North", "Cat Wigglebooty", "Zadey Starbolt", "Drevarr Moonwillow", "Xanvias Tsoli"];
const professions = ["Tempest", "Spellbreaker", "Berserker", "Tempest", "Tempest", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Scrapper", "Holosmith"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.338, 0.436, 0, 0.604, 0.227, 0.783, 2.067, 0.486, 0.446, 0.102, 0.558, 0.365, 1.363, 0.299, 0.44, 0.366, 0.193, 0.753, 0.558, 0, 0.363, 0.18], [0, 0.503, 1.442, 0.514, 0, 1.458, 0, 0.345, 0.634, 0.906, 0.654, 0, 0.868, 0, 0.716, 0.48, 0.489, 0.241, 0, 0.307, 0, 0.303, 0.142], [1.271, 1.617, 0, 0.41, 0, 0.984, 0, 0.331, 0.626, 0.021, 0.617, 0.729, 0, 0.195, 0.709, 0, 0.888, 0, 0.99, 0.986, 0, 0.379, 0.417], [0.77, 0.673, 0.694, 0.457, 0.391, 0, 0.301, 0.47, 0.746, 0.37, 0.365, 1.366, 0.562, 0.577, 0.46, 0.372, 0.736, 0, 0.546, 0.359], [0.501, 0.594, 0.865, 0.55, 0.394, 0, 1.687, 0.487, 0.736, 0.633, 0.556, 0.353, 1.357, 0, 0.424, 0.608, 0.575, 0.569, 0.284, 0.759, 0, 0.543, 0.178], [0.73, 0.301, 0, 0.094, 0.227, 0.295, 1.085, 0.79, 0.444, 1.434, 1.075, 0, 1.727, 0, 1.302, 1.034, 1.406, 0.289, 0.461, 1.094, 0, 0.454, 0.403], [0.499, 1.009, 0.568, 1.259, 0.454, 0, 2.561, 0.702, 1.315, 1.164, 0.865, 0.357, 1.14, 0, 0.886, 0.864, 1.014, 0.579, 0.335, 1.101, 0.323, 1.142, 0.874], [1.507, 1.428, 0, 0.717, 0.672, 0.884, 0.544, 1.579, 1.24, 1.368, 1.03, 0.438, 1.714, 0.374, 1.14, 0.798, 0.548, 0.386, 0.761, 0.744, 0.807, 1.204, 1.345], [1.465, 1.523, 1.385, 0.813, 0.483, 1.088, 0.969, 1.271, 0.676, 1.238, 0.549, 2.424, 0.254, 0.715, 1.479, 1.299, 0.731, 0.778, 1.541, 0.162, 1.134, 0.807], [0.669, 1.476, 0.698, 1.544, 1.472, 0.892, 1.72, 1.589, 1.48, 1.721, 1.197, 0.866, 2.378, 1.176, 1.291, 1.702, 1.782, 1.268, 0.838, 1.857, 0.162, 1.388, 0.777], [15.811, 6.901, 6.463, 4.324, 5.421, 3.853, 9.016, 10.892, 3.977, 3.402, 3.81, 0, 6.366, 0, 0, 3.279, 4.559, 1.637, 5.695, 8.638, 0, 5.161, 2.722]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

