created: 20230215221053000
creator: Drevarr
modified: 20230705163519380
modifier: drevarr
tags: ChartData
title: 202302152210_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Call Me Ever", "Ark Darkness", "Raziel Umbra", "Arka\u00f1", "Black Raspberry Pie", "Kosair", "Zaylen Harker", "Primal Clone", "Bambiae", "Ryvalia Fazebringer", "Sygaldry Verdandi", "Grasszanine", "Sister Elon\u00edth", "Jeckyll Mbs", "Blanco Padre Guard", "Smol Daddy Tika", "Ravioli Fetabringer", "Bella Sassy", "Newtype Khan", "Xanvias Tseli", "Johosh The Great", "Domina Flagbringer"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[85.2962, 159.132, 2.2766, 32.1178], [12.2006, 30.4416, 55.4438, 0.0, 0.0, 52.9105, 0.0, 73.9746, 18.6303, 26.2759, 21.982], [52.1422, 38.144, 0.0, 0.0, 0.0, 0.0, 17.484, 20.2984, 0.0, 37.8534, 12.5026, 0.0, 31.6262, 32.616, 0.0, 36.6624, 0.0, 0.0, 26.3686, 13.739, 28.1893, 14.3101, 0.0, 13.9721], [6.6067, 33.0624, 33.5258, 26.754, 5.2565, 31.6122, 0.0, 32.8302, 11.8291, 0.0, 33.3302, 36.095, 0.0, 35.3117, 6.435, 6.4638, 19.7158, 6.479, 35.6706, 6.5504, 19.3895, 0.0, 9.0418], [136.2328, 241.38, 12.8563, 37.4314], [106.684, 6.9638, 55.6157, 55.8404, 41.8803, 6.001, 39.2102, 5.2029, 29.7206, 18.1829, 0.0, 25.0147, 20.8742, 29.5872, 6.8175, 6.8202, 18.711, 6.776, 31.9001, 5.1847, 20.9035, 6.4904, 13.1531], [74.75, 43.2758, 3.3953, 50.5747, 66.899, 1.7, 120.7286, 6.4125, 0.0, 41.7879, 25.795, 89.775, 7.293, 40.586, 0.0, 50.3685], [242.627, 402.3, 0.0, 26.9222], [146.7818, 233.632, 6.5174, 39.0845, 48.9412, 26.1366, 6.5198, 19.4665, 6.439, 25.5346, 12.971, 0.0, 19.4938, 32.616, 0.0, 28.4294, 6.435, 6.3018, 18.122, 7.986, 36.9873, 6.4709, 13.0891, 0.0, 6.1916], [165.77, 256.876, 6.696, 47.1139, 17.8948, 40.6455, 5.0309, 23.0159, 6.6974, 24.9366, 13.4102, 4.9942, 29.9222, 41.4586, 0.0, 33.7037, 6.6375, 13.1868, 16.736, 6.6, 40.5185, 3.3415, 20.8058, 6.5667, 11.5479], [183.5526, 243.764, 7.4549, 51.9552, 35.7896, 37.4556, 6.3394, 35.328, 0.0, 36.2986, 22.2821, 0.0, 32.7168, 43.633, 40.007, 7.3575, 14.6286, 19.1615, 14.608, 38.8426, 0.0, 29.7436, 7.2854, 13.5954], [161.5504, 285.484, 7.5888, 52.8998, 53.1454, 30.3555, 28.0646, 14.1978, 0.0, 63.7468, 33.672, 4.9153, 55.7549, 38.9942, 0.0, 77.184, 6.8625, 6.9336, 19.6465, 6.688, 27.4712, 6.9085, 17.8266, 30.172], [198.0198, 295.02, 0.0, 0.0, 0.0, 16.3611, 46.0224, 0.0, 0.0, 79.235, 44.9448, 0.0, 90.312, 14.2786, 109.7942, 0.0, 0.0, 0.0, 31.372, 64.7577, 0.0, 21.2454, 0.0, 43.3579], [15.8472, 113.9472, 43.4434, 121.1133, 25.2672, 66.1638, 11.8818, 96.6966, 45.6475, 14.9432, 100.3997, 103.9363, 110.1802, 6.2775, 26.487, 56.2716, 28.16, 125.3259, 10.0776, 49.0842, 0.0, 49.4185], [146.179, 367.732, 0.0, 5.904, 15.9544, 69.8691, 36.5923, 60.0632, 33.6343, 73.0158, 27.2597, 9.8305, 67.9555, 128.1446, 110.759, 59.7303, 0.0, 25.934, 0.0], [316.1686, 419.584, 35.8459, 68.6045, 68.8842, 53.7138, 14.8896, 59.8968, 7.4538, 7.6544, 52.909, 0.0, 12.4051, 33.9931, 1.734, 35.569, 6.93, 6.9498, 50.0346, 7.018, 77.6853, 5.2377, 57.6312, 11.8427], [186.868, 364.752, 0.0, 55.7338, 36.2208, 21.3003, 36.0509, 35.9935, 30.7746, 55.3748, 53.9338, 10.4819, 57.3226, 132.0586, 0.0, 123.3014, 4.185, 8.3268, 41.5107, 0.0, 84.987, 55.6288, 10.3673, 31.941], [253.7788, 379.056, 40.3992, 45.5789, 45.9228, 94.3593, 29.9822, 35.7162, 0.0, 62.3714, 58.8235, 7.5012, 39.3965, 63.9998, 0.0, 103.5552, 7.02, 7.1118, 42.377, 6.259, 105.336, 7.0676, 21.685, 11.5315], [276.9866, 435.08, 27.9893, 79.1136, 47.6476, 49.5978, 28.3128, 57.9557, 32.0108, 88.8628, 11.8291, 46.2125, 53.7802, 32.7389, 7.2, 33.0804, 44.2827, 7.403, 90.3735, 36.5323, 7.0894, 34.0213], [275.1782, 488.124, 20.713, 83.2464, 41.7186, 119.9814, 20.7552, 52.2988, 35.6408, 40.9334, 0.0, 62.2982, 61.1731, 0.0, 92.3635, 40.185, 20.2014, 40.9909, 18.843, 51.8301, 0.0, 56.5567, 0.0, 17.7559], [296.2762, 629.376, 18.7488, 72.1469, 127.4196, 118.4379, 27.3878, 47.862, 0.0, 91.0156, 65.9971, 7.8565, 81.1104, 150.3235, 144.8486, 23.535, 9.7524, 53.2917, 0.0, 68.7078, 13.6445, 80.0976, 9.703, 14.3653], [539.506, 749.768, 7.9459, 120.9139, 127.3118, 101.9739, 30.7718, 68.9368, 0.0, 77.0224, 31.3589, 0.0, 68.0237, 101.327, 111.0163, 30.8025, 7.3224, 61.1919, 26.279, 126.5828, 5.4499, 49.0354, 3.5828, 29.6969], [530.464, 464.284, 0.0, 0.0, 0.0, 0.0, 93.5789, 67.994, 0.0, 173.1808, 117.2957, 0.0, 171.9677, 255.7094, 146.0064, 54.9225, 31.3632, 150.381, 37.928, 216.7767, 0.0, 32.5274, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

