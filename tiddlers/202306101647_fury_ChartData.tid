created: 20230610164704000
creator: Drevarr
modified: 20230705163534889
modifier: drevarr
tags: ChartData
title: 202306101647_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Olou Lil Scapper", "Scintilla The Storm", "Lord Erin The Wise", "Zhavashian", "Tootsie Pop Rocks", "Lucky Leipreach\u00e1n", "Rosie Sunray", "Aronorf Xideliesi", "Kary\u00edna", "Duke Silvver", "Newtype Khan", "Seikers Sorrow", "Mistwalker Cael", "Cat Wigglebooty", "Sakis Ranger", "Arriasa", "Zayde Sunsabre", "Arcanophage Farra", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Tempest", "Weaver", "Tempest", "Scrapper", "Scrapper", "Vindicator", "Firebrand", "Vindicator", "Vindicator", "Spellbreaker", "Chronomancer", "Vindicator", "Scrapper", "Druid", "Druid", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 47.479, 190.3238, 187.2702], [52.4965, 39.27, 34.464, 16.5197, 32.9107, 0.0, 0.0, 0.0, 37.7577, 0.0, 0.0, 36.1674, 0.0, 52.0685, 34.4761, 0.0, 67.3764, 0.0, 0.0, 29.5049, 34.0986], [30.7665, 42.5964, 32.208, 37.0022, 31.1832, 12.006, 98.1642, 12.0899, 0.0, 39.8417, 4.0269, 28.2568, 0.0, 155.0323], [31.7921, 33.5782, 22.944, 23.6851, 32.0616, 0.0, 34.3575, 0.0, 19.0863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 58.8365, 26.2343, 0.0, 136.371, 29.155, 35.2173, 27.7556, 27.2195], [28.9863, 0.0, 87.792, 72.4378, 82.921, 0.0, 0.0, 0.0, 20.2556, 0.0, 0.0, 57.7656, 0.0, 0.0, 19.0026, 112.0781, 0.0, 0.0, 209.0433, 29.155, 0.0, 34.4612, 59.6354], [61.3327, 13.9844, 14.058, 13.8195, 36.9741, 0.0, 33.1181, 18.2376, 18.9488, 329.8206, 0.0, 20.039, 131.3141, 139.0669], [0.0, 20.79, 71.616, 33.6845, 33.3792, 0.0, 80.6111, 29.0233, 41.2657, 0.0, 0.0, 0.0, 0.0, 155.9347, 35.0042, 12.8124, 307.1657, 34.6944, 53.3434, 74.87, 79.2335], [0.0, 0.0, 91.584, 96.4915, 173.484, 0.0, 74.2055, 0.0, 75.2137, 0.0, 0.0, 0.0, 0.0, 0.0, 81.1258, 0.0, 23.8791, 307.0186, 0.0, 7.6518, 52.7706, 170.1961], [28.0769, 11.8826, 56.736, 36.3571, 37.4784, 17.8889, 108.4798, 38.9563, 43.5666, 23.7797, 11.1172, 31.9181, 41.9162, 40.1773, 38.8498, 157.1078, 2.961, 3.0682, 286.8645, 53.3953, 43.2141, 104.8997, 92.4473], [19.4467, 28.5516, 48.432, 42.624, 52.177, 42.2611, 118.213, 0.0, 40.0964, 26.3714, 14.8149, 16.5181, 22.5826, 36.0818, 20.8904, 118.3046, 36.4752, 3.3644, 324.6718, 54.8114, 62.9395, 116.7949, 76.0166], [31.7727, 68.5608, 167.472, 67.7837, 86.581, 43.3417, 180.1895, 36.9886, 43.9061, 43.7932, 41.0086, 102.5914, 58.7558, 83.5578, 5.4151, 317.1936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [25.0582, 45.5902, 86.64, 84.096, 39.0888, 20.8104, 78.6977, 43.3836, 49.1114, 0.0, 10.6297, 34.0587, 31.5973, 22.6054, 8.1972, 172.7194, 23.7447, 24.4081, 311.579, 21.1998, 24.0531, 161.2271, 114.6188], [24.7293, 10.2749, 87.168, 43.6838, 35.1946, 25.4527, 140.092, 0.0, 28.554, 0.0, 41.4391, 40.5662, 15.5813, 9.5882, 183.1872, 49.6018, 15.8383, 386.3109, 76.9692, 50.5523, 133.6465, 83.0937], [23.549, 46.2554, 82.56, 53.1533, 27.1426, 20.1876, 41.9069, 0.0, 71.3124, 0.0, 272.615, 76.6282, 67.2782, 615.9496, 166.7666, 98.6899, 190.4988, 141.6899], [38.5646, 13.7676, 134.544, 46.679, 112.3474, 0.0, 59.0649, 32.2018, 52.7703, 0.0, 18.2987, 0.0, 85.2509, 90.4675, 89.8214, 330.7296, 30.0628, 570.9339, 46.523, 114.3699, 115.6287, 226.4168], [50.4455, 171.984, 86.1926, 22.9262, 22.8514, 231.9337, 103.2019, 29.1662, 70.7054, 77.037, 49.0776, 7.2036, 434.6861, 45.2074, 25.8469, 614.3314, 81.5507, 45.817, 189.5658, 151.6868], [148.944, 94.6022, 167.5402, 52.8664, 271.033, 22.7797, 49.8658, 36.8828, 64.4112, 36.791, 92.092, 0.0, 331.4515, 144.6185, 79.5299, 653.6097, 71.1382, 149.4304, 316.2151, 201.7212], [0.4257, 136.8259, 217.68, 131.8118, 144.4675, 41.7409, 324.7738, 51.9732, 127.3804, 32.4121, 129.4933, 49.009, 1.5101, 459.1411, 159.0652, 79.7838, 863.5357, 286.552, 190.9824, 312.7165, 211.5697], [67.9185, 121.9865, 202.416, 146.0736, 168.2136, 89.0845, 249.6532, 127.7668, 175.2848, 27.3972, 99.3965, 183.795, 160.1371, 56.9333, 491.5373, 122.1562, 0.0, 810.5761, 83.6749, 139.1757, 371.2598, 346.6775]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

