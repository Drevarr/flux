created: 20230605220452000
creator: Drevarr
modified: 20230705163533680
modifier: drevarr
tags: ChartData
title: 202306052204_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Kary\u00edna", "Be\u00eb", "Mistwalker Cael", "Rozaalyna", "Cedryn X", "Sygaldry Verdandi", "Lord Erin The Wise", "Solus Sanctus", "Be\u00eb", "Sister Elonith", "Smol Gluvs", "Xanvias Einzbern", "Mildly Ecstatic"];
const professions = ["Tempest", "Vindicator", "Reaper", "Vindicator", "Scourge", "Berserker", "Firebrand", "Weaver", "Firebrand", "Scourge", "Berserker", "Scourge", "Berserker", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 22.0999, 91.3462, 13.449, 0.0, 0.0, 1.16, 0.0, 9.4078, 19.5775, 0.0, 32.8542, 14.1569, 0.0053, 0.0, 17.4], [0.0, 14.8034, 6.9231, 22.2272, 0.0, 3.4324, 0.0, 0.0, 33.8544, 72.6479, 6.3953, 4.5417, 31.8431, 7.5559, 2.3729, 30.0889], [0.0, 21.0811, 0.0, 128.7879, 41.0583, 88.8732, 0.7442, 23.875, 99.7631, 10.4681, 7.1186, 3.2], [0.0, 15.0752, 1.1923, 27.8444, 44.5, 159.8108, 0.0, 0.0, 21.6699, 65.6197, 4.9767, 9.3958, 25.16, 12.4548, 23.5932, 0.0], [3.1111, 16.9012, 35.5962, 94.8444], [5.5252, 14.0385, 18.5742, 10.9667, 41.8378, 0.0, 0.0, 42.8641, 57.1268, 0.0, 2.9583, 124.3785, 12.3085, 1.0169, 26.3778], [0.0, 38.9753, 157.6538, 39.3381, 0.0, 48.5405, 0.0, 0.0, 25.5146, 63.5352, 0.2326, 16.3958, 44.8369, 4.2766, 27.7288, 0.0], [37.6389, 30.493, 9.7692, 56.4669, 0.0, 0.0, 40.32, 14.7879, 123.5049, 62.8732, 20.8372, 27.6042, 67.5969, 4.3564, 3.4746, 0.0], [59.6389, 24.6262, 256.3269, 69.7048, 0.0, 0.0, 21.76, 0.0, 6.7087, 24.831, 0.0, 24.375, 80.1292, 4.8989, 27.1525, 6.2667], [24.1111, 67.4801, 234.5192, 166.7925], [7.0494, 42.6538, 113.6655, 9.4333, 4.2432, 0.0, 70.9091, 93.5825, 122.9859, 4.3023, 82.6042, 207.44, 14.8404, 64.1186, 26.9333], [0.0, 44.0977, 184.6154, 101.093, 0.0, 0.0, 3.32, 17.697, 65.6117, 69.9437, 15.1163, 4.625, 176.0431, 11.9521, 30.4915, 6.1778], [0.0, 88.0226, 44.5, 236.5188, 0.0, 8.4054, 17.96, 4.5758, 110.3883, 67.8169, 3.6744, 22.4167, 136.04, 29.6809, 25.661, 0.0], [31.5556, 116.6498, 155.5192, 126.8301, 33.2667, 305.1622, 0.0, 31.8182, 443.8835, 126.9718, 115.8837, 31.7083, 407.5938, 40.0319, 8.6271, 58.9778]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

