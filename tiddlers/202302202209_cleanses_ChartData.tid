created: 20230220220953000
creator: Drevarr
modified: 20230705163519679
modifier: drevarr
tags: ChartData
title: 202302202209_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Sofya De Meme", "Primal Clone", "Eibh\u00ebar", "Arka\u00f1", "Venomina The Siren", "Fribble Bibble", "Etchery Howls", "Mac Aaroni", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Scrapper", "Druid", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.136, 0.2175, 0.0, 0.069, 0.0, 0.023, 0.0, 0.0206, 0.0138, 0.0098, 0.0, 0.0625, 0.0667, 0.12, 0.0575, 0.2821, 0.037, 0.2051, 0.0521, 0.0633, 0.0181, 0.0333, 0.0413, 0.0692, 0.0377, 0.0, 0.0], [0.1136, 0.5455, 0.9778, 0.16, 0.1379, 0.7949, 0.1111, 1.0, 0.1354, 0.0127, 0.7195, 0.1444, 0.6033, 0.0755, 0.0566, 0.0968, 0.6486], [0.1213, 0.2658, 0.0, 0.1724, 0.0, 0.0115, 0.0, 0.1753, 0.131, 0.1471, 0.0795, 0.0795, 0.0, 0.0, 0.0805, 0.0, 0.0, 0.0, 0.0, 0.1176, 0.0, 0.1405, 0.0755, 0.0, 0.3548, 0.4505], [0.0, 0.1418, 0.2324, 0.1852, 0.0517, 0.0, 0.046, 0.0, 0.0412, 0.0759, 0.1961, 0.0682, 0.0511, 0.0222, 0.0, 0.0115, 0.4872, 0.1296, 0.0, 0.1458, 0.0, 0.181, 0.1556, 0.0992, 0.0943, 0.1132, 0.0323, 0.7027], [0.0, 0.2003, 0.317, 0.0741, 0.069, 0.0943, 0.069, 0.0, 0.1753, 0.0621, 0.1569, 0.1023, 0.0966, 0.1333, 0.24, 0.0115, 0.0, 0.7179, 0.0312, 0.0, 0.1991, 0.1333, 0.1983, 0.1069, 0.0566, 0.129, 0.1261], [0.0, 0.6053, 1.0928, 0.1111, 0.2069, 0.0, 0.0115, 0.0, 0.5052, 0.0069, 0.0882, 0.1591, 0.3239, 0.1111, 0.16, 0.1264, 0.0, 0.0926, 0.2821, 0.0, 0.0127, 0.3077, 0.1889, 0.405, 0.1698, 0.0189, 0.0968, 0.1081], [0.1231, 0.8026, 1.1559, 0.0556, 0.0, 0.0, 0.0, 0.0, 0.3505, 0.2552, 0.3824, 0.1477, 0.2386, 0.4, 0.0, 0.0345, 0.6923, 0.0, 0.7692, 0.0, 0.0633, 0.552, 0.3667, 0.3719, 0.0126, 0.0, 0.0, 0.1532], [0.0, 1.2208, 1.6021, 0.0741, 0.0, 0.0115, 0.134, 0.1724, 0.3529, 0.0, 0.3352, 0.5111], [0.1077, 1.1096, 1.7765, 0.3148, 0.1552, 0.0377, 0.0345, 0.0286, 0.3299, 0.2207, 0.0, 0.1818, 0.6761, 0.8, 0.046, 0.4872, 0.8704, 0.0, 0.0, 0.8326, 0.8556, 0.562, 0.4843, 0.1132, 0.0, 0.7477], [0.3846, 1.2325, 1.8337, 0.0741, 0.4655, 0.0377, 0.2299, 0.0571, 0.567, 0.3655, 0.4608, 0.5227, 0.7557, 0.8222, 0.0, 0.2759, 0.8462, 0.4074, 1.4872, 0.0104, 0.2785, 0.9774, 0.3222, 1.0165, 0.6352, 0.8113, 0.0323, 0.4865], [0.2462, 1.3333, 1.8493, 0.7593, 0.4655, 0.1509, 0.1724, 0.5429, 0.5876, 0.5655, 0.5784, 0.3636, 0.8693, 1.0222, 0.0, 0.3448, 0.3846, 0.2778, 1.3846, 0.25, 0.1139, 0.9729, 0.9111, 0.4793, 0.6541, 0.5094, 0.9032, 0.5946]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

