created: 20230429000309000
creator: Drevarr
modified: 20230705163527173
modifier: drevarr
tags: ChartData
title: 202304290003_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Be\u00eb", "Khailerian", "Blancooo Padreee", "Tika Rucola", "Panther B Me", "Cyclotechnist Farra", "Demon Sekhmet", "Venomina The Siren", "Aronorf Xideliesi", "Primal Clone", "Miphest\u00f6", "Cat Wigglebooty", "Badd Sain", "Kos\u00e4ir", "Smol Gluvs", "Air One Com", "Newtype Khan", "Johosh The Great", "Xanvias Tsoli", "Drevarr Moonwillow", "Viral Marketing", "Bella Sassy", "Endless Endings"];
const professions = ["Scourge", "Vindicator", "Spellbreaker", "Chronomancer", "Scourge", "Scrapper", "Spellbreaker", "Tempest", "Firebrand", "Chronomancer", "Tempest", "Scrapper", "Willbender", "Herald", "Scourge", "Firebrand", "Spellbreaker", "Firebrand", "Holosmith", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[239, 328, 720, 694, 1526, 522, 527, 631, 1131, 479, 1031, 848, 411, 1984], [428, 737, 466, 596, 332, 680, 857, 388, 1722, 356, 658, 969, 1507, 3847], [376, 392, 599, 497, 273, 469, 2321, 1146, 1235, 405, 1341, 1623, 534, 4476], [328, 311, 389, 967, 5810, 474, 1012, 960, 1346, 818, 664, 771, 838, 1869], [274, 398, 1253, 743, 807, 468, 414, 706, 1027, 362, 1001, 1617, 976, 5679], [466, 466, 1005, 649, 8852, 517, 1101, 1175, 1521, 5544, 1191, 1299, 730, 684], [311, 375, 479, 1959, 6278, 626, 468, 641, 2565, 517, 30691, 780, 419, 5601], [394, 391, 362, 1480, 3433, 430, 4552, 687, 4307, 769, 1593, 998, 424, 15206], [617, 939, 738, 447, 10040, 1028, 2438, 1287, 4328, 5051, 977, 2534, 707, 19675], [233, 381, 1006, 8401, 544, 745, 847, 2156, 667, 1066, 1931, 430, 5234], [250, 470, 952, 9959, 1057, 3432, 1308, 2057, 179, 1803, 676, 482, 11235], [310, 429, 852, 283, 585, 897, 482, 3566, 235, 845, 512, 410, 36537], [14194, 1031, 1787, 1006, 940, 393, 1044, 1010, 483, 7656], [8235, 803, 1295, 1009, 1275, 182, 1118, 687, 586], [322, 294, 971, 550, 6664, 386, 1123, 391, 667, 294, 650, 533, 409, 4949], [261, 240, 825, 6591, 517, 1069, 474, 2907, 297, 527, 705, 651, 1840], [262, 277, 721, 361, 222, 423, 1384, 579, 1198, 306, 1341, 1575, 943, 4971], [347, 301, 850, 393, 509, 358, 553, 686, 949, 484, 564, 812, 267, 710], [247, 430, 3674, 268, 512, 565, 789, 219, 653, 419, 349, 6521], [211, 254, 453, 350, 187, 280, 501, 516, 1212, 513, 572, 1526, 266, 1910], [817, 273, 278, 1165, 829, 1860, 294, 537, 501, 310], [194, 199, 236, 468, 2677, 209, 420, 340, 1107, 149, 431, 495, 351, 1769], [252, 224, 470, 283, 647, 194, 617, 651, 379, 1395]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

