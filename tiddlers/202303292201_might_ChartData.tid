created: 20230329220116000
creator: Drevarr
modified: 20230705163523332
modifier: drevarr
tags: ChartData
title: 202303292201_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Plum Crazybringer", "Grasszanine", "Bura Beignetbringer", "Big Macbringer", "Charred Fishbringer", "Zaylen Harker", "Gavann", "Bork Borkbringer", "Ravioli Fetabringer", "Bubble Teabringer", "Band Aidbringer", "Spicy Gyrosbringer", "Johosh The Great", "Arkintor", "Bella Lunabringer", "Newtype Khan", "Domina Flagbringer", "Abigail Ryn"];
const professions = ["Scrapper", "Spellbreaker", "Firebrand", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Spellbreaker", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.271, 3.0576, 70.0582, 9.5357, 97.6288, 18.2242, 9.57, 8.6978, 2.2356, 1.0584], [69.7349, 84.2734, 36.63, 7.3226, 23.3928, 25.1517], [0.5821, 1.3272, 113.0594, 18.0365, 91.5649, 20.7646, 2.178, 1.8753, 0.0, 0.0], [0.0, 0.0, 114.0258, 28.1635, 149.1719, 5.6329, 1.716, 2.1075, 4.7952, 0.0], [3.6779, 0.0, 128.0374, 7.2442, 147.9592, 18.2242, 3.366, 0.0, 0.162, 3.6162], [0.7938, 0.0, 135.2848, 4.583, 185.5553, 18.666, 0.0, 0.0, 0.0, 4.1601], [2.5666, 0.0, 175.3871, 24.985, 121.278, 20.9855, 4.917, 0.0, 3.1104, 5.2479], [0.0, 0.0, 138.6669, 12.4186, 178.885, 38.6575, 0.0, 9.7873, 2.2197], [6.3504, 2.5872, 164.2744, 19.5888, 178.885, 28.2752, 0.0, 2.4624, 2.8371], [2.1697, 0.0, 156.5438, 14.4144, 189.1937, 32.8036, 0.0, 7.5168, 3.2781], [8.8376, 5.6616, 182.6345, 14.784, 189.8001, 23.1945, 7.656, 4.6079, 8.6508, 6.027], [10.2136, 2.1672, 215.4894, 35.1859, 213.4493, 28.4961, 0.0, 0.0, 5.184, 4.6893], [1.9051, 2.8392, 201.9609, 19.1453, 247.4071, 45.5054, 2.574, 0.5894, 6.966, 4.9833], [39.3725, 2.688, 284.5812, 43.391, 197.6831, 7.326, 0.0, 4.7952, 3.0135], [6.615, 1.8984, 266.7043, 47.5306, 221.9387, 63.5088, 6.468, 0.0, 5.508, 3.5574], [21.2738, 8.316, 348.8415, 44.4998, 395.3663, 62.4042, 15.51, 8.6442, 9.396, 10.4076], [17.3842, 18.5472, 601.5342, 89.665, 805.8923, 91.6735, 5.973, 1.0537, 4.9686], [36.356, 23.6712, 875.9691, 126.1075, 822.8712]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

