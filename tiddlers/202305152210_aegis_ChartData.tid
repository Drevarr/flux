created: 20230515221048000
creator: Drevarr
modified: 20230705163530129
modifier: drevarr
tags: ChartData
title: 202305152210_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Venom The Ferocious", "Ark Darkness", "Sub Train", "Drevarr Moonwillow", "Gavann", "Etcherii", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy", "Solus Sanctus"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.8991, 0.0, 0.0, 0.0, 13.6507, 48.0192, 50.9808, 0.0, 11.2622, 0.0, 0.0, 0.0, 16.5722, 37.7161, 29.8368, 22.8735, 28.8374, 50.2656, 17.5171, 0.0, 24.1279, 0.0, 21.691, 25.2986, 22.3105], [2.3712, 0.0, 0.0, 8.7779, 21.7214, 78.2136, 0.0, 13.6215, 0.0, 27.1152, 57.213, 33.6586, 61.2, 50.4384, 0.0, 75.4143, 0.0, 3.4381, 16.117], [0.0, 0.0, 94.9027, 0.0, 102.6292, 78.4704, 138.0038, 19.0357, 75.3571, 53.9213, 55.2744, 0.0, 40.7838, 0.0], [14.0719, 0.0, 0.0, 0.0, 44.2714, 61.6512, 18.3295, 24.6371, 10.4341, 13.7918, 20.8224, 15.7271, 49.6358, 0.0, 12.6504, 86.112, 23.7038, 89.9232, 53.5056, 0.0, 57.5806, 39.5303, 24.0663, 0.0, 42.228], [1.0246, 9.211, 20.39, 0.0, 51.8128, 107.9846, 211.2739, 0.0, 18.5494, 16.5106, 6.8472, 8.4501, 66.693, 16.7015, 20.4876, 84.708, 30.3552, 71.0736, 77.2253, 17.6476, 69.7612, 0.0, 57.2592, 20.8481, 68.339], [367.383, 0.0, 26.5464, 61.6772, 273.5923, 316.1686, 99.2616, 29.1384, 13.6558, 107.113, 25.8791, 51.2064, 152.451, 35.8013, 224.0736, 61.344, 6.6524, 45.4001, 16.465, 0.0, 0.0, 0.0], [0.0, 507.813, 116.1204, 171.5472, 535.7643, 888.0038], [58.906, 202.491, 0.0, 62.3376, 265.3413, 506.4269, 268.1827, 157.7948, 13.5861, 209.0124, 29.7643, 78.2352, 30.6844, 90.6216, 44.1697, 23.3856, 183.222, 161.9093, 121.0944, 92.6294, 28.7513, 123.6702, 162.9471, 107.2672, 80.0101, 123.165], [58.3823, 222.574, 24.4279, 15.336, 170.484, 564.5184, 611.2954, 103.1385, 41.1378, 203.7126, 32.3698, 77.0904, 11.4746, 125.302, 63.9195, 63.1008, 184.626, 115.573, 207.0192, 103.8758, 33.1731, 133.7526, 79.3445, 149.3989, 121.8982], [164.7182, 233.144, 35.112, 76.032, 342.1638, 615.5827, 549.1699, 70.4807, 433.7588, 100.621, 42.984, 83.0532, 115.0757, 90.9013, 42.462, 182.9295, 55.2643, 189.2304, 121.3248, 33.1632, 145.1172, 192.2577, 95.7028, 39.9358, 21.7474], [219.252, 159.7345, 74.3904, 251.0928, 638.0698, 535.417, 117.0956, 69.3119, 489.0759, 73.6037, 85.644, 102.6663, 154.9299, 56.039, 98.6832, 130.338, 91.3334, 166.056, 121.1885, 45.3132, 168.3126, 51.5952, 86.5138, 135.0592]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

