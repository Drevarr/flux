created: 20230515221048000
creator: Drevarr
modified: 20230705163530368
modifier: drevarr
tags: ChartData
title: 202305152210_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Arriasa", "Demon Sekhmet", "Sheep Poh", "Tootsie Pop Rocks", "Fribble Bibble", "Newtype Khan", "Drevarr Moonwillow", "Rosetendril", "Tika Mi", "Artakama Nahid"];
const professions = ["Spellbreaker", "Druid", "Spellbreaker", "Tempest", "Scrapper", "Scrapper", "Spellbreaker", "Scrapper", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[41.064, 67.6944, 0.0, 95.2699, 36.3865, 68.9472, 105.3, 80.3966, 153.408, 210.8189, 36.3808, 207.7099, 116.1779, 88.1391, 0.0, 43.5652], [0.0, 0.0, 0.0, 52.8336, 161.6161, 6.3245, 478.9824, 0.0, 0.0, 77.2286, 72.3816, 0.0, 78.334, 0.0, 42.6636, 81.783, 0.0, 79.7232, 76.5437, 0.0, 110.324, 0.0, 0.0, 0.0, 47.5769], [0.0, 587.1091, 24.5612, 269.2981, 55.932, 15.12, 58.5277, 117.0563, 93.7227, 65.9988, 84.4155, 67.585], [570.2208, 401.735, 64.2044, 432.3793, 65.9311, 27.0043, 0.0, 0.0], [0.0, 49.377, 0.0, 0.0, 72.6376, 423.5059, 646.3891, 6.0166, 91.4222, 0.0, 47.7144, 21.6294, 116.1671, 0.0, 100.4472, 126.4185, 2.9462, 72.8688, 87.5856, 0.0, 39.6304, 0.0, 5.9384, 0.0, 119.646], [208.229, 0.0, 10.4112, 78.2174, 627.0605, 716.1024, 12.6103, 0.0, 15.5683, 86.4043, 51.7104, 8.4685, 169.9661, 41.251, 88.4268, 205.2765, 61.4693], [65.5548, 96.64, 78.4252, 0.0, 281.1841, 194.8877, 478.271, 0.0, 0.0, 247.9331, 70.8, 73.764, 0.0, 55.5371, 64.1465, 57.4056, 159.9975, 47.4077, 140.5968, 207.3427, 32.7388, 174.7817, 0.0, 95.4528, 0.0, 205.6504], [77.2814, 657.605, 0.0, 72.3384, 296.6283, 972.7987, 1417.7405, 0.0, 432.9307, 111.8357, 80.46, 24.6172, 165.0349, 132.9954, 61.8912, 276.4125, 37.7208, 270.096, 187.3718, 10.8767, 212.2558, 322.7006, 233.6624, 71.2871, 186.1551], [446.809, 62.1482, 88.5168, 513.3453, 1016.3674, 1025.7811, 41.0315, 54.815, 696.7633, 156.9778, 65.6208, 28.4298, 199.0281, 211.9949, 99.0108, 342.5175, 220.0752, 285.1104, 146.4758, 11.7354, 182.7078, 328.733, 253.228, 83.7881, 112.5376], [573.347, 109.7501, 107.9352, 488.7342, 1753.2864, 1767.2554, 32.4964, 7.4837, 587.6198, 191.783, 140.8104, 67.6927, 284.0313, 143.0487, 31.9788, 183.0686, 473.28, 375.4253, 56.1899, 288.1363, 423.1231, 342.0547, 48.8962, 297.637], [235.6467, 807.095, 95.2288, 681.7369, 1546.2182, 1872.2995, 132.5917, 38.7697, 760.6927, 257.4571, 151.3944, 129.2998, 341.1852, 248.1219, 180.9612, 546.2145, 198.9605, 610.8576, 414.2083, 58.8252, 548.4731, 260.8148, 383.3738, 88.8518, 334.1642]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

