created: 20230610164704000
creator: Drevarr
modified: 20230705163534949
modifier: drevarr
tags: ChartData
title: 202306101647_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Scintilla The Storm", "Trolit\u00e1", "Cat Wigglebooty", "Air One Com", "Tegan Parker", "High Sorcer Baradun", "Koralia Danai", "Aronorf Xideliesi", "Grasszanine", "Blanco Padre Guard", "Gestern Yesteryear", "Drevarr Moonwillow", "Venomina The Siren", "Solus Sanctus", "Sakis Ranger", "Tomitigas", "Bella Sassy", "Newtype Khan", "Zayde Sunsabre", "Arcanophage Farra"];
const professions = ["Tempest", "Tempest", "Scrapper", "Firebrand", "Tempest", "Tempest", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Druid", "Tempest", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.2377, 1.2566, 1.392, 1.2442, 4.1285, 4.4022, 8.9845, 2.4407, 5.2431, 0.0, 0.3329, 2.588, 5.44, 16.0627, 6.1861, 6.5596, 14.2697, 7.4554, 0.0, 3.382, 0.0], [1.4438, 9.166, 0.0, 61.9333, 0.4998, 0.0, 12.4783, 11.5312], [1.0643, 2.9753, 4.032, 2.857, 1.8154, 1.0784, 2.7536, 0.0, 3.1311, 0.0, 17.687, 2.8856, 3.6713, 26.774, 8.2467, 5.5507, 8.5716, 5.4934], [0.0, 3.5297, 0.192, 2.8339, 6.2659, 0.0, 6.4056, 0.2081, 0.943, 0.0, 0.0, 0.2974, 0.0, 2.5337, 18.1382, 3.2439, 3.6078, 32.2171, 11.4954, 8.9062, 14.4026, 6.3347], [0.0, 2.0698, 12.576, 3.7786, 3.4258, 0.0, 0.0, 0.0, 12.2967, 0.0, 0.0, 1.885, 0.0, 0.0, 20.9898, 9.024, 9.166, 5.2265, 18.683, 10.5375, 5.0803, 5.4228, 3.6128], [12.6551, 0.0, 72.0839, 0.0, 0.0, 24.4902, 26.5266], [0.0, 5.3038, 0.864, 1.7741, 0.8491, 0.0, 11.0643, 1.7406, 5.0545, 0.0, 0.0, 1.246, 1.8533, 0.0, 22.2893, 2.8101, 4.5177, 41.9263, 14.7857, 5.3939, 15.8603, 3.1179], [0.0, 8.279, 2.928, 2.304, 6.6173, 0.7204, 6.7384, 0.0, 2.7536, 0.0, 0.0, 1.3419, 0.0, 0.0, 16.2432, 7.2045, 6.1681, 36.0419, 14.3693, 13.0458, 16.3268, 6.4832], [7.2756, 5.3592, 42.576, 26.7494, 30.539, 11.8059, 34.2743, 10.406], [5.418, 0.6838, 13.488, 1.7971, 3.6014, 0.0, 22.0454, 1.6839, 7.0536, 0.6734, 0.0, 5.2717, 0.9381, 6.6123, 10.7309, 17.687, 6.9971, 3.1528, 30.746, 14.9107, 6.711, 26.8809, 2.1281], [1.9737, 4.7863, 20.64, 7.1424, 6.6173, 5.8429, 12.0625, 0.0, 12.0704, 0.0, 0.0, 7.6041, 1.8533, 0.0, 5.0922, 35.735, 0.0, 4.1897, 57.3729, 18.0761, 8.3731, 9.971, 8.6608], [4.4699, 7.9649, 10.896, 7.0963, 10.4237, 8.9645, 10.5651, 5.3544, 7.808, 0.9005, 6.4859, 9.2206, 7.8707, 3.3286, 23.1014, 3.9417, 0.0, 42.0735, 16.5767, 12.7008, 18.8924, 14.649], [0.0, 0.0, 5.1379, 18.5342, 0.0, 30.0316, 8.2984, 0.0, 0.0, 23.3376, 0.0, 9.2947, 18.9166, 9.9558, 37.9544, 7.1222, 23.2378, 40.1173, 25.8338], [1.7221, 9.7574, 8.976, 2.9261, 10.0138, 2.6413, 10.3156, 3.065, 11.1274, 2.5682, 3.9713, 5.5273, 4.4616, 9.1749, 0.0, 32.3962, 2.8479, 8.7814, 51.1943, 21.7829, 13.3907, 27.5223, 15.8368], [15.1124, 14.6916, 29.664, 9.6307, 14.8742, 0.0, 11.0643, 0.0, 7.6949, 0.0, 0.0, 0.0, 3.1803, 2.7914, 1.5649, 53.4221, 3.2439, 99.8877, 0.0, 0.0, 6.3558, 32.5149], [0.0, 15.7634, 37.776, 10.1606, 0.0, 15.4877, 14.891, 0.0, 5.3185, 0.5246, 1.4862, 0.0, 0.0, 0.0, 0.0, 15.7018, 8.2418, 1.788, 72.8194, 16.5351, 22.4851, 42.2164, 27.3185], [0.0, 8.0203, 8.64, 11.7274, 6.8808, 3.0015, 23.7923, 4.1435, 3.2062, 0.0, 10.7033, 2.1278, 5.8115, 4.1483, 36.5472, 0.7921, 8.7073, 65.1697, 32.3204, 31.4541, 30.4961, 11.2837], [7.5852, 14.784, 33.36, 14.8147, 8.6083, 4.8824, 28.8669, 8.9492, 16.6345, 8.6521, 6.7535, 15.1123, 8.2597, 17.4346, 4.1234, 72.4627, 9.6375, 6.9934, 98.7108, 19.9087, 19.3491, 51.3128, 39.5425], [37.248, 31.6109, 49.2197, 2.7214, 87.4327, 5.203, 12.7494, 4.9938, 10.4157, 16.7024, 17.0914, 0.0, 98.7226, 33.0804, 19.2133, 209.3375, 12.8698, 37.2243, 74.4619, 52.2614], [1.4125, 25.5948, 39.888, 29.4682, 39.4402, 6.2031, 73.8727, 24.9555, 30.5155, 6.0282, 42.4615, 9.9528, 3.7066, 102.3322, 22.5188, 10.9397, 251.9994, 54.5615, 29.4157, 89.0977, 56.5176]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

