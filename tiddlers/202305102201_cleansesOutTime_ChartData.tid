created: 20230510220110000
creator: Drevarr
modified: 20230705163529435
modifier: drevarr
tags: ChartData
title: 202305102201_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Demon Sekhmet", "River No Hug", "Sumatra Satyricon", "Miphest\u00f6", "Primal Clone", "Eibh\u00ebar", "Black Raspberry Pie", "Venomina The Siren", "Zaidy Sagemist", "Mac Aaroni", "Tegan Parker", "Etchery Howls", "Artakama Nahid", "Tribal S", "Johoshua", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Scourge", "Soulbeast", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Vindicator", "Tempest", "Tempest", "Druid", "Tempest", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 9.0082, 25.0273, 11.0118, 27.0284, 0.0, 9.8718, 0.0, 2.0, 0.0, 7.9615, 15.0, 3.0, 3.0, 9.014], [0.0, 12.0638, 9.0082, 12.215, 0.0, 44.5109, 1.9928, 10.8718, 0.0, 0.0, 14.3143, 1.9872, 12.9953, 7.0093], [0.9615, 0.0, 12.0136, 16.0171, 2.0, 51.7795, 3.0217, 0.0, 0.0, 1.0, 0.0, 0.0, 9.0094, 0.0, 0.0, 6.0056], [1.0, 35.218, 46.198, 10.1059, 55.2336, 0.9928, 0.0, 0.0, 24.6571, 0.0, 32.0307, 1.0, 10.0225], [0.0, 5.0, 30.0681, 63.959, 0.0, 63.1266, 0.9928, 25.6923, 0.0, 0.0, 23.1143, 36.2179, 26.9976, 4.0, 3.0, 10.0084], [0.9615, 2.0, 23.0218, 3.0, 14.0118, 73.2969, 2.9855, 25.8205, 0.0, 1.0, 52.2286, 52.1282, 59.0094, 8.0093, 19.1429, 10.0084], [3.3462, 0.0, 47.0545, 40.1638, 0.0, 74.4891, 0.9928, 23.9744, 0.0, 0.0, 60.2857, 35.859, 33.2028, 0.0, 1.0, 16.014], [22.0572, 28.0444, 8.0, 82.7533, 0.0, 32.2051, 0.0, 23.5429, 48.1667, 50.4009, 7.0093, 23.0225], [0.0, 8.0, 65.1662, 67.6587, 8.0, 125.2729, 27.3077, 1.0, 11.0, 19.8974, 78.1863, 17.0374, 4.0238, 33.0955], [1.9615, 8.383, 91.5504, 80.0922, 21.0118, 128.1594, 0.9928, 36.8974, 0.0, 3.0093, 63.1429, 49.9359, 97.6509, 9.0093, 0.0, 55.1657], [3.0, 122.2125, 92.3345, 16.0, 164.5131, 0.0, 32.9487, 3.0093, 53.8857, 20.359, 96.4057, 12.1121, 0.0, 46.5309], [0.0, 111.0872, 123.2048, 0.0, 211.2118, 9.0, 53.6667, 4.0093, 64.0857, 63.5641, 106.4292, 16.0467], [10.8462, 10.2128, 150.3052, 143.0512, 29.2353, 212.9323, 3.9855, 55.9744, 0.0, 4.0093, 34.1714, 51.5, 117.4646, 22.0748, 38.0, 71.1067], [8.8462, 12.0, 147.8093, 157.8396, 9.0, 233.8624, 0.0, 21.8718, 4.0345, 4.0093, 95.5143, 69.5513, 106.3325, 23.0467, 32.3095, 49.1629], [23.3846, 47.3404, 151.5695, 141.9761, 51.6353, 212.4236, 0.9928, 81.1795, 10.1724, 1.0, 58.0286, 50.1282, 159.9976, 44.5234, 52.7857, 84.6798], [36.3462, 42.1915, 174.1253, 194.7338, 38.2, 232.1092, 8.0725, 75.0769, 9.4828, 13.037, 77.5714, 58.9103, 154.9269, 40.2243, 62.2857, 76.3567]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

