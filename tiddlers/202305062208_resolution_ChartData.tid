created: 20230506220820000
creator: Drevarr
modified: 20230705163528964
modifier: drevarr
tags: ChartData
title: 202305062208_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Sub Train", "Husky Guard", "Audrinafa", "Aronorf Xideliesi", "Ever Moore", "Sygaldry Verdandi", "Ark Darkness", "Lil Red Robin", "Koralia Danai", "Bella Sassy", "Jupi Jupi Jupi"];
const professions = ["Firebrand", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[36.864, 249.4346, 439.9181, 408.7238, 197.2595], [83.726, 377.325, 101.6964, 46.512, 30.1514, 39.5136, 96.5261, 310.772, 0.0, 25.447, 167.0592, 0.0, 0.0, 60.5853, 26.673], [185.5913, 729.12, 418.5216, 880.3525, 0.0, 242.4946, 717.6088, 0.0, 3.042, 204.2844, 75.8746], [81.627, 793.1372, 434.6082, 61.848, 318.9885, 341.1341, 172.247, 1021.6125, 82.3997, 397.9589, 0.0, 3.641, 222.8673, 72.7274], [684.9024, 538.6349, 1188.0975, 211.6092, 46.5102, 722.6802, 9.1022, 83.5754, 317.6272, 224.2274], [585.149, 950.6074, 66.744, 224.7653, 264.7411, 388.6445, 1614.9045, 85.2095, 35.8538, 429.73, 0.0, 13.7873, 101.8876, 124.1414], [208.0322, 1100.0282, 612.8967, 42.696, 270.3351, 276.7834, 302.521, 1096.2785, 0.0, 123.1006, 406.9085, 0.0, 54.1102, 347.8562, 78.6478], [32.616, 379.634, 676.8115, 518.3136, 2072.486, 60.9932, 255.5388, 584.2597, 0.0, 21.0694, 273.7793, 229.805], [632.376, 1845.6223, 690.9279, 255.168, 427.0312, 701.6486, 626.089, 2516.446, 0.0, 231.8382, 750.424, 64.2449, 17.7185, 309.354, 103.7628], [749.4525, 1719.5958, 579.7974, 116.856, 416.7523, 983.8886, 504.4032, 2337.3485, 34.3158, 233.2638, 882.4306, 44.0294, 56.8433, 333.1554, 188.4557], [693.8295, 2081.5763, 1260.3318, 222.408, 620.9598, 791.9654, 677.497, 3148.08, 40.0303, 279.2394, 881.3864, 186.9399, 40.0514, 411.369, 127.0705]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

