created: 20230303232222000
creator: Drevarr
modified: 20230705163521132
modifier: drevarr
tags: ChartData
title: 202303032322_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mac Aaroni", "Venomina The Siren", "Delynai", "Zadie Miststep", "Grasszanine", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Scrapper", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[114.4889, 762.5826, 41.1091, 69.7049], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 29.1156, 20.9496, 214.9871, 31.1141, 0.0, 344.3264, 27.2391, 0.0, 0.0, 176.3258, 0.0, 246.1606, 61.824, 0.0, 236.8685, 0.0, 52.8264, 7.7959], [770.7356, 211.5926, 0.0, 706.8672, 0.0, 45.936, 298.4716], [25.073, 141.9687, 0.0, 0.0, 0.0, 0.0, 22.4808, 31.476, 208.5338, 31.6037, 50.9437, 293.6352, 54.928, 31.588, 0.0, 131.1586, 351.4369, 94.5134, 0.0, 0.0, 495.1469, 65.2482, 87.0408, 63.0831], [0.0, 16.7994, 0.0, 0.0, 0.0, 0.0, 0.0, 66.7128, 147.9372, 219.0434, 118.6056, 72.6375, 635.392, 0.0, 0.0, 51.5091, 212.4596, 319.9572, 128.3621, 13.8953, 63.756, 365.6678, 129.4902, 137.7288, 0.0], [17.6079, 81.5184, 0.0, 0.0, 0.0, 52.5399, 0.0, 0.0, 340.1811, 75.6922, 18.8663, 823.9072, 0.0, 0.0, 0.0, 477.0351, 0.0, 654.8801, 137.0947, 0.0, 0.0, 1194.1978, 202.0914, 69.696, 170.237], [56.5189, 427.1454, 0.0, 0.0, 93.5112, 55.7634, 179.3824, 123.6216, 104.3868, 487.8695, 84.3581, 138.06, 746.352, 108.3566, 79.1931, 0.0, 397.4714, 0.0, 786.9915, 198.6869, 64.4877, 0.0, 1381.1098, 121.9824, 270.6264, 177.0783], [41.7534, 390.5172, 5.3948, 10.6938, 10.8281, 0.0, 160.6601, 102.8736, 267.7524, 1183.7196, 149.5483, 194.3175, 1390.1536, 169.0324, 0.2927, 0.0, 1045.7944, 0.0, 1069.2763, 403.0152, 0.0, 59.1696, 1666.9152, 500.0814, 515.1168, 290.5962]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

