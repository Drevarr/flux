created: 20230215221053000
creator: Drevarr
modified: 20230705163519287
modifier: drevarr
tags: ChartData
title: 202302152210_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Raziel Umbra", "Tegan Parker", "Arka\u00f1", "Primal Clone", "Black Raspberry Pie", "Zadie Miststep", "Bambiae", "Mac Chiato"];
const professions = ["Chronomancer", "Scrapper", "Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[119.6558, 126.948, 32.3194, 9.3283, 71.687, 46.8195, 37.2917, 44.8671, 0.0, 58.3648, 35.5752, 0.0, 56.5728, 0.0, 56.9875, 23.8725, 0.0, 0.0, 27.555, 50.5732, 0.0, 0.0, 0.0, 0.0], [212.1856, 196.084, 0.0, 44.5162, 47.5398, 26.754, 34.7198, 81.1934, 0.0, 47.541, 27.4939, 3.2176, 40.2826, 31.2389, 47.3395, 5.355, 9.2178, 13.9293, 4.466, 33.097, 0.0, 24.6642, 0.0, 20.9664], [186.868, 229.46, 0.0, 63.9994, 19.0806, 25.4163, 29.5987, 54.2399, 0.0, 48.7968, 30.1584, 21.9114, 30.1267, 27.6874, 0.0, 62.4547, 19.935, 3.5802, 38.1496, 24.343, 64.8175, 0.0, 20.0244, 8.059], [33.3907, 0.0, 64.7878, 121.5249, 74.5834, 78.9196, 0.0, 149.8588, 109.2144, 3.7309, 82.3373, 46.1698, 8.4575, 132.2419, 0.0, 0.0, 57.4151, 14.531, 185.7146, 0.0, 49.0842, 0.0, 64.4717], [574.4684, 783.144, 0.0, 181.9613, 0.0, 175.4445, 33.5242, 82.469, 28.405, 58.6478, 4.402, 80.2243, 124.5206, 0.0, 162.7939, 0.0, 0.0, 107.3457, 24.464, 124.7274, 0.0, 51.9658, 9.3857], [1075.3952, 1468.544, 91.4227, 99.7776], [506.0506, 870.756, 0.0, 61.1654, 91.9534, 123.48, 51.6398, 74.5937, 30.7746, 96.1584, 97.8245, 25.8989, 113.4182, 122.2738, 0.0, 179.7744, 0.0, 28.2204, 100.9008, 52.943, 141.0665, 1.5514, 31.0622, 0.0, 0.0], [680.632, 92.5834, 239.112, 318.01, 443.7048, 100.6627, 89.9561, 25.9776, 189.3268, 117.7642, 32.8079, 119.3482, 69.6533, 163.3728, 93.69, 32.0112, 91.0602, 26.917, 147.7697, 50.9847, 69.9877, 32.4413, 20.8354], [755.3084, 1218.224, 40.801, 214.3152, 171.941, 253.4427, 39.5477, 66.3302, 0.0, 135.148, 100.6939, 58.687, 111.9869, 84.8741, 10.4465, 152.4384, 0.0, 0.0, 120.2008, 8.723, 100.548, 39.7402, 2.735, 0.0, 17.9852], [681.4654, 1360.668, 63.8798, 105.6816, 152.7526, 343.9947, 52.8806, 161.9987, 31.8447, 172.4632, 106.5206, 66.0106, 158.9491, 161.123, 25.5935, 157.1338, 71.415, 37.7946, 110.2216, 0.0, 172.4279, 23.4039, 95.531, 16.433, 46.339], [1048.2692, 2270.164, 95.2171, 316.8086, 218.4028, 363.237, 62.1302, 294.5481, 110.2712, 125.7576, 64.1353, 285.863, 279.9178, 204.1517, 128.43, 50.2038, 30.3188, 21.747, 191.6995]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

