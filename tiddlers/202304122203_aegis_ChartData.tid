created: 20230412220340000
creator: Drevarr
modified: 20230705163525298
modifier: drevarr
tags: ChartData
title: 202304122203_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Fribble Bibble", "Sub Train", "Belvyn Brightblade", "Drevarr Moonwillow", "Johoshua", "Ark Darkness", "Sister Elon\u00edth", "Gavann", "Lucas Ryn", "Sygaldry Verdandi", "Koralia Danai", "Solus Sanctus", "Bella Sassy"];
const professions = ["Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[22.1455, 0.0, 0.0, 45.1731, 19.8391, 27.7556, 72.3946, 0.0, 144.13, 21.846, 3.3946, 0.0, 29.9117, 7.848, 37.3481, 0.0, 0.0, 0.648, 0.1512, 50.0688], [76.7487, 20.9725, 0.0, 74.1909, 15.5879, 5.1862, 74.0615, 56.55, 2.64, 22.5869, 0.0, 6.2726, 2.9299, 0.0, 4.751, 0.0, 2.255, 5.8968, 131.328], [84.3559, 0.0, 0.0, 45.6876, 0.0, 51.3814, 73.5853, 0.0, 57.13, 50.754, 33.4234, 0.0, 48.937, 27.3634, 0.0, 12.3725, 0.0, 0.0, 8.5579, 18.8784], [71.5082, 10.7369, 0.0, 27.4743, 0.1181, 60.7933, 143.3603, 13.7052, 191.4], [51.0531, 6.274, 5.3998, 81.291, 3.6608, 40.4328, 112.4021, 0.0, 117.45, 3.762, 23.0438, 10.6605, 16.2259, 63.7781, 0.0, 30.7828, 22.2566, 38.2838, 16.2389, 252.396], [134.7328, 8.6024, 0.1705, 46.7166, 34.3642, 27.8516, 96.923, 0.0, 89.03, 1.452, 53.6602, 0.0, 44.7898, 26.1077, 0.0, 22.3695, 17.8819, 15.1891, 7.3786, 327.4992], [95.1751, 10.8177, 2.3304, 160.8327, 55.3842, 84.035, 155.5054, 259.55, 30.294, 37.0138, 50.6557, 14.4634, 46.7741, 0.0, 13.0654, 10.0397, 16.7184, 23.2243, 105.0624], [55.308, 76.8346, 23.9268, 46.8115, 98.5186, 62.7535, 110.7586, 20.4422, 46.008, 54.8251, 603.6984], [26.6967, 35.7524, 10.29, 25.2713, 52.2458, 377.4519, 22.8044, 69.6, 6.633, 20.4326, 33.5947, 36.4435, 27.7819, 30.3065, 152.1323, 10.9267, 15.7334, 26.6717, 247.8816], [285.0183, 40.1663, 10.288, 139.8411, 247.6347, 91.142, 187.8925, 274.63, 29.931, 40.9306, 3.1847, 26.0237, 36.624, 33.6567, 91.1606, 17.5997, 32.3482, 25.4923, 156.7728], [379.1791, 52.0512, 83.4411, 334.6308, 162.8461, 91.0459, 656.552, 35.062, 566.95, 60.72, 78.1402, 20.68, 35.303, 99.0941, 80.3728, 14.847, 36.9101, 16.9042, 441.18], [261.6894, 67.4936, 65.707, 311.6841, 251.4136, 64.6349, 411.7441, 819.83, 29.997, 97.7242, 68.1406, 33.8515, 143.1475, 138.1631, 173.116, 33.385, 18.5846, 62.3851, 352.5336], [314.2639, 10.2679, 36.4629, 180.7953, 323.6847, 108.8133, 384.5961, 13.3292, 635.97, 53.559, 84.864, 41.4117, 58.1126, 128.4456, 47.1814, 243.9857, 33.264, 52.3843, 29.8771, 753.084], [424.6536, 57.549, 107.4844, 282.6663, 413.6693, 120.8183, 596.5407, 44.1612, 698.61, 25.74, 132.192, 8.6959, 56.7648, 95.0654, 161.5522, 400.77, 15.5635, 94.1933, 87.3331, 854.8632]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

