created: 20230314004438000
creator: Drevarr
modified: 20230705163522053
modifier: drevarr
tags: ChartData
title: 202303140044_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Legendary Hacker", "Smol Daddy Tika", "Minka Bringer", "Tootsie Pop Rock", "Lil Lun\u00e4", "Mistwalker Caelon", "Lord Erin The Wise", "Xyntharos", "Sofya De Nova", "Cat Wigglebooty", "Tribal S", "Fribble Bibble", "Etchery Howls", "Veron Blackburn", "Arcanophage Farra", "Drevarr Moonwillow"];
const professions = ["Tempest", "Herald", "Berserker", "Scrapper", "Scrapper", "Weaver", "Vindicator", "Weaver", "Vindicator", "Weaver", "Scrapper", "Druid", "Scrapper", "Druid", "Herald", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[31.7254, 23.8901, 188.8965, 62.8474, 0.0, 16.9785, 24.1403, 62.869, 0.0, 21.9427, 16.2935, 0.0, 24.4079, 74.3928, 54.9824, 23.9615, 23.1407, 40.968, 18.4672, 35.7006, 39.2698, 0.0, 31.3188, 80.4002, 31.3157, 16.224, 31.6764], [125.0435, 529.1603, 77.1309, 0.0, 18.4338, 40.9336, 0.0, 0.0, 75.092, 0.0, 48.855, 0.0, 0.0, 37.553, 12.4862, 84.8856, 82.782], [0.0, 0.0, 216.0008, 97.6472, 0.0, 0.0, 0.0, 0.0, 0.0, 63.5966, 74.6701, 0.0, 0.0, 131.5248, 70.6521, 51.7166, 0.0, 6.804, 34.1511, 0.0, 57.4402, 0.0, 0.0, 201.784, 42.673, 0.0, 122.0688], [4.7141, 423.6618, 99.4651, 0.0, 38.6786, 24.4652, 120.839, 0.0, 22.1794, 48.8471, 0.0, 12.3686, 25.235, 4.8172, 32.7099, 55.1029, 20.7, 6.0085, 18.6935, 61.4539, 4.6465, 18.6572, 155.7377, 20.7187, 23.8056, 68.1408], [29.6193, 139.3456, 351.9396, 35.449, 0.0, 62.2868, 29.0384, 144.4003, 49.2274, 39.3842, 0.0, 15.8054, 28.7679, 6.5337, 0.0, 50.2049, 30.744, 42.2803, 26.0668, 0.0, 19.3347, 13.3319, 175.2652, 24.7104, 39.78], [246.577, 12.0627, 54.096, 27.8888, 28.0039, 43.218, 126.3769, 102.9882, 57.2134, 65.3988, 44.136, 89.8621, 16.0025, 63.0811, 0.0, 88.6312, 238.187, 64.152, 58.2504], [29.8325, 103.7901, 793.949, 196.0735, 0.3089, 26.3571, 25.1649, 212.0515, 12.0627, 53.7917, 39.6508, 28.2003, 24.0992, 101.0409, 66.1672, 42.3875, 44.4572, 38.52, 36.316, 24.1114, 84.4517, 14.1777, 48.5237, 154.7734, 56.3587, 42.4944, 62.5212], [20.7948, 122.6465, 814.7985, 186.984, 0.0, 47.9602, 53.6785, 180.0922, 10.9083, 58.7618, 35.5858, 25.254, 54.0637, 79.3388, 79.4006, 59.0328, 19.967, 49.356, 78.552, 43.8812, 110.053, 84.0134, 129.701, 23.9976, 60.3096], [36.071, 153.9673, 623.817, 206.5914, 23.6694, 60.023, 33.3866, 224.0654, 17.9527, 61.2975, 46.9479, 46.7199, 40.4603, 122.2383, 122.1462, 85.6652, 50.1549, 50.292, 80.5843, 23.8243, 99.0965, 31.5891, 80.2894, 219.9855, 60.2554, 57.096, 63.126], [27.6997, 186.4866, 970.3357, 187.893, 0.0, 50.2887, 42.0082, 133.2029, 11.6858, 77.0192, 48.2474, 8.895, 48.9187, 167.9642, 118.9901, 71.6522, 32.412, 30.6, 93.9267, 13.0783, 68.8306, 3.9827, 124.0464, 243.4908, 77.22, 67.9536, 74.466], [48.8944, 195.755, 1620.8401, 291.2535, 31.1854, 112.7696, 60.1759, 355.1688, 74.0101, 66.1402, 33.3633, 39.8017, 162.4125, 144.1281, 103.3557, 72.3461, 52.812, 119.6836, 21.3845, 45.3989, 31.2657, 15.9387, 86.1861, 15.2539, 18.2208, 75.1968], [83.899, 224.1195, 1350.2136, 268.9194, 14.3229, 99.0251, 69.4472, 302.3309, 27.8126, 101.1933, 73.0041, 83.9836, 59.1058, 154.9429, 189.6976, 106.8783, 42.0332, 92.808, 118.6233, 21.6895, 126.6504, 41.8692, 120.881, 317.3818, 116.6141, 79.4352, 60.2784], [44.3889, 314.1668, 1966.5248, 283.3327, 70.0014, 151.2542, 62.8748, 266.5224, 48.8634, 159.5156, 71.2715, 162.2149, 95.059, 346.3251, 261.5679, 129.6011, 39.6091, 189.072, 105.7227, 12.1813, 71.4883, 10.2631, 12.4009, 123.674, 89.3376, 108.2016, 94.2228], [41.6163, 353.5575, 2076.6102, 543.0327, 40.7378, 124.3473, 144.1923, 706.6051, 190.0122, 87.4983, 106.0107, 16.1965, 192.3916, 150.3849, 107.0332, 89.4642, 68.184, 123.1297, 62.2339, 119.2738, 93.1334, 83.7155, 384.6431, 144.4608, 160.3056], [1323.1093, 516.4135, 111.4027, 220.2677, 187.8498, 1220.2877, 185.5703, 156.4389, 358.8231, 205.6798, 93.7007, 510.5545, 213.6175, 206.4017, 221.0865, 178.452, 53.502, 104.0341, 113.6328, 64.7781, 144.7146, 337.0298, 77.22, 60.1536, 33.5412], [122.0228, 471.0904, 2153.3364, 482.9121, 99.5509, 190.2239, 156.7873, 534.3278, 34.8335, 142.6106, 37.2518, 135.165, 100.9243, 438.8871, 309.0753, 110.5558, 148.7655, 125.46, 222.623, 65.5528, 238.3848, 71.6202, 184.6359, 463.9585, 175.2538, 119.1528, 116.298], [103.4141, 425.2278, 2675.4078, 615.7487, 98.487, 263.1506, 116.8033, 547.3915, 114.16, 202.5219, 188.9577, 23.5423, 130.5595, 364.0906, 265.2223, 213.5631, 110.6307, 129.456, 190.2391, 67.0956, 251.4566, 140.7554, 174.9908, 607.6421, 221.1106, 153.3792, 287.1288]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

