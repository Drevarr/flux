created: 20230702223827000
creator: Drevarr
modified: 20230705163541128
modifier: drevarr
tags: ChartData
title: 202307022238_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Gamora Titus", "St\u00e1rless", "Kylo Milan", "Kreita Risingclaw", "Grasszanine", "Zayde Sunsabre", "Aronorf Xideliesi"];
const professions = ["Spellbreaker", "Firebrand", "Spellbreaker", "Chronomancer", "Harbinger", "Spellbreaker", "Spellbreaker", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 16.5158, 15.228, 0.0, 0.0, 0.0, 121.581, 4.0131, 0.0, 28.9996, 0.0, 0.0, 11.1318, 15.4545, 23.1235, 0.0, 0.0, 0.0, 0.0, 22.4434, 0.0, 0.0, 0.0, 23.3786], [6.4802, 53.4643, 103.857, 0.0, 16.1546, 14.2776, 96.2372, 34.416], [22.734, 13.4946, 13.3163, 12.808, 13.3848, 0.0, 26.1576, 0.0, 39.4758, 26.3088, 13.2515, 13.5744, 13.3584, 13.4784, 27.2916, 0.0, 13.4379, 13.2818, 13.4244, 13.2767, 0.0, 13.4432, 0.0, 0.0, 15.0176, 0.0, 0.0, 0.0, 12.9811, 0.0, 0.0, 0.0, 0.0, 0.0, 12.8845, 0.0, 0.0, 0.0, 0.0, 13.4263, 0.0], [0.0, 221.3594, 79.866, 100.2499], [42.8271, 68.3046, 44.803, 0.0, 0.0, 98.0554, 0.0, 352.1814, 0.0], [0.0, 83.5507, 40.4352, 32.3946, 22.3166, 0.0, 67.6872, 27.1597, 65.6964, 0.0, 67.2133, 14.8537, 100.0543, 30.7377, 0.0, 67.2235, 0.0, 34.1008, 13.53, 13.1442, 26.9841, 54.763, 0.0, 0.0, 25.9459, 46.2671, 31.6606, 12.8489, 13.0442, 67.6947, 20.232], [0.0, 26.5018, 13.3824, 13.3069, 107.5503, 38.934, 27.2232, 13.8915, 13.2072, 12.3915, 24.1839, 10.2816, 14.4144, 30.2375, 101.3103, 50.3521, 0.0, 16.4728, 22.848, 28.2955, 42.2496, 42.714, 17.752, 14.0308, 61.2171, 54.4045, 42.6492, 13.8365, 28.309, 10.8066, 33.2392, 26.1954, 11.5804, 16.0477, 0.0, 14.573, 10.9322, 28.7723, 23.4365, 57.871, 10.6963, 27.7762, 51.5479, 10.7371, 13.8105, 26.0496, 0.0, 41.4994, 13.914], [56.5265, 46.3267, 76.201, 18.5325, 109.2049, 16.362, 48.0371, 6.0499, 55.4337, 26.2178, 45.1577, 38.9072, 48.2328, 18.8292, 68.8779, 142.2868, 12.0955, 7.0216, 9.2904, 36.6344, 37.1952, 28.0098, 8.9747, 43.1577, 16.5172, 144.342, 6.8116, 39.4009, 13.7687, 102.1581, 50.0976, 0.0, 88.8311, 7.6912, 6.031, 0.0, 26.9956, 35.1171, 51.2198, 29.2395, 51.3513, 116.1559, 13.5876, 0.0, 28.985, 6.6748, 63.8452, 23.76]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

