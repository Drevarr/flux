created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Jerryatric Reflexes", "Bella Sassy", "Whip \u00d1 Sl\u00e0pper", "Magister Boombottom", "Zaedy Zae", "Aisling Vexwind", "Miphest\u00f6", "Naithan Stone", "Greg The Knight", "Danaeryn", "Erin Celes", "K\u00e2 Otik", "Perpetual Hope", "Blaze All Might", "Boof Floof", "Tika Fiery", "Enter Effore"];
const professions = ["Scrapper", "Spellbreaker", "Firebrand", "Tempest", "Tempest", "Druid", "Tempest", "Tempest", "Tempest", "Firebrand", "Tempest", "Herald", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12.4875, 3.5088, 10.7752, 12.4898, 125.5501, 68.0904, 23.0306, 19.829, 41.6842, 8.5239, 14.4951, 11.3863, 8.8556], [38.0175, 32.2483, 20.235, 38.7862, 261.6494], [421.3375], [12.7188, 1.9421, 31.7979, 5.944, 204.0003, 73.7352, 12.7472, 0.0, 50.1165, 0.0, 39.3158, 0.0], [168.2112, 67.8422, 56.978, 177.7921], [71.5487, 38.0582, 19.0658, 23.5501, 324.3501], [13.6925, 22.4193, 2.0691, 219.6012, 69.5016, 0.0, 27.6764, 71.595, 26.8291, 15.1316, 8.2742], [521.2186, 0.0], [77.0988, 65.8512, 20.8603, 60.3425, 311.1265], [317.079, 24.5549, 120.3523, 107.3925, 68.7109, 107.6437], [13.4587, 52.5994, 0.0, 52.0285, 231.3391, 169.6968, 0.0, 68.5595, 112.2451, 0.0, 58.3952, 0.0, 31.461], [10.5913, 33.6192, 0.0, 37.5071, 261.3522, 174.8124, 42.543, 40.194, 139.7694, 0.0, 56.7798, 22.8897, 9.7074], [103.7387, 4.4768, 725.8133], [36.815, 0.0, 32.342, 0.0, 344.4084, 165.1986, 17.8524, 60.023, 147.963, 49.2723, 0.0, 0.0, 41.2901], [407.5549, 198.8028, 64.9577, 128.3528, 192.9087, 21.8295, 45.3409, 0.0, 0.0], [134.0788, 20.8896, 3.248, 74.2995, 521.0701, 306.1422, 27.666, 120.85, 208.8983, 41.4115, 93.9831, 77.74], [44.1225, 62.4403, 74.298, 117.2992, 920.1559, 222.6168, 17.0381, 128.4677, 440.4683, 0.0, 45.3191, 140.7657, 38.5726], [245.4025, 131.8003, 46.0404, 148.5614, 1002.4693, 560.3346, 56.5013, 173.4467, 631.2292, 85.0715, 58.8377, 89.1779]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

