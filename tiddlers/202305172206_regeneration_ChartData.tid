created: 20230517220640000
creator: Drevarr
modified: 20230705163530547
modifier: drevarr
tags: ChartData
title: 202305172206_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Tootsie Pop Rocks", "Artakama Nahid", "Tribal S", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[25.131, 12.4924, 130.548, 518.8694, 64.247, 70.4154, 114.2457, 23.6335, 22.8255, 44.0496, 226.9296, 131.472, 160.4693, 43.1488, 4.9572, 63.0528, 304.5285, 118.0452, 362.4864, 14.7312, 5.6549, 97.2802, 49.9842, 29.0002, 319.5084, 89.0781, 321.7556, 172.9122, 172.3276, 68.5392, 9.252, 354.7152, 22.8923, 271.7177, 141.3686, 136.1052, 160.2731, 286.9344], [0.0, 33.8083, 71.8014, 169.9978, 0.0, 64.5836, 181.5399, 0.0, 0.0, 86.64, 104.7989, 137.664, 396.3341, 245.8053, 133.3098, 191.8848, 341.3793, 521.418, 466.6061, 245.2522, 33.1808, 0.0, 86.8241, 710.4265, 35.6387, 377.1545, 539.6262, 496.6116, 0.0333, 0.0, 430.3152, 0.0, 661.7911, 129.3254, 0.0, 2.7441, 29.5056], [175.3409, 213.8098, 550.3785, 754.0877, 112.2638, 99.5328, 129.3924, 125.866, 196.279, 129.7046, 477.4334, 245.628, 373.7966, 220.8032, 92.6964, 235.8144, 696.1842, 242.6328, 644.9798, 110.0822, 142.9785, 270.0272, 117.4824, 72.3593, 489.5913, 250.8859, 525.8396, 495.8437, 387.9648, 138.4779, 57.258, 752.0688, 157.1091, 259.5858, 475.5211, 376.7544, 202.8668, 507.1248], [0.0, 0.0, 546.7588, 341.8286, 31.3934, 0.0, 376.5259, 71.9514, 389.2235, 230.4806, 229.2797, 216.18, 369.1267, 216.6239, 169.614, 122.5344, 950.1586, 550.1256, 749.3338, 398.5906, 37.485, 319.9661, 14.364, 124.8912, 915.1132, 191.786, 791.9507, 91.2135, 1033.8, 327.469, 1.278, 649.656, 0.0, 584.5543, 382.6032, 74.7648, 22.5496, 463.104], [237.9379, 276.0161, 716.6492, 943.8638, 227.8411, 50.18, 540.5888, 171.2022, 287.1418, 191.8301, 640.764, 195.084, 715.0392, 675.3872, 184.1454, 481.92, 1171.819, 785.5956, 1573.0387, 484.8797, 202.9973, 274.6916, 77.7546, 268.2868, 1308.0236, 409.3793, 857.3329, 1079.1094, 1095.0794, 258.8298, 182.25, 1104.264, 105.4093, 1114.5613, 906.6677, 692.3664, 229.9501, 494.64], [514.2641, 280.5673, 1125.2644, 1783.0469, 318.8765, 259.565, 869.8798, 10.8758, 18.0175, 312.5242, 1965.8419, 868.464, 582.1157, 922.8422, 505.602, 792.3456, 2342.99, 947.4072, 1682.3117, 612.5947, 254.491, 538.9652, 209.5506, 403.5856, 2130.6503, 581.2419, 1910.8123, 1562.219, 2419.4598, 704.0183, 234.846, 2317.7952, 222.6815, 2112.8045, 1575.5285, 696.8412, 224.4619, 359.856]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

