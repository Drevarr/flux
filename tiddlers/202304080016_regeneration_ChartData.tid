created: 20230408001602000
creator: Drevarr
modified: 20230705163524798
modifier: drevarr
tags: ChartData
title: 202304080016_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Mac Chiato", "Solus Sanctus", "Tegan Parker", "Sister Elon\u00edth", "Zenek Tryst", "Mike The Archmagus", "Zadie Miststep", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[29.0604, 82.4293, 31.0141, 20.4624, 76.7673, 21.8798, 78.2477, 17.8605, 16.4934, 46.0002, 12.6288, 74.016, 5.6183, 19.7146, 3.7666, 0.0, 204.0326, 67.7223, 182.0663, 188.448, 64.247, 74.9713, 168.1392, 78.7248, 22.0712, 378.1487], [41.9675, 81.2038, 59.6134, 14.4942, 76.2999, 49.3718, 87.3811, 121.7895, 0.0, 140.0395, 58.4496, 39.8592, 13.6137, 163.9498, 18.7195, 45.1992, 111.3035, 40.608, 71.8513, 76.128, 66.8304, 19.423, 11.9784, 111.9518, 24.4024, 458.5165], [43.1362, 17.7797, 53.0106, 115.2715, 103.4904, 43.1909, 59.0947, 63.3203, 19.0159, 69.7515, 21.5856, 62.9568, 21.609, 14.2786, 43.4429, 10.7596, 131.9497, 79.8624, 113.6812, 236.496, 163.0886, 76.5201, 145.8384, 94.9502, 23.2368, 242.0032], [43.9932, 84.2173, 59.7266, 28.761, 68.353, 44.7456, 112.1914, 30.6862, 0.0, 67.9988, 0.0, 89.5968, 77.7307, 41.3861, 48.9653, 39.3088, 289.7606, 137.0943, 27.6713, 178.8384, 74.9174, 123.5707, 68.0064, 52.1875, 29.9296, 256.5473], [30.8264, 44.9011, 35.0512, 51.8949, 118.7608, 72.2755, 176.3981, 43.218, 41.8965, 48.4326, 17.6688, 41.9904, 39.7914, 222.4411, 71.0832, 48.4848, 226.6077, 91.0719, 213.2625, 314.8704, 264.6259, 95.2734, 138.1104, 126.0336, 34.0468, 460.4657], [41.2663, 127.1094, 39.8051, 48.0298, 89.6484, 176.821, 243.1267, 89.0452, 102.2267, 156.8514, 106.128, 52.8192, 63.4687, 372.6922, 89.5762, 91.3604, 170.9559, 64.2114, 159.7412, 381.5136, 207.5674, 47.7204, 221.1864, 99.3485, 97.0644, 787.6348], [60.4322, 104.8899, 102.4747, 90.1482, 90.3496, 306.204, 225.2688, 12.0173, 93.0098, 107.8108, 71.6544, 50.5728, 221.3688, 421.8336, 223.3315, 82.5248, 94.4437, 104.6079, 275.5375, 527.28, 302.5901, 59.2319, 91.4664, 87.743, 59.784, 518.0427], [109.931, 220.7288, 176.9537, 147.5566, 192.4117, 105.7968, 264.7334, 54.243, 116.6342, 74.9739, 46.3968, 60.1632, 30.5613, 302.8214, 38.9683, 41.0256, 204.247, 183.4551, 113.5637, 556.4832, 258.336, 114.3197, 434.7552, 224.1624, 44.7064, 1083.0166], [39.8738, 271.2517, 71.6831, 140.688, 25.488, 74.1189, 1631.0174, 161.1125, 582.5932, 816.6015, 1088.4613, 1821.2064, 1409.5037, 307.8803, 307.5192, 54.9965, 241.768, 2806.1271], [358.9054, 231.2962, 459.3628, 435.7354, 367.6833, 353.4523, 826.6445, 353.0205, 279.6925, 404.4872, 214.6464, 393.4944, 441.688, 656.7413, 342.3605, 190.4612, 1330.2842, 846.9729, 1040.5213, 1620.4032, 1123.4246, 544.5986, 1016.7288, 583.6354, 271.9044, 2333.2163]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

