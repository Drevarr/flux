created: 20230510220110000
creator: Drevarr
modified: 20230705163529428
modifier: drevarr
tags: ChartData
title: 202305102201_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Primal Clone", "Black Raspberry Pie", "Venomina The Siren", "Eibh\u00ebar", "Zaidy Sagemist", "Mac Aaroni", "Tegan Parker", "Etchery Howls", "Tribal S", "Artakama Nahid", "Johoshua", "Drevarr Moonwillow"];
const professions = ["Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Vindicator", "Tempest", "Tempest", "Druid", "Druid", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0213, 0.1144, 0.2116, 0.1294, 0.1463, 0.0072, 0.0, 0.0, 0.7429, 0.0, 0.092, 0.0093, 0.0337], [0.0, 0.1064, 0.1063, 0.273, 0.0, 0.1616, 0.0072, 0.6667, 0.0, 0.0, 0.5143, 0.5128, 0.0684, 0.0374, 0.0714, 0.0281], [0.1154, 0.0, 0.1308, 0.1536, 0.0, 0.2118, 0.0072, 0.6667, 0.0, 0.0, 1.9714, 0.4744, 0.092, 0.0, 0.0238, 0.0449], [0.0681, 0.1058, 0.0941, 0.2576, 0.0, 0.8974, 0.0, 0.6857, 0.7564, 0.1533, 0.0654, 0.0674], [0.0385, 0.0638, 0.0681, 0.0102, 0.1765, 0.2118, 0.0217, 0.6923, 0.0, 0.0093, 1.6857, 0.7436, 0.1557, 0.0748, 0.5238, 0.0281], [0.0, 0.1702, 0.2125, 0.273, 0.0941, 0.4432, 0.7692, 0.0093, 0.3143, 0.2564, 0.2358, 0.1682, 0.0952, 0.1124], [0.0769, 0.1915, 0.3815, 0.3823, 0.2588, 0.5852, 0.0072, 1.1026, 0.0, 0.0278, 2.0286, 0.6923, 0.2854, 0.0841, 0.0, 0.1685], [0.0638, 0.485, 0.4403, 0.1882, 0.6638, 0.0, 0.9487, 0.0278, 1.8286, 0.3205, 0.316, 0.1308, 0.0, 0.2079], [0.0, 0.4823, 0.6416, 0.0, 1.0502, 0.0725, 1.5385, 0.037, 1.9429, 0.9872, 0.3585, 0.1589], [0.3462, 0.2553, 0.6676, 0.9352, 0.1059, 1.179, 0.0, 0.6154, 0.1379, 0.037, 3.3143, 0.9744, 0.3656, 0.2243, 0.7857, 0.1601], [0.4231, 0.2553, 0.6757, 0.9249, 0.4588, 1.2118, 0.029, 1.5385, 0.0, 0.037, 1.0, 0.7179, 0.4057, 0.215, 0.9286, 0.2191], [0.9231, 1.4043, 0.7384, 1.0375, 0.8588, 1.0808, 0.0072, 2.2821, 0.2069, 0.0093, 2.0286, 0.7051, 0.5519, 0.4766, 1.4524, 0.3258], [1.6923, 0.9787, 0.8529, 1.1911, 0.5059, 1.4127, 0.0797, 2.3333, 0.2414, 0.1204, 2.5714, 0.8077, 0.5731, 0.4019, 1.7143, 0.2865]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

