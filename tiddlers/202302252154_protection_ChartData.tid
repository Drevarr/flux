created: 20230225215428000
creator: Drevarr
modified: 20230705163520290
modifier: drevarr
tags: ChartData
title: 202302252154_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Venomina The Fierce", "Mac Aaroni", "Zadie Miststep", "Primal Clone", "Vopiscus Zergherdus", "Hyde En Sikh", "Cat Wigglebooty", "Roided Barack", "Tribal S", "Blanco Padre Guard", "Gabe Malhorn", "Sizklea", "Drevarr Moonwillow", "Aronorf Xideliesi", "Koralia Danai", "Bella Sassy", "Sygaldry Verdandi"];
const professions = ["Firebrand", "Spellbreaker", "Tempest", "Tempest", "Chronomancer", "Scrapper", "Chronomancer", "Scrapper", "Tempest", "Druid", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[50.9733, 81.701, 44.948], [55.1335, 27.626, 24.1012, 10.8264, 10.3208, 13.7837, 17.2343, 19.3085], [18.954, 13.4176, 23.7296, 63.2564, 23.636, 14.1589, 14.2272, 37.2187, 0.0, 18.8812, 14.8425], [18.6451, 10.8192, 33.0536, 69.6524, 34.01, 80.3029, 18.6576, 13.6192, 0.0, 18.5871, 11.1648], [39.3962, 19.7203, 61.7854, 38.076, 37.9708, 19.0944, 24.4294, 19.6098, 19.5871, 31.13], [133.5485, 50.312, 26.685, 43.0248, 19.3648, 12.9209, 24.9985, 33.5468], [20.723, 17.248, 20.7226, 102.9116, 41.876, 28.9793, 41.4336, 36.9421, 0.0, 21.4693, 42.2684], [62.7307, 9.3632, 31.8181, 149.0908, 39.216, 25.1141, 16.7544, 0.0, 0.0, 4.1762, 38.3279], [186.93, 203.0934], [35.6335, 4.5472, 51.8414, 128.4956, 53.846, 86.2352, 69.5136, 18.7264, 4.3949, 18.2342, 61.8659], [17.213, 0.0, 90.606, 119.6052, 63.46, 50.3935, 85.9872, 39.1765, 29.2924, 102.9259], [78.3151, 47.936, 110.1397, 153.9517, 47.5, 56.1191, 54.7872, 21.5779, 30.3383, 64.9373, 81.7522], [64.5278, 13.6976, 65.8974, 315.6426, 166.098, 154.2189, 127.2336, 53.1574], [89.2102, 31.8192, 112.1444, 264.2827, 117.458, 94.0072, 98.6232, 38.4104, 2.7101, 61.4081, 81.6472], [127.8202, 4.1552, 92.3309, 163.098, 108.566, 65.5652, 105.768, 94.8875, 126.2277, 103.714], [147.757, 37.352, 93.4731, 308.4791, 109.136, 117.3229, 118.2168, 36.1334, 22.0559, 21.7046, 94.5457], [129.8138, 77.28, 117.6456, 306.944, 62.624, 117.0542, 167.3568, 52.9446, 12.7281, 88.0535, 100.7192], [91.3723, 87.6288, 89.9533, 316.4101, 168.454, 141.7342, 122.0856, 49.859, 20.5282, 146.3764]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

