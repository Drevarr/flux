created: 20230306221045000
creator: Drevarr
modified: 20230705163521372
modifier: drevarr
tags: ChartData
title: 202303062210_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Sassy", "Ravioli Fetabringer", "Sygaldry Verdandi", "Tegan Parker", "Viral Marketing", "Mac Aaroni", "Zadie Miststep", "Tribal S", "Cat Wigglebooty", "Tootsie Pop Bringer", "\u00c1rkantor", "Mike The Archmagus", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Druid", "Scrapper", "Scrapper", "Vindicator", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[226.4496, 112.8882, 7.2666, 75.6756, 25.6348, 3.2304, 18.1834, 93.1245, 4.6922, 66.8198, 59.9897, 72.6768, 21.6665, 21.5816, 49.8776, 53.167, 1.8311, 31.2287, 17.0496, 127.1491, 0.0, 123.767, 11.8666, 34.5195, 8.6751, 50.8061, 21.6346, 32.545, 86.9829, 85.4938, 29.365, 162.5184, 110.0907], [240.6851, 54.2763, 0.0, 70.4012, 21.6247, 0.0, 55.162, 43.8354, 41.2992, 34.6254, 17.4866, 44.4528, 23.1458, 77.6699, 36.7872, 82.661, 45.8277, 53.0998, 54.5232, 97.2317, 13.3061, 0.0, 119.3582, 27.1171, 53.8784, 0.0, 41.5958, 69.0163, 119.9486, 95.0692, 85.3824, 64.619, 101.1636, 61.2535], [107.6888, 69.3134, 26.5886, 16.339, 79.8367, 10.1673, 43.8411, 59.1675, 34.5587, 68.8357, 39.1427, 84.7504, 14.9169, 35.0997, 75.5212, 155.9111, 40.9777, 26.8204, 63.3433, 70.6848, 87.7766, 21.6509, 5.5188, 44.2483, 42.7512, 79.6515, 0.0, 60.0912, 34.249, 163.7966, 96.0163, 110.5964, 143.8806, 103.1472, 28.6702], [18.9806, 175.6709, 0.0, 92.7599, 16.5581, 9.7297, 127.6769, 73.5221, 35.0801, 218.8987, 25.4521, 84.28, 71.5024, 178.5222, 104.3871, 180.6027, 52.1625, 87.6507, 37.5091, 179.3635, 121.9234, 47.2858, 98.7771, 25.515, 32.0112, 81.8726, 94.6142, 165.5152, 112.0992, 101.7032, 84.132, 53.8038], [331.634, 75.5149, 0.0, 70.4586, 58.6648, 0.0, 59.6204, 43.1151, 39.0648, 90.0615, 23.3362, 115.4048, 69.6224, 161.0316, 125.6002, 60.88, 27.6649, 5.3557, 76.2999, 32.5008, 264.8822, 0.0, 214.1875, 17.5742, 137.0868, 17.6526, 49.1962, 40.8499, 164.089, 165.5152, 34.5092, 114.2769, 58.2084, 87.5157], [396.4845, 174.4086, 0.0, 123.4315, 6.4464, 52.2772, 235.0236, 47.2948, 153.2646, 223.6546, 25.088, 38.4017, 69.3693, 117.0747, 142.8619, 33.7522, 0.0, 42.2473, 64.4333, 184.8672, 0.0, 0.0, 113.8272, 20.9357, 56.7939, 0.0, 49.271, 43.2346, 169.0584, 180.7408, 196.8138, 108.2288, 135.7056, 139.8897], [384.358, 208.5989, 0.0, 53.8902, 0.0, 100.0085, 25.3649, 34.298, 260.6388, 0.0, 67.1888, 41.5454, 58.2821, 190.5821, 100.0761, 50.5788, 28.5155, 29.4106, 163.2758, 87.5347, 13.8293, 80.8177, 0.0, 64.3219, 50.5267, 55.8331, 235.3783, 254.8115, 283.464, 180.234, 371.9607], [468.8482, 123.2056, 75.1249, 82.7272, 69.7897, 118.8673, 65.0405, 115.3509, 91.4987, 299.6517, 73.5559, 67.032, 23.7314, 244.927, 178.2973, 58.3575, 61.0212, 0.0, 169.3768, 122.3664, 411.647, 0.0, 5.418, 123.6067, 29.0122, 113.0048, 0.0, 62.5248, 86.0544, 340.8451, 451.4514, 83.1004, 182.8748, 3.9672, 215.1398], [238.3125, 49.9957, 0.0, 201.1136, 0.0, 114.3017, 21.8148, 2.3461, 32.9652, 2.4892, 90.8656, 74.831, 195.3013, 259.3903, 108.3228, 0.0, 0.0, 106.5319, 4.9728, 823.153, 0.0, 479.9981, 0.0, 266.9432, 188.5478, 89.4413, 597.5995, 327.7521, 197.0364, 195.2097, 153.9684, 321.167], [507.7321, 192.519, 0.0, 167.8049, 0.0, 0.0, 228.647, 0.0, 164.9732, 147.7507, 2.7381, 495.0176, 318.8329, 320.6996, 459.3035, 44.8232, 33.2573, 322.8071, 347.9358, 68.8149, 222.2438, 159.84, 414.7046, 247.18, 164.1413, 396.8655, 272.7792, 157.8745], [633.8743, 411.3256, 42.6379, 276.8466, 108.7271, 63.6035, 158.405, 304.2239, 203.7028, 571.6742, 288.2494, 263.7376, 112.6779, 339.3167, 303.2262, 273.4994, 216.4693, 155.6451, 109.295, 931.2509, 0.0, 531.6211, 282.6286, 0.0, 228.6461, 78.7622, 403.6939, 524.4471, 99.5201, 129.7154, 250.6176, 116.2612], [721.2643, 464.2299, 176.0604, 36.307, 44.35, 63.1172, 458.0593, 198.303, 452.857, 483.0915, 219.5984, 55.3835, 302.6755, 323.231, 230.568, 113.9755, 54.5594, 51.4941, 118.7434, 147.8938, 55.4702, 467.2526, 62.2205, 283.5032, 107.3992, 150.8083, 259.753, 334.1218, 359.7333, 583.3725, 354.7676, 586.4616, 262.472], [906.721, 389.4285, 14.1079, 468.0994, 10.3919, 60.1673, 392.9966, 308.5456, 416.306, 448.4103, 126.1402, 588.4704, 453.7937, 682.5465, 883.2965, 265.5922, 392.2083, 409.5165, 335.3798, 1494.3197, 22.9094, 18.5069, 791.6602, 147.5424, 665.2005, 0.0, 479.1197, 216.4838, 929.1878, 868.0806, 445.447, 613.9597, 438.786, 432.6875], [1329.172, 506.4875, 151.1373, 455.3149, 165.8395, 103.5134, 462.6266, 428.4756, 220.5353, 513.985, 293.9123, 653.3072, 254.4807, 769.6435, 655.4573, 506.784, 357.2683, 30.5996, 473.3581, 220.5437, 1497.1421, 69.4488, 795.5078, 152.844, 799.9549, 63.7875, 561.937, 433.5898, 1230.2774, 834.2782, 387.9502, 711.7635, 591.7284, 767.9262]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

