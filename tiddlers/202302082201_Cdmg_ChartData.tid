created: 20230208220141000
creator: Drevarr
modified: 20230705163518835
modifier: drevarr
tags: ChartData
title: 202302082201_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Xyntharos", "Jupi Jupi Jupi", "Zaylen Harker", "Mac Aaroni", "Tootsie Pop Bringer", "Johosh The Great", "Thamsanqa Jantjie", "Legacy Of Mathus", "Mistwalker Caelon", "Rina Of Theros", "Rozaalyna", "Zefirokai", "Smol Daddy Tika", "Tacoplasm", "Ace Rages", "Lord Erin The Wise", "Sp\u00edcy Cheese", "Nelliel T", "Panther B Me", "Smol Gluvs", "Demon Sekhmet", "Xanvias Einzbern", "Fungus", "Be\u00eb"];
const professions = ["Scrapper", "Vindicator", "Dragonhunter", "Firebrand", "Tempest", "Scrapper", "Firebrand", "Mesmer", "Berserker", "Vindicator", "Scourge", "Scourge", "Catalyst", "Berserker", "Tempest", "Berserker", "Weaver", "Berserker", "Scourge", "Scourge", "Scourge", "Berserker", "Berserker", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.1514, 6.0, 3.5066, 0.0, 0.0, 7.1702, 0.1746, 10.0979, 11.8369, 9.5493, 6.6887], [22.6925, 0.0, 7.0396, 0.0, 0.0, 0.0, 0.0, 8.4713, 12.6454, 0.0, 4.2105], [36.5153, 0.0, 8.0749, 9.0161, 0.0, 38.2766], [24.8498, 0.0, 0.37, 13.4677, 0.0, 24.0, 3.8942, 2.1133, 47.9574, 11.9577, 6.994], [24.115, 0.0, 5.9648, 34.2581, 0.0, 2.6809, 0.0, 14.5734, 26.4539, 3.338, 6.4977], [17.6678, 0.268, 3.7225, 0.0, 0.0, 17.1702, 0.1323, 23.4755, 65.9007, 16.3662, 0.0391], [16.4296, 0.0, 3.2203, 0.0, 4.88, 0.1915, 0.0, 21.9399, 21.2766, 1.5634, 19.0376], [35.7972, 102.844, 48.9014, 13.7038], [53.6232, 0.0, 31.9692, 0.0], [28.7946, 0.0, 17.1322, 7.629, 13.32, 2.0851, 0.0, 18.9497, 23.8582, 3.6338, 18.2271], [55.8146, 46.0103, 39.1366, 25.6129, 12.12, 83.2128, 0.7196], [68.2312, 0.0, 25.022, 0.0, 0.0, 78.0213], [10.1706, 102.9858, 156.9437, 55.6526], [34.3239, 23.5567, 2.3568, 43.5, 3.5, 6.0426, 1.1587, 34.6979, 57.6454, 35.7183, 16.5143], [30.8685, 6.1649, 11.5507, 0.0, 7.0, 185.0213, 16.8995, 17.3622, 41.3688, 50.1831, 41.6947], [41.3908, 0.0, 7.2775, 0.0, 44.8723, 0.0, 36.8531, 89.5745, 99.7465, 9.7789], [57.0023, 0.0, 12.0, 0.0, 5.98, 44.234, 0.0, 28.2909, 63.617, 29.0, 17.191], [46.365, 0.1443, 28.0749, 1.4839, 0.0, 151.8936, 0.0, 59.979, 83.2908, 119.0704, 12.1519], [82.8486, 2.6907, 27.7445, 2.4194, 0.0, 278.6596, 0.0, 53.5245, 86.4113, 26.8732, 8.6105], [66.1455, 2.7526, 33.4802, 7.871, 9.64, 180.2979, 0.2751, 57.0448, 146.2199, 13.5775, 28.2226], [88.1655, 5.1649, 14.2467, 0.3871, 6.88, 71.9149, 0.4868, 43.9315, 82.4539, 164.5634, 31.1669], [108.8674, 15.3814, 70.0396, 26.5806, 4.28, 103.3191, 0.2804, 50.158, 70.0355, 49.338, 21.6707], [94.5587, 22.9897, 17.4141, 0.0, 8.64, 4.2766, 2.4444, 94.9091, 112.5319, 115.1972, 23.6481], [91.4354, 0.0, 19.8987, 0.0, 6.8, 176.3404, 0.0, 52.5902, 156.6028, 103.3099, 64.6451], [149.9824, 5.3196, 80.8414, 1.6935, 0.08, 290.8085, 2.2593, 97.4517, 213.4468, 134.662, 45.5519]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

