created: 20230710221759000
creator: Drevarr
tags: ChartData
title: 202307102217_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Nidircc", "Cat Wigglebooty", "Belvyn Brightblade", "Tootsie Pop Rocks", "Artakama Nahid", "Fribble Bibble", "Drevarr Moonwillow", "Arriasa", "Zaedy Zae"];
const professions = ["Tempest", "Scrapper", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[50.7113, 43.4966, 51.4214, 96.203, 79.8336, 701.8584, 79.7661, 17.7437, 88.3421, 142.637, 58.9056, 41.6448, 27.0547, 78.6333, 23.79, 40.2752], [139.6138, 80.4518, 0.0, 25.488, 919.7569, 62.6581, 44.7398, 154.0462, 151.5041, 47.9712, 5.1456, 36.1901, 82.3926, 0.0], [256.5277, 15.149, 0.0, 0.0, 169.344, 0.0, 9.9465, 184.2498, 0.0, 102.0413, 174.8006, 4.9123, 0.0, 462.1063, 55.6316, 87.313, 234.3572, 56.8714], [650.0987, 0.0, 0.0, 28.5151, 311.9536, 178.1282, 447.615, 0.0, 106.8566, 99.6442, 98.2258, 70.2216, 943.52, 0.0, 142.1251, 272.3028, 117.1825, 69.0912, 108.1344, 82.5696, 152.9981, 188.4728], [1073.4337, 20.0831, 15.8189, 442.4509, 387.1392, 179.879, 156.1316, 329.0742, 58.8883, 164.0707, 138.7008, 126.3581, 118.0656, 1135.3217, 17.8106, 79.1438, 260.3909, 151.4276, 38.496, 78.816, 91.2365, 182.0548, 77.8724], [1785.8442, 0.0, 33.8957, 588.9996, 861.7728, 122.351, 119.0725, 845.7498, 89.2989, 80.2454, 266.0851, 106.8533, 205.9776, 70.4404, 186.0495, 153.1051, 207.0299, 314.1684, 25.2096, 149.8368, 129.037, 102.8733, 236.7475], [2357.5713, 89.5772, 36.6509, 720.5896, 967.848, 236.6237, 311.7958, 929.628, 83.7632, 147.5971, 332.6131, 156.9672, 197.3376, 2199.3542, 250.3573, 306.6494, 522.6144, 497.0893, 87.2736, 155.7888, 146.2536, 412.0807, 70.642, 358.6861], [2999.1048, 14.5391, 22.7539, 998.8062, 1738.6768, 716.2358, 476.3417, 988.281, 181.1176, 412.6954, 438.7085, 489.1061, 147.204, 2923.7026, 115.1124, 268.2048, 500.8927, 629.6363, 38.592, 200.0256, 73.9906, 421.5574, 157.5392, 134.6682], [4935.6965, 388.579, 243.9226, 673.9215, 1527.3104, 220.0997, 319.8465, 1912.9698, 242.4954, 321.8371, 251.7581, 0.0, 273.024, 2731.2644, 242.0782, 201.6514, 188.3266, 563.2099, 24.2016, 25.6896, 9.8674, 555.1713, 0.0, 311.6288]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

