created: 20230427220456000
creator: Drevarr
modified: 20230705163527081
modifier: drevarr
tags: ChartData
title: 202304272204_ripsOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Tlesia", "Morv\u00fcs", "Hyde En Sikh", "Red Reaper Robin", "Heal Warriior", "Forever Broke", "Necrotic Windrunner", "Blaize Harlot", "Elusive In The Mist", "Smol Gluvs", "Primal Clone"];
const professions = ["Daredevil", "Spellbreaker", "Chronomancer", "Reaper", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Boons Stripped per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[66924.0, 29088.72, 1742.4, 2795.31, 0.0, 27999.0, 169497.24, 7282.8, 0.0, 71600.76, 1806.0, 26773.44, 128456.64, 2624.4, 0.0, 0.0, 0.0, 0.0], [266065.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 118095.6, 51893.52], [296782.2, 10516.32, 864.0, 3607.74, 0.0, 13999.5, 170460.84, 142.8, 3632.16, 49313.88, 0.0, 0.0, 0.0, 0.0, 4785.9, 22019.05, 0.0, 0.0], [77759.48, 79730.65, 486380.16, 11565.44], [7738.74, 3108.56, 52050.6, 286381.92, 286647.2, 73106.88], [171514.2, 38784.96, 21988.8, 18465.57, 1024.8, 51499.8, 368673.36, 107433.2], [142133.6, 60935.28, 332141.04, 28610.05, 221401.92, 909483.84, 30229.2, 39700.18, 81616.65, 613992.96, 6604.16], [400943.4, 0.0, 5774.4, 14857.83, 1024.8, 62148.6, 527763.72, 142466.8, 29289.12, 277754.4, 24170.3, 262043.04, 998415.36, 11129.4, 22015.14, 28148.55, 499685.76, 16885.76], [1076.04, 69400.8, 112548.48, 217865.2, 100270.8, 575467.2, 55384.0, 277674.24, 1852130.88, 54845.1, 123339.48, 69593.4, 109105.92, 21270.4], [427112.4, 19488.96, 22406.4, 7284.33, 2066.68, 69859.8, 370504.2, 167314.0, 33462.24, 481413.24, 21190.4, 248255.52, 1020208.32, 35550.9, 92162.76, 101561.1, 416828.16, 32411.52], [438438.0, 38977.92, 43992.0, 4833.27, 1024.8, 57742.2, 523331.16, 196873.6, 46677.12, 709936.92, 24907.75, 241441.92, 1527943.68, 31905.9, 89610.28, 111792.65, 503435.52, 14100.48]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

