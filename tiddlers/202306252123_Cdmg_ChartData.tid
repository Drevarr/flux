created: 20230625212343000
creator: Drevarr
modified: 20230705163535638
modifier: drevarr
tags: ChartData
title: 202306252123_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Blancooo Padreee", "Venomina The Siren", "Morton Saltbringer", "Miphest\u00f6", "Sygaldry Verdandi", "Traidoruns Maximus", "Permanent Dawn", "Lord Erin The Wise", "Be\u00eb", "Caelon Cai", "Tika Fiery", "Shaca Booey", "Mike The Archmagus", "K\u00f4sair", "Ateriuz", "Johosh The Mighty", "Xanvias Einzbern"];
const professions = ["Spellbreaker", "Tempest", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Weaver", "Weaver", "Reaper", "Reaper", "Firebrand", "Berserker", "Weaver", "Berserker", "Berserker", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.7692, 8.8776, 2.4037, 9.72, 0.0, 0.4175, 9.0545, 50.375, 21.0299, 3.0274, 13.7667, 118.8312, 53.3854, 2.4605, 37.1079, 61.2947, 1.6571, 34.1856, 76.4082, 0.0, 14.3619, 30.0, 19.8188, 33.3585, 14.034], [0.0103, 3.1853, 20.9358, 94.11, 33.6714, 28.1942, 13.3273, 43.5208, 0.3134, 17.6575, 9.6111, 4.6234, 42.1146, 25.1974, 24.4245, 16.2842, 0.0, 23.2577, 12.7551, 41.5349, 21.9048, 5.4096, 28.0562, 0.0, 94.8707], [40.0, 9.3846, 6.9174, 0.2, 102.6857, 98.9126, 134.1273, 29.4792, 16.4776, 0.0, 51.6301, 30.2987, 21.1562, 41.4474, 27.8993, 43.0421, 0.0, 123.6082, 9.2959, 2.7519, 37.0381, 19.4096, 60.4688, 56.1698, 16.5102], [7.4872, 4.021, 34.4587, 10.3592, 8.3636, 84.7014, 144.9104, 102.4247, 0.0, 99.2208, 76.4375, 45.0921, 113.5612, 83.5474, 33.1714, 12.1649, 66.3878, 6.155, 51.6571], [0.0, 8.4545, 31.8073, 58.93, 67.8714, 94.4757, 47.9818, 59.1389, 45.6269, 0.0, 117.7123, 0.0, 2.1429, 84.1562, 56.2368, 23.6043, 68.9789, 8.1143, 11.1443, 53.1224, 2.093, 24.4857, 51.759, 51.3687, 46.0189, 47.6259], [8.2, 3.0035, 62.0, 98.86, 132.1, 0.0, 27.8727, 48.0, 22.209, 0.0, 114.1507, 0.0, 0.0, 48.3854, 84.25, 120.4532, 120.3895, 39.8969, 88.3265, 1.3101, 3.2571, 10.1928, 32.9188, 6.0943], [9.1385, 4.4196, 60.6514, 29.31, 23.2429, 45.1748, 135.9455, 73.0764, 147.9701, 0.0, 34.9178, 29.4778, 0.0, 20.6475, 52.4105, 1.7714, 88.4845, 0.4388, 73.1705, 47.2952, 152.9518, 30.6438, 32.0377, 95.8707], [15.4718, 5.6049, 46.1101, 171.9429, 86.9709, 0.0, 84.5417, 52.2985, 0.0, 136.1096, 36.6889, 14.4026, 71.7917, 123.4605, 103.5971, 45.5895, 0.0, 69.9278, 29.2551, 17.7829, 73.2476, 3.7952, 18.2375], [0.0, 15.2797, 27.4587, 80.78, 60.1857, 82.3592, 75.6182, 86.7778, 66.2537, 106.9589, 29.7222, 14.7403, 68.25, 67.7237, 54.3165, 60.8105, 2.0, 61.0, 79.2143, 20.6202, 42.619, 25.4337, 39.9625, 34.283, 72.6122], [7.6821, 18.0699, 51.7615, 67.99, 60.0857, 81.9515, 97.7818, 38.9514, 67.6119, 14.6301, 34.2, 3.3506, 52.8021, 81.2895, 67.518, 81.6632, 15.3143, 52.1443, 111.1327, 57.6667, 50.1714, 54.5663, 76.3187, 65.5094, 79.4082], [31.0769, 11.035, 26.1101, 70.51, 75.2571, 74.7282, 7.4364, 97.3194, 99.0597, 76.1233, 49.7556, 89.1039, 108.3125, 77.8026, 81.3237, 54.6105, 17.8286, 9.3814, 10.2347, 33.0388, 58.1429, 27.3614, 35.7437, 106.3585, 127.4626], [158.0545, 150.0764, 60.2687, 0.0, 94.411, 19.1667, 92.4675, 32.7604, 278.1316, 180.6763, 206.0947, 10.3143, 64.3023, 98.8286, 167.0723, 36.225, 510.0943, 129.2041], [2.3282, 26.4895, 131.6697, 104.26, 140.8143, 12.7184, 232.9273, 146.9444, 82.4328, 0.0, 112.9178, 51.1667, 15.2727, 158.9896, 189.3684, 123.705, 27.8105, 0.0, 73.5258, 117.0918, 50.124, 18.3524, 119.1928, 76.2375, 135.7358, 95.7755], [151.0583, 205.6, 64.8819, 161.9851, 153.3699, 0.0, 44.3506, 49.5921, 106.0576, 223.9579, 57.1714, 259.866, 96.8469, 55.5814, 40.0, 160.1205, 125.6, 75.1887, 268.5646], [0.0, 11.0734, 12.0183, 68.26, 66.3, 97.6408, 248.4364, 166.0278, 206.3582, 0.0, 394.8219, 0.0, 15.5455, 165.1042, 261.8947, 139.259, 340.9158, 38.2571, 184.1031, 230.7653, 25.2171, 77.4952, 168.9639, 155.5375, 448.283, 211.4762], [0.0, 19.8951, 36.0275, 132.77, 173.6, 403.6019, 175.5273, 248.1042, 152.4478, 0.0, 301.8767, 177.5111, 7.0519, 18.2292, 74.2895, 290.223, 297.2211, 0.0, 260.5052, 75.2653, 117.1163, 80.9143, 47.9759, 267.4187, 410.7547, 410.6259], [7.959, 16.514, 1.1743, 230.53, 267.8, 323.165, 388.2727, 214.3264, 112.3881, 368.9863, 121.2111, 150.8312, 181.5417, 293.7368, 154.5396, 502.0421, 0.0, 114.5464, 207.3878, 81.7054, 299.6571, 447.8795, 315.6313, 838.3208, 658.0476]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

