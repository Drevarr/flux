created: 20230626090515000
creator: Drevarr
modified: 20230705163539264
modifier: drevarr
tags: ChartData
title: 202306260905_ripsIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Koralia Danai", "Necrotic Windrunner", "Vesnan", "Urilstormwalker", "Drev Of The Dead", "Latedoctor", "Necrotic Windrunner", "C H A R C O A L", "Vesnan", "Govinda Ektar", "Utopia Skye", "Smol Gluvs", "Louie Runesoldier", "Brace Stonebrow", "Koralia Danai", "Yngvar The Burdened", "Gamora Titus", "Elonith Requiem", "Charr Surethang", "Drevarr Moonwillow", "Illusive Heart", "Traidoruns Maximus", "Gestern Yesteryear"];
const professions = ["Dragonhunter", "Scourge", "Scourge", "Firebrand", "Reaper", "Reaper", "Reaper", "Scourge", "Reaper", "Vindicator", "Tempest", "Reaper", "Tempest", "Firebrand", "Firebrand", "Scourge", "Dragonhunter", "Reaper", "Berserker", "Scrapper", "Chronomancer", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0143, 0.0201, 0.0, 0.0, 0.0, 0.032], [0.0, 0.0, 0.0, 0.0192, 0.0077, 0.2059, 0.0952], [0.0122, 0.0654, 0.0369], [0.0604, 0.013, 0.0, 0.0192, 0.0, 0.0294, 0.0], [0.0, 0.0465, 0.4242, 0.0588, 0.0287], [0.0, 0.0561, 0.0, 0.013, 0.0, 0.0, 0.0299, 0.0, 0.0, 0.0952], [0.0183, 0.1075, 0.0403], [0.0566, 0.1528, 0.0292, 0.0, 0.0085, 0.0077, 0.0, 0.1905], [0.0, 0.2885, 0.2157, 0.0952, 0.0584], [0.0, 0.2692, 0.0686, 0.1463, 0.1048, 0.0755, 0.0292, 0.0, 0.0, 0.0, 0.0235, 0.0, 0.0294, 0.0238], [0.0, 0.0981, 0.0738, 0.0, 0.0, 0.0, 0.0384], [0.0164, 0.3654, 0.0784, 0.4146, 0.1333, 0.0548], [0.0755, 0.1389, 0.0511, 0.0061, 0.014, 0.0369, 0.026, 0.0, 0.0, 0.0554, 0.0], [0.1233, 0.0584, 0.0, 0.1028, 0.047, 0.013, 0.0, 0.0, 0.0426, 0.0, 0.0882, 0.0952], [0.0164, 0.1731, 0.1961, 0.439, 0.1619, 0.0959, 0.0511, 0.0122, 0.0794], [0.0, 0.25, 0.1176, 0.0732, 0.0667, 0.1321, 0.0556, 0.0876, 0.0061, 0.0421, 0.0436, 0.0, 0.0, 0.0, 0.0235, 0.0, 0.0882, 0.0833], [0.0182, 0.0, 0.4545, 0.0672, 0.0681, 0.0, 0.2308, 0.1471, 0.0857, 0.1698, 0.2083, 0.0511, 0.0061, 0.014, 0.0134, 0.013, 0.0], [0.0108, 0.0, 0.3269, 0.1569, 0.3171, 0.1619, 0.0566, 0.0833, 0.0411, 0.0876, 0.0061, 0.0888, 0.0604, 0.013, 0.0, 0.0, 0.0426, 0.0154], [0.0, 0.3939, 0.1261, 0.0, 0.2115, 0.0588, 0.3659, 0.2095, 0.1509, 0.0556, 0.1233, 0.0511, 0.0, 0.0701, 0.047, 0.013, 0.0, 0.0, 0.0362, 0.0077, 0.2059, 0.1071], [0.0, 0.3654, 0.1863, 0.4878, 0.2, 0.0566, 0.1667, 0.2055, 0.0876, 0.0, 0.1168, 0.0302, 0.0, 0.0, 0.0, 0.0448], [0.0, 0.0465, 0.4545, 0.1008, 0.0394, 0.0, 0.3077, 0.1373, 0.0976, 0.1619, 0.1698, 0.125, 0.0822, 0.0584, 0.0, 0.1168, 0.0839, 0.0, 0.0, 0.0, 0.0384, 0.0, 0.0294, 0.119], [0.0364, 0.5758, 0.1261, 0.0538, 0.0164, 0.3846, 0.1373, 0.2683, 0.2, 0.0755, 0.2222, 0.0146, 0.0183, 0.0935, 0.0268, 0.039, 0.0, 0.0, 0.0384, 0.0154, 0.1471, 0.1429], [0.0, 0.0233, 0.6061, 0.1092, 0.0573, 0.0164, 0.2692, 0.1373, 0.4878, 0.2476, 0.1509, 0.0694, 0.0959, 0.073, 0.0, 0.1355, 0.0336, 0.026, 0.0, 0.0, 0.0384, 0.0077, 0.1176, 0.0833]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

