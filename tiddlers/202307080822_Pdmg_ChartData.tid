created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Govinda Ektar", "Aronorf Xideliesi", "Luke The Knight", "Legoh Brave", "Lost Uber Driver", "Rapiorel", "Bae Ken", "Free H\u00e4nd", "Elonith Requiem", "Elonith Requiem", "Legacy Of Mathus", "No Reserv\u00e9", "Shaca Booey", "Ateriuz", "Charr Surethang"];
const professions = ["Vindicator", "Firebrand", "Berserker", "Tempest", "Herald", "Willbender", "Reaper", "Vindicator", "Reaper", "Scourge", "Berserker", "Vindicator", "Berserker", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[295.2014, 153.0683, 108.1395, 54.8966, 374.5185, 146.2419, 198.5567, 75.3763, 446.68, 690.9341, 40.5806, 106.8553], [197.7923, 71.0862, 262.3333, 259.4677, 103.9485, 94.0854, 62.8925, 766.5236, 483.8352, 0.0, 595.4545, 172.0, 83.5685, 92.4082, 101.3534, 74.3529], [172.5468, 0.0, 179.2522, 1048.2241, 0.0, 1354.2419, 528.5773, 0.0, 333.1613, 1379.5127, 1613.7912, 0.0, 910.6667, 1009.0645, 123.1214], [1180.003, 437.4655, 605.0741, 805.1129, 714.4639, 392.7722, 300.8602, 1038.3382], [1515.8109, 2661.4066, 0.0, 2174.0, 825.8387, 674.1137, 230.4286, 623.3707, 347.4118], [912.9065, 53.1335, 1543.7211, 575.5, 1458.8148, 1811.1129, 394.8114, 1025.1935], [406.8993, 283.3913, 531.6053, 84.7241, 629.0741, 243.371, 808.6289, 89.4448, 393.5591, 986.0727, 987.978, 33.3692, 770.2121, 873.5484, 466.1783, 489.3265, 307.7759, 331.6807], [786.9792, 37.8448, 85.5338, 454.4194, 1154.4836, 2166.7692, 0.0, 929.8182, 715.5484, 742.7003, 628.4082, 306.0, 67.6555], [0.0, 479.6429, 2507.5579, 1343.3793, 2300.6296, 1475.6774, 2170.3505], [331.6441, 715.7527, 2188.9491, 2159.1648, 2557.1818, 1789.5484, 564.416, 1634.0408, 448.6724, 608.3613], [585.3813, 1093.8509, 1466.451, 2186.2931, 2147.963, 1087.371, 1815.299, 1083.0142, 624.5699], [198.4928, 20.3292, 1283.7834, 165.1897, 1214.0, 349.9839, 1954.0619, 203.363, 391.5591, 2176.1018, 1594.2967, 0.0, 79.1818, 739.3871, 608.4625, 881.2041, 302.5259, 373.3277], [699.0144, 1430.1708, 2162.4777, 885.569, 3115.7037, 566.5484, 1097.3402, 20.3772, 1177.0968, 1030.4327, 1933.033, 27.1538, 241.303, 884.0052, 130.2857, 74.7155, 1292.084], [735.518, 299.5652, 1937.4481, 1204.8276, 4120.8148, 1684.8871, 2047.7938, 892.1922, 657.5161, 2617.6836, 3913.3956, 0.0, 2117.303, 1367.6452, 570.9561, 421.0408, 1192.0259, 1443.7983], [373.5935, 252.8261, 3592.6231, 223.1724, 5610.2593, 2587.9516, 2792.2062, 1279.0214, 1989.3055, 4086.8571, 2374.7576, 4571.7742, 837.2222, 503.8571, 91.0172, 4.4286]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

