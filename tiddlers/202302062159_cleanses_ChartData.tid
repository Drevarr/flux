created: 20230206215940000
creator: Drevarr
modified: 20230705163518744
modifier: drevarr
tags: ChartData
title: 202302062159_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Sygaldry Verdandi", "\u00c2 R K", "Mirrors Dancer", "Johosh The Great", "Newtype Khan", "Raziel Umbra", "High Sorcer Baradun", "Arriasa", "Arkintor", "Mac Aaroni", "\u00c9\u00efbhear", "Etchery Howls", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Spellbreaker", "Chronomancer", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1135, 0.0, 0.0063, 0.0, 0.5574, 0.2216, 0.1828, 0.5868, 0.0, 0.0, 0.3708, 0.0385, 0.0, 0.0345], [0.0509, 0.0064, 0.0759, 0.3081, 0.0, 0.3688, 0.427, 0.0328, 0.0, 0.2366, 0.2874, 0.0, 0.0211, 0.0899, 0.0, 0.0, 0.0], [0.0073, 0.0513, 0.057, 0.373, 0.0, 0.15, 0.2809, 0.3115, 0.2216, 0.2366, 0.1497, 0.0, 0.0, 0.2921, 0.0513, 0.0, 0.0], [0.1455, 0.1346, 0.4873, 0.7676, 0.0, 0.5062], [0.0909, 0.0897, 0.1582, 0.3297, 0.0, 0.2812, 0.427, 0.4262, 0.1591, 0.1183, 0.1976, 0.0, 0.0737, 0.236, 0.141, 0.0722, 0.0], [0.1127, 0.0, 0.0759, 0.5351, 0.0, 0.1625, 0.6404, 0.2951, 0.3011, 0.1613, 0.3054, 0.2308, 0.0, 0.2584, 0.0513, 0.0103, 0.0345], [0.0255, 0.0385, 0.3987, 0.9297, 0.25, 0.382, 0.1148, 0.0909, 0.2796, 0.2036, 0.2308, 0.0, 0.382, 0.2051, 0.0, 0.0], [0.3745, 0.2564, 0.3291, 1.4162, 0.0, 0.6125, 0.8764, 0.459, 0.0341, 0.1935, 0.8084, 0.1538, 0.0211, 0.5506, 0.1987, 0.0515, 0.069], [0.5491, 0.4231, 0.8734, 1.3838, 0.0, 0.8562, 1.9888, 0.2787], [0.5855, 0.5, 0.8291, 1.7189, 0.0392, 1.2437, 1.5955, 0.7705], [0.7127, 0.6154, 1.0316, 2.0486, 0.0, 1.4438, 1.6067, 0.9344, 0.5625, 1.4946, 1.3413, 0.3462, 0.2632, 1.4494, 0.3462, 0.0309, 0.4828], [0.96, 0.8974, 1.4177, 2.2811, 0.0196, 1.6625, 0.2697, 1.7377, 0.3352, 1.3118, 1.8084, 0.8462, 0.3263, 1.427, 0.2821, 0.0619], [1.0182, 0.7564, 1.1519, 2.2973, 0.0, 1.1062, 0.2247, 1.1967, 1.0966, 1.6237, 2.1497, 0.3462, 0.3684, 1.4944, 0.359], [1.1018, 0.9679, 1.5949, 2.227, 0.0588, 1.4438, 1.4494, 1.0164, 0.7159, 1.2688, 1.3413, 0.6154, 0.2, 1.5169, 0.1474, 0.1546, 0.5517], [1.0255, 1.1731, 1.3481, 2.1568, 0.0, 1.5625, 2.0337, 2.082, 1.0114, 0.9892, 1.4311, 0.5385, 0.5789, 1.4944, 0.609, 0.3299, 0.2414]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

