created: 20230828221838000
creator: Drevarr
tags: ChartData
title: 202308282218_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Mar\u00eda Callas", "Legacy Nyx", "Kandy Land", "Tegan Parker", "Belvyn Brightblade", "Venomina The Sly", "Aira Draugr", "Selandir", "Lord Erin The Wise", "No Reserv\u00e9", "Legacy Of Mathus", "Crusader Siolith", "Glorious Gluvs", "Mort\u00e4rion", "K\u00e2 \u00d4tik R\u00e6j", "Scrappadoo", "Cat Wigglebooty", "Tootsie Pop Rocks", "Mad V King", "Arriasa", "Melody Phoenixstorm", "Sub Train", "Vee U", "Spirita Demon", "Daphne Agla\u00e9", "Rozaalyna", "Koralia Danai", "Solus Luxes", "Tyrian Deathmachine", "Mistwalker Cael", "Rina Of Theros", "Black Raspberry Pie", "Zaedy Zae", "Darks Na", "Arcanophage Farra", "Xanvias Einzbern", "Bella Sassy", "Newtype Khan", "Hyde En Sikh", "Drevarr Moonwillow", "Eibh\u00ebar", "My Birthday Girl", "Keypek The Drunk"];
const professions = ["Dragonhunter", "Vindicator", "Soulbeast", "Tempest", "Firebrand", "Druid", "Herald", "Tempest", "Weaver", "Vindicator", "Berserker", "Firebrand", "Berserker", "Scrapper", "Berserker", "Scourge", "Scrapper", "Scrapper", "Scourge", "Druid", "Scrapper", "Firebrand", "Weaver", "Druid", "Scourge", "Reaper", "Firebrand", "Firebrand", "Scrapper", "Herald", "Reaper", "Chronomancer", "Druid", "Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker", "Chronomancer", "Scrapper", "Chronomancer", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[615, 565, 0, 1164, 0, 4712, 0, 0, 38134, 3105, 592, 0, 912, 519], [12058, 186, 5538, 638, 6039, 1184, 29000], [0, 21095, 0, 548, 0, 3236, 0, 5366, 0, 0, 0, 38, 5302, 6023, 0, 564, 205, 0, 5450, 1112, 368, 5544, 0, 0], [0, 4744, 2755, 282, 2737, 0, 306, 371, 0, 35980, 10231, 2082, 0, 4143, 0], [0, 1247, 21063, 3337, 6077, 0, 4794, 1031, 21914, 0, 878, 5108, 1361], [0, 585, 5023, 421, 4136, 0, 2649, 2834, 16627, 0, 0, 0, 1014, 2951, 7009, 0, 3298, 282, 0, 16106, 1959, 0, 0, 1943, 29], [0, 2935, 41624, 0, 6512, 585, 1305, 0, 9115, 0, 275, 4739, 275], [0, 11409, 0, 3264, 1397, 2625, 0, 3374, 0, 282, 0, 0, 47670, 2506, 0, 0, 1894, 0], [0, 24735, 1451, 659, 6985, 6767, 0, 3531, 0, 4878, 3533, 0, 19400, 2322, 0, 0, 617, 277], [2964, 2196, 465, 7563, 0, 29778, 0, 1123, 1402, 2571, 282, 2079, 0, 889, 0, 0, 26511, 2297, 0, 0, 1626, 277], [1194, 12591, 1013, 0, 9010, 0, 14142, 0, 4762, 4676, 2697, 282, 6328, 45, 9093, 0, 0, 6872, 13248], [0, 554, 17315, 1333, 0, 340, 373, 17250, 359, 1925, 6592, 2836, 1248, 1814, 0, 3678, 585, 0, 35806, 2357, 0, 0, 519, 0], [0, 3761, 3569, 0, 1912, 127, 637, 3480, 0, 42431, 29104, 1112, 0, 9673, 356], [8218, 0, 2330, 5595, 380, 21546, 13701, 0, 8644, 4421, 37934, 4343, 2129], [0, 17736, 14463, 16475, 0, 13500, 0, 46383, 170, 1592, 3286], [0, 19363, 421, 1410, 0, 0, 0, 23034, 0, 2469, 1200, 964, 8250, 3095, 0, 421, 0, 0, 53338, 9534, 0, 0, 3822, 0], [106, 2010, 41202, 2254, 533, 7666, 0, 20722, 1230, 4255, 7825, 2471, 4421, 1543, 0, 36047, 4271], [0, 4857, 38539, 4035, 219, 1412, 796, 9848, 0, 1051, 3794, 4864, 2334, 4841, 2111, 0, 137, 46689, 11261, 1517, 319, 478], [66538, 1396, 12491, 910, 8595, 1659, 52017], [17978, 583, 1011, 413, 641, 8569, 8488, 13019, 663, 0, 112953], [13728, 68109, 3585, 15064, 2053, 11919, 3260, 43809, 2828], [0, 1603, 11035, 421, 2430, 0, 9169, 0, 24008, 0, 2966, 2137, 1992, 3734, 10167, 0, 9349, 2223, 46, 81499, 4671, 0, 2319], [0, 1972, 21448, 1962, 2170, 0, 1798, 2737, 15627, 170, 1780, 1734, 274, 5483, 13001, 0, 6709, 143, 2948, 84243, 2329, 0, 3090, 4226, 277], [0, 2667, 33499, 2331, 6855, 40, 3527, 1188, 28464, 547, 14, 6949, 3410, 5788, 60, 0, 8578, 0, 16, 131610, 7282], [0, 2644, 43917, 3856, 5882, 0, 3808, 1015, 46910, 0, 4267, 9720, 5938, 3102, 13221, 123, 21030, 339, 0, 78658, 6836, 0, 0, 5861, 585], [0, 11944, 70848, 4962, 8524, 0, 13171, 4014, 59958, 230, 6936, 12448, 1737, 12081, 11043, 3913, 11459, 677, 25173], [0, 2556, 47186, 1440, 1725, 0, 4775, 1657, 32850, 0, 3076, 7477, 4290, 13332, 11065, 6687, 2735, 0, 118477, 3051, 767, 0, 5144, 0], [81, 1243, 50090, 2571, 7502, 140, 4589, 0, 37849, 0, 3389, 4051, 4034, 5613, 9754, 0, 8774, 866, 0, 125567, 4254, 585, 0, 3847, 344], [17798, 51353, 8449, 3385, 318, 22367, 5013, 17827, 1547, 5692, 9191, 0, 36722, 6304, 4652, 1057, 0, 27071, 40871, 653, 11, 12186, 3897], [258, 7799, 41212, 2180, 2419, 0, 6086, 2461, 34005, 2968, 3617, 15798, 5021, 16120, 4524, 778, 7891, 3854, 0, 108909, 11083, 2995, 0, 3418, 0], [1881, 2040, 39147, 962, 3668, 0, 7714, 1998, 40151, 0, 6625, 4224, 5677, 6091, 12746, 44, 15685, 1742, 73, 116394, 16551, 2948, 0, 943, 0], [604, 6153, 544, 5895, 3463, 56201, 0, 6282, 10028, 3828, 8374, 5076, 0, 12333, 2798, 25, 176895, 11934, 67, 0, 1514], [0, 3159, 48843, 742, 742, 0, 10507, 1751, 36619, 0, 4033, 10226, 3523, 10020, 9646, 0, 13727, 5893, 0, 137825, 8062, 0, 0, 4764, 1956], [5386, 14917, 50400, 2883, 11945, 0, 9050, 23, 38206, 0, 2263, 6054, 2983, 3324, 17583, 2441, 11721, 0, 5, 132955], [0, 4037, 62155, 2630, 6940, 1038, 10175, 1923, 34462, 0, 10437, 9614, 9639, 14266, 6833, 28, 17134, 5054, 0, 109303, 10382, 160, 7050, 0], [0, 5451, 64724, 2578, 10282, 659, 14226, 2541, 44761, 1302, 2084, 11988, 3155, 11795, 5149, 0, 14412, 4076, 0, 112319, 16881, 2944, 0, 6505, 0], [0, 4290, 56934, 2264, 8107, 1202, 9178, 0, 41161, 0, 9626, 11636, 3133, 10849, 16498, 15, 7426, 4365, 22, 135558, 20361, 0, 15, 4807, 1159], [0, 5534, 51645, 5466, 10618, 4271, 4109, 6038, 51160, 1629, 7603, 9220, 7973, 8821, 5109, 631, 14539, 2151, 0, 145380, 15000, 2404, 5407, 0, 0], [0, 5321, 42100, 4317, 13382, 1282, 16838, 0, 59956, 1721, 11843, 15043, 9298, 16116, 16743, 100, 13847, 5741, 22, 164701, 24077, 187, 0, 8660, 2871], [0, 3271, 69206, 4888, 18535, 0, 10746, 6087, 59896, 2852, 8079, 10068, 6025, 13928, 16176, 186, 12903, 10002, 9, 184531, 24630, 64, 15, 15072, 931], [0, 4851, 48402, 7106, 12686, 1677, 10032, 3530, 46673, 3727, 16641, 19252, 10518, 12910, 16140, 30, 19316, 4571, 334, 226806, 31040, 723, 0, 2085, 504], [590, 16399, 133963, 2736, 22575, 349, 26794, 1805, 86910, 540, 12540, 13211, 13014, 26252, 9377, 50, 22260, 3823, 158, 375783, 29303], [0, 44305, 180157, 7766, 29368, 2694, 23326, 934, 111219, 4468, 22949, 29902, 13569, 6416, 31470, 1720, 49596, 22150, 238, 201992, 83473, 2164, 0, 13012, 0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

