created: 20230225215428000
creator: Drevarr
modified: 20230705163520249
modifier: drevarr
tags: ChartData
title: 202302252154_evades_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Prince Valentin X", "Roided Barack", "Viral Marketing", "Blanco Padre Guard", "Bella Sassy", "Smol Gluvs", "Xanvias Tseli", "Lord Erin The Wise", "Newtype Khan", "Harry Callahann", "Smol Daddy Tika", "Venomina The Fierce", "Tegan Parker", "Viral Marketing", "Mac Aaroni", "Tootsie Pop Tart", "Blackchars", "Sparks Malefacio", "Sp\u00edcy Cheese", "Be\u00eb", "Daring Deathblade", "Sizklea", "Koralia Danai", "Gabe Malhorn", "Hyde En Sikh", "Tribal S", "Morv\u00e4rth", "Madrigal Moonshade", "Sygaldry Verdandi", "Ace Hammers", "Grasszanine", "Vopiscus Zergherdus", "Primal Clone", "Husky Guard", "Zadie Miststep", "Drevarr Moonwillow", "Aronorf Xideliesi", "Mistwalker Caelon", "Sassy Daddy Demon", "Xyntharos"];
const professions = ["Scrapper", "Druid", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scourge", "Berserker", "Weaver", "Spellbreaker", "Scrapper", "Berserker", "Spellbreaker", "Tempest", "Willbender", "Tempest", "Scrapper", "Renegade", "Scourge", "Berserker", "Scourge", "Scourge", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Druid", "Scourge", "Vindicator", "Firebrand", "Vindicator", "Spellbreaker", "Scrapper", "Chronomancer", "Dragonhunter", "Tempest", "Scrapper", "Firebrand", "Vindicator", "Vindicator", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Evaded Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 1, 1, 0, 0, 0, 1, 3, 0, 0, 10], [6, 0, 11], [0, 18], [3, 0, 16], [1, 0, 1, 9, 1, 7, 3, 2, 0, 0], [0, 10, 3, 0, 0, 0, 3, 5, 1, 0, 5], [5, 0, 11, 3, 3, 2, 0, 0, 7], [0, 0, 0, 5, 4, 2, 3, 9, 0, 0, 13], [1, 0, 2, 8, 0, 0, 12, 14], [0, 0, 2, 4, 0, 4, 4, 7, 3, 1, 12], [0, 3, 10, 9, 10, 0, 1, 5], [6, 0, 7, 0, 0, 4, 1, 0, 0, 21], [1, 1, 15, 2, 5, 1, 9, 5], [0, 1, 3, 3, 2, 0, 2, 4, 2, 0, 24], [3, 5, 4, 6, 9, 0, 14], [0, 0, 1, 8, 7, 2, 2, 20, 0, 0, 3], [1, 1, 8, 0, 4, 0, 12, 3, 1, 15], [24, 2, 5, 0, 9, 4, 1], [0, 1, 11, 0, 7, 6, 10, 11, 0, 0], [4, 3, 0, 8, 3, 3, 11, 0, 0, 18], [0, 6, 7, 4, 4, 3, 15, 0, 0, 12], [0, 0, 15, 1, 5, 4, 18, 8], [0, 4, 7, 12, 0, 23, 6, 0], [1, 1, 3, 11, 1, 3, 2, 7, 15, 0, 8], [0, 3, 2, 5, 0, 0, 2, 18, 11, 2, 9], [4, 0, 2, 3, 6, 14, 2, 11, 0, 0, 11], [0, 0, 1, 2, 2, 8, 2, 23, 1, 0, 14], [31, 0, 0, 5, 0, 8, 2, 7, 0], [3, 0, 4, 2, 2, 7, 13, 12, 0, 11], [2, 10, 5, 1, 2, 0, 4, 25, 0, 6], [3, 0, 6, 11, 14, 3, 0, 10, 0, 13], [19, 1, 0, 7, 10, 5, 2, 17, 0], [1, 1, 8, 0, 20, 0, 0, 31], [0, 0, 9, 1, 3, 7, 17, 3, 0, 22], [0, 1, 1, 9, 3, 2, 37, 2, 0, 8], [10, 8, 0, 0, 0, 0, 4, 24, 0, 0, 18], [5, 16, 11, 0, 8, 0, 7, 3, 8, 0, 13], [1, 0, 14, 7, 4, 0, 2, 23, 0, 25], [3, 0, 26, 13, 2, 6, 4, 25, 1, 17], [1, 0, 4, 4, 18, 13, 32, 4, 15, 1, 16], [14, 0, 23, 18, 7, 1, 0, 38, 10, 5, 31]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

