created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Koranthin", "Erin Celes", "S\u00e2ucy K\u00e2t", "Blaze All Might", "Newtype Khan", "Miphest\u00f6", "Enter Effore", "Valaria Emberstorm", "Danaeryn", "Naithan Stone", "Zaedy Zae", "Aisling Vexwind", "Whip \u00d1 Sl\u00e0pper", "Perpetual Hope", "Artakama Nahid"];
const professions = ["Firebrand", "Herald", "Chronomancer", "Firebrand", "Spellbreaker", "Tempest", "Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.976, 5.0, 2.9655, 25.2807, 22.0252, 13.0159, 0.0, 17.9828, 11.9953, 0.0, 0.0, 8.0, 7.9808], [0.0, 1.0, 0.0, 19.9737, 32.0023, 20.3294, 0.0, 3.9828, 0.0, 0.0, 5.0, 2.9737, 9.9808], [31.944, 0.0, 0.0, 5.0702, 26.1648, 40.0833, 0.0, 15.9569, 2.9953, 0.0, 0.0], [34.0092, 28.0198, 0.0, 16.9828, 34.0651, 0.0, 7.0, 0.0, 0.0], [1.992, 4.0, 21.9123, 56.1579, 16.0437, 3.9444, 12.9828, 33.0093, 3.0303, 5.0], [106.9565, 25.0437], [19.096, 4.0, 8.9655, 31.8772, 84.4943, 69.0754, 0.0, 20.9224, 44.107, 12.6271, 6.9474, 25.9808], [14.952, 25.6078, 124.2193, 136.7208], [11.96, 4.0196, 0.9655, 40.9386, 101.7712, 84.1706, 0.9722, 47.2586, 41.6093, 1.0, 13.8983, 7.4737, 28.7692], [31.96, 6.5882, 7.9655, 129.3246, 174.8192], [52.52, 41.1569, 15.1379, 73.2895, 201.3135], [1.0, 10.9655, 59.5351, 117.254, 85.3056, 1.9722, 52.3707, 105.386, 13.0169, 12.1053, 17.1731], [22.176, 13.3725, 4.9655, 60.7018, 161.8169, 99.6468, 8.9167, 58.7155, 114.3209, 2.0, 39.4407, 11.6731], [16.072, 7.0196, 7.9655, 37.5614, 162.1281, 133.9762, 11.0278, 65.569, 78.3349, 1.0, 40.8475, 43.3026, 61.75], [65.312, 44.5686, 48.9737, 235.4119, 167.3492, 0.0, 109.4741, 150.4977, 16.2424, 56.0169, 57.1579]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

