created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Thats Not Nice", "Miphest\u00f6", "Whip \u00d1 Sl\u00e0pper", "Dalveirric", "Lucky Leipreach\u00e1n", "Perpetual Hope", "Luke The Knight", "Artakama Nahid", "Porlen", "Greg The Knight", "Jello Jawn", "Hayuf", "Audra Storm", "Zaedy Zae", "K\u00e2 \u00d4tik R\u00e6j", "Jerryatric Reflexes", "Zayde Sunsabre", "Erin Celes", "Lost Uber Driver", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Tempest", "Soulbeast", "Scrapper", "Tempest", "Berserker", "Tempest", "Ranger", "Firebrand", "Virtuoso", "Firebrand", "Weaver", "Druid", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Herald", "Herald", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[211.4087], [242.9283, 33.3396], [21.1825, 0.0, 19.9508, 17.4557, 109.8006, 37.5732, 0.0, 21.6282, 92.7553, 0.0, 30.2127, 0.0], [113.9137, 36.4915, 57.4081, 0.0, 0.0, 24.614, 128.7914, 0.0], [9.5737, 16.6138, 12.0257, 36.6419, 309.6407], [48.1462, 18.817, 0.0, 7.5992, 135.9507, 64.1214, 0.0, 22.8149, 1.8296, 40.5521, 0.0, 20.2479, 30.2442], [112.014, 0.0, 111.701, 150.1904, 0.0, 0.0, 0.0, 28.2703], [68.1262, 22.4563, 16.5528, 118.5668, 103.8996, 0.0, 19.9439, 50.4347, 0.0, 19.9963, 0.0], [181.7133, 195.804, 0.0, 0.0, 19.5772, 38.6828], [272.7144, 0.0, 125.3287, 37.6272, 0.0, 79.1774], [117.66, 54.7536, 30.4256, 58.1605, 463.5696], [188.7, 77.3405, 18.5542, 84.946, 643.9457], [108.8725, 52.6157, 17.7503, 62.9006, 366.6954, 143.1486, 4.0298, 34.1075, 127.4391, 10.291, 22.987, 38.1216, 29.9198], [169.7375, 64.0886, 29.7679, 20.9543, 752.2605], [315.4914, 106.7072, 50.9507, 335.2237, 142.4408, 67.6658, 33.8811], [62.2525, 31.6771, 13.4711, 185.6923, 884.1996], [322.4592, 50.7175, 98.6476, 444.9232, 41.1411, 183.1974, 89.7028, 52.9308], [32.2362, 75.4637, 54.8019, 109.6247, 360.9008, 258.6024, 42.8771, 72.1961, 326.7119, 0.0, 0.0, 83.901, 24.0656], [595.1736, 81.0875, 246.0256, 311.7565, 60.5335, 149.7756, 97.3034], [42.0413, 78.695, 53.9471, 991.3258, 135.9162, 65.4379, 31.581, 352.0883, 20.4781, 23.5764], [252.34, 96.5328, 0.0, 79.7168, 631.465, 206.2998, 31.5288, 73.6124, 216.1373, 85.2852, 86.4031, 100.6377, 41.6146]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

