created: 20230628220723000
creator: Drevarr
modified: 20230705163539646
modifier: drevarr
tags: ChartData
title: 202306282207_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Sirius Quack", "I Toxicheart I", "Drumina", "Cat Wigglebooty", "Cpt Z Brannigan", "Lucky Leipreach\u00e1n", "Vopiscus Zergherdus", "Specialist Zeff", "Dim Og", "My Birthday Girl", "Be\u00eb", "Irin The Undeath", "Rozaalyna", "Smol Gluvs"];
const professions = ["Reaper", "Scrapper", "Druid", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Reaper", "Reaper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 45331, 24712, 393, 49367], [261, 18782, 10167, 9497, 20746, 9567, 6877, 14575, 4809, 0, 21129, 9484, 441], [11908, 13664, 0, 7873, 12797, 4702, 9853, 10136, 0, 5694, 5848, 3056, 5246, 11046, 0, 4325, 9826, 12178, 0, 10554, 8708, 420, 8913], [5376, 1825, 61446, 9243, 26244, 11586, 13062, 1999, 8073, 0, 8108, 918, 799, 154, 1084, 0, 220, 2161, 835, 90, 1268, 1020, 0, 1241], [3613, 884, 18350, 46593, 11762, 1024, 15689, 0, 0, 473, 0, 17212, 6494, 9036, 38053, 3269, 16723, 2537], [2587, 0, 5789, 41792, 24799, 22866, 22374, 1156, 15601, 6005, 19565, 12804, 5396, 23580, 584, 3025, 41171, 31440, 8979, 13530, 7564, 342, 1131], [24219, 27972, 11378, 32098, 35089, 11927, 19901, 24867, 0, 23150, 12007, 13618, 6912, 12071, 0, 10546, 27054, 28466, 9833, 26337, 20533, 31054], [7157, 571, 24434, 14986, 15062, 40983, 33038, 11251, 21430, 28133, 0, 34094, 23180, 9079, 6457, 14466, 1317, 5142, 13158, 39034, 9049, 12628, 15744, 0, 36483], [1779, 2229, 38231, 62859, 17453, 34525, 36046, 7282, 21694, 12549, 1031, 31021, 38255, 17928, 2428, 39892, 1772, 6544, 23570, 17010, 32074, 9297, 1782, 28992], [2261, 0, 10791, 75910, 12547, 28793, 27028, 16106, 22342, 21031, 829, 31560, 20551, 21193, 10635, 36974, 17963, 40079, 29933, 8476, 26449, 22329, 0, 31889], [0, 0, 0, 0, 0, 2786, 0, 41913, 0, 0, 69998, 48546, 43985, 21721, 46532, 124, 19245, 137539, 75907, 9855, 54759, 51811, 2445, 70724], [0, 92561, 30497, 54422, 71879, 88473, 1725, 47224, 56717, 0, 74354, 59076, 40762, 25246, 71322], [0, 40396, 126985, 33949, 62450, 77606, 16042, 28181, 43552, 0, 68734, 37313, 16665, 39, 25559, 0, 25416, 62978, 41044, 1116, 66496, 32995, 549, 36465], [1209, 43756, 141309, 41026, 65667, 56606, 28675, 36030, 57969, 6790, 59020, 59557, 37745, 31631, 10307, 0, 45772, 104375, 75277, 6146, 72319, 14836, 0, 51275]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

