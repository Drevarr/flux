created: 20230515221048000
creator: Drevarr
modified: 20230705163530312
modifier: drevarr
tags: ChartData
title: 202305152210_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Husky Guard", "Klenga", "Gavann", "Ark Darkness", "Venom The Ferocious", "Sub Train", "Sygaldry Verdandi", "Bella Sassy", "Koralia Danai", "Solus Sanctus"];
const professions = ["Firebrand", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[51.187, 30.502, 0.0, 0.0, 181.6437, 176.3827, 638.0899, 0.0, 41.405], [47.565, 0.0, 0.0, 13.2521, 171.6979, 191.1187, 0.0, 51.011, 22.5994, 14.2776, 0.0, 25.4646, 0.0, 23.1336, 142.4475, 43.3008, 60.7104, 134.2752, 25.0797, 139.5806, 0.0, 59.0094, 0.0, 68.339], [379.7664, 275.9117, 39.786, 356.0325, 39.9561, 167.4018, 0.0, 223.9492], [193.733, 67.39, 0.0, 125.1478, 268.9075, 204.2095, 158.1955, 16.9128, 16.6436, 172.5934, 40.1808, 0.0, 178.1325, 49.6843, 169.2384, 215.7946, 68.3794, 110.6154, 37.898, 0.0, 46.4039, 67.5648], [0.0, 106.908, 23.8009, 0.0, 34.1765, 387.6672, 853.632, 0.0, 167.1106, 75.0763, 176.6232, 0.0, 323.2387, 65.8653], [187.5619, 0.0, 0.0, 123.5525, 113.2234, 169.668, 0.0, 209.8606, 32.3651, 150.7968, 412.8345, 121.9565, 315.4656, 372.6989, 46.0435, 398.9266, 0.0, 110.2051, 241.5442], [83.156, 49.981, 0.0, 0.0, 246.889, 503.88, 45.2291, 0.0, 87.2817, 117.3864, 166.8384, 0.0, 303.15, 18.3229, 50.6772, 325.9035, 181.9526, 340.5168, 397.441, 31.9492, 435.1185, 39.9561, 160.5882, 0.0, 191.6447], [226.3793, 277.538, 19.8383, 53.9784, 155.0398, 646.2682, 1104.9792, 11.0012, 0.0, 225.7401, 150.9173, 40.3704, 24.4705, 197.8963, 58.7307, 31.6008, 435.357, 228.2443, 438.3552, 245.8531, 23.2537, 529.0658, 23.9879, 217.0347, 24.1118, 216.4889], [137.4853, 631.633, 52.7182, 87.804, 507.3669, 1166.7494, 1248.4368, 58.4734, 598.8819, 253.8038, 89.7912, 92.3099, 260.1835, 107.6352, 154.476, 394.1145, 207.0403, 447.576, 371.8128, 48.9157, 440.8299, 280.4025, 221.848, 82.5815, 99.4469], [222.4401, 484.408, 45.144, 24.624, 274.8071, 808.8307, 1388.1005, 16.6855, 42.1549, 467.214, 182.8622, 147.5064, 23.8107, 314.3059, 66.2869, 219.3912, 486.252, 234.6278, 739.5408, 520.5379, 65.4578, 434.1277, 143.5723, 324.2394, 517.0819], [718.307, 68.4182, 67.0248, 405.0366, 1299.095, 1624.9834, 20.918, 27.7035, 349.7894, 163.8595, 193.9896, 23.7923, 287.1841, 140.2273, 182.3976, 551.07, 239.1811, 481.1136, 565.6598, 110.0702, 367.9216, 11.9939, 339.0542, 457.6108]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

