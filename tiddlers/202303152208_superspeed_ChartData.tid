created: 20230315220824000
creator: Drevarr
modified: 20230705163522278
modifier: drevarr
tags: ChartData
title: 202303152208_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Sp\u00edcy Cheese", "Etcheriii", "Sofya De Nova", "Mac Chiato", "Demon Sekhmet", "Zadie Miststep", "Smol Daddy Tika", "Xanvias Tseli", "Cerys Fireblade", "Arcanophage Farra", "Mike The Archmagus", "Cat Wigglebooty", "Fruji", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Tempest", "Berserker", "Herald", "Weaver", "Tempest", "Berserker", "Tempest", "Berserker", "Berserker", "Berserker", "Spellbreaker", "Tempest", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.712, 0.532, 0, 0.597, 0.433, 0, 1.073, 0, 0.517, 0.672, 0.312, 0.616], [0, 0.276, 0.294, 0, 0, 0, 0.169, 0, 0.539, 0.138, 0, 0.53, 1.327, 0, 0, 0, 0, 0.307, 0.373, 0, 0.075, 0.257], [0.88, 0.59, 0, 0.844, 0, 0, 0.494, 0, 0.616, 0.276], [0, 0.404, 0.177, 0.529, 0, 0.785, 0, 0.298, 0, 0.185, 0.249, 0.712, 0.178, 0, 0.795, 0.716, 0, 0, 1.006, 0.495, 0.882, 0.447, 0.811, 0.463], [0.453, 0.497, 0.398, 0, 0.506, 0, 0, 0.609, 0, 0.601, 0.58, 0, 0.674, 1.078, 0.796, 0, 0, 0.49, 0, 0.461, 0.448, 0, 0, 0.461], [0.552, 0.585, 0, 0.844, 0, 0, 1.041, 0, 0.616, 0.462, 0, 0.298, 0, 0, 0.88, 1.833, 0, 0.914, 0, 0, 0.515], [0.603, 0.645, 0.707, 0.644, 0, 0, 0.591, 0, 0.369, 0.643, 0.712, 0.533, 0, 0.794, 0, 0, 0.77, 0, 0.43, 0.673, 0.312, 0.609], [1.006, 0.562, 0.663, 0, 0.843, 1.316, 0.252, 0.889, 0, 0.424, 0.411, 1.186, 0.595, 1.352, 1.322, 0, 0, 0.816, 0, 0.657, 1.086, 0.488, 0.773], [1.009, 1.173, 1.18, 0, 0.843, 1.315, 0, 1.184, 1.672, 1.317, 0.783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.121, 0, 0, 0], [0.503, 0.685, 0.882, 0.789, 0.419, 0.153, 1.74, 0.813, 0, 0.504, 0.795, 0, 1.113, 0, 0, 0, 0, 0, 0, 0.895, 0.479, 0.748, 0.582, 0.837], [0.88, 0.828, 0.539, 0.843, 0, 0, 0.842, 0, 1.177, 0.898, 0, 0.595, 0, 1.327, 0.597, 0, 1.001, 0.721, 0.747, 0, 0.778], [0.874, 0.79, 0.884, 0.892, 0.948, 1.033, 0, 0.932, 1.002, 0.896, 0.663, 0.977, 0.706, 0.798, 0.791, 0.716, 1.526, 0.452, 0.896, 0.745, 0.892], [1.421, 0.948, 1.517, 1.048, 0.33, 1.048, 1.322, 1.066, 0.973, 0.811, 0.795, 1.067, 1.328, 1.513, 1.346, 1.611, 1.029, 1.071, 0.991], [0.739, 0.984, 1.04, 0.354, 1.297, 0, 0, 1.102, 0, 1.359, 0.962, 0, 1.425, 0, 0.398, 0.537, 0, 0.548, 0.188, 0.248, 1.114, 0, 0.312, 0.811], [1.744, 1.157, 1.505, 2.456, 1.2, 0.655, 2.102, 1.104, 2.007, 1.385, 0.682, 0.622, 0.861, 2.308, 1.195, 0.804, 2.034, 1.724, 1.296, 1.246, 1.541], [1.659, 1.738, 1.792, 2.832, 1.767, 0.986, 1.568, 1.591, 2.504, 1.836, 1.934, 0.989, 1.566, 0.407, 2.381, 1.449, 0.5, 2.403, 2.015, 1.851, 2.125, 1.465, 0.234, 1.766]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

