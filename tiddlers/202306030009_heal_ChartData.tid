created: 20230603000934000
creator: Drevarr
modified: 20230705163533095
modifier: drevarr
tags: ChartData
title: 202306030009_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Pu Ella", "Sister Elon\u00edth", "Pamtastic", "Tegan Parker", "Sakis Ranger", "Zadey Starbolt", "Johosh Of The North", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Tempest", "Druid", "Scrapper", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[169.679, 135.9706, 227.2079, 420.35, 3.9286, 6.1905, 275.1864, 350.7292, 603.1692, 433.4894, 68.8659, 536.7174, 494.96, 340.3651, 146.0738], [39.5679, 92.1471, 546.0716, 568.9833, 39.0, 253.5763, 1242.7148, 514.241, 433.3121, 59.878, 1262.9348, 557.1771, 302.0582, 779.7718, 316.9407, 6.358, 394.9559, 115.622, 254.6889, 190.3015], [0.0, 220.9012, 24.3824, 758.9723, 26.5333, 0.0, 836.5593, 1932.4765, 1153.9487, 225.1064, 48.4634, 521.1957, 713.3486, 665.3704, 638.5168, 613.2296, 95.5432, 511.3456, 167.061, 388.5333, 212.5404], [142.383, 338.4074, 327.0882, 1082.1732, 187.8167, 0.0, 5.0952, 991.322, 2171.657, 498.0718, 948.6596, 178.6585, 2808.0217, 260.7486, 743.037, 936.3758, 419.5185, 173.7407, 644.8088, 517.5854, 639.6444, 286.1581], [60.5532, 709.5926, 32.9412, 1042.0485, 749.9167, 20.5238, 46.5238, 1064.8136, 2412.3682, 1178.7179, 679.4468, 267.6341, 2015.1304, 0.0, 627.6743, 475.127, 772.8523, 670.0148, 148.4444, 563.5515, 256.061, 399.7778, 526.4044], [148.1064, 583.8765, 1728.582, 952.5667, 49.0714, 87.0, 1178.7119, 2391.3538, 994.0564, 1202.1489, 88.2317, 3507.7826, 0.0, 1001.1314, 1004.9101, 1475.6309, 769.9926, 16.7407, 1064.5882, 177.0854, 715.2889, 373.5404], [155.383, 619.4074, 99.7941, 1532.8476, 735.15, 95.4048, 36.0476, 825.7797, 2787.5957, 1996.8256, 1361.0496, 306.6463, 2400.2391, 1203.76, 796.8624, 1271.8389, 472.5704, 121.8148, 964.5809, 661.0366, 588.5926, 540.1618], [285.2553, 765.0, 342.8529, 1740.4319, 958.45, 878.0169, 2621.1119, 1446.1077, 1454.7589, 212.4512, 1874.6957, 2.4286, 1857.1657, 848.2857, 750.5704, 81.0741, 1320.4779, 706.7317, 981.9037, 615.1618], [59.5106, 786.9383, 90.7941, 2015.9746, 1108.3333, 112.4286, 48.5714, 1337.8475, 3725.6101, 1816.9333, 1397.2199, 347.7195, 1686.7391, 0.0, 1569.8057, 623.6349, 2289.5973, 1261.1852, 138.7901, 1274.8235, 736.2439, 884.5037, 612.1324]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

