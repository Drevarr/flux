created: 20230520000848000
creator: Drevarr
modified: 20230705163530847
modifier: drevarr
tags: ChartData
title: 202305200008_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Madame Charrlotte", "Cerys Fireblade", "Xanvias Einzbern", "Spreadflamesoflight", "Grasszanine", "Mistwalker Caelon", "Ryvalia Fazebringer", "Air One Com", "Aronorf Xideliesi", "Zaylen Harker", "Khailerian", "Solus Sanctus", "Blanco Padre Guard", "Tika Fiery", "Jupi Jupi Jupi", "Bella Sassy", "Koralia Danai"];
const professions = ["Spellbreaker", "Scourge", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.0988, 17.6778, 0.0, 3.6326, 0.0, 0.0, 0.726, 2.6385, 1.8058, 0.0, 3.5279, 0.0, 0.0, 0.0, 0.0, 2.0286, 1.7596, 1.7766, 0.0, 0.0, 0.0, 0.0, 1.7578, 0.0, 0.0, 3.1387, 2.7269], [2.2419, 27.6696, 1.3709, 4.5408, 0.0, 2.391, 1.9668, 0.8944, 0.301, 0.8555, 2.5995, 2.1384], [2.0988, 19.9836, 1.9706, 5.7895, 0.344, 0.9438, 0.0, 0.0, 0.0, 0.0, 3.6208, 6.732, 1.8528, 0.0221, 0.0, 1.4876, 2.011, 1.7766, 0.0, 0.0, 2.6418, 2.5375, 3.3398, 1.0501, 4.0186, 0.0, 1.9927], [1.0494, 24.5952, 0.0, 4.6543, 0.0, 2.0764, 0.0, 1.3863, 1.0701, 1.3037, 3.5279, 4.9104, 3.335, 0.0, 0.0, 2.4343, 3.4354, 1.9458, 0.0, 1.0701, 1.06, 3.164, 0.0, 4.405, 0.8681, 1.0488], [2.385, 21.9051, 0.3427, 6.6977, 0.0, 1.8876, 0.0, 3.4778, 5.3777, 4.5492, 2.2968, 4.632, 1.6339, 0.2115, 4.2601, 6.1167, 1.3113, 0.0, 0.0, 2.0733, 2.5696, 4.834, 2.7529, 9.0418, 0.0, 0.8915], [4.5792, 25.7481, 0.0, 5.1084, 0.0, 2.0764, 0.0, 1.6994, 4.0462, 1.6703, 5.5704, 7.2072, 3.335, 1.6781, 0.0, 1.6229, 5.4463, 2.115, 0.0, 0.0, 3.6784, 1.8308, 3.3398, 2.0717, 5.3323, 2.827, 1.4683], [0.1908, 47.2689, 3.0845, 7.7194, 4.2156, 0.0, 2.0124, 2.0064, 4.3635, 8.316, 1.6675, 2.5613, 0.3525, 3.1105, 6.787, 0.0, 2.6082, 0.0, 0.4682, 0.0, 0.2637, 0.0, 6.7234, 2.4931, 0.7866], [3.816, 40.3515, 0.0, 7.2653, 0.0, 2.328, 0.0, 5.0534, 3.9794, 0.0, 1.3926, 7.3656, 3.0571, 0.0, 0.0, 7.9115, 6.2843, 2.961, 0.0, 0.0, 2.6752, 5.364, 2.0215, 0.0, 6.6461, 2.226, 3.3562], [4.2453, 63.0252, 0.2356, 12.3737, 0.0, 4.2156, 0.1584, 2.4149, 3.8456, 1.7926, 7.52, 8.8704, 3.4277, 2.3846, 0.0, 6.4239, 5.5301, 2.3688, 0.0, 5.1498, 0.3854, 4.0429, 1.8731, 10.0464, 1.6695, 1.783], [3.0051, 52.2648, 3.7699, 8.741, 0.0, 3.2089, 0.0, 3.6223, 2.6418, 1.0185, 9.5625, 10.9296, 7.967, 4.0848, 0.0, 0.9467, 10.5575, 3.384, 0.0, 0.0, 6.2533, 1.9914, 9.8437, 0.0, 11.2829, 2.5599, 4.0903], [9.0153, 76.4757, 2.9774, 14.3035, 4.1605, 4.8448, 0.2244, 2.2807, 4.4141, 1.5889, 11.4193, 17.1072, 10.561, 4.1731, 3.572, 3.5162, 15.0822], [5.1993, 84.546, 0.0, 29.8558, 0.3604, 9.1234, 0.132, 1.9677, 2.4077, 5.7561, 15.9192, 17.509, 1.391, 0.0705, 2.7724, 6.7032, 5.3721, 0.0567, 0.0, 2.1067, 0.0], [1.8603, 96.4593, 2.2277, 15.8928, 0.0, 7.047, 1.0296, 5.0086, 5.1163, 1.5481, 10.7694, 20.8296, 11.58, 4.1952, 0.094, 5.0039, 16.0877, 5.2029, 0.0, 0.0, 8.4603, 0.4818, 9.4042, 3.065, 15.5333, 6.7225, 3.8281], [2.7666, 94.9221, 3.1916, 15.7793, 3.0958, 5.7257, 2.2308, 4.472, 3.5446, 6.5591, 16.1542, 18.9288, 15.9341, 3.7978, 0.0, 15.9583, 11.563, 3.8493, 0.0, 0.0, 4.5144, 3.5011, 7.207, 2.8664, 17.8517, 3.7397, 6.3977], [6.3441, 94.9221, 4.0055, 28.2665, 1.3923, 13.0874, 0.8712, 15.652, 8.9285, 3.9925, 16.247, 20.6712, 18.6206, 4.9238, 4.9585, 14.4707, 18.6014, 7.3602, 2.5515, 0.0, 11.3362, 2.5054, 23.9061, 6.2578, 22.5658, 7.791, 6.7648], [10.8279, 100.6866, 5.2907, 25.9961, 2.3915, 12.6469, 3.8412, 6.7974, 8.8282, 3.8703, 19.5892, 26.6112, 25.5686, 3.4224, 0.0, 13.9973, 16.9256, 9.7713, 0.0, 0.0, 7.6578, 4.8501, 21.533, 5.9598, 24.1114, 3.1832, 13.582], [8.0136, 116.0586, 4.7338, 27.2448, 6.1753, 10.6335, 2.3496, 10.2856, 10.0989, 8.7184, 26.8308, 21.7008, 25.8466, 5.233, 3.478, 16.6345, 18.35, 6.5565, 2.6365, 7.6578, 6.6488, 20.3026, 3.661, 18.0062, 6.1438, 12.2185], [11.2572, 119.9016, 7.5184, 30.5369, 1.3432, 10.1301, 0.2244, 3.4882, 10.7342, 7.6184, 23.3957, 24.156, 30.108, 5.3213, 2.961, 16.2288, 18.6852, 9.2637, 0.0, 0.0, 7.6578, 8.1585, 24.9608, 3.4482, 23.0294, 5.3869, 11.327]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

