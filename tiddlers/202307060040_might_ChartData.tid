created: 20230706004035000
creator: Drevarr
tags: ChartData
title: 202307060040_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Lord Erin The Wise", "Body Ody Ody", "Hyde En Sikh", "Koralia Danai", "Rahani Sunray", "Tootsie Pop Rocks", "Elonith Requiem", "Fribble Bibble", "Bella Sassy", "Arriasa", "Gavann", "Miphest\u00f6", "Black Raspberry Pie", "Ateriuz", "Xanvias Einzbern", "Drevarr Moonwillow"];
const professions = ["Weaver", "Berserker", "Chronomancer", "Firebrand", "Chronomancer", "Scrapper", "Scourge", "Scrapper", "Firebrand", "Druid", "Firebrand", "Tempest", "Chronomancer", "Berserker", "Berserker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.5049, 1.7503, 0.0, 0.0, 0.0, 0.8554, 0.4536, 0.985, 2.304, 2.5018, 1.7338, 4.1605], [1.7442, 0.0, 0.0, 0.0, 0.0, 0.0, 4.3092, 6.2856, 2.214, 0.0, 0.7895, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 4.752, 2.9786, 1.62, 3.105, 4.7596, 0.0, 0.0], [0.0, 0.805, 0.6977, 0.8732, 0.7621, 3.7541, 0.7106, 1.7237, 2.007, 0.4475, 2.2446, 4.6519], [2.9835, 0.468, 4.9817, 0.0, 0.0, 2.4869, 0.0, 0.0, 3.762, 2.929, 2.6626, 0.0], [3.0753, 3.2011, 0.0122, 0.0, 1.2877, 1.679, 1.9656, 3.2789, 4.131, 0.0, 1.7802, 0.0], [3.1365, 1.975, 3.6137, 0.013, 2.763, 4.8206, 4.8298, 0.131], [1.9584, 0.4961, 4.9572, 1.066, 4.6778, 2.1859, 1.5876, 1.9958, 3.339, 1.3221, 1.7647, 0.0], [2.9376, 1.7129, 1.5912, 0.4536, 0.8804, 2.5027, 2.3738, 10.1088, 3.897, 2.9696, 2.8174, 4.2588], [3.1457, 4.037, 1.4323, 3.2314, 2.8728, 7.763, 9.36, 6.4274, 3.0496, 1.8509], [1.4535, 1.2168, 6.6708, 0.9752, 0.1445, 4.7837, 2.9333, 9.3312, 2.385, 4.6579, 3.901, 6.5684], [5.7528, 2.0686, 10.2571, 0.0, 1.7082, 11.183, 6.1236, 8.5018, 3.42, 0.7526, 5.2477, 0.0], [3.8403, 4.2869, 3.7454, 2.4381, 7.3453, 6.9538, 5.6398, 9.6941, 4.302, 5.9189, 7.5078, 7.4365], [7.6041, 12.6454, 3.9046, 4.8762, 3.4033, 6.2093, 3.0845, 11.8454, 4.815, 12.0413, 8.2354, 2.4242], [2.8917, 1.4227, 3.1946, 3.2546, 6.9116, 9.7416, 9.1325, 13.8802, 15.12, 8.6242, 3.5449, 7.8788], [7.1298, 4.0903, 10.0735, 5.7721, 10.8536, 8.9496, 6.048, 12.4934, 8.838, 7.2004, 9.2416, 8.5667]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

