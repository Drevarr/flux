created: 20230626220846000
creator: Drevarr
modified: 20230705163539550
modifier: drevarr
tags: ChartData
title: 202306262208_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Rahani Sunray", "Legacy Of Mathus", "Arcanophage Farra", "Gravlyn Isshtail", "Black Raspberry Pie", "Gavann", "Primal Clone", "Eibh\u00ebar", "Ryvalia Fazebringer", "Ateriuz", "Regis Hawkesburne", "Crusader Siolith", "Ateriuz", "Zaylen Harker", "Xanvias Einzbern", "Johosh The Mighty", "Tika Fiery", "Bella Sassy", "Sub Train", "Koralia Danai", "Sygaldry Verdandi", "Blancooo Padreee", "Solus Sanctus", "Grasszanine", "Newtype Khan"];
const professions = ["Chronomancer", "Berserker", "Spellbreaker", "Spellbreaker", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 7.9543, 13.0622, 7.3951, 25.49, 6.4948, 9.5809, 16.4976, 11.6424, 10.5574, 18.6512, 13.3198, 38.5853, 12.65, 25.5631, 20.5146, 5.031, 14.3541, 25.2252], [75.8339, 0.0, 0.0, 2.2531, 0.0, 28.0812, 23.0418, 27.4979, 0.0, 24.8041, 46.2134, 0.0, 27.2026, 0.0, 0.0, 6.3837, 36.2291], [211.2298, 0.0, 52.8264, 38.7587, 5.4331, 33.2033, 33.0021, 0.0, 0.0, 0.0], [296.8883, 0.0, 43.4452, 21.447, 11.6855, 45.7976], [157.1942, 0.0, 10.5956, 13.547, 3.5143, 10.1237, 8.8128, 12.7116, 11.256, 12.4891, 12.1466, 23.2024, 11.0648, 30.4387, 15.962, 23.9237, 12.3714, 11.6564, 19.4463, 19.6267], [143.0713, 11.051, 6.7022, 5.0235, 17.0536, 3.6949, 4.979, 12.1632, 22.3634, 35.4729, 12.9265, 23.2548, 12.42, 20.9484, 11.0403, 0.0, 42.1029, 39.4466], [182.6769, 4.6431, 12.8726, 11.7217, 8.5809, 23.5014, 10.3275, 5.8466, 14.8176, 7.1971, 23.5365, 7.8977, 6.9483, 33.1789, 17.618, 19.7947, 13.82, 0.0, 20.295, 13.5778], [189.1243, 3.4188, 15.514, 11.0943, 12.1598, 25.5502, 3.4655, 11.2406, 14.4144, 16.7227, 20.1687, 20.6144, 9.7801, 37.1781, 11.546, 24.0451, 18.3614, 9.706, 13.2471, 21.7503], [199.87, 0.0, 8.683, 17.2831, 13.5397, 23.6822, 1.9278, 5.922, 12.096, 19.2982, 21.1147, 29.5384, 12.6905, 41.6958, 15.18, 25.9274, 21.5717, 4.0712, 16.0515, 35.7143], [351.2309, 0.0, 8.683, 27.807, 20.9563, 12.1725, 12.2094, 27.0075, 8.6264, 71.4679, 27.6], [408.3366, 0.0, 12.144, 7.3296, 54.1156, 51.0402, 9.639, 1.9237, 14.28, 9.7373, 40.6402, 0.0, 10.4093, 32.4383, 28.06, 6.6185, 22.7853, 30.155, 46.494, 56.1132], [325.1342, 3.7422, 28.8724, 10.0676, 20.2233, 44.6527, 31.7857, 29.0444, 31.92, 26.213, 41.0942, 57.4706, 26.3511, 113.2377, 28.198, 64.4239, 63.5405, 6.4087, 34.6491, 43.9511], [59.9088, 46.0757, 149.0896, 150.8156, 154.7146, 190.2298, 76.1985, 232.3035], [240.7037, 38.2536, 44.206, 28.4376, 72.0107, 34.861, 10.5805, 27.6192, 32.8104, 45.5972, 72.0613, 43.2892, 90.6494, 32.844, 117.4325, 56.1803, 20.5265, 55.3131, 99.8712], [552.636, 0.0, 29.3581, 55.0151, 30.0331, 26.0323, 30.271, 29.2519, 35.448, 14.6059, 13.471, 58.363, 37.7568, 17.9225, 60.536, 78.936, 80.4141, 9.8143, 55.0179, 97.6189], [526.2323, 0.0, 13.4798, 60.2342, 33.9354, 46.0386, 12.1635, 25.461, 44.6208, 23.7082, 20.8498, 30.8324, 9.7538, 77.3186, 50.968, 79.361, 76.7732, 14.7215, 62.6562, 134.4271], [545.8816, 11.6424, 17.6088, 45.2612, 42.3438, 112.7465, 24.2122, 22.4057, 56.28, 24.1315, 59.2953, 84.9565, 17.1741, 160.1918, 14.812, 71.5282, 86.0517, 14.6596, 50.1102, 78.1209], [535.4429, 0.0, 45.9347, 72.8116, 25.527, 107.082, 35.8479, 20.1802, 23.5536, 35.2447, 88.7726, 109.1405, 57.3694, 173.5966, 94.944, 100.4309, 103.9041, 7.5078, 49.8519, 18.4041], [398.512, 3.7884, 50.6101, 53.532, 48.3375, 93.8248, 59.5553, 53.9019, 52.6512, 59.8349, 82.8318, 111.0592, 67.7787, 137.3813, 49.542, 91.505, 69.5304, 9.9846, 84.7224, 136.1003], [438.4246, 0.0, 60.6289, 49.6248, 24.4059, 98.3443, 64.1452, 20.1425, 49.1232, 68.6902, 68.9445, 84.7334, 60.5944, 71.9863, 77.648, 120.7114, 85.2296, 7.9877, 115.866, 166.4091], [491.846, 5.6133, 31.5137, 43.3219, 63.3433, 39.2895, 71.9942, 26.8001, 81.6816, 77.5102, 67.0525, 111.5054, 34.9775, 198.8511, 34.546, 101.281, 107.3885, 0.0, 115.7184, 127.0913], [856.2788, 0.0, 60.2646, 62.5444, 62.0066, 81.8331, 55.9291, 57.655, 60.984, 14.0062, 26.9421, 67.6439, 21.6053, 105.7577, 31.694, 58.2912, 59.5471, 43.7465, 56.7522, 184.6202], [473.4248, 18.3183, 70.4656, 112.8251, 57.134, 151.7949, 67.8173, 19.4635, 77.952, 80.1562, 82.4534, 109.7206, 71.03, 241.1394, 81.328, 107.8994, 121.1301, 38.344, 116.7516, 176.7051], [916.4547, 76.2762, 129.03, 58.523, 70.3287, 72.4928, 48.5852, 43.4534, 0.0, 48.1572, 60.3548, 159.5611, 31.1756, 175.4481, 25.208, 112.3927, 172.4166, 0.0, 75.2391, 195.624], [863.9543, 111.8462, 51.4786, 0.0, 98.4648, 40.369, 47.4706, 66.2592, 32.1048, 77.8747, 102.0459, 146.36, 169.9677, 23.69, 251.6844, 178.2108, 25.4336, 219.924, 199.2919]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

