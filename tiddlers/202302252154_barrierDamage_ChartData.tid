created: 20230225215428000
creator: Drevarr
modified: 20230705163520201
modifier: drevarr
tags: ChartData
title: 202302252154_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Nekroomori", "Lord Erin The Wise", "Sygaldry Verdandi", "Zadie Miststep", "Mac Aaroni", "Hyde En Sikh", "Madrigal Moonshade", "Gabe Malhorn", "Drevarr Moonwillow", "Smol Gluvs", "Grasszanine", "Sparks Malefacio", "Morv\u00e4rth", "Newtype Khan", "Daring Deathblade", "Be\u00eb", "Harry Callahann", "Tootsie Pop Tart", "Vopiscus Zergherdus"];
const professions = ["Scourge", "Weaver", "Firebrand", "Tempest", "Tempest", "Chronomancer", "Vindicator", "Firebrand", "Scrapper", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 4769, 1248, 4196], [0, 0, 3713, 2465, 269, 0, 2734, 1248], [0, 269, 0, 1698, 3460, 0, 2107, 3636, 0, 0], [1326, 0, 2950, 3669, 0, 0, 0, 1248, 0, 0, 2416], [0, 0, 0, 1248, 4910, 0, 3288, 602, 0, 0, 3580], [1248, 3921, 0, 3650, 1248, 0, 1248, 2496, 0, 0, 0], [0, 0, 0, 4924, 1248, 0, 0, 3603, 0, 4301], [1248, 4288, 602, 1434, 1174, 0, 2045, 3612, 0, 0, 0], [2578, 1057, 1353, 2672, 2028, 26, 42, 991, 1950, 87, 5681], [1248, 1734, 8113, 0, 0, 1248, 829, 898, 4444], [199, 0, 0, 3416, 3403, 0, 3721, 6995, 2300], [0, 0, 6611, 1248, 602, 2477, 4858, 5887, 0, 5889], [4722, 0, 7947, 7755, 0, 3044, 2616, 3822, 0], [0, 0, 280, 7292, 640, 604, 2534, 7223, 0, 1868, 10727], [2282, 0, 8194, 6862, 3500, 4868, 2828, 2828], [2410, 3474, 5570, 2226, 3474, 5729, 6077, 0, 0, 13599], [7801, 2223, 7642, 7490, 8603, 0, 1063, 29752], [4197, 9814, 15255, 10722, 102, 7109, 11001, 2997, 289, 6972], [14436, 9686, 8248, 10194, 23925, 1284, 1115, 30077]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

