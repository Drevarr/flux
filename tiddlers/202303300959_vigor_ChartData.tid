created: 20230330095927000
creator: Drevarr
modified: 20230705163523552
modifier: drevarr
tags: ChartData
title: 202303300959_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Tinkling Star", "Ti\u00f1g", "Xyntharos", "Venomina The Siren", "Zadie Miststep", "Mac Chiato", "Grasszanine", "F\u00f9gly", "Zefirokai", "Newtype Khan", "Sassy Daddy Demon", "Arcanophage Farra", "Fribble Bibble", "\u00c1rkantor", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Mechanist", "Scrapper", "Vindicator", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Tempest", "Spellbreaker", "Vindicator", "Spellbreaker", "Scrapper", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.9248, 75.7409, 2.001, 42.2168, 990.0832, 11.7453, 19.8255, 0.0, 25.798, 18.8698, 0.0, 31.6663, 2.9799, 31.968], [130.2511, 214.0789, 58.1377, 237.9327, 251.8776, 20.0448, 147.2862, 68.4526, 201.9456], [1591.984], [4.1645, 70.0177, 4.209, 69.5074, 1386.9888, 20.727, 44.0841, 12.1298, 22.3636, 40.6598, 4.0262, 4.0181, 15.275, 7.8896, 50.976], [0.0, 1639.9616, 9.4094, 12.9913, 17.496, 48.8006, 55.5422, 0.0, 16.3913, 80.1792], [0.0, 155.5003, 0.0, 65.2745, 2708.5536, 30.5312, 56.3981, 43.1122, 26.5168, 94.2926, 0.0, 19.1525, 104.832], [0.0, 116.8992, 29.716, 0.0, 2835.04, 46.1587, 49.6254, 23.166, 76.196, 74.9736, 0.0, 100.4625, 0.0, 62.208], [0.0, 108.7406, 0.0, 57.8114, 2839.4016, 0.0, 104.1764, 15.9975, 123.9582, 46.9498, 121.965, 0.0, 96.5376], [3966.8752, 72.9064, 126.7111], [3493.6416, 205.1315, 154.9717, 92.8462, 40.3343, 298.6027, 38.4648, 246.045, 69.8148, 513.2736], [0.0, 171.6957, 46.069, 69.396, 4141.3392, 105.3787, 60.6464, 58.158, 223.8756, 127.8763, 52.8422, 177.6012, 0.0, 207.5328], [399.8927, 13.708, 352.9949, 5728.9616, 67.8069, 111.3801, 18.6098, 179.2283, 90.3614, 0.0, 115.15, 38.6819, 164.16], [0.0, 260.5878, 0.0, 385.6322, 6090.9744, 51.6859, 72.5295, 0.0, 138.0952, 119.003, 0.0, 91.9438, 0.0, 76.8384], [320.9857, 2.438, 227.6812, 6849.8928, 97.055, 80.3488, 0.0, 177.9504, 49.7016, 78.255, 74.8097, 77.0688], [8.6054, 252.3074, 64.86, 412.6999, 7224.9904, 88.7971, 93.1554, 19.845, 159.5803, 156.2371, 0.0, 151.3988, 6.5842, 171.7632], [0.0, 515.696, 0.0, 429.5198, 9069.9472, 121.9603, 189.8819, 5.4068, 127.4725, 227.2795, 272.0713, 90.4471, 160.2432]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

