created: 20230607222341000
creator: Drevarr
modified: 20230705163534416
modifier: drevarr
tags: ChartData
title: 202306072223_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Eibh\u00ebar", "Ryvalia Fazebringer", "Sygaldry Verdandi", "Etcherii", "Crusader Siolith", "Blanco Padre Guard", "Shaca Booey", "Rafaellagabriela", "Gabe Malhorn", "Sub Train", "Zayde Sunsabre", "Xanvias Einzbern", "Koralia Danai", "Grasszanine", "Johosh The Great", "Newtype Khan", "Solus Sanctus"];
const professions = ["Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.487, 20.286, 587.982, 12.7635, 60.456, 19.6596, 0.0, 12.7926, 6.8653, 18.0489, 0.0, 11.9122, 11.7392, 28.7755], [16.7895, 15.272, 590.261, 33.9275, 60.0163, 17.6353, 0.0, 15.6492, 6.9541, 16.2954, 0.0, 10.0823, 27.8576, 24.869], [25.1843, 15.042, 678.0025, 32.6902, 63.204, 17.3609, 0.0, 13.2397, 6.4085, 30.7944, 0.0, 17.0251, 18.768, 33.1771], [12.4537, 31.832, 713.327, 19.4709, 108.7109, 23.6396, 0.0, 9.8615, 9.5302, 16.4664, 0.0, 18.4064, 15.1616, 62.6128], [19.557, 13.846, 757.7675, 29.1738, 167.2982, 49.6123, 0.0, 36.7632, 30.5194, 37.6376, 4.9321, 23.1247, 34.8128], [21.402, 14.996, 863.741, 17.5173, 184.5557, 42.8875, 7.476, 10.6564, 7.9566, 57.6967, 0.0, 14.3161, 17.0384, 23.0534], [52.398, 44.39, 1313.8435, 33.1461, 133.8826], [49.1693, 95.91, 1138.3605, 51.575, 60.7858, 26.0756, 0.0, 12.6187, 24.1998, 54.0613, 0.0, 4.0186, 12.5856, 68.2248], [1270.5425, 36.337, 137.7298, 44.9804, 0.0, 77.8486, 18.3244, 69.1591, 0.0, 50.6087, 49.0176, 77.028], [1317.262, 19.4709, 102.0058, 67.1104, 0.0, 66.0247, 30.0119, 95.9331, 8.6869, 55.5781, 90.0128, 150.4247], [1334.3545, 30.9971, 251.2771, 60.7973, 13.7172, 97.2983, 18.9462, 100.9372, 0.0, 62.18, 106.7568, 117.6328], [113.0062, 126.96, 1389.0505, 23.1176, 142.5662, 14.2386, 0.0, 67.7138, 97.0785, 113.811, 17.9759, 111.4304, 0.0], [59.8703, 45.908, 1540.604, 39.9837, 201.8131, 62.1011, 0.0, 33.4595, 15.5706, 97.7722, 0.0, 33.1531, 29.3664, 69.6553], [7.4722, 59.846, 1802.689, 36.0765, 285.792, 49.921, 3.7716, 26.4049, 32.1311, 30.9655, 0.0, 29.7983, 73.7472, 160.8235], [0.0, 107.088, 1916.639, 55.2218, 494.3102, 110.5468, 0.0, 43.8426, 0.0, 209.3591, 0.0, 49.6938, 76.544, 0.0], [22.6013, 33.028, 2059.0765, 56.7195, 319.2077, 90.0637, 11.1804, 74.0232, 32.3849, 113.7254, 0.0, 56.5828, 112.9024, 170.0118], [42.3428, 20.884, 2890.9115, 67.5946, 317.339, 134.1521, 0.0, 124.8458, 19.3649, 120.9963, 0.0, 120.6286, 16.376, 339.6935], [124.9065, 162.932, 3093.7425, 57.0451, 386.039, 140.9798, 27.5772, 58.6224, 7.8805, 117.703, 0.0, 86.3632, 81.1808, 196.1463]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

