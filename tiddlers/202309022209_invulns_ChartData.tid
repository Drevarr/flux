created: 20230902220918000
creator: Drevarr
tags: ChartData
title: 202309022209_invulns_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Aethli", "Sygaldry Verdandi", "Puppy Sky", "Aira Draugr", "Scarlet Redwitch", "Vylade Vinzanti", "Zoran The Bear", "Jamaass", "Praechilla", "Mistwalker Cael", "Mistwalker Cael", "Sygaldry Verdandi", "Melody Phoenixstorm", "Kandy Land", "Xanvias Einzbern", "Lady Sherena", "Agent Pickpocket", "Glorious Gluvs", "Legacy Of Mathus", "Hyde En Sikh", "Koralia Danai", "Mort\u00e4rion", "Unbreakable Nemesis", "Vysmaris", "Crusader Siolith", "Sight Beyond Sights", "Elfina Lightborn", "Newtype Khan", "Val Haden", "Bella Sassy", "Zaedy Zae", "Gabe Malhorn", "Drevarr Moonwillow", "Sly The Ele", "Be\u00eb", "Serene Azura", "Lord Erin The Wise", "Greg The Knight", "Melmyr", "Rina Of Theros", "Zatoshin", "Leriel Nova", "Daphne Agla\u00e9", "Tootsie Pop Rocks", "Sub Train", "Willowshaven", "Revenant Brandorf", "Leyviathan", "Sofya De Nova", "Scuba Steves"];
const professions = ["Firebrand", "Renegade", "Firebrand", "Reaper", "Herald", "Harbinger", "Tempest", "Tempest", "Reaper", "Mechanist", "Vindicator", "Herald", "Willbender", "Scrapper", "Soulbeast", "Berserker", "Willbender", "Thief", "Berserker", "Berserker", "Chronomancer", "Firebrand", "Scrapper", "Firebrand", "Chronomancer", "Firebrand", "Vindicator", "Berserker", "Spellbreaker", "Reaper", "Firebrand", "Druid", "Firebrand", "Scrapper", "Tempest", "Reaper", "Dragonhunter", "Weaver", "Firebrand", "Willbender", "Reaper", "Herald", "Tempest", "Reaper", "Scrapper", "Dragonhunter", "Catalyst", "Herald", "Herald", "Tempest", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Invulnerable to Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 9, 0, 0, 0, 0, 0, 11, 28], [10, 2, 11, 20, 5], [8, 17, 0, 0, 0, 19, 0, 13, 5, 0], [0, 0, 20, 0, 0, 0, 0, 0, 0, 27, 16], [0, 0, 11, 0, 0, 0, 0, 0, 0, 38, 19], [0, 0, 15, 13, 37, 5], [0, 17, 41, 28], [18, 18, 54], [0, 0, 0, 0, 17, 20, 10, 5, 0, 0, 0, 10, 10, 5, 14, 0], [8, 10, 41, 14, 19], [0, 0, 12, 0, 0, 0, 0, 0, 78, 4], [11, 17, 13, 0, 0, 0, 25, 0, 8, 20, 0], [0, 0, 35, 2, 0, 0, 0, 4, 11, 22, 21], [0, 34, 0, 0, 0, 0, 4, 40, 18], [4, 8, 0, 0, 0, 0, 0, 0, 20, 14, 12, 9, 22, 0, 8, 0, 11, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 14, 11, 0, 13, 26, 0, 3, 0, 29, 0, 0, 7, 0], [0, 49, 16, 49, 0], [0, 20, 42, 26, 0, 5, 0, 0, 0, 0, 0, 0, 25], [0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 12, 27, 11, 6, 0, 0, 2, 10, 2, 14, 22, 1], [0, 0, 14, 0, 0, 0, 0, 0, 0, 4, 9, 12, 17, 23, 0, 0, 0, 21, 0, 9, 21, 0], [0, 0, 0, 0, 0, 0, 0, 4, 58, 0, 6, 21, 0, 0, 0, 28, 0, 0, 24, 0], [0, 0, 9, 0, 0, 0, 0, 24, 25, 12, 15, 32, 0, 0, 0, 14, 0, 9, 22, 0], [0, 0, 14, 0, 0, 0, 0, 0, 14, 10, 13, 16, 28, 0, 0, 0, 13, 0, 23, 33, 0], [0, 0, 0, 0, 0, 29, 7, 0, 35, 0, 40, 0, 45, 11, 0], [19, 8, 9, 17, 0, 42, 1, 7, 42, 4, 18, 0], [0, 26, 0, 0, 0, 0, 0, 0, 24, 22, 0, 45, 10, 0, 8, 0, 3, 0, 16, 18, 0], [0, 17, 0, 0, 0, 36, 19, 17, 2, 15, 35, 0, 20, 0, 1, 10], [0, 0, 0, 25, 17, 14, 22, 16, 0, 0, 0, 7, 16, 26, 33, 0], [14, 10, 0, 0, 0, 0, 0, 0, 43, 9, 21, 12, 8, 0, 0, 0, 35, 0, 16, 10, 0], [0, 0, 0, 0, 7, 48, 5, 13, 44, 0, 0, 0, 18, 0, 26, 18, 0], [0, 8, 0, 0, 0, 0, 0, 6, 7, 0, 19, 22, 0, 35, 0, 26, 0, 0, 61, 0], [0, 2, 0, 0, 0, 0, 0, 0, 12, 9, 11, 5, 73, 0, 10, 0, 12, 0, 34, 22, 0], [0, 0, 10, 0, 0, 0, 0, 4, 0, 8, 9, 37, 7, 28, 0, 0, 0, 24, 0, 23, 27, 20], [0, 0, 34, 0, 0, 0, 0, 0, 0, 42, 8, 19, 7, 18, 0, 30, 0, 19, 0, 0, 24, 0], [0, 0, 0, 0, 0, 17, 4, 0, 13, 7, 0, 62, 0, 22, 0, 70, 12, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 11, 6, 11, 3, 64, 0, 0, 0, 19, 0, 0, 88, 0], [6, 42, 33, 111, 24], [0, 0, 0, 0, 32, 26, 30, 40, 1, 0, 0, 0, 2, 20, 47, 21, 0], [0, 26, 0, 10, 0, 36, 11, 17, 12, 0, 0, 0, 0, 0, 59, 55, 0], [39, 0, 0, 0, 8, 0, 68, 8, 13, 13, 28, 4, 30, 21], [6, 0, 19, 0, 0, 0, 0, 0, 0, 6, 5, 3, 25, 57, 0, 29, 0, 51, 0, 6, 27, 0], [0, 26, 28, 27, 38, 0, 0, 0, 9, 47, 64], [0, 24, 0, 0, 0, 0, 0, 0, 26, 14, 39, 49, 43, 0, 0, 0, 45], [0, 0, 7, 0, 0, 0, 0, 0, 19, 23, 16, 18, 68, 0, 0, 55, 21, 4, 5, 9, 7], [0, 0, 0, 0, 0, 0, 0, 0, 23, 5, 54, 11, 27, 0, 3, 35, 17, 0, 80, 15, 0], [0, 0, 35, 0, 0, 22, 0, 0, 0, 6, 2, 0, 16, 63, 0, 7, 0, 125], [36, 30, 0, 51, 41, 0, 16, 0, 15, 0, 24, 56, 12], [76, 20, 61, 0, 2, 5, 49, 25, 14, 26, 7], [0, 0, 5, 0, 0, 10, 0, 0, 15, 0, 54, 0, 53, 36, 18, 32, 25, 38, 0], [4, 36, 0, 33, 71, 0, 0, 0, 46, 15, 23, 94, 0], [18, 0, 0, 0, 0, 0, 4, 31, 5, 68, 19, 70, 0, 26, 2, 12, 40, 37, 90, 0]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

