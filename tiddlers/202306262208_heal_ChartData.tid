created: 20230626220846000
creator: Drevarr
modified: 20230705163539465
modifier: drevarr
tags: ChartData
title: 202306262208_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Fiery", "Etchery Howls", "Solus Sanctus", "Mike The Archmagus", "Tegan Parker", "Zadey Starbolt", "Zadie Miststep", "Artakama Nahid", "Ak\u00e1nt\u00f3r", "\u00c1rkantor", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Druid", "Firebrand", "Tempest", "Tempest", "Scrapper", "Tempest", "Tempest", "Druid", "Vindicator", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[313.4944, 511.1212, 782.5968, 374.898, 467.9618, 418.0392, 478.0, 563.9857, 246.869, 660.8372, 457.5773, 797.5614, 722.7702, 147.4, 412.7727, 274.0, 5.0833, 249.3049, 401.2028], [36.1091, 1097.7576, 1139.2419, 3830.9237, 3628.7647, 2182.7805, 1781.0286, 1289.5833], [354.0364, 0.0, 816.5606, 841.2581, 1292.2449, 404.1527, 595.6863, 1319.5366, 618.7429, 573.4286, 1255.093, 821.1959, 659.2105, 912.5839, 279.5, 513.9167, 444.5977, 51.5, 251.4268, 231.1049], [1688.6064, 1696.0175], [527.0994, 830.0992, 1363.2157, 2549.3171, 1441.2714, 1544.3929, 1283.4302, 1137.8247, 8.5789, 890.19, 607.1742, 1536.9655, 377.9444, 928.0976, 812.3427], [2638.8721, 2425.866, 2533.3684, 2196.0745, 1311.16, 1545.6818, 1759.8736, 165.3333, 1466.5976, 1910.7133], [1066.9608, 106.1455, 1587.6818, 2617.6452, 2604.6939, 1729.6794, 1475.0784, 2215.9756, 1844.4714, 2086.3214], [1239.6471, 26.6545, 1291.7576, 2152.0968, 882.898, 1356.0916, 2268.7255, 1367.5122, 3289.4286, 1938.6667, 1694.7791, 2083.9588, 2097.5614, 3115.4224, 895.79, 1695.6136, 1869.3563, 436.8889, 1543.1341, 1559.7552], [2512.3894, 8.0182, 5458.0303, 3881.6935, 1007.8776, 3568.8321, 4971.5882, 5877.9024, 2996.3143, 1576.2143], [9295.2209, 6165.4639, 3781.5088, 7600.7578, 3764.43, 5698.5833, 3989.5287, 947.5278, 3514.9634, 4208.2308], [2948.4524, 5.3091, 5031.4242, 1294.7258, 3454.1837, 1085.0382, 2289.5098, 2643.2683, 2981.5714, 3735.0465, 2694.5876, 8109.1579, 2728.236, 1352.25, 3648.7727, 2238.931, 78.0556, 1809.9512, 2043.979], [2792.514, 256.8182, 3286.9697, 3103.1774, 3574.0612, 2718.9695, 2242.1961, 2678.7317, 3505.6429, 2509.0357, 4599.6977, 3520.0722, 3468.5088, 3823.2547, 1305.31, 2831.8258, 2390.908, 387.9167, 1656.2073, 1690.7273]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

