created: 20230213220222000
creator: Drevarr
modified: 20230705163519236
modifier: drevarr
tags: ChartData
title: 202302132202_invulns_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Uneeta Healah", "Elonith Tenebris", "Jupi Jupi Jupi", "Sassy Daddy Demon", "Gavann", "Xanvias Tseli", "Belvyn Brightblade", "Jupi Jupi Jupi", "Black Raspberry Pie", "Tegan Parker", "Mistwalker Caelon", "Mac Chiato", "Grasszanine", "Arriasa", "Koralia Danai", "High Sorcer Baradun", "Joh Oshi", "Ace Hammers", "Raziel Umbra", "Mike The Archmagus", "Dark Sidiuz", "Drevarr Moonwillow", "Smol Gluvs", "Jeckyll Mbs", "Rina Of Theros", "Newtype Khan", "Legacy Of Mathus", "Blanco Padre Guard", "Kira Dragonblaze", "Whose Guardian", "Nelliel T", "Isla Miststorm", "Lord Erin The Wise", "Oo Dads Mad", "Arka\u00f1", "Arcanophage Farra", "Abigail Ryn", "Tacoplasm"];
const professions = ["Firebrand", "Scrapper", "Scourge", "Dragonhunter", "Vindicator", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Chronomancer", "Tempest", "Vindicator", "Tempest", "Spellbreaker", "Druid", "Firebrand", "Tempest", "Druid", "Vindicator", "Chronomancer", "Tempest", "Scourge", "Scrapper", "Scourge", "Berserker", "Scourge", "Spellbreaker", "Berserker", "Firebrand", "Dragonhunter", "Dragonhunter", "Scourge", "Willbender", "Weaver", "Spellbreaker", "Chronomancer", "Spellbreaker", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Invulnerable to Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0], [4, 0, 0, 10, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 16], [0, 7, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 20], [0, 0, 21, 0, 0, 0, 0], [13, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0], [0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0], [0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 15, 0, 0, 10, 0, 0], [0, 0, 0, 0, 27, 0, 0, 0, 0, 0], [0, 0, 27, 0, 0], [0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0], [0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 4, 0, 10, 10, 0, 0], [0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0], [0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0], [0, 28, 0, 0, 0, 4, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 20, 0, 0, 0, 18, 0, 0], [17, 9, 0, 0, 1, 8, 0, 0, 2, 5, 0, 0], [0, 0, 0, 0, 0, 23, 19, 0, 0, 0, 0, 0], [7, 0, 0, 43, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 46], [0, 13, 0, 0, 16, 0, 0, 0, 25, 2, 0], [0, 34, 0, 0, 10, 0, 0, 0, 14, 0, 0], [0, 5, 59, 0], [0, 25, 0, 0, 0, 10, 0, 0, 0, 0, 29, 0], [12, 2, 1, 0, 47, 0, 0, 0, 3], [0, 6, 8, 0, 0, 30, 9, 0, 0, 16, 0, 0], [0, 11, 0, 0, 55, 0, 0, 0, 8, 0, 0], [0, 26, 0, 0, 51, 0, 0, 26], [0, 10, 123, 0, 0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

