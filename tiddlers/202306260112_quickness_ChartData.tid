created: 20230626011254000
creator: Drevarr
modified: 20230705163537704
modifier: drevarr
tags: ChartData
title: 202306260112_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Eoooeee", "Good Sir Ragnarok", "Warrior Constantine", "Traidoruns Maximus", "Grasszanine", "Newtype Khan", "Blancooo Padreee", "Smol Daddy Tika", "Arcanophage Farra"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[36.938, 9.6407, 0.0, 45.76, 13.973, 37.0512, 50.9796, 35.1232, 33.7178, 12.9755, 15.0995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.1904, 0.0, 15.6604, 9.145, 9.0473], [6.0665, 6.0922, 72.248, 250.4284, 39.8189, 70.6967, 39.8429], [22.6829, 19.494, 35.8979, 5.5642, 19.5592, 17.8214, 0.0, 14.1728, 79.3781, 66.0643, 64.1088, 55.6104, 56.5594, 52.1787], [36.5602, 5.3044, 58.4016, 38.2514, 86.292, 10.6772, 24.2352, 15.0032, 10.4139, 0.0, 23.8409, 0.0, 36.2074, 10.4481, 10.2775, 8.1106, 74.2075, 63.504, 26.703], [14.0744, 12.558, 0.0, 69.256, 137.0166, 12.901, 6.4638, 32.3121, 17.836, 81.498, 25.3285, 11.4642, 17.5186, 6.8742, 16.1239, 6.4529, 20.976, 9.8918, 6.501, 12.7816, 6.5002, 24.2208, 17.7984, 12.9416], [20.4154, 64.8788, 11.97, 30.8048, 20.4569, 37.6285, 90.332, 10.1623, 13.4872, 30.4013, 13.4664, 13.2338, 56.9496, 56.4178, 47.2608, 61.1312, 89.8475, 30.624, 47.5438], [43.8876, 0.0, 0.0, 47.608, 57.7912, 64.9958, 0.0, 65.074, 21.7874, 90.1272, 17.3804, 39.9049, 10.9964, 0.0, 59.2586, 16.422, 0.0, 5.4298, 0.0, 0.0, 48.1949, 74.7504, 44.64, 27.3488, 78.7015, 0.0, 35.2378], [24.7616, 0.0, 22.6662, 112.728, 317.3087, 19.2398, 21.7204, 5.4728, 25.2448, 121.6078, 26.0946, 15.6265, 33.422, 76.9378, 13.7558, 14.1312, 13.8701, 14.3773, 14.1381, 51.5328, 80.8056, 30.9888, 10.9793, 71.91, 31.0886, 15.261], [20.6152, 34.6214, 84.0805, 177.408, 212.9862, 51.0682, 11.245, 93.9374, 77.8198, 299.9446, 70.0006, 24.8173, 9.4828, 32.0625, 0.1587, 27.7822, 21.1048, 43.5725, 14.2523, 21.0593, 32.6472, 56.5013, 33.3216, 20.7414, 25.8477, 0.0, 23.4582], [56.794, 27.7628, 41.851, 180.224, 410.7785, 50.8896, 11.286, 77.2191, 47.3614, 242.7362, 60.5203, 38.0873, 52.8452, 29.4206, 75.3825, 13.8718, 14.0576, 48.3034, 13.9844, 0.0, 46.9651, 46.3954, 60.2496, 52.9092, 58.6067, 61.2902, 26.8585]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

