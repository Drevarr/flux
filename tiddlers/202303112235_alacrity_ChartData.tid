created: 20230311223557000
creator: Drevarr
modified: 20230705163521694
modifier: drevarr
tags: ChartData
title: 202303112235_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Primal Clone", "Tegan Parker", "High Sorcer Baradun", "Mom You Never Had", "Zadie Miststep", "Mac Chiato", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[299.1177, 35.092, 5.424, 0.0, 0.0, 27.027, 132.1488, 0.0, 11.0653, 33.1513, 39.9712, 0.0, 26.9468, 0.0, 2.688, 40.2527, 0.0, 24.1279, 0.0, 25.6632, 69.1897, 32.9566, 25.0404, 71.232], [141.3468, 27.8456, 61.3017, 75.6263, 34.2859, 21.762, 75.0941, 75.0226, 95.5521, 0.0, 0.0, 63.0585, 71.6091, 0.0, 0.0, 9.416, 0.0, 37.6036, 37.9915, 0.0, 35.0348, 47.8296, 27.9048, 71.376], [735.1029, 71.5953, 0.0, 55.4055, 27.6151, 37.4868, 192.9792, 116.923, 141.1151, 274.0763, 372.9938, 64.4557, 71.8759, 0.0, 0.0, 76.1908, 94.5866, 0.0, 297.9765, 112.1375, 116.5164, 170.448], [1286.0568, 44.2653, 89.271, 134.7138, 445.3904, 401.3302, 330.1365, 328.2362, 266.3325, 88.9988, 13.6068, 0.0, 44.7196, 0.0, 43.0367, 0.0, 125.5972, 84.7174, 99.022, 124.128], [1748.9178, 87.3365, 36.9959, 87.4943, 121.5459, 205.6158, 451.9629, 232.2074, 290.6919, 54.9309, 780.615, 64.881, 131.0522, 23.9039, 86.7384, 50.76, 0.0, 127.6983], [1910.6703, 0.0, 21.5937, 0.0, 210.951, 231.4352, 483.8791, 1036.9412, 1145.2725], [1740.4569, 101.9921, 238.1964, 175.6013, 179.3758, 230.607, 463.5696, 358.7276, 378.6936, 558.175, 608.1188, 40.3987, 72.6763, 41.5296, 89.2107, 50.4087, 116.5327], [1681.2306, 62.6391, 67.9538, 66.7898, 180.9945, 213.2676, 448.4669, 381.0822, 505.2286, 727.0153, 664.5487, 38.394, 101.5441, 76.9322, 22.848, 32.994, 0.0, 83.0788, 48.4042, 84.2112, 151.524, 153.7427, 195.7956, 218.4], [1900.7163, 17.7767, 165.1256, 156.8962, 124.9794, 260.442, 695.9837, 441.5919, 485.5714, 603.2762, 668.61, 167.4878, 147.0602, 73.0514, 36.3888, 113.8293, 42.6912, 114.1798, 63.3226, 144.0824, 281.712]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

