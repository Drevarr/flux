created: 20230703220627000
creator: Drevarr
modified: 20230705163541285
modifier: drevarr
tags: ChartData
title: 202307032206_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Vopiscus Zergherdus", "Fribble Bibble", "Tegan Parker", "Drevarr Moonwillow", "Arriasa", "Artakama Nahid", "Primal Clone"];
const professions = ["Scrapper", "Scrapper", "Tempest", "Scrapper", "Druid", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.0, 2.9722, 24.0873, 4.9831, 264.7313, 5.0, 94.0727, 69.4651, 52.1667], [87.5544, 5.1429, 7.9444, 23.1667, 10.0339, 4.0303, 237.8657, 13.0286, 43.3893, 4.0, 0.9767, 31.027, 37.2727, 53.5349, 49.7407], [85.2953, 8.1714, 5.9583, 20.0635, 0.0, 233.1305, 15.0286, 42.4962, 4.0, 1.9767, 89.1622, 73.0182, 53.2558, 58.7222, 46.7917, 67.875, 16.0779, 54.8218, 50.8421, 82.1574, 107.5238, 82.8434, 98.7442, 76.1719, 149.5263], [88.8238, 19.2, 7.5, 48.2143, 0.9831, 0.0, 312.0875, 13.0667, 53.8473, 1.0, 0.0, 83.5811, 73.4, 56.9535, 79.2407, 79.8958, 18.1964, 60.1558, 82.2673, 48.4211, 120.1389, 117.8333, 121.2651, 115.2674, 87.8594, 197.3918], [95.886, 17.7714, 5.9583, 27.1111, 5.9831, 0.0, 316.9797, 22.0476, 10.9847, 19.043, 3.9767, 101.2838, 85.8, 46.1163, 13.0185, 63.0208, 79.3036, 106.9481, 36.9802, 113.6491, 166.4259, 102.5833, 156.2771, 146.7674, 105.7188, 186.5556], [79.7254, 6.0571, 7.9444, 13.1508, 334.6591, 18.2952, 62.0534, 10.0215, 1.9767, 82.3784, 82.6545, 53.6977, 96.7407, 53.3542, 59.2857, 88.0, 86.0396, 36.0526, 117.287, 101.1786, 109.6265, 110.2093, 102.75, 202.4094], [0.0, 0.0, 1.0, 0.0, 31.0938, 0.0, 0.0, 0.0, 0.0, 25.0946, 29.0, 23.7907, 24.3148, 0.0, 38373.0536, 8.039, 12.9703, 24.1579, 54.537, 61.8214, 35.0361, 26.3256, 0.0, 105.5731]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

