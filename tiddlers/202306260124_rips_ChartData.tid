created: 20230626012458000
creator: Drevarr
modified: 20230705163538338
modifier: drevarr
tags: ChartData
title: 202306260124_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Shaca Booey", "Elonith Requiem", "Johosh The Mighty", "Oo Dads Mad", "Momomeko", "Arcanophage Farra", "Tootsy Pop Star", "Zayde Sunsabre", "Smol Daddy Tika", "Necrotic Windrunner", "Mammary Mission", "Elonith Requiem", "Be\u00eb", "Rozaalyna", "Smol Gluvs", "Morton Saltbringer", "Newtype Khan", "Eibh\u00ebar", "Primal Clone"];
const professions = ["Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Chronomancer", "Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Reaper", "Scourge", "Scourge", "Scourge", "Chronomancer", "Spellbreaker", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.3065, 0.0, 0.4186, 0.6269], [0.566, 0.0951, 0.5714, 1.5429], [0.0, 1.1136, 0.686, 0.6119], [0.0, 0.963, 0.3889, 0.0685, 0.8868, 0.057], [0.5476, 0.0, 0.6364, 0.0545, 0.3333, 0.7708, 0.2581, 0.1136, 0.3488, 0.4328], [0.0, 0.4074, 0.4, 0.0565, 1.0, 0.0076, 1.0952, 0.8], [0.5849, 0.1065, 0.9048, 0.0, 0.1818, 0.0, 1.1667, 0.75, 0.1452, 0.0227, 0.3605, 0.0746], [0.0, 0.2963, 0.3889, 0.0565, 0.6415, 0.0076, 0.7619, 0.0, 0.6515, 0.0, 0.0, 0.2917, 0.2581, 0.1364, 0.5814, 0.2388], [0.1667, 0.0, 0.9048, 0.8333, 0.7581, 1.3182, 0.7558, 0.4179], [0.4151, 0.0798, 0.5476, 0.8857, 0.5758, 0.0182, 0.881, 0.4375, 0.4516, 0.9091, 0.2558, 0.2388], [0.3396, 0.1597, 0.5952, 0.8857, 0.0455, 0.0, 0.0, 0.7708, 1.1613, 0.0909, 0.8721, 0.1642], [0.027, 0.6481, 0.3333, 0.1855, 0.6364, 0.0364, 1.0, 0.2292, 0.5161, 0.7727, 0.4535, 0.4627], [1.0943, 0.1863, 1.4762, 1.0, 0.0909, 0.0545, 0.2619, 0.9375, 0.6613, 0.2727, 0.2442, 0.5224], [0.6038, 0.0152, 0.6667, 1.7714, 0.8485, 0.0, 0.0952, 0.0208, 1.0, 0.8864, 0.6977, 0.9254], [0.9057, 0.2091, 1.3095, 0.8, 0.1818, 0.1455, 1.1667, 0.8958, 0.4677, 0.9318, 0.5349, 0.4925], [0.009, 0.3519, 0.2222, 0.0847, 0.3774, 0.0951, 0.5952, 0.6857, 0.4697, 0.0727, 0.1429, 0.9583, 0.629, 1.4545, 0.8605, 0.7612], [0.045, 0.2963, 0.1778, 0.1048, 0.9811, 0.0532, 1.4286, 0.0, 0.6667, 0.0909, 0.6667, 1.125, 0.7097, 1.6364, 0.4535, 0.209], [0.045, 1.3704, 0.7111, 0.2339, 1.2642, 0.2814, 1.0952, 1.3714, 0.6515, 1.5714, 1.0417, 0.0968, 1.6818, 0.7674, 0.0448], [0.009, 1.2037, 0.6222, 0.1371, 1.2264, 0.289, 2.3333, 2.2857, 0.9545, 0.9524, 0.875, 1.1774, 0.0227, 1.1163, 0.9552]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

