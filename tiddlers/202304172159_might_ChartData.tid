created: 20230417215912000
creator: Drevarr
modified: 20230705163525813
modifier: drevarr
tags: ChartData
title: 202304172159_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Mettrik Milliohm", "Black Raspberry Pie", "Mac Chiato", "Ark Darkness", "Koralia Danai", "Miphest\u00f6", "Venomina The Siren", "Drevarr Moonwillow", "Gavann", "Sub Train", "Solus Sanctus", "Sygaldry Verdandi", "Johosh The Great", "Smol Daddy Tika", "Bella Sassy", "Newtype Khan", "Grasszanine", "Arcanophage Farra"];
const professions = ["Firebrand", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Tempest", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.0741, 5.0645, 44.1294, 0.0, 12.2892, 5.828, 6.4239, 5.2479, 4.6834, 5.2361, 0.9504, 12.0809, 12.4109, 0.0853, 10.1283, 8.0742, 3.7147, 10.152, 2.3443, 12.0452, 3.8688, 0.0, 17.4134], [0.0, 0.0, 4.1254, 55.7424, 0.0, 20.631, 19.349, 15.7525, 9.7044, 5.0882, 11.6953, 0.0, 8.883, 1.0181, 0.0, 5.073, 5.2553, 5.3479, 0.0, 0.0, 0.0, 4.8504, 0.4742, 0.0, 5.1163, 6.1916, 0.0, 0.0, 3.6158, 0.1784, 0.588], [0.0, 3.6894, 50.8636, 0.0, 25.3163, 0.0, 10.7251, 20.7477, 1.2848, 8.7465, 9.309, 0.0, 0.0, 1.5989, 0.0, 0.0, 3.0694, 0.0, 1.6253, 5.6046, 0.0, 3.8006, 19.7654, 0.1248, 12.5664, 1.1907, 0.3234, 0.0, 2.916, 1.4715, 7.595], [37.6261, 0.0, 11.7678, 7.5181, 9.9989, 5.9559, 5.3773, 9.5932, 14.7458, 13.429, 3.8122, 3.2399, 23.6964, 7.0256, 8.5373, 9.3906, 1.5274, 13.1769, 6.6643, 1.7739, 20.2858, 7.0251, 3.6544, 6.9654, 1.8274, 0.8472, 0.3185], [0.0, 6.3017, 6.8589, 62.7102, 0.0, 22.4185, 4.5458, 6.4239, 9.7877, 1.7924, 7.5293, 3.0254, 14.805, 1.2605, 5.317, 3.3678, 17.2946, 3.8798, 5.0833, 20.6086, 3.8006, 11.6814, 6.24, 0.0, 28.4539, 8.6524, 1.423, 5.1507, 3.6547, 0.4905, 1.421], [58.7618, 0.0, 20.333, 9.4414, 8.6583, 4.0817, 3.4114, 6.9178, 25.9384, 17.7437, 0.0, 6.9061, 9.555, 4.509, 13.4902, 0.6599, 8.8445, 17.5423, 3.6691, 0.0, 20.555, 8.0174, 11.513, 10.8864, 1.3823, 13.475], [157.4723, 31.9519, 18.4165, 2.0668, 26.5727, 0.0, 18.1927, 0.0, 1.115, 1.5773, 0.0, 0.0, 2.9978, 0.4061, 10.585, 0.0, 0.0, 0.0, 8.2952, 5.8535, 0.0, 17.1072, 13.4216, 16.758], [0.0, 2.6312, 11.8259, 7.6471, 69.2135, 23.8336, 11.248, 14.4119, 9.871, 20.0635, 5.7712, 0.0, 15.2195, 15.4651, 8.9949, 12.5171, 9.3325, 19.8117, 2.3857, 5.7542, 10.9538, 5.8157, 3.2076, 12.2971, 13.2962, 6.3386, 6.0306, 8.2814, 8.6951, 5.684], [68.0522, 4.7736, 18.769, 17.4257, 14.9146, 5.7061, 7.1119, 8.4084, 0.0, 15.1011, 14.7864, 3.1646, 13.2153, 20.2566, 16.0436, 16.4228, 21.9791, 4.7597, 16.1276, 2.471, 9.9144, 20.6448, 1.0319, 0.9379, 8.6334, 12.4027, 6.5101, 5.2675], [19.4779, 7.5968, 55.2779, 5.108, 22.1206, 18.5913, 9.9989, 1.2079, 7.9792, 1.911, 17.1146, 12.12, 7.6699, 8.1423, 31.9137, 3.8274, 12.9037, 14.0098, 5.9141, 22.1502, 3.0202, 7.8975, 40.2125, 9.9225, 13.0654, 5.4074, 8.5925, 2.2741, 4.0915], [5.3655, 0.5491, 70.1425, 1.1286, 23.0888, 9.8493, 19.0483, 7.7885, 19.0806, 11.1985, 1.3306, 21.0823, 10.7626, 6.7123, 11.3396, 29.4294, 5.8722, 9.971, 20.9639, 11.4374, 22.5139, 5.8656, 5.4432, 43.1746, 10.8751, 6.2416, 6.9104, 1.4386, 11.0137, 5.2675], [7.5001, 20.992, 6.6745, 89.1878, 6.7382, 31.7285, 14.2203, 7.988, 7.5386, 10.5232, 14.6383, 2.669, 18.4174, 10.3747, 6.7032, 11.3396, 30.0027, 12.1638, 5.5395, 14.9742, 6.5534, 14.3491, 6.0403, 1.8468, 28.2744, 16.392, 7.2442, 7.387, 5.9875, 7.2236, 7.5215], [3.1141, 16.859, 5.467, 86.633, 1.6386, 32.7712, 14.4534, 13.5181, 8.455, 16.3052, 7.6822, 4.2214, 26.3529, 23.9006, 6.9061, 27.6139, 7.8645, 8.2114, 21.8776, 11.2066, 18.2294, 6.7891, 1.9197, 35.9938, 27.4258, 9.508, 7.9735, 3.4992, 2.9429, 1.3965], [8.6184, 28.6474, 69.3693, 35.7573, 53.8956, 13.4514, 14.9717, 37.2672, 21.3408, 17.9577, 50.3554, 25.2825, 35.8651, 33.8884, 18.081], [1.345, 0.04, 17.5956, 10.9508, 97.5492, 24.4294, 16.6681, 16.8697, 13.6612, 16.5365, 18.1163, 4.7441, 22.1483, 20.2646, 11.6806, 45.864, 9.6471, 13.6205, 19.4918, 4.7242, 28.2536, 4.6675, 0.0, 26.4792, 6.1519, 10.5428, 5.9756, 10.7309, 11.7718, 8.869], [3.7809, 29.4215, 9.9781, 144.2335, 0.0, 58.6158, 20.6894, 24.8018, 13.7861, 27.6958, 21.5561, 2.8195, 27.8334, 26.7125, 0.0, 22.0823, 42.9019, 18.8224, 34.4098, 4.1623, 11.8104, 15.4404, 8.8608, 30.4286, 16.3126, 15.5555, 12.5377, 16.4851, 0.0, 0.0], [11.5498, 35.8868, 11.2862, 259.6667, 89.0781, 37.474, 50.1064, 0.4998, 58.2826, 27.9388, 0.0, 52.4689, 37.7659, 7.8523, 35.7239, 65.2606, 37.9593, 62.889, 14.0605, 18.3994, 37.2672, 24.2362, 22.8663, 42.3667, 37.7452, 28.0388, 13.4909, 30.4819, 39.5067, 14.945], [45.9532, 20.4762, 263.6151, 0.0, 120.881, 23.8948, 64.7417, 51.4794, 84.8798, 48.5012, 11.6345, 68.5175, 74.7562, 5.627, 38.2817, 110.6469, 57.5157, 100.4921, 38.0192, 21.7738, 70.4521, 33.9955, 33.5097, 92.0938, 52.3114, 59.635, 27.9899, 52.2547, 46.7749, 25.4065]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

