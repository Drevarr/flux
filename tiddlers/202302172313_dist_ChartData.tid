created: 20230217231312000
creator: Drevarr
modified: 20230705163519439
modifier: drevarr
tags: ChartData
title: 202302172313_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Abigail Ryn", "Mako Engi", "Panther B Me", "Sister Elonith", "Blanco Padre Guard", "Arcanophage Farra", "Sp\u00edcy Cheese", "Tribal S", "Legacy Of Mathus", "Ravioli Fetabringer", "Rina Of Theros", "Mistwalker Caelon", "Veron Blackburn", "Drevarr Moonwillow", "Koralia Danai", "Mac Aaroni", "Arka\u00f1", "Jeckyll Mbs", "Johosh The Great", "Be\u00eb", "Xanvias Tseli", "Smol Gluvs", "Bella Sassy", "\u00c9\u00efbhear"];
const professions = ["Tempest", "Scrapper", "Scourge", "Berserker", "Firebrand", "Spellbreaker", "Berserker", "Druid", "Berserker", "Firebrand", "Scourge", "Vindicator", "Herald", "Scrapper", "Firebrand", "Tempest", "Chronomancer", "Berserker", "Firebrand", "Scourge", "Berserker", "Scourge", "Firebrand", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[203, 212, 255, 345, 9653, 5065, 9049, 284, 257, 312, 11036, 3412, 18450, 295, 378, 16444], [12090, 258, 387, 449, 6987, 2013, 777, 163, 225, 230, 17300, 10982, 548, 376, 18334, 28859], [3995, 228, 505, 390, 3769, 3599, 4353, 230, 208, 276, 293, 1335, 304, 330, 11108, 544, 890, 1014, 545, 12625, 530, 482, 324, 628, 412, 1055, 4205], [1134, 270, 226, 318, 2654, 818, 10125, 211, 303, 291, 904, 1913, 404, 12982, 529, 1099, 338, 500, 4448, 586, 650, 336, 393, 941, 2668, 8736], [10144, 275, 293, 436, 403, 7997, 2672, 211, 424, 274, 538, 11304, 407, 10648, 333, 512, 2189, 331, 2746, 528, 602, 380, 719, 339, 1028, 642], [694, 301, 188, 460, 5278, 2512, 11152, 194, 215, 304, 9312, 274, 9358, 560, 3729, 15319, 1545, 13028, 310, 550, 308, 551, 1749, 2113, 428], [263, 123, 263, 7479, 8844, 8034, 181, 1566, 409, 6932, 14680, 16479, 387, 1283, 21395, 877, 12892, 2336, 556, 256, 1628, 475, 9074], [4314, 210, 208, 449, 5743, 1013, 9753, 340, 327, 227, 440, 1812, 451, 292, 13248, 350, 468, 23923, 359, 1268], [3927, 295, 191, 2196, 6201, 9189, 12938, 143, 243, 272, 441, 3142, 251, 4467, 11771, 424, 662, 2746], [336, 183, 237, 282, 4653, 4560, 1637, 209, 207, 193, 236, 11039, 175, 280, 11247, 420, 241, 290, 419, 2345, 484, 561, 291, 4236, 491, 3273, 530], [12720, 217, 212, 392, 3878, 1463, 9675, 166, 325, 174, 5043, 2626, 373, 330, 541, 352, 387, 11585, 396, 8862, 373, 499, 281, 1264, 640, 2825, 10102], [4197, 355, 221, 294, 8529, 4922, 726, 204, 177, 284, 285, 7619, 1504, 378, 2117, 374, 748, 24163, 376, 12918, 299, 381, 377, 10286, 714, 10065, 2221], [1251, 424, 208, 322, 23625, 4414, 2787, 325, 3795, 440, 356, 697, 389, 257, 17871, 306, 11423], [396, 165, 166, 242, 606, 4729, 2635, 214, 250, 277, 11380, 345, 1487, 280, 266, 513, 325, 12176, 875, 445, 255, 1069, 885, 14983, 679], [604, 263, 269, 360, 629, 3420, 13124, 301, 239, 435, 5323, 358, 16425, 266, 349, 338, 372, 12463, 352, 577, 325, 421, 601, 2593, 424], [312, 431, 225, 396, 465, 5106, 2731, 171, 222, 272, 10868, 490, 486, 806, 9918, 779], [3526, 230, 266, 490, 367, 9268, 703, 147, 268, 276, 287, 2093, 394, 292, 12065, 333, 323, 12722, 419, 766, 538, 629, 359], [282, 220, 143, 314, 11500, 3772, 2667, 196, 230, 270, 4069, 3439, 11020, 417, 235, 34054, 400, 5646, 386, 623, 235, 320, 1997, 1518, 3471], [13570, 180, 214, 347, 266, 2420, 16286, 159, 211, 199, 421, 4366, 201, 257, 12319, 264, 288, 1624, 262, 11939, 1650, 517, 302, 446, 357, 3662, 7260], [293, 199, 185, 293, 278, 3305, 7613, 134, 213, 182, 249, 2913, 353, 236, 4909, 401, 585, 36930, 410, 1844, 337, 846, 297, 8770, 549, 8284, 31700], [1386, 272, 184, 242, 226, 5538, 2156, 175, 210, 1436, 1043, 264, 14653, 295, 289, 40098, 371, 5219, 295, 308, 326, 2470, 511, 1735, 349], [1182, 171, 160, 326, 4762, 2938, 2738, 158, 196, 159, 10994, 1375, 161, 773, 8390, 263, 314, 34933, 403, 7160, 304, 537, 232, 14802, 753, 1014, 5591], [171, 173, 167, 272, 207, 2860, 2575, 219, 163, 11092, 3232, 10820, 286, 16139, 10735, 203, 189, 5564, 208, 7378, 336, 246, 170, 1996, 203, 2294, 333], [312, 153, 164, 211, 314, 3735, 991, 176, 181, 749, 675, 332, 242, 4876, 294, 199, 226, 325, 4172, 1998, 403, 229, 288, 355, 739, 9832]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

