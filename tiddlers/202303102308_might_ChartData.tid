created: 20230310230833000
creator: Drevarr
modified: 20230705163521643
modifier: drevarr
tags: ChartData
title: 202303102308_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Demon Sekhmet", "Sub Train", "Zadie Miststep", "Kiloak", "Mac Chiato", "Tegan Parker", "K\u00f4sair", "Blanco Padre Guard", "Koralia Danai", "High Sorcer Baradun", "Alatreon", "Venomina The Siren", "Viral Marketing", "Akira Moonbright", "Zaylen Harker", "Drevarr Moonwillow", "Aronorf Xideliesi", "Bella Sassy", "Zefirokai", "K\u00f4sair", "Arcanophage Farra"];
const professions = ["Spellbreaker", "Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Berserker", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Firebrand", "Herald", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[62.964, 71.7462, 29.3454, 30.5997, 103.3099], [15.3405, 64.9178, 7.5854, 23.1067, 2.8318, 3.5908, 12.0019, 4.6192, 17.7261, 18.9103, 3.0222, 5.1286, 0.4104, 15.6006, 8.5839, 12.9715, 10.0166, 11.0871, 8.1081, 3.1842, 8.478, 11.3022, 12.4236, 12.9912, 11.8104], [31.383, 17.388, 36.5332, 8.533, 0.0, 105.9875, 0.0, 27.158, 11.6012, 5.3162, 1.6256, 0.0, 10.4678, 0.0, 0.0, 0.0, 0.0, 6.7417, 0.0, 1.6038, 3.6391, 5.5485, 3.3158, 2.8758, 8.9447, 4.2543, 6.156, 0.0, 6.833, 0.0, 10.878], [8.514, 23.9085, 17.8112, 13.524, 1.4352, 97.6, 5.3235, 29.1912, 4.9974, 2.386, 0.1049, 0.5707, 10.513, 4.9237, 8.2603, 4.4273, 1.3041, 2.6264, 0.4195, 7.3629, 1.1606, 8.0229, 14.1614, 9.9141, 5.9202, 4.698, 1.674, 6.9552, 6.8758, 17.8824, 17.7156], [0.0, 11.638, 6.6815, 5.5016, 120.475, 0.0, 37.3241, 5.9345, 2.679, 0.0, 0.0, 20.9808, 0.0, 0.0, 0.0, 4.0326, 9.4483, 3.3534, 1.8256, 2.9992, 12.3653, 8.0599, 37.2586, 11.9799, 34.776, 0.0, 5.5692, 4.1869, 11.251], [1.089, 26.3718, 10.2212, 4.186, 0.5083, 200.5375, 28.0035, 30.7888, 0.0, 0.0, 0.0, 2.1402, 4.151, 0.0, 0.0, 0.0, 0.0, 3.2468, 1.2677, 3.7908, 0.0, 26.393, 3.0395, 3.7083, 15.8301, 15.4773, 31.212, 0.0, 0.0, 0.0, 10.2564], [6.93, 3.9123, 7.4888, 3.22, 3.289, 457.5], [14.9985, 40.572, 17.0016, 31.234, 0.0, 176.9, 13.356, 49.3782, 7.4069, 13.6045, 1.783, 5.731, 8.1216, 6.878, 3.6613, 5.1823, 0.7866, 6.9485, 2.2982, 0.0, 0.0, 29.6921, 14.2305, 2.6488, 12.5483, 8.0127, 13.446, 0.7866, 11.524, 8.2564, 8.7646], [9.8505, 26.082, 19.0256, 22.057, 1.4651, 193.675, 18.396, 60.2705, 4.3728, 6.3627, 5.6635, 1.189, 5.7754, 6.5227, 12.0555, 5.8001, 5.8788, 6.266, 6.962, 0.0, 21.2193, 28.5991, 0.8325, 21.6216, 2.7144, 3.186, 2.0286, 8.5037, 3.9521, 6.8998], [21.483, 43.1802, 24.3892, 31.3145, 3.6179, 233.325, 0.0, 47.6354, 1.1601, 0.0, 0.6031, 23.1014, 0.0, 9.3318, 0.0, 0.0, 0.0, 13.1585, 0.0, 0.0, 0.0, 11.502, 9.7704, 0.0, 22.4997, 34.6853], [28.116, 93.6054, 73.5724, 48.2195, 4.6345, 298.1375], [26.433, 36.9495, 33.0924, 37.513, 2.7807, 218.075, 16.758, 85.25, 2.5433, 15.237, 0.0, 0.0, 22.9661, 1.2944, 12.8145, 9.0948, 0.176, 9.9264, 0.4104, 7.5816, 0.0, 2.3244, 3.3158, 5.5625, 4.955, 3.8106, 0.0, 5.5476, 2.8703, 0.0, 6.7754], [14.256, 39.123, 30.9672, 33.4075, 3.6777, 235.6125, 12.9465, 42.8428, 5.399, 6.0697, 5.1916, 2.1164, 7.9862, 6.4211, 11.609, 0.0, 5.3095, 5.4388, 8.3904, 8.0919, 0.0, 14.6211, 15.4048, 9.3465, 16.3449, 1.4877, 11.07, 13.8276, 6.5117, 8.0608, 22.9992], [13.9095, 47.0925, 32.5864, 21.896, 7.4451, 209.6875, 13.5765, 61.4323, 15.5278, 12.0557, 8.338, 5.8499, 12.769, 8.1216, 15.7614, 14.6203, 4.1193, 7.1966, 4.5691, 11.5911, 8.0519, 22.344, 20.1714, 7.3788, 24.5174, 9.1611, 4.6782], [6.732, 37.674, 27.1216, 31.6365, 11.6311, 240.1875, 9.702, 43.569, 16.5094, 20.8881, 3.0153, 6.706, 13.1299, 6.6496, 20.2264, 15.2724, 4.0779, 7.4655, 11.1537, 17.3954, 15.4048, 15.2117, 24.0669, 6.4989, 5.508, 8.5698, 6.8544, 5.6347, 13.4887], [12.375, 32.0229, 21.4544, 26.4845, 6.0996, 226.4625, 1.827, 47.7807, 18.9189, 13.8975, 2.2025, 6.0877, 13.536, 5.2283, 11.0285, 12.3895, 2.3184, 7.2173, 3.9672, 9.477, 4.2557, 20.9944, 27.4938, 15.7036, 31.2097, 9.7875, 19.062, 12.5028, 9.5319, 9.8999, 25.237], [12.7215, 57.0906, 19.8352, 27.6115, 4.5149, 227.9875, 15.12, 59.98, 12.3597, 6.1953, 8.1544, 8.9175, 22.4246, 11.1672, 17.101, 6.4865, 4.7092, 6.3694, 2.5992, 6.7068, 2.6235, 23.0938, 24.9379, 19.1092, 6.5637, 8.3781, 18.468, 7.4106, 7.9682, 9.2347, 14.7319], [20.295, 39.5577, 19.1268, 40.3305, 1.8538, 278.3125, 12.789, 74.9387, 7.8085, 17.9579, 5.7422, 1.6646, 22.8758, 7.3602, 15.4489, 6.6581, 2.7117, 12.2632, 18.1156, 4.304, 32.2414, 30.7406, 13.8494, 24.1313, 1.1223, 15.768, 8.5284, 8.7608, 19.3693, 12.9914], [31.3335, 64.3356, 37.2416, 73.6575, 6.4584, 495.625, 6.9615, 105.437, 32.0372, 27.7532, 0.0, 7.3718, 62.4461, 16.294, 24.3343, 6.2806, 15.2766, 10.1125, 0.0, 26.3898, 1.0397, 29.0922, 42.6914, 12.9413, 67.5675, 16.1559, 40.014], [25.7985, 183.4255, 64.6544, 67.9388, 19.901, 40.0455, 65.6947, 34.5929, 64.4299, 30.6821, 16.7877, 31.6197, 57.2265, 17.1194, 98.3738, 106.0378, 65.0848, 88.9317, 44.9964, 83.16, 69.1794, 26.6251, 59.3993, 111.2664], [73.359, 95.3442, 140.4656, 116.1615, 29.1226, 978.2875, 47.565, 188.0728, 68.6256, 75.6829, 18.5375, 56.8963, 41.141, 16.3419, 9.0045, 35.6316, 14.592, 55.4405, 15.8621, 96.4243, 116.3998, 61.4522, 117.2457, 31.32, 72.36, 54.2754, 0.0, 42.5734, 27.6612]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

