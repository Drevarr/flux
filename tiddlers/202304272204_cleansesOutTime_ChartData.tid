created: 20230427220456000
creator: Drevarr
modified: 20230705163526934
modifier: drevarr
tags: ChartData
title: 202304272204_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Klenga", "Vinnakh", "Bell Delinger", "Johosh The Great", "Elusive In The Mist", "Sole Tempesta", "Chio Slayer", "Primal Clone", "Xkaet", "Solikai", "Mac Aaroni", "Drevarr Moonwillow", "Zadie Miststep"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Firebrand", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[636464.4, 0.0, 12974.4, 688.5, 0.0, 0.0, 197056.2, 46552.8, 17928.96, 265197.24, 1580.25, 53627.04, 1489636.8, 5273.1, 15770.68, 48941.7, 278208.0, 0.0], [26773.44, 3805646.4, 16669.8, 104241.46, 32533.5, 139104.0, 4841.6], [0.0, 271748.4, 101352.72, 649313.28, 9978.15, 340840.32, 2822120.64, 40994.1, 0.0, 93545.6], [1589101.8, 9696.24, 16718.4, 8413.47, 0.0, 20976.3, 766062.0, 116572.4, 24961.44, 429604.56, 526.75, 241441.92, 1639209.6, 18468.0, 62763.66, 32533.5, 556657.92, 7278.72], [0.0, 78213.6, 113512.08, 408788.8, 24961.44, 1115591.4, 19023.2, 74949.6, 3462508.8, 35696.7, 211445.62, 164459.2, 521700.48, 11521.92], [3538563.6, 67873.68, 61833.6, 30128.76, 11836.44, 161200.8, 2135723.04, 744464.0], [297334.8, 2134135.08, 24983.0, 1066208.16, 7687906.56, 50495.4], [1594078.2, 0.0, 36892.8, 12627.09, 0.0, 58247.1, 1081255.56, 382513.6, 99613.92, 1314842.76, 8187.2, 362243.04, 4858882.56, 25830.9, 225210.78, 201330.5, 698906.88, 8921.6], [87603.84, 44697.6, 11305.17, 0.0, 154407.6, 1808484.48, 501085.2, 234274.32, 1944197.64, 19233.9, 471340.8, 6881431.68, 34457.4, 107113.0, 234052.6, 1151781.12, 8595.2], [4058425.8, 155139.84, 65592.0, 19994.04, 9325.68, 147339.0, 3076678.44, 750461.6, 282265.2, 3084820.2, 27707.05, 1128572.64, 8345756.16], [4940192.4, 164884.32, 42451.2, 24469.29, 5363.12, 112041.9, 2241237.24, 802440.8, 313177.2, 2763739.44, 26171.95, 995507.04, 9828354.24, 120309.3, 229951.1, 191853.35, 3540378.24, 18049.92], [3890858.4, 291273.12, 54907.2, 25267.95, 9479.4, 337732.2, 3028016.64, 620608.8, 385859.04, 2540454.84, 37068.15, 1217389.92, 10141577.28, 149712.3, 356936.98, 414731.4, 3062102.4, 22227.84], [3969622.8, 155429.28, 40910.4, 34025.67, 6302.52, 218162.7, 3034954.56, 922964.0, 376392.24, 2975049.0, 40469.45, 1707888.96, 10244992.32, 135156.6, 363773.98, 288275.1, 3755928.96]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

