created: 20230212214943000
creator: Drevarr
modified: 20230705163519137
modifier: drevarr
tags: ChartData
title: 202302122149_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Arka\u00f1", "Koralia Danai", "Ark Darkness", "Legionstorm", "Primal Shield", "Sygaldry Verdandi", "High Sorcer Baradun", "Blanco Padre Guard", "Zaylen Harker", "Bella Sassy", "Veggie Mac", "Tegan Parker", "Joh Oshi", "Zadie Miststep"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Soulbeast", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.7838, 90.4613, 55.5433, 14.8107, 17.094, 30.3138, 18.8934, 29.52], [39.3347, 99.5904, 78.9458, 21.1599, 30.229, 16.8102, 21.5053, 17.5939], [61.9542, 104.0957, 117.2135, 0.0, 53.65], [0.0, 65.0894, 0.0, 34.5543, 56.314, 47.0943, 94.569, 222.7776], [20.6791, 260.4763, 195.0545, 11.6117, 92.648, 5.8311, 20.759, 86.159], [83.1046, 234.9859, 142.9261, 20.4395, 44.104, 42.0849, 20.7082, 138.3898], [18.3229, 268.7755, 306.6433, 7.252, 0.0, 72.928, 79.7434], [22.675, 307.0704, 164.7216, 16.5201, 32.745, 22.3938, 22.6077, 202.4285], [80.5543, 403.6968, 284.4461, 23.4676, 70.152, 20.1267, 39.9917, 86.4739], [75.7865, 379.9848, 175.3682, 36.6544, 59.496, 53.1828, 91.991, 312.8726], [27.6091, 417.3312, 869.6095, 23.0769, 200.799, 19.4436, 24.8464, 166.9258], [97.907, 485.029, 581.9494, 24.7008, 179.154, 82.4472, 65.4486, 305.591], [114.6499, 703.535, 1042.8685, 57.7899, 147.001, 33.3927, 100.505, 464.8022], [121.5799, 932.1187, 786.7465, 36.1416, 230.325, 64.4292, 80.8314, 458.6227]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

