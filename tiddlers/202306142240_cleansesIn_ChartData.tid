created: 20230614224052000
creator: Drevarr
modified: 20230705163535369
modifier: drevarr
tags: ChartData
title: 202306142240_cleansesIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Elonith Requiem", "Johosh The Mighty", "Johosh The Mighty", "Morton Saltbringer", "Rina Of Theros", "Cedryn X", "Elonith Requiem", "Mistwalker Cael", "Permanent Dawn", "Koralia Danai", "Smol Gluvs", "Xanvias Einzbern", "Be\u00eb", "Zayde Sunsabre", "Solus Sanctus", "Sakis Ranger", "Momomeko", "Arriasa", "Venomina The Siren", "Crusader Siolith", "Ryvalia Fazebringer", "Black Raspberry Pie", "Artakama Nahid", "Tika Fiery", "Shaca Booey"];
const professions = ["Reaper", "Spellbreaker", "Berserker", "Chronomancer", "Scourge", "Berserker", "Scourge", "Vindicator", "Weaver", "Firebrand", "Scourge", "Berserker", "Scourge", "Spellbreaker", "Firebrand", "Druid", "Chronomancer", "Druid", "Tempest", "Firebrand", "Chronomancer", "Chronomancer", "Tempest", "Firebrand", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2653, 0.5745, 0.5636], [0.9146, 0.2056], [0.8657, 0.6667], [0.5672, 0.2857, 0.5244, 0.2897], [0.1633, 0.3404, 0.5818, 0.5322, 0.1625], [0.6866, 0.5079, 0.8902, 0.1028], [0.8421, 0.275], [0.5102, 0.383, 0.6, 0.4328, 0.254, 0.6463, 0.0187], [0.2041, 0.1915, 0.5455, 0.4737, 0.15, 0.2537, 0.1746, 0.2561, 0.1215], [0.3061, 0.1064, 0.5455, 0.3977, 0.175, 0.4776, 0.0952, 0.6341, 0.0093], [0.3673, 0.3404, 0.3273, 0.9064, 0.3625], [0.4082, 0.8085, 0.7455, 0.6567, 0.5873, 0.7439, 0.0748], [0.5714, 0.4255, 0.8545, 1.0409], [0.4898, 0.766, 1.0727, 1.0409, 0.5375, 0.0], [0.2041, 0.234, 0.4182, 0.6608, 0.3, 0.9552, 0.5397, 0.8293, 0.215], [0.3878, 0.1915, 0.4909, 0.9649, 0.4625, 0.4627, 0.5079, 0.7195], [0.2245, 0.383, 0.5455, 0.848, 0.525, 0.4179, 0.4603, 0.9268, 0.1776], [0.3673, 0.1915, 0.8727, 0.9415, 0.45, 0.7612, 0.6667, 0.8415, 0.0093], [0.551, 0.6809, 0.9818, 1.1637, 0.6, 0.4925, 0.4603, 0.4024, 0.0561], [0.3878, 0.383, 0.8727, 0.9532, 0.4625, 0.7015, 0.9206, 0.6463, 0.1776], [0.2041, 0.3617, 0.5818, 0.8947, 0.6125, 0.7164, 1.1587, 0.8659, 0.1402], [0.4694, 0.1915, 0.5818, 0.8889, 0.5625, 1.0299, 0.8095, 0.939, 0.1776], [0.3673, 0.5532, 0.6909, 1.1287, 0.475, 0.6567, 0.5873, 0.8293, 0.1495], [0.2857, 0.2553, 0.6182, 1.1637, 0.6, 0.8507, 0.9365, 1.2927, 0.1776], [0.5306, 0.6809, 0.4182, 1.1404, 0.825, 1.1045, 0.6984, 0.9634, 0.1682]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

