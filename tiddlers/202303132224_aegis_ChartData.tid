created: 20230313222416000
creator: Drevarr
modified: 20230705163521839
modifier: drevarr
tags: ChartData
title: 202303132224_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Heartthrobb", "Blanco Padre Guard", "Whose Guardian", "Drevarr Moonwillow", "Ark Darkness", "Sygaldry Verdandi", "Koralia Danai", "Ravioli Fetabringer", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.2058, 168.0651, 151.7692, 25.3938, 10.8956, 49.536, 0.0, 69.6442, 38.9247, 134.8833, 95.3471, 0.2851, 39.4056], [0.0, 91.5654, 129.2669, 168.0259, 0.0, 11.0603, 0.0, 44.2066, 0.0, 12.1378, 0.0, 0.0, 0.0, 53.3973, 50.3867, 32.4003, 2.8239, 0.0, 29.9099, 0.0, 37.3171, 0.0, 48.5237, 64.6094, 37.9685, 3.8064, 25.3008], [1.4396, 55.2109, 267.2906, 69.9892, 0.0, 7.6969, 5.1229, 2.3328, 0.0, 34.6891, 0.0, 0.0, 7.6558, 51.1766, 33.7757, 114.3493, 9.5212, 1.152, 37.7297, 0.0, 70.8374, 0.0, 1.2662, 106.919, 44.2411, 28.9536], [0.0, 26.5, 7.191, 430.3337, 60.64, 2.9744, 41.0395, 17.7929, 15.1632, 0.0, 22.7541, 2.499, 10.8312, 15.1057, 47.7446, 36.2674, 25.1615, 7.422, 3.6, 41.5734, 0.0, 28.5302, 16.186, 18.9924, 71.1186, 17.3448, 35.8176, 36.1368], [33.2983, 2.0774, 474.1176, 62.5877, 18.1438, 51.3883, 62.525, 68.9342, 0.0, 32.4576, 44.149, 0.0, 44.885, 136.5718, 63.3986, 33.1745, 25.8147, 46.8, 55.8435, 107.8834, 0.0, 54.5194, 46.0463], [80.5132, 273.4178, 283.9702, 105.3084, 36.8597, 16.2994, 23.7405, 290.4336, 41.1468, 3.2654, 99.6691, 40.5014, 125.4684, 72.7008, 124.3365, 18.9174, 86.796, 49.2607, 0.0, 48.599, 22.5685, 104.1603, 174.3008, 24.7104, 32.8848, 54.18], [38.6316, 26.2334, 142.3818, 839.4009, 181.2706, 23.4291, 75.1258, 35.9356, 119.9059, 56.4627, 30.4545, 29.0702, 50.8326, 188.8587, 220.8156, 69.407, 48.8804, 23.148, 50.807, 14.5314, 118.6771, 87.514, 189.0067, 91.6661, 26.4576, 50.4756], [71.7421, 211.5752, 764.3427, 153.6125, 10.8222, 84.7955, 51.6543, 90.7459, 11.6975, 68.4991, 108.6565, 102.1945, 57.4799, 179.3704, 129.7873, 92.9814, 57.477, 58.212, 66.6234, 10.3334, 121.0094, 6.9442, 90.3442, 126.8081, 59.495, 65.3328, 23.9652], [152.5485, 414.5212, 895.6945, 352.0233, 9.8155, 124.412, 63.3247, 310.2624, 39.9224, 114.3116, 74.7368, 63.4156, 152.1274, 128.1938, 121.2049, 61.5876, 43.7575, 57.888, 60.4382, 25.6721, 120.4128, 11.1141, 55.4876, 160.1977, 60.683, 31.7928, 50.7024], [185.4736, 245.2131, 1843.0958, 268.1402, 30.8422, 166.0982, 45.1569, 427.7189, 85.3343, 154.3765, 98.1274, 84.8254, 105.0815, 316.0431, 326.9045, 112.4138, 135.4958, 96.408, 114.0728, 158.2667, 176.8766, 136.5685, 163.707, 388.5004, 118.7525, 43.1496, 78.8004]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

