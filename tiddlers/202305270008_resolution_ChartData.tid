created: 20230527000807000
creator: Drevarr
modified: 20230705163531810
modifier: drevarr
tags: ChartData
title: 202305270008_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Gavann", "Sub Train", "Primo Pobre", "Air One Com", "Aronorf Xideliesi", "Blanco Padre Guard", "Lucas Ryn", "Tika Fiery", "Bella Sassy", "Koralia Danai", "Solus Sanctus"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[535.6339, 335.9155, 51.3447, 374.0429, 137.5296, 67.4074, 0.0, 0.0, 0.0, 0.0], [501.1661, 368.737, 27.1002, 0.0, 0.0, 435.2458, 0.0, 257.0381, 253.4693, 0.0, 0.0, 186.7272, 15.2054, 157.0509, 0.0, 103.1184, 133.4557, 0.0, 118.7601, 0.0], [240.0647, 0.0, 554.4448, 239.2704, 110.7284, 0.0, 264.2387, 39.697, 0.0, 272.929, 600.0806, 0.0, 182.955, 331.2324, 156.9456], [520.151, 487.1875, 30.597, 0.0, 15.0416, 686.2003, 97.3544, 153.4349, 123.3077, 0.0, 122.3231, 126.5268, 96.241, 253.5142, 117.2246, 211.4878, 28.2064, 161.2937, 29.9013, 22.2733, 132.494, 362.7475, 30.24, 50.3403, 229.19, 139.0932], [686.2234, 621.0403, 48.3141, 53.7715, 508.2797, 57.1872, 212.9702, 132.1738, 0.0, 129.1047, 52.232, 31.3133, 104.9933, 124.8134, 164.5498, 23.7341, 336.7324, 0.0, 157.731, 366.1555, 90.1197, 214.6629, 190.674], [809.9021, 595.0032, 128.9154, 0.0, 1078.6723, 79.6196, 68.1446, 148.7112, 0.0, 44.589, 129.4747, 53.377, 244.2317, 29.8918, 115.573, 168.1102, 19.6603, 232.2157, 0.0, 169.9688, 552.505, 0.0, 274.7846, 131.7314], [836.6285, 817.0522, 189.7597, 25.0466, 17.808, 1279.1174, 170.166, 425.7216, 263.2157, 0.0, 112.4898, 268.4377, 173.1706, 728.9318, 20.6141, 289.0886, 388.7363, 54.9072, 326.3201, 23.9616, 337.5987, 732.1747, 0.0, 254.6686, 375.8716, 240.6672], [1006.0186, 1194.9571, 151.7611, 0.0, 25.0992, 1181.0563, 194.7088, 418.5715, 173.4859, 44.8272, 310.2582, 218.2783, 218.0198, 485.9546, 24.6596, 243.9576, 227.0348, 38.6343, 527.4951, 93.8441, 0.0, 320.5203, 527.1494, 217.232, 185.8718, 533.6248, 199.0656], [1017.815, 918.6336, 454.992, 78.5004, 0.0, 1515.5107, 143.8871, 425.5757, 347.0347, 58.5684, 459.1991, 247.5264, 144.3389, 770.5779, 30.5211, 158.472, 242.4632, 113.5782, 457.7518, 148.4647, 196.4788, 400.6367, 682.8269, 77.056, 151.1215, 511.8342, 186.624], [1240.6579, 1099.4266, 255.6744, 46.7826, 67.2896, 1660.896, 167.9534, 452.279, 373.3814, 24.1362, 326.9579, 241.9532, 258.1315, 575.017, 294.7579, 316.8163, 40.5826, 604.5074, 39.9135, 39.7925, 314.211, 741.8534, 0.0, 363.7476, 506.122, 268.11], [1396.9613, 1418.8397, 283.4739, 35.112, 15.9936, 1530.2995, 130.8838, 573.9034, 385.0142, 0.0, 331.1116, 272.6752, 244.3248, 600.3558, 238.3776, 323.8777, 33.21, 826.8019, 47.9368, 71.5904, 338.469, 995.6813, 18.032, 97.4117, 350.9075, 259.7508]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

