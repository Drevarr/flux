created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Synomi\u00f1 Spyce", "Herm E Licious", "Lost Uber Driver", "Free H\u00e4nd", "Shaca Booey", "Rapiorel", "Govinda Ektar", "Free H\u00e4nd", "No Reserv\u00e9", "Ateriuz", "Wall Knot", "Kittendoo", "A\u00fcrora Windrunner", "Aronorf Xideliesi", "Twinks R Us", "Emobilized", "Gestern Yesteryear"];
const professions = ["Scourge", "Firebrand", "Herald", "Vindicator", "Berserker", "Willbender", "Vindicator", "Renegade", "Vindicator", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.3488, 0.6752, 5.819, 0.1802, 0.0, 0.0, 1.2202, 4.7408, 0.981, 0.2042, 0.0], [2.1874, 9.5782, 0.0, 1.0463, 3.3237], [5.8822, 6.3864, 0.0, 1.6216, 0.0, 4.3537, 0.0, 0.2297, 0.0], [0.0, 0.0, 9.509, 0.0, 0.0, 0.0, 0.9263, 3.2432, 0.0, 1.3545, 0.0, 3.241, 0.2499], [6.9111, 3.967, 4.9606, 0.0, 0.0, 0.248, 1.3822, 0.7418, 1.289, 3.8582, 0.0, 0.0, 0.0, 4.8375, 0.0, 0.2552, 0.4998], [6.7276, 1.2043, 10.6189, 1.1339, 1.134, 2.3405, 5.7324, 1.78], [1.1009, 6.8006, 0.6201, 0.0, 1.2118, 0.0, 0.0, 0.0, 5.4395, 6.026, 0.0, 11.4165], [18.715, 12.0428, 0.013, 2.1235, 3.9285], [0.9174, 2.2669, 5.1932, 0.0, 0.2333, 0.0, 2.134, 3.6418, 0.2251, 12.2073, 3.1632, 1.766, 0.5752, 0.0, 6.966, 0.0, 0.689, 0.5748], [7.8896, 3.1878, 7.3634, 2.2811, 0.7776, 2.4955, 1.7217, 4.3162, 2.6189, 10.3098, 3.3233, 0.0, 0.3881, 0.0, 6.579, 0.0, 2.1437, 0.8497], [8.807, 1.5585, 10.4639, 1.2273, 2.4883, 1.364, 2.3037, 7.0138, 3.0076, 11.0687, 4.2643, 0.0, 1.5731, 0.0, 11.0295, 0.0, 2.552, 0.3499], [4.8205, 3.6132, 13.5554, 4.4398, 20.6828, 11.992, 0.0247, 2.6958, 1.3392, 13.545], [4.0366, 6.7298, 20.3076, 2.081, 1.8533, 0.9765, 7.4447, 6.0696, 3.5396, 17.3938, 7.5075, 0.0, 5.2529, 0.0, 9.1913, 1.0241, 0.8422, 3.7735], [20.6952, 3.8953, 4.0694, 3.1155, 5.5533, 5.5301, 2.9872, 19.1015, 8.028, 0.0, 3.9848, 1.2425, 10.5458, 3.137, 3.4707, 2.9238], [16.2686, 16.6474, 31.159, 2.3212, 3.6936, 0.2325, 6.6688, 17.6693, 20.746, 8.2082, 0.4817, 2.7374], [7.2965, 25.6558, 3.5218, 0.7646, 2.6815, 4.7045, 4.7882, 2.3938, 30.9293, 10.6106, 0.0, 2.7235, 1.9493, 28.5413, 3.8377, 2.1182, 0.9496], [8.9905, 16.7182, 24.3381, 1.3073, 3.726, 5.2235, 7.372, 8.8346, 6.9155, 24.4778, 7.8879, 0.0, 3.9986, 4.0846, 9.3848, 3.967, 2.8327, 4.1234]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

