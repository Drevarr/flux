created: 20230213220222000
creator: Drevarr
modified: 20230705163519263
modifier: drevarr
tags: ChartData
title: 202302132202_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Joh Oshi", "Daring Deathblade", "Primal Clone", "Oo Dads Mad", "Dark Sidiuz", "Nelliel T", "Black Raspberry Pie", "Arcanophage Farra", "Smol Gluvs", "Arka\u00f1", "Rina Of Theros", "Newtype Khan", "Elonith Tenebris", "Grasszanine", "Raziel Umbra", "Be\u00eb"];
const professions = ["Druid", "Druid", "Scourge", "Chronomancer", "Spellbreaker", "Scourge", "Scourge", "Chronomancer", "Spellbreaker", "Scourge", "Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Chronomancer", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0187, 0.0309, 0.0732, 0.0, 0.0811, 0.1565, 0.0364, 0.075, 0.0684, 0.05, 0.0216], [0.0219, 0.0762, 0.0732, 0.05, 0.0811, 0.1043, 0.04, 0.05, 0.0545, 0.0167, 0.0162], [0.0218, 0.475, 0.55, 0.1285, 0.4167, 0.0649], [0.1673, 0.175, 0.625, 0.0615, 0.3667, 0.1676], [0.0187, 0.118, 0.5366, 0.6757, 0.6174, 0.1091, 0.0, 0.6, 0.0084], [0.0969, 0.1289, 0.4756, 0.9189, 0.4609, 0.0145, 0.0, 0.4125, 0.0684, 0.05, 0.0432], [0.1, 0.1797, 0.7561, 1.0541, 0.1652, 0.0364, 0.175, 0.6625, 0.0321, 0.4333, 0.1514], [0.029, 0.561, 0.1, 1.0811, 0.6348, 0.1709, 0.0, 0.4, 0.2039, 0.4667, 0.0919], [0.0469, 0.2886, 0.3902, 0.5405, 1.1652, 0.0509, 0.0, 0.4875, 0.0908, 0.5, 0.0919], [0.1875, 0.1815, 0.561, 0.05, 1.3784, 0.8783, 0.1091, 0.025, 0.7375, 0.1327, 0.1833, 0.1568], [0.1031, 0.2214, 0.4146, 0.0, 1.3514, 0.9478, 0.1636, 0.125, 0.75, 0.1411, 0.0333, 0.1351], [0.1656, 0.2196, 0.5, 0.2, 0.8649, 0.5565, 0.1164, 0.125, 0.65, 0.1578, 0.4167, 0.2378], [0.1625, 0.2305, 0.1951, 0.05, 1.1892, 0.7739, 0.1018, 0.15, 0.9125, 0.1774, 0.3667, 0.0919], [0.0, 0.6829, 0.0, 1.3514, 0.7565, 0.3127, 0.125, 0.7625, 0.2654, 0.5167, 0.2757], [0.1719, 0.2323, 0.6463, 0.6486, 0.8087, 0.1273, 0.075, 0.7125, 0.169, 0.3167, 0.173], [0.2031, 0.3031, 1.0244, 0.0, 1.0541, 0.7391, 0.1382, 0.025, 0.45, 0.1271, 0.1167, 0.173], [0.2625, 0.2995, 0.7439, 0.0, 1.9459, 1.3478, 0.2582, 0.05, 0.7875, 0.2863, 0.7667, 0.2757]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

