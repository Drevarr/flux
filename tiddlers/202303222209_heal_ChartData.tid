created: 20230322220917000
creator: Drevarr
modified: 20230705163522828
modifier: drevarr
tags: ChartData
title: 202303222209_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Solus Sanctus", "Sizzln Sisigbringer", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow", "\u00c1rkantor"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Druid", "Tempest", "Scrapper", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[168.1957, 291.9831, 130.32, 385.5909, 210.1875, 69.6833, 219.6939, 300.8615, 248.7614, 313.4167, 225.5, 240.5197, 984.0686, 433.92, 50.6582, 1197.9206, 576.2319, 299.1818, 174.7879, 170.2105, 107.6596, 371.7544, 32.0952, 876.8065], [217.0814, 520.1864, 219.36, 0.0, 240.7909, 308.9479, 112.55, 210.551, 313.1846, 0.0, 214.6364, 369.75, 196.5677, 200.4671, 757.6961, 633.48, 53.5949, 885.2857, 589.913, 449.7483, 159.6212, 490.8947, 420.5319, 555.9649, 125.1429, 495.5806], [447.9341, 823.8814, 742.78, 0.0, 1396.7182, 1169.3021, 1067.4, 806.6327, 1268.0, 106.3846, 654.5682, 1130.75, 739.2131, 95.625, 1664.2255, 1137.28, 94.2532, 1395.8413, 484.0145, 726.2308], [399.8391, 1292.8136, 857.38, 0.0, 1398.5818, 1035.0, 1020.3833, 1024.0714, 808.1231, 0.0, 603.1932, 1179.4667, 641.4938, 509.1579, 535.4412, 1216.9467, 127.4177, 2336.3651, 1507.4783, 832.9231, 290.303, 1053.8684, 1003.3404, 893.386, 237.7143, 950.0], [390.0911, 1797.8644, 935.32, 49.72, 1548.2727, 1535.0104, 998.8, 1152.6429, 1195.1692, 39.8205, 847.6818, 1681.45, 831.8411, 585.0395, 2334.9412, 1193.96, 71.8987, 3082.0952, 3093.1449, 1169.3427, 899.8106, 305.4474, 1039.234, 2568.386, 1130.6667, 2590.2581], [680.6318, 1209.5424, 757.58, 21.56, 2174.9364, 992.375, 1035.75, 1160.4286, 1799.0615, 31.7436, 1047.9091, 1456.55, 957.5345, 686.1447, 3690.4314, 2133.6667, 97.0253, 2405.7619, 3465.5362, 982.2098, 1068.6061, 869.1316, 651.1489, 732.0175, 359.0, 2381.4839], [1391.9012, 3871.9661, 2003.32, 14.46, 3776.1182, 2904.4479, 2646.1667, 2842.9898, 4297.6, 2384.375, 2654.9167, 1899.8645, 1545.8618, 6461.4216, 3776.1867, 482.4051, 8645.1746, 5415.1449, 3739.014, 2443.2348, 2666.8947, 3921.2128, 3266.5789, 796.9524, 5364.8387]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

