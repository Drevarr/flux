created: 20230625214256000
creator: Drevarr
modified: 20230705163535979
modifier: drevarr
tags: ChartData
title: 202306252142_dmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Vesnan", "Arriasa", "Melpomene Vandrish", "Wall Knot", "Liyo Morgaine", "Ani Deasun", "Blaze All Might", "Vesnan", "Koralia Danai", "Shrimp Tempsura", "Liyo Morgaine", "Drumina", "Gestern Yesteryear", "Govinda Ektar", "Aronorf Xideliesi", "Hayuf", "Wall Knot", "Charr Surethang", "Tacitus Kilgore I", "No Reserv\u00e9", "Vesnan", "Drac Tepes", "Gamora Titus", "Ateriuz", "Booboo Hurts", "Latedoctor", "Scythe User", "Drev Of The Dead", "Elonith Requiem", "Hayuf", "Yngvar The Burdened", "Surethang", "Drevarr Moonwillow", "Fluffy No Care Bear", "Yedrax", "Elonith Requiem", "Xanvias Tsolice", "Jerryatric Reflexes"];
const professions = ["Harbinger", "Druid", "Chronomancer", "Firebrand", "Vindicator", "Vindicator", "Firebrand", "Reaper", "Firebrand", "Tempest", "Herald", "Druid", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Dragonhunter", "Spellbreaker", "Spellbreaker", "Vindicator", "Scourge", "Scourge", "Dragonhunter", "Berserker", "Firebrand", "Reaper", "Reaper", "Reaper", "Scourge", "Dragonhunter", "Scourge", "Guardian", "Scrapper", "Berserker", "Scrapper", "Reaper", "Weaver", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0], [0.0, 37.4318, 0.5362, 0.0, 7.5091, 1.5595], [4.211, 0.0, 110.1132, 0.0, 0.1449, 0.0, 0.0, 17.703, 0.0, 0.0, 18.7921], [4.8425, 26.2, 53.0476, 2.7448, 14.4158], [179.5149], [26.8532, 6.1649, 5.4091, 3.9928, 12.6271, 0.0, 0.0, 64.7381, 18.0104, 3.2475, 26.4395, 54.5, 47.1648, 0.0, 56.6188], [155.5413, 0.0, 0.0, 115.0943, 77.4545, 0.0, 43.5763, 1.6301, 22.1939, 304.0238, 0.0], [69.4906, 363.6337, 185.828], [65.8532, 173.3505, 1.4151, 5.4091, 419.2609, 175.6441, 0.0, 36.4909, 112.1071, 10.1094, 61.1584], [95.1401, 253.3022, 59.5495, 62.4324, 86.989, 163.2162, 33.5763, 117.0], [127.4452, 523.8727, 310.3452, 32.8125], [207.0183, 25.2577, 249.4717, 30.9545, 51.471, 158.678, 3.6027, 116.0848, 51.131, 36.026, 81.505, 68.6561, 139.9928, 36.7802, 406.8378, 90.779, 123.5135, 107.6949, 27.5152], [94.9358, 25.268, 110.8113, 0.0, 26.8623, 494.3898, 4.3014, 54.697, 128.5, 34.2656, 118.7129, 54.2548, 74.0504, 34.6044, 664.9189, 259.3757, 74.1622, 483.4407, 27.2424], [166.9505, 342.3503, 309.9065, 79.3626, 0.0, 411.7845, 346.2373, 0.0], [7.0959, 296.497, 150.2738, 63.1615, 58.7921, 222.5478, 229.2374, 115.6923, 270.7568, 283.1547, 134.473, 47.7288, 30.0758], [83.4257, 241.8535, 223.2986, 17.3736, 161.2703, 1152.7238, 143.1216], [309.9633, 189.3299, 307.1887, 49.1136, 103.6377, 106.2203, 289.9236, 446.3381, 207.8791, 814.1622, 96.3204, 338.5541, 236.6102, 110.5909], [0.0, 179.1443, 43.9434, 195.9318, 378.6014, 611.4407, 11.863, 772.6242, 283.4286, 24.7083, 36.3663, 1103.9108], [477.0642, 137.3505, 0.0, 60.9623, 234.9545, 76.6159, 591.7966, 7.1575, 227.3091, 358.9881, 38.5469, 307.0792, 414.4904, 429.0288, 436.1209, 483.6486, 185.5525], [1350.3945, 235.2887, 0.0, 29.4906, 305.9545, 341.6884, 1197.6949, 0.0, 1054.0303, 483.7857], [400.2836, 106.2273, 263.6304, 607.3051, 0.0, 506.7818, 723.6786, 471.277, 527.1978, 279.7017, 634.1081, 0.0, 371.7121], [251.4268, 1002.1547, 652.022, 599.4865, 474.8343, 980.6892, 2.0847, 237.8788], [467.1468, 146.6907, 487.6269, 1030.2264, 140.1818, 420.9348, 1858.5763, 49.1644, 591.497, 1129.3095, 363.8906, 749.505], [42.0548, 1933.6303, 711.8214, 398.0, 2311.6238], [0.0, 340.1321, 12.4318, 260.4058, 755.7288, 9.1027, 525.0727, 581.5952, 120.0208, 513.4257, 626.1529, 357.7806, 110.9011, 214.7297, 282.4088, 291.6081, 622.0508, 945.2727], [700.7134, 1376.1439, 678.4396, 1441.2162, 583.442, 1116.4324, 977.9661, 224.697], [1427.7156, 823.9691, 555.0299, 438.9623, 1236.7955, 423.1087, 1562.0847, 274.5411, 1486.097, 550.6905, 428.474], [1277.4459, 1240.2914, 1063.033, 1060.3784, 1409.5249], [1841.3853, 1160.3918, 1612.1132, 637.1364, 903.0435, 3236.0847, 28.1918, 1208.1818, 840.119], [0.0, 205.7423, 522.2985, 1427.0, 420.4545, 529.6304, 3307.8475, 0.0, 2159.8303, 1319.5238, 749.8021], [60.7466, 642.6545, 1103.1667, 122.1458, 737.4257, 671.8854, 468.2302, 786.022, 1602.3784, 1091.8011, 1328.2568, 1125.5593, 252.8788], [2256.8561, 603.1429, 1248.0811, 1269.6409, 1289.2297], [1536.9174, 362.4948, 1406.0299, 412.2075, 360.7045, 548.5507, 890.0678, 182.6849, 1188.3091, 1486.0476, 761.8281, 1162.9604], [1983.4925, 168.9434, 118.1136, 696.9928, 209.2542, 0.0, 1927.5879, 811.131, 1239.3594, 2289.5347], [363.4424, 1444.0833, 214.25, 257.3366, 1431.2166, 1007.1295, 1337.7912, 2618.027, 802.1713, 2139.3919, 1832.339, 1162.0909], [746.7708, 784.1485, 2299.5541, 2005.6799, 1571.4945, 2748.2703, 2203.7403], [11.1233, 5015.9152, 4541.2857, 2112.3698, 4829.7525], [221.3091, 2257.9405, 513.7344, 3574.2475, 2136.9172, 1235.5755, 2113.4286, 8298.3243, 4435.6354, 1654.3378, 2923.5424, 1738.2727]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

