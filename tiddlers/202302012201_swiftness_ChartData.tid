created: 20230201220146000
creator: Drevarr
modified: 20230705163518563
modifier: drevarr
tags: ChartData
title: 202302012201_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Etchery Howls", "Lord Of Bones", "Drevarr In A Teacup", "\u00c9\u00efbhear", "Fungus", "Smol Daddy Tika", "Raelyn Sunray", "Gravlyn Isshtail", "Tegan Parker", "Konztantin\u00eb", "Black Raspberry Pie", "Whose Guardian", "Arkitrix", "Sygaldry Verdandi", "\u00c2 R K", "Zaylen Harker", "Johosh The Great", "Koralia Danai", "Ravioli Fetabringer", "Bella Lunabringer"];
const professions = ["Druid", "Scourge", "Tempest", "Scrapper", "Scourge", "Spellbreaker", "Firebrand", "Spellbreaker", "Tempest", "Herald", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[92.2533, 92.1677, 76.1852, 2.6576, 6.4808, 0.0, 0.0, 17.2754, 66.0604, 35.0714, 17.6812, 48.9951, 63.4726, 0.0, 28.1397, 60.8635, 0.0, 0.0, 0.0, 53.0228, 43.3621], [12.8174, 330.8029, 4.4544, 86.592, 51.1638, 124.0157, 0.0, 0.0, 17.9502, 6.33, 9.4786, 12.6126, 0.0, 12.529, 21.0328, 0.3064, 21.8606, 69.61], [20.8132, 155.626, 63.8928, 34.3834, 48.2591, 51.61, 0.051, 73.9517, 53.3894, 0.0, 27.1876, 10.0509, 12.7596, 7.497, 5.9506, 2.0534, 0.0, 40.8991, 23.2269, 57.4577, 30.8015, 11.6087, 86.5079], [17.9605, 338.0368, 59.7168, 97.2787, 15.4918, 24.9788, 2.6025, 89.8291, 0.0, 8.918, 0.0, 26.2608, 42.5928, 19.2717, 0.0, 0.0, 9.7961, 3.9316, 1.8753, 0.0, 2.6762, 17.9088, 59.8123], [0.0, 279.1883, 59.7168, 26.6957, 60.8972, 11.9799, 14.9801, 66.0845, 0.0, 0.0, 23.8657, 6.3727, 24.6686, 28.4886, 7.8478, 2.2618, 28.9766, 67.1439, 55.6964, 12.3068, 107.7921], [64.827, 84.8386, 103.6838, 50.0231, 122.1355, 54.8927, 77.0868, 36.9718, 133.6124, 175.3245], [114.8699, 72.5807, 89.1957, 194.2164, 27.7693, 0.0, 2.5794, 91.6527, 0.0, 0.0, 0.0, 103.7751, 218.6145], [0.0, 494.2493, 216.3168, 125.9174, 68.745, 111.1927, 3.5551], [220.3398, 117.3456, 91.872, 33.7865, 0.0, 9.7864, 92.9045, 0.0, 0.0, 67.6259, 80.5707, 10.9525, 6.696, 45.6602, 57.5957, 75.2263, 0.0, 60.0667, 36.809, 190.9089], [157.144, 302.2032, 46.8442, 38.3219, 0.0, 87.8266, 292.0795, 114.0485, 30.3347, 106.8822, 3.0988, 52.6554], [441.096, 180.4557, 53.5224, 123.6365, 97.3846, 0.0, 99.8419, 65.7994, 24.257, 110.9068, 8.4685, 8.5064, 9.6579, 0.0, 1.4582, 12.9242, 63.4165, 3.3755, 0.0, 0.0, 36.4252, 24.8917], [292.7606, 344.3877, 252.5166, 167.1116, 250.1626, 62.9336, 288.1316, 57.9468, 83.4624], [142.2221, 191.9663, 194.892, 209.317, 208.1206, 32.6763, 232.0424, 167.9328, 66.8576, 45.6518, 0.0, 226.2469, 57.5181, 10.0464, 29.1661], [122.3079, 327.4792, 108.8544, 51.1104, 139.4775, 69.869, 145.0426, 31.6051, 177.7485, 121.7178, 247.2961, 189.5712, 64.4301, 113.8152, 90.024, 32.1322, 153.3332, 13.8236, 0.0, 6.6906, 116.9189, 321.1396], [231.8386, 709.7013, 503.208, 218.8877, 112.8254, 113.6163, 56.9041, 364.609, 143.5622, 127.5274, 70.6645, 108.7213, 206.341, 77.0868, 0.0, 21.4272, 28.469, 210.4183, 33.4071], [59.828, 1111.6699, 347.2344, 148.1357, 192.9346, 87.6185, 22.8558, 224.7874, 268.1971, 191.5841, 49.1009, 215.1759, 125.1656, 116.4681, 43.4218, 133.3248, 61.8909, 175.2379, 126.6095, 102.7631, 0.0], [23.8669, 1040.1132, 326.0064, 222.0557, 228.1989, 73.4216, 9.8828, 314.1158, 161.5968, 115.6028, 186.904, 203.072, 322.2103, 167.5359, 146.5218, 276.6787, 58.7628, 132.0922, 57.7325, 125.6959, 116.3173, 226.5783, 354.0401], [379.2188, 1323.7982, 347.3736, 334.921, 241.9071, 282.0034, 270.1613, 303.0336, 156.3652, 328.6875, 303.3139, 217.6335, 112.4354, 43.4794, 58.0356, 238.5523, 118.9476, 28.4584, 90.6948, 100.737, 389.2493], [314.4487, 1101.6988, 488.5224, 306.7469, 221.2174, 33.6539, 16.9703, 244.8845, 358.861, 334.5779, 210.2742, 473.0362, 471.5584, 198.45, 157.043, 210.9686, 67.2143, 461.1739, 121.0104, 129.2508, 113.7154, 151.2974, 368.5422], [16.072, 1843.8548, 648.672, 183.1526, 289.0961, 142.671, 42.8255, 495.7766, 415.8216, 209.2927, 183.9317, 148.3264, 267.2225, 289.7811, 156.5472, 173.2627, 80.6462, 346.2379, 160.7936, 39.3548, 120.3565, 83.7876, 536.7238]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

