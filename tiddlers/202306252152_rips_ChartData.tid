created: 20230625215204000
creator: Drevarr
modified: 20230705163536719
modifier: drevarr
tags: ChartData
title: 202306252152_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Tribal S", "Irish Necroman", "Rozaalyna", "Mister Jekyll", "Necrotic Windrunner", "Smol Gluvs", "Oo Dads Mad", "Demon Maddx", "Blancooo Padreee", "Rina Of Theros", "Newtype Khan", "Arcanophage Farra", "Grasszanine", "Black Raspberry Pie", "Primal Clone", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Druid", "Reaper", "Reaper", "Reaper", "Scourge", "Reaper", "Spellbreaker", "Reaper", "Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Chronomancer", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0116, 0.0083, 0.0857, 0.0942, 0.0769, 0.3478, 0.125, 0.0833, 0.0159, 0.03, 0.0323, 0.0316, 0.0633, 0.0556, 0.0, 0.0634, 0.0195, 0.0694], [0.0233, 0.0417, 0.0571, 0.1014, 0.0879, 0.125, 0.0417, 0.0476, 0.145, 0.0806, 0.0211, 0.0253, 0.0, 0.0093, 0.0493, 0.0065, 0.0139], [0.093, 0.0833, 0.1, 0.1014, 0.0769, 0.0435, 0.05, 0.0, 0.0952, 0.04, 0.0, 0.0737, 0.038, 0.0278, 0.0, 0.0986, 0.0195, 0.0278], [0.0571, 0.0507, 0.2418, 0.0, 0.0417, 0.0159, 0.165, 0.1774, 0.2211, 0.1519], [0.0, 0.05, 0.3, 0.2681, 0.2198, 0.0, 0.175, 0.3065, 0.0526, 0.038, 0.0, 0.0, 0.162, 0.013, 0.0139], [0.0, 0.2917, 0.2174, 0.275, 0.125, 0.1429, 0.35, 0.4516, 0.1053, 0.1392, 0.0278, 0.0, 0.1197, 0.0195, 0.0139], [0.0, 0.1917, 0.2857, 0.2826, 0.2088, 0.1304, 0.475, 0.0, 0.254, 0.125, 0.2258, 0.2842, 0.1519, 0.0556, 0.0, 0.0915, 0.039, 0.1111], [0.0, 0.1333, 0.2714, 0.2971, 0.2637, 0.3913, 0.55, 0.0, 0.3016, 0.425, 0.5806], [0.0, 0.3833, 0.2286, 0.4565, 0.1429, 0.087, 0.5, 0.0, 0.381, 0.075, 0.3548, 0.0211, 0.2911, 0.0, 0.0, 0.1268, 0.0065, 0.0972], [0.0, 0.1667, 0.4429, 0.3696, 0.044, 0.3478, 0.5397, 0.605, 0.0, 0.1368, 0.1013, 0.0, 0.0, 0.1901, 0.013, 0.0139], [0.1395, 0.275, 0.2857, 0.4203, 0.4066, 0.2174, 0.45, 0.1667, 0.3333, 0.175, 0.1935, 0.0737, 0.2278, 0.1944, 0.0093, 0.1549, 0.0195, 0.1528], [0.0, 0.4917, 0.4143, 0.5652, 0.4066, 0.1739, 0.45, 0.0, 0.4286, 0.04, 0.8387, 0.2, 0.1519, 0.0, 0.0, 0.1549, 0.0325, 0.0972], [0.0233, 0.35, 0.3571, 0.4855, 0.4286, 0.0435, 0.2, 0.0, 0.381, 0.535, 0.7903, 0.1263, 0.1392, 0.0, 0.0, 0.0845, 0.0649], [0.0, 0.3, 0.4857, 0.5217, 0.7143, 0.0, 0.6, 0.0, 0.4762, 0.62, 0.6774, 0.1263, 0.3797, 0.0, 0.0, 0.2676, 0.0, 0.0139], [0.0465, 0.4, 0.4857, 0.7464, 0.7912, 0.0, 0.475, 0.0417, 0.873, 0.705, 0.2581, 0.2421, 0.1266, 0.0278, 0.0, 0.1479, 0.1104, 0.0417], [0.0233, 0.3417, 0.4571, 0.4638, 0.5604, 0.1739, 0.75, 0.4167, 0.7302, 0.935, 1.1613, 0.2211, 0.2152, 0.0, 0.0, 0.2324, 0.0649, 0.0556], [0.0698, 0.5083, 0.8143, 1.0797, 0.9011, 1.1304, 1.175, 0.375, 0.8571, 0.235, 0.7903, 0.4842, 0.3671, 0.2222, 0.028, 0.4085, 0.2078, 0.0556]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

