created: 20230215221053000
creator: Drevarr
modified: 20230705163519373
modifier: drevarr
tags: ChartData
title: 202302152210_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Cat Wigglebooty", "Black Raspberry Pie", "Bambiae", "Primal Clone", "Ark Darkness", "Zadie Miststep", "Ryvalia Fazebringer", "Mac Chiato", "Kosair", "Fribble Bibble", "Etchery Howls", "Zaylen Harker", "Sister Elon\u00edth", "\u00c9\u00efbhear", "Blanco Padre Guard", "Ravioli Fetabringer", "Drevarr Moonwillow", "Bella Sassy", "Sygaldry Verdandi", "Johosh The Great"];
const professions = ["Firebrand", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Tempest", "Chronomancer", "Tempest", "Firebrand", "Scrapper", "Druid", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[271.5614, 935.72, 0.0, 0.0], [408.397, 716.988, 51.6485, 108.0432, 100.9008, 52.479], [301.576, 20.8469, 141.696, 167.8446, 124.4061, 20.868, 117.3534, 15.5902, 98.9092, 52.2941, 0.0, 68.4326, 62.5502, 95.065, 20.5425, 15.3576, 51.178, 20.339, 85.3461, 15.554, 60.4151, 19.4604, 38.5749], [305.6196, 536.4, 20.1326, 138.9802, 63.8176, 98.2695, 10.0843, 56.791, 20.0921, 67.6338, 27.9917, 14.9432, 45.2582, 89.7302, 0.0, 56.9232, 15.8175, 19.7802, 18.5378, 4.95, 32.6183, 10.0113, 45.3235, 6.044, 21.2612], [363.4884, 553.088, 19.5077, 106.8624, 100.3618, 79.233, 19.537, 30.2812, 19.4463, 62.9694, 30.744, 0.0, 34.489, 71.2478, 0.0, 48.7546, 19.2825, 4.7952, 23.6313, 20.086, 65.7751, 19.3861, 32.4786, 0.0, 18.5749], [331.8414, 564.412, 0.0, 5.1955, 0.0, 20.7858, 59.3779, 22.2395, 0.0, 70.2052, 42.3096, 0.0, 113.759, 127.9997, 17.085, 158.3558, 0.0, 25.9524, 61.3305, 19.008, 66.5532, 39.5604, 0.0, 21.6544], [287.2342, 581.696, 36.9173, 129.6518, 115.0226, 99.2985, 6.4522, 67.883, 18.3946, 52.624, 34.3454, 18.2792, 34.2163, 74.0021, 1.0965, 59.1744, 18.2475, 0.0, 25.2599, 3.696, 48.5982, 44.2486, 30.525, 4.5193, 8.2719], [385.792, 527.46, 22.3646, 142.8768, 77.2926, 81.3939, 15.3408, 82.2472, 0.0, 66.7368, 52.2648, 5.5272, 62.2301, 102.3418, 52.9997, 16.56, 21.9348, 36.7636, 26.741, 77.7451, 0.0, 61.8314, 21.878, 30.1228], [371.9276, 756.324, 69.3706, 134.0208, 65.8658, 119.8785, 14.3707, 154.3452, 37.2554, 14.0544, 0.0, 81.6557, 115.4606, 33.2534, 38.475, 6.804, 9.2862, 7.755, 99.8897], [223.652, 155.8574, 13.364, 218.3165, 306.5179, 5.049, 315.8112, 80.28, 55.242, 142.2729, 44.374, 362.4516, 21.2823, 278.4857, 0.0, 132.5633], [274.16, 120.7066, 232.4995, 179.1636, 241.9179, 42.3902, 123.5094, 51.5493, 67.5142, 64.943, 17.2922, 120.3706, 176.3438, 135.9725, 71.3025, 34.7814, 120.2355, 24.332, 123.8895, 45.8398, 117.8509], [838.1934, 870.16, 19.5077, 58.8038, 125.9104, 139.8411, 47.6693, 37.9901, 0.0, 90.4176, 46.5845, 0.0, 77.089, 152.353, 1.564, 142.5331, 0.0, 0.0, 86.4517, 34.166, 100.4283, 5.5678, 0.0, 5.2907], [1204.9972, 1721.844, 0.0, 175.9392], [105.8861, 548.1274, 305.613, 556.689, 82.4342, 148.4664, 33.2838, 260.429, 164.7878, 83.7568, 238.151, 340.656, 365.4019, 100.53, 84.0456, 199.6533, 69.289, 334.5615, 63.2369, 195.7507, 68.3347, 64.9795], [929.2162, 1636.616, 76.6915, 311.2589, 231.1232, 349.7571, 21.1613, 110.92, 13.3578, 105.0686, 100.0205, 36.9335, 97.1962, 175.4741, 149.0938, 44.5725, 34.992, 166.8744, 20.812, 134.3034, 32.1422, 113.553, 14.2006, 41.2612], [1057.0098, 1757.008, 126.4651, 358.727, 176.3608, 247.0629, 80.0203, 193.5554, 22.7489, 13.9334, 113.2258, 16.7198, 48.4618, 145.4674, 5.8565, 98.6026, 19.395, 20.9628, 86.7636, 14.311, 170.8119, 15.7131, 150.9156, 18.149], [1040.4328, 2091.364, 146.5085, 329.7974, 118.2566, 300.468, 68.7854, 218.2351, 76.7889, 199.732, 87.2837, 72.0313, 173.4672, 197.508, 39.7885, 258.7594, 56.16, 23.5872, 173.5965, 0.0, 246.9411, 54.8434, 158.0951, 66.6666], [963.2744, 2171.824, 141.5534, 358.9632, 283.7296, 446.4831, 60.5736, 114.0812, 25.3318, 177.905, 150.7042, 62.9114, 230.8579, 240.3437, 26.7665, 194.6966, 56.2725, 60.1506, 104.2618, 25.003, 129.8745, 17.0258, 144.4687, 31.6789], [1203.7916, 2561.608, 183.6043, 489.0874, 392.4998, 274.0227, 74.0419, 209.306, 85.7925, 175.3934, 66.3778, 225.4733, 244.5475, 181.7683, 20.3625, 52.164, 83.3332, 16.654, 254.3026, 218.4613, 76.328, 62.6207], [1604.6536, 2605.116, 107.1806, 361.561, 374.2816, 369.411, 119.6131, 178.1375, 58.0252, 215.4594, 106.3742, 14.7458, 194.8013, 292.6018, 0.0, 334.0781, 34.38, 49.4586, 217.9832, 55.759, 300.2675, 22.9265, 216.2635, 58.9189], [2150.1876, 3444.88, 68.701, 707.4173, 540.1858, 538.167, 83.0208, 332.1499, 0.0, 245.7182, 155.2426, 34.1502, 324.3734, 407.845, 403.3507, 149.0175, 74.601, 225.3982, 56.661, 346.5914, 40.4032, 280.5858, 17.9032, 91.7771]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

