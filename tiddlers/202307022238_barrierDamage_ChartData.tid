created: 20230702223827000
creator: Drevarr
modified: 20230705163540916
modifier: drevarr
tags: ChartData
title: 202307022238_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["St\u00e1rless", "Brutal Araden", "Valaria Emberstorm", "Vopiscus Zergherdus", "Kardknight", "Elonith Requiem", "Liyo Morgaine", "Zayde Sunsabre", "Snowe Shadowcharm", "Nina Nefarious", "Lucky Leipreach\u00e1n", "Synomi\u00f1 Spyce", "Tantai Jin", "Smol Gluvs", "Morv\u00e4rth"];
const professions = ["Spellbreaker", "Renegade", "Tempest", "Scrapper", "Renegade", "Scourge", "Vindicator", "Spellbreaker", "Reaper", "Reaper", "Scrapper", "Scourge", "Reaper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 3376, 234, 4288, 5121, 3376, 730, 283, 3489, 13422, 0, 0, 915, 5120, 9726, 3166, 658, 303, 8208, 514, 0, 3376, 1187, 3410, 0, 0, 0, 0, 3003, 0, 723, 0, 363, 350, 7013, 0, 0, 1886, 0, 4927, 2161], [7323, 8700, 8158, 8712, 14409, 0, 4304, 39976], [0, 0, 2936, 6107, 4771, 5560, 0, 366, 0, 4818, 6559, 0, 0, 3064, 8518, 1800, 2461, 1788, 0, 2173, 2678, 7006, 514, 4144, 0, 4602, 4161, 0, 3362, 0, 0, 2213, 1638, 1246, 0, 0, 1536, 6086, 1945, 0, 1574, 469, 3815, 984], [7875, 2281, 32848, 4129, 0, 5523, 3437, 29113, 21858], [16153, 0, 14164, 1621, 0, 1986, 269, 5404, 0, 1707, 6198, 27772, 4145, 519, 1364, 1602, 30141, 2975], [10246, 0, 15360, 0, 0, 0, 1729, 3793, 10331, 411, 1001, 13718, 19761, 3250, 0, 3836, 749, 26735, 17426], [5284, 6043, 0, 8882, 0, 6562, 57218, 554, 1314, 666, 10485, 13687, 25878], [4052, 4278, 5798, 0, 14247, 1412, 3423, 316, 1648, 2239, 9518, 0, 3118, 2894, 7176, 4655, 0, 0, 0, 5735, 3681, 6036, 3064, 0, 9302, 7456, 2789, 425, 5773, 0, 3775, 3424, 0, 3489, 0, 70, 143, 641, 6573, 4361, 0, 546, 7746, 8100, 2487, 4769, 1211, 8409, 5173], [1430, 1050, 37214, 60244, 95, 36145, 5558, 41200, 687, 8619, 0, 66166], [18123, 19692, 113277, 0, 67349, 2008, 49707, 0, 29239, 10191, 21143, 37075, 367], [31814, 13293, 21522, 348, 15680, 1396, 7488, 4620, 3563, 0, 14044, 4, 12443, 1454, 15256, 46365, 0, 7539, 2, 0, 34118, 3373, 31143, 418, 6456, 0, 42951, 1075, 3156, 0, 2013, 6004, 3648, 0, 3413, 20568, 0, 1786, 4989, 12136, 4746], [3533, 9124, 19777, 15994, 15731, 19382, 0, 7102, 328, 17646, 36412, 0, 9694, 6680, 21540, 9930, 1726, 0, 23700, 3821, 31616, 493, 7724, 0, 25983, 6287, 0, 1247, 0, 2244, 0, 9904, 11241, 3783, 0, 0, 22605, 40542, 1693, 0, 12128, 10214], [97922, 318, 31004, 69, 70861, 49130, 0, 78119, 0, 1491, 0, 18979, 33015, 1287, 0, 19034, 14366, 89419, 4753, 0, 10539, 3380, 46369, 31191], [25438, 14797, 25934, 1308, 26990, 279, 66980, 98836, 0, 8325, 28568, 30107, 9713, 21631, 574, 80498, 2006, 4401, 1391, 54692, 11578, 0, 107366, 0, 5069, 0, 3724, 10029, 15452, 0, 4935, 4460, 50516, 3050, 185, 6656, 634, 35148, 33182], [36569, 107416, 0, 47334, 4363, 3049, 0, 16104, 27253, 18038, 41888, 1006, 28790, 3691, 46895, 99856, 7096, 0, 19773, 17874, 71603, 763, 10, 40539, 86003, 395, 7073, 95741]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

