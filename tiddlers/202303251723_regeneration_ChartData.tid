created: 20230325172304000
creator: Drevarr
modified: 20230705163523024
modifier: drevarr
tags: ChartData
title: 202303251723_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Elonith Primal", "Johosh The Great", "Bella Sassy", "Mac Chiato", "Zefirokai", "Tika Sumiko", "Zadie Miststep", "Tribal S", "\u00c1rkantor", "Arriasa"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Tempest", "Druid", "Vindicator", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[362.0137, 415.4287, 23.9198, 234.625, 360.3852, 1026.72, 219.2982, 133.9204], [94.6726, 35.64, 7.4844, 19.3061, 30.0762, 29.9228, 911.8513, 160.8152, 29.603, 272.7432, 57.8114, 28.6541, 0.0, 66.4358, 50.6352, 286.1407, 231.7307, 365.3987, 342.7455], [100.502, 131.571, 33.4757, 178.2418, 196.245, 44.6121, 1350.6757, 127.9152, 122.5107, 173.2838, 82.0944, 12.4051, 0.0, 98.4624, 55.6416, 271.2229, 202.8919, 253.3779, 434.8003], [99.7641, 129.7147, 43.4851, 42.5088, 19.1394, 0.0, 1049.3066, 153.4982, 285.66, 88.1838, 195.1373, 30.5728, 322.4381, 182.9184, 670.4362, 327.8598, 536.286, 561.0891], [171.9307, 187.407, 138.0758, 370.535, 460.5804, 958.315, 261.5155, 206.5495, 440.2642, 261.1353, 2.496, 21.5968, 180.1056, 143.1696, 303.8691, 385.5372, 539.3842, 342.3412], [266.3081, 263.8102, 0.0, 0.0, 0.0, 39.2804, 2523.2403, 120.2824, 55.6583, 460.2355, 77.5274, 0.0, 0.0, 121.9392, 26.2752, 369.5939, 447.3831, 423.5875, 792.6412], [258.6339, 494.8762, 0.0, 25.151, 103.8996, 65.3585, 2623.2665, 138.8643, 0.0, 590.7946, 150.7849, 150.1594, 294.7565, 125.8992, 547.4184, 407.145, 626.619, 765.1461], [129.5015, 698.841, 0.0, 99.2462, 436.5018, 0.0, 5798.29, 554.615, 0.0, 1252.3334, 277.4354, 9.4349, 0.0, 0.0, 44.0832, 657.1399, 548.7015, 498.0421, 1605.7689], [458.0145, 677.754, 116.545, 461.9034, 129.5202, 6099.6592, 205.296, 151.6342, 891.2592, 231.5427, 326.5018, 70.6248, 131.3299, 298.704, 887.501, 876.3911, 729.8292, 1209.2462], [1273.1727, 1185.624, 501.7219, 1058.7528, 9761.9069, 411.5922, 228.1225, 1951.5298, 154.238, 391.4726, 268.6816, 793.3056, 466.8384, 1385.7339, 2010.7996, 2190.7461, 2659.3442]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

