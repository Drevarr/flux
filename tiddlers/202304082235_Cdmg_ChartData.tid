created: 20230408223537000
creator: Drevarr
modified: 20230705163524893
modifier: drevarr
tags: ChartData
title: 202304082235_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Sarah Dresser", "Lord Erin The Wise", "Sygaldry Verdandi", "Slautorn", "Hakunana Matatata", "Kosair", "Tac Mancer", "Aronorf Xideliesi", "Rozaalyna", "Shh Im Sleepy", "Leaf You Dead", "Sofya De Nova", "Sp\u00edcy Cheese", "Panther B Me", "Smol Daddy Tika", "Smol Gluvs", "Xanvias Einzbern", "Be\u00eb"];
const professions = ["Scrapper", "Tempest", "Weaver", "Firebrand", "Weaver", "Firebrand", "Firebrand", "Scourge", "Firebrand", "Scourge", "Berserker", "Harbinger", "Weaver", "Berserker", "Scourge", "Berserker", "Scourge", "Berserker", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[10.4605, 13.3238, 0.6576, 1.0714, 14.5652, 7.0377, 4.8367, 0.0, 0.0, 5.028, 66.7736, 47.4615, 2.0, 5.6, 7.5422, 25.0233, 2.5714, 17.1212, 6.4253, 3.2289, 66.5804, 14.8554, 17.5397, 21.2895, 2.8037, 0.0, 0.0, 0.0, 0.0, 0.0, 39.5751, 27.9482], [7.4521, 26.3199, 0.0, 0.0, 98.5607, 208.4151, 33.8077, 2.1282, 0.0, 8.1205, 93.6047, 0.0], [27.6047, 29.9524, 0.0, 0.0, 0.0, 0.0, 4.3404, 0.0, 10.243, 0.0, 65.6154, 83.8462, 0.0, 40.1205, 158.5, 72.9011, 145.303, 9.2414, 10.988], [9.893, 0.0, 0.4138, 125.6087, 11.7123, 20.6801, 1.383, 0.0, 11.0093, 2.8302, 97.9423, 0.3333, 0.0, 10.0361, 2.6279, 58.3846, 200.6364, 0.0, 0.0, 0.0, 28.0361, 1.3492, 0.8816, 10.5234, 29.9524, 0.0, 0.0, 0.0, 0.0, 8.3834, 34.601], [80.7953, 20.3524, 4.2315, 0.0, 122.6087, 4.6678, 36.1029, 0.0, 0.0, 9.2804, 165.5577], [143.1538, 0.0, 12.7927, 253.9326], [14.3956, 15.0, 5.4598, 49.253, 20.4464, 58.4337, 2.8413, 12.1447, 31.4953, 0.0, 455.7273, 0.0, 68.5389, 94.7979], [45.5163, 21.9333, 1.2094, 0.0, 84.7826, 0.2534, 38.2774, 0.0, 1.3182, 20.0187, 0.0, 166.0962, 109.8205, 1.16, 80.8976, 3.1279, 127.7802], [40.8512, 25.381, 6.4433, 22.4286, 102.8696, 7.7911, 24.2819, 2.0851, 56.8598, 6.4906, 39.3846, 0.0, 0.0, 23.3855, 43.9302, 37.3516, 61.2424, 0.0, 47.8072, 53.4554, 44.6145, 30.4286, 2.8289, 75.4206, 143.8095, 182.8387, 0.0, 0.0, 0.6296, 58.6632, 73.8497], [4.7628, 33.5619, 3.2241, 0.0, 156.4783, 4.4692, 11.9866, 0.6822, 29.0755, 0.84, 50.0602, 175.5116, 67.7143, 384.5758, 3.5862, 57.8554, 200.9196, 314.9277, 204.4286], [5.6815, 67.5436, 1.9362, 0.0, 0.0, 197.6538, 2.6154, 0.04, 171.0, 283.2674, 42.1319, 29.1339, 317.5783, 273.4286, 67.4474, 0.0, 0.0, 0.0, 8.5741, 16.6425], [168.387, 141.3848, 0.0, 0.0, 121.4673, 241.1509, 134.5192, 68.4615, 0.8, 94.7651, 204.9884], [55.2233, 6.9429, 18.0, 0.0, 21.8261, 0.0, 19.4318, 0.0, 0.0, 0.0, 0.0, 135.0769, 108.7692, 27.4699, 61.4302, 52.7912, 374.7576, 58.7471, 30.1807, 68.5714, 181.2048, 44.9365, 66.8947, 272.5514, 410.8571, 123.0323, 0.0, 3.1296, 89.8653, 78.2332], [4.5674, 38.8476, 0.0, 0.0, 1.913, 21.476, 34.1902, 0.0467, 0.9434, 0.0, 4.4615, 0.0, 84.0301, 92.1047, 234.8242, 89.6988, 174.2321, 261.1084, 221.2063, 0.3947, 91.6262, 0.0, 0.0, 22.0, 0.0, 0.0, 307.0777, 275.2902], [37.2093, 40.1238, 0.3966, 0.0, 123.6957, 59.8151, 46.4676, 22.0851, 0.3182, 18.2991, 12.2453, 262.4808, 130.359, 1.38, 16.0904, 59.0233, 130.8571, 616.3333, 324.5057, 170.6747, 132.5179, 194.1807, 95.4127, 307.2368, 70.7009, 119.1905, 2.6774, 11.6818, 37.5, 5.0185, 103.9585, 157.7047], [32.1163, 5.1238, 12.6773, 1.3929, 69.8261, 77.759, 46.814, 123.956, 273.2727, 223.6322, 30.7108, 248.0268, 107.9398, 219.2222, 99.8421, 365.7664, 0.0, 0.1452, 48.8636, 0.75, 0.0, 409.4456, 276.2435], [69.0, 11.3429, 1.4803, 0.0, 116.5217, 60.1747, 35.3647, 6.4255, 4.0682, 5.9533, 3.7925, 209.5385, 35.7179, 9.52, 76.6928, 172.6512, 233.3187, 831.4848, 288.7011, 184.5904, 121.5089, 97.5181, 196.4286, 59.5395, 91.9346, 0.0, 1.3387, 20.6364, 17.5192, 4.8704, 260.0829, 376.0777], [92.5256, 56.0952, 2.3448, 99.0, 159.7391, 35.411, 78.83, 6.5319, 31.6818, 40.2523, 1.3208, 48.4808, 158.359, 2.34, 143.9337, 258.6744, 619.3846, 615.2424, 258.4253, 395.8795, 688.75, 465.5542, 349.2857], [78.8326, 41.2476, 7.7783, 0.0, 192.913, 30.9247, 55.7271, 6.7447, 0.0682, 72.1869, 31.1509, 314.0, 99.4103, 12.2, 36.4337, 154.0465, 198.8242, 106.2874, 138.9277, 286.4375, 94.8434, 120.9206, 291.6842, 632.2056, 31.381, 21.2097, 208.4545, 42.1154, 3.3519, 296.7565, 472.1399]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

