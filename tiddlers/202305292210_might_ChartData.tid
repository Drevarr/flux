created: 20230529221000000
creator: Drevarr
modified: 20230705163532285
modifier: drevarr
tags: ChartData
title: 202305292210_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Belvyn Brightblade", "Riann Swordbreak", "Primal Clone", "Rx Medic", "Tika Fiery", "Black Raspberry Pie", "Venomina The Siren", "Cat Wigglebooty", "Fribble Bibble", "Crusader Siolith", "Blanco Padre Guard", "Pamtastic", "Gabe Malhorn", "Tegan Parker", "Zadey Starbolt", "Miphest\u00f6", "Sygaldry Verdandi", "Koralia Danai", "Solus Sanctus", "Drevarr Moonwillow", "Lucas Ryn", "Artakama Nahid", "Bella Sassy", "Johosh Of The North"];
const professions = ["Druid", "Firebrand", "Spellbreaker", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Tempest", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Tempest", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.9425, 0.0, 0.0, 22.2329, 0.0, 0.0, 3.12, 0.0, 0.0, 0.0, 0.0, 4.9851, 2.499, 64.4], [1.7325, 55.6063, 6.1401, 4.7858, 12.1063, 5.5123, 16.6639, 7.7376], [0.0, 34.8718, 0.0, 0.0, 27.4865, 0.0, 3.1512, 14.6016, 11.1969, 28.1081], [0.0, 36.4426, 7.6535, 0.0, 13.5529, 0.0, 10.7354, 10.5456, 5.0895, 14.054, 0.0, 5.2496, 8.7669, 6.1152, 22.54], [2.0475, 34.5576, 2.4214, 0.3974, 15.6848, 1.9766, 11.9104, 0.5616, 75.44], [7.2135, 33.301, 1.4269, 0.0, 16.3701, 6.0134, 4.5399, 8.6736, 15.1902, 24.556, 4.6922, 11.4734, 25.785, 8.4966, 23.46], [0.0, 52.1506, 0.0, 0.0, 2.8172, 5.039, 10.3615, 14.1648, 11.0403, 3.2432, 8.3816, 10.8781, 33.1767, 4.5276, 40.25], [0.0, 4.1808, 6.3423, 111.5057, 0.0, 0.0, 27.504, 10.3194, 74.29], [3.591, 47.124, 9.4263, 2.1694, 9.5936, 0.0, 6.3558, 10.4832, 7.83, 34.5946, 1.7406, 14.5583, 46.2411, 5.6154, 47.61], [4.662, 61.8895, 3.87, 3.726, 9.2891, 0.8909, 7.0501, 8.424, 8.8479, 30.7336, 1.3055, 6.1156, 38.1618, 8.085, 57.73], [37.1142, 32.7413, 0.4352, 20.3491, 69.7914, 13.7592, 94.76], [8.001, 73.5134, 7.0481, 1.3745, 12.8677, 0.0, 2.7773, 1.56, 25.5258, 32.4324, 6.7734, 23.2716, 22.8627, 8.6436, 62.1], [20.9282, 13.7614, 50.4047, 8.9923, 26.2243, 28.7664, 30.3021, 23.0116, 0.0, 31.1731, 56.8989], [85.4515, 1.0378, 1.1261, 19.2634, 5.401, 25.1027, 17.3472, 11.0403, 51.2741, 0.3027, 7.685, 51.9138, 14.1414, 0.0], [26.334, 58.1196, 4.3456, 0.0, 34.6437, 0.0, 3.7921, 0.0, 0.0, 37.9922, 3.6326, 13.2594, 70.8228, 15.6702, 54.05], [0.0, 58.1196, 3.9132, 2.8152, 18.0452, 2.2272, 6.9433, 14.1024, 16.3647, 36.2934, 4.4462, 15.9654, 72.5418, 7.056, 75.44], [14.616, 87.3365, 1.5566, 0.0662, 15.228, 2.3107, 13.94, 17.4096, 39.0717, 44.1698, 0.0, 10.1746, 59.8212, 1.9404, 86.94], [6.867, 98.3321, 8.6696, 5.6138, 26.3444, 0.0, 5.4478, 15.7248, 18.4005, 57.7606, 0.1135, 18.2926, 61.1964, 7.4676, 84.41], [11.5605, 103.6728, 5.578, 22.9943, 0.0, 9.9877, 16.3488, 27.7182, 50.3474, 4.6732, 18.1302, 74.6046, 11.3778, 67.85], [11.151, 123.779, 0.7135, 10.8634, 14.3143, 1.8096, 16.29, 19.2816, 33.8256, 54.5173, 3.4434, 17.3725, 53.9766, 5.8506, 72.22], [1.6065, 95.8188, 6.1185, 4.9349, 24.7455, 8.7696, 17.6787, 16.224, 30.2238, 62.2393, 7.5869, 14.3418, 67.2129, 9.7608, 100.28], [17.8605, 150.1685, 11.6099, 6.8558, 25.9637, 6.4867, 8.4922, 21.216, 35.235, 83.552, 1.4568, 24.8952, 92.3103, 22.0206, 108.79], [21.3255, 166.5048, 5.5996, 0.0, 44.3896, 0.0, 39.8973, 16.9104, 44.9442, 113.359, 0.2838, 23.001, 65.1501, 15.0234, 112.24], [15.4665, 190.0668, 8.3453, 8.2634, 33.197, 0.0, 22.4856, 23.088, 52.2261, 75.9845, 1.646, 21.1068, 78.0426, 28.812, 117.07], [5.3235, 195.7217, 3.87, 0.0, 52.6889, 8.4077, 23.3936, 25.8336, 53.4006, 173.8994, 3.2164, 37.8299, 147.834, 32.4576, 163.53]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

