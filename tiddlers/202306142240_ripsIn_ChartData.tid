created: 20230614224052000
creator: Drevarr
modified: 20230705163535565
modifier: drevarr
tags: ChartData
title: 202306142240_ripsIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Permanent Dawn", "Rina Of Theros", "Johosh The Mighty", "Elonith Requiem", "Morton Saltbringer", "Johosh The Mighty", "Cedryn X", "Smol Gluvs", "Mistwalker Cael", "Be\u00eb", "Xanvias Einzbern", "Koralia Danai", "Solus Sanctus", "Artakama Nahid", "Momomeko", "Arriasa", "Zayde Sunsabre", "Venomina The Siren", "Ryvalia Fazebringer", "Crusader Siolith", "Sakis Ranger", "Black Raspberry Pie", "Shaca Booey", "Tika Fiery"];
const professions = ["Weaver", "Scourge", "Spellbreaker", "Scourge", "Chronomancer", "Berserker", "Berserker", "Scourge", "Vindicator", "Scourge", "Berserker", "Firebrand", "Firebrand", "Tempest", "Chronomancer", "Druid", "Spellbreaker", "Tempest", "Chronomancer", "Firebrand", "Druid", "Chronomancer", "Berserker", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0408, 0.0, 0.1455, 0.0526, 0.0125, 0.0896, 0.0635, 0.0488, 0.0654], [0.0816, 0.1064, 0.0909, 0.1871, 0.0125], [0.3902, 0.1402], [0.2456, 0.1375], [0.0746, 0.0794, 0.2073, 0.2804], [0.5821, 0.3333], [0.2836, 0.2222, 0.2561, 0.1121], [0.102, 0.0851, 0.2545, 0.2456, 0.125], [0.1837, 0.1702, 0.1818, 0.3881, 0.0794, 0.2561, 0.0093], [0.1429, 0.1489, 0.3091, 0.3509], [0.1837, 0.1915, 0.1091, 0.3582, 0.3175, 0.2805, 0.0561], [0.0204, 0.0213, 0.3273, 0.3392, 0.0375, 0.4478, 0.0159, 0.2561, 0.0], [0.0408, 0.0, 0.0545, 0.1813, 0.075, 0.5522, 0.2698, 0.378, 0.271], [0.1837, 0.1915, 0.1636, 0.3275, 0.1625, 0.2537, 0.3016, 0.3171, 0.0841], [0.102, 0.1489, 0.1091, 0.3158, 0.225, 0.194, 0.3016, 0.3537, 0.1495], [0.1633, 0.1064, 0.1273, 0.2924, 0.1375, 0.4627, 0.2222, 0.6098, 0.0], [0.2653, 0.4468, 0.2, 0.5497, 0.4, 0.1776], [0.2041, 0.3404, 0.2727, 0.4035, 0.35, 0.3284, 0.2381, 0.1951, 0.0374], [0.0408, 0.0426, 0.0364, 0.3099, 0.3375, 0.5373, 0.7619, 0.2561, 0.0654], [0.2245, 0.1915, 0.3091, 0.3743, 0.25, 0.3582, 0.6032, 0.2683, 0.0654], [0.1837, 0.0426, 0.1818, 0.4561, 0.2625, 0.403, 0.4444, 0.5488], [0.1429, 0.2979, 0.1636, 0.3743, 0.2875, 0.7164, 0.2698, 0.5854, 0.1121], [0.3469, 0.2979, 0.1273, 0.462, 0.4125, 0.4627, 0.5397, 0.4146, 0.1308], [0.1429, 0.0851, 0.1455, 0.6023, 0.3875, 0.5373, 0.5238, 0.6098, 0.215]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

