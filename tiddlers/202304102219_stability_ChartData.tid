created: 20230410221909000
creator: Drevarr
modified: 20230705163525280
modifier: drevarr
tags: ChartData
title: 202304102219_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Nazhul Naxxremis", "Smol Daddy Tika", "Arcanophage Farra", "Elonith Requiem", "Grasszanine", "Sub Train", "Xanvias Einzbern", "Ryvalia Fazebringer", "Sassy Daddy Demon", "Mistwalker Caelon", "Ark Darkness", "Sygaldry Verdandi", "Xyntharos", "Gavann", "Zaylen Harker", "Solus Sanctus", "Bella Sassy", "Johosh The Great", "Koralia Danai"];
const professions = ["Scourge", "Berserker", "Spellbreaker", "Scourge", "Spellbreaker", "Firebrand", "Berserker", "Chronomancer", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.7142, 3.9078, 4.5065, 26.2752, 1.7597, 0.0, 0.4586, 0.8036, 1.0231, 1.7013, 0.2769, 0.9702, 0.6037, 0.0, 1.0927], [1.9118, 2.4106, 8.4893, 10.0734, 11.2608, 0.0, 2.7821, 2.1542, 0.9475, 1.325, 0.0, 0.0, 0.0, 1.1628, 1.0804, 1.8865, 2.1295, 1.0053, 0.9869, 0.804, 0.0], [0.0, 0.0, 7.4112, 6.3622, 6.0058, 3.8611, 1.391, 1.5206, 3.384, 0.0, 1.8346, 1.9404, 3.5986, 1.519, 0.9413, 2.0065, 1.6601, 0.0, 2.8849, 2.2854, 0.4502, 3.8046], [0.0, 9.2782, 27.7766, 1.457, 1.512, 2.2387, 1.9966, 1.0366, 3.4653, 0.9408, 1.6582, 1.5798, 0.0554, 0.0, 0.3396, 0.0, 1.6173], [6.6273, 30.7795, 1.5299, 0.0, 1.3939, 2.1996, 0.0, 2.8028, 0.0, 0.0, 0.8506, 0.7752, 0.0, 1.7733, 0.0, 3.5405, 2.7528, 1.3829, 3.1304], [2.4041, 2.3587, 5.8714, 4.0608, 0.0, 6.9815, 2.45, 4.41, 4.6785, 8.1394, 2.2932, 4.188, 5.1161, 7.081, 5.8692, 3.827, 6.6942], [2.2807, 0.0, 5.39, 12.1941, 39.0374, 1.1656, 0.3024, 1.056, 1.5566, 1.0701, 2.2932, 0.784, 1.9051, 1.7317, 3.1007, 1.323, 1.4337, 2.1555, 2.1418, 3.3242, 1.9296, 2.9859], [4.6426, 3.0993, 10.8687, 33.7824, 3.7882, 0.3024, 3.7171, 1.6243, 0.0, 5.5546, 2.8028, 5.1156, 4.1317, 5.8138, 1.8081, 2.4524, 4.9083, 9.3102, 10.0764, 1.9296, 6.9832], [2.9462, 14.553, 14.58, 69.0662, 2.4041, 9.9187, 5.7869, 3.3124, 2.94, 0.3175, 1.519, 0.0554, 0.2866, 0.981, 1.9218, 0.7431, 3.6877, 0.0], [0.3354, 2.5891, 13.475, 15.6403, 68.3155, 0.6556, 4.9594, 0.5069, 2.8426, 1.8726, 4.3826, 0.784, 3.4574, 2.0051, 7.1427, 0.2425, 1.6979, 0.0, 1.4424, 2.1295, 0.0, 6.0682], [2.4998, 6.8722, 8.4829, 54.8026, 5.9009, 4.1126, 2.7878, 6.971, 0.0, 6.1152, 4.802, 5.9623, 7.2608, 3.1561, 2.9547, 5.6218, 1.2725, 7.387, 9.3492, 3.8914], [3.0355, 15.631, 20.4119, 79.5763, 5.0267, 7.3181, 6.1248, 6.8796, 4.9784, 7.3735, 5.7418, 5.537, 2.0948, 4.9426, 5.9471, 8.2175, 9.2973, 3.5698, 10.1136], [2.549, 9.8208, 22.5033, 32.6061, 110.3558, 2.6955, 10.1002, 2.4499, 0.5753, 1.0366, 6.6248, 0.8036, 0.0353, 2.6734, 7.3088, 1.2127, 2.4902, 1.1427, 1.7921, 4.2071, 1.2864, 6.1163], [3.6605, 20.3472, 20.677, 105.1008, 7.8678, 12.6403, 9.7574, 10.0166, 2.3575, 11.6189, 3.1752, 5.8565, 7.4431, 10.1327, 2.2932, 4.5653, 4.363, 9.8348, 6.908, 6.3355, 12.3771], [8.2844, 8.928, 21.6948, 40.5588, 102.0979, 6.8479, 11.0678, 6.8006, 7.9862, 3.762, 6.1662, 5.684, 2.6107, 5.4684, 8.6377, 5.1817, 1.9997, 2.4412, 6.6439, 9.3492, 3.1517, 11.7029], [3.9283, 18.4608, 36.5824, 147.1411, 6.6294, 5.8061, 7.0118, 5.0422, 7.695, 5.5272, 8.8906, 7.8988, 11.4062, 3.5942, 5.0558, 4.7265, 11.1461, 9.505, 5.4672, 14.8814], [7.58, 4.5533, 27.8932, 60.7056, 156.9005, 6.7751, 11.5517, 8.0256, 8.1893, 2.809, 10.8545, 6.2328, 5.1862, 6.8963, 6.8105, 2.7121, 5.3199, 5.3498, 10.3156, 10.7516, 3.1838, 9.343], [11.1688, 5.5354, 27.8932, 66.8027, 187.68, 6.4108, 8.4067, 5.9558, 11.2687, 3.4945, 11.8227, 6.174, 7.1618, 9.9646, 9.4683, 3.3736, 9.2061, 5.2459, 9.0043, 10.388, 8.2651, 13.244], [15.6632, 8.4816, 30.723, 61.2358, 185.4278, 8.3049, 16.0272, 10.3066, 7.0387, 2.2739, 7.2873, 6.5072, 4.9039, 7.3216, 13.3442, 3.087, 8.4893, 7.1677, 6.7751, 12.4137, 2.4763, 15.1222]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

