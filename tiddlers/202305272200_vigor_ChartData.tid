created: 20230527220043000
creator: Drevarr
modified: 20230705163532120
modifier: drevarr
tags: ChartData
title: 202305272200_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Daddy Demon", "Tootsie Pop Rocks", "Venomina The Fierce", "Gravlyn Isshtail", "Newtype Khan", "Zadey Starbolt", "Drevarr Moonwillow", "Johosh Of The North"];
const professions = ["Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[152.037, 135.7364, 34.3595, 131.1635, 130.3596, 85.6926, 135.3317, 0.0, 38.507, 29.3334, 37.1574, 48.3021], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 186.026, 0.0, 200.07, 267.2639, 5.4461, 36.6887, 23.0202, 104.5548, 66.9809, 0.0, 78.8705, 5.2874, 0.0, 96.5002, 0.0, 88.6144], [0.0, 0.0, 115.1696, 81.2578, 15.8731, 165.888, 117.8486, 81.1617, 148.0878, 122.4216, 69.552, 171.4538, 0.0, 83.8297, 13.5011, 58.2271, 80.3533, 83.424, 70.9184], [125.5477, 28.75, 27.2938, 91.7381, 1.98, 39.4284, 154.2132, 0.0, 64.4733, 222.3937, 0.0, 274.59, 256.337, 80.9159, 168.8954], [130.1164, 73.9906, 0.0, 33.252, 84.0884, 166.1604, 0.0, 114.6995, 272.3533, 0.0, 156.978, 312.0237, 82.1261, 218.857, 146.5884, 231.903, 207.5038, 0.0, 88.6564, 79.9552, 0.0, 203.5341, 133.6554, 84.896], [139.5803, 52.5325, 59.8312, 13.9916, 75.324, 45.4766, 392.8428, 87.9174, 123.7395, 309.7495, 84.3588, 247.617, 292.3553, 69.4186, 172.9526, 309.141, 123.6438, 276.9361, 0.0, 111.1188, 15.6339, 45.0047, 47.713, 81.4522, 157.6064], [134.9649, 75.8459, 74.1955, 21.429, 80.184, 5.5123, 580.3824, 64.4436, 116.616, 348.4682, 240.6722, 382.806, 366.982, 94.9471, 234.0425, 431.8272, 200.718, 339.3747, 37.1919, 64.7618, 41.8624, 22.113, 146.0497, 144.3741, 216.0256], [368.7176, 17.056, 138.4163, 50.4868, 111.672, 130.4072, 905.3148, 216.1404, 306.6368, 800.1618, 510.5153, 663.309, 773.3817, 276.6155, 440.3801, 929.9808, 388.2438, 720.7116, 0.0, 251.94, 176.0403, 359.0087, 229.6182, 310.5536]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

