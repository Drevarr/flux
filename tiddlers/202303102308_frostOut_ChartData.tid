created: 20230310230833000
creator: Drevarr
modified: 20230705163521609
modifier: drevarr
tags: ChartData
title: 202303102308_frostOut_ChartData
type: text/vnd.tiddlywiki


const names = ["Alatreon", "Zefirokai", "High Sorcer Baradun", "Venomina The Siren", "Tegan Parker", "Zadie Miststep", "Mac Chiato"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Frost Aura per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[125.0865, 308.9268, 145.3232, 164.1395, 66.9461, 945.5], [93.0105, 158.8104, 55.9636, 78.6485, 31.4548, 732.7625, 0.0, 104.5656, 56.8013, 17.6649, 59.7292, 40.4022, 59.6035, 15.8879, 44.2928, 0.0, 0.0, 56.0014, 0.0, 55.1124, 1.0639, 58.3344, 82.7578, 40.3374, 55.8558, 27.9531, 19.872], [84.3975, 238.9401, 57.178, 59.9725, 51.0692, 1056.0625, 19.9395, 167.1597, 24.2733, 0.0, 16.6235, 92.5862, 39.8466, 38.4883, 36.0703, 3.6328, 32.2401, 38.3454, 17.7703, 0.0, 19.9143, 59.13, 55.8072, 3.9413, 35.0996, 98.7722], [97.0695, 259.8057, 142.0848, 110.6875, 51.2187, 435.3875, 19.9395, 214.9404, 85.8935, 43.8693, 75.4087, 52.9343, 104.9491, 18.502, 76.1729, 3.9811, 16.177, 53.1269, 11.9563, 92.0362, 15.9951, 100.3982, 77.3696, 93.8432, 96.9111, 55.0971, 40.122, 75.2238, 35.4929, 19.9172, 130.9711], [119.592, 346.4559, 155.4432, 183.701, 75.946, 2081.625, 50.211, 215.957, 140.9546, 84.8502, 55.2193, 81.7556, 175.2461, 39.0598, 126.0023, 15.9588, 19.7892, 64.4182, 31.236, 89.6305, 23.8898, 186.0254, 221.3323, 156.6198, 128.8287, 69.7914, 153.684, 114.9264, 55.0066, 94.812, 207.055], [51.777, 322.2576, 107.3732, 142.2435, 17.0729, 2408.7375, 0.0, 411.727, 110.5684, 99.0408, 67.8574, 83.6818, 149.7533, 44.4658, 107.2046, 65.105, 19.7892, 39.4988, 11.8104, 70.2027, 16.7809, 190.6741, 182.233, 156.2792, 180.6304, 95.5782, 108.216, 92.1564, 43.2041, 86.3208, 226.2002], [13.1859, 321.0064, 285.936, 113.3808, 2847.175, 83.5695, 617.8084, 137.7419, 175.8957, 53.1742, 53.6239, 207.7776, 117.484, 89.166, 125.8514, 53.2303, 0.0, 149.7366, 51.3704, 260.6305, 271.3462, 130.0939, 213.449, 51.678, 143.586, 122.2956, 91.3563, 162.8199, 201.7092]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

