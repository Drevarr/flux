created: 20230501220820000
creator: Drevarr
modified: 20230705163527842
modifier: drevarr
tags: ChartData
title: 202305012208_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Eibh\u00ebar", "Kmpek", "Rosie Sunray", "Svix", "Raevarae", "Smol Gluvs", "Tootsie Pop Rocks", "Skye Nightroad", "Farra The Bloodless", "Kary\u00edna", "Viral Marketing", "Xyntharos", "Joint Lee", "Hauzzy", "Be\u00eb", "Mistwalker Caelon", "Xanvias Einzbern"];
const professions = ["Chronomancer", "Vindicator", "Vindicator", "Scourge", "Reaper", "Scourge", "Scrapper", "Scrapper", "Vindicator", "Vindicator", "Dragonhunter", "Vindicator", "Scrapper", "Berserker", "Scourge", "Vindicator", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[57975.0, 4196.0, 2684.0, 0.0, 2909.0, 5263.0, 53973.0, 7.0, 35111.0, 3294.0, 532.0, 0.0, 3315.0, 17672.0], [0.0, 0.0, 132132.0, 7903.0, 2589.0, 0.0, 0.0, 93619.0], [36347.0, 4127.0, 0.0, 0.0, 0.0, 16538.0, 30867.0, 3574.0, 116563.0, 2706.0, 10245.0, 0.0, 2450.0, 51971.0], [79486.0, 6234.0, 554.0, 0.0, 2887.0, 23387.0, 104286.0, 0.0, 53146.0, 3161.0, 5794.0, 885.0, 4207.0], [7481.0, 4183.0, 388.0, 7903.0, 87789.0, 174886.0, 5286.0], [98038.0, 0.0, 0.0, 1637.0, 5038.0, 22184.0, 127236.0, 1217.0, 33327.0, 3231.0, 1078.0, 0.0, 1676.0, 24737.0], [81973.0, 806.0, 5398.0, 2395.0, 9854.0, 17196.0, 198901.0, 10058.0, 103860.0, 0.0, 1059.0, 0.0, 659.0], [181727.0, 1681.0, 2046.0, 0.0, 37125.0, 47673.0, 267983.0], [115880.0, 8434.0, 685.0, 0.0, 12248.0, 18172.0, 237827.0, 10952.0, 87400.0, 60.0, 2990.0, 3672.0, 0.0, 54990.0], [107804.0, 21379.0, 4893.0, 0.0, 14668.0, 29301.0, 172396.0, 0.0, 149655.0, 2191.0, 9300.0, 3473.0, 0.0, 42133.0], [226128.0, 18346.0, 9918.0, 0.0, 22921.0, 51851.0, 230627.0], [202985.0, 9104.0, 3495.0, 0.0, 30046.0, 31465.0, 177733.0, 11822.0, 50932.0, 0.0, 944.0, 0.0, 6911.0, 38284.0], [227322.0, 10709.0, 4153.0, 4067.0, 33174.0, 56202.0, 238242.0], [237484.0, 8236.0, 4542.0, 3607.0, 10471.0, 70961.0, 103145.0, 15766.0, 284692.0, 9038.0, 11578.0, 3510.0, 2141.0, 75790.0], [215296.0, 15484.0, 5799.0, 0.0, 19766.0, 67111.0, 203687.0, 6023.0, 207609.0, 8741.0, 28650.0, 0.0, 2051.0, 62878.0], [431543.0, 66114.0, 10101.0, 0.0, 42663.0, 90666.0, 400237.0, 27003.0, 287882.0, 9347.0, 31297.0, 0.0, 0.0, 144637.0], [495836.0, 11732.0, 0.0, 0.0, 48490.0, 126745.0, 572699.0, 5856.0, 351084.0, 5418.0, 29064.0, 5727.0, 2640.0, 121755.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

