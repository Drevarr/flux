created: 20230422000344000
creator: Drevarr
modified: 20230705163526085
modifier: drevarr
tags: ChartData
title: 202304220003_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Einzbern", "Bella Sassy", "Klee Flamepumpkin", "Solo Bloodborn", "Aronorf Xideliesi", "Koralia Danai", "Rahani Sunray", "Stoic Rapidfire", "Morton Saltbringer", "\u00c1rkantor", "Elonith Primal", "Blancooo Padreee", "Nazhul Naxxremis", "Newtype Khan", "Rina Of Theros", "Domina Flagbringer", "Panther B Me", "Rozaalyna", "Drevarr Moonwillow", "Skye Nightroad", "Smol Gluvs", "Be\u00eb", "Burnockholmes"];
const professions = ["Berserker", "Firebrand", "Weaver", "Spellbreaker", "Firebrand", "Firebrand", "Chronomancer", "Druid", "Chronomancer", "Vindicator", "Tempest", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scourge", "Scourge", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 166, 0, 0, 0, 9184, 0, 2412, 0, 11621, 0, 0, 2287, 1144, 4839, 1109, 0, 0, 0, 2526, 2526, 0, 336, 0, 2148], [0, 1188, 0, 0, 0, 2361, 0, 3096, 295, 8095, 0, 0, 6464, 1288, 5258, 0, 1130, 0, 2619, 2375, 0, 2038, 2887, 0, 2021], [1023, 637, 0, 4200, 1915, 1263, 664, 2942, 0, 261, 3353, 1378, 3470, 573, 2200, 0, 7477, 3573, 269, 2531, 1224, 0, 2862], [0, 2170, 4389, 3711, 0, 11533, 955, 4189, 0, 7144, 0, 0, 0, 0, 1777, 0, 2422, 0, 4170, 0, 0, 0, 2776, 0], [0, 538, 685, 0, 3235, 885, 0, 1542, 0, 5282, 0, 261, 0, 6194, 8313, 5136, 4450, 0, 1669, 2641, 76, 1803, 2465, 0, 1072], [0, 2497, 0, 0, 0, 6840, 1413, 6794, 0, 6443, 0, 0, 3608, 2357, 2420, 3054, 0, 3819, 3169, 0, 2795, 1248, 0, 0], [0, 1188, 0, 1248, 0, 6806, 1709, 2546, 1282, 3557, 0, 0, 9757, 1109, 1248, 0, 1109, 0, 3306, 3612, 0, 563, 4123, 0, 8543], [0, 2570, 0, 2553, 2346, 4847, 0, 2214, 0, 980, 1602, 0, 2847, 1304, 1227, 2607, 2760, 11677, 7028, 0, 0, 6173, 0, 223], [0, 1483, 1202, 1244, 0, 5311, 1584, 10641, 0, 5573, 0, 2343, 3607, 1505, 0, 269, 0, 2383, 5401, 4386, 0, 2774, 0, 5320], [0, 8832, 2218, 6040, 6173, 6048, 10649, 7969, 0, 11186], [0, 2681, 13, 1248, 0, 1219, 1243, 7624, 404, 9627, 0, 0, 3424, 0, 2613, 2173, 4043, 0, 8078, 2656, 1237, 0, 4331, 0, 8082], [1188, 1600, 0, 3212, 269, 5916, 0, 17450, 0, 5547, 0, 0, 2901, 0, 3819, 0, 1212, 11722, 3740, 191, 0, 0, 0, 7460], [1309, 5652, 2053, 6760, 269, 9861, 484, 8601, 1602, 14051, 0, 0, 11439, 0, 9162], [3085, 1692, 7135, 3567, 9827, 2, 3079, 0, 0, 3920, 2695, 5442, 2985, 1899, 4167, 4006, 3459, 1255, 8566, 0, 4924], [1709, 3747, 778, 1968, 0, 3749, 3970, 11331, 0, 12978, 0, 0, 3078, 2692, 9171, 0, 3191, 1540, 5012, 2508, 7458, 0, 1109], [0, 5192, 1756, 1977, 2918, 5811, 0, 5435, 84, 13118, 0, 0, 7121, 0, 2918, 5180, 2954, 7043, 3796, 0, 2247, 4362, 0, 5756], [1711, 3076, 4291, 4074, 0, 16611, 4133, 14223, 4049, 3143, 0, 0, 2740, 0, 9252, 0, 91, 6913, 267, 0, 9550, 0, 1109], [0, 5022, 643, 19778, 0, 17583, 0, 0, 7893, 6514, 5172, 0, 1304, 14949, 3, 2506, 6167, 0], [2694, 4228, 980, 1282, 0, 5606, 4978, 8686, 428, 10891, 0, 340, 4695, 264, 7028, 9243, 5437, 5834, 4422, 1529, 11, 7659, 0, 8442], [1676, 1895, 1105, 155, 0, 1602, 3867, 6779, 1196, 11633, 0, 17, 2551, 3247, 597, 3366, 1339, 0, 9428, 13799, 2459, 457, 15554, 0, 13360], [6605, 7936, 1859, 3482, 2465, 12743, 4394, 16217, 4421, 9461, 0, 0, 14169, 2189, 9331, 0, 8979, 0, 250, 712, 6377, 0, 0], [0, 0, 0, 6962, 5219, 22596, 4814, 21730, 0, 0, 17253, 8098, 13670, 0, 8433, 17425, 3484, 0, 14588, 14670], [0, 17610, 6149, 8224, 10921, 43030, 14853, 37864, 649, 76282, 4023, 168, 17670, 16885, 26108, 21414, 16117, 0, 18658, 1120, 7869, 2668, 26517, 7381]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

