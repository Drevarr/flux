created: 20230322220917000
creator: Drevarr
modified: 20230705163522858
modifier: drevarr
tags: ChartData
title: 202303222209_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Gabe Malhorn", "Elonith Primal", "Koralia Danai", "Charred Fishbringer", "Venomina The Siren", "Kiloak", "Blanco Padre Guard", "Zaylen Harker", "Viral Marketing", "Drevarr Moonwillow", "Johosh The Great", "Solus Sanctus", "Bella Sassy", "Newtype Khan", "Grasszanine", "Abigail Ryn"];
const professions = ["Tempest", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[43.8394, 1.7098, 0.0, 0.0, 14.6784, 6.8198, 7.1712, 2.305, 7.6986, 0.0, 0.0, 0.0, 45.472, 26.7794, 4.3085, 0.0, 11.158, 0.0, 3.697, 2.8729, 8.5536, 2.8397, 0.0, 0.0, 0.0, 0.0], [142.1, 20.2069, 2.9866, 1.044, 9.0028, 5.1874, 2.3674, 14.5746, 8.807, 5.0722, 4.7052, 7.6061, 0.0, 0.9908], [50.0314, 4.8581, 3.726, 2.921, 13.9392, 4.1933, 5.184, 4.4688, 1.6497, 0.0, 11.0669, 10.9074, 96.222, 8.74, 1.7136, 3.096, 8.1686, 1.2461, 1.4593, 4.4144, 2.4077, 0.0, 0.0, 0.0, 0.0, 1.4133], [55.2326, 2.3883, 6.923, 0.0, 7.6032, 9.2621, 5.0976, 9.9254, 1.8024, 6.336, 1.8228, 75.516, 25.7306, 3.0845, 1.512, 0.73, 1.7678, 4.3456, 11.8418, 9.6941, 2.554, 4.1308, 6.3475, 0.0, 2.9431], [41.3626, 4.4781, 4.646, 1.771, 8.3424, 10.921, 12.4416, 5.7859, 5.7434, 7.6877, 2.0874, 85.666, 10.9075, 2.0563, 10.044, 9.0028, 5.6801, 4.0537, 11.8418, 11.2781, 5.0544, 6.3619, 2.8454, 1.7048, 3.0014], [12.6317, 6.9478, 2.99, 5.796, 22.9152, 0.0, 16.416, 8.5142, 5.4073, 0.0, 3.337, 0.0, 116.522, 12.236, 12.9744, 4.032, 16.372, 9.9981, 1.9458, 12.1221, 0.0, 0.0, 0.0, 4.3229, 0.0, 0.0], [57.4618, 1.7098, 3.565, 1.449, 13.6224, 17.0035, 3.5424, 7.9498, 9.5316, 1.4602, 3.5904, 1.5582, 114.898, 1.2586, 4.5533, 7.812, 5.4921, 5.5931, 0.7459, 18.1481, 2.6611, 3.6077, 8.6814, 4.1861, 0.5596, 0.8451], [101.0534, 5.7265, 4.439, 6.003, 0.0, 7.8336, 7.1136, 16.9344, 12.9838, 5.5162, 1.0138, 0.0, 151.032, 11.6766, 2.9376, 6.984, 0.8342, 2.5792, 2.6268, 7.007, 13.559, 1.3395, 0.0, 0.0, 0.0, 0.0], [82.4774, 8.4405, 1.173, 0.0, 14.3088, 17.6947, 6.8544, 19.6627, 11.2424, 12.7565, 4.0278, 112.462, 11.1872, 7.7846, 12.528, 3.2674, 3.5356, 5.3834, 10.3704, 12.6086, 3.3934, 6.7154, 10.2053, 0.0, 1.2676], [82.4774, 1.0585, 3.404, 0.0, 13.464, 13.271, 13.4208, 17.0755, 0.9471, 6.1248, 8.2614, 126.672, 13.0051, 1.224, 8.136, 6.1525, 3.9123, 11.4154, 20.8108, 17.1072, 3.5363, 9.4103, 6.9221, 0.0, 0.1311], [62.9107, 16.6368, 8.326, 2.99, 19.8528, 12.5338, 14.9184, 11.9011, 12.0367, 5.1168, 7.6032, 9.0846, 109.214, 18.5987, 12.8275, 7.632, 9.7328, 7.7956, 8.7237, 31.1811, 20.0218, 5.8224, 6.2294, 2.9002, 0.3788, 1.967], [111.9514, 5.3466, 6.026, 0.0, 17.3712, 17.9712, 14.112, 16.3699, 12.1283, 10.6445, 6.6444, 116.116, 24.6818, 9.3024, 6.372, 0.6952, 6.6944, 8.821, 25.2252, 17.0438, 3.6256, 1.7009, 2.0246, 0.0, 1.2385], [86.688, 5.5908, 10.557, 13.087, 22.176, 31.2422, 2.0736, 22.344, 9.0122, 3.095, 9.0816, 6.0858, 142.1, 30.8347, 9.2045, 15.156, 4.8664, 6.0278, 4.2808, 24.3844, 17.424, 7.7155, 9.1894, 9.1656, 0.0, 1.3987], [117.1526, 6.8936, 8.349, 4.393, 21.5424, 13.6858, 6.9984, 28.177, 11.4868, 6.7766, 12.4186, 5.733, 173.362, 28.9469, 14.1005, 7.272, 5.6659, 6.9552, 5.4807, 16.8168, 21.6058, 5.3937, 8.8802, 9.4392, 0.0, 0.0], [145.1405, 22.3905, 16.514, 16.537, 34.9008, 27.0029, 28.0224, 25.0253, 18.8799, 26.7802, 19.2276, 262.682, 18.8085, 7.0502, 15.624, 11.5403, 10.3459, 16.215, 41.4814, 32.7571, 10.2516, 13.3644, 9.3845, 2.6863, 9.048], [226.3795, 33.8436, 31.74, 9.062, 62.7264, 36.2189, 31.9968, 47.04, 40.9064, 33.7075, 38.3082, 446.194, 58.2434, 52.2403, 14.364, 23.8801, 34.3123, 28.5708, 79.1791, 49.8643, 21.8964, 20.1461, 14.8565, 0.0, 7.6201], [407.1859, 28.9041, 33.35, 38.088, 48.048, 61.4246, 38.0736, 50.3798, 20.4685, 10.9325, 53.1802, 39.4842, 634.578, 74.7445, 16.8422, 29.268, 0.0, 21.8903, 61.8017, 107.2051, 15.2703, 27.0161, 25.7458, 17.3664, 5.5803]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

