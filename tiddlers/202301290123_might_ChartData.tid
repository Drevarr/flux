created: 20230129012318000
creator: Drevarr
modified: 20230705163518297
modifier: drevarr
tags: ChartData
title: 202301290123_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Palatine Of Ruin", "P\u00ebst Control", "Zaylen Harker", "Ele Otis", "Belvyn Brightblade", "Cpt Z Brannigan", "Sola Machina", "Bubble Teabringer", "Drevarr Moonwillow", "Aronorf Xideliesi", "Koralia Danai", "Bella Lunabringer", "Newtype Khan", "Venomina The Fierce"];
const professions = ["Firebrand", "Tempest", "Firebrand", "Catalyst", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24.017, 13.132, 19.463], [1.9992, 1.4601, 6.4638, 7.5646, 8.1549, 4.3799, 1.5595, 17.8636, 0.0, 4.08, 2.2394, 2.3688, 0.0785], [37.0549, 0.5161, 4.128, 6.8617, 17.437, 4.0996, 3.5708], [0.3713, 19.1226, 0.3645, 9.4944, 14.9855, 11.8218, 1.0397, 21.3639, 0.0], [5.5121, 4.8984, 6.2451, 11.8101, 20.0736, 10.4652, 45.0961], [5.1979, 8.9961, 3.159, 6.6641, 13.243, 1.8217, 21.4434, 22.8123, 1.4389, 3.816, 4.5362, 8.554, 5.4328, 2.9822], [8.7965, 8.0541, 8.7237, 10.1891, 18.3311, 7.7132, 21.5734, 16.0531, 2.9403, 3.288, 0.0, 7.4646, 15.3972, 1.2665, 6.71], [11.0527, 10.2678, 8.5779, 6.4325, 22.0252, 10.1551, 24.3025, 31.7441, 0.4692, 0.624, 9.5317, 16.121, 10.9989, 13.6948], [6.2832, 8.7135, 11.1294, 13.534, 20.7706, 9.6125, 37.4285, 22.2088, 1.6578, 2.808, 1.4429, 0.8659, 7.9814, 18.6214, 5.4328, 10.7125], [15.1368, 5.3223, 8.5779, 12.4019, 27.8103, 15.8916, 12.866, 55.4013, 5.7086, 0.264, 0.4147, 0.5315, 6.5172, 12.8968, 9.6657, 14.6758], [15.8508, 18.84, 8.505, 0.0, 31.0165, 10.2326, 43.9265, 41.5208, 3.3626, 0.0, 0.0, 10.0485, 13.4232, 11.1322, 8.672], [16.6505, 31.1802, 14.7744, 7.0758, 43.9807, 12.9458, 51.984, 52.8666, 4.2854, 0.0, 1.1102, 1.6755, 8.9001, 29.4784, 14.1653, 17.2656], [15.6509, 24.1623, 36.693, 36.974, 68.8636, 15.6203, 87.9829, 98.4912, 2.7996, 18.384, 0.0, 8.0962, 32.571, 0.0, 6.1607], [48.093, 37.1708, 113.9749, 159.5654, 2.8465, 40.512, 28.2506, 59.549, 31.3635, 42.34]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

