created: 20230427220456000
creator: Drevarr
modified: 20230705163526912
modifier: drevarr
tags: ChartData
title: 202304272204_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Tlesia", "Koralia Danai", "Mac Aaroni", "Forever Broke", "Drevarr Moonwillow", "Red Reaper Robin", "Skye Nightroad", "Blaize Harlot", "Joint Lee", "Smol Gluvs", "Puny Tinker", "Bell Delinger", "Binkety Bonk", "Clem Storage Xviii"];
const professions = ["Daredevil", "Firebrand", "Tempest", "Scourge", "Scrapper", "Reaper", "Scrapper", "Scourge", "Scrapper", "Scourge", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[10003, 0, 2465, 72, 1305, 483, 411, 2425, 0, 2679, 2420, 2422, 6465, 0, 922, 0, 964, 387], [8673, 0, 2407, 148, 0, 0, 831, 3783, 0, 6420, 0, 0, 4188, 7, 0, 0, 3713, 3792], [3006, 0, 8646, 0, 315, 0, 1296, 2495, 0, 3746, 3608, 802, 12862, 1248, 0, 602, 2496, 0], [8055, 0, 15653, 3474, 0, 2266, 5240, 8106], [16152, 11, 2995, 304, 277, 858, 6568, 3215, 613, 6728, 662, 538, 6306, 968, 685, 322, 4354, 2125], [4298, 8798, 28845, 25738], [48506, 0, 11221, 4910, 1790, 2747, 11743], [17168, 0, 2496, 540, 397, 4193, 2374, 7281, 4930, 9957, 4110, 3515, 6768, 2603, 533, 532, 8947, 5929], [6816, 18315, 12816, 4121, 47081], [17027, 2465, 7296, 1155, 178, 777, 2726, 12200, 0, 13689, 404, 4795, 13868, 4217, 1248, 2856, 3498, 2725], [5646, 21054, 4481, 9336, 43488, 10893, 3363, 3999, 6794, 4624], [6758, 29212, 7635, 41201, 11737, 11070, 44260, 17080, 0, 14069], [8501, 36407, 2142, 14169, 67384, 6494, 22934, 9097, 15105, 13988], [639, 30794, 19807, 78156, 13531, 14175, 80573, 13175, 21719, 13127, 5311, 12738]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

