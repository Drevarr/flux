created: 20230520220730000
creator: Drevarr
modified: 20230705163530907
modifier: drevarr
tags: ChartData
title: 202305202207_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Sygaldry Verdandi", "Crusader Siolith", "Lucky Leipreach\u00e1n", "Aronorf Xideliesi", "Pedro O Mago Preto", "Black Raspberry Pie", "Primal Clone", "High Sorcer Baradun", "Tegan Parker", "Tika Mi", "Arriasa", "Artakama Nahid", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Druid", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.9914, 2.0, 0.9828, 0.0, 0.0, 0.0, 2.9891, 2.0, 0.0, 1.0, 0.0, 22.9809, 1.993, 0.0, 15.0233, 0.0, 33.1066, 0.0, 42.0412, 0.0, 0.0, 15.9938, 0.0, 2.0, 0.0, 13.1059, 1.0, 3.973, 0.0, 0.0, 14.0], [20.9742, 3.0061, 0.0, 0.0, 0.0, 5.0645, 0.0, 2.9891, 0.0, 3.9906, 15.233, 0.0, 36.0694, 1.993, 0.0, 8.0155, 0.0, 1.0, 29.0576, 3.0, 29.0464, 0.9773, 13.9877, 4.0106, 5.0179, 4.0059, 2.0, 0.9865, 1.0, 7.9556, 9.9898], [34.9857, 6.0123, 0.9828, 0.0, 0.0, 2.0, 0.0, 3.9783, 1.0, 0.9906, 9.0072, 0.0, 42.3646, 1.993, 0.9773, 15.0233, 0.0, 1.0, 25.0086, 0.0, 26.1753, 0.0, 1.9773, 16.9877, 0.0, 7.0106, 1.0, 14.0235, 0.0, 0.0, 9.0, 0.9889, 17.9797], [14.9885, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9891, 0.0, 2.0, 18.0179, 0.0, 30.9826, 8.9859, 7.9545, 18.031, 0.0, 0.0, 16.0, 0.0, 58.1478, 0.0, 0.0, 12.9907, 0.0, 0.0, 0.0, 22.0412, 1.0, 0.0, 0.0, 0.0, 15.0457], [28.9828, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.9891, 0.0, 0.0, 22.2616, 0.9804, 56.2066, 4.993, 0.9773, 17.1473, 0.0, 2.0, 24.0576, 7.0294, 36.0584, 0.0, 0.0, 10.9907, 0.0, 0.0, 0.0, 9.0118, 2.0, 0.9865, 2.0, 11.9333, 7.9898], [100.9484, 15.0552, 9.931, 3.0169, 1.0, 22.4516, 0.0, 8.1304, 10.1613, 13.3868, 46.129, 20.0392, 192.4045, 7.9859, 0.9773], [33.9713, 2.0, 0.0, 0.0, 0.0, 4.0323, 0.0, 14.1739, 0.0, 0.0, 29.0287, 0.0, 118.7118, 11.9789, 3.9773, 31.1085, 0.0, 8.0779, 41.0058, 12.0147, 75.2148, 0.0, 14.1818, 32.0802, 0.0, 2.0, 9.6429, 38.0941, 13.375, 1.9865, 0.0, 0.9889, 17.0152], [49.0315, 5.1534, 2.9655, 9.0678, 0.0, 9.6774, 0.0, 27.0652, 0.0, 0.9906, 60.1183, 8.0392, 136.8142, 23.9859, 5.9545, 21.1085, 0.0, 2.0, 39.0375, 6.0147, 70.3454, 0.9897, 17.9318, 37.2994, 3.0385, 7.0213, 15.6071, 11.0176, 10.2708, 0.0, 0.0, 0.0, 20.0305], [118.9713, 36.1718, 8.9655, 20.1525, 2.0, 5.2258, 0.0, 35.3913, 0.0, 13.4811, 37.4229, 131.0938, 11.9789, 0.9773, 30.7674, 1.9804, 13.0779, 72.3775, 32.7059, 127.0619, 1.9897, 7.4091, 116.5895, 0.0, 43.2412, 17.375, 2.973, 1.3878, 24.8667, 73.2335], [140.8223, 34.1472, 7.9483, 7.0508, 0.0, 22.5484, 0.0, 36.163, 0.0, 2.9906, 70.5914, 7.0196, 216.1458, 19.9789, 0.0, 130.907, 6.9412, 29.1558, 161.0893, 8.0441, 231.6873, 9.9794, 20.7727, 123.4815, 3.0385, 41.1064, 18.1964, 110.5706, 15.125, 6.0, 27.4778, 73.4315], [129.5874, 47.2638, 22.1724, 32.4746, 3.0, 32.4194, 0.0, 43.2283, 6.0323, 21.0755, 110.0717, 5.9608, 212.8229, 25.9789, 12.5909, 129.2248, 0.0, 38.3766, 180.3285, 23.1176, 219.2491, 3.9897, 26.7045, 184.321, 49.4894, 35.4821, 103.6235, 29.3958, 12.9595, 3.3673, 30.9222, 122.9746], [132.2693, 47.2822, 17.8966, 10.0678, 0.0, 16.1935, 0.0, 39.663, 0.0, 18.0094, 96.6452, 7.9412, 239.217, 27.0141, 0.0, 143.7364, 13.0, 39.4935, 214.2305, 21.3824, 226.6375, 7.0, 33.6818, 178.1235, 20.0532, 12.9643, 104.9824, 32.1667, 7.9459, 0.0, 32.8778, 107.1523], [149.9112, 49.3804, 10.931, 35.3559, 0.0, 23.5806, 0.0, 39.8913, 4.0323, 7.9906, 103.7348, 6.9412, 255.6597, 26.9789, 2.9773, 121.4419, 9.098, 46.4416, 193.9942, 23.0882, 201.079, 23.7045, 180.0864, 12.4231, 79.734, 35.9643, 130.1588, 48.1042, 11.9324, 9.0408, 17.9222, 97.802], [163.7335, 37.4724, 18.8793, 18.1695, 0.0, 18.3548, 0.0, 39.1739, 3.0, 28.0283, 94.9677, 16.2353, 268.776, 18.0775, 9.9318, 103.907, 3.9608, 15.1299, 223.0893, 49.9118, 240.9244, 1.9773, 165.3519, 4.4231, 55.3298, 16.0893, 95.2059, 9.0625, 6.9459, 1.0, 0.0, 92.1371], [186.8281, 67.9018, 26.8966, 38.4237, 0.0, 32.6452, 1.0, 71.1739, 0.0, 18.9811, 131.0789, 11.0, 272.5608, 27.007, 15.9773, 126.0155, 16.1765, 21.8831, 194.5389, 48.25, 233.4622, 3.9897, 50.7045, 184.8735, 9.2308, 61.4787, 29.4286, 117.8235, 58.8125, 13.9054, 5.8163, 22.7889, 148.0761]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

