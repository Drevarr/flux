created: 20230308221219000
creator: Drevarr
modified: 20230705163521502
modifier: drevarr
tags: ChartData
title: 202303082212_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Fribble Bibble", "Mac Chiato", "Koralia Danai", "Blanco Padre Guard", "Zaylen Harker", "Viral Marketing", "Gavann", "Drevarr Moonwillow", "Sygaldry Verdandi", "Ravioli Fetabringer", "Bella Sassy", "K\u00f4sair", "Demon Sekhmet", "Domina Flagbringer"];
const professions = ["Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3.5178, 1.9355, 1.5792, 2.5817, 4.6648, 3.8808, 27.4536, 8.6132, 7.8924, 15.2552, 10.929, 23.1937, 3.4339, 2.1859, 0.8418, 2.3285, 18.6925, 2.0064, 6.3492, 3.3953, 1.226, 3.587, 9.4819, 6.9369, 10.4198, 7.1806, 11.6683, 0.0, 5.5296, 11.4048, 6.7777, 2.8771], [10.5496, 0.0, 0.0, 5.931, 15.7878, 33.2122, 9.3502, 11.415, 18.1565, 16.956, 13.6137, 3.0405, 0.0, 0.0, 0.0, 3.1154, 0.0, 1.0133, 1.5665, 0.0, 26.675, 6.6459, 7.7827, 17.7876, 0.0, 0.0, 22.5984, 13.2947, 6.1171], [1.0713, 4.089, 0.0, 0.5882, 3.7652, 8.0262, 22.3646, 14.6931, 7.4465, 24.5206, 13.8219, 36.6393, 6.224, 0.0, 4.4712, 2.1829, 21.6247, 18.216, 16.857, 0.0, 0.613, 2.335, 5.1408, 7.8586, 12.1565, 2.0412, 1.8648, 1.6416, 12.9888, 3.0909, 1.607], [5.3407, 5.8882, 5.2452, 1.1601, 9.7961, 6.615, 19.6862, 20.3585, 11.7718, 10.0141, 14.3844, 43.8663, 1.4308, 7.935, 2.1829, 15.852, 16.5264, 14.7035, 5.6983, 10.1484, 5.1437, 0.971, 12.4671, 16.08, 5.9049, 11.2421, 6.7245, 3.5856, 13.728, 2.5696, 4.0176], [2.2386, 3.2712, 0.0, 0.0, 7.1971, 16.317, 35.221, 13.5877, 11.7272, 20.6834, 11.0897, 30.5887, 5.3297, 3.9293, 17.4097, 6.1776, 13.6638, 5.2377, 11.1019, 4.433, 17.6501, 9.0229, 8.8118, 11.2995, 8.5781, 0.0, 6.1344, 30.9408, 6.8149, 17.6515], [0.2068, 5.621, 8.5632, 23.2848, 28.7928, 20.2664, 7.937, 8.7975, 21.7776, 53.6143, 1.6454, 0.7866, 3.5328, 4.5114, 18.6925, 17.2128, 10.0622, 0.0, 11.4425, 4.7714, 11.7096, 17.4151, 15.6298, 4.1917, 12.7339, 4.1602, 6.48, 27.456, 8.8631, 5.0803], [0.0, 11.2311, 3.29, 4.3628, 11.7286, 9.8784, 33.7478, 18.2858, 18.2819, 32.7565, 16.6345, 43.0259, 10.2302, 0.1408, 6.624, 0.7276, 25.1066, 9.3984, 10.7306, 0.1579, 1.4303, 4.653, 16.5077, 11.0603, 22.1261, 10.5705, 10.6027, 0.7776, 13.3056, 0.7076, 10.031], [6.5559, 7.5783, 0.3196, 4.902, 9.6295, 15.9642, 41.5152, 12.9429, 10.0328, 25.3629, 13.0183, 0.4968, 10.5267, 30.6961, 4.0128, 11.8445, 7.238, 4.2909, 5.8036, 26.675, 10.9633, 22.8979, 10.206, 13.9061, 0.0, 9.072, 33.8976, 13.5926, 11.7677], [1.6949, 6.4334, 0.2444, 2.5654, 13.6612, 21.168, 39.5064, 23.2142, 17.078, 30.0424, 25.9563, 51.5975, 14.0576, 0.7535, 8.9744, 21.6247, 11.4576, 10.7306, 1.1844, 10.4208, 4.23, 12.852, 18.7249, 17.0448, 21.6317, 17.5824, 27.3504, 9.9803, 6.7651], [3.134, 6.3788, 4.8316, 7.451, 15.4605, 39.69, 34.9531, 15.8907, 17.8806, 21.8065, 28.4474, 60.001, 3.4339, 8.7492, 7.0339, 28.5886, 12.8832, 16.7828, 0.2237, 11.3744, 4.8391, 11.9952, 18.9189, 25.0848, 8.2377, 14.0659, 6.0861, 16.1568, 33.3696, 12.0658, 4.0435], [6.3001, 8.5869, 5.6212, 1.4869, 11.4954, 24.1668, 36.9619, 8.3829, 19.3521, 27.7026, 28.3671, 54.4547, 5.1867, 0.0, 11.4969, 44.8071, 23.1792, 13.4039, 0.1053, 14.5074, 6.2773, 11.0242, 21.878, 21.2256, 11.5182, 16.1971, 4.6071, 11.232, 41.6064, 14.114, 15.863], [0.0, 0.0, 0.0, 1.6758, 9.315, 47.4428, 127.8238, 30.624, 41.9198, 23.2669, 74.2399, 32.1142, 84.0235, 53.167, 86.832, 69.656, 78.8544, 75.8592, 166.4256, 68.3726, 41.3165], [31.8201, 34.4021, 2.7636, 20.1145, 48.4806, 92.4336, 174.7656, 59.2792, 61.668, 117.7362, 102.9412, 240.5082, 19.941, 6.5974, 133.1384, 44.4075, 22.8194, 82.8899, 30.3545, 71.0573, 69.9999, 94.5504, 53.5086, 88.5514, 60.3072, 163.9968, 53.5139, 29.8339], [33.6589, 38.5184, 1.5416, 20.7518, 68.1061, 121.275, 185.3453, 78.7626, 67.866, 108.8452, 105.1109, 144.7083, 39.2755, 14.846, 27.2964, 69.0782, 100.6097, 44.2464, 68.9504, 19.003, 95.5583, 15.1603, 30.7877, 61.2681, 98.9885, 59.9238, 70.8091, 62.1216, 169.1712, 0.0, 38.1024]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

