created: 20230610164704000
creator: Drevarr
modified: 20230705163534974
modifier: drevarr
tags: ChartData
title: 202306101647_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Sub Train", "Morton Saltbringer", "Grasszanine", "Primal Clone", "Air One Com", "Ryvalia Fazebringer", "Eibh\u00ebar", "Melli Dragonswrath", "Xanvias Einzbern", "Zayde Sunsabre", "Blanco Padre Guard", "Tika Fiery", "Koralia Danai", "Bella Sassy", "Aronorf Xideliesi", "Gestern Yesteryear", "Solus Sanctus", "Arcanophage Farra", "Newtype Khan"];
const professions = ["Firebrand", "Chronomancer", "Spellbreaker", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Berserker", "Berserker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[20.2014, 13.0838, 11.952, 48.4301, 75.191, 0.0, 51.4946, 0.0, 0.0, 0.0], [0.0, 0.0, 2.592, 6.8659, 10.5115, 4.6023, 14.3919, 0.0, 0.0, 0.0, 4.1535, 6.1776, 15.0779, 4.1483, 39.7958, 5.5071, 0.0, 66.4937, 11.1622, 5.5821, 17.2014, 23.0129], [0.0, 0.0, 64.32, 59.7888, 142.3008, 0.0, 0.0, 0.0], [0.0, 6.8006, 13.008, 8.3635, 11.507, 6.8834, 23.0436, 1.173, 6.865, 0.0, 4.5688, 4.6446, 3.432, 49.632, 5.922, 0.0, 81.2047, 8.9964, 12.0422, 22.2161, 9.9475], [3.6378, 0.0, 4.992, 16.1741, 9.0182, 0.0, 7.4871, 5.0138, 4.979, 0.0, 0.0, 3.7523, 0.0, 0.0, 59.3779, 4.9413, 0.0, 83.8527, 8.7881, 10.0979, 37.6683, 31.0797], [0.0, 0.0, 3.744, 9.3082, 15.1085, 4.9225, 7.4871, 7.5491, 15.0126, 0.0, 3.4481, 0.0, 7.5504, 7.5733, 49.7222, 9.5243, 0.0, 84.5883, 13.1614, 16.5894, 21.2831, 26.4772], [6.7725, 0.0, 6.816, 8.4096, 14.4643, 6.8034, 11.813, 1.1541, 13.4283, 4.9486, 0.0, 4.5688, 6.7496, 6.7496, 58.2048, 6.6387, 6.8241, 72.8194, 16.0352, 13.1712, 18.7175, 21.3797], [0.0, 8.4454, 0.0, 14.7456, 0.0, 0.0, 8.4854, 10.7466, 25.6873, 0.0, 27.4302, 2.1087, 19.3565, 15.055, 0.0, 143.9328, 22.8395, 10.8974, 123.5724, 25.698, 42.4928, 42.6246, 34.1481], [0.0, 14.2296, 17.952, 16.0589, 29.9827, 0.0, 53.2416, 0.0, 0.0, 0.0, 21.2468, 25.7629, 0.0, 0.0, 182.1946, 15.0314, 0.0, 183.0048, 0.0, 20.0704, 17.3181, 17.1235], [0.0, 115.1078, 44.0371, 0.0, 38.3506, 0.0, 0.0, 19.9633, 0.0, 0.0, 0.0, 0.0, 111.1757, 21.01, 0.0, 66.3466, 0.0, 0.0, 167.5829, 31.7726], [0.0, 37.6068, 23.376, 31.7261, 15.2842, 7.7639, 30.7803, 7.814, 15.4652, 0.0, 7.6215, 7.668, 19.4938, 0.0, 0.0, 71.4701, 7.2045, 0.0, 207.4251, 39.026, 15.5232, 42.3914, 70.2263], [0.0, 19.5149, 32.88, 7.9258, 49.6589, 0.0, 60.8119, 8.0599, 15.4652, 0.0, 5.751, 4.1642, 0.0, 0.0, 151.513, 39.9078, 0.0, 153.8771, 37.8182, 29.0707, 91.5467, 69.088], [7.4111, 0.0, 0.0, 36.887, 43.92, 0.0, 17.8027, 0.0, 11.9572, 0.0, 0.0, 0.0, 31.9634, 0.0, 228.1267, 8.9962, 0.0, 262.5913, 16.785, 7.495, 72.0712, 33.1088], [5.7663, 23.6174, 36.096, 65.4797, 107.1941, 3.8019, 43.8411, 46.1837, 51.9404, 0.0, 0.0, 8.0538, 0.0, 0.0, 179.7581, 9.0528, 12.1776, 166.2343, 52.2707, 37.3811, 57.8435, 92.2494], [0.0, 29.0136, 28.656, 33.961, 80.3736, 3.6418, 69.3805, 5.3544, 104.9748, 6.7495, 0.0, 12.4605, 0.0, 0.0, 191.0381, 29.7799, 10.6964, 206.1011, 5.5811, 66.4205, 86.2405, 96.9014], [40.7898, 29.2723, 65.952, 76.5389, 71.9702, 0.0, 28.6174, 7.8329, 15.5784, 0.0, 0.0, 4.9842, 56.7882, 0.0, 7.7501, 219.9149, 32.0243, 0.0, 301.4284, 59.4762, 53.6883, 64.0827, 92.3483], [10.1007, 48.9905, 92.064, 51.5405, 65.6458, 16.7684, 46.3368, 20.0174, 48.6588, 8.6913, 20.1892, 32.0139, 23.4978, 23.4978, 0.0, 291.9264, 14.7108, 22.6729, 259.7963, 38.318, 19.255, 65.1323, 146.5399], [0.0, 47.3088, 0.0, 95.3165, 108.2189, 0.0, 0.0, 115.658, 0.0, 65.93, 49.7462, 96.8968, 17.1142, 109.1002, 72.3092, 59.5125, 345.2672, 43.4826, 121.1437, 52.8872, 94.8723], [0.0, 23.8022, 0.0, 15.529, 122.5075, 0.0, 165.2153, 3.2542, 0.0, 0.0, 20.0228, 8.6904, 21.0267, 21.0496, 21.0146, 300.4992, 27.479, 17.0021, 506.2055, 32.1121, 92.6688, 115.687, 216.4198]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

