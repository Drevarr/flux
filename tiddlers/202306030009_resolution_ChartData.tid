created: 20230603000934000
creator: Drevarr
modified: 20230705163533203
modifier: drevarr
tags: ChartData
title: 202306030009_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Proteccdebussy", "Aronorf Xideliesi", "Pu Ella", "Air One Com", "Blanco Padre Guard", "Tika Fiery", "Bella Sassy", "Koralia Danai", "Sister Elon\u00edth"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 185.472, 257.6297, 65.4289, 137.1789, 138.2476, 161.2416, 0.0, 147.6468, 210.0493], [68.4217, 114.7608, 0.0, 445.0374, 0.0, 17.502, 61.7022, 221.9656, 164.5995, 229.0207, 76.7848, 64.9032, 0.0, 216.3035, 206.32, 233.0002, 56.8836, 23.8788, 160.0013, 0.0, 144.3393, 113.5546], [171.6779, 0.0, 476.6031, 24.4728, 0.0, 113.0793, 170.2634, 431.8264, 496.1307, 225.7777, 31.9144, 49.3111, 74.5472, 260.015, 378.9601, 155.0494], [30.8264, 94.9093, 0.0, 630.5346, 47.5728, 0.0, 81.4519, 309.2483, 362.388, 273.3849, 61.7624, 74.6046, 296.079, 282.9103, 247.8824, 138.7314, 84.2886, 137.7408, 0.0, 159.8845, 275.4898], [105.9991, 188.1792, 36.1743, 707.89, 0.0, 39.6749, 32.9156, 54.1939, 394.8746, 333.684, 415.9472, 56.7768, 15.9243, 0.0, 178.71, 471.8498, 233.1314, 243.2457, 69.3198, 306.9466, 0.0, 221.2717, 318.8058], [93.6757, 218.4732, 39.255, 782.7125, 129.5712, 12.8974, 94.1522, 163.8206, 640.5403, 598.6578, 437.4807, 119.2936, 49.7656, 17.7968, 440.5765, 471.933, 354.2207, 248.6484, 124.3123, 409.9584, 71.217, 306.5391, 391.1768], [65.7427, 298.1642, 79.7368, 1555.2927, 108.8736, 36.7718, 42.3014, 188.8236, 773.1846, 453.3438, 427.0382, 46.7072, 116.6965, 33.5328, 455.63, 349.6046, 298.8225, 280.1952, 80.8315, 301.7894, 11.0331, 285.6357, 674.7966], [78.2447, 281.4134, 51.2434, 1538.9253, 72.6, 108.0022, 76.5274, 160.9957, 888.8819, 257.6184, 413.7419, 145.8944, 184.8335, 346.7135, 536.7146, 366.4804, 391.4784, 171.9274, 308.9702, 104.5008, 252.0315, 541.5166], [377.6771, 40.9836, 1316.6014, 115.4472, 57.2972, 226.291, 729.2247, 579.2826, 524.1985, 80.8192, 134.124, 34.0592, 377.384, 628.2738, 437.8097, 315.9648, 85.3222, 292.9766, 48.4497, 384.0007, 603.8917]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

