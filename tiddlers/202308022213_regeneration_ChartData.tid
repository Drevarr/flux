created: 20230802221330000
creator: Drevarr
tags: ChartData
title: 202308022213_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Imalou", "Tegan Parker", "Inedible Plant", "Crusader Siolith", "Elementsofmathus", "Cat Wigglebooty", "Tootsie Pop Rocks", "Venomina The Sly", "Drevarr Moonwillow", "Tribal S", "Zaedy Zae"];
const professions = ["Firebrand", "Tempest", "Vindicator", "Firebrand", "Tempest", "Scrapper", "Scrapper", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[151.0396, 186.2666, 27.6321, 34.398, 12.7555, 380.4538, 13.8905, 34.8042, 38.463, 61.2162, 283.945], [55.1592, 155.232, 165.5904, 90.428, 53.9284, 161.5324, 39.102, 1.47, 5.6511, 39.2573, 488.3789, 39.2137, 137.7145, 172.0488, 163.0661, 393.8371], [0.0, 137.2224, 93.8496, 218.3381, 56.1775, 118.1439, 33.4415, 78.0203, 60.9499, 764.6861, 48.7472, 0.0, 185.2435, 224.0167, 928.2816], [118.1016, 147.5712, 350.9208, 351.4711, 252.7489, 486.5318, 327.563, 82.7978, 0.3549, 25.4285, 283.1558, 52.9925, 187.6494, 163.0798, 199.4506, 260.3966], [93.0938, 93.8784, 234.1728, 162.115, 173.3306, 510.0224, 129.3718, 29.4367, 0.041, 555.2122, 118.0508, 143.4377, 144.797, 387.0828, 531.373], [5.7866, 117.8016, 487.9728, 294.5312, 38.0848, 308.2796, 187.3172, 19.4775, 14.5236, 2.0434, 224.352, 64.5742, 44.3906, 239.2298, 373.4055, 894.4949], [0.0, 280.224, 361.6368, 233.0852, 45.2319, 558.2472, 89.5994, 56.9992, 35.8722, 65.759, 891.2678, 212.6776, 3.4697, 460.3491, 681.2127, 1984.2019], [109.6754, 905.1168, 1255.1256, 916.2623, 0.0, 260.6075, 1493.9198, 387.5288, 274.7335, 167.1014, 1456.871, 107.7726, 42.924, 855.2421, 594.5008, 2496.8045], [140.1314, 899.2704, 1700.3472, 1007.2024, 454.818, 1364.3893, 373.1448, 308.9205, 128.5557, 162.9528, 3261.8419, 520.0194, 265.4134, 1193.2166, 1903.6774, 5370.0408], [131.9083, 1223.04, 2018.7816, 1561.138, 246.0016, 2130.8738, 718.583, 263.9385, 23.4058, 3694.9594, 651.849, 42.7452, 753.9101, 2113.6184, 6379.8883], [415.386, 1270.8864, 2160.0072, 1669.283, 1043.5324, 2074.0818, 951.7799, 537.6893, 63.609, 81.1358, 3799.8144, 616.7689, 601.2222, 1610.877, 2728.1706, 4717.5134]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

