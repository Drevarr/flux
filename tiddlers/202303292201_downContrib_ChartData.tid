created: 20230329220116000
creator: Drevarr
modified: 20230705163523273
modifier: drevarr
tags: ChartData
title: 202303292201_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Nazhul Naxxremis", "Smol Gluvs", "Domina Flagbringer", "Mort\u00e4rion", "Seren Nightroad", "Iced Coffeebringer", "Blancooo Padreee", "Baidu Sugiyama", "Panther B Me", "Plum Crazybringer", "Rina Of Theros", "My Birthday Girl", "K\u00f4sair", "\u00c4lplrmagron\u00e4bringer", "Cinder Flamebringer", "Legacy Of Mathus", "Sister Elon\u00edth", "Bee Honeybringer", "Cael Saladbringer", "Sizzln Sisigbringer", "Xanvias Tlesel"];
const professions = ["Scourge", "Scourge", "Spellbreaker", "Berserker", "Scourge", "Scourge", "Berserker", "Scourge", "Scourge", "Scrapper", "Scourge", "Scrapper", "Berserker", "Vindicator", "Weaver", "Berserker", "Dragonhunter", "Scourge", "Vindicator", "Weaver", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[37581.0, 0.0, 36875.0, 3170.0, 39210.0], [17220.0, 1554.0, 41387.0, 274.0, 41860.0, 0.0, 1710.0, 3080.0, 2773.0, 9522.0], [810.0, 2129.0, 24609.0, 2646.0, 84696.0, 13126.0, 5872.0, 2274.0, 0.0], [1452.0, 0.0, 56592.0, 547.0, 74018.0, 3540.0, 1504.0, 0.0], [37351.0, 784.0, 86018.0, 6273.0, 0.0, 8722.0], [22961.0, 0.0, 29107.0, 0.0, 75016.0, 31030.0], [2271.0, 4378.0, 54370.0, 2588.0, 71877.0, 9261.0, 3219.0, 0.0, 11338.0, 1490.0], [3331.0, 0.0, 34973.0, 280.0, 86254.0, 21375.0, 7418.0, 2134.0, 7348.0, 20597.0], [46212.0, 1145.0, 96690.0, 6218.0, 85354.0, 32749.0, 0.0, 6002.0, 9586.0, 9829.0], [50912.0, 8860.0, 82748.0, 6404.0, 67205.0, 30198.0, 5571.0, 6125.0, 1938.0, 34032.0], [12976.0, 2466.0, 78548.0, 13416.0, 83536.0, 24793.0, 11287.0, 3822.0, 39933.0, 26468.0], [26650.0, 147422.0, 3298.0, 87285.0, 32184.0, 5004.0, 4237.0, 24711.0, 3727.0], [78485.0, 8084.0, 109783.0, 0.0, 89833.0, 32441.0, 2983.0, 40659.0], [32992.0, 5483.0, 97234.0, 5016.0, 165385.0, 53204.0, 0.0, 1267.0, 15651.0, 5016.0], [41387.0, 739.0, 181803.0, 6700.0, 143813.0, 6735.0, 0.0, 2509.0, 21536.0], [30395.0, 1094.0, 81771.0, 5492.0, 183580.0, 59249.0, 695.0, 16228.0, 4611.0, 29555.0], [20930.0, 336714.0, 39055.0, 8547.0, 823.0, 18244.0], [38882.0, 2058.0, 137593.0, 10744.0, 173391.0, 24909.0, 9362.0, 10935.0, 104619.0, 37115.0], [978.0, 5684.0, 189405.0, 30562.0, 254978.0, 52265.0, 7834.0, 8431.0, 0.0], [47579.0, 10164.0, 298092.0, 5213.0, 195578.0, 22565.0, 0.0, 636.0, 1392.0, 48581.0], [148051.0, 2740.0, 267371.0, 25580.0, 488282.0, 50163.0, 10375.0, 8757.0, 28173.0, 46752.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

