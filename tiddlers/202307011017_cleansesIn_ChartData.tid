created: 20230701101710000
creator: Drevarr
modified: 20230705163540310
modifier: drevarr
tags: ChartData
title: 202307011017_cleansesIn_ChartData
type: text/vnd.tiddlywiki


const names = ["F\u00f9gly", "Ryvalia Routbringer", "Grim Breacher", "Valkren Sothur", "Atros Shroudkeeper", "No Reserv\u00e9", "Trodek", "Dizzy Bunnyhopper", "Govinda Ektar", "Violet Stab", "Sister Elonith", "F\u00f9gly", "Elonith Requiem", "Wall Knot", "Legacy Of Mathus", "Sakis Ranger", "Ryvalia Fazebringer", "Drumina", "Charr Surethang", "Bella Sassy", "Latedoctor", "Gestern Yesteryear", "Drevarr Moonwillow"];
const professions = ["Catalyst", "Berserker", "Reaper", "Dragonhunter", "Vindicator", "Vindicator", "Scrapper", "Holosmith", "Vindicator", "Firebrand", "Berserker", "Tempest", "Scourge", "Firebrand", "Berserker", "Druid", "Chronomancer", "Druid", "Berserker", "Firebrand", "Reaper", "Firebrand", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.5, 0.2452], [0.6835], [0.3718, 0.0556, 0.5759], [0.4434, 0.1432], [0.2174, 0.2484, 0.1714, 0.3333, 0.1728, 0.0, 0.0625, 0.2969, 0.2], [0.3089, 0.2143, 0.3827, 0.0465, 0.1406, 0.3594, 0.1833], [0.0162, 0.5319, 0.1957, 0.3854, 0.1714, 0.1667, 0.1605, 0.0, 0.0, 0.0312, 0.075], [0.0217, 0.3917, 0.0, 0.321, 0.0, 0.0469, 0.3281, 0.2083], [0.0897, 0.0, 0.4051, 0.0943, 0.0081, 0.5957, 0.0652, 0.2516, 0.0, 0.0238, 0.4074, 0.0312, 0.1094], [0.5472, 0.2757, 0.6809], [0.0, 0.0, 0.1579, 0.3077, 0.0, 0.6139, 0.4623, 0.1189, 0.6383], [0.8585, 0.3243], [0.413, 0.5159, 0.1714, 0.381, 0.716, 0.0233, 0.2188, 0.375, 0.5667], [0.2703, 0.5106, 0.2174, 0.4204, 0.4048, 0.1975, 0.0, 0.0781, 0.4688, 0.3333], [0.0, 0.1519, 0.2123, 0.1568, 0.4681, 0.5217, 0.4108, 0.0571, 0.4286, 0.1358, 0.0938, 0.2969, 0.3], [0.0192, 0.0185, 0.2281, 0.4231, 0.2222, 0.8354, 0.4858, 0.3378], [0.3491, 0.3162, 0.6383, 0.3696, 0.3981, 0.0, 0.3095, 0.2716, 0.0625, 0.3438, 0.2333], [0.2821, 0.0833, 0.6962, 0.4858, 0.2324, 0.7872, 0.087, 0.2548, 0.0, 0.2963, 0.0, 0.0312, 0.1719, 0.2583], [0.0, 0.0, 0.1404, 0.4615, 0.0833, 0.6582, 0.3491, 0.2432, 0.7447, 0.3696, 0.4236, 0.0, 0.3333, 0.3333, 0.1875, 0.3281, 0.2], [0.0096, 0.0, 0.2807, 0.4359, 0.0, 0.5063, 0.6226, 0.2838, 0.5532, 0.5652, 0.4108, 0.0286, 0.2857, 0.3086, 0.0156, 0.375], [0.0096, 0.037, 0.2632, 0.3974, 0.0556, 0.7848, 0.5755, 0.173, 0.9149, 0.2174, 0.3025, 0.0286, 0.5714, 0.4321, 0.2791, 0.1719, 0.1875, 0.2667], [0.0, 0.0, 0.2105, 0.4359, 0.1389, 0.8354, 0.6981, 0.3243, 0.7021, 0.2826, 0.4204, 0.0571, 0.119, 0.321, 0.0469, 0.4219, 0.2667], [0.0833, 0.8671, 0.783, 0.3405, 0.4894, 0.4783, 0.6019, 0.0, 0.2857, 0.5062, 0.0, 0.0781, 0.375, 0.35]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

