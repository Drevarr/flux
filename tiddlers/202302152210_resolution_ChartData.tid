created: 20230215221053000
creator: Drevarr
modified: 20230705163519382
modifier: drevarr
tags: ChartData
title: 202302152210_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elon\u00edth", "Belvyn Brightblade", "Call Me Ever", "Kosair", "Zaylen Harker", "Ark Darkness", "Sister Elon\u00edth", "Blanco Padre Guard", "Sygaldry Verdandi", "Bella Sassy", "Ravioli Fetabringer", "Johosh The Great"];
const professions = ["Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[225.4472, 1045.384], [795.696, 931.548, 0.0, 74.6266], [314.6947, 319.7093, 389.8435, 8.73, 61.8516, 196.8813, 34.727, 333.5441, 35.8683, 246.349, 100.393], [164.3304, 190.4371, 10.2451, 245.376, 255.7819, 8.6785, 334.3354, 56.7675, 58.5468, 159.6672, 32.923, 267.4697, 35.3644, 210.5492, 0.0, 123.8164], [660.6688, 1768.928, 98.9222, 380.2176], [348.7198, 940.488, 0.0, 218.5661, 0.0, 49.7007, 62.6717, 191.6143, 0.0, 283.9304, 147.0442, 1.2041, 172.9219, 197.508, 44.489, 346.4275, 36.405, 0.0, 35.9667, 74.36, 244.3077, 107.6922, 0.0, 48.2719], [194.2733, 804.9514, 574.1428, 549.486, 197.7384, 234.0412, 101.3459, 247.2132, 252.2765, 65.6552, 404.0525, 504.1709, 408.7536, 81.9, 83.7054, 289.8473, 92.686, 440.6157, 49.9372, 305.5919, 54.1342, 107.6166], [1006.0732, 2423.932, 76.8254, 382.5792, 174.5282, 332.9844, 32.509, 273.196, 17.7858, 59.202, 130.4131, 46.5667, 89.2214, 228.2395, 7.2335, 79.5638, 72.495, 42.5736, 139.4663, 31.405, 252.1481, 80.3158, 193.2599, 47.5839], [1682.1134, 2164.076, 150.8386, 307.1261, 231.231, 371.8806, 144.0907, 308.1912, 18.9297, 261.326, 93.2861, 3.1189, 430.2941, 454.3046, 0.0, 497.2579, 54.99, 38.961, 264.8646, 92.697, 229.5248, 63.1441, 261.0498, 100.049], [1749.0242, 2786.3, 108.4306, 748.273, 259.5824, 804.9867, 181.8787, 253.0085, 23.7082, 224.7284, 197.7864, 379.8557, 434.5176, 338.6448, 123.0975, 44.8254, 284.3725, 36.399, 379.6884, 241.758, 23.2501, 122.5224], [2124.87, 3999.756, 167.7571, 456.9696, 442.519, 599.3925, 208.1386, 261.383, 0.0, 346.0626, 255.5266, 0.0, 450.1968, 467.7134, 30.498, 469.8576, 86.355, 23.3928, 279.0018, 60.665, 458.7502, 88.6166, 156.7764, 101.3758], [1764.9984, 3825.724, 180.9259, 850.4122, 659.5204, 708.1578, 109.7995, 287.2273, 145.2199, 331.2322, 239.4811, 106.2012, 434.7245, 560.9227, 442.1357, 86.265, 62.3538, 221.5867, 92.169, 386.5711, 84.5458, 266.9106, 43.756, 98.2964]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

