created: 20230412220340000
creator: Drevarr
modified: 20230705163525431
modifier: drevarr
tags: ChartData
title: 202304122203_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Zadie Miststep", "Johoshua", "Fribble Bibble", "Demon Staph", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Tempest", "Scrapper", "Scrapper", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[173.9524, 0.0, 20.235, 203.8449, 119.5071, 71.0696, 576.0607, 0.0, 392.95, 0.0, 384.9562, 0.0, 204.1978, 113.3251, 0.0, 376.124, 0.0], [351.793, 69.3531, 19.1267, 215.9871, 408.8276, 37.4556, 693.2255, 18.142, 985.42, 26.763, 237.3581, 43.753, 81.5146, 83.1646, 282.4889, 27.2563, 69.8544, 189.756, 908.6256], [1240.658, 103.0838, 120.4155, 799.533, 287.4311, 455.9019, 1317.6286, 5.2264, 1686.93, 105.798, 462.9005, 49.1357, 373.7146, 274.3138, 41.3497, 547.2604, 56.5085, 219.3091, 304.3354, 4170.8952], [1681.8784, 71.148, 52.236, 890.5995, 679.3718, 556.7439, 1905.5963, 2530.54, 195.195, 765.9302, 29.6965, 249.7651, 481.9718, 135.1231, 276.7481, 37.7395, 152.1245, 69.0984, 4096.2024], [1949.1465, 115.1951, 21.2582, 1219.4679, 1278.3242, 626.1808, 2693.6015, 77.3808, 2540.11, 196.383, 769.0637, 91.7572, 28.3046, 536.3323, 280.669, 903.0935, 254.9837, 219.0499, 162.2074, 4620.6936], [2003.2425, 181.104, 582.7237, 2003.0514, 2255.1647, 649.1344, 3537.3316, 313.1892, 2485.3, 145.728, 211.0502, 119.427, 175.6858, 302.5142, 423.8573, 1219.2356, 139.6886, 519.2554, 191.7216, 4184.4384], [2079.8222, 222.1273, 287.6104, 1310.4315, 873.7479, 1004.8665, 2901.0215, 80.182, 3745.64, 444.312, 911.4394, 139.59, 573.143, 863.9078, 275.5817, 1162.817, 285.5059, 319.6973, 371.1658, 6837.6744]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

