created: 20230916220103000
creator: Drevarr
tags: ChartData
title: 202309162201_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Austinyaj", "Meme Soulmessor", "Lord Erin The Wise", "Etcherii", "Sofya De Nova", "Arch Wells", "Such A Brets", "Etchery Howls", "No Reserv\u00e9", "Aira Draugr", "Arlyss Phury", "Belvyn Brightblade", "Mistwalker Cael", "Ax Axun", "Regis Hawkesburne", "Tegan Parker", "Tribal S", "Venomina The Fierce", "Tootsie Pop Rocks", "High Sorcer Baradun", "Cedryn X", "Crusader Siolith", "Xanvias Einzbern", "Sub Train", "Sana Minatozak", "Gabe Malhorn", "Rina Of Theros", "Ryvalia Fazebringer", "Anja Starkin", "Arcanophage Farra", "Bella Sassy", "Glorious Gluvs", "Drevarr Moonwillow", "Jimbo The Plug", "Zori Fizbow", "Oo Dads Mad", "Koralia Danai", "Leafzely", "Zaedy Zae", "Revenant Brandorf", "Be\u00eb", "Mort\u00e4rion", "Keypek The Drunk"];
const professions = ["Dragonhunter", "Reaper", "Weaver", "Firebrand", "Weaver", "Reaper", "Mechanist", "Druid", "Vindicator", "Herald", "Vindicator", "Firebrand", "Vindicator", "Vindicator", "Berserker", "Tempest", "Druid", "Spellbreaker", "Scrapper", "Tempest", "Berserker", "Firebrand", "Berserker", "Firebrand", "Scrapper", "Firebrand", "Reaper", "Chronomancer", "Druid", "Spellbreaker", "Firebrand", "Berserker", "Scrapper", "Reaper", "Vindicator", "Berserker", "Firebrand", "Scrapper", "Druid", "Vindicator", "Reaper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[22683, 14771, 0, 249, 573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 509, 109], [2892, 3066, 2098, 4233, 4783, 8401, 6319, 2708, 2715, 2582, 2535, 1940, 1409], [11726, 2, 1088, 0, 571, 8807, 1786, 1045, 6413, 0, 7867, 2901, 2798, 1248, 651, 0, 4419, 5381, 271, 0], [2198, 0, 1255, 4268, 1329, 1492, 4161, 1097, 3464, 83, 5897, 13209, 5678, 2716, 3287, 5227, 1852, 845], [46938, 0, 2024, 269, 3337, 7114], [39806, 19181, 4795, 507, 0, 500], [34591, 23224, 0, 0, 0, 2465, 5948, 2930, 6268], [35490, 49885, 0], [43927, 45871, 478, 3152, 0, 2183, 540], [42293, 51074, 0, 519, 0, 0, 3639], [7479, 16985, 5480, 9847, 8539, 1265, 12109, 8001, 2620, 6977, 5609, 12770, 0], [44608, 52209, 1712, 3506, 443, 1333], [30809, 45227, 0, 1247, 0, 2948, 2873, 2970, 6400, 7024, 0, 3488, 1046, 2798, 0], [30323, 44235, 507, 650, 0, 538, 1864, 6372, 0, 3048, 0, 3857, 0, 5746, 2708, 0, 0, 2761, 2554, 6825, 373], [29423, 33213, 0, 1123, 0, 963, 537, 4586, 9997, 5629, 167, 2834, 0, 2816, 10874, 1490, 3273, 4846, 2877, 269, 507], [0, 0, 2343, 4145, 13760, 5181, 12625, 8295, 1809, 10954, 5711, 12516, 14488, 6380, 5678, 1881, 4665, 5461, 621], [43185, 34725, 0, 0, 0, 600, 506, 3267, 3533, 5711, 0, 2948, 622, 2798, 9517, 2948, 5914, 2803, 2903, 269, 0], [18794, 3480, 2161, 1740, 0, 12615, 9296, 13711, 12282, 1265, 11683, 5354, 2575, 13166, 2948, 10702, 1002], [42924, 64496, 33, 2263, 0, 305, 2620, 4583, 797, 3972, 3877, 558], [41202, 36152, 0, 0, 0, 0, 2803, 8690, 9261, 7387, 0, 0, 0, 6424, 7065, 0, 758, 4473, 1078, 2953, 438], [27974, 48378, 3152, 3278, 0, 0, 5047, 1873, 2871, 5782, 2735, 2715, 3067, 5200, 8462, 0, 0, 4003, 5464, 4557, 3734], [34132, 43083, 507, 0, 0, 2948, 6426, 1561, 9452, 3413, 0, 10209, 2948, 6302, 6142, 2938, 3188, 5732, 2918, 776, 0], [45909, 32447, 0, 0, 0, 3941, 4683, 7309, 1447, 3093, 511, 4135, 6948, 11533, 16083, 3547, 6080, 5727, 2537], [48669, 46026, 0, 0, 0, 596, 6174, 3573, 4448, 7470, 1201, 4882, 6413, 2748, 12246, 0, 1138, 6693, 0, 3374, 2953], [120412, 52482, 1923, 0, 8502], [55033, 66303, 0, 583, 776, 4665, 1737, 3700, 3751, 2672, 5861, 0, 6539, 11520, 786, 2966, 9206, 8107, 5584, 1317], [78846, 61743, 1904, 4336, 0, 0, 6972, 6995, 7966, 715, 0, 6253, 5, 6885, 1012, 2002, 3002, 3007, 37, 1692, 3383], [75499, 65747, 1019, 2387, 698, 2639, 12380, 7741, 7449, 126, 1937, 6669, 0, 3772, 10535, 610, 5520, 4401, 5762, 3500, 2269], [127234, 72243, 1055, 3356, 2209, 9185, 9319], [68182, 76212, 3708, 1906, 0, 2930, 8279, 7892, 4686, 7336, 1179, 9783, 4459, 2798, 5469, 3462, 5288, 10326, 5846, 269, 1029], [84321, 74749, 2580, 1446, 0, 3875, 15639, 8568, 8653, 800, 3471, 4902, 2096, 7844, 16072, 610, 5908, 5544, 608, 1110, 1122], [85196, 76480, 590, 7593, 0, 1763, 9466, 7053, 12281, 6516, 6784, 6474, 6342, 3730, 8819, 114, 2940, 3202, 3304, 3779, 741], [77376, 71509, 1438, 5378, 0, 3333, 8873, 9542, 8757, 4090, 4412, 7951, 3967, 8173, 17041, 4942, 9391, 6532, 2024, 7612, 1180], [291736], [122890, 175204, 3561, 1630, 189], [92074, 153866, 1523, 1189, 0, 11566, 16924, 12247, 6409, 4997, 2493, 11978], [91215, 109552, 603, 1929, 4243, 12014, 5226, 8876, 7125, 3866, 14908, 6979, 10986, 15009, 5107, 9802, 0, 2918, 3484, 1800], [166884, 31073, 8, 0, 0, 8623, 20780, 13409, 74, 3, 10066, 12108, 1889, 0, 8403, 0, 3688, 12743, 7883, 10074, 8014], [126279, 137706, 0, 2993, 0, 398, 3669, 3782, 3246, 2807, 248, 5273, 6444, 4057, 15239, 5273, 5810, 8597, 2920, 6688, 1369], [121553, 140520, 275, 1590, 960, 15866, 3582, 7461, 5730, 2076, 13847, 5192, 10667, 12112, 3240, 13669, 531, 2721, 1066], [83819, 145914, 587, 5210, 1921, 6585, 17462, 5794, 13272, 8875, 0, 16262, 9966, 5504, 7121, 7039, 10493, 7534, 3358, 4449, 2549], [194875, 104463, 6406, 26165, 11109, 31288, 13093, 18021, 2054, 5103], [204282, 172229, 1130, 17810, 385, 5918, 21646, 20333, 12140, 18791, 13849, 4150, 10286, 24446, 85056, 19747, 16948, 8632, 7761, 23761, 13617]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

