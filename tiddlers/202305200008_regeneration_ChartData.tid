created: 20230520000848000
creator: Drevarr
modified: 20230705163530799
modifier: drevarr
tags: ChartData
title: 202305200008_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Air One Com", "Needragee", "Stoic Rapidfire", "Tegan Parker", "Miphest\u00f6", "Cat Wigglebooty", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[59.148, 1075.2714, 0.0, 99.6706, 15.0041, 79.6567, 0.0, 11.5825, 24.0434, 70.0321, 146.5015, 238.3128, 85.8773, 13.2701, 0.0, 74.0439, 135.4046, 8.037, 0.0, 21.201, 12.591, 137.1084, 15.1975, 184.3128, 11.1523, 20.2418], [120.6702, 102.3448, 452.9448, 56.0196, 119.548, 0.0, 156.9225, 129.9813, 69.7469, 204.1552, 229.68, 202.4184, 76.9488, 94.564, 294.8232, 264.6088, 106.4691, 0.0, 111.5224, 121.4778, 202.4107, 0.0, 286.3224, 46.8796, 203.7818], [633.933, 995.6021, 273.6816, 67.6565, 294.147, 650.0428, 312.1317, 125.959, 0.0, 210.9395, 98.0624, 483.5708], [0.0, 1753.5609, 44.2109, 269.61, 0.0, 129.4894, 6.1644, 62.3844, 23.408, 155.3416, 157.271, 312.444, 140.5349, 114.6614, 0.0, 91.9632, 138.84, 80.4123, 0.0, 0.0, 105.5032, 25.4712, 166.6394, 25.7974, 372.5669, 107.7607, 0.0], [63.8703, 2158.2288, 16.2149, 241.457, 10.7617, 250.4845, 73.2336, 24.5513, 36.9178, 42.8992, 202.7626, 545.1336, 294.132, 18.3485, 21.432, 89.5965, 157.9442, 79.1433, 0.0, 28.725, 13.8758], [14.8824, 2071.7613, 50.3798, 231.3538, 0.0, 44.6732, 0.0, 7.5577, 280.4947, 27.581, 122.6416, 234.3528, 501.7382, 2.5171, 0.0, 139.9734, 426.0721, 67.7646, 0.0, 86.108, 20.5568, 569.4393], [472.8024, 3499.8201, 208.6308, 1286.0681, 159.0498, 485.302, 155.166, 341.6608, 359.6138, 400.1483, 1104.3318, 798.2568, 823.0138, 264.4522, 154.9355, 546.4372, 752.7694, 402.1038, 158.5049, 269.3926, 243.5981, 987.6199, 168.9036, 870.6365, 363.5281, 511.7095], [571.923, 8328.1653, 292.6186, 1309.9073, 223.112, 746.42, 99.1584, 681.3539, 598.6094, 407.6037, 1275.2502, 1375.0704, 1212.6576, 359.904, 468.8955, 806.098, 1156.1344, 536.8293, 93.7535, 21.0355, 431.7438, 434.7763, 949.8272, 107.2054, 1409.9736, 286.4194, 791.7916]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

