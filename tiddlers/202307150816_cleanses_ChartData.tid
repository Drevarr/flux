created: 20230715081630000
creator: Drevarr
tags: ChartData
title: 202307150816_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Briezzia", "Bae Ken", "Erin Celes", "Alfir Strom", "Wix Myschief", "Legoh Brave", "Drevarr Moonwillow", "Zevikah", "Elonith Primal"];
const professions = ["Druid", "Scourge", "Herald", "Druid", "Scrapper", "Tempest", "Scrapper", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0685, 0.1565, 0.4, 0.075, 0.1546, 0.0, 0.0196, 0.2083, 0.0, 0.0299, 0.0, 0.0132, 0.0, 0.3871, 0.4135, 0.0], [0.0204, 0.0051, 0.0813, 0.0, 0.1228, 0.1034, 0.0794, 0.0769, 0.0899, 0.0333, 0.0619, 0.2149, 0.0616, 0.2522, 0.1467, 0.0875, 0.0, 0.0928, 0.092, 0.0, 0.1181, 0.069, 0.2388, 0.0, 0.1126, 0.1609, 0.0753, 0.0673, 0.0526], [0.0058, 0.0303, 0.131, 0.0, 0.0, 0.1647, 0.0, 0.025, 0.0424, 0.0, 0.0303, 0.0, 0.0187, 0.045, 0.0175, 0.1034, 0.1429, 0.0692, 0.0337, 0.1, 0.1649, 0.2562, 0.0753, 0.2261, 0.1333, 0.1375, 0.0, 0.0103, 0.0115, 0.125, 0.0862, 0.2687, 0.0, 0.0993, 0.1264, 0.1505, 0.2404, 0.2632], [0.281, 0.0, 0.887, 0.16, 0.05, 0.0, 0.0206, 0.0, 0.0, 0.2917, 0.0, 0.1493, 0.3472, 0.2914, 0.1494, 0.4731, 0.0, 0.0263], [0.0476, 0.9512, 0.16, 0.3059, 0.0972, 0.0, 0.0678, 0.0, 0.0625, 0.2072, 0.0, 0.2069, 0.3492, 0.0923, 0.382, 0.15, 0.2268, 0.5207, 0.4178, 0.5478, 0.56, 0.0, 0.0244, 0.2371, 0.0575, 0.0588, 0.6111, 0.0862, 0.5597, 0.0, 0.2781], [0.0833, 0.075, 0.4831, 0.1633, 0.2879, 2.0952, 0.8688, 0.9009, 1.2807, 1.3793, 1.4444, 0.4077, 0.764, 0.7333, 0.9072, 0.6942, 0.6918, 1.1565, 1.1467, 0.7125, 0.8351, 0.2184], [1.0, 1.561, 1.08, 1.2118, 0.3681, 0.225, 0.7458, 0.0408, 0.3131, 0.6, 0.8378, 1.1404, 0.8621, 1.1429, 0.8846, 0.7303, 0.8667, 1.3814, 1.562, 1.0753, 1.7652], [1.2793, 0.7895, 1.4138, 1.3016, 0.5615, 0.7528, 0.3, 0.7938, 1.5372, 1.2877, 2.1913, 1.84, 1.825, 0.0, 0.8866, 0.4598, 0.0784, 1.8542, 0.5172, 1.5672, 0.625, 1.3775, 2.0575, 1.3226, 2.4519, 1.7105], [0.2456, 0.3788, 0.4286, 1.1, 1.4588, 0.4236, 0.075, 0.8051, 0.0612, 0.1566, 3.4286, 1.175, 1.1532, 1.0175, 1.7069, 2.0317, 1.0846, 1.427, 1.2167, 1.5258, 1.8512, 1.3904, 2.3043, 1.6933, 0.5375, 0.0488, 1.4639, 0.3333, 0.2745, 2.2361, 0.5345, 2.4254, 0.8889, 1.9934, 1.1954]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

