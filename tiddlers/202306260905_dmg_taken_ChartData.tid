created: 20230626090515000
creator: Drevarr
modified: 20230705163539092
modifier: drevarr
tags: ChartData
title: 202306260905_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Illusive Heart", "Charr Surethang", "Traidoruns Maximus", "Gestern Yesteryear", "Elonith Requiem", "Drevarr Moonwillow", "Yngvar The Burdened", "Gamora Titus", "Louie Runesoldier", "Brace Stonebrow", "Latedoctor", "Koralia Danai", "Koralia Danai", "Utopia Skye", "Govinda Ektar", "Drev Of The Dead", "Urilstormwalker", "Vesnan", "C H A R C O A L", "Smol Gluvs", "Necrotic Windrunner", "Vesnan", "Necrotic Windrunner", "Charr Surethang", "Geradenil", "Roywarr", "No Reserv\u00e9"];
const professions = ["Chronomancer", "Berserker", "Firebrand", "Firebrand", "Reaper", "Scrapper", "Scourge", "Dragonhunter", "Tempest", "Firebrand", "Reaper", "Firebrand", "Dragonhunter", "Tempest", "Vindicator", "Reaper", "Firebrand", "Scourge", "Scourge", "Reaper", "Reaper", "Reaper", "Scourge", "Spellbreaker", "Vindicator", "Berserker", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 20.6429, 3433.7667, 825.4561, 1051.4202, 72.9355, 2322.6122, 1172.0682, 553.6667, 2870.7143, 780.1633, 740.6197, 1509.6471, 2268.1167, 42.122, 1001.9565, 961.4792, 94.5417, 218.5806, 49.5, 460.0907, 271.9569, 409.0345, 1888.1972], [0.0, 3163.7097, 2225.2182, 159.322, 2361.82, 1043.6304, 4534.3043, 2004.1587, 1046.463, 1096.5417, 1716.4521, 1079.5537, 61.7533, 1020.0923, 963.2966, 432.3288, 106.6571, 84.1304, 619.7681, 178.8692, 675.4242, 2599.5091], [27.0556, 3097.1, 1661.7761, 951.9607, 66.5167, 2188.0, 804.8602, 4242.1667, 1270.0833, 381.6667, 1132.4306, 767.0155, 100.3203, 959.0513, 846.2526, 350.4923, 9.2, 226.6667, 488.6674, 334.2586, 184.129, 1776.8889], [58.0, 179.7931, 3608.32, 1017.2252, 1115.12, 119.5167, 1716.4889, 458.1398, 3553.0, 4843.1923, 614.4259, 724.5139, 852.5479, 727.748, 60.8667, 813.758, 827.2197, 217.7746, 0.0, 118.68, 333.1555, 271.307, 264.2, 1547.6769], [1216.4886, 222.0, 2124.5957, 906.7386, 3488.5357, 2028.3529, 565.3704, 798.4167, 1081.9315, 699.697, 96.2547, 1005.4112, 946.9161, 536.1486, 0.0, 190.44, 578.3758, 789.9318], [69.7458, 2153.381, 739.5253, 4044.7917, 1431.0625, 424.4444, 838.0857, 1438.6712, 1032.1508, 4.7073, 1070.604, 894.314, 183.1408, 196.3871, 110.72, 456.3629], [57.3667, 2258.8537, 1134.2381, 1067.6857, 1407.6122, 924.5926, 700.2222, 945.025, 49.0241, 840.5828, 827.878, 349.7662, 0.0, 61.0, 611.1678, 275.3217, 370.4516, 1546.6774], [0.2941, 171.4737, 2788.129, 941.5048, 1219.7386, 216.8644, 2558.7826, 752.4941, 1597.6512, 635.5385, 684.7042, 512.3415, 64.8063, 1800.6154, 844.4741, 436.8052, 0.0], [727.2037, 868.5211, 590.784, 130.0702, 810.8247, 1065.3004, 503.8939, 0.0, 194.48, 596.8855, 78.8991], [3481.2353, 753.7636, 46.5649, 811.7594, 822.188, 110.0405, 0.0, 132.4091, 484.1344, 89.7281, 330.3871, 1601.027], [96.6078, 1086.5758, 660.8986, 445.0714, 0.0, 119.3636, 575.6393, 286.8487, 121.2903, 1684.7917], [47.0833, 2431.8611, 1077.5119, 3208.7241, 2538.1667, 2718.7297, 765.6154, 59.032, 765.7068], [938.8333, 651.0268, 76.7027, 13.175, 154.6957, 555.067], [93.9098, 1038.3851, 797.3467, 219.0423, 67.0732, 79.6111, 492.568], [23.9111, 1815.1282, 1061.5556, 4548.25, 1025.1429, 451.5, 451.6693, 148.4776, 0.0, 216.12, 403.34, 91.3694, 99.5, 1077.1061], [0.0536, 22.1778, 4403.0833, 1062.2655, 1334.6935], [908.4545, 153.4054, 0.0, 430.1546, 273.6842, 16.8065, 960.0824], [89.0352, 1957.7273, 972.6573], [646.0, 1036.3611, 950.8673, 232.9524, 527.4638, 100.8281, 2.1923, 1944.5915], [244.2833, 2203.7674, 286.5686, 6400.5882, 3186.0, 2217.02], [22.9639, 955.9187, 979.9733], [52.4655, 2597.9286, 2135.2708, 3540.9706, 989.2174], [214.0141, 223.4211, 681.2917, 574.6576, 148.0174, 672.8667, 1490.5373], [1666.7604], [146.0896, 153.3023, 150.08, 349.73, 79.3091, 43.9032, 1531.0303], [305.0909, 1147.0943], [810.7917, 727.487]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

