created: 20230520000848000
creator: Drevarr
modified: 20230705163530732
modifier: drevarr
tags: ChartData
title: 202305200008_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Grilo Gringo", "Paul Bjart Mist Cop", "Stoic Rapidfire", "Binkety Bonk", "Lucky Leipreach\u00e1n", "Kosa\u00efr", "Cyclotechnist Farra", "Lord Erin The Wise", "Aronorf Xideliesi", "Cat Wigglebooty", "Drevarr Moonwillow"];
const professions = ["Dragonhunter", "Scrapper", "Druid", "Scrapper", "Scrapper", "Weaver", "Scrapper", "Weaver", "Firebrand", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[106.6095, 592.5906, 26.2181, 343.625, 26.3554, 28.1882, 17.2524, 79.3333, 38.2554, 133.505, 185.68, 70.3296, 327.2045, 52.8154, 22.889, 138.2153, 170.0937], [117.2943, 632.1735, 76.399, 11.9246, 95.0721, 27.5616, 67.7061, 37.0181, 19.8404, 210.9325, 133.2144, 252.0734, 58.9978, 31.913, 97.1699, 191.2088, 35.7858, 17.3502, 0.0, 62.9341, 15.9636, 177.2741, 19.7099, 163.0608, 36.64, 61.0402], [251.7606, 566.2157, 229.3229, 43.005, 498.7651, 465.621, 73.4751, 63.4473, 16.0358, 97.1766, 42.3663, 372.302], [188.1765, 420.493, 164.0102, 61.9695, 194.4075, 402.5272, 71.8254, 73.2564, 13.1482, 123.0926, 107.7305, 304.6267, 32.5802, 278.9808, 109.5637, 187.8401], [167.427, 373.5396, 54.6424, 231.6943, 16.4291, 151.0709, 0.0, 77.6786, 67.1141, 0.0, 255.31, 136.224, 244.1064, 78.8256, 35.6965, 161.0032, 126.8581, 71.3601, 28.6335, 23.4778, 60.8942, 37.741, 196.3463, 35.9291, 169.3205, 59.0335, 58.6804], [84.1905, 1091.7963, 40.5052, 244.295, 32.9402, 80.4747, 15.9192, 49.1473, 57.8512, 42.8177, 148.2655, 108.6624, 39.6499, 63.4138, 0.0, 93.1127, 180.5675, 69.8796, 23.9096, 30.9316, 194.8521, 36.5393, 150.155, 90.2866], [110.7117, 927.3159, 21.8698, 237.1433, 7.9934, 47.3788, 35.3364, 67.4378, 59.3894, 0.0, 230.336, 89.6544, 185.6506, 51.0269, 0.0, 76.8163, 176.5455, 56.2167, 26.2805, 27.9893, 70.9531, 205.9263, 15.1407, 139.0267, 39.8454, 99.3214], [155.9313, 993.0312, 47.2954, 349.074, 27.2563, 102.3708, 31.9572, 88.5009, 60.493, 81.1541, 234.6995, 150.7176, 209.5517, 35.1514, 32.054, 0.0, 204.5314, 69.2451, 45.3033, 12.1728, 65.3752, 43.3299, 205.2231], [142.9092, 1002.2544, 0.0, 171.4152, 0.0, 71.0996, 0.0, 44.3175, 47.0166, 0.0, 182.7091, 185.0112, 328.1309, 65.5997, 12.1965, 47.1988, 224.222, 67.3416, 0.0, 29.5526, 77.5808, 32.0236, 305.9451, 25.8258, 178.1304, 82.8295, 143.0039], [175.2975, 1390.0131, 85.5943, 492.1092, 52.6617, 104.5101, 18.876, 53.6193, 52.7683, 107.9203, 311.4782, 442.5696, 402.984, 50.1658, 26.7195, 277.5801, 383.423, 154.395, 49.0455, 133.9606, 92.088, 228.1624], [279.7605, 3004.0731, 158.2081, 709.0459, 128.6649, 339.9568, 84.216, 389.2429, 207.4283, 144.5048, 628.2483, 653.4792, 574.0901, 178.7155, 162.385, 480.9811, 443.668, 347.3253, 64.5246, 37.271, 173.9214, 181.3174, 523.6486, 76.5267, 558.9662, 170.89, 454.7072]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

