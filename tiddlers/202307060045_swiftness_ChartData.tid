created: 20230706004528000
creator: Drevarr
tags: ChartData
title: 202307060045_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Stoic Rapidfire", "Mike The Archmagus", "Zaedy Zae", "Legacy Of Mathus", "Ryvalia Fazebringer", "Grasszanine", "Primal Clone", "Johosh The Mighty", "Eibh\u00ebar", "Sygaldry Verdandi", "Tika Fiery", "Tegan Parker", "Solus Sanctus", "Newtype Khan"];
const professions = ["Druid", "Tempest", "Druid", "Berserker", "Chronomancer", "Berserker", "Chronomancer", "Berserker", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[34.5345, 22.248, 18.4875, 49.257, 17.8959, 36.0526, 0.0, 8.534], [93.5456, 0.0, 102.8813, 24.5496], [0.0, 0.0, 0.0, 0.0, 46.6245, 0.0, 65.3692, 31.8123, 34.6086, 0.0, 43.4025, 0.0], [64.4061, 49.4374, 32.009, 0.0, 0.0, 12.744, 0.0, 20.0655, 3.4626, 17.3568, 25.65, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 23.484, 0.0, 0.0, 14.877, 176.4664, 19.0013], [10.9683, 19.6518, 9.7376, 28.9422, 16.7602, 154.896, 65.8793, 43.6527, 4.4805, 35.612, 37.3725], [76.3715, 15.5501, 36.9267, 5.8682, 76.0207, 48.06, 36.2993, 9.711, 36.5835, 78.0548, 57.735], [49.1869, 68.7898, 4.6893, 66.5595, 42.4613, 52.02, 72.3435, 1.9071, 12.5106, 81.36, 103.1175], [80.7011, 41.3254, 71.9821, 43.3667, 59.241, 54.9, 46.8053, 60.3369, 14.2419, 105.0053, 75.7688, 56.6994], [68.8406, 84.3482, 85.6038, 63.7526, 48.7792, 112.728, 91.443, 48.6603, 30.9546, 76.1903, 100.6875, 0.0], [55.2483, 61.2934, 25.84, 82.8326, 61.7662, 103.368, 95.2043, 75.9447, 40.4724, 104.8866, 51.345, 102.3013], [49.2394, 87.9507, 125.0438, 102.8878, 83.9378, 88.44, 161.7082, 66.0465, 47.5281, 119.5992, 116.2688, 27.6658], [75.2301, 87.5098, 108.8435, 66.6274, 117.2827, 151.368, 103.5555, 98.8065, 79.9791, 191.4163, 38.0138, 0.0], [135.6083, 102.4358, 152.1677, 140.6154, 107.6498, 91.704, 201.8963, 122.3937, 51.7128, 214.2311, 51.66]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

