created: 20230311223557000
creator: Drevarr
modified: 20230705163521804
modifier: drevarr
tags: ChartData
title: 202303112235_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Lechen", "Morton Saltbringer", "Primal Clone", "Minnie Marshmallow", "Black Raspberry Pie", "Ryvalia Fazebringer", "Smol Daddy Tika", "Xanvias Tseli", "Zaylen Harker", "Newtype Khan", "Sheep Paws", "Koralia Danai", "Sygaldry Verdandi", "Blanco Padre Guard", "Bella Sassy", "Venomina The Fierce", "Johosh The Great", "Aronorf Xideliesi", "K\u00f4sair"];
const professions = ["Soulbeast", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[206.5455, 10.3403, 0.0, 5.1278, 16.3827, 20.6388, 48.944, 25.9829, 31.113, 72.663, 84.8588, 0.0, 8.004, 5.2668, 5.2584, 5.3298, 0.0, 9.4116, 5.3827], [229.4397, 10.856, 0.0, 6.9651, 26.1144, 60.271, 36.7506, 24.3437, 78.4452, 77.805, 0.0, 5.1759, 3.9312, 12.0301, 3.4178, 13.604, 7.9632], [267.2649, 4.8852, 6.4986, 5.3213, 13.0964, 29.4138, 68.2419, 36.3994, 26.6869, 108.1271, 113.9288, 13.0613, 11.3657, 4.8048, 0.0, 12.6139, 16.9837, 0.0, 36.1215, 16.5766, 22.33, 29.376], [307.0809, 7.3821, 7.4196, 0.0, 7.4556, 22.3236, 92.4342, 43.1878, 46.6044, 100.4175, 145.5637, 7.1685, 7.1502, 0.0, 16.4304, 0.0, 0.0, 33.454, 0.0], [287.6706, 7.0021, 7.0615, 2.451, 14.0283, 36.9954, 79.569, 24.1102, 59.8828, 107.7417, 104.9513, 15.4305, 11.259, 0.0, 0.0, 8.6038, 2.2907, 13.6896, 7.0762, 22.7304, 36.624], [284.1867, 14.8456, 16.1697, 7.482, 15.0583, 34.047, 76.6323, 47.9864, 31.113, 120.077, 104.31, 7.4722, 4.1621, 0.0, 2.2848, 7.3602, 6.6028, 15.0158, 7.5802, 18.5232, 33.0165, 18.0835, 29.8452, 40.992], [293.643, 0.0, 0.0, 52.0192, 14.9602, 12.7764, 177.8765, 14.9811, 8.9824, 126.052, 169.7175, 51.273, 16.7017, 23.2848, 34.263, 0.0, 14.4169, 0.0, 10.6488, 7.7625, 0.0, 85.7164, 46.56], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 245.91, 371.2172, 565.155, 69.4373, 15.1009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [564.3918, 35.3634, 0.0, 0.0, 6.7689, 35.5212, 130.191, 26.9192, 40.486, 139.7365, 215.2463, 16.4025, 18.5693, 0.0, 6.72, 17.4361, 28.7909, 0.0], [434.4921, 0.0, 18.5747, 18.6405, 19.0804, 63.3906, 116.9062, 37.921, 105.0553, 237.8412, 175.0612, 19.0147, 39.8066, 0.0, 2.9736, 25.8876], [456.3909, 35.7705, 0.0, 7.9013, 18.0504, 100.4562, 222.905, 0.0, 33.4563, 159.5887, 275.9513, 0.0, 32.2828, 0.0, 0.0, 0.0, 0.0, 30.0316, 0.0], [527.562, 5.048, 19.7516, 27.6705, 24.8683, 76.3776, 94.6717, 72.2137, 64.4391, 118.9206, 189.81, 18.5287, 5.7629, 0.0, 4.8552, 7.3602, 0.0, 63.0149, 5.2315, 45.2472, 100.2915, 86.4209, 37.4836, 69.264], [700.7616, 14.3571, 0.0, 51.8458, 47.8062, 88.0992, 51.1465, 30.8527, 165.9491, 154.755, 4.9815, 21.4507, 15.0982, 19.488, 18.9081, 36.4058, 7.8422, 89.5152, 118.5593, 97.4282, 54.1772, 165.216], [785.8683, 7.7078, 5.7822, 5.805, 37.5233, 42.0498, 172.8422, 131.9041, 86.3093, 244.9725, 331.0987, 7.6545, 7.6305, 5.7935, 0.0, 0.0, 54.8012, 7.7616, 25.2868, 99.312], [649.0008, 15.2255, 22.9242, 40.2803, 29.8714, 49.5612, 163.1933, 66.9469, 121.7183, 134.918, 276.5925, 23.2673, 18.4626, 7.5491, 15.708, 28.6286, 0.0, 50.4376, 6.7133, 120.156, 176.7262, 84.8484, 51.436, 188.352], [104.0193, 0.0, 70.3076, 57.8242, 56.4075, 237.3462, 582.993, 117.9763, 236.9276, 94.2499, 553.3988, 0.0, 157.5187, 0.0, 88.3224, 86.1589, 180.0], [840.1176, 30.7496, 29.8321, 23.8005, 39.6814, 91.1898, 199.272, 107.5598, 137.6003, 311.2751, 306.3037, 30.0105, 57.6822, 0.0, 36.6408, 25.9384, 6.0882, 37.0475, 32.3064, 66.912, 93.0982, 56.0196, 75.4292, 60.288], [857.5371, 33.9521, 12.6902, 38.8612, 87.4561, 49.2804, 234.6515, 139.0435, 159.861, 281.9786, 383.6813, 23.328, 50.4252, 8.5747, 5.5272, 25.1516, 3.3933, 74.3944, 10.5134, 125.3376, 159.1313, 136.904, 66.22, 186.624], [1396.5462, 87.3908, 0.0, 0.0, 119.4102, 316.1782, 282.5346, 139.2926, 555.6694, 676.305, 0.0, 0.0, 0.0, 0.0, 0.0, 103.5276, 0.0, 91.8408, 216.8842, 127.3054, 58.058, 223.296]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

