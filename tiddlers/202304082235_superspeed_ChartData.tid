created: 20230408223537000
creator: Drevarr
modified: 20230705163525092
modifier: drevarr
tags: ChartData
title: 202304082235_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Sp\u00edcy Cheese", "Smol Daddy Tika", "Sofya De Nova", "Arcanophage Farra", "Grasszanine", "Skye Nightroad", "The Gun Guardian", "Xanvias Einzbern", "Cat Wigglebooty", "Zadie Miststep", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Berserker", "Berserker", "Weaver", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Berserker", "Scrapper", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 0.091, 0, 0, 0, 0.143, 0, 0, 0, 0, 0, 0, 0.43, 0.389, 0.176, 1.112, 0, 0.166, 0, 0, 0, 0, 0, 0, 1.062, 0.812, 0.626], [0.606, 0.402, 0, 0, 0, 0.256, 0, 0.912, 0, 0, 0, 0.005, 0.621, 0.569, 0, 0.602, 3.3, 0, 3.061, 0, 1.063, 0.37, 0.686], [0.303, 0.453, 0.183, 0, 0.095, 0.121, 0.461, 0.756, 0.647, 0.79, 0.566, 0.01, 0, 0.615, 0.295, 0.274, 0, 0.395, 0, 0.067, 0.093, 0, 0.464, 0.35, 0, 0, 0.489, 0.638, 0.228, 0.376], [0.409, 0.465, 0.161, 0, 0, 0.177, 0.356, 0, 0, 0.405, 0, 0, 0, 0, 0.333, 0.428, 0.574, 3.407, 0.657, 1.015, 1.111, 0.747, 1.669, 0.774, 0, 0, 0, 0, 0, 0, 0], [0.202, 0.366, 0.109, 0, 1.881, 0.184, 0.475, 0, 0, 0, 0, 0, 1.174, 0.9, 0.255, 0.964, 0.459, 0.002, 0.167, 0.557, 1.397, 0.764, 0, 0.603, 0, 0, 0, 1.223, 0.516, 0.913], [0.594, 0.232, 1.405, 1.863, 1.257, 1.002, 1.333, 2.144, 2.226, 0, 1.274, 1.5, 1.527], [0.22, 1.17, 0.813, 0.963, 1.432, 1.87, 3.165, 1.082, 1.035, 1.036, 0.339], [0.606, 0.517, 0.219, 1.778, 0, 0.489, 0.928, 0.7, 1.144, 0.496, 0, 0.857, 1.174, 0, 0.513, 0.788, 0.712, 1.675, 0.823, 0.556, 1.43, 1.237, 1.333], [1.123, 0.453, 0.777, 0, 1.145, 0.801, 1.353, 0, 0, 0, 0, 0.704, 0.846, 1.301, 0.138], [0.726, 0.259, 0.523, 0, 1.13, 0.857, 0.798, 0, 0.646, 0.384, 0.568, 1.032, 1.194, 0.538, 0.384, 0.588, 0.364, 0.379, 0.886, 0.719, 1.004, 0.925, 1.081, 1.98, 1.841, 0, 1.277, 0.832, 0.75], [1.212, 1.035, 0.614, 1.6, 1.748, 1.291, 1.533, 0, 0.971, 0.69, 0, 0.838, 0.704, 0.544, 0.958, 1.772, 1.324, 1.299, 1.439, 2.34, 1.026], [1.961, 1.262, 0.747, 2.528, 2.717, 1.947, 1.756, 1.631, 0.647, 1.17, 1.407, 2.581, 2.117, 2.109, 1.419, 1.773, 1.724, 2.32, 1.673, 1.877, 2.137, 1.768, 2.258, 2.362, 2.9, 3.541, 0.127, 2.753, 1.652, 1.038, 2.541, 2.879]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

