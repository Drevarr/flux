created: 20230426221022000
creator: Drevarr
modified: 20230705163526850
modifier: drevarr
tags: ChartData
title: 202304262210_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Venom The Ferocious", "Raelyn Sunray", "Sister Elon\u00edth", "Lucas Ryn", "Sygaldry Verdandi", "Bella Sassy", "Zaylen Harker", "Jupi Jupi Jupi", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[109.4123, 40.1069, 138.2016, 501.3619, 782.2517], [42.4838, 398.4322, 21.1646, 112.0386, 123.5442, 0.0, 78.4199, 1468.8294], [1424.241, 458.876, 109.4807, 70.1395, 194.0736, 102.2597, 660.0829, 65.9669], [390.5395, 1013.8267, 37.6809, 357.1333, 580.0834, 35.1252, 106.8824, 1910.1566], [14.9665, 72.167, 187.584, 443.6208, 1073.0412, 228.4968, 599.9381, 23.9536, 297.2703, 398.4942, 0.0, 105.3796, 1272.5067], [40.1876, 1619.2722, 504.5751, 63.7612, 106.128, 128.0256, 270.3974, 1929.1516, 38.5862, 822.625, 63.6718, 134.5281, 302.445, 39.7584, 59.1565, 2010.7122], [137.9989, 1590.3108, 606.1778, 186.9099, 130.3949, 163.968, 303.0235, 2015.5523, 441.4032, 1080.4228, 62.0301, 301.6046, 549.6556, 54.9846, 199.6474, 2222.5971], [185.8584, 1606.4412, 534.6344, 170.7817, 159.3504, 80.7552, 399.2587, 2233.8767, 554.2387, 1140.1495, 61.951, 458.2133, 456.0504, 43.7382, 198.2812, 2381.8101], [114.5021, 2143.8768, 900.1158, 180.3493, 264.7814, 152.64, 344.6472, 2277.5416, 454.8499, 1315.3223, 0.0, 544.2459, 563.5864, 0.0, 259.0315, 2605.2669], [101.7315, 2460.6192, 867.6162, 202.8331, 208.3277, 302.4, 399.6499, 2718.371, 389.4677, 1222.2021, 77.775, 533.7781, 653.77, 55.4994, 169.09, 2879.0014], [103.2467, 2340.3744, 644.1124, 177.7523, 309.4502, 155.4048, 517.9488, 2692.3579, 599.3534, 1319.7111, 23.8942, 593.3957, 638.2506, 60.4296, 320.6016, 2770.0663]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

