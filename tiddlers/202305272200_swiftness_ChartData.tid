created: 20230527220043000
creator: Drevarr
modified: 20230705163532116
modifier: drevarr
tags: ChartData
title: 202305272200_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Daddy Demon", "Bravatska", "Mammary Mission", "Tegan Parker", "Be\u00eb", "Kaehln Lao", "Zaylen Harker", "Blanco Padre Guard", "Gravlyn Isshtail", "Crusader Siolith", "Zadey Starbolt", "Johosh Of The North", "Sygaldry Verdandi", "Drevarr Moonwillow", "Venomina The Fierce", "Koralia Danai", "Aronorf Xideliesi", "Lucas Ryn", "Bella Sassy"];
const professions = ["Chronomancer", "Tempest", "Guardian", "Scourge", "Tempest", "Scourge", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Scrapper", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[31.536, 331.614, 125.2951, 8.4717, 27.2412, 61.9164, 68.04, 94.1626, 0.0, 8.7516, 17.9056, 27.9279, 22.8784, 53.4016], [158.112, 126.1855, 90.4465, 121.774, 168.7266, 14.4774, 112.6923, 0.0, 36.6506, 19.8102, 20.1852, 36.0706], [164.3551, 192.375, 305.7913, 0.0, 261.6012, 24.948], [25.9646, 107.892, 105.0601, 23.3728, 186.5153, 116.7768, 150.9354, 184.2876, 0.0, 12.7296, 20.7824, 4.0824, 27.9626, 0.0, 2.5088], [47.6719, 265.923, 42.1697, 40.6754, 158.2888, 134.6814, 31.9032, 119.3255, 0.0, 43.811, 15.8522, 0.0, 104.2965, 4.7526, 82.2528], [92.8204, 0.0, 0.0, 0.0, 4.728, 0.0, 33.405, 29.0142, 61.7251, 211.0793, 25.9121, 180.306, 100.3656, 50.8679, 62.1911, 153.9972, 115.4412, 46.2161, 0.0, 37.4197, 0.0, 0.0, 66.4587, 0.0, 8.512], [0.0, 39.087, 241.2295, 367.1766, 91.2492, 378.0203, 194.4538, 70.2912], [101.0461, 214.6102, 120.1362, 55.908, 105.219, 658.1964, 119.394, 194.9747, 58.9964], [8.6879, 12.4684, 49.1355, 16.908, 240.2198, 105.1668, 8.586, 195.6618, 125.6337, 78.2618, 329.67, 206.4779, 7.0156, 83.4044, 266.8932, 113.0976, 26.1002], [369.6733, 6.3001, 57.6792, 38.4636, 47.376, 185.2497, 144.7812, 0.0, 30.2659, 235.2509, 0.0, 276.777, 353.8697, 39.2193, 149.5948], [175.6875, 47.6715, 73.3074, 115.9441, 0.0, 37.9993, 116.328, 59.3892, 0.0, 52.5311, 44.2555, 391.149, 392.3971, 25.7554, 88.5049, 40.7484, 78.8886, 19.2507, 0.0, 28.1908, 16.8342, 116.6319, 10.8198, 59.2256], [75.4078, 73.4581, 27.7892, 8.3418, 14.772, 17.2515, 145.9602, 55.08, 16.9229, 260.0838, 65.9628, 191.484, 136.5458, 40.5052, 84.9114, 209.2986, 99.3006, 230.7921, 0.0, 109.7663, 21.6554, 3.0164, 133.6797, 30.4877, 97.7984], [59.2074, 20.0195, 0.4612, 14.9918, 19.752, 15.4141, 166.4748, 101.25, 17.3568, 249.2102, 74.3198, 242.919, 96.3995, 45.9135, 100.6186, 205.947, 197.2782, 225.6009, 0.0, 74.5742, 64.9165, 112.2314, 66.5117, 81.8496], [283.5612, 316.467, 253.9897, 46.9535, 205.0045, 456.7878, 185.031, 156.7454, 0.0, 128.8872, 63.9245, 4.3999, 32.1206, 253.3056, 269.92], [75.3612, 34.4211, 77.4578, 55.7855, 29.592, 36.6978, 402.1962, 45.0036, 39.559, 221.9529, 217.4407, 487.539, 201.6215, 22.1814, 199.2085, 166.9626, 49.1778, 239.372, 9.0045, 18.6701, 38.5987, 6.3504, 72.869, 77.4832, 92.0192], [0.0, 11.664, 237.9328, 254.9409, 88.9315, 476.361, 178.5536, 180.4581, 144.1465, 495.5076, 158.1552, 273.7637, 22.9381, 91.0166, 84.6176, 79.6748, 102.3214, 238.9971, 161.7728], [0.0, 88.3181, 163.7289, 106.7086, 0.0, 133.0868, 539.3532, 49.3776, 173.0979, 229.9611, 64.4386, 301.401, 99.2324, 65.6933, 264.4135, 356.1516, 40.824, 298.8545, 0.0, 31.1875, 38.2714, 83.4026, 239.4016, 274.8032], [71.9813, 41.7019, 248.292, 96.7708, 153.0, 0.0, 351.1848, 0.0, 117.9178, 432.2975, 196.4693, 448.578, 395.7966, 121.5535, 291.3649, 561.834, 302.8536, 243.6259, 0.0, 247.8029, 45.3146, 29.3328, 185.1696, 16.9629, 92.6016], [274.755, 77.1464, 253.1256, 38.836, 0.0, 215.7971, 854.4606, 67.878, 72.5008, 394.387, 205.9301, 582.471, 495.9194, 220.6419, 275.8316, 586.4418, 153.5058, 263.6697, 0.0, 201.6316, 100.2912, 36.4468, 382.2935, 27.1507, 274.2208], [67.8554, 117.1214, 160.0908, 49.2526, 0.0, 303.101, 645.699, 100.0026, 264.1126, 339.9457, 142.1748, 760.266, 550.7967, 181.0822, 335.4725, 795.2994, 265.356, 272.1775, 59.0895, 161.0825, 46.5645, 76.9608, 210.7067, 253.1792, 410.9056]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

