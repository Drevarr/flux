created: 20230311223557000
creator: Drevarr
modified: 20230705163521800
modifier: drevarr
tags: ChartData
title: 202303112235_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Zaylen Harker", "Mom You Never Had", "Tegan Parker", "Mac Chiato", "Vopiscus Zergherdus", "Zadie Miststep", "Tribal S", "\u00c1rkantor", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Scrapper", "Tempest", "Druid", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[530.5482, 48.5806, 129.5624, 43.602, 63.9121, 66.9006, 250.1738, 143.257, 375.1788, 269.2578, 434.9812, 87.723, 178.3825, 0.0, 49.0896, 45.887, 41.6745, 26.053, 50.6117, 121.8696, 97.497, 76.4946, 58.4892, 37.92], [1435.8645, 10.0961, 0.0, 85.656, 85.1508, 72.0954, 240.6646, 140.9162, 155.9556, 295.2777, 575.2012, 48.357, 20.2234, 0.0, 17.3376, 13.8321, 74.9078, 0.0], [915.2703, 0.0, 73.1731, 56.6632, 274.2012, 299.817, 552.2236, 843.0448, 1076.445], [1111.8618, 123.3513, 121.5949, 273.078, 554.3258, 440.5386, 506.27, 768.4544, 932.5913, 111.3547, 0.0, 32.7432, 50.963, 0.0, 126.0727, 14.9328, 159.597, 167.4364, 245.1372, 180.48], [2370.0474, 146.4203, 0.0, 49.5037, 157.6467, 339.1362, 786.4602, 430.3561, 321.9351, 919.1771, 1048.0162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 91.8487, 21.7224, 23.0112, 119.9048, 82.1293, 125.664, 85.536], [5394.5703, 197.4164, 13.2019, 7.869, 306.4644, 636.363, 1279.9555], [2850.8256, 64.0775, 122.3475, 0.0, 46.2051, 437.8374, 817.9242, 670.7562, 399.5224, 1422.6139, 1359.2362, 0.0, 125.7162, 75.18, 158.1682, 55.8477, 224.2955], [3335.0877, 62.422, 0.0, 0.0, 136.9476, 320.463, 887.2848, 1121.7114, 704.6643, 1261.0978, 998.4263, 0.0, 0.0, 0.0, 0.0, 171.1628, 0.0, 39.576, 220.7655, 221.1955, 246.8312, 261.024], [4778.4177, 238.6692, 121.3241, 157.0898, 145.4823, 634.257, 1597.8118, 869.3731, 1062.1386, 1971.7302, 2226.42, 164.1465, 336.1146, 80.7668, 188.664, 294.7126, 86.926, 262.5836, 64.5826, 525.312], [7731.7695, 355.6968, 501.7218, 371.1008, 511.3463, 1166.1624, 1837.4976, 1629.3138, 1936.5577, 3303.5636, 3089.115, 291.1748, 584.0252, 145.8072, 139.9104, 276.642, 86.0685, 379.1164, 123.5304, 473.076, 1127.5808, 760.4579, 479.7716, 1186.752]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

