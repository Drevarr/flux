created: 20230626013408000
creator: Drevarr
modified: 20230705163538702
modifier: drevarr
tags: ChartData
title: 202306260134_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Fribble Bibble", "Ryvalia Fazebringer", "Belvyn Brightblade", "Crusader Siolith", "Drevarr Moonwillow", "Traidoruns Maximus", "Gestern Yesteryear", "Tika Fiery", "Sygaldry Verdandi", "Aronorf Xideliesi", "Koralia Danai", "Solus Sanctus", "Bella Sassy"];
const professions = ["Firebrand", "Scrapper", "Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.9043, 10.152, 11.7587, 0.0, 193.8517, 27.395, 0.0, 13.8417, 5.2262], [1.5725, 10.152, 15.251, 0.0, 51.0663, 27.4968, 0.0, 21.8603, 11.9493, 14.2155, 5.4516, 24.6646, 14.3209, 9.045, 17.4096, 16.7076, 21.3812, 11.1722, 14.3519, 22.9435, 11.2941, 22.9134, 19.1553, 21.8266], [0.0, 32.832, 37.5188, 0.0, 135.576, 14.4867, 0.0, 11.5984, 38.9429, 0.0, 0.0, 8.5571, 19.646, 2.4525, 3.2832, 26.6292, 2.5888, 0.0, 0.0, 12.1824, 19.4091, 16.2958, 19.2418, 28.1971, 9.4065, 0.0, 0.0, 48.1318, 28.4271, 0.0, 0.6682, 4.4398], [3.7152, 54.9936, 17.5259, 27.7488, 284.97, 7.1797, 9.6415, 0.0, 5.1414, 16.632, 29.311, 12.8733, 7.8075, 28.296, 22.0194, 46.6936, 17.0829], [86.5753, 6.9686, 2.7146, 21.6623, 9.225, 7.128, 8.2836, 12.0809, 5.9607, 22.0242, 13.1976, 20.664, 16.0063, 53.4014, 47.7658, 32.0602, 38.2536, 125.3471, 28.4271, 31.4515, 16.9222, 45.3108], [19.2326, 31.104, 67.0918, 0.0, 142.7854, 44.6568, 0.0, 36.3703, 5.4799, 3.157, 24.3936, 21.567, 23.1616, 11.9925, 36.504, 18.6732, 61.9385, 0.0, 34.4489, 8.1686, 62.3671, 31.1215, 26.1809, 37.0134, 11.1283, 6.4009, 0.0, 0.0, 8.8849, 23.7949, 15.9831, 12.1544, 12.2537], [151.3728, 43.8628, 3.4538, 118.7542, 7.1033, 22.161, 31.12, 28.6935, 11.2028, 26.2724, 18.0048, 139.6417, 75.1275, 62.0352, 18.2754, 100.1946, 3.1871, 1.4319, 33.8945, 25.5492, 20.3294, 32.2608, 35.4568, 32.7936, 5.4547, 13.8782, 29.7867, 10.1908], [33.2947, 69.3517, 31.5349, 11.708, 25.9028, 46.3478, 31.7955, 28.2825, 37.6272, 34.7256, 212.7577, 18.8312, 29.7792, 99.6588, 45.762, 39.292, 50.8935, 63.5443, 31.6149, 22.4434, 23.0006, 13.7428, 27.5982, 77.5316, 11.6306, 22.3002], [9.0029, 58.2336, 92.0189, 16.0884, 360.468, 21.1318, 12.3201, 41.7638, 8.7019, 4.1312, 5.1436, 42.2435, 17.3195, 58.815, 51.7104, 10.764, 52.734, 8.41, 12.5042, 36.4795, 32.994, 39.4875, 17.9089, 28.5384, 27.8477, 19.5367, 18.1125, 49.2058, 10.0354, 32.5717, 57.6475, 0.3251, 23.2389], [400.7203, 36.8661, 10.7699, 13.6444, 78.137, 29.2622, 12.15, 70.6752, 53.352, 110.0702, 7.6237, 134.2323, 41.7116, 7.5125, 104.4913, 67.2927, 77.3131, 46.2336, 36.179, 5.1842, 22.1163, 102.1522, 33.5645, 65.6842, 43.8647], [16.1222, 54.216, 85.0982, 11.3652, 292.5799, 25.6382, 0.0, 35.3679, 16.2368, 22.983, 48.9412, 97.8067, 78.5323, 31.59, 74.5632, 52.5096, 169.0364, 0.0, 52.3143, 49.3632, 42.2323, 126.1174, 96.617, 25.8575, 71.232, 7.4584, 0.0, 8.5162, 35.4117, 17.6267, 23.6496, 43.7594, 73.3193], [43.5629, 175.824, 57.1914, 60.0437, 673.6746, 66.527, 16.1378, 58.3738, 38.258, 28.2146, 15.5232, 39.6493, 18.7154, 46.98, 82.8576, 37.6272, 60.5003, 88.528, 47.4606, 62.7055, 86.6718, 75.027, 74.6322, 39.1373, 32.4498, 16.905, 8.5064, 38.4159, 40.1539, 61.6568, 18.0058, 54.444], [29.497, 163.9872, 85.1944, 46.7006, 697.7058, 75.4889, 18.3585, 44.5321, 18.4186, 22.9108, 27.6584, 53.5885, 50.3041, 30.6225, 60.4368, 42.4476, 243.0558, 7.7756, 24.4644, 89.879, 103.8221, 96.6583, 77.7023, 55.104, 105.5314, 16.6152, 22.6968, 93.7067, 96.301, 31.4244, 16.9042, 38.1057], [62.3117, 174.3552, 170.1324, 111.9989, 655.451, 167.5777, 140.3427, 36.5612, 13.7252, 7.8654, 17.7408, 97.1872, 57.1285, 8.4375, 93.4848, 13.689, 145.8335, 96.7531, 21.1763, 10.0166, 48.1045, 34.9906, 30.2248, 45.8573, 125.8473, 39.9119, 1.2544, 121.5119, 29.3291, 27.7943, 34.8919, 22.2749]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

