created: 20230625215204000
creator: Drevarr
modified: 20230705163536528
modifier: drevarr
tags: ChartData
title: 202306252152_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Eibh\u00ebar", "Miphest\u00f6", "Black Raspberry Pie", "Primal Clone", "Fribble Bibble", "Drumina", "High Sorcer Baradun", "Arriasa", "Drevarr Moonwillow", "Elon The Mender", "Tribal S"];
const professions = ["Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Scrapper", "Druid", "Tempest", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[19.0421, 16.0759, 0.0, 5.0187, 59.1479, 20.974, 11.0694], [0.0, 17.975, 15.6143, 48.2246, 10.0879, 1.9565, 6.7, 1.9583, 3.0, 0.995, 30.3065, 20.0737, 31.1646, 0.0, 0.0, 19.9718, 3.9935, 0.0], [0.0, 8.975, 25.4571, 61.5507, 38.3407, 25.875, 1.9583, 19.0, 46.175, 8.0323, 6.0211, 20.0127, 0.9722, 0.0, 36.9225], [0.0, 13.9667, 14.0714, 72.3841, 13.0549, 0.0, 10.925, 0.0, 13.0635, 65.875, 1.0, 7.0105, 26.1519, 0.0, 0.0, 24.7465, 0.0, 0.0], [0.0, 41.0833, 16.0143, 47.1739, 49.6374, 0.0, 19.05, 0.0, 54.6984, 70.895, 42.5161, 0.0, 25.1266, 0.0, 1.0, 31.4648, 2.9935, 0.0], [8.0233, 45.6417, 40.1857, 50.2101, 48.6154, 0.0, 23.725, 4.875, 26.0317, 112.695, 3.0161, 0.0, 2.0, 5.9444, 10.0374, 44.2042, 17.4286, 3.0], [0.0, 14.9667, 33.7571, 87.942, 75.2198, 0.9565, 38.125, 4.875, 30.2381, 57.33, 60.4516, 23.2421, 27.1519, 0.0, 1.0, 68.9859, 8.9805, 0.0], [5.9419, 28.575, 17.1286, 89.6159, 62.1758, 43.3, 0.0, 47.619, 99.395, 19.129, 13.2421, 12.0633, 1.9722, 0.0, 54.0704, 0.0], [2.0, 77.625, 50.5429, 139.3986, 93.1978, 0.0, 36.0, 7.5, 45.5714, 169.945, 62.0161, 43.0, 0.0, 2.0, 69.0563, 27.1299, 14.0278], [3.0116, 70.75, 61.2571, 170.8406, 89.5714, 38.6957, 61.025, 27.2083, 48.5238, 130.23, 51.4194, 32.1263, 48.7342, 4.9444, 16.0654, 77.0634, 42.8636, 14.0556], [18.0116, 104.55, 68.0286, 172.7971, 105.3736, 2.913, 125.8, 9.7917, 56.3333, 181.285, 39.1452, 25.1368, 73.1013, 4.9444, 2.0, 138.1761, 19.9675, 6.0], [10.0, 92.4833, 55.5, 185.8913, 109.0989, 83.375, 24.7917, 96.3492, 230.24, 109.3226, 47.7053, 75.6329, 1.9722, 3.0093, 88.5, 19.9805, 9.0139]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

