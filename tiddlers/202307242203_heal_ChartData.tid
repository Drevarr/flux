created: 20230724220321000
creator: Drevarr
tags: ChartData
title: 202307242203_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Sister Elon\u00edth", "Tegan Parker", "Tootsie Pop Rocks", "Klengah", "Zaedy Zae", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Scrapper", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[340.7398, 35.2857, 82.4479, 426.7377, 162.8451, 145.1, 58.8824, 337.5211, 44.7305, 42.8175, 151.2988, 267.9492, 8.0, 39.549, 5.1568, 152.0244, 30.3885], [465.9216, 193.3367, 247.8873, 465.5738, 230.6479, 808.6, 10.5294, 189.662, 84.2199, 210.8029, 330.1155, 410.0137, 226.6559, 86.3529, 71.9568, 64.814, 171.5854, 168.9231], [1417.2633, 506.8776, 379.9972, 437.2623, 37.662, 881.825, 0.0, 1542.1972, 134.1064, 354.3723, 407.9124, 901.1328, 581.7312, 39.1176, 18.3351, 46.7674, 371.6098, 563.3615], [1771.2602, 1133.602, 398.7521, 1162.1475, 735.5493, 1355.8375, 42.9118, 1509.6479, 54.7447, 432.8832, 461.255, 603.1113, 940.4301, 56.2647, 1.8162, 0.0, 347.7398, 489.8885], [1311.605, 1143.1633, 597.431, 1426.1311, 1120.3239, 1950.2625, 0.0, 2031.2676, 302.6312, 751.3212, 915.2271, 1289.2539, 1024.6022, 204.6275, 84.227, 54.4186, 683.0407, 685.0923], [2327.2633, 1466.7245, 842.9183, 2923.1148, 1368.8873, 2876.4875, 23.2059, 2609.8592, 262.0496, 1060.4818, 1509.9602, 2722.9102, 2544.129, 139.2647, 76.3081, 284.8605, 615.065, 935.2885], [3522.6426, 2502.5816, 904.2394, 2699.2623, 1854.0141, 3451.125, 77.8235, 2893.4789, 226.0, 863.9489, 1012.4502, 2417.1328, 2453.2688, 341.1667, 91.8324, 59.1395, 861.6992, 919.8308], [3059.4169, 1845.0, 960.338, 2614.3279, 1922.8028, 2185.65, 1111.9412, 2123.5634, 655.2624, 996.8686, 2026.2112, 2273.7773, 1779.5269, 383.0882, 354.2216, 339.3023, 1145.252, 1005.3192]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

