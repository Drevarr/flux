created: 20230506003334000
creator: Drevarr
modified: 20230705163528652
modifier: drevarr
tags: ChartData
title: 202305060033_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Viral Marketing", "Aronorf Xideliesi", "Zaylen Harker", "Ark Darkness", "Air One Com", "Lucas Ryn", "Bella Sassy", "Solus Sanctus", "Koralia Danai", "Jupi Jupi Jupi"];
const professions = ["Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[55.7278, 430.8507, 0.0, 0.0, 0.0, 0.0, 261.3389, 26.4002, 0.0, 0.0, 2.9309, 0.0, 44.6796, 73.8921, 150.306, 598.4681], [213.9342, 954.1946, 35.4024, 39.7602, 0.0, 0.0, 1663.808], [44.6789, 29.7031, 0.0, 0.0, 885.3597, 239.422, 225.1394, 56.4102, 26.7907, 41.55, 471.9708, 68.4169, 512.958, 1251.4316], [638.6917, 1418.7504, 205.7094, 45.7209, 0.0, 2219.8956], [274.1948, 892.5325, 66.1784, 18.981, 0.0, 0.0, 1359.4076, 314.4609, 330.9388, 94.248, 5.9443, 0.0, 615.3084, 62.8036, 704.154, 1934.343], [299.7922, 777.8306, 142.213, 4.4622, 0.0, 0.0, 1187.5328, 354.1261, 338.9217, 143.2015, 28.9373, 51.053, 840.294, 163.1975, 1021.686, 1674.1395], [580.3864, 1126.3781, 248.1521, 68.4648, 0.0, 17.9405, 2020.9217, 698.4986, 466.3458, 258.7108, 120.455, 47.6904, 1120.6188, 189.5152, 1178.196, 2440.5125], [536.1242, 1282.101, 316.7442, 76.2903, 55.9192, 33.9029, 2092.5671, 528.7833, 487.6673, 103.2293, 67.5754, 970.0236, 193.7481, 1483.602, 2799.8879], [565.0102, 1710.0776, 115.326, 23.4099, 0.0, 40.6677, 2275.2074, 480.7949, 657.7345, 190.2978, 39.4224, 78.5679, 1533.8484, 156.8941, 950.904, 2838.6729], [692.1086, 1620.1973, 237.6923, 91.4418, 0.0, 0.0, 1889.5098, 765.4743, 549.611, 244.9062, 78.8035, 81.4626, 1324.512, 173.2737, 1670.568, 3322.7496], [729.7937, 1853.7816, 224.1481, 0.0, 0.0, 0.0, 2160.1292, 820.7456, 637.4234, 112.9867, 114.1805, 112.9541, 1535.436, 294.28, 1904.91, 3147.9714]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

