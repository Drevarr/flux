created: 20230419215809000
creator: Drevarr
modified: 20230705163526028
modifier: drevarr
tags: ChartData
title: 202304192158_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Ark Darkness", "Sygaldry Verdandi", "Jupi Jupi Jupi", "Bella Sassy", "Solus Sanctus", "Gabe Malhorn", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 386.8128, 148.7933, 297.024, 152.563, 248.1629], [63.6004, 580.9162, 230.4538, 320.1494, 284.076, 323.2457, 49.0529, 0.0, 38.5016, 92.3983, 24.0828, 306.6792, 354.1619, 206.7072, 416.4157, 236.5132, 179.8418], [10.0388, 18.361, 565.583, 216.9917, 435.7766, 287.2042, 305.3038, 263.965, 0.0, 25.7237, 250.1029, 33.3719, 388.7232, 456.8231, 82.9248, 309.4262, 311.4342, 318.2472, 285.9667, 0.0, 51.8504, 146.7144], [0.0, 52.2386, 774.1483, 140.5526, 581.1062, 217.9285, 301.891, 375.0872, 0.0, 255.1886, 49.1977, 339.624, 411.6941, 241.0464, 260.6668, 269.1766, 200.0768, 251.7667, 59.3221, 136.785, 152.065], [19.9326, 65.4541, 785.6482, 142.6838, 786.9014, 344.2931, 497.5935, 84.6348, 0.0, 212.7918, 68.98, 338.2248, 588.2981, 249.984, 432.5455, 372.3412, 207.2955, 232.56, 40.1856, 83.9082, 122.1427], [0.0, 38.2721, 532.4774, 162.0422, 758.0477, 428.4276, 534.4523, 369.7442, 0.0, 17.9459, 175.8135, 96.0445, 286.2, 484.2058, 252.0, 543.9005, 390.8828, 218.1519, 266.9242, 0.0, 196.9262, 168.9005], [191.2397, 612.2938, 376.8781, 435.9672, 329.5583, 45.2554, 280.4745, 118.2638, 387.5784, 613.1047, 281.4336, 556.7748, 684.3144, 324.7269, 296.0899, 78.9705, 187.5563, 183.6571], [66.7325, 854.1245, 225.3034, 762.503, 427.9062, 498.9587, 436.588, 0.0, 330.0958, 124.8005, 466.824, 435.8329, 309.7248, 444.9019, 629.013, 434.6555, 279.455, 41.1806, 164.1578, 205.4683], [85.1696, 124.8198, 754.9819, 226.7597, 940.7174, 360.5856, 544.4958, 300.7404, 0.0, 249.3899, 180.363, 737.2512, 554.2367, 288.96, 530.0644, 498.8984, 368.0958, 284.4893, 80.8059, 141.3384, 195.0058]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

