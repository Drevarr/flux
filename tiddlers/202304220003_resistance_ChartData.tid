created: 20230422000344000
creator: Drevarr
modified: 20230705163526229
modifier: drevarr
tags: ChartData
title: 202304220003_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Eibh\u00ebar", "Morton Saltbringer", "Rahani Sunray", "Demon Sekhmet", "Ryvalia Fazebringer", "Smol Daddy Tika", "Sub Train", "Air One Com", "Ark Darkness", "Newtype Khan", "Lucas Ryn", "Jupi Jupi Jupi", "Xanvias Einzbern", "Zaylen Harker", "Solo Bloodborn", "Koralia Danai", "Blancooo Padreee", "Bella Sassy", "Soxx", "Aronorf Xideliesi", "Johosh The Great", "Domina Flagbringer"];
const professions = ["Chronomancer", "Chronomancer", "Chronomancer", "Berserker", "Chronomancer", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 13.7456, 10.2188, 2.3977, 11.4106, 13.2441, 11.5738, 19.9318, 16.779, 13.4784, 11.8368, 18.6797, 6.7565, 22.446], [1.3966, 16.472, 10.8798, 13.4341, 11.9064, 13.152, 16.3583, 19.0418, 4.5369, 59.22, 6.4584, 10.8468, 0.0, 12.2573, 13.3753, 7.9834, 0.0, 15.8667, 11.6677, 20.5632, 5.616, 13.5233, 5.5366, 19.737], [16.3944, 13.3764, 6.6855, 13.5046, 10.0056, 18.1236, 8.2685, 17.4515, 6.1664, 63.9, 6.741, 6.6447, 17.0844, 6.3662, 4.9997, 0.9616, 6.9696, 0.0, 16.8721, 11.2448, 18.4032, 7.7472, 17.8041, 4.5982, 12.2679], [10.4438, 2.112, 0.0, 19.0634, 51.6848, 33.8989, 80.46, 0.0, 0.0, 0.0, 0.0, 14.999, 0.0, 37.6992, 0.0, 62.181, 31.8816], [13.5406, 17.2104, 9.3291, 18.8288, 14.916, 16.2549, 14.8782, 25.7796, 18.9783, 72.54, 15.057, 9.3564, 15.5112, 0.9499, 9.6365, 10.9275, 11.4682, 19.1013, 21.855, 29.9808, 10.0224, 17.4473, 9.5248, 25.6581], [36.1284, 0.0, 17.2348, 17.3832, 6.3624, 51.4091, 0.0, 6.9471, 0.0, 48.96, 12.852, 0.0, 7.2588, 0.0, 8.5075, 15.8667, 20.064, 0.0, 44.9776, 37.5412, 70.1568, 8.5248, 38.235, 44.8086, 0.0], [32.3638, 47.6268, 13.3283, 78.383, 25.0681, 27.6687, 192.78, 7.623, 6.5412, 48.0792, 12.9142, 47.2954, 39.1987], [13.4798, 29.4224, 34.2407, 36.0357, 9.9, 44.8507, 40.0664, 33.6893, 16.614, 106.56, 9.828, 0.0, 38.226, 23.9286, 43.1021, 34.5746, 28.4909, 0.0, 19.888, 29.5747, 40.8672, 4.9536, 47.737, 0.0, 3.7926], [11.051, 32.6032, 71.5319, 31.0641, 0.0, 73.9402, 33.0484, 59.5944, 25.5919, 77.4, 17.892, 0.0, 58.236, 22.0693, 34.9978, 44.1908, 6.0192, 38.1151, 33.5932, 37.9296, 0.0, 28.5384], [30.9672, 18.2688, 131.3082, 40.1174, 123.8342, 53.7719, 48.6, 11.844, 7.9281, 18.9336, 10.0039, 34.5542, 23.4286, 22.1126, 17.9211, 38.07, 57.8016, 19.9008, 19.7174, 19.6126, 20.2788], [0.0, 33.1477, 73.1998, 27.4296, 63.6443, 48.2838, 93.7858, 33.9309, 126.72, 18.207, 5.1336, 33.672, 34.6602, 15.7248, 53.8507, 28.1741, 5.2991, 33.5256, 38.352, 12.4416, 5.5872, 35.8676, 42.1342, 6.966], [21.677, 66.1152, 43.9258, 68.8628, 11.9856, 127.077, 47.4672, 96.255, 39.65, 218.88, 7.497, 10.0188, 68.31, 18.1082, 61.3267], [7.8329, 29.9052, 19.1667, 52.8547, 10.6128, 40.1611, 14.8526, 97.7197, 42.4296, 154.62, 0.0, 0.0, 57.8772, 8.5286, 37.9008, 37.4595, 17.783, 0.0, 56.9541, 46.8825, 41.5584, 0.0, 54.9364, 0.0, 98.0271], [15.3622, 35.1308, 38.5621, 73.5524, 9.1344, 64.3142, 50.7082, 85.5414, 0.0, 126.54, 37.485, 6.7689, 2.3184, 29.7087, 53.0208, 56.6482, 21.9226, 69.6737, 51.6413, 42.4224, 6.768, 40.0835, 6.7565, 76.1616], [0.0, 47.4564, 49.6453, 10.7896, 15.18, 166.7093, 40.2195, 48.7553, 0.0, 81.36, 0.0, 0.0, 44.3532, 0.0, 73.9872, 63.8166, 35.1648, 74.613, 136.8405, 162.9504, 0.0, 55.4553, 0.0, 0.0], [15.18, 59.1572, 31.5462, 23.2716, 15.4176, 96.9297, 43.1798, 100.2308, 17.6364, 198.0, 28.035, 6.1065, 42.09, 36.2769, 56.569, 84.1855, 42.1133, 75.3998, 60.066, 47.0016, 5.9904, 31.1328, 10.9793, 7.1982], [42.2611, 32.1488, 60.042, 57.5796, 0.0, 29.2658, 49.9682, 114.0831, 58.149, 32.94, 0.0, 0.0, 42.228, 22.7969, 101.6064, 63.3358, 10.2854, 136.9434, 103.071, 139.968, 28.0512, 35.9649, 0.0, 79.6446], [8.5008, 48.9616, 36.071, 63.0449, 27.8784, 49.7519, 88.4013, 94.1625, 27.1575, 225.0, 26.964, 0.0, 43.1112, 34.4378, 49.7952, 49.5671, 65.4086, 8.7364, 85.7153, 76.7745, 77.5872, 7.9776, 51.1745, 11.6362, 111.4947], [41.8968, 21.6408, 70.8964, 61.5287, 12.8304, 130.6736, 103.2284, 138.0213, 41.8225, 161.1, 18.522, 0.0, 28.842, 19.7654, 29.6755, 46.8571, 52.6522, 8.3545, 90.6545, 75.999, 67.6512, 7.776, 131.0172, 18.4865, 119.4282], [20.0376, 42.316, 99.1634, 111.7037, 12.3552, 125.1377, 106.8267, 129.191, 42.2379, 161.1, 0.0, 5.0715, 48.1068, 17.7646, 73.0598, 55.6428, 58.8403, 0.0, 87.5948, 87.3143, 84.5856, 17.4528, 71.8, 50.1575, 27.6318], [17.1838, 72.3632, 74.1501, 58.4258, 19.5096, 139.277, 95.649, 128.5214, 49.4586, 236.16, 0.0, 7.452, 88.458, 1.8391, 42.6989, 60.5383, 50.8992, 93.146, 62.463, 64.1088, 7.5744, 81.3993, 0.0, 137.4624], [29.8742, 22.7768, 53.8904, 117.9447, 0.0, 45.6264, 80.5156, 139.8627, 164.0632, 266.04, 32.319, 0.0, 0.0, 33.0433, 58.2624, 0.0, 0.0, 114.3017, 110.9317, 134.784, 16.9632, 83.4424, 0.0, 105.1092]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

