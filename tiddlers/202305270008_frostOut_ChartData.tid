created: 20230527000807000
creator: Drevarr
modified: 20230705163531725
modifier: drevarr
tags: ChartData
title: 202305270008_frostOut_ChartData
type: text/vnd.tiddlywiki


const names = ["Zefirokai", "Miphest\u00f6", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Elonith Primal", "Johosh Of The North"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Frost Aura per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[310.5792, 194.3616, 20.0483, 0.0, 0.0, 103.7491, 43.3329, 109.5859, 76.4621, 0.0, 63.2384], [270.2131, 239.1014, 0.0, 477.5645, 36.0484, 109.5859, 74.5128, 0.0, 50.6925, 26.6227, 36.8179, 39.8899, 12.9726, 78.4771, 58.7466, 101.1769, 0.0, 17.9305, 47.8632, 54.3917], [360.5299, 384.6893, 0.0, 0.0, 436.3834, 19.8794, 195.9706, 83.5675, 0.0, 152.586, 139.3315, 19.943, 118.6662, 101.8238, 173.0948, 39.852, 138.8972, 17.437, 55.9673, 254.5094, 0.0, 87.7058, 39.9143, 19.9584], [579.8707, 598.1203, 39.6887, 0.0, 0.0, 776.0707, 93.0654, 279.5098, 124.1251, 19.7604, 126.7312, 128.3232, 88.2096, 300.6797, 0.0, 138.4733, 102.0055, 47.911, 240.2706, 12.0552, 161.0488, 473.0304, 0.0, 144.5335, 155.7082, 96.4224], [711.6595, 731.0563, 96.5117, 7.8918, 20.0592, 684.8352, 137.1472, 188.0909, 82.4357, 79.299, 310.2582, 150.1095, 144.6998, 512.1715, 185.9702, 223.2964, 44.28, 318.0687, 36.5716, 220.6602, 458.8531, 47.888, 161.6823], [574.7098, 640.6598, 137.8905, 19.8466, 787.6742, 130.6796, 216.983, 241.1448, 0.0, 206.8388, 84.8425, 111.2208, 371.177, 0.0, 108.9662, 215.9976, 0.0, 396.0634, 60.2491, 46.389, 222.4007, 547.7338, 5.792, 153.636, 236.0304, 157.4964], [771.5635, 742.9747, 39.9801, 15.8338, 28.1792, 867.0787, 72.6073, 357.7229, 259.3171, 219.4695, 122.6117, 116.951, 350.3539, 100.7078, 180.4529, 38.5236, 298.0298, 34.9209, 22.1911, 204.1257, 490.2067, 49.056, 107.2183, 153.0989, 98.8524]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

