created: 20230210230955000
creator: Drevarr
modified: 20230705163518969
modifier: drevarr
tags: ChartData
title: 202302102309_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Rozaalyna", "Ace Hammers", "Grasszanine", "Oo Dads Mad", "Newtype Khan", "Arcanophage Farra", "Elonith Tenebris", "Smol Gluvs", "Seren Nightroad", "Dark Sidiuz", "Burnhard Riemann", "Kyllarian", "Fungus", "Lord Erin The Wise", "Panther B Me", "Jeckyll Mbs", "Kary\u00edna", "Legacy Of Mathus", "Sp\u00edcy Cheese", "Be\u00eb", "Jupi Jupi Jupi", "Mistwalker Caelon", "Kosa\u00edr", "Xanvias Tseli"];
const professions = ["Scourge", "Vindicator", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Berserker", "Scourge", "Scourge", "Weaver", "Scourge", "Berserker", "Vindicator", "Berserker", "Berserker", "Scourge", "Dragonhunter", "Vindicator", "Scrapper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2673.0, 25841.0, 5748.0, 44507.0, 5948.0, 0.0], [27936.0, 9131.0, 7616.0, 29375.0, 1345.0, 6572.0, 0.0, 4055.0, 10550.0, 2795.0], [18841.0, 15875.0, 14894.0, 48368.0, 2565.0, 0.0], [17317.0, 15743.0, 26283.0, 39499.0, 2054.0, 0.0, 5672.0, 3459.0, 0.0], [24964.0, 23848.0, 6417.0, 26702.0, 777.0, 0.0, 294.0, 12422.0, 2995.0, 19847.0], [16811.0, 25352.0, 7462.0, 23507.0, 5342.0, 0.0, 1037.0, 742.0, 5268.0, 34275.0], [5507.0, 23164.0, 11208.0, 92428.0], [24206.0, 39373.0, 8309.0, 55355.0, 3635.0, 1177.0, 1429.0, 3426.0, 6975.0, 15713.0], [12984.0, 45651.0, 23060.0, 41147.0, 9069.0, 0.0, 112.0, 6126.0, 5593.0, 30364.0], [43826.0, 52490.0, 18861.0, 55274.0, 13786.0, 4428.0], [26159.0, 40662.0, 57849.0, 28145.0, 12363.0, 3601.0, 1091.0, 13272.0, 7611.0, 36636.0], [38450.0, 74687.0, 31569.0, 54552.0, 14715.0, 11219.0, 3504.0, 16339.0, 4419.0, 0.0], [41102.0, 37265.0, 25998.0, 78802.0, 697.0, 3301.0, 13038.0, 8389.0, 22378.0, 44309.0], [18661.0, 44531.0, 35371.0, 109023.0, 15620.0, 32774.0, 5540.0, 6271.0, 9782.0], [44056.0, 56176.0, 23383.0, 74760.0, 12539.0, 9927.0, 9784.0, 937.0, 11536.0, 39758.0], [59944.0, 29643.0, 49103.0, 81970.0, 0.0, 11057.0, 22157.0, 5189.0, 15321.0, 33131.0], [45656.0, 51964.0, 29447.0, 73550.0, 14195.0, 3605.0, 13241.0, 10723.0, 46317.0, 49675.0], [29175.0, 53456.0, 6235.0, 132560.0, 9474.0, 5027.0, 0.0, 20563.0, 20620.0, 61890.0], [88887.0, 93629.0, 62785.0, 150446.0, 9930.0, 0.0, 0.0, 1462.0, 0.0], [58226.0, 72797.0, 31650.0, 117301.0, 27435.0, 11099.0, 3856.0, 20102.0, 20145.0, 74704.0], [80089.0, 205227.0, 19034.0, 67583.0, 2040.0, 26756.0, 15462.0, 19542.0, 73638.0, 57554.0], [146991.0, 144625.0, 65246.0, 144850.0, 22155.0, 10774.0, 3156.0, 29388.0, 58556.0, 18167.0], [126138.0, 89099.0, 80739.0, 243734.0, 34440.0, 21542.0, 2977.0, 24847.0, 15873.0, 95879.0], [76061.0, 113058.0, 70937.0, 315661.0, 13953.0, 20806.0, 29253.0, 7728.0, 24772.0, 153401.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

