created: 20230304223548000
creator: Drevarr
modified: 20230705163521240
modifier: drevarr
tags: ChartData
title: 202303042235_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Govinda Ektar", "Primal Clone", "Hyde En Sikh", "Newtype Khan", "Xanvias Tseli", "Cerys Fireblade", "Koralia Danai", "Blanco Padre Guard", "Sygaldry Verdandi", "Gabe Malhorn", "Aronorf Xideliesi", "Bella Sassy", "Venomina The Fierce"];
const professions = ["Renegade", "Chronomancer", "Chronomancer", "Spellbreaker", "Berserker", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[48.3475, 4.7664, 44.205, 12.6672, 39.9854, 23.4413, 0.0, 21.39, 9.338, 6.118], [64.1389, 11.7625, 8.928, 6.4865, 10.3223, 18.3593, 18.7272, 6.4746, 0.0, 14.2402, 70.5806, 0.0, 6.7565, 47.4208, 61.9892, 37.177, 6.4589, 33.852, 14.326, 5.46, 11.3001], [65.4368, 16.5465, 15.4944, 4.641, 7.2761, 24.5235, 12.8826, 12.474, 14.2197, 100.7874, 6.702, 1.9475, 54.404, 85.6492, 37.506, 7.1317, 31.713, 21.663, 14.518, 12.7026], [117.4618, 34.0586, 36.4176, 0.0, 19.4155, 28.1221, 15.5448, 0.0, 15.5331, 0.0, 15.836, 192.8811, 21.33, 19.0726, 38.164, 113.2131, 19.082], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.4479, 0.0, 23.5661, 78.4392, 275.9939, 56.7525, 0.0, 93.0, 34.22, 28.546, 16.6842], [100.697, 16.371, 11.2464, 0.0, 33.3268, 17.0932, 35.9856, 16.1406, 21.8592, 26.358, 23.8564, 131.4362, 0.0, 1.991, 33.9416, 59.3866, 116.8773, 0.0, 74.121, 36.105, 21.336, 1.9828], [114.4333, 43.9339, 6.8544, 7.3817, 37.0185, 51.6834, 0.0, 7.2765, 0.0, 46.9966, 175.1992, 16.332, 14.5139, 53.7544, 117.2353, 29.7745, 0.0, 74.307, 43.181, 39.312, 27.807], [88.6912, 65.1328, 31.032, 7.2563, 7.4495, 18.3926, 12.5154, 0.0, 5.3757, 5.3605, 242.0961, 7.1046, 43.1172, 122.5588, 60.2893, 18.9393, 133.92, 74.82, 69.286, 4.1106], [106.7539, 60.6999, 1.4688, 13.4152, 29.1572, 45.6484, 57.0384, 24.2946, 75.211, 179.325, 34.854, 7.2678, 105.3976, 187.0323, 29.7745, 0.0, 49.476, 50.576, 23.492, 30.096], [221.079, 25.7195, 7.2576, 3.7183, 49.5152, 27.4557, 23.9904, 28.7496, 0.0, 12.3374, 210.2685, 7.398, 7.1699, 100.5256, 199.0989, 29.1165, 18.4347, 116.529, 89.726, 14.994, 24.5991], [144.2854, 64.6939, 33.696, 16.2935, 22.644, 3.5721, 26.8488, 0.0, 19.2938, 307.8141, 7.128, 7.0938, 115.5476, 178.9879, 48.6097, 7.939, 182.094, 78.474, 64.12, 18.5058], [149.369, 35.2876, 15.0912, 7.3819, 4.8859, 35.3858, 8.3538, 0.0, 7.3359, 5.5947, 70.6484, 358.7973, 11.082, 11.3696, 76.9776, 237.0732, 56.5058, 19.7467, 170.841, 90.393, 54.152, 46.0387], [81.3363, 30.328, 38.7936, 35.1364, 94.6288, 61.659, 62.6157, 42.2037, 0.0, 67.3748, 362.481, 2.25, 56.4019, 109.8636, 263.0992, 84.4708, 102.672, 50.257, 42.07, 55.5173]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

