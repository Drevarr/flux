created: 20230628220723000
creator: Drevarr
modified: 20230705163539657
modifier: drevarr
tags: ChartData
title: 202306282207_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Caelon Cai", "Miphest\u00f6", "Solus Sanctus", "Tika Fiery", "Shaca Booey", "Ateriuz", "Gavann", "Johosh The Mighty", "Xanvias Einzbern"];
const professions = ["Reaper", "Tempest", "Firebrand", "Firebrand", "Berserker", "Berserker", "Firebrand", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[35.3137, 29.9806, 25.8797, 22.3222, 7.5625, 19.4948, 12.125, 10.9455, 44.1562, 11.0448, 23.3309, 19.4537, 10.7467, 46.7241, 58.7624, 0.0, 16.6947, 49.716, 28.4016, 75.1951, 33.8512, 55.9111, 0.0, 22.4028], [13.0196, 65.699, 64.7405, 13.6222, 39.7589, 23.0825, 3.3194, 58.2364, 14.7969, 0.0, 58.7574, 22.3241, 0.6933, 0.8276, 84.9703, 29.3478, 6.5191, 41.2654, 40.3361, 65.8171, 5.1983, 5.6222, 0.0, 10.8333], [162.8611, 0.0, 35.7282, 10.5949, 7.4444, 34.2679, 64.567, 9.2222, 23.0, 44.0781, 3.6567, 43.8015, 24.5926, 1.9333, 63.5172, 4.0792, 201.9348, 41.4809, 72.1852, 13.3689, 57.0732, 0.7603, 46.4889, 0.0, 21.8472], [43.7451, 82.3883, 86.8924, 9.6111, 10.8125, 52.4536, 0.3611, 17.6545, 56.2188, 0.3284, 45.9926, 23.0833, 15.4667, 9.5862, 70.8119, 0.0, 13.626, 41.3025, 35.2049, 62.9512, 25.6446, 82.4889, 0.0, 17.7917], [23.7444, 24.8393, 47.1546, 144.9028, 13.6182, 121.3594, 0.0, 148.0074, 42.6944, 34.36, 21.3793, 69.0297, 18.2826, 34.2977, 58.9877, 87.4344, 49.5488, 41.0165, 202.4, 0.0, 97.9722], [110.7087, 194.038, 130.0778, 60.6696, 80.2165, 63.9444, 132.7273, 173.25, 0.0, 56.6544, 68.0093, 15.1333, 24.0, 187.8713, 100.2174, 22.3969, 72.3272, 185.123, 107.4146, 68.7273, 248.3556, 0.0, 101.0556], [56.5534, 254.019, 103.2667, 72.1964, 119.3711, 27.6528, 266.2182, 123.625, 0.0, 204.1985, 94.5648, 55.12, 12.7241, 101.9307, 0.0, 86.2901, 106.7654, 91.9672, 181.4146, 76.1653, 33.6444, 8.7551, 159.5556], [141.75, 4.7647, 342.5243, 301.0759, 170.2889, 64.2946, 194.3608, 0.0, 202.7636, 301.5781, 0.0, 89.5441, 149.9352, 96.2, 169.0345, 238.396, 1.4348, 17.145, 277.7593, 203.4508, 504.3415, 76.5289, 286.8889, 0.0, 288.2778], [13.7451, 360.2621, 620.5823, 394.5333, 347.4732, 273.701, 235.6528, 275.7273, 439.6875, 19.7015, 233.7426, 248.3241, 110.0533, 480.3103, 594.0792, 17.2174, 77.374, 293.321, 241.541, 30.7805, 181.4132, 773.6222]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

