created: 20230225215428000
creator: Drevarr
modified: 20230705163520286
modifier: drevarr
tags: ChartData
title: 202302252154_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Sparks Malefacio", "Cat Wigglebooty", "Blanco Padre Guard", "Koralia Danai", "Zadie Miststep", "Vopiscus Zergherdus", "Aronorf Xideliesi", "Sygaldry Verdandi", "Drevarr Moonwillow", "Mac Aaroni", "Bella Sassy", "Gabe Malhorn", "Newtype Khan", "Venomina The Fierce", "Grasszanine"];
const professions = ["Scourge", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.7248, 1.8415, 9.0184, 5.282, 3.2659, 6.7392, 5.7456, 1.8067, 3.1763, 3.6515], [7.0762, 3.472, 3.1469, 12.6641, 3.42, 4.4647, 1.6536, 1.2555, 0.2639, 1.8822, 3.599], [1.4321, 0.0, 0.0, 12.4722, 7.486, 3.5139, 14.3208, 7.7885, 7.0584, 0.0], [5.3071, 0.336, 5.1748, 15.6702, 13.984, 0.5994, 6.5832, 3.5325, 0.0, 6.0585, 7.3031], [0.0, 0.0, 3.5198, 58.5874, 0.0, 0.0, 2.4024, 0.0, 0.0, 0.0, 1.0771], [24.8165, 7.296, 7.0898, 4.9296, 7.1288, 0.5481, 5.5879, 12.7147], [12.0744, 0.056, 2.634, 18.5484, 17.936, 9.5082, 12.2304, 6.7883, 0.0, 1.2872], [12.5237, 2.1504, 2.0746, 24.7525, 12.958, 5.9736, 7.1136, 2.0003, 2.9998, 11.1385], [7.3008, 2.9344, 6.1305, 22.1302, 7.144, 8.7848, 8.736, 5.4477, 0.8628, 8.2348, 9.7987], [17.2411, 1.456, 13.7995, 29.1018, 14.896, 2.0877, 3.744, 0.0, 0.0, 8.2936, 0.6568], [8.8171, 3.1024, 3.4732, 15.99, 17.328, 4.134, 12.7608, 7.0224, 0.0, 5.2938, 13.3977], [5.2229, 0.392, 0.4895, 11.6407, 19.76, 14.9857, 18.7824, 2.0642, 0.2132, 17.5284, 7.6446], [24.8789, 3.2368, 13.1002, 36.3293, 17.518, 14.0143, 12.1056, 9.5547, 4.466, 35.4096, 11.2961], [66.6463, 35.264, 32.1832, 15.7248, 12.9595, 6.8716, 16.1755, 15.7095], [42.7097, 6.6528, 29.627, 77.3916, 49.666, 26.623, 12.8544, 19.9606, 69.7017]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

