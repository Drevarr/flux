created: 20230306221045000
creator: Drevarr
modified: 20230705163521274
modifier: drevarr
tags: ChartData
title: 202303062210_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Fribble Bibble", "Chronomancer Trixy", "Drevarr Moonwillow", "Ryvalia Fazebringer", "Klee Flamepumpkin", "Tegan Parker", "Raziel Umbra", "Mike The Archmagus", "Eibh\u00ebar", "Primal Clone", "Zadie Miststep", "Black Raspberry Pie", "Mac Aaroni"];
const professions = ["Scrapper", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[42.0474, 26.507, 2.5701, 38.1245, 0.0, 20.0386, 21.8987, 6.8428, 47.7044, 23.716, 31.3017, 15.9152, 20.896, 22.4116, 43.2317, 23.4788, 20.2414, 22.8678, 38.9654, 38.1024, 0.0, 0.0, 31.8235, 0.0, 39.3009, 0.0, 35.7552, 6.601, 26.3088, 41.3788, 12.4678, 21.2479, 22.7772, 13.0182], [78.5588, 22.885, 0.0, 28.3783, 0.0, 0.0, 24.0842, 0.0, 33.6277, 0.0, 0.0, 69.1488, 69.5472, 49.2734, 29.7851, 49.391, 31.4502, 20.8147, 74.6525, 43.0459, 0.0, 42.9745, 0.0, 30.8131, 0.1382, 35.9554, 46.1869, 0.167, 28.808, 34.2, 15.351], [85.5447, 32.0499, 0.0, 24.5372, 0.0, 0.0, 43.1418, 10.9588, 19.9606, 13.1624, 12.6949, 37.0048, 5.3627, 43.5782, 62.6323, 28.8634, 34.8905, 0.0, 39.5896, 11.0112, 49.392, 0.0, 54.108, 7.896, 41.8666, 0.0, 30.1766, 28.0973, 79.3162, 36.7164, 17.8112, 12.5736, 22.572, 27.3157], [0.0, 0.0, 0.0, 49.0745, 0.0, 0.0, 0.2186, 0.0, 32.3616, 45.2383, 0.0, 68.2864, 8.568, 81.1087, 98.8154, 0.0, 35.9297, 33.0005, 0.0, 116.9885, 0.0, 0.0, 32.7053, 0.0, 41.9832, 0.0, 37.2902, 0.0, 51.8381, 37.5906, 35.7894, 67.0859, 34.3368, 18.1352], [0.0, 0.0, 124.7192, 7.8689, 40.0165, 78.3486, 62.4442, 438.0365, 301.081, 12.9946, 44.4905, 0.0, 0.0, 0.0, 0.0, 0.0], [17.3989, 77.765, 0.0, 101.8754, 0.0, 0.0, 85.4093, 38.7933, 39.3627, 73.6975, 0.0, 52.4496, 70.4237, 151.901, 118.2831, 118.0248, 68.4447, 97.8388, 18.3638, 243.5731, 153.7469, 0.0, 122.6259, 0.0, 80.159, 56.713, 222.8453, 181.3236, 82.9891, 65.4943, 35.4312, 72.3153], [129.5692, 8.0125, 0.0, 64.7829, 0.0, 0.0, 89.4744, 0.0, 96.4144, 47.1948, 0.0, 138.4544, 95.881, 164.0554, 170.5102, 26.729, 82.0544, 28.2941, 0.0, 280.6877, 0.0, 0.0, 195.1896, 22.5149, 122.451, 0.0, 108.2016, 5.1149, 138.3648, 137.6865, 56.4949, 53.1594, 62.3808, 172.2473], [224.7361, 154.3226, 66.4455, 23.0692, 60.7335, 92.7963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 186.6449, 168.2949, 84.2134, 62.2089, 0.0, 114.782, 67.7722, 57.0125, 0.0, 218.9971, 30.7042, 139.6524, 0.0, 109.6243, 73.993, 199.5571, 273.1875, 110.986, 150.0083, 189.468, 105.5005], [207.6007, 100.0462, 0.0, 63.923, 27.9202, 8.2497, 129.6876, 31.9505, 61.1481, 95.9905, 27.9413, 169.9712, 84.8166, 191.2103, 206.6261, 25.4678, 81.6585, 0.0, 126.908, 34.1702, 363.384, 0.0, 0.0, 200.4802, 34.7424, 161.6353, 0.0, 90.9792, 88.0243, 280.0426, 162.8197, 152.5084, 159.3192, 75.9924, 127.0973], [258.6112, 70.6306, 30.8043, 96.0278, 54.8702, 30.6563, 129.469, 64.9813, 73.4, 109.7458, 65.466, 201.5664, 84.5084, 199.2737, 185.0103, 63.4996, 88.9335, 173.3635, 66.529, 357.7392, 0.0, 16.4556, 167.855, 38.1038, 146.8829, 0.3024, 61.2144, 91.584, 230.6405, 147.0841, 119.5577, 178.1, 115.1172, 148.393], [235.9399, 113.2174, 80.9677, 127.5593, 81.8202, 41.6119, 177.1424, 62.5632, 172.1189, 217.7428, 182.0448, 77.0808, 104.3504, 190.4478, 141.3581, 102.5928, 75.9676, 64.6819, 218.1715, 228.2155, 87.1267, 167.9328, 33.2829, 127.895, 121.271, 333.3422, 166.7536, 75.7533, 185.9785, 185.2272, 168.7105], [288.9275, 129.901, 50.1819, 113.5134, 106.2908, 69.9613, 82.6556, 105.7812, 82.077, 203.7204, 175.7998, 157.192, 79.2074, 254.7691, 181.6538, 113.4649, 91.1111, 26.3297, 83.2211, 0.0, 218.1715, 2.8181, 0.0, 464.0462, 11.844, 137.6699, 35.3619, 132.7248, 124.8998, 193.8082, 193.6353, 157.3508, 214.9456, 96.6492, 238.2415], [436.4229, 117.9371, 62.4038, 128.7632, 77.4866, 78.6343, 208.4754, 118.4232, 155.6362, 193.8465, 203.448, 60.1606, 112.1767, 236.0962, 160.1315, 99.6234, 38.3044, 56.8096, 49.3018, 440.5766, 31.7923, 3.2155, 212.5042, 123.3581, 188.9244, 32.5836, 129.2054, 60.8947, 371.5387, 287.8304, 226.4805, 200.6212, 245.0088, 234.9305]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

