created: 20230626011754000
creator: Drevarr
modified: 20230705163537936
modifier: drevarr
tags: ChartData
title: 202306260117_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Arriasa", "Elon The Archmagus", "Tegan Parker", "Etchery Of Ascalon", "Daddy Demon", "Sakis Ranger", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Druid", "Tempest", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[88.3519, 248.0, 20.1453, 185.9087, 468.7833, 197.25, 746.9545, 648.0714, 619.6407, 472.5169, 186.9217, 345.0621, 246.5, 297.1448, 0.0, 230.57, 232.0628, 193.4828, 289.9231, 205.4079, 257.3735, 144.9184, 26.7037, 196.73, 44.4667, 62.087], [745.3889, 538.3131, 65.3352, 968.8651, 1702.5389, 1542.5341, 2395.5909, 1539.4157, 1046.512, 1078.6957], [1222.5833, 37.0606, 1613.1377, 1731.2022, 523.2892, 1076.6211, 638.7255, 502.1717, 236.2449, 1113.49, 559.9749, 512.2759, 1622.9538, 660.4474, 603.4819, 462.2653, 50.8148, 521.42, 525.1111, 4.8696], [57.8268, 363.5595, 1751.8833, 233.9886, 1158.2614, 1843.9762, 1422.521, 1198.2247, 662.8614, 1098.882, 681.7745, 537.596, 73.2449, 738.83, 61.0, 306.4483, 1495.9231, 706.3816, 309.6386, 976.7551, 70.037, 342.2375, 373.5778], [493.5741, 282.7778, 48.3631, 738.2738, 1289.6944, 2375.25, 2508.1591, 2562.3095, 14.6667, 1015.2515, 1120.5281, 639.494, 1150.5155, 557.8886, 1174.9495, 59.0204, 1102.45, 499.9623, 465.2759, 978.4769], [394.2222, 521.4747, 66.1676, 648.6111, 1177.2833, 1420.8295, 448.1023, 1817.0714, 0.0, 1294.6647, 1498.9213, 637.241, 1166.2484, 691.9946, 932.8384, 44.7959, 1078.6, 592.9038, 721.8103, 1535.6923, 433.9868, 420.2169, 1053.0408, 3.3333, 375.0175, 252.9778, 113.6957], [435.9259, 658.5556, 22.2179, 1007.0079, 1397.4944, 1878.0909, 3491.8068, 2459.0238, 271.9697, 1510.8204, 1424.4045, 2401.8675, 3265.6894, 307.5652], [934.037, 780.2525, 59.3296, 156.873, 1612.4643, 26.9091, 2468.8503, 1726.9101, 593.1928, 1731.6894, 830.4049, 1309.0236, 12.9184, 1432.0, 471.4686, 981.6724, 1819.8154, 668.4868, 1201.4337, 732.551, 13.4074, 686.775, 370.1111], [894.6852, 785.7677, 299.7598, 748.9048, 2065.4389, 3084.0909, 4126.5909, 2617.3452, 69.6364, 3262.6048, 2080.8539, 1105.6747, 1886.0559, 971.7826, 1901.0505, 503.7551, 1841.98, 613.9707, 1431.3448, 1877.3385, 527.1316, 1228.6627, 899.5306, 527.3704, 764.605, 326.7778, 14.7826]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

