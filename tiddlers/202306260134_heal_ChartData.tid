created: 20230626013408000
creator: Drevarr
modified: 20230705163538846
modifier: drevarr
tags: ChartData
title: 202306260134_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Zayde Sunsabre", "Gestern Yesteryear", "Solus Sanctus", "Tegan Parker", "Tootsie Pop Rocks", "Elon The Archmagus", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[176.0312, 21.7556, 52.7079, 23.5122, 119.186, 53.6119, 0.0, 559.9099, 329.0339, 332.878, 261.6, 230.4205, 122.2364, 205.2, 374.4896, 572.7308, 79.7304, 313.5676, 66.9545, 150.6667, 89.7528, 401.5, 113.5978, 516.9821, 11.6198, 0.0, 34.7857, 234.3235, 411.3585, 579.8254, 313.2381, 422.678], [105.9231, 976.7838, 589.4915, 319.1707, 768.2, 640.0341, 833.8636, 791.92, 572.3438, 1889.6731, 132.9314, 163.4595, 1213.4318, 716.9722, 766.809, 1056.6818, 677.587, 679.7679, 748.4463, 161.5429, 13.4643, 277.6103, 717.4717, 1251.746, 1377.0, 434.2542], [486.1875, 179.637, 200.6854, 147.5244, 358.7837, 192.2985, 25.4615, 512.1351, 585.3898, 642.1707, 797.4286, 769.0455, 670.1545, 611.02, 946.6042, 879.2692, 88.5, 58.4054, 596.6591, 726.0694, 684.7978, 810.9205, 776.2065, 581.9464, 384.4132, 114.3714, 32.5, 352.6471, 363.2453, 769.5714, 1557.3095, 523.8475], [1900.2252, 266.8136, 1423.2439, 679.0857, 1540.8977, 1315.4364, 1703.42, 1710.1458, 3388.9423, 428.0931, 209.0541, 734.9091, 1541.5, 1357.4607, 1549.5795, 560.1957, 1539.5714, 809.4298, 137.9714, 206.6103, 706.7736, 1524.5714, 2041.381, 961.5593], [0.0, 530.5037, 481.1798, 32.939, 1058.3378, 640.9851, 63.6667, 2497.2703, 2197.8136, 1134.1463, 90.1714, 1144.4659, 1856.7727, 2490.0, 986.9375, 879.2885, 376.348, 169.5676, 1822.7273, 2151.0556, 597.0112, 4.0341, 121.2283, 0.0, 4.7107, 10.8571, 39.4643, 26.6618, 164.0, 198.6825, 7.0952, 0.0], [17.2031, 577.1259, 693.5281, 565.4268, 1066.9431, 506.1493, 151.1538, 2413.036, 1671.5932, 1857.2439, 1728.8714, 1638.3636, 1568.8364, 2250.72, 1470.5729, 4141.5962, 573.1716, 457.6216, 1292.2045, 2515.6944, 1202.2247, 487.6136, 1196.6739, 1500.7679, 418.2893, 985.4286, 382.2857, 764.0294, 1746.5849, 1120.0635, 955.1667, 872.322], [1280.9219, 573.8, 608.5955, 253.5122, 946.7932, 662.8657, 43.5128, 1662.5676, 2186.9492, 1573.7073, 2248.7714, 3172.3409, 399.5455, 1932.26, 1603.6875, 3880.75, 342.7402, 894.1351, 2596.6364, 1885.6528, 1450.7303, 2659.0795, 1023.2174, 780.5893, 417.157, 781.0857, 970.0221, 889.4717, 1286.619, 1048.8571, 1318.5932], [1239.4688, 573.5111, 765.2472, 531.1341, 1243.2296, 970.8358, 85.6923, 3884.4505, 1540.0847, 2967.122, 2855.6143, 2652.6705, 3818.4636, 3818.56, 3312.8125, 5304.9808, 453.2059, 37.7778, 932.4595, 997.7727, 2622.8889, 1450.4944, 4458.8864, 1962.413, 2152.5714, 1607.4545, 410.3143, 0.0, 1836.5882, 2261.8491, 2024.873, 3039.3333, 578.2542]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

