created: 20230708010915000
creator: Drevarr
tags: ChartData
title: 202307080109_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Seiker Soulkeeper", "Grasszanine", "Shaca Booey", "Gamora Titus", "Arcanophage Farra", "K\u00f4sair", "Aronorf Xideliesi", "Newtype Khan", "Morton Saltbringer"];
const professions = ["Firebrand", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker", "Spellbreaker", "Firebrand", "Spellbreaker", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[46.9718, 24.0264, 37.2654, 12.5338, 7.2072, 22.0545, 77.4883, 0.0, 52.6988, 30.0672], [11.8845, 0.0, 10.5449, 10.2381, 24.7489, 14.2071, 46.8234, 14.0429, 14.1804, 19.9716, 13.3082, 0.0, 11.4887, 13.6399, 13.464, 13.0925, 0.0, 13.6445, 0.0, 304.0031, 0.0, 14.7857, 32.8569], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 121.1272, 460.7889, 0.0, 0.0, 0.0, 0.0, 0.0, 32.0676, 0.0, 0.0, 0.0, 0.0, 0.0, 2.142, 0.0, 0.0, 0.0, 0.0, 0.0], [21.0301, 17.766, 6.4559, 16.2058, 24.18, 0.0, 82.2494, 6.4629, 55.3472, 62.4931, 64.797, 101.99, 41.4137, 55.3613, 37.5888, 53.392, 0.0, 35.9168, 67.367, 167.3802, 9.6545, 36.153, 21.1856, 5.2171, 0.0, 18.5063, 56.7235, 69.1812, 54.5114, 17.766, 94.4622, 45.01], [20.9855, 56.1744, 0.0, 0.0, 28.6416, 22.23, 23.8493, 0.0, 36.0514, 13.8672, 13.9146, 14.4525, 33.5689, 34.8412, 0.0, 20.8896, 52.5844, 68.3675, 90.3279, 27.6957, 34.8192, 54.5499, 27.5537, 0.0, 39.7662, 0.0, 21.2652, 45.0285, 13.8915, 53.1581, 19.32, 869.0984], [56.1697, 33.6708, 0.0, 28.7885, 14.4456, 20.0363, 31.2312, 0.0, 27.2952, 20.4509, 26.1488, 34.1925, 21.9265, 73.53, 33.456, 30.5002, 63.4156, 85.1092, 116.3409, 0.0, 43.2081, 61.0113, 0.0, 0.0, 31.2978, 13.3694, 81.2196, 16.3962, 0.0, 45.4406, 36.358, 752.4531, 7.0176, 127.8407, 138.0806], [30.1834, 18.3864, 6.1044, 0.0, 7.6752, 7.0785, 53.2896, 6.1146, 45.3479, 46.4227, 25.4412, 104.105, 19.4594, 17.8695, 16.8461, 36.0396, 37.9371, 16.6083, 152.49, 13.8966, 39.0312, 58.5834, 0.0, 7.4861, 39.0852, 44.3587, 38.0952, 30.59, 13.734, 57.9739, 27.3, 873.3291, 5.8772, 8.9762, 123.9667, 125.4253], [34.3805, 107.8932, 13.8387, 13.3171, 19.812, 35.685, 47.8296, 0.0, 40.8078, 39.839, 31.9563, 58.515, 0.0, 40.6125, 19.8571, 14.5493, 0.0, 39.0034, 75.0375, 108.9855, 14.4817, 37.2762, 16.6822, 0.0, 0.0, 17.6476, 62.0172, 58.41, 52.7372, 17.2305, 42.2919, 0.0, 693.2239, 21.7546, 0.0, 232.2941, 282.8021], [64.4746, 72.9252, 7.2549, 21.6893, 60.7776, 1.8428, 77.8378, 29.1798, 55.9958, 45.5674, 21.855, 27.2765, 36.765, 25.5446, 72.8133, 10.9562, 60.8902, 86.4432, 185.3202, 0.0, 24.4647, 89.8722, 7.2789, 7.2442, 60.3452, 65.538, 50.9018, 14.7105, 45.2554, 42.518, 1022.611]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

