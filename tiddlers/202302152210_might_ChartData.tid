created: 20230215221053000
creator: Drevarr
modified: 20230705163519368
modifier: drevarr
tags: ChartData
title: 202302152210_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Sister Elon\u00edth", "Ark Darkness", "Sygaldry Verdandi", "Tegan Parker", "Blanco Padre Guard", "Etchery Howls", "Mac Chiato", "Drevarr Moonwillow", "\u00c9\u00efbhear", "Bella Sassy", "Johosh The Great", "Ravioli Fetabringer", "Abigail Ryn", "Veron Blackburn", "Grasszanine", "Newtype Khan", "Domina Flagbringer"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Druid", "Tempest", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Herald", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[72.9388, 135.292, 15.133, 26.3318], [14.6866, 52.8998, 21.3444, 31.2816, 8.9563, 9.761, 9.4649, 14.7706, 7.525, 5.8825, 15.5405, 14.7859, 21.2256, 2.925, 7.29, 5.8559, 5.544, 6.6434, 4.2299, 17.094, 4.0838, 5.9132], [56.9646, 84.632, 8.5709, 18.6566, 16.3856, 17.1843, 0.0, 5.8233, 2.9889, 10.1062, 3.4258, 6.2181, 9.4061, 5.0011, 0.476, 9.9696, 5.895, 4.7466, 0.1733, 3.663, 9.0373, 11.3309, 4.0511, 0.0983], [59.6772, 101.916, 5.2675, 21.3725, 19.7274, 12.1422, 0.6542, 10.2601, 8.3948, 14.651, 1.7275, 3.2571, 10.1558, 11.5243, 0.0, 5.2742, 5.3325, 4.293, 0.9702, 0.231, 5.6857, 3.6465, 4.9817, 0.0491], [78.364, 58.408, 0.0, 83.0102, 0.0, 48.363, 0.0, 6.877, 3.588, 2.2253, 0.0, 9.6106, 9.5674, 0.0, 3.023, 0.0, 0.0, 0.0, 0.0, 3.4713, 0.0, 3.8095, 2.4898], [93.434, 156.152, 5.6246, 26.3318, 32.879, 19.1394, 0.0, 10.9811, 5.3689, 5.5614, 2.8694, 4.402, 6.9523, 14.351, 0.0, 4.7597, 5.67, 3.6774, 0.5197, 3.19, 9.9351, 4.999, 6.7399, 1.3595], [274.274, 175.82, 0.0, 0.0, 0.0, 6.6885, 0.0, 0.0, 0.0, 0.4186, 2.2253, 0.0, 0.0, 0.0, 0.0, 12.3494, 5.625, 0.0162, 0.0, 0.0, 1.0174, 1.9536, 0.0, 0.0], [111.8194, 103.704, 10.8922, 59.8666, 15.5232, 45.4818, 19.1309, 3.3276, 26.9698, 7.2907, 17.4107, 35.7158, 6.4507, 15.5654, 1.1925, 1.2312, 2.8759, 1.947, 17.8952], [97.6536, 168.072, 10.9368, 40.3834, 40.3172, 36.5295, 15.995, 16.2498, 2.749, 18.1194, 11.3899, 4.9942, 24.1286, 25.223, 3.281, 25.0848, 5.2425, 4.7628, 13.6868, 3.135, 16.2194, 3.2222, 13.3333, 5.5364], [117.546, 202.64, 7.8566, 35.1878, 29.9684, 35.6034, 9.4075, 20.0211, 0.9594, 19.5546, 8.3448, 2.3096, 20.1754, 24.1358, 22.8336, 3.8925, 4.1472, 17.4982, 4.114, 19.3316, 2.2012, 11.6239, 1.1326, 4.8485], [107.2984, 202.044, 18.5702, 34.2432, 34.2804, 39.9252, 6.6101, 26.6208, 8.9114, 20.2124, 6.7051, 18.6077, 36.5299, 14.665, 7.83, 5.3298, 11.9543, 3.377, 9.5162, 12.0635, 4.5193, 0.6716], [98.8592, 233.632, 19.4184, 41.6822, 60.4758, 24.0786, 10.6483, 17.1371, 11.1253, 22.6044, 7.115, 3.0202, 15.8131, 22.9037, 16.1443, 0.6525, 5.832, 4.4699, 4.301, 9.4563, 2.0686, 16.4591, 5.053, 0.0], [142.5622, 222.308, 16.6954, 37.5494, 39.0236, 22.2264, 2.3688, 19.411, 12.2324, 22.724, 6.0902, 9.1199, 13.5638, 26.6002, 0.1445, 17.4307, 7.515, 5.5242, 2.8066, 4.235, 7.7805, 4.5614, 12.9914, 0.0], [90.8754, 145.8093, 16.7621, 61.6161, 48.438, 23.1019, 31.4458, 77.1571, 100.6022, 0.3315, 45.024, 28.4625, 10.4976, 29.3486, 10.483, 42.1344, 48.8888, 13.8739, 8.7797], [220.6248, 379.056, 38.435, 130.4784, 94.1094, 86.436, 10.3099], [343.596, 594.808, 36.5155, 125.519, 100.9008, 108.6624, 23.8234, 53.7407, 13.0995, 50.6506, 29.1336, 5.9812, 55.5504, 70.4506, 57.3734, 22.05, 15.795, 40.9909, 10.241, 53.865, 4.0443, 18.1685, 5.0856, 23.0794], [495.5016, 836.784, 54.7733, 174.5222, 73.1962, 134.1816, 28.5158, 56.1255, 76.7832, 38.4739, 24.7145, 67.6829, 53.2003, 2.2015, 76.7981, 7.515, 3.4668, 10.8454, 2.662, 5.566, 0.0, 2.9792, 0.0, 0.0], [447.2776, 609.112, 54.5947, 177.3562, 128.7132, 132.6381, 30.1627, 78.4204, 31.1989, 85.6934, 45.2669, 13.5219, 94.129, 102.7766, 95.0006, 46.215, 18.063, 55.0242, 14.597, 71.2215, 25.2338, 70.4761, 13.9558]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

