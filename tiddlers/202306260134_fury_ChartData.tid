created: 20230626013408000
creator: Drevarr
modified: 20230705163538837
modifier: drevarr
tags: ChartData
title: 202306260134_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Elon The Archmagus", "Skylar Shadowmoon", "Argentum Boomstick", "Tootsie Pop Rocks", "Mememonoko", "Lucky Leipreach\u00e1n", "Miphest\u00f6", "Mistwalker Cael", "Lord Erin The Wise", "Kary\u00edna", "Cat Wigglebooty", "Fribble Bibble", "Zayde Sunsabre", "Arcanophage Farra", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Scrapper", "Scrapper", "Vindicator", "Scrapper", "Tempest", "Vindicator", "Weaver", "Vindicator", "Scrapper", "Scrapper", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 13.3488, 30.9506, 0.0, 153.3992, 26.5548, 0.0, 21.0967, 11.0106, 0.0, 13.0592, 13.3197, 25.85, 26.5275, 26.6112, 14.9292, 21.7648, 0.0, 26.2903, 19.2738, 23.8234, 26.562, 19.9769, 26.2899, 26.5037, 19.2027, 20.1733, 0.0, 11.2499, 17.9193, 18.4754, 21.5275, 17.8097], [98.4096, 57.3836, 0.0, 442.5746, 34.2692, 0.0, 0.0, 0.0, 9.5071, 14.3836, 38.7974], [275.1681, 203.0118, 174.1018, 78.4806], [0.0, 41.256, 6.1196, 0.0, 229.0974, 48.3231, 0.0, 40.5705, 44.1438, 5.1414, 0.0, 97.5357, 37.3791, 39.5325, 37.3248, 18.7902, 41.7078, 0.0, 39.1059, 76.8168, 0.0, 4.3014, 15.9988, 15.913, 27.663, 15.2628, 0.0, 15.7243, 18.48, 48.762, 8.0548, 7.3319], [0.0, 35.8528, 32.2949, 550.715, 44.886, 37.736, 35.9884, 27.2981, 4.077, 3.1416, 46.2317, 39.9124, 26.865, 47.1744, 24.6402, 62.7055, 17.6974, 30.303, 20.0803, 55.1254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [49.1173, 17.6825, 548.7124, 51.582, 32.519, 25.7265, 9.2347, 13.1331, 10.318, 68.999, 0.0, 38.9025, 13.8672, 9.6174, 110.5496, 18.5328, 11.6217, 18.7361, 0.0, 13.6784, 47.0263, 31.8246, 27.7133], [59.1667, 68.3424, 43.1899, 0.0, 255.5318, 47.7375, 0.0, 61.2376, 18.2664, 29.766, 26.0876, 33.0669, 56.0428, 39.285, 39.744, 36.3402, 23.0112, 58.0918, 37.8237, 28.5948, 35.4718, 59.9306, 21.4038, 23.8963, 37.9045, 0.0, 0.0, 34.0054, 12.6532], [12.6243, 71.2132, 35.4165, 33.9152, 45.0296, 70.6253, 51.0796, 66.555, 79.92, 46.6596, 106.5227, 9.4068, 46.9031, 36.5829, 54.1102, 96.5018, 52.5686, 69.9623, 54.8352, 65.7901, 0.0, 6.3014, 15.4686, 19.6015, 22.2409, 23.2071, 45.0064], [20.7878, 158.2848, 52.9301, 59.9551, 242.5149, 59.1436, 95.0304, 17.3785, 39.5437, 48.8488, 16.4173, 14.0624, 22.815, 53.4816, 42.5412, 78.7175, 7.8764, 42.3909, 26.6979, 67.7138, 97.0456, 95.128, 91.6688, 36.6374, 34.5092, 16.1483, 19.7372, 40.2696, 15.9445, 24.0017], [58.3718, 68.9904, 73.4677, 51.66, 483.0271, 50.92, 35.5153, 79.4705, 18.5201, 25.9415, 14.8764, 38.9523, 28.7452, 25.4025, 31.6224, 20.6622, 72.8688, 14.7139, 19.2308, 35.3628, 27.1058, 41.4117, 32.1781, 31.0031, 36.7987, 60.3354, 24.794, 0.0, 35.4117, 42.3481, 33.2394, 13.3644, 22.4017], [79.4707, 256.176, 77.5048, 36.3391, 771.4015, 73.5794, 0.0, 96.6055, 26.74, 41.9971, 14.0448, 59.6288, 109.087, 86.7375, 187.7904, 21.5514, 72.0059, 15.0719, 0.0, 86.6906, 41.9954, 70.2326, 43.0971, 88.9879, 86.2042, 144.9386, 14.3612, 65.4541, 28.1589, 41.9353, 27.09, 83.5434], [121.1846, 200.9664, 107.8146, 155.2457, 1132.6706, 121.597, 87.3814, 114.0747, 58.7569, 28.4852, 82.1744, 117.399, 98.5402, 92.385, 170.4672, 118.053, 129.5339, 80.8191, 62.5984, 105.9192, 111.6861, 95.9966, 71.2163, 90.505], [98.6342, 232.5024, 193.81, 142.9654, 960.6472, 124.3466, 57.5851, 193.2588, 57.9705, 38.3891, 84.084, 161.5398, 114.9808, 62.5725, 203.04, 101.2284, 176.7068, 0.0, 104.895, 73.3933, 121.6886, 56.1777, 118.8273, 129.8065, 102.0634, 146.2745, 59.9886, 41.7088, 333.982, 141.0871, 99.9079, 76.4299, 105.4124], [94.2451, 274.2768, 175.2908, 251.2447, 1196.3532, 148.0244, 68.4754, 204.6185, 127.7633, 44.667, 113.344, 181.8291, 142.0199, 111.51, 149.8176, 49.842, 315.637, 55.6756, 125.6243, 125.9205, 80.1331, 120.0939, 118.91, 170.1926, 116.4173, 173.3809, 75.1387, 164.7218, 123.1678, 100.7206, 82.2272, 117.7929], [195.7133, 272.6352, 153.9842, 76.8406, 1185.9397, 171.4986, 92.8875, 287.2391, 88.5413, 45.9118, 100.716, 172.4202, 193.0478, 139.05, 234.8352, 149.7834, 142.6694, 14.2295, 49.4505, 84.8087, 173.3962, 185.516, 160.4768, 143.6865, 135.0451, 165.2545, 67.0887, 21.8246, 166.192, 73.2131, 140.0553, 78.8861, 115.2559]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

