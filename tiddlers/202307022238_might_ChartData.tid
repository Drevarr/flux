created: 20230702223827000
creator: Drevarr
modified: 20230705163541113
modifier: drevarr
tags: ChartData
title: 202307022238_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Tuandha Lan", "Valaria Emberstorm", "Tika Fiery", "Pixzil", "Artakama Nahid", "Aronorf Xideliesi", "Perpetual Hope", "Silvyrs", "Bella Sassy", "Newtype Khan", "Grasszanine", "St\u00e1rless", "Zayde Sunsabre"];
const professions = ["Herald", "Tempest", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[13.4676, 19.2086, 13.9728, 3.312, 12.2298, 5.778, 12.3653, 0.0277, 2.1168, 4.0604, 6.2478, 4.9585, 1.1189, 6.6024, 2.769, 12.2031, 26.0896, 6.664, 2.315, 2.352, 6.4363, 7.7112, 3.402, 1.7332, 1.055, 16.6374, 0.0, 2.2794, 3.1455, 0.651, 10.0138, 5.9094, 0.9275, 8.5925, 1.5307, 2.0178, 1.1365, 3.1002, 3.2079, 5.9052, 0.8294, 2.6653, 6.7322, 5.0757, 1.3637, 1.3811, 2.1384, 1.5466, 6.2906, 2.304], [2.622, 0.0, 3.969, 4.8463, 8.5387, 9.8257, 0.8316, 3.0744, 3.3782, 21.1302, 23.9702, 3.043, 1.8182, 4.5528, 7.165, 9.396, 4.3848, 2.737, 0.0, 14.2911, 0.0, 14.7312, 1.5063, 11.2574, 0.0, 12.7066, 9.1287, 5.7834, 10.9933, 0.8968, 1.123, 3.0821, 6.6234, 11.9969, 0.0, 0.7578, 14.5454, 10.8347, 2.7438, 0.0, 6.1236, 0.0, 15.6796, 3.87], [11.0897, 10.7367, 7.4643, 10.9421, 3.8861, 20.0713, 11.07, 9.2254, 1.088, 3.969, 1.6809, 14.96, 2.7986, 0.0, 10.9872, 5.7041, 18.018, 6.8695, 2.94, 2.2264, 3.4992, 0.945, 1.6388, 0.0, 6.6123, 7.5775, 0.0, 0.0, 7.3835, 1.302, 11.5286, 9.6138, 1.0844, 12.2569, 0.0, 0.0, 0.0, 4.2968, 11.2843, 10.8158, 0.0, 6.6109, 8.5012, 12.5917, 3.0724, 3.2634, 1.1275, 0.0326, 15.2102, 0.864], [2.9554, 10.135, 14.9568, 16.4743, 7.884, 8.6428, 1.2474, 1.1907, 14.7571, 7.8792, 5.719, 0.0, 9.6264, 0.0, 5.4054, 13.0082, 5.7715, 5.8464, 9.2294, 29.2248, 3.9312, 4.6246, 0.0, 15.5709, 0.0, 7.9596, 3.3458, 3.4434, 5.859, 16.5775, 6.9237, 12.3201, 6.2328, 5.2033, 5.4157, 11.8104, 8.9365, 5.4545, 24.5977, 3.8491, 5.1119, 15.1163, 0.0], [11.1573, 6.4719, 6.4714, 10.7453, 0.0, 26.6178, 9.99, 1.0358, 0.0, 3.8808, 3.8857, 2.9851, 0.0, 0.9526, 1.512, 0.0, 16.38, 23.4587, 3.6805, 2.0857, 3.024, 4.4123, 10.4976, 0.0, 2.3252, 1.0156, 19.8369, 3.9164, 35.1648, 2.9726, 10.2972, 8.1625, 7.8939, 0.0, 7.1393, 5.4015, 5.8292, 7.1795, 6.0195, 18.2129, 0.0, 5.3566, 2.2113, 14.2511, 7.3771, 0.0, 6.318, 3.8258, 11.6424, 3.042], [12.9064, 9.416, 16.8461, 2.473, 43.5237, 6.102, 5.3087, 3.3472, 10.0328, 7.4222, 10.6213, 2.9507, 7.3584, 4.6242, 23.3415, 9.7196, 0.0, 4.1278, 8.7696, 6.7602, 7.452, 10.584, 1.2269, 4.1238, 8.5991, 14.256, 5.9185, 5.8274, 4.0796, 18.4289, 9.4374, 0.0, 20.5335, 0.544, 1.5021, 0.0, 7.8322, 2.3965, 9.1997, 9.3545, 14.3489, 19.7172, 3.0231, 2.3529, 9.545, 7.7493, 24.0358, 5.868], [41.1453, 11.5735, 62.1059, 6.6413, 19.752, 1.3665, 11.7664, 41.4196, 29.6503, 16.7098, 27.2536, 47.7149, 61.9823, 25.8746, 22.9385, 89.5711, 11.196], [14.6446, 18.0316, 12.4291, 21.3331, 6.3149, 30.2867, 28.296, 15.2786, 0.9425, 1.5214, 0.0, 14.8906, 5.506, 24.1416, 10.5222, 25.6347, 2.4847, 5.2088, 6.5688, 8.5818, 26.1144, 0.0, 7.6619, 2.0706, 33.2037, 21.9661, 23.2848, 4.6922, 5.6287, 5.9241, 20.0277, 18.4779, 10.8038, 11.6584, 1.8807, 12.3103, 5.0572, 20.9479, 0.0, 14.9464, 17.0024, 24.4025, 3.8446, 2.7416, 11.664, 10.0285, 42.9077], [12.5698, 7.0192, 20.9789, 5.417, 39.4231, 10.044, 5.7619, 7.1933, 5.0274, 5.6758, 9.6494, 4.198, 0.0, 18.6984, 13.3466, 30.9582, 39.0247, 1.53, 5.5272, 11.5368, 38.556, 7.9758, 0.0, 23.7474, 42.9106, 41.8176, 2.6393, 11.4561, 22.3839, 18.6984, 0.0, 14.1523, 0.0, 0.0, 0.0, 8.3761, 14.4544, 28.7179, 0.0, 12.1243, 15.4791, 47.8289, 11.4353, 8.0715, 8.5147, 0.0, 32.4859], [12.096, 31.6958, 51.6456, 21.1302, 10.1501, 1.5184, 75.7926, 38.2347, 5.381, 64.7595, 16.9944, 12.2311, 17.7493, 10.8125, 53.6441, 8.4326, 19.3885, 40.4422, 34.3587, 18.5988, 5.8413, 25.1554, 6.805, 102.5279], [11.4576, 20.6043, 41.7312, 28.6524, 9.172, 3.7172, 60.0084, 31.3315, 59.2812, 1.7329, 27.2164, 2.2568, 61.3453, 37.0881, 1.289, 47.5114, 4.9082, 18.5413, 11.514, 14.0507, 15.53, 33.2556, 5.9443, 10.243, 27.8132, 69.1079, 20.2911, 5.9641, 17.0294, 51.7334, 8.478], [58.104, 17.9267, 38.399, 41.4437, 33.097, 7.817, 77.7168, 31.2343, 119.574, 103.7005, 16.932, 24.0576, 48.576, 89.9424, 36.5904, 5.4655, 41.6646, 45.2093, 133.2936, 9.171, 40.2618, 17.8048, 24.9926, 41.9832, 10.9325, 28.6205, 0.0, 14.5282, 25.6358, 17.2094, 59.3628, 9.9878, 18.4216, 50.909, 114.4965, 39.547, 10.2198, 26.2051, 11.5751, 126.282, 19.206], [64.7193, 58.9955, 85.6867, 10.1126, 153.0164, 34.668, 26.2521, 27.4743, 43.6382, 41.3049, 40.7628, 0.0, 86.5368, 42.2272, 159.8688, 184.6732, 2.584, 12.427, 9.3744, 60.3557, 60.8472, 47.5902, 17.589, 11.7038, 158.9085, 84.3737, 163.7064, 14.783, 54.6646, 5.7831, 32.3136, 38.7198, 13.5309, 34.054, 14.383, 19.8641, 16.9801, 31.7094, 23.4554, 100.8857, 8.1562, 15.7825, 68.7469, 30.1615, 5.3298, 30.9679, 16.1172, 162.5236, 41.832]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

