created: 20230401222944000
creator: Drevarr
modified: 20230705163524017
modifier: drevarr
tags: ChartData
title: 202304012229_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Mmathuss", "Sygaldry Verdandi", "Astraea Lumena", "Bella Sassy", "Gabe Malhorn", "Johosh The Great", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[140.6621, 37.7055, 0.0, 200.5961, 0.0, 112.8087, 60.8221, 166.5814, 41.8252, 74.7337, 24.0004, 188.0928, 0.0, 168.7006, 32.1966, 564.1997, 80.4131, 11.1033, 84.9946, 0.0, 7.5141, 60.433, 117.5856, 65.1695], [41.8252, 43.63, 64.2823, 320.208, 2.6784, 294.5019, 32.3258, 1169.5245, 133.0111, 53.9019, 104.3011, 40.7606, 23.0967, 78.287, 123.1976, 129.2119], [114.2803, 534.1722, 151.2403, 716.6669, 26.2018, 215.6974, 22.4624, 259.2303, 0.0, 254.3861, 25.4562, 113.7937, 54.0496, 234.5436, 39.2558, 44.5473, 109.5836, 301.1904, 0.0, 241.6709, 51.6025, 1075.9533, 18.1927, 35.4393, 168.6754, 17.9547, 37.7982, 73.391, 65.1175, 80.342], [389.1888, 662.2541, 215.5276, 668.7473, 74.2125, 186.1766, 261.3016, 240.3177, 61.5794, 299.8718, 106.3993, 38.752, 150.0039, 233.3945, 12.0042, 97.6097, 152.4526, 438.6816, 237.2568, 83.5924, 875.4106, 268.8377, 89.7507, 98.8366, 71.331, 58.3704, 82.6934, 215.1727], [317.3386, 972.5542, 346.5416, 941.6765, 99.4582, 325.2433, 136.1537, 257.2353, 32.9195, 71.9425, 73.0765, 169.9364, 121.2534, 301.8902, 180.8212, 14.6209, 36.8231, 528.192, 0.0, 330.2284, 79.0704, 1396.6368, 225.5835, 36.9018, 154.9475, 78.4822, 56.826, 161.8291, 213.3021, 247.9331], [426.3706, 1102.2643, 316.1004, 963.2555, 71.8481, 364.433, 183.9427, 129.8346, 57.1018, 237.861, 46.2997, 36.1973, 120.472, 427.842, 0.0, 108.1373, 161.9853, 573.7536, 0.0, 272.2016, 116.1508, 1237.6813, 74.751, 120.393, 223.0155, 39.8823, 46.2231, 168.504, 299.4424, 74.3308], [361.6166, 1073.6358, 390.1451, 931.5455, 79.1092, 339.6437, 136.8432, 132.1488, 70.0818, 309.0941, 78.3017, 132.6618, 126.5933, 431.4125, 185.5807, 103.5922, 123.3203, 627.1776, 294.9617, 212.4565, 1802.5741, 112.5907, 39.6396, 112.0694, 45.8905, 44.5203, 92.9098, 217.088, 194.0057], [424.8922, 1346.0813, 401.3255, 1100.7332, 146.0864, 359.65, 215.0242, 144.8769, 130.1352, 458.5292, 111.0503, 134.0161, 87.4887, 396.3643, 134.6576, 156.7779, 134.4698, 574.56, 48.3084, 331.102, 67.6233, 1859.641, 167.1379, 56.7918, 204.3754, 104.0342, 51.0246, 178.7203, 322.336, 193.1387]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

