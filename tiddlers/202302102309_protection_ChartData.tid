created: 20230210230955000
creator: Drevarr
modified: 20230705163519015
modifier: drevarr
tags: ChartData
title: 202302102309_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Ark Darkness", "Venomina The Siren", "Arka\u00f1", "Bambiae", "Veggie Mac", "Ryvalia Fazebringer", "Black Raspberry Pie", "Mike The Archmagus", "Tribal S", "Zadie Miststep", "Aronorf Xideliesi", "Zaylen Harker", "Air One Com", "Kahless The Drunk", "Blanco Padre Guard", "Ravioli Fetabringer", "Koralia Danai", "Drevarr Moonwillow", "Bella Sassy", "Johosh The Great"];
const professions = ["Spellbreaker", "Firebrand", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Druid", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[53.8394, 40.0623, 40.6644, 41.251, 27.3126, 13.7729, 19.6812, 27.5269, 22.7314], [42.6229, 52.005, 31.3866, 95.8631, 27.433, 0.0, 0.0, 5.1543, 44.091], [18.4682, 80.2332, 81.0656, 62.9791, 0.0, 0.0, 0.0, 32.0836, 18.4856, 9.3038], [31.0933, 73.1762, 59.6148, 32.3003, 18.9805, 90.6404], [37.0407, 67.3134, 76.2622, 64.3411, 20.0634, 65.6073, 0.0, 20.2437, 41.8701, 11.7789], [103.8183, 90.2217, 46.9812, 50.2016, 4.6624, 56.4874, 21.1464, 29.8427, 27.1731, 25.8241], [58.8478, 108.7871, 73.8934, 47.737, 16.8448, 44.7619, 21.4236, 35.4078, 57.9388, 34.2035], [47.3182, 75.4561, 65.6684, 75.1727, 20.7853, 97.3408, 41.5404, 41.8693, 39.7799, 31.1917], [52.2743, 116.387, 67.2476, 62.525, 34.6822, 52.2997, 17.3448, 52.4394, 69.6964, 21.3511], [95.6798, 155.5808, 96.0022, 119.083, 9.024, 0.0, 18.0576, 0.0, 49.3819, 90.4739], [36.8842, 98.5816, 55.4694, 24.6468, 0.0, 111.0206, 18.3744, 72.571, 285.4484, 123.2461], [95.0537, 181.0948, 161.0126, 222.9238, 16.4237, 16.1924, 13.7016, 41.8693, 95.3019, 30.5357], [115.4, 412.8917, 223.9832, 98.1332, 11.5206, 88.3139], [121.2953, 309.2074, 161.0784, 236.3498, 14.7693, 44.2035, 0.0, 14.9027, 99.1558, 22.6036], [88.2195, 309.3159, 200.1636, 212.7408, 19.4317, 201.3818, 38.61, 20.5425, 164.933, 33.637], [171.1176, 246.2368, 230.8264, 158.5178, 0.0, 247.5396, 34.8084, 47.6212, 70.9375, 135.8301], [175.2912, 324.4072, 313.2738, 242.1872, 20.2739, 66.8171, 76.3488, 25.4353, 123.4548, 128.5242], [149.6236, 428.7429, 323.1438, 288.7567, 40.2771, 322.8251, 11.88, 23.4558, 237.5688, 64.4708], [208.4192, 370.658, 180.292, 203.5307, 150.7008, 195.7982, 145.5696, 150.4458, 222.3493, 115.135], [188.6989, 443.0742, 293.5996, 232.2637, 109.1904, 245.9576, 62.8848, 58.0045, 227.9015, 139.1998], [203.15, 690.7223, 457.5732, 367.3022, 23.6429, 174.5806, 39.402, 140.5854, 258.3406, 224.9621]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

