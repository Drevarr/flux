created: 20230626220846000
creator: Drevarr
modified: 20230705163539555
modifier: drevarr
tags: ChartData
title: 202306262208_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Gavann", "Sub Train", "Crusader Siolith", "Zaylen Harker", "Sygaldry Verdandi", "Bella Sassy", "Tika Fiery", "Koralia Danai", "Solus Sanctus"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[637.6805, 68.6136, 39.4432, 39.6488, 44.7129, 5.6916, 49.8847, 57.288, 74.4313, 94.1928, 95.7554, 93.6859, 84.088, 79.4825, 82.0975, 0.0, 69.4089, 122.9729], [686.1897, 0.0, 104.1044, 80.626, 130.5027, 248.3917, 117.0909, 110.4819, 91.392, 94.4446, 180.7617, 202.084, 176.146, 278.6137, 152.214, 261.1567, 160.2409, 58.1893, 219.1491, 368.0177], [1533.5649, 0.0, 82.5792, 85.7311, 82.8766, 236.4, 63.9387, 47.1877, 103.488, 113.143, 174.7073, 181.9157, 98.6659, 358.9688, 81.374, 376.4033, 281.0579, 40.3564, 218.817, 295.1734], [1205.9746, 174.9647, 101.5597, 57.8239, 282.0771, 158.5386, 50.7334, 170.4528, 109.2622, 218.9422, 180.3094, 66.8348, 255.3589, 194.12, 415.3855, 244.1003, 52.3069, 279.2592, 281.1452], [1318.6509, 55.5093, 113.6678, 103.1283, 120.9732, 122.7496, 113.0058, 152.9546, 195.9552, 187.7602, 167.1014, 320.8624, 109.9142, 341.935, 62.1, 361.284, 272.0142, 74.9077, 271.8792, 383.7834], [1909.0504, 50.4042, 123.9295, 137.552, 124.2718, 263.3362, 92.5344, 124.8532, 54.7008, 134.4168, 189.7676, 252.0138, 109.2325, 361.0425, 174.386, 390.7939, 158.5967, 78.4372, 230.9571, 68.0823], [2431.5984, 157.7037, 159.5722, 143.8549, 165.1712, 230.4945, 125.8348, 21.953, 149.3184, 139.9205, 170.999, 173.7057, 125.017, 343.12, 165.6, 314.4082, 128.9601, 109.0102, 130.6998, 342.0203], [2018.6565, 50.1501, 136.62, 123.9194, 73.8861, 355.0519, 214.3989, 68.8767, 132.0816, 120.8693, 169.7881, 291.5471, 223.2895, 326.4565, 175.628, 467.7262, 333.558, 104.2733, 258.8904, 496.3316], [1949.577, 20.0739, 178.3043, 267.0042, 110.6028, 328.658, 92.2361, 124.0799, 187.0848, 218.736, 180.913, 322.6472, 186.6602, 457.4686, 186.944, 522.6778, 317.3499, 54.0716, 208.2636, 462.7409]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

