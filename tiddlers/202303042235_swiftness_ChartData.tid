created: 20230304223548000
creator: Drevarr
modified: 20230705163521268
modifier: drevarr
tags: ChartData
title: 202303042235_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Mac Aaroni", "Sygaldry Verdandi", "Aronorf Xideliesi", "Your Devoted Buffer", "Venomina The Fierce", "Drevarr Moonwillow", "Koralia Danai", "Gabe Malhorn", "Blanco Padre Guard", "Bella Sassy"];
const professions = ["Tempest", "Tempest", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[245.8477, 89.36, 5.0688, 30.8108, 56.544, 38.0358, 28.5485, 129.3435, 25.043, 219.8462, 4.2323, 210.5516, 213.0583, 0.0], [237.6275, 6.0568, 15.7248, 0.0, 0.0, 145.7417, 2.9682, 0.0, 74.6064, 0.0, 33.7181, 314.0029, 0.0, 78.4992, 214.774, 440.9041, 177.4133, 9.9911, 109.182, 172.376, 45.388, 14.7498], [452.1088, 65.5717, 12.744, 0.0, 84.0635, 156.4707, 56.8548, 132.0462, 140.0078, 301.1834, 0.0, 13.7197, 93.4612, 353.4804, 286.1478, 139.2696, 297.507, 36.337, 85.162, 7.0283], [459.2474, 14.8348, 26.7552, 0.0, 165.0258, 0.0, 45.5301, 39.3128, 82.106, 232.2236, 41.808, 100.0742, 352.002, 470.1242, 237.3735, 0.0, 321.408, 165.561, 103.418, 19.7954], [44.149, 71.7876, 0.0, 325.1853, 89.4125, 152.9999, 892.499, 28.59, 98.7686, 657.2328, 1132.2493, 0.0], [76.361, 2.9406, 41.0688, 39.5624, 211.7819, 124.0218, 0.0, 76.5369, 0.0, 19.7644, 502.9056, 71.364, 0.0, 309.4532, 501.8286, 330.8095, 824.724, 235.045, 34.272, 106.9562], [444.6458, 173.7166, 20.8512, 19.4758, 34.3522, 103.8584, 58.3542, 60.3005, 102.5838, 60.6844, 927.2736, 0.0, 48.3834, 407.2992, 772.6173, 627.8142, 144.6184, 234.546, 53.592, 55.622, 32.0788], [844.297, 365.6915, 39.528, 82.9551, 270.3585, 199.2366, 44.3678, 72.7947, 35.8167, 52.0502, 419.3581, 0.0, 72.3085, 615.6584, 504.4312, 253.4945, 90.0879, 774.504, 30.885, 9.282, 106.3436], [923.5782, 21.7255, 31.9968, 17.3683, 1.9679, 38.9178, 72.3384, 0.0, 46.4025, 58.7202, 593.9678, 54.366, 15.0035, 313.838, 743.1606, 601.2475, 192.9927, 784.641, 270.976, 51.1, 62.2393], [1149.3082, 271.4158, 27.6048, 42.5989, 52.5613, 364.0543, 165.0564, 73.1619, 96.7923, 16.7977, 516.0197, 54.8243, 645.7024, 551.278, 349.1513, 113.905, 582.273, 6.322, 160.72, 39.0749], [1000.8045, 439.2511, 52.3872, 0.0, 84.3349, 124.4502, 66.555, 104.0729, 236.2932, 40.2212, 129.9824, 786.1123, 0.0, 61.5155, 801.85, 980.1155, 960.7622, 392.4442, 876.525, 294.408, 7.336, 53.3572]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

