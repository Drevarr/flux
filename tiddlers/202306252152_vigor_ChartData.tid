created: 20230625215204000
creator: Drevarr
modified: 20230705163536772
modifier: drevarr
tags: ChartData
title: 202306252152_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Cael", "Rednuii", "Cersei Crownguard", "Crusader Siolith", "Imalou", "Xyntharos", "Arriasa", "Sister Elon\u00edth", "Grasszanine", "Oo Dads Mad", "Tegan Parker", "Fribble Bibble", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Tempest", "Spellbreaker", "Firebrand", "Firebrand", "Vindicator", "Druid", "Dragonhunter", "Spellbreaker", "Spellbreaker", "Tempest", "Scrapper", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.5054, 16.008, 14.9366, 36.1919, 27.5621, 2.1707, 10.528, 0.0, 20.2199, 52.608, 16.952, 6.5208, 20.6711, 9.1199, 4.2468, 35.1379, 11.7533, 0.0], [60.8304, 81.3297, 0.0, 22.1779, 83.6352, 3.0307, 51.0048], [0.0, 59.4586, 0.0, 64.384, 65.4052, 63.2755, 52.429], [0.0, 40.0752, 0.0, 0.0, 11.881, 0.0, 60.3668, 0.0, 0.0, 95.616, 0.0, 25.5816, 4.8, 0.0, 0.0, 76.6772, 0.0, 0.0], [0.0, 0.0, 55.8642, 91.8418, 80.0654, 0.0, 32.1292, 0.0, 30.24, 27.7066], [12.7779, 41.676, 24.4776, 62.3953, 41.365, 2.1707, 10.3964, 8.6774, 27.6595, 66.432, 17.59, 9.8952, 18.7356, 7.8847, 3.9847, 25.9533, 19.9584, 26.0654], [0.0, 0.0, 66.3593, 146.4539, 60.2784, 57.3362, 0.0, 0.0, 0.0, 103.008, 0.0, 0.0, 0.0, 0.0, 91.7064, 0.0, 0.0], [3.0066, 95.22, 8.9817, 103.322, 2.9702, 60.3856, 0.0, 49.2994, 132.96, 0.0, 50.7984, 0.0, 38.5607, 47.8162, 0.0, 77.3942, 0.0], [0.0, 0.0, 56.5222, 98.0035, 63.7728, 0.0, 40.796, 0.0883, 62.3265, 162.336, 50.6131, 0.0, 63.6005, 0.0, 0.0, 55.5944, 0.0, 86.6419], [0.0, 92.5704, 49.35, 143.8595, 109.4621, 0.0, 43.0708, 72.301, 52.3555, 157.536, 33.418], [144.552, 61.1231, 0.0, 74.6603, 275.3976, 306.3245, 36.3989], [0.0, 39.1368, 48.0669, 129.3308, 141.7416, 0.0, 0.0, 0.0, 84.9851, 238.272, 0.0, 69.2664, 120.8526, 0.0, 0.0, 205.6785, 72.2198, 5.1998], [0.0, 90.8592, 118.6374, 75.043, 122.7845, 0.0, 79.9564, 0.0, 127.524, 176.16, 30.7446, 82.6272, 138.2334, 91.2496, 0.0, 125.1048, 176.2992, 52.3296], [105.9812, 217.0464, 106.7934, 269.0393, 154.5398, 11.2843, 76.0084, 5.6304, 105.3593, 367.584, 65.6512, 148.2456, 146.2851, 103.5166, 177.2134, 317.4935, 351.5635, 92.2392]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

