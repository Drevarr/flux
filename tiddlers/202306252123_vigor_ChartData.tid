created: 20230625212343000
creator: Drevarr
modified: 20230705163535901
modifier: drevarr
tags: ChartData
title: 202306252123_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Ildemir Fares", "Blancooo Padreee", "Elzy Lou", "Grasszanine", "Zayde Sunsabre", "Fribble Bibble", "Newtype Khan", "Drevarr Moonwillow", "Seiker Novus Terra", "Artakama Nahid"];
const professions = ["Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper", "Spellbreaker", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[30.7944, 139.7196, 29.1619, 31.772, 0.0, 0.0, 0.0, 31.117, 22.2587, 0.0, 31.8519, 0.0, 31.6109, 75.2218, 87.6034, 49.343, 0.0, 31.8936, 23.567, 8.0277, 23.7699, 0.0, 34.2912, 0.0, 72.6136], [188.7619, 256.7328, 64.7702, 321.683], [81.9351, 185.1249, 0.0, 0.0, 0.0, 0.0, 0.0, 34.4333, 0.0, 0.0, 6.1335, 22.7135, 72.3917, 0.0, 49.7731, 53.8118, 67.2147, 93.9581, 24.0374, 0.0, 89.8832, 0.0, 69.56, 24.1426, 99.8351], [0.0, 156.5364, 43.5292, 53.063, 0.0, 0.0, 37.3796, 97.3022, 78.595, 0.0, 33.8742, 0.0, 0.0, 123.264, 102.3629, 69.7224, 82.1607, 39.0359, 41.1125, 27.048, 27.8756, 126.7728, 15.0595], [27.6783, 179.7996, 0.0, 34.451, 79.3968, 100.082, 30.2649, 65.268, 146.4218, 78.3522, 110.6724, 0.0, 14.3751, 126.9043, 0.0, 155.3909, 78.2971, 0.0, 121.8475, 52.3555, 0.0, 132.175, 44.8598, 156.5664, 0.0, 97.1405], [288.3309, 587.0465, 0.0, 19.364, 34.7088, 0.0, 72.2799, 146.7648, 67.9909, 18.2526, 60.0578, 43.4421, 67.5367, 153.2621, 42.9005, 297.1709, 36.1694, 37.7199, 44.7907, 57.3418, 30.5936, 11.782, 69.5606, 46.9248, 38.5925, 110.4058], [138.5748, 319.7995, 57.9498, 76.61, 49.4928, 97.0538, 38.0804, 0.0, 78.0041, 0.0, 81.2337, 0.0, 10.338, 99.8554, 85.5456, 158.5267, 112.3717, 35.9926, 122.6856, 152.7389, 155.2438, 135.7765, 98.604, 51.888, 56.8584, 173.5541], [70.7538, 390.43, 144.9013, 144.572, 46.0992, 102.9588, 60.368, 86.7182, 111.4907, 0.0, 82.8076, 0.0, 42.5594, 136.1203, 102.8006, 181.0781, 186.9914, 90.6888, 121.4285, 152.7859, 204.5476, 78.0496, 99.361, 130.472, 86.725, 228.2734], [249.1047, 594.614, 80.9161, 149.319, 112.1568, 173.6673, 44.4136, 193.6166, 104.3994, 0.0, 97.8667, 19.9656, 100.9655, 67.7837, 165.1814, 339.2712, 167.3473, 72.4623, 151.0872, 86.6477, 215.0404, 165.2574, 146.6112, 218.0048, 82.9344, 226.477], [255.7035, 863.1223, 268.8659, 222.545, 105.7728, 85.2438, 111.9772, 313.4981, 254.5966, 219.3416, 57.7818, 80.8931, 296.617, 237.6307, 377.5685, 303.6456, 41.9146, 327.9221, 181.1981], [598.9328, 1241.9207, 311.4871, 310.67, 88.6368, 172.5065, 71.1749, 452.0779, 203.6445, 36.5487, 174.4861, 62.0964, 41.4653, 268.2778, 214.6118, 436.9493, 209.0095, 94.7849, 302.221, 221.6054, 347.5918, 278.293, 177.4075, 281.624, 101.8618, 461.7976]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

