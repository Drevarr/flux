created: 20230520000848000
creator: Drevarr
modified: 20230705163530865
modifier: drevarr
tags: ChartData
title: 202305200008_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Grasszanine", "Needragee", "Newtype Khan", "Drevarr Moonwillow", "Artakama Nahid"];
const professions = ["Tempest", "Spellbreaker", "Tempest", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 712.1079, 0.0, 85.2535, 0.0, 30.2016, 0.0, 0.0, 0.0, 60.947, 58.2107, 111.3552, 31.6829, 31.9277, 0.0, 31.849, 31.7564, 23.9418, 0.0, 0.0, 7.9587, 0.0, 62.8414, 0.0, 127.1256, 31.676, 0.0], [0.0, 1497.6171, 52.5218, 264.0475, 69.8935, 50.2102, 46.3716, 83.9394, 67.415, 50.4769, 146.8729, 261.756, 82.9128, 0.0, 55.6715, 67.2143, 254.3864, 45.5148, 0.0, 0.0, 101.9586, 0.0, 192.3912, 0.0, 227.0486, 66.9803, 77.4014], [202.5261, 124.3645, 398.2282, 59.3447, 223.3031, 0.0, 134.6072, 121.8888, 73.5357, 417.78, 400.6728, 245.8666, 122.8531, 68.0795, 262.298, 338.6792, 92.3409, 0.0, 101.5238, 107.6662, 203.9048, 0.0, 338.5637, 35.6383, 236.3995], [89.0559, 1589.0805, 105.7077, 443.6362, 0.0, 124.6445, 32.5908, 209.2449, 97.0094, 96.2686, 338.1233, 319.3344, 262.6344, 59.4614, 84.036, 213.3411, 258.157, 83.5002, 0.0, 0.0, 127.8411, 165.3216, 227.3714, 58.6189, 202.7827, 147.8287, 53.8559], [193.0896, 2467.9746, 26.6465, 419.0023, 16.6748, 282.4479, 46.4904, 159.9187, 119.5814, 145.3196, 457.9797, 457.6968, 321.0902, 97.0195, 75.764, 246.813, 438.8082, 171.3996, 0.0, 0.0, 165.1602, 68.255, 244.0705, 34.1979, 444.5918, 101.9953, 165.186], [370.1043, 3214.6695, 109.1135, 967.3039, 159.3774, 407.9733, 82.2624, 268.6778, 296.1781, 274.995, 881.0516, 707.652, 763.7242, 167.6755, 86.7855, 431.2804, 662.2762, 310.905, 99.1116, 196.8947, 194.326, 767.3676, 132.3359, 803.4802, 241.6991, 360.4726]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

