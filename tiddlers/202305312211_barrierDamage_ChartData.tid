created: 20230531221142000
creator: Drevarr
modified: 20230705163532389
modifier: drevarr
tags: ChartData
title: 202305312211_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Sassy", "Mildly Ecstatic", "Eibh\u00ebar", "Newtype Khan", "Crusader Siolith", "Drevarr Moonwillow", "Be\u00eb", "Tribal S", "Rosie Sunray", "Grasszanine", "Melody Phoenixstorm", "Smol Gluvs", "Irin The Undeath", "Tootsie Pop Rocks", "Cyclotechnist Farra", "My Birthday Girl"];
const professions = ["Firebrand", "Scourge", "Chronomancer", "Spellbreaker", "Firebrand", "Scrapper", "Scourge", "Druid", "Vindicator", "Spellbreaker", "Scrapper", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11236, 2405, 269, 37055, 762, 0, 0, 1474, 130, 135, 0, 1920, 1676, 0, 0], [0, 13852, 917, 0, 1285, 9217, 2282, 3174, 9867, 18267, 0, 0], [9184, 2496, 0, 34474, 3738, 1318, 576, 0, 5755, 1248, 2496, 3371, 0, 0, 0], [16247, 5458, 0, 39349, 6019, 888, 0, 0, 5392, 0, 0, 4855, 5864, 0, 0], [28666, 5855, 0, 39817, 4262, 0, 60, 1173, 733, 0, 1310, 4416, 6, 0, 0], [25264, 1675, 1369, 39606, 5880, 54, 44, 1668, 3887, 2765, 3146, 1015, 5541, 0, 0], [23620, 6454, 1554, 44749, 2447, 0, 0, 1704, 6359, 1248, 4094, 3507, 2160, 0, 0], [32842, 6851, 548, 39089, 6197, 972, 900, 2560, 1111, 2706, 329, 6796, 13923, 0, 0], [25754, 5076, 0, 59248, 4069, 454, 263, 1818, 269, 1793, 0, 4339, 12700, 0, 0], [19840, 13038, 0, 54986, 9578, 1350, 3432, 3070, 598, 235, 0, 4709, 7196, 73, 0], [59602, 2133, 3608, 54462], [32166, 4247, 1506, 64395, 8251, 0, 0, 0, 1248, 1248, 3135, 3727, 6886, 0, 0], [60480, 14483, 1863, 108050, 23095, 2668, 6774], [102532, 6235, 3814, 110814, 42093, 0, 3301, 842, 5757, 10233, 14776, 1949, 0], [114419, 24767, 4041, 129826, 46116, 6129, 304, 8497, 17720, 5865, 7464, 31686, 17135, 0, 0], [149202, 36227, 5705, 247574, 47023, 0, 1550, 1194, 25631, 8634, 12734, 22051]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

