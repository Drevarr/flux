created: 20230523000132000
creator: Drevarr
modified: 20230705163531339
modifier: drevarr
tags: ChartData
title: 202305230001_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Gavann", "Aira Draugr", "Xanvias Einzbern", "Nocta Asthariel", "Sire Nighthawk", "Venomina The Fierce", "Grasszanine", "Kmpek", "Elonith Primal", "Mistwalker Caelon", "Sygaldry Verdandi", "M\u00e4raas", "Blanco Padre Guard", "Crusader Siolith", "Koralia Danai", "Bella Sassy"];
const professions = ["Druid", "Firebrand", "Herald", "Berserker", "Scourge", "Vindicator", "Spellbreaker", "Spellbreaker", "Vindicator", "Tempest", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.6384, 0.0, 2.8621, 3.5154, 6.0926, 0.8221, 1.0455, 1.9395, 7.7508, 0.0561, 1.0332, 7.7372], [0.1397, 2.6832, 5.4432, 7.3532, 0.0, 0.0, 15.8385, 0.0, 0.0, 5.8696], [0.1197, 0.0, 4.5614, 12.5874, 23.32, 1.0397], [2.1546, 2.3254, 1.2474, 4.2018, 1.5475, 1.066, 0.0, 15.5015, 0.0, 1.0332, 13.34], [0.8379, 0.0, 4.472, 3.2886, 5.6724, 0.0, 0.492, 0.0, 15.1646, 0.9313, 0.0, 12.006], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.5125, 0.1476, 28.2808], [1.6359, 0.0, 3.2198, 6.1236, 8.8238, 0.0, 12.8056, 0.0, 14.4072], [1.596, 0.0, 2.0571, 5.4432, 5.4623, 1.9344, 3.0955, 0.0, 14.1536, 1.6974, 14.674], [2.4738, 3.1304, 8.505, 6.7229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.0832], [1.4763, 2.4149, 1.8144, 10.7146, 0.5078, 1.558, 0.7146, 17.1865, 0.0, 0.0, 18.4092], [3.6309, 4.2931, 12.5874, 9.0339, 2.2246, 1.312, 0.0, 13.1426, 21.6108], [5.985, 7.2446, 9.1854, 30.6731, 3.1918, 4.182, 0.4594, 43.4717, 0.1571, 0.8856, 49.6248], [5.5062, 0.0, 7.9602, 10.6596, 29.6227, 3.5545, 2.829, 2.501, 44.8197, 2.1318, 3.9852, 48.2908], [5.9052, 3.3987, 21.0924, 28.5722, 3.5545, 1.6195, 0.0, 56.9513, 0.0673, 0.0, 45.6228], [6.3042, 4.5614, 21.6594, 27.3117, 4.0381, 4.1, 2.2968, 58.6363, 0.0, 4.5018, 48.2908], [5.7855, 0.0, 9.9278, 24.4944, 46.0097, 2.152, 6.396, 9.3914, 82.8995, 10.9224, 56.2948], [7.581, 16.457, 23.0202, 52.5225, 4.6909, 9.881, 9.6976, 78.8557, 4.2066, 72.8364]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

