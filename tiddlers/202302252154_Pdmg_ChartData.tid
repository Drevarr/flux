created: 20230225215428000
creator: Drevarr
modified: 20230705163520288
modifier: drevarr
tags: ChartData
title: 202302252154_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Sumatra Satyricon", "Grasszanine", "Ace Hammers", "Sofya De Nova", "Madrigal Moonshade", "Nekroomori", "Smol Gluvs", "Morv\u00e4rth", "Husky Guard", "Viral Marketing", "Sparks Malefacio", "Be\u00eb", "Sassy Daddy Demon", "Harry Callahann", "Sp\u00edcy Cheese", "Lord Erin The Wise", "Xyntharos", "Smol Daddy Tika", "Mistwalker Caelon", "Xanvias Tseli"];
const professions = ["Soulbeast", "Spellbreaker", "Vindicator", "Weaver", "Vindicator", "Reaper", "Scourge", "Scourge", "Dragonhunter", "Willbender", "Scourge", "Scourge", "Vindicator", "Scrapper", "Berserker", "Weaver", "Vindicator", "Berserker", "Vindicator", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[50.2692, 350.6857, 0.0, 157.128, 191.94, 320.3585, 0.0, 67.6964, 62.9143, 11.815, 697.1831], [197.5641, 81.6857, 0.0, 270.9756, 259.82, 346.8491, 193.9875, 225.5179, 3.1445], [311.0641, 82.0571, 139.3968, 348.8659, 316.13, 0.0, 113.6875, 517.875, 0.0, 498.9296], [3383.9714, 1316.3175], [104.8846, 0.0, 220.8254, 281.6951, 67.31, 245.0377, 716.325, 494.4643, 9.4566, 403.4789], [97.9714, 1069.7778, 185.128, 970.5536, 1417.2857, 0.0, 0.0], [430.0128, 98.3175, 294.5915, 284.92, 507.4151, 280.875, 36.5714, 504.6, 702.3944], [292.3846, 26.4286, 763.0, 424.5732, 268.72, 554.2453, 766.6375, 928.9464, 0.0], [718.9872, 824.3714, 251.4286, 551.3232, 446.59, 309.6792, 293.425, 71.9821, 13.5549, 412.4789], [387.3205, 642.7778, 516.0488, 489.24, 708.7358, 468.1, 1251.8393], [614.1429, 582.4921, 388.5183, 336.8, 720.3396, 380.875, 785.6607, 492.6571, 14.8613, 1068.5352], [275.7564, 396.2222, 645.9268, 935.94, 441.4528, 341.0625, 124.5357, 740.7429, 16.9364, 1323.5352], [575.9487, 0.0, 418.2698, 1010.4146, 354.22, 842.6415, 624.8625, 458.1071, 27.4286, 30.3064, 1205.6761], [320.1646, 681.16, 999.7925, 140.375, 1033.5893, 0.0, 100.2312, 3276.3662], [1013.9615, 589.1429, 332.3175, 1257.5976, 1337.41, 795.3774, 1604.65, 0.0, 72.3237, 262.1831], [1348.7564, 1342.1143, 1219.0794, 861.1646, 676.28, 1157.283, 267.675, 2586.5179], [794.1026, 23.7714, 632.0159, 850.811, 448.12, 802.8491, 0.0, 1995.8036, 166.9714, 79.3931, 2990.5915], [1144.5897, 1626.5714, 751.254, 868.4756, 698.93, 1370.9811, 85.2375, 314.6607, 108.1429, 2361.169], [494.7308, 425.8571, 1186.9365, 1267.9146, 1261.98, 966.4151, 1049.125, 1512.2679, 183.9714, 1852.2817], [462.6923, 0.0, 1773.7778, 1287.0732, 1458.68, 2570.8679, 2937.125, 1448.0, 1418.9143, 76.0809, 3063.831]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

