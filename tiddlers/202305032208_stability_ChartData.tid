created: 20230503220838000
creator: Drevarr
modified: 20230705163528201
modifier: drevarr
tags: ChartData
title: 202305032208_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Husky Guard", "Solus Nex", "Elonith Requiem", "Arriasa", "Aira Draugr", "Blancooo Padreee", "Xanvias Einzbern", "Venomina The Fierce", "Amy Aita", "Ryvalia Fazebringer", "Soxx", "Gavann", "Smol Daddy Tika", "Sub Train", "Mistwalker Caelon", "Allie Mistwalker", "Sygaldry Verdandi", "Lucas Ryn", "Zaylen Harker", "Demon Dalham", "Koralia Danai", "Bella Sassy"];
const professions = ["Dragonhunter", "Scourge", "Scourge", "Druid", "Herald", "Spellbreaker", "Berserker", "Spellbreaker", "Herald", "Chronomancer", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.1054, 7.4225, 0.0, 0.0, 0.0, 1.6464, 0.0, 0.0, 7.091, 0.1555, 0.0, 8.2483, 7.4578], [18.3269, 3.9763, 0.76, 0.0, 0.0, 0.7203, 0.0, 0.0, 11.9661, 0.0, 0.0, 14.7782, 10.8138], [8.748, 0.9702, 0.0, 1.9551, 0.0, 0.2402, 19.9436, 0.0, 0.0, 19.9334, 9.6951], [16.6608, 8.4829, 0.9217, 0.0, 1.8992, 3.8073, 1.0227, 0.8234, 13.2957, 1.0046, 10.3104, 12.6783], [32.7662, 20.4119, 1.8919, 0.0955, 2.7558, 7.9233, 0.0, 0.0, 23.9323], [33.877, 10.0734, 0.0, 0.9682, 1.8522, 0.0, 0.0, 3.1023, 0.0, 0.0, 23.0266, 23.1192], [26.6573, 11.1338, 1.1966, 2.4951, 4.8363, 0.0, 0.0, 22.1595, 0.0, 0.0, 18.215, 14.1698], [23.8805, 14.58, 1.8434, 1.713, 0.4116, 0.0, 0.0, 24.3755, 0.0, 21.6518, 23.865], [8.8325, 32.6496, 72.7135], [25.5466, 20.677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7548, 13.7389, 0.0, 0.0, 36.0864, 18.2716], [2.8046, 73.5475, 46.6113], [34.9877, 31.2806, 1.0349, 0.0, 0.5958, 9.1581, 0.0, 0.4117, 46.9781], [33.877, 16.4356, 0.0, 0.8593, 1.7503, 4.2189, 0.9908, 0.6176, 27.0346, 2.1773, 1.4651, 20.6208, 22.0005], [45.5395, 13.7847, 0.0, 0.0, 3.0909, 0.0, 0.2237, 0.2745, 0.4432, 0.0, 0.0, 43.3037, 26.1023], [39.4306, 9.2782, 2.9106, 1.2289, 3.2928, 1.0227, 0.0, 27.921, 0.0, 0.0, 27.1507, 26.1023], [53.3146, 14.3149, 0.6953, 1.8228, 2.4206, 7.9233, 1.7578, 0.0, 8.4206, 0.0, 29.5565, 39.1534], [49.9824, 17.761, 2.6842, 0.0521, 1.9365, 1.1319, 1.3423, 1.0293, 26.5914, 0.0, 41.929, 44.7468], [60.5342, 31.0155, 0.2587, 2.4825, 3.0537, 8.3349, 0.3835, 2.1272, 31.9097, 0.2592, 2.3023, 55.3325, 35.0517], [78.3058, 36.0522, 3.1208, 5.0274, 16.0524, 1.598, 2.0243, 54.0692, 0.0, 57.7382, 60.4082], [86.0808, 35.257, 2.8621, 2.4578, 10.5987, 4.1228, 0.0, 53.626, 0.0, 70.1107, 57.0522], [116.0702, 50.3671, 0.2102, 2.5696, 22.3293, 0.7031, 94.3995, 0.0, 0.0, 74.9222, 68.6118], [113.2934, 59.9103, 2.8621, 5.3998, 20.7858, 5.7298, 89.0812, 5.1906, 81.1085, 80.5442]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

