created: 20230213220222000
creator: Drevarr
modified: 20230705163519184
modifier: drevarr
tags: ChartData
title: 202302132202_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Skye Nightroad", "Raziel Umbra", "Klee Flamepumpkin", "Black Raspberry Pie", "High Sorcer Baradun", "Arka\u00f1", "Tootsie Pop Bringer", "Uneeta Healah", "Tribal S", "Abigail Ryn", "Etchery Howls", "Arriasa", "Tegan Parker", "Mac Chiato", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Joh Oshi", "Mike The Archmagus"];
const professions = ["Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Scrapper", "Scrapper", "Druid", "Tempest", "Druid", "Druid", "Tempest", "Tempest", "Scrapper", "Scrapper", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.15, 0.2015, 0.1098, 0.0, 0.5405, 0.3478, 0.0218, 0.0, 0.15, 0.0796], [0.1125, 0.1815, 0.4756, 0.0, 0.4595, 0.3478, 0.0691, 0.0, 0.4125, 0.0615, 0.1333, 0.0486], [0.4888, 0.1167, 0.0216], [0.0127, 0.1707, 0.0, 0.8108, 0.7565, 0.1382, 0.0, 0.3625, 0.3045, 0.0333, 0.0649], [0.08, 0.95, 0.4958, 0.2167, 0.0703], [0.2062, 0.2577, 0.5, 0.0, 1.2432, 0.7217, 0.1782, 0.0, 0.7625, 0.1425, 0.0, 0.1568], [0.1719, 0.3303, 0.5366, 0.0, 0.5135, 1.1304, 0.1345, 0.0, 0.425, 0.2374, 0.0, 0.1838], [0.0036, 1.061, 0.6757, 1.1304, 0.2327, 0.0, 0.4, 0.5796, 0.0333, 0.1568], [0.4473, 0.0, 1.2375, 0.8687, 0.5333, 0.2541], [0.3219, 0.5426, 0.9024, 1.2162, 2.1478, 0.2109, 0.7875, 0.2025], [0.775, 0.7713, 1.622, 0.0, 2.2703, 2.9565, 0.4], [0.4813, 0.8185, 0.8171, 0.0, 0.8919, 1.8696, 0.3345, 0.575, 0.595, 0.25, 0.0973], [0.575, 0.9492, 0.7561, 1.5946, 2.2609, 0.3055, 0.2, 1.525, 0.602, 0.2833, 0.1243], [0.4562, 1.0073, 0.7805, 0.0, 1.9189, 2.6957, 0.3418, 0.8875, 1.0084, 0.2833, 0.227], [0.575, 1.0526, 1.0, 1.5946, 2.7826, 0.5455, 0.0, 1.3125, 1.0405, 0.6167, 0.2703], [0.5531, 1.2523, 0.9756, 0.25, 2.0, 2.7652, 0.7018, 1.425, 1.0866, 0.7667, 0.4108], [0.7812, 1.2468, 1.7805, 0.05, 3.0811, 3.3565, 0.6036, 1.425, 1.1997, 0.7833, 0.2108], [0.8562, 1.3503, 0.8049, 1.1892, 3.6, 0.6291, 0.375, 1.525, 1.3184, 0.55, 0.4378]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

