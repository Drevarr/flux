created: 20230605220452000
creator: Drevarr
modified: 20230705163533847
modifier: drevarr
tags: ChartData
title: 202306052204_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Nurse Pam", "Belvyn Brightblade", "Oo Dads Mad", "Artakama Nahid", "Cat Wigglebooty", "Arriasa", "Primal Clone", "Venomina The Siren", "Al\u00ee\u00e7ization", "Eibh\u00ebar", "Ryvalia Fazebringer", "Stoic Rapidfire", "Miphest\u00f6", "Blanco Padre Guard", "Crusader Siolith", "Etchery", "Johosh Of The North", "Drevarr Moonwillow", "Bella Sassy", "Zaylen Harker", "Solus Sanctus", "Gabe Malhorn", "Sygaldry Verdandi", "Koralia Danai"];
const professions = ["Vindicator", "Firebrand", "Spellbreaker", "Tempest", "Scrapper", "Druid", "Chronomancer", "Tempest", "Firebrand", "Chronomancer", "Chronomancer", "Druid", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 14.4969, 137.3546, 106.8309, 10.3682, 13.3363, 456.456], [0.0, 333.149, 0.0, 430.8213, 0.0, 0.0], [0.0, 495.0313, 14.6983, 292.7707, 4.8633, 6.9097], [0.0, 338.6233, 19.6123, 186.1805, 0.0, 19.3973, 0.0, 16.4703, 33.7819, 19.5307, 4.1056, 14.5949, 138.216, 143.1545, 22.4336, 15.9975], [0.0, 446.9359, 4.1933, 161.2939, 0.0, 0.0, 0.0, 16.4551, 53.3025, 27.8916, 15.0225, 4.5485, 179.244, 90.0934, 28.451, 10.1047], [52.6806, 0.0, 5.647, 107.7421, 53.1378, 22.5905, 58.225, 367.224, 346.9239, 79.5574, 43.8817], [20.2176, 464.1407, 15.3317, 266.4753, 20.1498, 0.0, 0.0, 20.1894, 63.8682, 25.1155, 0.0, 45.2861, 151.32, 203.2167, 20.437, 11.8462], [0.0, 485.6468, 28.0644, 267.6492, 0.0, 0.0, 45.749, 0.0, 51.4073, 82.4665, 26.1285, 36.8515, 163.8, 139.2854, 23.4041, 0.0], [61.904, 132.9957, 137.5966, 17.6902, 78.0086, 487.188, 315.4189, 107.8142, 26.3858], [21.0384, 425.4298, 36.3854, 315.5443, 33.3723, 25.6743, 23.969, 20.493, 54.7239, 40.0738, 30.1774, 12.431, 210.288, 178.5286, 31.1131, 0.0], [27.9648, 478.6085, 39.6614, 274.9274, 15.9315, 28.022, 11.407, 29.8742, 38.7095, 60.0617, 24.2744, 42.4157, 229.632, 248.5398, 37.38, 16.7467], [0.0, 1189.4828, 48.9871, 662.7839, 0.0, 0.0, 0.0, 31.1342, 90.6853, 74.1382, 0.0, 24.4205, 343.824, 119.756, 25.678, 0.0], [0.0, 24.0895, 1276.0293, 0.0, 0.0, 21.648, 69.9039, 223.7284, 50.4924, 21.2282, 20.3578, 594.516, 404.591, 54.4617, 21.8093], [0.0, 1438.9536, 20.0054, 437.6299, 0.0, 0.0, 0.0, 25.8364, 91.5855, 89.2924, 21.0769, 40.3181, 377.52, 216.2978, 41.4009, 30.0712], [0.0, 1137.8682, 24.1769, 782.7565, 40.635, 14.9351, 0.0, 22.4816, 98.5978, 49.5452, 17.8983, 45.7498, 454.272, 339.7386, 37.796, 23.7938], [75.2976, 1371.6982, 78.2964, 667.2448, 43.5633, 0.0, 0.0, 9.8518, 128.305, 110.7501, 0.0, 64.5619, 403.884, 188.4775, 76.5625, 17.1517], [18.4752, 1382.2557, 52.6999, 822.4343, 0.0, 37.5457, 0.0, 0.0, 96.4657, 108.8558, 0.0, 30.625, 447.564, 320.5776, 0.0, 0.0], [0.0, 1070.2217, 80.939, 775.0088, 46.8915, 54.2291, 59.51, 31.5744, 132.0007, 87.5941, 12.298, 61.8019, 481.416, 532.8221, 78.6423], [31.2336, 1735.7378, 71.0455, 763.5046, 0.0, 54.3289, 2.959, 57.6233, 80.7829, 83.5443, 23.877, 89.976, 571.896, 345.45, 105.9286, 58.7452], [0.0, 1646.1942, 41.2994, 1003.2149, 0.0, 5.0616, 20.2046, 127.8312, 126.7535, 67.0146, 77.7658, 511.212, 229.9315, 183.018, 52.407], [0.0, 1819.025, 66.6994, 1031.8581, 0.0, 21.4119, 0.0, 57.2741, 203.5445, 79.3965, 23.1202, 81.4973, 640.848, 162.4997, 46.9192, 26.3048], [0.0, 1718.1419, 27.5839, 1052.284, 21.4914, 21.5784, 0.0, 16.9561, 231.0723, 165.7168, 22.3445, 92.2061, 738.504, 292.9416, 44.6176, 0.0], [0.0, 2054.0281, 28.8725, 1220.856, 45.924, 8.8911, 0.0, 31.4226, 213.1626, 174.4697, 92.1215, 123.935, 588.12, 430.2004, 99.1348, 27.3375], [0.0, 2484.1501, 65.105, 1389.428, 21.8139, 59.4072, 21.747, 92.9471, 226.5238, 199.5526, 74.2421, 111.1507, 735.54, 748.7514, 67.7721, 70.1258]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

