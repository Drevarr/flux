created: 20230706004528000
creator: Drevarr
tags: ChartData
title: 202307060045_cleansesIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Cael", "Artakama Nahid", "Mike The Archmagus", "Xyntharos", "River No Hug", "Sygaldry Verdandi", "Stoic Rapidfire", "Grasszanine", "Solus Sanctus", "Ryvalia Fazebringer", "Kary\u00edna", "Primal Clone", "Johosh The Mighty", "Legacy Of Mathus", "Eibh\u00ebar", "Tegan Parker", "Newtype Khan", "Tika Fiery", "Zaedy Zae"];
const professions = ["Vindicator", "Tempest", "Tempest", "Vindicator", "Reaper", "Firebrand", "Druid", "Berserker", "Firebrand", "Chronomancer", "Vindicator", "Chronomancer", "Berserker", "Berserker", "Chronomancer", "Tempest", "Spellbreaker", "Firebrand", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.439, 0.3269, 0.4118, 0.5472], [0.4268, 0.5577, 0.3088, 0.6415, 0.4615], [0.6341, 0.7115, 0.5441, 0.7736], [0.6625, 0.4824, 0.3205, 0.2586, 0.4602, 0.56, 0.0], [0.2805, 0.3269, 0.2941, 0.434, 0.4154, 0.5, 0.4824, 0.3333, 0.569, 0.3451, 0.6667], [0.4268, 0.3462, 0.3382, 0.4906, 0.4923, 0.4125, 0.4588, 0.2436, 0.4655, 0.4159, 0.68, 0.0], [0.6615, 0.7375, 0.4235, 0.5897, 0.6897, 0.5664, 0.8, 0.1099], [0.5122, 0.3654, 0.3676, 0.3208, 0.5846, 0.55, 0.5059, 0.5513, 0.3793, 0.4425, 0.5467], [0.3659, 0.3269, 0.3676, 0.3396, 0.6769, 0.55, 0.2588, 0.6538, 0.6897, 0.5221, 0.5333, 0.011], [0.3659, 0.2692, 0.3529, 0.5283, 0.5077, 0.45, 0.4235, 0.5897, 0.6034, 0.5752, 0.6267], [0.2317, 0.3846, 0.3382, 0.6038, 0.5077, 0.725, 0.2706, 0.6923, 0.4828, 0.4867, 0.6533, 0.0989], [0.4634, 0.4038, 0.2794, 0.6226, 0.4615, 0.725, 0.5294, 0.3846, 0.5, 0.5664, 0.7467], [0.2927, 0.4615, 0.75, 0.5094, 0.5692, 0.85, 0.2824, 0.3462, 0.5517, 0.6106, 0.68], [0.5732, 0.4423, 0.6471, 0.4528, 0.4154, 0.725, 0.5529, 0.4359, 0.5862, 0.4513, 0.56, 0.0879], [0.6829, 0.3462, 0.5882, 0.4717, 0.4769, 0.6375, 0.4706, 0.6026, 0.5345, 0.5575, 0.6933, 0.0], [0.5976, 0.3846, 0.4706, 0.3962, 0.4308, 0.6875, 0.5647, 0.3718, 0.5862, 0.6372, 0.8267, 0.2088], [0.7073, 0.5769, 0.4706, 0.5283, 0.5538, 0.7625, 0.5294, 0.8333, 0.6207, 0.6195, 0.8267], [0.4512, 0.4615, 0.4265, 0.6226, 0.6615, 0.8625, 0.7412, 0.859, 0.3621, 0.7965, 0.8133, 0.0], [0.4146, 0.5577, 0.6029, 0.434, 0.5077, 0.825, 0.5647, 0.7821, 0.569, 0.7168, 0.96, 0.1978]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

