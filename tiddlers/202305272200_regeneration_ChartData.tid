created: 20230527220043000
creator: Drevarr
modified: 20230705163532052
modifier: drevarr
tags: ChartData
title: 202305272200_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Daddy Demon", "Lucas Ryn", "Tootsie Pop Rocks", "Johosh Of The North", "Zadey Starbolt", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[56.4494, 149.526, 214.2482, 14.2203, 261.6894, 207.4464, 113.8914, 197.554, 0.0, 80.4086, 23.7088, 0.0, 70.3395, 12.817, 62.7648], [215.46, 189.4805, 133.9395, 249.6917, 222.6168, 132.1488, 202.3847, 0.0, 83.7767, 27.8355, 107.0345, 25.3984], [57.3193, 42.4694, 37.4223, 20.3756, 52.512, 15.0313, 213.1632, 5.0544, 114.1571, 73.6169, 131.9256, 94.365, 118.9818, 34.3784, 134.699, 126.0378, 70.7616, 119.5418, 21.3907, 44.5801, 62.248, 7.0232, 95.5647, 41.8131, 71.5456], [2.3543, 0.0, 0.0, 0.0, 2.316, 0.0, 0.0, 0.0, 0.0, 563.8088, 0.0, 443.88, 725.789, 69.8724, 188.7178, 189.3654, 272.9916, 245.7889, 0.0, 203.4084, 50.2051, 0.0, 239.3622, 0.0, 224.1344], [361.8877, 33.2485, 162.7895, 153.5565, 81.372, 67.9342, 896.5902, 205.497, 305.9498, 396.0033, 359.8783, 614.79, 415.1413, 288.1317, 368.1619, 665.469, 277.83, 479.9697, 0.0, 183.8632, 179.2246, 193.1045, 199.1558, 115.7632], [304.2887, 75.217, 212.4923, 19.1414, 192.396, 121.5007, 968.5878, 286.5294, 362.6486, 1280.3617, 598.1328, 868.239, 1456.2725, 185.5071, 590.6124, 1131.7824, 786.3534, 830.592, 5.1426, 438.1369, 155.0099, 58.6354, 600.1726, 254.4685, 533.8816], [458.2047, 175.2504, 164.5146, 217.9498, 251.424, 199.005, 1243.845, 292.1994, 445.7805, 1319.4477, 491.5411, 873.99, 1190.3846, 239.4006, 848.4185, 1332.1728, 465.6204, 1322.314, 88.7243, 387.855, 152.7581, 56.889, 580.0064, 367.8746, 564.9728]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

