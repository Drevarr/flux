created: 20230625214748000
creator: Drevarr
modified: 20230705163536479
modifier: drevarr
tags: ChartData
title: 202306252147_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Arriasa", "K\u00f4sair", "Blancooo Padreee", "Grasszanine", "Newtype Khan", "Zayde Sunsabre", "Tegan Parker", "Seiker Novus Terra", "Drevarr Moonwillow", "Elonith Primal"];
const professions = ["Spellbreaker", "Druid", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Tempest", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[246.7046, 150.7243, 117.6077, 41.2776, 156.1829, 217.6247, 471.4466], [0.0, 0.0, 0.0, 0.0, 113.8603, 101.8563, 350.0874, 436.8865, 40.2058, 60.6698, 3.1824, 0.0, 265.265, 0.0, 120.6621], [210.7123, 0.0, 0.0, 0.0, 95.8574, 78.6695, 236.8621, 237.48, 232.6934, 0.0, 0.0, 441.9935, 0.0, 0.0], [241.8125, 0.0, 166.3718, 0.0, 103.5955, 308.2188, 368.6329, 510.0204, 174.8846, 0.0, 91.9224, 16.3834, 200.1545, 0.0, 0.0], [230.1062, 111.1646, 54.6605, 41.364, 194.5574, 238.6584, 544.978, 425.93, 265.8163, 0.0, 77.6016, 0.0, 570.8365, 0.0, 7.3986], [272.039, 131.5747, 323.0227, 0.0, 316.4717, 265.6545, 579.7915, 474.686, 189.7795, 0.0, 36.2304, 34.5092, 569.4585, 67.2374, 47.0914], [165.4598, 0.0, 0.0, 34.6248, 241.4597, 672.7484, 890.5103, 703.6748, 311.3342, 43.5714, 478.3392, 19.0454, 938.0735, 65.4684, 94.8838], [569.7619, 175.4976, 255.0557, 19.3968, 689.3208, 691.2979, 1509.6704, 1335.0373, 444.4507, 0.0, 128.1528, 14.4474, 1372.1435, 14.62, 23.8572], [1011.9782, 323.4101, 577.919, 59.724, 1003.5816, 881.4296, 1862.686, 1628.121, 623.8142], [599.9885, 176.1278, 298.7203, 54.3888, 581.4614, 673.7422, 1482.6655, 1541.0177, 612.6691, 95.8984, 503.9208, 71.0512, 1646.021, 14.7662, 82.7864], [1430.6074, 436.0291, 637.5197, 32.1624, 1360.9546, 1220.9506, 2156.4861, 2321.3872, 842.8627, 37.6165, 640.2744, 32.0408, 2142.4455, 25.5119]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

