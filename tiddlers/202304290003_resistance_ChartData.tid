created: 20230429000309000
creator: Drevarr
modified: 20230705163527284
modifier: drevarr
tags: ChartData
title: 202304290003_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Rudjulin", "Sub Train", "Khailerian", "Endless Endings", "Tika Rucola", "Primal Clone", "Miphest\u00f6", "Hyde En Sikh", "Viral Marketing", "Air One Com", "Sister Elon\u00edth", "Blancooo Padreee", "Aronorf Xideliesi", "Koralia Danai", "Newtype Khan", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Vindicator", "Spellbreaker", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[242.5714], [132.9696, 84.9972, 65.151], [55.2459, 0.0, 0.0, 0.0, 122.8221, 0.0, 0.0, 39.9247, 0.0, 0.0, 0.0, 0.0, 0.0, 80.2129], [113.058, 7.0774, 2.3755, 18.8065, 0.0, 0.0, 9.389, 0.0, 15.3701, 137.5538], [23.2076, 30.0308, 13.5553, 0.0, 117.6831, 11.3929, 15.9923, 40.7994, 0.0, 7.9032, 4.6945, 0.0, 6.332, 168.4792], [30.7246, 36.7472, 12.5478, 122.5651, 30.8414, 5.048, 33.4268, 4.5288, 0.0, 6.6371, 11.7386, 11.6899, 152.3722], [50.7941, 48.25, 21.829, 116.1414, 19.6211, 4.1147, 36.8632, 0.0, 6.9962, 5.1802, 6.9631, 6.8191, 157.8486], [27.3675, 34.1224, 15.1429, 1.0819, 159.0521, 15.0179, 0.0, 28.4909, 0.0, 7.1258, 15.5135, 14.4191, 6.2779, 201.6596], [47.4436, 482.0382, 34.5815, 1.2726, 80.0369, 0.0, 0.0, 16.0801, 0.0, 7.8474], [44.6638, 82.5268, 8.1515, 201.1919, 9.9544, 0.0, 33.9266, 0.0, 0.0, 0.0, 0.0, 3.626, 288.3153], [98.2311, 157.3336, 92.9028, 0.0, 450.1764, 47.8157, 5.0904, 69.6027, 0.0, 0.0, 15.6484], [90.2763, 263.8696, 76.9356, 0.0, 439.8984, 46.78, 0.0, 53.5454, 0.0, 0.0, 0.0, 0.0, 0.0, 284.4496], [134.94, 19.686, 85.8504, 15.7898, 316.5624, 44.3633, 14.338, 50.9212, 40.1064, 66.0756, 30.2985, 59.0628, 46.922, 371.7496], [93.9982, 101.2864, 63.0444, 582.7626, 18.7005, 6.1509, 55.6697, 0.0, 22.0252, 0.0, 4.9912, 7.6309, 413.3056], [151.1416, 109.238, 110.6407, 0.0, 292.1522, 43.5578, 0.0, 78.1625, 0.0, 0.0, 7.0957, 27.236, 0.0, 706.1309], [175.079, 193.4632, 97.2991, 0.0, 533.9421, 21.9227, 7.678, 65.5415, 0.0, 47.8076, 10.4143, 6.2236, 23.001, 585.0062], [67.9444, 185.666, 47.2604, 11.9638, 603.0616, 45.6868, 19.4708, 88.9715, 6.1608, 5.9598, 26.1436, 11.9851, 5.9532, 710.963]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

