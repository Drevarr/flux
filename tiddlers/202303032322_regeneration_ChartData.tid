created: 20230303232222000
creator: Drevarr
modified: 20230705163521097
modifier: drevarr
tags: ChartData
title: 202303032322_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Viral Marketing", "Delynai", "Stoic Rapidfire", "Zadie Miststep", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Druid", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12.4018, 213.435, 0.0, 0.0, 30.9263, 0.0, 42.352, 20.7024, 35.6556, 407.8486, 132.6816, 103.1063, 670.1984, 111.0056, 2.0213, 25.9038, 354.3888, 40.3847, 542.3791, 205.9512, 16.2139, 0.0, 941.6966, 111.9978, 135.9072, 132.3712], [18.9651, 52.0065, 4.5144, 54.5928, 259.9758, 53.5622, 79.8037, 741.2128, 140.3438, 52.4005, 36.2653, 498.5764, 0.0, 849.9508, 378.8266, 10.8892, 0.0, 1050.1056, 122.9886, 184.14, 151.4632], [1809.5644, 868.3954, 2.772, 2559.335, 92.0286, 197.2872, 667.9018], [19.1488, 591.4215, 121.8635, 0.187, 8.7318, 426.7733, 88.692, 353.2536, 572.6843, 7.9989, 478.9814, 197.9402, 119.1204, 2158.3238, 860.1462, 624.9672, 680.0729], [56.3094, 470.2455, 0.0, 35.7405, 25.4331, 9.4412, 81.624, 246.7512, 863.2672, 153.3917, 271.44, 1151.1808, 199.4202, 54.9933, 25.051, 538.532, 1354.3995, 413.7571, 12.2324, 24.9984, 1883.3933, 419.8176, 477.576, 392.6588], [67.3948, 325.1097, 0.0, 5.6941, 209.8003, 0.0, 181.4093, 257.7312, 80.7024, 1587.5118, 6.0221, 549.12, 1268.2144, 288.1847, 121.1247, 102.2081, 1236.7127, 0.0, 1346.6586, 636.7872, 14.9027, 0.0, 2742.8486, 815.7186, 536.8176, 349.4631], [206.0142, 1474.0785, 98.967, 13.3523, 352.1859, 201.7785, 512.7041, 329.9388, 837.984, 3543.4148, 553.4194, 576.3713, 4912.1408, 805.4277, 212.1529, 175.357, 3408.5601, 8.1025, 4360.965, 1174.8106, 327.859, 122.85, 6234.3648, 1010.7666, 1224.828, 1420.5244]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

