created: 20230826003133000
creator: Drevarr
tags: ChartData
title: 202308260031_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Air One Com", "Vylade Vinzanti", "Drevarr Moonwillow", "Arcanophage Farra", "Bee Nemesis", "Newtype Khan", "Mike The Archmagus", "Tegan Parker", "High Sorcer Baradun", "J\u00e2sm\u00eene"];
const professions = ["Firebrand", "Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 27.1555, 18.9764, 0.0, 0.0, 0.0, 0.0, 163.3955, 0.0, 27.3489, 26.0501, 19.7784, 56.2857, 42.6302, 0.0, 0.0, 0.0, 0.0, 468.2126, 52.8818], [28.7722, 0.0, 0.0, 28.691, 48.6063, 0.0, 26.7758, 31.1032, 0.0, 182.5715, 0.0, 23.9638, 47.0012, 160.0394, 77.1243, 78.561, 0.0, 0.0, 651.1697, 32.7136], [192.7902, 205.9148, 85.1787, 255.3673, 221.4869, 31.092, 36.2544, 219.7812, 15.2929, 160.0988, 922.2458, 36.6135, 336.0665, 122.3447, 148.2281, 421.0404], [0.0, 0.0, 0.0, 192.5454, 100.7321, 64.764, 0.0, 0.0, 0.0, 0.0, 690.7355, 0.0, 0.0, 0.0, 0.0, 338.7428, 85.5965, 0.0, 169.8414, 0.0, 1819.734, 60.4613], [154.0231, 95.4772, 0.0, 275.8107, 108.2466, 4.788, 73.8847, 92.7213, 0.0, 89.8605, 157.2032, 168.265, 0.0, 96.2122, 8.7355, 390.3258, 185.3807, 34.2342, 159.217, 18.7153, 1521.1993, 0.0], [165.3145, 145.8912, 0.0, 0.0, 108.2466, 77.688, 74.9876, 118.751, 9.2524, 34.2855, 546.9155, 0.0, 104.1641, 0.0, 87.0988, 53.2369, 433.9729, 8.0016, 0.0, 193.1852, 0.0, 0.0, 1760.2238, 46.2607], [195.0194, 372.8073, 274.659, 119.268, 100.8353, 229.4136, 29.6749, 370.0867, 1516.1025, 658.0944, 4.199, 264.618], [0.0, 48.393, 194.3567, 0.0, 131.248, 0.0, 85.8362, 705.408, 351.3962, 46.284, 235.7578, 58.2738, 2751.2411, 143.748], [432.837, 240.7132, 129.3165, 157.8881, 224.1027, 37.668, 62.5825, 146.9129, 90.5587, 167.6227, 1316.3525, 282.1634, 106.327, 199.9733, 186.7685, 1055.4667, 115.3166, 68.8514, 513.4148], [307.6279, 266.9576, 127.8614, 202.7671, 163.5113, 0.0, 131.04, 31.0297, 150.0097, 1249.0367, 232.1673, 38.961, 117.1566, 235.9948, 1183.7628, 127.6888, 0.0, 581.8751, 0.0, 4179.4864, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

