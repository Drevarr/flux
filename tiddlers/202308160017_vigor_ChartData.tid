created: 20230816001725000
creator: Drevarr
tags: ChartData
title: 202308160017_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Pafema", "Sakis Unleashed", "P\u00edogre", "Drevarr Moonwillow"];
const professions = ["Druid", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 54.7184, 0.0, 0.0, 25.5981, 6.6797, 0.0, 23.3291, 47.5881, 27.2381, 0.0, 27.1998, 0.0, 24.6153, 32.373, 26.9941], [50.0976, 0.0, 0.0, 86.5977, 0.0, 0.0, 74.6586, 69.617, 58.3058, 21.5899, 7.1845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.945, 0.0], [36.5288, 41.7165, 0.0, 21.1085, 30.6835, 0.0, 8.3421, 0.0, 42.0648, 21.0127, 10.4841, 8.8954, 29.9164, 0.0, 32.7525, 0.0, 136.2381, 21.2709, 0.0, 80.3533, 0.0, 122.3628, 0.0, 0.0, 68.6426, 95.8579, 47.8508, 63.9485, 0.0, 46.9581, 57.3926, 11.1, 0.0, 0.0, 20.8347, 41.184, 47.68, 0.0, 5.7658, 20.8182, 13.7228, 10.5931, 0.0, 266.704, 42.1848, 141.3618, 0.0, 41.876, 32.7955, 36.72, 0.0, 16.5634, 0.0, 36.2824, 42.2712, 0.0, 40.7974, 23.4306, 12.2061, 93.9822, 26.0091, 0.0, 41.6416, 15.0851, 0.0, 0.0, 23.664, 113.9718, 0.0, 85.7362, 130.7281, 22.759, 0.0, 0.0, 30.5406, 0.0, 605.8293], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.8122, 15.0552, 44.9426, 33.7392, 71.7254, 45.7425, 47.2665, 15.3945, 45.6918, 209.8413, 0.0, 145.9269, 43.8387, 99.2286, 5.0262, 77.5572, 40.2261, 62.4096, 41.5856, 200.7445, 45.7215, 94.6421, 35.8574, 96.2933, 86.9763, 70.7958, 0.0, 0.0, 30.562, 20.1531, 14.485, 30.6403, 13.9999, 55.5672, 20.2066, 11.1464, 11.6663, 489.5875, 31.3992, 172.6678, 57.3989, 70.3912, 35.014, 87.6928, 11.3946, 32.3506, 31.6526, 68.5642, 64.3248, 0.0, 71.2264, 50.0857, 36.0042, 66.9035, 49.4988, 39.7874, 39.6783, 40.1676, 117.6422, 0.0, 48.195, 202.2094, 81.0051, 44.45, 59.0564, 46.0153, 43.4772, 104.4138, 1232.6109]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

