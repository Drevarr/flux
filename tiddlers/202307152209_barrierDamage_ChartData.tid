created: 20230715220952000
creator: Drevarr
tags: ChartData
title: 202307152209_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Glorious Gluvs", "Arriasa", "Xanvias Einzbern", "Grasszanine", "Primal Clone", "Brygdyla", "Daring Deathblade", "Legacy Of Mathus", "Duke Silvver", "Ax Axun", "Ryvalia Fazebringer", "Bella Sassy", "High Sorcer Baradun", "Tika Fiery", "Lost In Sauce", "Aronorf Xideliesi", "Artakama Nahid", "Crusader Siolith", "Belvyn Brightblade", "Sygaldry Verdandi", "Drevarr Moonwillow", "Gestalia Yesteryear", "Satori Krull", "Blancooo Padreee", "Newtype Khan", "Dark Sidiuz", "Rina Of Theros", "Tootsy Pop Star", "Be\u00eb", "Lord Of Bones", "Yobam N", "My Birthday Girl", "Lucky Luprac\u00e1n", "Daphne Agla\u00e9"];
const professions = ["Druid", "Berserker", "Druid", "Berserker", "Spellbreaker", "Chronomancer", "Tempest", "Reaper", "Berserker", "Vindicator", "Vindicator", "Chronomancer", "Firebrand", "Tempest", "Firebrand", "Vindicator", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Druid", "Scrapper", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Reaper", "Scrapper", "Scrapper", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4685, 11593, 5061, 749, 0, 0, 0, 0, 2167, 744, 1878, 7538, 0, 421, 1703, 0, 0, 0, 0, 4071, 0, 0, 5113, 0, 4627], [508, 7920, 5020, 2250, 1458, 0, 0, 0, 10276, 0, 3293, 7685, 5000, 33, 0, 0, 0, 0, 0, 0, 7337, 0, 0], [6961, 6439, 6734, 0, 3313, 0, 472, 0, 6938, 0, 4695, 3395, 0, 4839, 0, 0, 0, 0, 3425, 0, 805, 2676, 0, 421], [1867, 6878, 11156, 724, 3835, 0, 0, 0, 1444, 0, 269, 2887, 0, 4713, 0, 0, 0, 0, 0, 0, 0, 3310, 14304, 0, 680], [8212, 7926, 11520, 3688, 1689, 0, 0, 6596, 0, 2632, 7737, 0, 5103], [5449, 7448, 9773, 1265, 421, 0, 0, 0, 5044, 0, 753, 8383, 4491, 842, 344, 0, 0, 1482, 0, 2445, 8229, 0, 842], [870, 12697, 15391, 7639, 421, 0, 4270, 0, 4257, 273, 2196, 1675, 0, 3513, 1612, 0, 48, 0, 0, 0, 22, 578, 4325], [1891, 1700, 3495, 0, 7991, 0, 9285, 17, 8007, 1672, 0, 3759, 4589, 0, 844, 0, 3959, 0, 2432, 8452, 0, 2905], [4660, 11741, 5991, 4161, 2513, 0, 170, 0, 5387, 1380, 6451, 4539, 0, 2535, 1248, 0, 0, 0, 0, 0, 0, 1281, 8113, 0, 1517], [421, 8535, 3601, 2666, 0, 2190, 0, 18991, 421, 3137, 1606, 0, 601, 3339, 0, 744, 0, 421, 0, 2420, 9810, 0, 3747], [4777, 8833, 5146, 0, 5128, 0, 0, 242, 13808, 0, 0, 0, 0, 7619, 3232, 0, 0, 0, 0, 1667, 0, 4706, 6365, 0, 2353], [3523, 12414, 6899, 1248, 5733, 0, 1022, 1677, 6915, 1265, 2503, 421, 1641, 0, 1464, 0, 0, 1248, 0, 1402, 16310, 0, 2551], [5736, 11677, 16841, 642, 2377, 0, 387, 0, 484, 928, 2016, 7126, 0, 6010, 0, 0, 0, 0, 4699, 0, 8298, 12850, 0, 1809], [8990, 13950, 8216, 2980, 2332, 0, 4153, 0, 18876, 0, 7894, 3924, 0, 6046, 2307, 193, 0, 0, 0, 110, 0, 1406, 0, 842], [6341, 25144, 8982, 0, 1119, 0, 0, 0, 13301, 421, 5068, 2924, 0, 5096, 0, 269, 0, 0, 0, 421, 0, 1194, 13744, 0, 0], [11285, 18714, 21347, 2372, 1921, 0, 5189, 0, 19892, 6961], [14340, 13983, 15154, 5349, 2771, 0, 0, 0, 2441, 421, 3786, 0, 0, 3445, 0, 0, 0, 0, 0, 6874, 0, 3536, 13813, 0, 3403], [5726, 22844, 12002, 0, 1961, 0, 1364, 924, 3361, 769, 3490, 8878, 0, 5431, 1686, 1740, 0, 6803, 0, 2110, 12934, 0, 2655], [9982, 14223, 18079, 4203, 2474, 0, 3635, 0, 11255, 2092, 650, 10518, 0, 2874, 0, 269, 0, 0, 3931, 0, 4411, 4628, 0, 2699], [12819, 28692, 13775, 6024, 848, 0, 4222, 30296], [9202, 12713, 15687, 2162, 2830, 2279, 1260, 0, 3917, 64, 3976, 10045, 0, 10183, 1378, 0, 0, 3300, 0, 5460, 17842, 0, 5098], [16127, 21126, 23844, 2699, 3346, 0, 2374, 0, 3606, 371, 5277, 7728, 1952, 45, 0, 0, 2869, 730, 9641, 13913, 0, 3293], [20008, 24225, 30837, 8637, 2009, 0, 587, 0, 9071, 760, 8753, 13669, 15490, 0, 0, 0, 0, 0, 6129, 0, 8120, 16487, 0, 2542], [16834, 72032, 31081, 945, 7718, 24120, 5062, 27559], [20839, 44616, 21935, 6768, 3345, 0, 5478, 1516, 27712, 132, 5169, 5369, 0, 11754, 1999, 1441, 0, 0, 7445, 0, 5574, 18983, 0, 10664], [21491, 42899, 30699, 8097, 8127, 0, 7290, 636, 21689, 323, 2224, 9500, 0, 9206, 0, 763, 842, 0, 0, 2116, 0, 4825, 22611, 0, 12534], [32304, 74525, 2105, 24383, 6230, 0, 6083, 0, 40794, 9905, 21675, 17783, 0, 15215, 2881, 0, 0, 0, 0, 6740, 0], [33771, 71973, 79806, 20573, 9036, 151, 4560, 459, 28298, 1065, 16788, 10454, 0, 23378, 0, 359, 0, 0, 0, 18980, 0, 21591, 33132, 0, 11536], [31498, 40605, 67989, 31471, 20150, 0, 20918, 0, 27585, 10132, 26482, 20631, 0, 35657, 6937, 0, 0, 0, 13776, 0, 26728, 46484, 0, 33745], [23061, 95869, 82547, 12118, 13328, 0, 15886, 0, 29647, 8662, 13205, 28218, 0, 32581, 12124, 1015, 0, 0, 0, 10987, 0, 24517, 84562, 0, 34032], [39221, 86995, 101054, 8273, 16894, 0, 7009, 0, 26604, 4712, 17587, 35665, 25836, 11023, 370, 0, 0, 0, 28565, 792, 25057, 82545, 0, 30420], [1881, 9829, 8925, 173263, 16817, 30040, 34528, 80390, 11678, 5797, 0, 0, 20680, 5135, 23964, 86468, 21, 58548], [54116, 141654, 93957, 24103, 17626, 0, 3884, 2651, 57563, 7544, 0, 21996, 0, 26391, 650, 0, 11113, 0, 25665, 63845, 0, 31767], [72285, 151522, 116630, 37338, 28529, 4215, 16102, 0, 37843, 5522, 28576, 46343, 0, 24686, 3570, 646, 0, 0, 22990, 0, 45390, 12260, 0, 37542], [106302, 83182, 139057, 59973, 22199, 0, 24842, 8708, 196306, 7714, 35482, 4595, 0, 63591, 17624, 580, 668, 0, 0, 61484, 29051, 28882, 83311, 0, 28207]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

