created: 20230426221022000
creator: Drevarr
modified: 20230705163526716
modifier: drevarr
tags: ChartData
title: 202304262210_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Miphest\u00f6", "Cyclotechnist Farra", "Black Raspberry Pie", "Primal Clone", "Eibh\u00ebar", "Rey Peltrow", "Mac Adaymia", "\u00c1rkantor", "High Sorcer Baradun", "Tegan Parker", "Drevarr Moonwillow", "Zadie Miststep"];
const professions = ["Firebrand", "Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Vindicator", "Vindicator", "Tempest", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0923, 0.15, 0.2246, 0.0224, 0.0076, 0.1125, 0.1104, 0.1266, 0.0542, 0.2044, 0.0, 0.2184, 0.0615, 0.0, 0.1414, 0.1355], [0.0, 0.2346, 0.2246, 0.0448, 0.0, 0.1875, 0.2331, 0.1656, 0.0887, 0.3522, 0.4186, 0.2356, 0.0115, 0.0, 0.2222, 0.1743], [0.1692, 0.2808, 0.3178, 0.1045, 0.0, 0.025, 0.2577, 0.1878, 0.0887, 0.1626, 0.0465, 0.2069, 0.0269, 0.0, 0.0, 0.2415], [0.1692, 0.2013, 0.4153, 0.0597, 0.1591, 0.225, 0.2454, 0.1888, 0.133, 0.2414, 0.0, 0.3276, 0.0231, 0.0, 0.0101, 0.2309], [0.0, 0.4154, 0.3771, 0.0075, 0.0, 0.1375, 0.454, 0.1224, 0.0246, 0.1946, 0.0, 0.2126, 0.1423, 0.0, 0.0808, 0.2026], [0.0769, 0.2923, 0.7331, 0.097, 0.053, 0.15, 0.4233, 0.1698, 0.069, 0.399, 0.0, 0.4425, 0.0731, 0.0, 0.0, 0.1885], [0.9795, 1.6186, 0.2164], [0.1231, 0.3846, 0.411, 0.0448, 0.0455, 0.325, 0.1779, 0.1962, 0.0887, 0.4631, 0.1163, 0.3851, 0.1269, 0.0, 0.2727, 0.3204], [0.0615, 0.4026, 0.6568, 0.194, 0.053, 0.325, 0.2025, 0.3407, 0.1724, 0.5099, 0.0, 0.6609, 0.0923, 0.0, 0.2525, 0.4982], [0.2769, 0.5077, 0.9025, 0.097, 0.2273, 0.45, 0.4356, 0.519, 0.1527, 0.702, 0.0465, 0.592, 0.2115, 0.0, 0.0303, 0.6443], [0.2462, 0.95, 1.5127, 0.0672, 0.4394, 0.675, 1.1043, 0.865, 0.2315, 1.3473, 0.5581, 1.1322, 0.3308, 0.0, 0.3838, 0.9623], [0.7385, 1.4064, 2.1229, 0.3657, 0.2955, 1.2375, 1.1411, 1.1013, 0.7438, 1.7857, 0.3721, 1.1149, 0.6231, 0.5778, 0.798, 1.4759], [0.8462, 1.3833, 2.178, 0.1493, 0.4091, 1.0125, 1.1963, 1.2416, 0.5911, 1.7143, 0.2558, 1.5575, 0.6154, 0.0, 0.9899, 1.4982]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

