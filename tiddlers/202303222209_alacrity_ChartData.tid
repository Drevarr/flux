created: 20230322220917000
creator: Drevarr
modified: 20230705163522754
modifier: drevarr
tags: ChartData
title: 202303222209_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Primal Clone", "Sizzln Sisigbringer", "Venomina The Siren", "Macette", "Eibh\u00ebar", "Zadie Miststep", "Black Raspberry Pie", "Abigail Ryn"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[281.3645, 34.2235, 0.0, 0.0, 28.1424, 58.9824, 0.3456, 33.8218, 0.0, 0.0, 34.2566, 55.7424, 170.52, 35.799, 74.4682, 20.736, 44.9447, 8.8969, 33.3056, 0.0, 9.3773, 0.0, 0.0, 10.7525, 0.0], [284.832, 90.3491, 51.037, 0.0, 32.6832, 64.0973, 57.6288, 93.4685, 99.6541, 101.8406, 79.4976, 535.108, 121.8706, 100.8086, 27.792, 0.0, 55.4967, 43.9102, 156.116, 127.7971, 27.8259, 31.5887, 46.129, 0.0, 9.7619], [309.1046, 106.5516, 73.531, 36.409, 112.992, 91.2384, 75.6, 47.8397, 57.5867, 0.0, 113.879, 62.916, 953.288, 73.9054, 63.697, 118.908, 67.1911, 138.4664, 42.7427, 143.7136], [60.9293, 71.2154, 43.033, 43.217, 140.3952, 124.7846, 125.0784, 117.8352, 126.9047, 0.0, 72.864, 70.119, 775.46, 65.2354, 134.1014, 91.908, 69.2072, 95.7499, 64.406, 160.8107, 64.3738, 34.702, 113.1671, 43.9949, 0.0, 47.5565], [116.6573, 95.8042, 102.442, 0.0, 136.5936, 109.9469, 71.8848, 106.0752, 133.4119, 135.4637, 53.1552, 911.064, 67.7525, 126.2678, 47.88, 66.913, 110.9354, 96.155, 109.1691, 69.9494, 59.831, 0.0, 19.535, 22.6709], [582.048, 82.7227, 67.873, 0.0, 189.1824, 22.7174, 47.2032, 34.8566, 83.5848, 0.0, 57.5309, 59.3586, 825.804, 130.6106, 184.1875, 81.864, 38.1317, 94.9385, 98.5223, 54.8648, 112.3373, 47.4183, 77.1825, 34.6104, 31.0304, 0.0], [719.7581, 83.157, 72.795, 58.926, 149.3712, 161.0496, 94.9248, 108.145, 64.766, 6.2525, 149.6986, 80.6736, 868.028, 220.5277, 57.6259, 50.652, 48.1426, 25.1546, 78.5779, 112.4623, 126.2131, 62.2064, 27.4358, 82.8461, 30.4708, 40.2569], [1013.5066, 74.445, 122.337, 50.577, 72.6528, 129.577, 123.8976, 99.96, 0.0, 26.208, 165.6653, 115.2774, 1235.864, 344.7056, 122.8896, 59.508, 117.5236, 69.7259, 35.5108, 90.6706, 94.343, 47.1147, 37.9506, 0.0, 25.0895, 14.9342], [1685.2147, 145.2261, 97.336, 82.478, 231.1056, 317.0765, 174.5568, 277.2538, 199.0638, 43.6925, 211.2, 125.2146, 2749.432, 431.1966, 108.2016, 112.536, 0.0, 117.0723, 292.8225, 349.9373, 100.8911, 155.845, 122.5454, 43.5494, 36.9787]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

