created: 20230610101822000
creator: Drevarr
modified: 20230705163534672
modifier: drevarr
tags: ChartData
title: 202306101018_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Noises", "F\u00e2ble", "Drevarr Moonwillow", "F\u00e2ble", "Elonith Requiem", "Slang\u00efn", "Xanvias", "Alarics Bane", "Charr Surethang"];
const professions = ["Virtuoso", "Herald", "Scrapper", "Vindicator", "Reaper", "Herald", "Reaper", "Reaper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[494.975, 55.0, 417.0137, 419.7765, 341.6071, 541.9296, 235.7105, 168.6747, 323.9412, 526.5753, 1068.3351, 464.9429, 478.25, 458.6889], [587.7292, 899.7123, 1588.2353, 2986.623, 2818.1143], [2539.3846, 3001.9333, 2222.2273, 482.0833, 1217.7193, 1509.2222, 1438.8276, 2613.1809, 2162.0323, 658.525, 496.6458, 2088.4658, 1045.2471, 1109.4107, 959.2113, 1854.1228, 61.3253, 171.5647, 139.2603, 293.2042, 85.7524, 71.0714], [1253.7692, 2669.0, 0.0, 137.125, 2684.1404, 870.7222, 2657.0517, 2372.8298, 1647.7419, 975.6875, 676.3571, 1556.6479, 2288.114, 1215.4337, 3316.1882, 1083.5342, 23.7321, 66.7667, 0.0], [1524.6154, 3310.9333, 0.0, 1083.2292, 1326.807, 1144.463, 330.5172, 2356.9362, 2506.0323, 1337.8875, 432.2292, 697.3288, 1902.5647, 1626.4107, 500.4225, 797.7193, 1008.8795, 215.3765, 1779.7123, 2507.199, 1142.3714, 643.2], [1930.6154, 2726.1, 0.0, 596.4583, 650.614, 1084.5741, 1226.6552, 2017.9681, 2910.5484, 1541.725, 596.7708, 1181.5753, 580.7176, 1009.0179, 521.8169, 761.6316, 550.1084, 1624.9765, 1682.411, 4133.4974, 1204.4667, 291.6607, 1342.9222, 1410.5], [1558.3889, 2782.3793, 2187.9362, 1634.5806, 1463.65, 590.6667, 1897.0959, 1626.9882, 2102.4643, 765.2254, 1973.5351, 1989.988, 2969.2471, 2747.8493, 3752.0524, 2266.4667, 480.0357, 1019.9778, 779.1964], [880.7308, 3865.5667, 0.0, 2151.4167, 1656.3684, 1697.7222, 1969.0862, 2568.734, 3746.8065, 1737.125, 640.1458, 1459.6986, 1779.9529, 1880.6964, 239.4648, 3368.807, 1073.494, 2858.8706, 2829.6986, 3015.1885, 768.9714, 87.4107, 2020.0222, 1407.8393], [5962.1667, 0.0, 2002.0625, 6249.2807, 3158.5556, 4658.6724, 3293.3723, 6344.3226, 1322.7, 99.75, 2904.2329, 2454.0941, 4593.6964, 1731.4912, 876.1687, 3118.4, 4261.0137, 3617.4555, 923.8571, 128.4286, 4963.3778, 3437.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

