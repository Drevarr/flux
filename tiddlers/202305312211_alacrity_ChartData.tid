created: 20230531221142000
creator: Drevarr
modified: 20230705163532381
modifier: drevarr
tags: ChartData
title: 202305312211_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Soxx", "Etchery Of Ascalon", "Ryvalia Fazebringer", "Primal Clone", "Tegan Parker", "Eibh\u00ebar", "Black Raspberry Pie", "Artakama Nahid", "Johosh Of The North", "Venomina The Siren", "Miphest\u00f6"];
const professions = ["Willbender", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[146.523, 68.1917, 42.0768, 414.738, 160.4299, 0.0, 0.0, 18.0264, 143.7025, 8.037, 39.0852, 32.2251, 32.0776, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 655.3495, 63.7546, 140.6496, 288.0672, 37.7175], [202.878, 101.7442, 0.0, 486.325, 227.9088, 0.0, 0.0, 48.1296, 35.955, 15.1096, 36.0584, 80.1613, 187.8833, 0.0, 0.0], [400.452, 160.0195, 111.8448, 1215.4234, 258.967, 0.0, 74.2468, 56.0328, 122.905, 62.5279, 59.2858, 146.7904, 199.3396, 25.879, 29.5762], [564.213, 326.2877, 0.0, 1159.3988, 391.4669, 46.5977, 28.2652, 112.4208, 157.8025, 130.119, 75.67, 220.3003, 252.4429, 33.6794, 100.9983], [806.871, 263.9371, 32.9616, 1266.7794, 365.7713, 32.5625, 0.0, 133.4664, 222.8975, 64.6979, 66.2606, 163.6484, 302.7159, 36.6643, 32.2016], [1061.463, 433.3296, 89.3376, 2112.5958, 666.5215, 33.8823, 143.3544, 300.2328, 327.4725, 282.0987, 271.9514, 419.3848, 523.6203, 73.8918, 224.8753], [1148.6475, 560.7475, 175.5648, 2751.4323, 851.3064, 90.3782, 167.5173, 378.5544, 460.835, 336.5092, 277.7418, 521.45, 636.2964, 117.4554, 262.4348], [1481.805, 783.661, 95.8176, 3605.03, 25.4722, 78.9318, 178.2012, 382.1064, 498.2, 334.8214, 242.9336, 571.2211, 542.6243, 77.3555, 84.067], [1081.0215, 484.813, 162.0432, 3609.6987, 1009.7254, 0.0, 248.8867, 412.2096, 453.55, 296.726, 248.1318, 344.1547, 563.9195, 89.3235, 84.0134], [1667.7765, 737.747, 141.3504, 3166.1703, 632.3352, 98.3221, 225.6705, 330.2472, 468.59, 422.3444, 358.0836, 427.183, 753.0159, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

