created: 20230501220820000
creator: Drevarr
modified: 20230705163527778
modifier: drevarr
tags: ChartData
title: 202305012208_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Gonzo Cc", "Drevarr Moonwillow", "Tegan Parker", "Lord Erin The Wise", "Primal Clone", "Xkaet", "Venomina The Siren", "Tyzzki", "Eibh\u00ebar", "Tika Sumiko", "Miphest\u00f6", "Zadie Miststep", "Black Raspberry Pie", "Mac Aaroni"];
const professions = ["Specter", "Scrapper", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[623.9163, 42.174, 166.2257, 121.4514, 30.5627], [286.876, 5.5324, 11.9944, 0.0, 35.7651, 24.6887, 315.0821, 13.5488, 207.9721, 0.0, 0.0, 2.7122, 0.0, 85.554], [94.6968, 40.0432, 788.1713, 71.3196, 95.9622, 0.0, 185.6386], [214.8908, 159.5638, 0.0, 43.2842, 43.315, 583.2462, 30.2528, 727.776], [635.2567, 114.3367, 32.0276, 0.0, 72.765, 98.1396, 569.9026, 66.816, 332.5532, 35.9172, 112.5362, 0.0, 0.0, 209.1999], [346.9895, 428.417, 28.7892, 112.4109, 308.4765, 1998.9634], [246.4585, 329.7128, 126.7706, 0.0, 125.5527, 165.0889, 794.5922, 60.552, 836.1843, 85.1202, 147.3594, 42.8211, 43.1457, 235.8167], [1335.5328, 180.5316, 0.0, 29.2248, 47.9147, 103.3234, 813.1012, 67.7904, 755.8257, 0.0, 116.3712, 0.0, 0.0, 220.1997], [1421.2002, 208.0966, 109.2894, 25.5123, 68.0684, 107.1892, 877.6672, 66.816, 803.0806, 52.5096, 165.4322, 0.0, 0.0, 129.01], [1286.7683, 353.3955, 142.9758, 45.3618, 89.8538, 220.6165, 748.1047, 41.7832, 1026.2147, 84.249, 109.4506, 45.7758, 0.0, 306.9759], [2187.3743, 382.8046, 241.9934, 43.3422, 70.119, 325.697, 1178.1143, 83.056], [1643.9354, 419.4933, 70.7542, 3.8412, 81.6512, 56.2304, 1068.3521, 76.212, 768.9661, 46.1142, 128.6695, 38.1244, 0.0, 174.0277], [1763.4305, 288.6564, 201.4166, 23.9184, 144.5157, 182.0459, 1098.4829, 83.4272, 893.5472, 62.0136, 102.9709, 0.0, 46.4502, 268.5445], [1533.6661, 370.5751, 237.2722, 23.1264, 54.0887, 206.7346, 1092.4567, 43.1056, 1182.1306, 107.5932, 149.6075, 39.8443, 63.5353, 283.5504]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

