created: 20230610164704000
creator: Drevarr
modified: 20230705163534897
modifier: drevarr
tags: ChartData
title: 202306101647_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Gestern Yesteryear", "Tootsie Pop Rocks", "Tegan Parker", "Sakis Ranger", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 80.5714, 26.79, 177.3542, 170.7049, 2.6897, 48.4068, 38.4884, 199.1098, 93.0, 80.0423, 24.2115, 38.8462, 760.6809, 29.0488, 0.0, 437.869, 121.8706, 78.8594, 202.2941, 151.2673], [43.3023, 5.5, 27.94, 351.0, 356.1967, 392.1379, 12.3107, 223.1628, 167.7195, 16.0, 7.2069, 12.4225, 2.9038, 26.9423, 0.0, 879.3085, 136.5122, 114.3043, 474.6166, 55.6471, 84.4844, 276.6303, 251.2772], [283.8605, 0.0, 1.27, 371.7083, 402.7213, 243.5287, 5.0395, 4.0698, 18.1829, 0.0, 6.8276, 1.1549, 0.9231, 27.5962, 0.0, 1559.4096, 419.4146, 46.6087, 886.3546, 36.5647, 35.1719, 225.4538, 743.1584], [542.1163, 13.33, 503.9167, 134.8852, 36.8851, 48.5932, 114.907, 82.0488, 6.6897, 12.5352, 217.2692, 63.5385, 10.8261, 1918.4521, 987.6098, 1110.6997, 61.2706, 284.5312, 613.7227, 795.5941], [59.5814, 35.2619, 74.99, 867.7708, 179.082, 27.5862, 223.9548, 244.7442, 325.7317, 0.0, 0.0, 93.4648, 29.3269, 68.0192, 38.3623, 2427.3138, 413.4878, 1365.0575, 14.5059, 368.5, 404.0588, 715.0594], [542.6744, 4.7619, 106.45, 1000.0833, 683.2787, 151.0345, 206.9605, 1597.4651, 563.9024, 262.8889, 472.5915, 768.1538, 142.9038, 20.0145, 3132.5691, 362.2439, 0.0, 1669.1182, 172.6588, 168.5625, 1111.7395, 1370.8911], [33.2093, 301.24, 1173.75, 402.8361, 59.1724, 119.4011, 697.9146, 10.2414, 153.5352, 283.7692, 78.7115, 29.7391, 3259.1011, 1198.7805, 112.087, 2072.7412, 229.7412, 481.625, 939.0084, 1617.6634]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

