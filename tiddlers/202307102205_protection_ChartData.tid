created: 20230710220511000
creator: Drevarr
tags: ChartData
title: 202307102205_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Artakama Nahid", "Belvyn Brightblade", "Venomina The Siren", "Ryvalia Fazebringer", "Colera Piadosa", "Nidircc", "Zaedy Zae", "Scarlet Merc\u00fcry", "Fribble Bibble", "Arriasa", "Gabe Malhorn", "Drevarr Moonwillow", "Tribal Z", "Sub Train", "Crusader Siolith", "Tika Fiery", "Solus Sanctus", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy"];
const professions = ["Tempest", "Tempest", "Firebrand", "Tempest", "Chronomancer", "Firebrand", "Tempest", "Druid", "Firebrand", "Scrapper", "Druid", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[248.6049, 0.0, 116.0859, 9.5648, 0.0, 19.0879, 50.5386, 0.0, 19.5782, 5.6448, 0.0, 0.0, 91.0209, 0.0, 9.2232, 14.2835, 4.2806, 0.0, 13.3056, 0.0, 19.1101, 9.4949], [316.9124, 0.0, 0.0, 0.0, 198.8224, 19.9757, 20.776, 56.448, 0.0, 13.1472, 0.0, 0.0, 0.0, 61.7415, 0.0, 0.0, 4.7432, 1.9874, 9.5232, 0.0, 0.0, 9.5159, 9.8775], [110.2769, 44.255, 0.0, 0.0, 117.5216, 0.0, 17.1142, 156.2022, 0.0, 73.2125, 25.321, 0.0, 0.0, 241.4495, 27.3117, 84.6485, 51.3128, 20.6388], [269.1614, 0.0, 0.0, 167.6192, 0.0, 80.2733, 207.5346, 44.0986, 0.0, 0.0, 0.0, 175.4646, 23.5846, 22.3114, 48.2944, 19.4922, 18.5088, 18.1056, 5.0362, 52.3178, 38.0493], [226.3354, 37.2141, 0.0, 53.6021, 81.536, 47.4912, 23.0354, 129.654, 31.8578, 12.0067, 52.9805, 23.1374, 32.5944, 174.4037, 22.8819, 48.5755, 44.0363, 28.4357, 14.9088, 23.232, 39.6451, 28.8609, 38.2824, 26.8502], [54.9576, 109.983, 12.2598, 29.1962, 85.8211, 118.5139, 80.8469, 48.8592, 627.811, 84.043], [21.3734, 33.0739, 65.4259, 91.4558, 21.384, 491.8101, 32.1997, 48.5462, 71.7409, 110.4558, 32.2176, 35.4816, 48.2827, 118.459, 0.0, 43.0924], [413.2709, 31.0741, 0.0, 0.0, 152.6448, 0.0, 29.0604, 153.1152, 22.4664, 21.4474, 34.1645, 0.0, 0.0, 221.5055, 13.9002, 28.7237, 71.8487, 0.0764, 14.6976, 16.8576, 0.0, 50.7122, 0.0, 40.9708], [1037.8881, 53.2085, 0.0, 0.0, 362.3648], [413.9133, 0.0, 17.8752, 165.6367, 141.12, 17.2829, 24.8013, 191.835, 0.5262, 11.785, 15.7248, 57.049, 49.8744, 30.3403, 54.4401, 37.6248, 62.1467, 103.2704, 0.0, 19.8528, 19.0027, 19.4234, 41.9447], [504.7044, 23.3264, 0.0, 161.3516, 102.7824, 45.288, 50.1481, 167.2272, 0.0, 18.913, 75.936, 23.8186, 10.9944, 210.6848, 47.4442, 35.6045, 45.3838, 97.3081, 0.0, 0.0, 0.0, 44.9557, 0.0, 11.3035], [488.4153, 122.3222, 148.3325, 216.1929, 208.987, 68.8032, 19.104, 161.8891, 44.6992, 199.3242], [456.9534, 38.0873, 12.9562, 190.7237, 182.5936, 12.8765, 57.5495, 144.5598, 0.0, 21.2256, 26.3155, 40.7021, 33.3072, 339.472, 26.7923, 17.041, 52.1752, 98.4547, 7.8144, 20.544, 7.7592, 27.6078, 14.6328, 54.7437], [710.2692, 0.0, 142.5753, 290.6288, 0.0, 58.2247, 242.109, 0.0, 18.5962, 79.296, 93.9946, 74.304, 584.3162, 22.2098, 33.467, 73.1962, 119.8579, 2.1984, 36.288, 0.0, 67.316, 0.0, 35.9277], [493.1414, 0.0, 0.0, 217.8736, 16.5485, 203.449, 281.358, 25.4113, 52.3354, 22.5254, 18.6586, 29.7, 542.3065, 101.09, 100.4011, 117.1247, 79.4976, 27.8208, 62.4576, 74.5176, 127.27, 125.5558], [551.813, 22.3285, 0.0, 60.2244, 173.4208, 35.2757, 170.1814, 419.6556, 24.1362, 41.089, 148.8883, 24.1075, 96.0984, 548.2473, 127.8212, 104.2661, 101.4398, 128.2663, 22.7616, 40.5696, 71.5018, 72.3285, 94.3929], [905.5558, 9.5911, 0.0, 105.646, 336.728, 18.7517, 83.5974, 263.0124, 24.4499, 0.0, 134.3462, 40.9085, 48.1464, 841.0419, 79.5827, 45.4718, 132.1089, 149.2109, 41.0496, 59.6544, 102.7728, 156.2092, 16.8844, 110.3917], [776.8636, 0.0, 0.0, 140.238, 326.8496, 17.0381, 133.33, 47.0988, 0.0, 106.9517, 137.76, 58.308, 22.5288, 842.7392, 109.7661, 179.8085, 227.458, 141.414, 50.8512, 91.7376, 86.903, 171.2858, 0.0, 177.2389], [346.4623, 0.0, 0.0, 56.4847, 264.208, 62.7912, 87.1813, 489.6864, 51.1566, 174.7469, 165.5808, 64.9954, 108.8208, 943.3078, 178.5342, 144.8774, 161.7, 168.2444, 45.2256, 65.9136, 88.2206, 90.1855, 15.7196, 123.6777], [873.2221, 57.8378, 246.6631, 463.5792, 66.145, 149.7171, 486.864, 40.9556, 137.9347, 86.7955, 60.8674, 105.5808, 845.0731, 178.6869, 156.3259, 224.5474, 189.1126, 89.8656, 20.7168, 48.1949, 160.2036, 153.2407], [1128.251, 13.0561, 0.0, 449.307, 460.3648, 32.6808, 182.3873, 549.2214, 48.3938, 115.1885, 113.2186, 27.7195, 75.6432, 1167.7837, 115.8456, 169.5605, 219.3191, 341.7632, 22.8288, 68.5056, 46.9358, 181.5849, 15.886, 155.0145]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

