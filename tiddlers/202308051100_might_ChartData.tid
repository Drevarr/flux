created: 20230805110022000
creator: Drevarr
tags: ChartData
title: 202308051100_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Valleria Valesti", "Smiters Will", "J\u00e2sm\u00eene", "Grootsmaid", "Tegan Parker", "Fyshles", "Sakis Ranger", "Charr Surethang", "Gestern Yesteryear", "Heals For Daddy", "Kahlyanne", "Brace Stonebrow", "Lord Sahan", "Vee U", "Legoh Brave", "Aelia Liore", "Drevarr Moonwillow", "Kisumaiassu", "Crabbedmermaid", "Jimbo One Eye", "Aronorf Xideliesi", "Elorakill"];
const professions = ["Tempest", "Berserker", "Tempest", "Firebrand", "Tempest", "Druid", "Druid", "Berserker", "Firebrand", "Druid", "Tempest", "Firebrand", "Firebrand", "Tempest", "Tempest", "Herald", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 5.4896, 5.9878, 0.0, 3.3828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.782, 0.0, 1.632, 0.0, 0.0, 13.3423, 0.0, 0.0, 0.0, 8.096, 0.0, 0.0, 7.8338, 0.0, 0.0], [6.4046, 0.1019, 2.0666, 5.2005, 18.0665, 4.048, 2.5574, 3.06, 1.1465, 10.2211], [8.3959, 8.4848, 0.0, 0.0, 17.2171, 5.944, 6.6976, 0.0, 0.0, 6.5318, 0.0], [12.0557, 0.586, 0.5468, 0.1858, 6.2608, 11.3404, 2.4877, 9.6768, 3.705, 9.5558], [8.2579, 1.9919, 3.9289, 9.7079, 0.0, 15.7529, 13.2957, 0.0, 0.0, 0.825, 0.0, 0.3148, 4.0267], [11.0419, 21.021, 14.0534, 0.0, 6.3756, 6.6376, 0.0, 1.6724, 0.0, 0.0], [1.7741, 1.68, 0.0, 17.7206, 0.0, 15.281, 2.616, 5.6749, 13.68, 14.3136], [2.6372, 3.4143, 0.4644, 1.4642, 13.2175, 7.0214, 0.0, 4.2941, 0.0, 9.8087, 7.7658, 5.784, 0.0, 3.57, 6.1344, 5.8458, 1.2696, 0.0, 3.1119, 5.4266, 0.6016, 3.9902, 0.0, 0.0, 0.0302], [10.0531, 0.0, 6.4046, 9.8608, 0.0, 0.0, 4.2916, 7.5082, 0.0, 1.1059, 0.0, 4.2391, 0.0, 0.0, 7.021, 0.0, 1.968, 1.6093, 4.83, 5.2654, 16.6566, 1.9263, 0.0, 0.9108, 1.9331, 0.0, 2.0245, 0.0, 0.0, 0.0], [1.7424, 2.2485, 10.764, 0.0, 1.4465, 5.2942, 5.4024, 36.0548, 10.9811, 1.6358, 1.86, 15.3014], [5.974, 0.0, 0.0, 6.1301, 6.3617, 8.0556, 6.2413, 1.4054, 0.0, 0.0, 4.2941, 1.0454, 12.39, 14.0868, 2.256, 0.0, 7.65, 10.2751, 13.6937, 1.2696, 0.0, 1.5939, 5.2868, 2.88, 0.0, 0.0, 0.0, 0.0], [4.0004, 2.4381, 13.2789, 14.0778, 4.0627, 5.3222, 0.0, 1.2566, 5.927, 0.4752, 13.216, 12.255, 3.84, 0.2904, 3.63, 15.4382, 16.2162, 6.9172, 0.0994, 7.4888, 6.9829, 0.0, 0.2144, 1.3495], [21.4742, 4.7804, 0.0, 8.6843, 20.1782, 6.8742, 10.5523, 12.096, 5.0906, 18.7915, 3.6894, 9.648, 0.0, 6.33, 13.7002, 2.002, 0.0, 0.0, 6.4009, 10.201, 2.72, 4.8411, 0.0, 2.6264, 1.2663], [0.0, 3.075, 35.6832, 4.8827, 61.3305, 31.5534, 25.32, 38.07], [13.3901, 4.1731, 53.1742, 9.2238, 1.1995, 2.2523, 14.5411, 34.8035, 9.7741, 11.4278, 3.03, 0.0, 4.7174, 2.477, 7.728, 16.2382, 20.7, 38.0844, 17.3774, 2.4955, 7.2432, 5.4848], [15.554, 4.2512, 4.435, 38.2714, 18.0665, 5.4022, 4.6771, 1.995, 25.0387, 3.5105, 24.0572, 12.9258, 14.328, 4.1503, 15.33, 20.1924, 21.7417, 10.551, 3.649, 23.2507, 3.6332, 2.9248, 7.247, 4.507, 2.1976, 1.958], [36.9743, 0.0, 1.7993, 18.8328, 33.5521, 9.0528, 12.5338, 3.0, 25.8854, 1.0633, 32.7302, 24.3036, 9.624, 7.6109, 12.57, 21.3682, 28.1481, 15.9359, 0.0, 10.9802], [1.3622, 3.556, 25.726, 0.0, 3.5456, 14.9955, 39.3396, 9.1558, 11.9347, 10.08, 2.6153, 27.3974, 3.3502, 18.8947, 16.77, 20.1924, 17.6977, 32.1345, 8.6779, 22.0789, 6.1504, 7.4817, 5.3553, 4.5774, 0.1663], [17.7865, 30.496, 40.8256, 4.6368, 14.6304, 5.49, 39.191, 1.2296, 35.6212, 13.2096, 10.104, 3.6663, 15.33, 33.0746, 22.062, 31.1276, 8.1396, 11.4862], [13.2317, 6.8371, 37.5125, 15.7212, 7.1089, 31.3038, 39.105, 6.3738, 23.04, 3.945, 1.8034, 25.7645, 2.0968, 47.8048, 9.03, 12.792, 1.1737, 16.59, 24.1798, 26.2262, 30.2082, 16.2679, 4.3552, 6.1184, 8.714], [7.9411, 3.886, 39.7192, 3.822, 4.8334, 10.4722, 18.2774, 47.2388, 7.6838, 15.9898, 12.03, 2.195, 28.607, 1.7345, 46.5658, 17.9568, 13.08, 6.4372, 10.47, 35.5795, 35.5555, 11.9957, 3.9474, 23.7567, 20.1458, 8.4096, 8.7727, 5.6006, 5.2421, 3.1752], [36.1469, 11.4074, 15.3925, 0.9937, 4.2725, 79.2188, 152.9788, 15.7946, 24.4224, 0.66, 3.468, 55.823, 0.0, 176.2478, 29.16, 21.538, 42.48, 78.9293, 68.9489, 34.0608, 23.2254, 0.0, 0.0, 12.9096, 19.51, 1.1256]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

