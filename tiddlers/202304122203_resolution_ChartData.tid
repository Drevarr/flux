created: 20230412220340000
creator: Drevarr
modified: 20230705163525440
modifier: drevarr
tags: ChartData
title: 202304122203_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Belvyn Brightblade", "Sub Train", "Ark Darkness", "Sister Elon\u00edth", "Lucas Ryn", "Sygaldry Verdandi", "Gavann", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[221.6245, 45.0011, 14.8637, 40.2339, 68.4922, 60.3131, 202.1809, 0.0, 331.76], [340.6358, 118.7363, 17.7057, 212.5914, 0.0, 136.857, 489.3777, 3.6472, 23.78], [200.6624, 39.6488, 0.0, 247.8861, 64.1229, 207.2543, 620.3547, 0.0, 374.1, 126.423, 358.8442, 0.0, 203.6275, 213.9888, 0.0, 234.4836, 96.3648, 123.5347, 157.8226, 152.6688], [388.6459, 43.0122, 10.7712, 405.0144, 88.6856, 282.6457, 543.4355, 577.1, 89.265, 247.0848, 46.9953, 154.4314, 210.0648, 0.0, 105.1168, 52.0128, 165.888, 90.4781, 187.1424], [120.714, 366.743, 2.9159, 249.1949, 301.3632, 47.5847, 608.0341, 149.3856, 222.4454, 186.8832, 2350.3608], [371.7409, 44.3381, 0.0, 477.2502, 319.3154, 301.7577, 831.3467, 974.11, 116.391, 337.1712, 28.9003, 177.241, 341.8066, 0.0, 268.2358, 67.4554, 136.3651, 168.8299, 270.0432], [498.1903, 52.3746, 31.8304, 482.4981, 177.4893, 290.2329, 774.4313, 0.0, 585.51, 82.302, 233.1149, 7.1449, 226.5408, 162.5059, 66.0416, 432.4436, 75.7123, 60.4195, 1211.0904], [98.1842, 195.3307, 492.1707, 237.479, 293.8824, 769.1922, 0.0, 728.19, 102.267, 141.2006, 97.4648, 235.872, 115.7842, 0.0, 320.5962, 63.8266, 156.6864, 152.4701, 2033.1216], [772.8966, 57.7754, 0.0, 530.6553, 526.7995, 345.5519, 1084.4896, 0.0, 688.17, 85.107, 348.5952, 64.9972, 257.0227, 312.9259, 0.0, 345.8361, 53.6054, 176.2819, 203.9688, 2114.7912], [793.0136, 129.0204, 81.5654, 763.0035, 510.7393, 373.4035, 1373.5915, 1347.05, 60.225, 342.1325, 24.2059, 291.0816, 322.3958, 85.9564, 415.716, 113.0573, 214.5917, 249.359, 1058.0112], [1034.9241, 58.3737, 76.3361, 591.3663, 557.0305, 429.2988, 905.1701, 30.3808, 784.45, 102.036, 424.0589, 74.1481, 259.511, 316.7976, 23.9164, 512.3205, 133.7616, 242.4557, 235.751, 2254.3272]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

