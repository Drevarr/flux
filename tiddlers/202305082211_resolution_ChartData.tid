created: 20230508221143000
creator: Drevarr
modified: 20230705163529334
modifier: drevarr
tags: ChartData
title: 202305082211_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Husky Guard", "Corinna Barimen", "Gabe Malhorn", "Ark Darkness", "Sygaldry Verdandi", "Zady Stardust", "Bella Fae", "Kiloak", "Sister Elon\u00edth", "Koralia Danai", "Solus Sanctus"];
const professions = ["Firebrand", "Dragonhunter", "Guardian", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.5442, 152.0657, 0.0, 0.0, 23.562, 643.615, 228.9765, 0.0, 0.0], [0.0, 14.335, 0.0, 31.0849, 389.4324, 98.0147, 0.0, 37.2146, 119.8502, 51.428, 55.487, 71.9743, 77.7336, 25.2188, 89.0459, 41.076, 12.4608], [61.2927, 81.1934, 0.0, 0.0, 183.3938, 6.3315, 24.7427, 813.5597, 12.611], [182.9048, 148.9958, 257.5678, 228.6144, 0.0, 644.3606, 177.282, 168.1504], [23.8036, 79.8173, 0.0, 92.8288, 837.9686, 140.9995, 0.0, 75.6362, 1997.8426], [83.1505, 157.4556, 0.0, 369.044, 1463.8162, 281.8808, 0.0, 185.9724, 2601.1565, 141.3152, 165.4178, 243.423, 89.5524, 299.7595, 268.254, 207.7856], [14.8854, 253.2708, 30.2564, 0.0, 325.8942, 1796.683, 673.2311, 84.2751, 351.9797, 2916.0173, 140.3537, 112.8674, 241.844, 229.908, 0.0, 452.9864, 293.517, 266.7808], [73.681, 214.853, 0.0, 64.7773, 341.0818, 1749.545, 536.4829, 84.7854, 87.6052, 3294.3581, 86.5332, 154.3282, 296.2524, 290.8248, 19.3628, 562.3279, 213.003, 188.6016], [5.4482, 325.9206, 30.2442, 232.2138, 1854.699, 576.043, 0.0, 271.2643, 3616.3286, 148.4928, 199.8461, 234.4756, 201.096, 40.2667, 374.8853, 159.768, 177.3376], [32.0084, 247.8808, 19.5848, 1819.8894, 590.8043, 188.1349, 3502.5725, 133.3103, 213.8724, 281.1207, 347.6256, 18.0756, 506.5414, 285.705, 280.7552], [74.1026, 249.257, 0.0, 0.0, 389.9092, 2100.9044, 539.7894, 142.5438, 199.7519, 3884.976, 172.2391, 204.1738, 88.8165, 180.0456, 36.2419, 608.4448, 340.641, 329.648], [75.5619, 315.7714, 20.1831, 0.0, 451.5111, 2511.005, 726.3716, 72.5571, 194.8235, 3771.2198, 194.3084, 198.6482, 316.9762, 384.4344, 32.3802, 619.177, 314.118, 199.7248]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

