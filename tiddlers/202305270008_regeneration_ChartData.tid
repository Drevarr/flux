created: 20230527000807000
creator: Drevarr
modified: 20230705163531800
modifier: drevarr
tags: ChartData
title: 202305270008_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Tegan Parker", "Zaedy Sagemist", "Artakama Nahid", "Johosh Of The North", "Arriasa", "Elonith Primal", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Vindicator", "Tempest", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[305.4182, 488.471, 133.2864, 560.3818, 72.369, 200.713, 85.5168, 5.4648, 243.629, 105.2471, 27.1171, 124.4365, 12.7478, 174.0067, 240.683, 375.828, 0.0, 5.3133, 119.3317, 170.9453], [322.3757, 336.8323, 29.4314, 0.0, 0.0, 502.1366, 111.9916, 204.7987, 82.4986, 18.9486, 76.5473, 57.1605, 103.5504, 300.6797, 0.0, 125.3491, 85.0936, 47.5346, 362.0758, 13.097, 197.4901, 661.0157, 0.0, 194.1697, 162.8307, 122.4396], [1589.9443, 1709.6486, 348.631, 63.6363, 2151.2016, 236.6801, 681.0816, 433.6205, 83.0214, 817.098, 394.1815, 355.9517, 348.8486], [818.9338, 848.7734, 204.2131, 52.2333, 52.5504, 623.6323, 248.492, 352.8346, 148.3339, 140.1048, 515.4864, 260.5614, 255.5146, 983.9514, 302.6146, 658.496, 166.0721, 886.8204, 93.0999, 491.7944, 1129.5475, 107.712, 475.0393], [756.4493, 850.9738, 267.8549, 109.7334, 56.3472, 1047.9571, 227.3532, 559.6032, 260.8262, 394.011, 260.0087, 217.6138, 850.6086, 304.043, 480.5353, 136.2496, 972.0841, 73.6438, 142.0293, 521.9264, 1047.3466, 82.384, 308.1771, 665.7088, 327.7584], [3089.2032, 3501.2592, 1640.5237, 194.6208, 3045.3552, 179.7734, 1050.599, 212.2956, 2086.3592, 458.0206, 1067.3587], [1605.2429, 1740.6365, 561.5278, 67.4652, 1999.6733, 345.3358, 747.4022, 701.112, 86.13, 785.9027, 298.6991, 480.167, 1110.0186, 44.3117, 375.0653, 758.6619, 97.5046, 1124.1441, 147.6529, 148.2145, 628.8572, 1399.1885, 110.08, 479.0625, 907.5924, 487.8792], [3430.9325, 2909.0064, 436.9834, 73.1667, 85.1984, 4069.6502, 589.9813, 1203.3293, 828.0667, 66.9042, 816.5894, 755.5682, 475.8355, 1928.2637, 34.7733, 727.4534, 685.8517, 158.6995, 1386.2218, 219.0913, 78.7133, 879.2687, 2464.393, 266.192, 794.6323, 794.5488, 565.1208]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

