created: 20230220220953000
creator: Drevarr
modified: 20230705163519664
modifier: drevarr
tags: ChartData
title: 202302202209_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Primal Clone", "Eibh\u00ebar", "Sofya De Meme", "Black Raspberry Pie", "Mac Aaroni", "Zadie Miststep", "Venomina The Siren", "Arka\u00f1"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 95.6642, 583.8437, 4.8989, 5.3592, 0.0, 0.0, 0.0, 2.2106, 0.0, 20.5204, 7.9834, 28.7549, 2.6897, 0.0, 2.7014, 0.0, 0.0, 8.0309, 0.0, 0.0, 4.4554, 30.9636, 0.0, 5.3758, 8.0958, 18.3061, 30.404], [0.0, 109.1664, 210.8324, 9.2988, 9.2568, 74.7268, 18.7189, 0.0, 0.0, 137.4818, 0.0, 35.6664, 28.0896, 0.0, 9.248, 0.0, 38.2539, 0.0, 0.0, 34.9056, 0.0, 91.8653, 0.0, 0.0, 0.0, 29.07, 34.4379, 67.4902], [338.4158, 1013.6175, 0.0, 37.1977, 23.3285, 32.6911, 0.0, 47.0906, 61.7888, 64.3457, 32.5618, 63.719, 0.0, 0.0, 38.8368, 0.0, 19.1677, 24.3648, 0.0, 154.9829, 0.0, 71.4445, 92.7908, 0.0, 37.6538, 63.0513], [0.0, 424.3126, 872.8695, 66.2029, 42.2402, 8.7037, 42.6822, 0.0, 72.0332, 32.3597, 77.926, 32.377, 125.5162, 32.3145, 40.494, 6.5772, 61.645, 41.3829, 42.145, 33.9552, 0.0, 229.6632, 32.4864, 41.7402, 63.1071, 0.0, 35.9743, 20.7625], [0.0, 0.0, 80.5153, 26.622, 110.9511, 103.4342, 190.5363, 91.7888, 174.8736, 182.1937, 536.8709, 214.2072, 164.5298, 494.9622, 112.643, 51.6894, 188.5812], [1082.5435, 78.1099, 74.5903, 94.7831, 102.2076, 13.4197, 90.3021, 244.9732, 103.6728, 159.7781, 240.6096, 63.023, 77.622, 83.9376, 0.0, 130.5639, 96.422, 16.5888, 78.8144, 442.3536, 69.2028, 202.5939, 208.9546, 79.6871, 41.69, 91.8325], [25.1693, 1152.2801, 1252.8312, 0.0, 0.0, 0.0, 0.0, 0.0, 110.1978, 174.3306, 40.7408, 85.4515, 240.24, 45.4145, 53.0874, 26.8254, 60.8229, 42.2651, 81.4752, 442.4597, 91.3257, 90.8323, 210.9803, 48.2258, 64.436, 121.5206], [70.9137, 1135.9051, 1858.6849, 18.0986, 41.8505, 39.1999, 86.1683, 35.1652, 94.7234, 268.6662, 97.1183, 38.3645, 169.6464, 61.0299, 0.0, 67.064, 63.2034, 53.3628, 72.7412, 15.3792, 42.4467, 216.4032, 43.3575, 128.6593, 110.6322, 76.2495, 0.0, 33.6019], [10.5963, 999.1598, 2664.9452, 9.2081, 42.5082, 44.1638, 58.9512, 41.762, 180.9797, 127.8175, 47.4239, 67.0454, 163.3632, 0.0, 34.884, 0.0, 0.0, 83.5677, 62.7884, 0.0, 34.839, 286.0978, 42.3, 152.316, 170.9345, 58.7129, 40.5052, 16.1327], [0.0, 748.6517, 2332.4787, 78.5862, 90.0102, 111.9455, 150.1342, 53.7586, 162.4604, 160.5513, 139.0586, 80.425, 178.6646, 40.1706, 96.39, 100.6938, 0.0, 114.0625, 197.0352, 30.6085, 215.2363, 30.6252, 142.711, 70.7423, 72.0397, 103.2095, 157.3181]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

