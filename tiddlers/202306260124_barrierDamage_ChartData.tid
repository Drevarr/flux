created: 20230626012458000
creator: Drevarr
modified: 20230705163538107
modifier: drevarr
tags: ChartData
title: 202306260124_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Night Of The Wabbit", "Eibh\u00ebar", "Bella Sassy", "Necrotic Windrunner", "Mammary Mission", "Rozaalyna", "Tootsy Pop Star", "Smol Gluvs", "Drevarr Moonwillow", "Be\u00eb", "Mememonoko", "Newtype Khan", "Rozaalyna", "Brad Bellick", "Cyclotechnist Farra", "Mammary Mission", "Smol Gluvs", "Tootsy Pop Star", "Be\u00eb", "My Birthday Girl", "Elonith Requiem"];
const professions = ["Vindicator", "Chronomancer", "Firebrand", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper", "Scourge", "Vindicator", "Spellbreaker", "Reaper", "Scrapper", "Scrapper", "Reaper", "Reaper", "Reaper", "Reaper", "Scrapper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4681, 5545, 1670, 0, 958, 5617, 5727, 7031, 7363, 0], [0, 1143, 1122, 3992, 10220, 7446, 0, 0, 2507, 4142, 0, 5089, 3748, 1109, 1248], [0, 2274, 677, 5944, 4465, 1246, 0, 6208, 5752, 1427, 3927, 4027, 2027, 2577, 2506], [7808, 1395, 6973, 0, 3391, 0, 4777, 4592, 675, 5052, 11140, 2274], [2582, 12753, 7880, 88, 3448, 0, 0, 3727, 9263, 0, 14316, 752], [4726, 3744, 6161, 6974, 2617, 0, 1557, 0, 5931, 13373, 2499, 8537], [9769, 0, 8289, 0, 2465, 0, 9156, 9055, 3468, 4822, 1930, 7287], [7049, 3050, 5938, 0, 1248, 0, 3474, 4408, 9877, 10832, 7140, 5921], [100, 3658, 2486, 4912, 7251, 12080, 2075, 297, 8338, 305, 3630, 1694, 2014, 2685, 3130, 5061], [11804, 4691, 5939, 6978, 3474, 0, 7373, 3699, 5958, 3472, 3474, 5939], [0, 14527, 10321, 16925, 15164, 9278], [0, 5081, 0, 3854, 5559, 3723, 5945, 491, 0, 3235, 4540, 10670, 2652, 10527, 3365, 6645], [3113, 14221, 20557, 61202], [3110, 11416, 0, 0, 15459, 8412, 14883, 34536, 6776, 10750], [9948, 0, 0, 19886, 16773, 17081, 31634, 14121], [3730, 23398, 30459, 67634], [3122, 33710, 24427, 121590], [5301, 45824, 5291, 144905], [6735, 37070, 66272, 95496], [2894, 33320, 12871, 48696, 18847, 16511, 9496, 22610, 23946, 1221, 9164, 1839, 24747, 26573, 20033, 13145], [7669, 36688, 35435, 121125, 26015, 0, 23641, 13033, 13407, 48389, 31057, 27624]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

