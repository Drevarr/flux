created: 20230605220452000
creator: Drevarr
modified: 20230705163533909
modifier: drevarr
tags: ChartData
title: 202306052204_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Jeckyll Mbs", "Zayde Sunsabre", "Newtype Khan", "Aira Draugr", "Duke Silvver", "Xanvias Einzbern", "Nurse Pam", "Al\u00ee\u00e7ization", "Johosh Of The North", "Mistwalker Cael", "Ryvalia Fazebringer", "Sygaldry Verdandi", "Blanco Padre Guard", "Crusader Siolith", "Gabe Malhorn", "Zaylen Harker", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Berserker", "Spellbreaker", "Spellbreaker", "Herald", "Vindicator", "Berserker", "Vindicator", "Firebrand", "Tempest", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 11.3396, 0.0, 8.6869, 0.0, 0.0, 0.0, 0.9867, 2.4638, 2.5475, 1.1923, 5.616, 2.0266, 1.0815, 0.0], [0.0, 14.0767, 1.5943, 12.4433, 0.0, 0.0, 0.0, 0.0, 1.7531, 1.731, 0.0, 0.0, 6.864, 4.4218, 0.0, 0.0], [2.016, 20.7241, 0.0, 6.3391, 0.0, 0.0, 0.0, 0.0, 3.4114, 1.731, 0.0, 0.0, 9.984, 0.3685, 0.0, 0.0], [0.0, 27.7624, 0.1529, 22.5389, 0.0, 0.0], [0.0, 37.1469, 1.769, 10.0955, 0.0, 0.0, 0.0, 0.0, 2.6533, 0.0, 0.0, 0.0, 11.7, 0.0, 0.0, 0.0], [0.0, 25.0253, 0.0, 15.965, 0.0, 0.0, 0.0, 0.0, 3.3166, 1.2737, 0.0, 2.3846, 8.268, 6.4484, 1.3865, 1.3162], [4.191, 5.1308, 7.6756, 6.532, 1.7596, 5.8512, 39.0], [0.4706, 6.6332, 6.4993, 1.7785, 5.4317, 25.272, 16.2131, 7.0712, 2.6527], [0.0, 36.7559, 1.507, 21.5998, 0.0, 0.5494, 0.0, 0.4858, 2.8902, 2.0576, 0.0, 1.4794, 11.544, 7.7381, 0.5269, 0.0], [0.0, 55.1338, 2.4898, 21.8345, 0.0, 0.9324, 0.0, 0.0, 3.2218, 2.4822, 0.0, 0.817, 14.664, 0.3685, 0.0, 0.6885], [0.0, 59.044, 1.9656, 21.1302, 1.4835, 0.0, 0.0, 0.0, 2.2269, 5.7155, 0.0, 1.8768, 21.06, 9.212, 1.8856, 0.0], [0.0, 60.9991, 3.1013, 36.3909, 0.2967, 0.3663, 0.0, 0.2125, 5.3539, 5.095, 0.0, 1.3248, 27.924, 6.4484, 0.0, 0.0], [0.0, 64.1273, 2.1403, 29.8171, 0.0, 3.1635, 2.915, 2.2922, 8.5758, 4.6704, 0.1703, 0.0, 29.484, 9.3962, 6.7938, 4.131], [3.1968, 65.3003, 6.683, 38.0344, 0.3096, 2.3809, 2.299, 1.2144, 5.4487, 3.3313, 0.2838, 0.1987, 23.4, 22.6615, 3.9377, 3.321], [2.3616, 59.435, 4.0841, 44.3734, 0.8901, 1.3154, 0.033, 3.8861, 10.8026, 7.2505, 1.892, 0.817, 29.64, 12.1598, 4.2427, 0.2835], [2.16, 64.5183, 3.2105, 42.2604, 0.0, 2.1812, 2.3225, 8.9548, 5.7808, 3.557, 2.4509, 21.684, 24.3197, 5.5183, 2.3287], [0.2736, 99.7101, 6.7267, 63.3906, 0.3225, 3.6297, 0.0, 1.1537, 7.2965, 7.6424, 0.246, 1.7885, 37.596, 7.1854, 0.0, 0.0], [0.0, 103.2293, 7.1198, 65.9732, 0.3612, 3.5964, 0.0, 4.0531, 16.3935, 10.2879, 4.5219, 6.9552, 43.524, 21.3718, 5.4351, 4.8195], [2.9088, 112.2227, 9.3694, 68.7905, 2.5026, 6.4935, 1.54, 3.795, 11.5607, 8.5569, 4.5408, 7.463, 38.844, 24.3197, 4.4923, 2.268]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

