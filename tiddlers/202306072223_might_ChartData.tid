created: 20230607222341000
creator: Drevarr
modified: 20230705163534391
modifier: drevarr
tags: ChartData
title: 202306072223_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Etcherii", "Belvyn Brightblade", "Uneeta Healah", "Gabe Malhorn", "Blanco Padre Guard", "Koralia Danai", "Rafaellagabriela", "Sygaldry Verdandi", "Tegan Parker", "Sub Train", "Crusader Siolith", "Solus Sanctus", "Johosh The Great", "Drevarr Moonwillow", "Artakama Nahid", "Venomina The Siren", "Newtype Khan", "Zayde Sunsabre", "Grasszanine"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[33.4868, 15.088, 143.577, 0.0, 15.3888, 1.8871, 1.0584, 3.2789, 1.8147, 2.4379, 0.6841, 0.3409, 0.0], [21.1252, 18.032, 181.1805], [12.177, 7.728, 149.2745, 11.6565, 5.1662, 5.2494, 0.4536, 6.9304, 2.335, 2.1385, 3.9616, 3.283, 10.2672, 7.2626], [176.6225, 15.173, 7.5845, 6.2444, 3.8472, 6.6323, 3.071, 7.8269, 2.4501, 1.5787, 6.4032, 20.8526], [37.7302, 11.73, 238.1555, 6.1213, 14.8392], [28.5052, 11.73, 254.1085, 14.1962, 20.2253, 5.7984, 0.0, 1.5152, 1.0152, 0.5988, 0.0, 1.4173, 1.5824, 9.9586], [315.6415, 12.1774, 33.0859, 5.2151, 0.0, 18.3071, 4.6826, 8.6395, 0.5728, 4.5747, 4.048, 12.7646], [33.1178, 11.776, 309.944, 14.7822, 21.3245, 4.1515, 0.0, 3.1547, 1.5609, 2.5662, 1.7024, 0.6817, 4.416, 12.5446], [90.8662, 45.172, 238.1555, 16.0846, 16.8178, 1.4067, 0.0, 5.4151, 0.0, 0.1283, 0.0, 3.2292, 6.9552, 8.4181], [344.129, 18.6243, 33.0859, 5.7984, 3.2004, 9.5137, 5.4567, 5.945, 0.0, 1.8658, 7.6176, 11.9393], [45.8482, 27.784, 386.2905, 19.7314, 27.5899, 5.6612, 0.9744, 2.3846, 1.4594, 9.2811, 0.0, 2.8704, 4.4896, 14.1952], [46.6785, 30.314, 350.966, 20.8384, 33.7454, 9.6754, 7.5936, 5.2164, 1.4086, 9.5805, 7.0322, 3.7853, 5.7408, 19.9172], [36.8078, 17.48, 409.0805, 12.8286, 34.8446, 6.6561, 3.1584, 9.2156, 1.1802, 11.9328, 4.8048, 7.8936, 11.8496, 19.9723], [17.343, 21.252, 425.0335, 35.0997, 31.4371, 9.4696, 2.7216, 8.5698, 5.0126, 13.3442, 2.0683, 3.9647, 5.888, 8.9132], [0.0, 39.744, 572.029, 33.081, 38.2522, 2.2988, 0.0, 0.0, 0.0, 11.7618, 0.1273, 0.7714, 0.0, 5.612], [35.926, 574.308, 88.7586, 17.1475, 5.1122, 0.0, 18.7542, 1.2817, 2.3951, 6.9049, 0.0, 3.3488, 4.8418], [38.0992, 55.246, 908.1815, 48.1237, 53.7509, 17.9441, 2.31, 22.1324, 8.2231, 30.7944, 15.4327, 6.1355, 3.7904, 45.6666], [43.8188, 56.028, 1305.867, 66.5526, 29.0189, 21.2379, 6.3672, 40.2656, 9.251, 52.3933, 18.4064, 30.9856, 35.1578], [46.9552, 49.036, 1408.422, 54.1147, 121.7914, 31.6338, 2.2512, 33.6085, 14.4666, 51.8372, 11.8211, 23.1247, 21.896, 35.653]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

