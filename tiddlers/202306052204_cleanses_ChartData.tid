created: 20230605220452000
creator: Drevarr
modified: 20230705163533692
modifier: drevarr
tags: ChartData
title: 202306052204_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Primal Clone", "Eibh\u00ebar", "Arriasa", "Cat Wigglebooty", "Tegan Parker", "Venomina The Siren", "Etchery", "Ak\u00e1nt\u00f3r", "Artakama Nahid", "Stoic Rapidfire", "Johosh Of The North", "Drevarr Moonwillow"];
const professions = ["Tempest", "Chronomancer", "Chronomancer", "Druid", "Scrapper", "Tempest", "Tempest", "Scrapper", "Druid", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.4955, 0.0, 0.0, 0.0, 0.0, 0.2039, 0.3239, 0.0, 0.0, 0.3292, 0.0665, 0.0847, 0.0], [0.0, 0.3265, 0.1923, 0.3775, 0.0, 0.0, 0.0, 0.0, 0.1845, 0.338, 0.0, 0.1875, 0.3569, 0.008, 0.0, 0.0444], [0.0, 0.3545, 0.4038, 0.542, 0.0, 0.0, 0.0, 0.0303, 0.3786, 0.2254, 0.0, 0.0417, 0.5323, 0.0452, 0.1186, 0.0], [0.0541, 0.0, 0.1515, 1.0, 0.8169, 0.1628, 0.8542, 1.6154, 0.4335, 0.6102, 0.6222], [0.0, 0.7562, 0.0, 0.3846, 0.0, 0.0, 0.0, 0.0, 0.4175, 0.4085, 0.0, 0.0, 0.8492, 0.2686, 0.0169, 0.4222], [0.0, 1.5009, 0.0, 0.1351, 0.0, 0.6061, 1.1359, 1.0845, 0.2791, 0.3333, 1.5477, 0.2287, 0.3559, 0.3778], [0.0, 1.0075, 0.4038, 1.5796, 0.0, 0.027, 0.2, 0.0, 0.6311, 0.7042, 0.0, 0.2917, 1.3385, 0.125, 0.0678, 0.1556], [0.3333, 1.5328, 0.5577, 1.8819, 0.0, 0.0, 0.0, 0.6364, 0.8738, 1.5352, 0.4884, 0.6458, 1.5815, 0.3191, 0.1525, 0.1333], [0.0, 1.3921, 0.7308, 2.034, 0.0333, 0.0, 0.0, 0.4848, 1.3398, 1.1549, 0.2558, 0.7083, 1.64, 0.4548, 0.322, 0.4], [0.0, 1.6316, 0.6154, 2.0089, 0.3333, 0.3243, 0.2, 1.0303, 1.301, 1.3662, 0.2326, 0.75, 1.8738, 0.5452, 0.5424, 0.6], [0.0, 1.7562, 0.8269, 2.4723, 0.1, 0.0, 0.0, 0.6061, 1.466, 1.1127, 0.4651, 0.7917, 2.0892, 0.5106, 0.6441, 0.1111], [0.25, 1.9431, 1.1538, 2.4079, 0.1, 0.4324, 0.04, 0.697, 1.2427, 1.3239, 0.3023, 1.1458, 1.9692, 0.5133, 0.3729, 0.3556], [0.0, 1.8679, 0.8846, 2.4365, 0.0667, 0.5946, 0.12, 1.3636, 1.4369, 1.7887, 0.2791, 0.8333, 2.1231, 0.7553, 0.661]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

