created: 20230625215649000
creator: Drevarr
modified: 20230705163536990
modifier: drevarr
tags: ChartData
title: 202306252156_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Crusader Siolith", "Miphest\u00f6", "Tribal S", "Etchery Howls", "Tegan Parker", "Elon The Mender", "Pale Pam", "Artakama Nahid", "Drevarr Moonwillow", "Demon Staph"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Druid", "Druid", "Tempest", "Druid", "Druid", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[13.6231, 36.3726, 43.7258, 44.8744, 775.9344, 87.365, 233.4066, 55.0483, 51.456, 37.7153, 40.5132, 58.7045, 0.0, 22.099, 5.6389, 37.1855, 22.4469, 21.7128, 71.4096, 32.9639, 298.35], [34.503, 150.3752, 94.5318, 68.5854, 593.8766, 134.9695, 307.0899, 73.3795, 31.9104, 24.3569, 105.8018, 48.4145, 15.7942, 20.994, 31.652, 0.0, 17.0964, 32.7222, 12.4699, 103.8989, 27.7732, 290.7], [33.0561, 50.576, 62.9574, 5.7409, 712.2293, 181.7626, 354.6865, 191.137, 34.6752, 45.1319, 65.2886, 43.0636, 0.0, 27.3023, 10.4341, 5.017, 0.0, 20.3521, 49.4414, 156.767, 52.9615, 353.175], [0.0, 269.0688, 302.0595, 292.1625, 209.6073, 133.0683, 60.9129, 62.769, 0.0, 21.0244, 36.0076, 193.9411, 425.785, 39.5195, 1775.565], [26.267, 125.1646, 1616.2263, 225.3917, 278.784, 238.0067, 280.3202, 87.2078, 13.3426, 51.4103, 13.0066, 76.3538, 41.7848, 100.0382, 140.3136, 0.0, 1598.085], [15.8269, 199.7487, 489.1162, 177.0856, 1409.6645, 293.606, 571.8462, 253.1894, 30.4512, 104.3808, 131.7718, 64.3639, 41.9989, 56.8145, 52.0262, 0.0, 51.7006, 52.5672, 66.493, 156.1824, 49.9422, 661.725], [225.1822, 657.8631, 795.1008, 170.4615, 950.4442, 371.5043, 417.8436, 202.081, 299.7888, 75.1356, 167.922, 30.0468, 26.6728, 28.1059, 72.4828, 17.6575, 22.4028, 17.0117, 101.3098, 29.6758, 473.535], [2260.1539, 115.1856, 250.6752, 548.5364, 745.8065, 434.238, 0.0, 260.3061, 64.0861, 223.026, 2.5137, 475.0123, 252.481], [138.4795, 530.7844, 856.8144, 254.0277, 2167.4837, 513.8444, 1697.2321, 384.6816, 163.584, 269.2325, 234.8727, 135.8794, 60.7622, 61.8973, 35.5211, 66.8143, 76.2048, 103.584, 141.6499, 80.714, 1268.625], [205.0146, 640.5034, 941.9696, 568.7937, 4842.7968, 979.4757, 1912.79, 703.8086, 303.0144, 353.0489, 639.7969, 599.8555, 366.52, 179.705, 227.018, 62.379, 93.4502, 169.8512, 454.3752, 892.8288, 309.7037, 2272.305], [227.4972, 448.9461, 1235.8029, 616.8952, 5825.8483, 1000.9789, 3022.6155, 588.9514, 393.9072, 386.1288, 700.7225, 678.3682, 0.0, 96.5324, 289.7458, 309.1812, 62.0707, 450.5107, 433.1347, 97.0719, 2201.16]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

