created: 20230329220116000
creator: Drevarr
modified: 20230705163523379
modifier: drevarr
tags: ChartData
title: 202303292201_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Nazhul Naxxremis", "Kiloak", "Pieca Pizzabringer", "Big Macbringer", "Arkintor", "Bork Borkbringer", "Ryvalia Fazebringer", "Seren Nightroad", "Avian Nefaris", "Domina Flagbringer", "Charred Fishbringer", "Ark Darkness", "Bubble Teabringer", "Ravioli Fetabringer", "Spicy Gyrosbringer", "Band Aidbringer", "Bura Beignetbringer", "Zaylen Harker", "Gavann", "Bella Lunabringer", "Johosh The Great"];
const professions = ["Scourge", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Chronomancer", "Scourge", "Tempest", "Spellbreaker", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[59.0323, 0.0, 542.1055, 0.0, 379.6001], [713.1146, 273.1428, 0.0, 0.0, 0.0, 0.0], [205.343, 0.0, 716.1466, 200.2459, 0.0, 0.0, 59.1624, 3.1311], [0.0, 0.0, 531.476, 122.4854, 475.4098, 50.5861, 0.0, 34.9877, 60.426, 31.5168], [9.4727, 0.0, 700.582, 0.0, 788.9134, 39.864, 0.0, 0.0, 38.6316], [150.8485, 15.5064, 686.5704, 17.8886, 943.5428, 66.6013, 119.229, 50.3831, 0.0], [0.0, 87.0744, 620.8606, 0.0, 667.029, 39.2097, 414.975, 0.0, 17.3664, 295.3965], [903.9924, 134.904, 1122.4279, 112.7694, 0.0, 30.3441], [0.0, 0.0, 1751.8607, 367.5776, 152.295, 88.0319, 12.4416, 117.1149], [116.7944, 48.9048, 1227.2264, 154.7885, 1323.143, 129.7788, 14.619, 18.5744, 0.0], [42.971, 0.0, 1860.6492, 10.4227, 1566.3054, 99.0737, 0.0, 0.0, 0.0, 0.0], [60.4346, 0.0, 1557.7078, 2163.5995], [42.2037, 0.0, 1405.9956, 109.032, 1767.0205, 566.9398, 0.0, 24.9804, 13.2741], [64.6418, 137.4576, 1230.1254, 410.5517, 1900.4263, 379.5062, 7.6977, 9.6876, 88.2882], [176.1707, 0.0, 1684.7789, 65.567, 2587.4661, 348.9116, 0.0, 10.1445, 17.2368, 0.0], [76.1519, 0.0, 2061.6437, 179.6995, 2397.6661, 389.4467, 0.0, 3.1969, 38.5236, 0.0], [66.7057, 57.5568, 2404.6873, 205.4976, 2119.9394, 195.8279, 100.683, 0.0, 107.9568, 14.9352], [199.9053, 0.0, 2505.1846, 514.1875, 2213.3235, 519.6673, 141.273, 0.0, 22.4532, 71.1627], [28.1534, 149.436, 3316.8934, 540.7987, 2077.4921, 476.9231, 130.977, 90.8717, 86.4108, 0.0], [129.31, 225.2376, 3041.9754, 734.8387, 3054.3864, 898.7316, 87.879, 6.3582, 70.8588, 65.8413], [74.8818, 75.2304, 3703.4214, 504.9475, 3503.7214, 494.7056, 95.931, 87.1389, 113.0436, 51.6999]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

