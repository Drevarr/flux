created: 20230515002743000
creator: Drevarr
modified: 20230705163530064
modifier: drevarr
tags: ChartData
title: 202305150027_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Cerys Fireblade", "W V N D E R F O X", "Osh Kosh Johosh", "Hyde En Sikh", "Miphest\u00f6", "Cuscuszera", "Ark Darkness", "Sub Train", "Gabe Malhorn", "Lucas Ryn", "Xanvias Einzbern", "Koralia Danai", "Aronorf Xideliesi", "Venomina The Fierce", "Blancooo Padreee"];
const professions = ["Berserker", "Berserker", "Chronomancer", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[53.3239, 51.7936, 99.2423, 93.1589, 20.4182, 57.6479, 32.5185, 0.0, 0.0, 0.0, 33.8954, 0.0, 10.0409, 18.084], [60.3533, 232.7804, 10.0456, 61.9453, 107.8721, 35.8815], [29.4278, 106.3436, 97.5855, 21.418, 30.5505, 38.8596, 13.965, 6.4796, 5.8968, 19.2933, 47.1069, 51.0818, 18.9974, 19.4419, 4.862], [18.8978, 106.4887, 96.4258, 62.2639, 50.6616, 34.2771, 17.328, 2.4717, 6.9108, 15.2822, 34.3217, 53.8507, 20.0693, 13.8308, 7.106], [33.696, 136.085, 117.9642, 87.4727, 55.5742, 51.2323, 15.3045, 9.8787, 4.8543, 54.3281, 26.5742, 40.4096, 6.93], [127.4208, 71.2062, 251.123, 303.2445, 123.2986, 104.3464, 71.17], [230.387, 352.567, 129.1715, 108.8457, 100.0818, 55.6605, 19.8198, 67.5948], [193.6799, 87.4727, 79.9839, 68.8291, 47.5095, 7.6461, 62.7861, 169.0106, 193.156, 95.3938, 64.872, 0.0], [143.194, 288.9459, 119.9788, 111.609, 75.2447, 55.0905, 7.8194, 58.4844, 5.304, 165.0452, 197.93, 88.8518, 56.4553, 15.84], [93.4502, 247.6516, 285.4666, 112.7763, 113.9118, 124.8273, 13.9365, 3.9847, 18.5016, 44.3216, 125.6641, 168.9996, 99.3115, 78.9981, 36.102], [119.9578, 288.5641, 278.6738, 156.4653, 210.1689, 72.6784, 18.012, 20.6052, 68.4528, 51.4488, 149.3201, 194.9702, 77.2834, 81.9513, 31.68], [110.0736, 461.4995, 277.8454, 109.2698, 96.5641, 70.1123, 47.823, 29.6835, 67.2048, 48.1006, 218.9891, 195.6385, 63.4973, 76.9801, 28.006], [113.3309, 472.5256, 301.869, 148.7889, 128.1892, 111.1715, 59.8215, 7.1841, 41.5584, 71.2394, 130.1081, 253.4039, 126.8837, 49.8599, 31.68], [291.1615, 461.2093, 360.6854, 194.2785, 227.3631, 47.9329, 17.328, 6.6528, 0.0, 82.7424, 375.6248, 230.4887, 185.687, 82.1974, 52.954], [97.4938, 386.203, 559.3357, 401.5405, 131.3364, 99.0737, 83.5335, 0.0, 106.9087, 348.687, 61.871, 104.1902, 255.6487, 99.11]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

