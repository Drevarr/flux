created: 20230510220110000
creator: Drevarr
modified: 20230705163529634
modifier: drevarr
tags: ChartData
title: 202305102201_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Maaaathexxs", "River No Hug", "Elonith Requiem", "Tegan Parker", "Raelyn Sunray", "Venomina The Siren", "Mac Aaroni", "Johoshua", "Black Raspberry Pie", "Artakama Nahid", "Sygaldry Verdandi", "Blancooo Padreee", "Sub Train", "Ark Darkness", "Miphest\u00f6", "Tika Fiery", "Drevarr Moonwillow", "Solus Sanctus", "Lucas Ryn", "Demon Sekhmet", "Koralia Danai", "Bella Sassy"];
const professions = ["Chronomancer", "Scourge", "Scourge", "Scourge", "Tempest", "Firebrand", "Tempest", "Tempest", "Scrapper", "Chronomancer", "Tempest", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[250.4549, 105.1263, 8.441, 171.9998, 0.0, 44.2107, 0.0, 0.0, 14.1421, 0.0, 135.6565, 55.8394, 114.6835, 0.0, 0.0, 110.4312], [38.7238, 358.559, 87.1704, 78.4992, 115.1275, 60.3446, 0.0, 0.0, 77.6866, 52.4275, 83.5871, 32.8261, 57.8314, 37.2733], [12.1212, 37.6634, 213.594, 95.1576, 0.0, 263.6935, 258.7334, 89.6688, 0.0, 15.876, 119.7413, 18.0781, 145.6398, 0.0], [10.4177, 59.9081, 60.188, 101.4923, 0.0, 572.7198, 0.0, 12.505, 0.0, 0.0, 50.2152, 67.3819, 113.6447, 13.6104, 0.0, 210.9905], [0.0, 203.5015, 174.4786, 3.3864, 291.2972, 0.0, 31.6555, 0.0, 72.4073, 12.1922, 371.6826, 100.6656, 0.0, 142.8913], [425.2759, 101.5459, 0.0, 0.0, 49.7448, 55.9433, 0.0, 330.9617, 169.7448, 0.0, 319.0792], [127.716, 178.7476, 115.464, 474.4239, 27.1584, 73.1952, 0.0, 0.0, 34.2069, 270.2958, 23.0606, 130.175], [0.0, 51.2046, 477.2835, 4.1313, 4.3656, 153.0544, 98.9626, 35.8488, 0.0, 4.2336, 13.7543, 72.1976, 271.9578, 108.575, 0.0, 223.5395], [3.5568, 8.7697, 353.9715, 594.0809, 160.7928, 530.08, 0.0, 8.761, 5.0216, 8.626, 16.4297, 8.7142, 285.8778, 27.0154, 45.7405, 69.4378], [0.0, 21.6924, 72.299, 110.7188, 144.7584, 1277.6231, 14.8378, 8.4802, 9.9896, 28.6297, 0.0, 33.2896, 98.686, 111.5026, 8.7671, 211.9944], [15.7061, 96.953, 351.586, 299.3815, 3.672, 306.7821, 112.4755, 10.1275, 0.0, 74.6172, 12.5366, 32.143, 498.4162, 130.8139, 44.4528, 376.47], [12.6576, 481.504, 32.0864, 199.1856, 275.1389, 143.1446, 18.4954, 0.0, 17.3387, 134.4197, 899.393, 28.2994, 0.0, 476.5274], [15.6406, 60.8138, 421.1325, 457.8858, 163.4448, 685.8275, 140.8925, 14.6578, 2.4894, 94.621, 32.808, 76.0578, 417.1821, 19.4141, 21.0445, 232.0728], [7.3757, 267.3595, 293.46, 209.4672, 619.848, 220.0493, 31.1501, 1.3305, 0.0, 72.03, 96.9641, 262.1931, 10.0666, 803.8053], [461.8695, 230.802, 58.548, 977.3491, 0.0, 8.761, 5.4294, 91.7633, 19.1565, 195.2278, 1005.7662, 152.5906], [65.6073, 685.923, 281.4792, 107.4672, 822.0505, 41.9962, 120.3883, 199.2967, 119.1067, 161.5559, 406.5863, 48.792, 618.0801], [0.0, 0.0, 1214.5865, 501.1267, 0.0, 801.8527, 210.1133, 7.357, 0.0, 156.2198, 13.9087, 61.3431, 709.2926, 0.0, 0.0, 349.0295], [10.3896, 5.3016, 908.692, 680.7005, 39.4944, 1069.3613, 64.7165, 9.3226, 10.891, 157.0666, 28.8977, 54.4253, 761.4404, 232.7122, 68.0198, 371.2831], [7.8718, 121.6275, 462.9705, 92.6788, 224.9712, 1039.5134, 372.335, 37.309, 17.5865, 253.1693, 34.1799, 181.6214, 854.5169, 410.4178, 47.3281, 779.8785], [59.157, 1022.462, 536.9313, 60.18, 675.5042, 151.0934, 83.0981, 14.2709, 414.5753, 15.1434, 77.3955, 1027.9965, 134.82, 71.2303, 783.0576], [97.5967, 69.3405, 580.594, 587.6086, 295.8408, 447.4935, 135.5933, 106.8163, 43.875, 155.6377, 19.5681, 202.6042, 1188.1794, 364.1424, 129.901, 705.7558], [0.0, 53.1927, 1040.812, 950.4744, 135.0072, 1417.8856, 588.3437, 16.0243, 24.7112, 196.5978, 68.8744, 76.7458, 1264.4274, 354.1272, 49.2156, 741.7296], [8.9201, 91.1433, 1105.404, 1201.6575, 493.3128, 1499.1256, 743.3453, 36.6163, 155.0027, 35.3462, 215.9812, 2233.6278, 596.8546, 78.1099, 1187.3027]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

