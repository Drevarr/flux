created: 20230311223557000
creator: Drevarr
modified: 20230705163521728
modifier: drevarr
tags: ChartData
title: 202303112235_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Venomina The Fierce", "Misaki Amakase", "Xyntharos", "Panther B Me", "Smol Daddy Tika", "Sygaldry Verdandi", "K\u00f4sair", "\u00c1rkantor", "Sheep Paws", "Sp\u00edcy Cheese", "Morton Saltbringer", "Koralia Danai", "Mac Chiato", "Harry Callahann", "Black Raspberry Pie", "Seren Nightroad", "Kmpek", "Johosh The Great", "Be\u00eb", "Newtype Khan", "Smol Gluvs", "Xanvias Tseli", "Drevarr Moonwillow", "Bella Sassy"];
const professions = ["Tempest", "Spellbreaker", "Vindicator", "Vindicator", "Scourge", "Berserker", "Firebrand", "Spellbreaker", "Vindicator", "Berserker", "Berserker", "Chronomancer", "Firebrand", "Tempest", "Scrapper", "Chronomancer", "Scourge", "Vindicator", "Firebrand", "Scourge", "Spellbreaker", "Scourge", "Berserker", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[295, 714, 700, 280, 261, 336, 328, 245, 270, 283, 440, 5189, 874, 374, 482, 552, 533], [25270, 1617, 471, 1721, 278, 509, 267, 241, 490, 18736, 600, 317, 858, 2554, 321, 615, 2669], [3457, 26864, 5100, 527, 493, 216, 1855, 354, 470, 1128, 693, 2624], [279, 344, 418, 645, 252, 320, 235, 242, 254, 229, 370, 569, 581, 739, 1268, 498, 838, 682, 1032, 563, 2578, 353, 2979, 398], [242, 668, 318, 443, 266, 354, 273, 237, 296, 257, 400, 240, 596, 308, 584, 835, 1405, 9999, 1849, 507, 5619, 657, 826, 532], [239, 327, 595, 412, 220, 328, 252, 275, 361, 354, 466, 912, 1064, 1531, 467, 1473, 472, 1138, 583, 5562, 375, 693, 2780], [267, 1040, 585, 320, 395, 541, 483, 422, 246, 518, 616, 549, 1513, 1040, 481, 617, 1951, 323, 231, 453, 7117, 344], [235, 666, 1399, 224, 371, 439, 266, 289, 236, 426, 788, 926, 1796, 3026, 467, 732, 1542, 4688, 611, 381, 227, 346], [255, 408, 455, 333, 273, 329, 252, 205, 232, 272, 338, 3979, 2002, 402, 1545, 497, 472, 430, 1820, 228], [258, 303, 559, 446, 245, 337, 228, 219, 269, 203, 358, 6071, 580, 556, 942, 1610, 747, 467, 1702], [288, 552, 388, 187, 270, 455, 410, 8169, 386, 14175, 451, 520, 850, 1574, 1844, 309, 712, 3295, 357], [209, 825, 14568, 200, 320, 265, 215, 269, 271, 530, 11167, 1509, 1600, 383, 1557, 1427, 1556], [269, 391, 282, 449, 275, 454, 263, 252, 251, 256, 374, 190, 516, 911, 804, 512, 524, 569, 667, 1310, 2999, 355, 490, 2879], [359, 453, 672, 1412, 239, 493, 681, 193, 464, 270, 555, 4529, 772, 711, 4415, 5644, 14840, 1288, 543, 5376, 2765, 466, 275, 274], [2109, 683, 478, 226, 263, 305, 296, 271, 297, 242, 284, 279, 613, 1919, 731, 454, 288, 563, 3825, 427, 6318, 348], [289, 1767, 274, 1469, 278, 348, 273, 241, 245, 294, 361, 226, 423, 346, 2159, 591, 1049, 1049, 631, 2276, 397], [274, 554, 484, 348, 242, 284, 217, 275, 287, 257, 447, 468, 6180, 564, 2486, 565, 364, 410, 1508], [639, 436, 259, 231, 358, 304, 306, 370, 317, 367, 337, 709, 1139, 1743, 711, 307, 573, 238], [265, 392, 252, 259, 284, 410, 219, 227, 275, 274, 387, 253, 472, 489, 798, 410, 324, 565, 203, 305, 2430, 406, 2590, 2507], [259, 655, 277, 340, 288, 302, 223, 300, 262, 496, 1021, 418, 459, 360, 767, 551, 759, 221, 1466, 2726, 415, 2687, 392], [222, 590, 1254, 373, 232, 515, 264, 239, 311, 275, 292, 327, 308, 854, 2139, 295], [246, 624, 322, 344, 198, 342, 223, 195, 240, 226, 334, 199, 449, 458, 518, 256, 575, 2279, 1027, 2494, 255, 3274, 379], [191, 433, 329, 418, 219, 305, 198, 184, 243, 208, 318, 564, 455, 1464, 1039, 344, 280, 382, 1086, 1658, 3022, 355, 285, 2727], [187, 440, 291, 341, 299, 366, 192, 228, 262, 205, 309, 1826, 380, 369, 596, 332, 369, 1040, 639, 359, 321, 261, 239, 222], [226, 436, 1577, 272, 230, 208, 179, 173, 157, 179, 270, 372, 322, 260, 280, 400, 508, 255, 187, 286, 2506, 278, 6027, 298]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

