created: 20230807085837000
creator: Drevarr
tags: ChartData
title: 202308070858_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Vee U", "K\u00e2 \u00d4tik R\u00e6j", "Govinda Ektar", "Nyriss Hrafn", "Hawaiian Supreme", "I Mad X King I", "Blackjuniper", "Palm Sauce", "Revitiel", "Dimiskus", "Xx Zen Xx", "Mom Tapper", "Rockdevil", "Meryndah", "Forever Dreaming", "Newtype Khan", "Roderik Manloy", "Jerryatric Reflexes", "Xanvias Tsolea", "Drevarr Moonwillow"];
const professions = ["Tempest", "Berserker", "Vindicator", "Berserker", "Berserker", "Holosmith", "Druid", "Vindicator", "Vindicator", "Mesmer", "Druid", "Spellbreaker", "Weaver", "Druid", "Harbinger", "Spellbreaker", "Renegade", "Spellbreaker", "Dragonhunter", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[29.1276, 0.0, 0.0, 21.7246, 19.5507, 16.8113, 15.7263, 18.256, 0.0, 15.953, 22.4968, 28.4372, 27.8008, 0.0, 0.0, 0.0, 15.3582, 15.2578, 5.508, 22.5994, 7.473, 29.0509, 0.0, 30.527, 0.0, 59.228, 0.0], [32.9902, 174.0495, 139.8848, 43.9441, 39.4214], [81.308, 121.8048, 117.0495, 100.1718, 99.2577, 0.0, 17.2513, 0.0], [0.0, 149.969, 0.0, 23.9674, 0.0, 0.0, 143.9273, 0.0, 0.0, 0.0, 0.0, 56.35, 0.0, 55.7804, 50.2645, 0.0, 114.6127], [0.0, 33.0724, 65.9017, 0.0, 23.9984, 67.562, 76.4768, 15.8941, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.5757, 14.6653, 0.0, 42.728, 0.0, 12.0224, 10.1887, 0.0, 12.5948, 0.0, 0.0, 25.616, 31.3538, 0.0, 87.5646, 30.0976, 0.0, 0.0, 0.0, 24.0139, 95.9249], [46.9224, 0.0, 31.7923, 94.0117, 28.6913, 22.9932, 116.13, 44.637, 251.5864, 52.052, 59.7148, 83.7044], [33.894, 106.2218, 41.6333, 50.2421, 45.0403, 53.6381, 194.7234, 165.8443, 36.9409, 24.6556, 84.623], [66.0449, 28.7658, 63.9085, 32.8477, 51.0112, 23.2848, 32.1446, 60.7104, 117.6822, 127.1812, 24.1882, 23.9136, 51.3802, 42.6862, 40.7228, 12.3188, 29.8498, 8.9597, 57.057], [19.4086, 76.3706, 29.9147, 58.7951, 21.65, 65.7734, 28.8497, 77.8206, 0.0, 0.0, 105.327, 54.3856, 22.842, 138.327, 37.9134, 300.8252, 102.1735], [15.5002, 27.152, 41.3319, 0.0, 11.0261, 15.961, 96.096, 11.8742, 25.2742, 0.0, 11.502, 159.103, 57.3244, 124.202, 16.4808, 12.3671, 0.0, 4.1624, 125.7062, 92.7234, 104.747, 78.5921, 64.3972, 0.0, 0.0, 27.7757, 16.1587, 8.8444, 32.6454], [28.3608, 273.371, 64.428, 550.29, 195.8028, 0.0, 121.1824], [70.4474, 42.9885, 84.2285, 115.4437, 66.973, 39.96, 134.211, 70.2926, 58.5208, 95.8457, 0.0, 77.407, 0.0, 0.0, 58.2097, 0.2812, 81.101, 70.3774, 54.7419, 25.4155, 0.0, 0.0, 51.3692, 74.5158], [28.8263, 3.6981, 54.0896, 36.2637, 14.1219, 43.6363, 30.8822, 39.0213, 93.9542, 16.3539, 5.2364, 38.5351, 0.0, 44.2302, 0.0, 67.7434, 27.5278, 74.8462, 146.3532, 9.351, 37.0138, 93.1305, 81.7182, 33.4152, 107.212, 15.9088, 173.6176, 28.8145, 16.3944, 9.5993, 16.6496, 92.3974], [76.6433, 40.4352, 222.656, 56.6801, 447.1272, 41.9348, 36.0142, 131.054, 31.9827, 147.9667, 161.985, 168.263, 117.97, 151.5242, 58.9876], [13.7852, 78.2678, 0.324, 54.2909, 180.3038, 107.7322, 20.1744, 19.551, 49.94, 131.3624, 12.6912, 0.0, 62.9059, 18.0145, 144.5294, 240.5189, 235.8565, 179.6911, 117.4173, 104.3888, 0.0, 10.4224, 119.7616], [223.813, 67.4599, 418.6116, 238.3647, 298.1071, 185.4178, 206.9997, 226.4211, 24.002, 92.0276, 43.3229, 105.0192, 162.3486], [9.5792, 101.0227, 60.8114, 44.0895, 19.5608, 66.7462, 70.1437, 148.0452, 247.8799, 11.3627, 30.5598, 98.5982, 40.8949, 22.4474, 0.0, 23.9659, 123.1802, 195.7973, 0.0, 82.3133, 72.8618, 17.5824, 40.4892, 231.966, 19.0145, 369.7772, 90.0185, 18.8892, 78.8707, 16.2237, 184.672, 70.4792], [252.3276, 65.1105, 173.2954, 210.9007, 158.881, 73.0728, 175.028, 127.1214, 457.2048, 162.9842, 0.0, 70.0203, 69.0765, 338.2038, 413.7431, 326.0514, 160.3112], [125.781, 131.222, 58.9226, 80.7932, 92.3731, 34.4384, 62.8563, 37.325, 129.577, 70.1842, 120.4632, 128.3822, 31.1895, 84.7325, 111.4605, 82.7572, 58.2228, 143.178, 64.4776, 296.6704, 103.103, 36.6379, 91.4995, 67.034, 48.2856, 149.0131, 205.276, 100.3536, 159.7653, 75.6498, 25.4595, 72.9716, 44.713, 96.2543, 58.1237], [201.1925, 13.2174, 215.1997, 85.9833, 163.8406, 83.888, 59.2839, 80.4202, 414.4793, 245.002, 20.1787, 97.1172, 240.2166, 30.6535, 157.0208, 0.0, 206.4859, 99.5724, 297.44, 348.2153, 56.7855, 194.3222, 384.2602, 154.4854, 71.5176, 446.439, 91.6199, 626.4908, 173.9595, 19.8871, 254.6532, 65.098]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

