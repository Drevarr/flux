created: 20230603000934000
creator: Drevarr
modified: 20230705163532955
modifier: drevarr
tags: ChartData
title: 202306030009_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Kardknight", "Zadey Starbolt", "Drevarr Moonwillow", "Tegan Parker", "Primal Clone", "Miphest\u00f6", "Venomina The Siren", "Pamtastic", "Black Raspberry Pie", "Johosh Of The North"];
const professions = ["Tempest", "Renegade", "Scrapper", "Scrapper", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[63.653, 103.4629, 20.0597, 165.0379, 41.8704, 10.4026, 42.6126, 0.0, 0.0, 59.8299, 69.5948], [43.4808, 38.3846, 104.9436, 163.2582, 237.9048], [2.5897, 28.2982, 109.7005, 25.8984, 0.0, 0.0, 0.4708, 113.4038, 19.3752, 62.2007, 0.0, 5.9082, 0.0, 50.232, 71.8502, 36.9758, 15.2145, 0.0, 88.2586, 0.0, 36.184, 29.5882], [0.0, 47.5438, 0.0, 113.2078, 17.952, 0.0, 0.0, 5.9968, 110.4731, 23.4117, 54.8067, 15.4488, 25.8879, 0.0, 39.767, 74.7608, 53.9559, 57.3804, 0.0, 44.3904, 0.0, 47.1649, 44.1157], [43.1319, 84.1817, 42.6703, 508.3637, 0.0, 0.0, 0.0, 43.9597, 333.8404, 47.8101, 168.9603, 0.0, 47.0562, 0.0, 282.8272, 114.2711, 47.196, 0.0, 43.0195, 74.3904, 89.6994, 108.3566], [32.0944, 52.6759, 0.0, 396.5198, 0.0, 0.0, 0.0, 64.7006, 299.437, 217.074, 148.6591, 0.0, 0.0, 150.4545, 155.925, 165.1456, 88.5546, 0.0, 95.6352, 32.1399, 169.5425, 95.695], [865.3288, 598.7466, 203.1705, 197.3041, 48.2488, 57.0372, 2.1616, 193.683, 337.297, 134.6602], [76.4229, 146.9081, 662.49, 44.616, 18.4313, 0.0, 121.422, 321.4807, 291.7044, 117.0074, 79.376, 87.5224, 111.895, 219.875, 136.2992, 126.9945, 249.239, 40.6638, 152.7404, 321.4714], [84.1206, 105.2806, 0.0, 747.0549, 40.0488, 23.1185, 39.828, 52.1619, 349.8953, 304.6212, 207.2277, 39.7208, 44.6964, 12.3088, 114.3905, 128.4822, 108.4362, 136.1853, 78.6931, 132.9754, 24.8337, 161.2075, 406.1042], [73.7797, 213.6262, 8.8658, 603.0607, 109.824, 0.0, 291.1662, 185.8239, 0.0, 65.2354, 43.3104, 181.3665, 405.7376, 167.5058, 290.5659, 32.8957, 214.3142, 125.1279, 191.5704, 514.061], [43.1676, 175.8121, 48.4276, 902.3504, 49.0776, 25.4923, 45.2825, 124.9408, 559.2464, 332.8767, 282.141, 52.2504, 36.3934, 0.0, 174.7655, 301.954, 204.4816, 164.1924, 46.6171, 219.0144, 107.8956, 158.3631, 431.0275]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

