created: 20230204220933000
creator: Drevarr
modified: 20230705163518667
modifier: drevarr
tags: ChartData
title: 202302042209_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Mike The Archmagus", "Newtype Khan", "Blanco Padre Guard", "Vinthry Stormgrave", "Smol Gluvs", "Rina Of Theros", "Sp\u00edcy Cheese", "Aronorf Xideliesi", "Koralia Danai", "Kosa\u00edr", "High Sorcer Baradun", "Grasszanine", "Daddys Lil Orchid", "Etch\u00e9ry", "Madrigal Moonshade", "Xanvias Einzbern", "Drevarr Moonwillow", "Sygaldry Verdandi"];
const professions = ["Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Tempest", "Scourge", "Scourge", "Berserker", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Spellbreaker", "Vindicator", "Berserker", "Vindicator", "Berserker", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[264, 314, 512, 401, 588, 234, 1121, 258, 124, 221], [234, 370, 412, 280, 990, 225, 577, 327, 193, 228], [339, 306, 1482, 280, 792, 210, 2199, 419, 130, 250], [242, 237, 409, 366, 681, 291, 600, 307, 185, 2318], [249, 443, 430, 441, 365, 401, 14365, 395, 262, 252], [278, 318, 414, 488, 533, 247, 16719, 250, 156, 213], [332, 372, 472, 331, 390, 233, 17792, 6935, 143, 266], [279, 412, 25135, 373, 351, 232, 17610, 262, 163, 263], [360, 733, 463, 529, 1242, 374, 300, 18522, 257, 279], [309, 355, 399, 7799, 26979, 6140, 12168, 273, 217, 242], [11012, 665, 253, 8141, 228, 172, 206], [306, 301, 352, 376, 324, 398, 8965, 336, 184, 326], [313, 584, 469, 381, 957, 226, 10206, 227, 82, 260], [358, 7649, 2371, 655, 27889, 227, 320, 12727, 124, 9311], [228, 308, 447, 481, 797, 202, 13525, 227, 176, 233], [211, 236, 577, 311, 12793, 190, 14304, 18715, 161, 196], [238, 304, 349, 273, 465, 207, 188, 198, 90, 217], [177, 231, 1396, 251, 959, 188, 537, 202, 153, 192], [189, 193, 369, 307, 866, 8756, 149, 215, 124, 178]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

