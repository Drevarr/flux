created: 20230301221309000
creator: Drevarr
modified: 20230705163520925
modifier: drevarr
tags: ChartData
title: 202303012213_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Eibh\u00ebar", "Ravioli Fetabringer", "Etchery Howls", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Firebrand", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[612.0667, 196.6058, 362.8615, 27.2273, 730.7234, 445.3725, 295.5224, 206.7857, 0.0, 522.5854, 231.8824, 283.2922, 103.1842, 0.0, 0.0, 1022.6944, 0.0, 126.7835, 266.2157, 0.0, 25.1212, 0.0, 395.9744, 0.0, 182.354, 0.0, 178.3438, 458.8814, 440.1233, 45.2182, 46.4167, 0.0, 568.6638, 239.3271, 368.75, 0.0, 290.5051, 538.1977, 25.7732, 656.0694, 513.9318, 101.9104, 104.0789], [1678.8333, 735.1095, 1054.7692, 52.6591, 1154.9787, 832.4118, 946.7015, 422.0879, 125.0, 523.6829, 472.7143, 469.1818, 44.8421, 363.6667, 11.3529, 884.8472, 71.1282, 146.9485, 1492.8627, 57.5682, 438.3939, 61.5652, 722.3846, 39.2727, 657.0621, 0.0, 895.1094, 487.7627, 792.137, 189.6909, 1561.4444, 402.2281, 380.3621, 345.8505, 1800.8542, 11.2235, 785.8081, 658.2907, 479.6701, 978.7917, 1014.9773, 966.5075, 530.9123], [2525.45, 1725.5182, 2599.6, 94.4318, 2983.4043, 2387.3922, 2083.5522, 1002.1264, 203.8026, 1437.8415, 1085.2521, 1492.026, 38.4737, 38.2917, 25.2353, 1829.0278, 211.9744, 984.2929, 97.4348, 753.1667, 95.0, 51.5, 513.6832, 11.7561, 1917.3281, 5125.0339, 3044.3562, 1082.4545, 2158.6944], [2163.4833, 1708.1095, 2193.8462, 131.4318, 2304.0, 1624.2941, 3382.3731, 1180.5495, 24.8289, 2226.2805, 1688.6891, 1784.3312, 19.6316, 177.9583, 0.0, 3115.2778, 501.9231, 157.2887, 2612.7059, 143.0682, 1011.7071, 77.087, 2346.7436, 1058.5909, 2164.7795, 3.5122, 1502.6562, 1565.0169, 609.411, 2312.4, 1538.3333, 597.4211, 2116.1638, 220.9346, 5187.8958, 8.0235, 682.0808, 798.2326, 185.8866, 2199.125, 1520.1818, 2303.8209, 1963.9211], [2955.2333, 3468.8905, 4273.8923, 195.0909, 2314.0851, 3061.549, 4082.7761, 1327.478, 685.5658, 2326.0488, 1684.8319, 1779.474, 256.8684, 1179.5, 220.8235, 3733.4306, 654.5128, 686.2165, 3125.2157, 551.0, 1349.8687, 976.0217, 2471.8846, 148.3636, 1191.5909, 2502.6708, 669.5854, 3159.5469, 2703.6271, 1502.8767, 2135.2, 4075.5278, 984.5965, 2274.4138, 357.243, 3341.5208, 120.6706, 2857.1717, 686.0814, 945.8763, 2309.7361, 2629.5682, 2412.597, 2429.5]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

