created: 20230722082451000
creator: Drevarr
tags: ChartData
title: 202307220824_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Cyra Cymbidium", "Sister Elon\u00edth", "Kayrin Willowroot", "Achinoam", "Pixzil", "Aronorf Xideliesi", "Audra Storm", "Xx Zen Xx", "Legoh Brave", "Drevarr Moonwillow"];
const professions = ["Druid", "Firebrand", "Druid", "Vindicator", "Firebrand", "Firebrand", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[36.1746, 100.86, 335.2362, 158.1653, 2.1164, 98.8514, 16.0793], [11.0237, 1.3306, 24.9185, 60.5072, 3.2895, 3.4214, 112.2581, 123.585, 5.2517, 126.6323, 80.3204, 68.2425, 161.919, 65.928, 448.0266, 126.5628, 0.0, 156.2671, 64.2172], [50.8648, 0.0, 3.6824, 244.8118, 0.0, 5.9904, 57.8117, 104.1966, 0.0, 465.918, 12.1125, 50.0175, 0.0, 111.2412, 132.514, 133.8137, 0.0, 417.1608], [151.5192, 10.1774, 78.65, 143.3149, 12.5093, 86.2596, 145.4227, 16.4365, 43.7418, 172.4425, 189.4657, 248.4174, 77.7852, 70.583, 411.8717], [207.6582, 16.0476, 15.9322, 72.4219, 200.4324, 28.103, 134.699, 27.1708, 43.5375, 40.2408, 88.314, 142.8983, 137.1334, 0.0, 258.8191, 34.7337, 5.4, 74.0932, 0.0, 27.5994, 81.2786, 16.6352, 371.2695, 140.1021], [38.2424, 19.7971, 15.5502, 110.686, 26.1806, 21.1277, 67.2509, 87.954, 11.8037, 42.6976, 11.0369, 44.118, 65.8692, 99.6546, 281.0289, 123.8983, 9.1832, 169.2753, 25.2946, 62.6292, 72.6413, 0.0, 50.0094, 44.9046, 133.4507, 13.8233, 339.4692, 124.8021, 38.5387, 197.4931], [46.0188, 15.2929, 76.608, 137.4293, 191.316, 3.5885, 86.925, 65.8532, 34.9515, 66.1122, 55.3254, 246.284, 65.4108, 0.0, 363.1654, 0.257, 79.5528, 115.434, 0.0, 0.0, 41.9976, 154.1365, 113.2274, 304.4769, 172.4463, 3.073, 265.9219], [100.9494, 65.9059, 476.1796, 296.6259, 114.4101, 70.7904, 546.4613, 750.498, 205.6219, 917.0935, 46.2601, 0.0, 144.7146, 239.8746, 72.1675, 101.2502, 105.2584, 525.6002], [117.1555, 475.722, 89.5406, 160.9851, 49.3124, 35.8695, 74.0826, 82.5576, 546.8406, 200.0544, 51.0848, 343.4287, 43.3684, 222.7176, 155.8838, 218.1848, 164.1486, 351.5972, 246.5984, 634.6095, 243.3465, 51.6226, 347.0227], [146.6352, 163.4918, 234.5504, 793.2785, 223.0862, 166.4525, 840.8002, 1145.9058, 2433.6914, 213.994, 432.972, 420.5358, 545.5296]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

