created: 20230710072127000
creator: Drevarr
tags: ChartData
title: 202307100721_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Legoh Brave", "Porlen", "Yngvar The Burdened", "Luke The Knight", "Hit The Gas", "Xanvias Einzbern", "Anti Jimbo", "Latedoctor", "Mirhayna", "Elonith Requiem", "Charr Surethang"];
const professions = ["Tempest", "Ranger", "Scourge", "Berserker", "Berserker", "Berserker", "Weaver", "Reaper", "Berserker", "Reaper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[160.2542, 1007.1091, 1.2903, 501.9074, 356.8216, 378.5088, 0.0, 54.8547, 0.0, 526.6818, 391.6554, 159.9748, 21.5156, 135.575, 37.8042, 280.027], [201.5304, 205.3333, 0.0, 408.3571, 334.1212, 165.9611, 47.7647, 544.4394, 277.602, 11.9896, 311.0169, 466.0727, 254.4839, 698.5926, 62.5568, 700.9649, 52.9815, 64.1628], [0.0, 28.0968, 504.2593, 570.4595, 667.1579, 187.9074, 30.0698, 0.0, 76.0227, 323.8757, 698.8571, 0.0, 31.65, 27.8706, 399.4324], [687.6381, 1229.0784, 934.4545, 82.3469, 445.3523, 911.7627, 1395.1273, 1898.7963], [837.2919, 1291.9298, 1035.0, 340.5465, 154.013, 902.0455, 1213.4068, 1858.4034, 241.0156, 1255.225, 385.6189, 1027.1081], [1333.6174, 2781.7708, 3211.8636, 323.7857, 3831.8788, 1134.9615, 1166.8599, 3673.2157], [1068.3074, 0.0, 734.5152, 181.1327, 878.3782, 936.4068, 1968.6, 0.0, 770.0, 991.4649, 766.0877, 459.1111, 292.907, 70.039, 1513.8409, 610.5424], [411.1217, 632.8125, 1470.5, 1215.3214, 980.2273, 99.3077, 550.2179, 591.0392, 613.2727, 154.0918, 188.6943, 720.1356, 1567.6182, 133.1613, 2055.9259, 728.0108, 1001.8421, 65.8889, 128.186, 0.0, 577.1591, 815.4972, 1052.605, 1284.95, 52.7587, 485.8108], [397.5816, 476.0052, 1385.5763, 2529.1636, 0.0, 1803.3333, 990.0432, 2300.5088, 354.5926, 624.7384, 0.0, 2368.9773, 1450.4633, 2605.0168, 45.5781, 623.1], [1664.8333, 459.2347, 1222.3057, 1253.4407, 3867.7818, 0.0, 988.2222, 1655.8054, 2070.7018, 400.4259, 175.5, 64.1169, 1574.5455, 1527.5989, 2465.4706, 103.9531, 2752.175, 251.507, 631.7297], [1621.9217, 765.3125, 2705.8636, 2322.1667, 2556.5385, 1071.5253, 2495.4706, 1589.7879, 34.602, 233.057, 1272.661, 3736.7636, 1224.037, 1215.2919, 2776.8947, 192.2778, 204.7558, 0.0, 56.9545, 873.0226, 2580.2017, 0.0, 1407.175, 3.0315]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

