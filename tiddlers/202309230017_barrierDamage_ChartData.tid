created: 20230923001758000
creator: Drevarr
tags: ChartData
title: 202309230017_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Brutal Araden", "Brutal Araden", "Arriasa", "Gamora Titus", "Lord Erin The Wise", "Xanvias Tsolice", "Klavde\u00efa", "Arcanophage Farra", "Mistwalker Cael", "Ttv Rodrigoapss", "Cat Bonum", "High Sorcer Baradun", "Gavann", "Oo Dads Mad", "Necrotic Windrunner", "Seiker Novus Terra", "Mimbsi", "Venomina The Sly", "Elon Illusionblade", "Rod Reaper", "Sofya De Nova", "Halfpint The Drunk", "Inquisitor Stryker", "Air One Com", "Varen Frostwood", "Glorious Gluvs", "Koralia Danai", "Lai Zee", "Ice Jasminie", "Black Raspberry Pie", "Tegan Parker", "Kosa\u00efr", "Zaedy Zae", "Jimbo The Pleb", "Liu Mira", "Anita Strips", "Sub Train", "Ryvalia Fazebringer", "Bella Sassy", "No Reserv\u00e9", "Be\u00eb", "Rina Of Theros", "Drevarr Moonwillow", "Grasszanine", "Revenant Brandorf", "Mort\u00e4rion", "Leafzely"];
const professions = ["Herald", "Renegade", "Druid", "Firebrand", "Weaver", "Weaver", "Chronomancer", "Spellbreaker", "Herald", "Spellbreaker", "Spellbreaker", "Tempest", "Firebrand", "Berserker", "Reaper", "Tempest", "Firebrand", "Druid", "Chronomancer", "Reaper", "Weaver", "Berserker", "Firebrand", "Firebrand", "Tempest", "Berserker", "Firebrand", "Scrapper", "Scrapper", "Chronomancer", "Tempest", "Weaver", "Druid", "Berserker", "Berserker", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Vindicator", "Reaper", "Reaper", "Scrapper", "Spellbreaker", "Vindicator", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7850, 2717, 11662, 0, 956, 0, 261], [13791, 5079, 4603, 2487, 0], [0, 4559, 0, 1721, 3399, 295, 1012, 1923, 0, 4212, 0, 0, 3636, 0, 4288, 0, 2363, 1545, 590], [0, 5837, 640, 1286, 2401, 0, 2304, 556, 1352, 0, 0, 261, 0, 509, 522, 10049, 0, 4697, 82, 2035, 0, 274, 783, 567, 270, 261], [0, 0, 219, 1073, 3440, 261, 3742, 0, 0, 3636, 0, 0, 261, 7515, 133, 3676, 261, 10534, 0, 253, 3549, 0, 234], [261, 8063, 0, 3734, 3398, 0, 2142, 817, 897, 0, 0, 188, 0, 777, 522, 7567, 2342, 3204, 402, 2614, 522, 522, 1152, 261, 835, 0, 0], [543, 2434, 0, 0, 3756, 1690, 6494, 11612, 99, 5184, 2763, 632, 0, 3180, 1002, 484, 1564], [0, 6137, 0, 2188, 4129, 0, 1958, 1869, 1123, 8272, 0, 0, 2566, 4319, 3432, 3188, 590, 5049, 324, 1439, 2157, 261, 522, 762, 0], [0, 7809, 0, 1254, 3192, 0, 0, 4110, 422, 133, 0, 9854, 0, 3469, 728, 3190, 774, 6309, 751, 5539, 261, 1411, 1184, 1644, 0, 0, 0], [6059, 17173, 834, 7716, 2684, 2534, 0, 5732, 4463, 2482, 5834, 0, 0], [22103, 3236, 5220, 852, 8137, 0, 6660, 2622, 3797, 4103, 1817], [921, 23980, 1946, 1787, 10679, 295, 3804, 5784, 274, 0, 5496, 4611], [0, 9195, 0, 6019, 6087, 1330, 2093, 2585, 2439, 2093, 3768, 6445, 570, 6769, 505, 10388, 0, 0, 3432, 261, 0], [0, 8185, 0, 5284, 6269, 2911, 0, 6638, 0, 501, 4509, 0, 3723, 0, 16796, 0, 12370], [0, 15326, 1075, 8718, 4551, 0, 295, 575, 2386, 710, 0, 7080, 0, 1403, 429, 5800, 0, 10560, 2463, 3999, 261, 329, 66, 0, 256, 1219, 0], [0, 10569, 0, 3606, 12328, 134, 1550, 2740, 0, 7972, 0, 1218, 3557, 19750, 1109, 8927, 20], [2935, 0, 3201, 0, 4718, 7245, 19153, 4451, 9206, 1234, 9635, 0, 2706, 3325, 2629, 1766, 1358], [0, 9411, 0, 8469, 4606, 0, 2074, 6412, 261, 2918, 5630, 0, 1249, 3624, 9869, 0, 12091, 0, 4233, 0, 501, 4194, 522, 0, 0, 0], [0, 3101, 5633, 27885, 1970, 10468, 0, 7768, 2539, 5098, 2975, 6073, 1910, 1159, 0], [0, 2233, 1297, 7609, 12886, 0, 295, 2441, 2613, 0, 0, 2468, 0, 1067, 4118, 3245, 1362, 6184, 2945, 8248, 0, 3954, 7498, 2879, 3059, 369, 0], [0, 15298, 0, 7698, 11730, 0, 261, 1347, 1441, 553, 3179, 3435, 0, 0, 2825, 8885, 261, 10725, 261, 5575, 1284, 0, 3761, 501, 1444, 0, 0], [0, 5312, 247, 7905, 7070, 0, 2788, 2991, 6355, 501, 0, 9394, 833, 6728, 0, 673, 10100, 1358, 12916, 961, 4373, 0, 480, 125, 395, 0], [315, 21372, 0, 5957, 8098, 0, 3238, 4476, 0, 0, 10286, 0, 8066, 2044, 13306, 0, 5863, 0, 279, 817, 261, 0, 0], [0, 3961, 42, 6042, 6701, 0, 1689, 1089, 3628, 0, 5457, 0, 213, 7913, 20833, 3154, 8237, 328, 5887, 0, 3013, 6196, 3154, 372, 1227, 0], [0, 12016, 0, 2515, 14267, 0, 3131, 2446, 0, 3234, 0, 2294, 6575, 399, 2198, 10788, 0, 10978, 0, 5745, 5458, 5788, 831, 739, 0], [0, 3771, 0, 9922, 9308, 0, 474, 3906, 2817, 501, 0, 13956, 0, 1212, 8897, 6804, 1575, 4064, 74, 10059, 0, 6298, 4170, 0, 2857, 300, 0], [0, 10758, 0, 3910, 7410, 0, 1125, 1599, 5206, 0, 4124, 0, 811, 3533, 30126, 1073, 10804, 0, 13624, 62, 1928, 2319, 0, 154, 0], [0, 33215, 1115, 16658, 18587, 16004, 5473, 7663], [185, 39042, 4955, 14543, 20018, 6073, 10310, 5465], [438, 13858, 1052, 9154, 7187, 3638, 6905, 2919, 0, 0, 10711, 0, 1399, 5946, 3418, 933, 11387, 1520, 7560, 871, 4255, 3675, 2919, 1111, 1424, 0], [0, 16416, 0, 5887, 9988, 0, 2393, 6905, 3651, 0, 7521, 0, 3030, 2315, 17699, 377, 10284, 0, 12330, 0, 2375, 2074, 0, 501, 973], [261, 23657, 1322, 13883, 17850, 0, 4762, 3815, 243, 0, 8572, 6644, 527, 12389, 8899, 358, 2167, 261, 295, 780, 224, 283, 249], [0, 12274, 279, 5271, 11506, 0, 622, 6567, 1696, 0, 0, 8203, 0, 0, 8992, 20002, 378, 9356, 0, 12190, 0, 4363, 26, 5205, 780, 0], [584, 10863, 0, 6670, 11582, 0, 522, 1155, 0, 246, 261, 4776, 0, 0, 501, 6118, 0, 3184, 0, 28829, 1122, 7692, 12748, 8421, 5884, 1407, 0], [0, 9242, 996, 10798, 7946, 0, 0, 9659, 3908, 261, 0, 10770, 0, 351, 9447, 13694, 1783, 6840, 501, 13655, 0, 3647, 5377, 3204, 1348, 2695, 0], [0, 21100, 635, 10198, 11884, 0, 2918, 4725, 6481, 4539, 0, 10516, 0, 2461, 3512, 8760, 1355, 2969, 1081, 14279, 191, 2370, 3294, 1902, 3180, 2810], [0, 11913, 0, 7986, 10557, 17, 3173, 3584, 0, 0, 9504, 0, 1561, 3060, 18218, 3222, 10227, 3218, 19210, 0, 5521, 5705, 3635, 1851, 443, 0], [0, 19674, 900, 1578, 12093, 0, 4081, 2071, 2441, 0, 7570, 0, 7666, 8379, 18242, 1213, 8735, 39, 11025, 228, 2432, 8948, 4757, 3102, 735, 0], [0, 23553, 119, 4976, 13324, 0, 4076, 4182, 5517, 999, 0, 6076, 0, 3822, 6572, 16717, 2642, 8002, 306, 10993, 0, 5361, 6569, 1334, 930, 444, 0], [295, 14190, 0, 4193, 8983, 2923, 3961, 4207, 0, 0, 622, 0, 3912, 5338, 3407, 1997, 10956, 4512, 31000, 759, 8483, 16636, 5926, 3235, 1905, 0], [0, 18860, 51, 5617, 5455, 863, 2579, 4249, 0, 0, 11643, 0, 4787, 10182, 30247, 261, 17123, 2902, 9598, 819, 7090, 1418, 1372, 3266, 501, 0], [298, 28491, 584, 12081, 10806, 0, 3095, 2220, 1816, 1843, 1085, 5619, 0, 799, 3450, 20611, 4877, 6352, 4869, 10947, 3416, 6130, 2511, 4260, 4970, 89, 0], [0, 27365, 626, 6791, 18110, 49, 3510, 6270, 3557, 86, 9603, 0, 5673, 8286, 24483, 3061, 19333, 1253, 13862, 0, 5161, 4772, 3946, 2827, 2069, 0], [0, 25145, 23, 8270, 13665, 7124, 1222, 3477, 0, 3438, 6234, 7152, 26619, 501, 11276, 125, 30904, 0, 6060, 11607, 5872, 4047, 0, 0], [0, 34057, 325, 14968, 17186, 638, 4279, 2888, 1048, 501, 11963, 4293, 5193, 21766, 2454, 10670, 2903, 24194, 261, 10045, 7179, 2820, 3402, 1450, 0], [2408, 67098, 2328, 36891, 23981, 9782, 18775, 22416, 700, 1069, 28954, 0, 2433], [120, 69089, 3504, 42430, 40256, 0, 16003, 20797, 19170, 2822, 3656, 24515, 0, 6733, 11043, 667, 7780, 42047, 3596, 41959, 7098, 16591, 19193, 4939, 6048, 2065, 0]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

