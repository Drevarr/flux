created: 20230527220043000
creator: Drevarr
modified: 20230705163532044
modifier: drevarr
tags: ChartData
title: 202305272200_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Anita Strips", "Tribal S", "Gravlyn Isshtail", "Daddy Demon", "Black Raspberry Pie", "Zaylen Harker", "Newtype Khan", "Hyde En Sikh", "Kaehln Lao", "Blanco Padre Guard", "Zadey Starbolt", "Johosh Of The North", "Aronorf Xideliesi", "Sygaldry Verdandi", "Bella Sassy", "Drevarr Moonwillow", "Crusader Siolith", "Lucas Ryn", "Koralia Danai"];
const professions = ["Chronomancer", "Druid", "Spellbreaker", "Tempest", "Chronomancer", "Firebrand", "Spellbreaker", "Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[61.3985, 54.9416, 0.0, 0.0, 12.192, 19.9566, 92.5122, 13.8024, 52.4682, 112.9969], [4.2737, 118.818, 148.176, 81.7614, 109.8804], [35.4079, 27.9292, 10.9483, 0.0, 16.044, 21.8451, 74.277, 10.773, 12.4752, 102.4907, 11.5632, 58.968, 107.893, 16.2815, 58.1918], [38.88, 97.6946, 23.7699, 63.0025, 178.4286, 51.3702, 52.0562, 0.0, 43.5724, 0.0, 17.4485, 30.6999], [37.9483, 64.152, 98.3421, 17.4917, 69.3781, 62.7984, 37.0818, 73.9746, 0.0, 45.4288, 21.4966, 36.7636, 25.8867, 65.408], [56.9351, 10.1114, 5.4264, 44.652, 20.2374, 208.6044, 94.0572, 192.0819, 58.6291], [56.2237, 25.62, 0.0, 16.668, 24.295, 111.7692, 11.5506, 62.8099, 92.2048, 46.4105, 105.948, 98.0183, 29.9534, 89.9539, 109.368, 41.202, 68.0624, 0.0, 54.7903, 9.0669, 0.0, 59.1822, 22.12, 75.5328], [61.2121, 31.6282, 21.3158, 31.7923, 16.104, 33.5588, 53.448, 19.5696, 51.0579, 89.413, 60.8645, 120.123, 58.4387, 21.6519, 99.3434, 106.4574, 22.869, 119.0371, 21.2706, 37.8706, 34.7994, 10.773, 44.5252, 26.7968, 50.9824], [0.0, 44.2116, 183.0956, 300.0564, 197.694, 255.1619, 117.2234, 177.9008], [25.2749, 21.2134, 0.0, 21.504, 23.8612, 108.3108, 15.471, 50.5155, 238.5571, 85.9882, 225.423, 316.1516, 17.3594, 127.8598, 93.4038, 139.7088, 89.4761], [22.6107, 0.0, 0.0, 8.5546, 13.26, 30.4198, 283.353, 85.6332, 66.679, 141.6502, 25.7018, 76.626, 223.2325, 8.0178, 85.8388, 209.475, 97.1082, 108.871, 30.2218, 65.637, 59.3811, 33.574, 165.2805, 87.2666, 162.9376], [124.9882, 0.0, 39.5744, 13.949, 58.884, 37.1571, 262.0524, 43.254, 138.7098, 296.0841, 143.0158, 243.972, 250.8331, 75.1483, 119.1078, 246.8718, 86.6754, 141.6044, 0.0, 60.4391, 36.4858, 103.7421, 11.6794, 108.3264], [141.7714, 36.8943, 15.372, 0.4469, 54.408, 25.8518, 303.8676, 36.9846, 158.0192, 333.5538, 107.9057, 195.129, 241.525, 61.1928, 197.9334, 239.1102, 138.9528, 252.5663, 0.0, 119.7378, 55.0461, 16.0196, 151.6284, 63.8826, 93.0496], [163.1988, 254.34, 385.5172, 92.0917, 351.0058, 310.464, 253.071, 507.2956, 0.0, 183.3062, 25.2067, 56.0498, 277.3733, 100.311, 132.8768], [11.8648, 28.9312, 149.3304, 32.0264, 110.82, 68.9295, 368.7126, 81.8586, 60.8934, 292.9984, 200.0959, 244.377, 234.8879, 82.9771, 181.8785, 304.0254, 103.6476, 254.4409, 0.0, 118.9687, 9.5629, 16.5564, 197.7822, 83.8032, 111.552], [126.4567, 37.4166, 89.6188, 52.6254, 35.508, 33.7885, 270.384, 58.7574, 143.6998, 266.843, 142.0697, 270.054, 330.7208, 90.4465, 145.0739, 301.4676, 166.6602, 292.7981, 11.4257, 116.8206, 71.4637, 16.8966, 113.0976, 135.3238, 113.9712], [156.0838, 69.2154, 21.999, 0.0, 52.752, 87.0998, 304.2606, 53.46, 82.1194, 245.0959, 116.946, 210.6, 443.5512, 65.561, 311.9987, 266.7168, 222.6042, 162.3692, 5.5694, 98.84, 75.3226, 199.7572, 105.2659, 150.9312], [145.4777, 54.1954, 28.8481, 27.1852, 56.244, 32.9463, 252.699, 35.8344, 132.1648, 404.1585, 169.7162, 289.656, 446.0603, 83.6578, 218.799, 219.7944, 79.6824, 292.8702, 18.7027, 217.8883, 54.7683, 36.2578, 99.7227, 83.9043, 113.6576], [0.0, 16.3951, 88.2182, 52.4446, 26.22, 23.1722, 389.07, 46.2996, 141.711, 428.1097, 207.0864, 313.47, 245.2482, 61.7601, 334.4872, 219.4416, 161.3682, 373.9106, 0.0, 134.7481, 35.5434, 155.821, 69.343, 126.8736]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

