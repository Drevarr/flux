created: 20230320222849000
creator: Drevarr
modified: 20230705163522716
modifier: drevarr
tags: ChartData
title: 202303202228_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Avanda Corone", "Kiloak", "Whose Guardian", "Ark Darkness", "Raelyn Sunray", "Viral Marketing", "Solus Sanctus", "Koralia Danai", "Zaylen Harker", "Johosh The Great", "Bella Sassy"];
const professions = ["Chronomancer", "Firebrand", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[20.9814, 56.8503, 12.3682, 155.6122, 299.6444, 134.707, 61.3305, 171.1361, 51.152, 41.8239, 177.215, 34.443, 0.0, 96.6944, 0.0], [33.9494, 87.6656, 0.0, 0.0, 175.3805, 393.4577, 0.0, 20.0813, 82.1215, 109.112, 40.2113, 318.4834, 0.0, 97.8113, 0.0, 65.2529], [0.0, 8.5298, 25.0128, 73.5015, 16.1905, 47.4256, 10.8654, 412.776, 93.0021, 26.2548, 0.0, 0.0, 38.6355, 130.0895, 24.9538, 77.9625, 0.0, 37.904, 25.1492, 279.7891, 62.3844, 24.89, 0.0, 21.3435, 26.5619], [70.338, 119.3905, 87.2488, 113.8539, 1165.4604, 249.48, 89.012, 20.929, 0.0, 213.1149, 559.0262], [1565.6004, 350.3717, 190.5904, 24.2662, 45.6926, 208.2714, 509.9934, 29.2882, 171.612, 171.3063, 196.8432, 251.8354, 688.0248], [2170.0224, 481.3876, 179.5948, 53.4795, 38.9642, 219.7043, 566.2017, 0.0, 230.958, 59.9955, 195.224, 41.7553, 868.2163, 230.4972, 148.2015, 39.857, 154.0524], [49.0851, 102.8333, 52.9776, 228.285, 166.0937, 58.0609, 252.6982, 2219.724, 635.8333, 38.1854, 0.0, 10.3572, 197.289, 889.8974, 17.9568, 161.3587, 127.9904, 180.688, 72.0167, 825.4008, 234.8703, 164.2661, 23.9378, 155.2382], [177.567, 177.1308, 173.6352, 257.241, 239.2527, 81.1434, 283.5869, 2759.7024, 786.4537, 24.0856, 390.2686, 285.4576, 173.094, 1284.6946, 223.8021, 200.9098, 360.8352, 177.6667], [147.6362, 126.6052, 174.6144, 190.8645, 0.0, 305.473, 2308.5972, 662.0125, 186.252, 152.4896, 158.4727, 363.264, 922.3201, 210.0326, 241.4002, 206.1122, 144.3296, 88.4855, 785.1038, 217.2231, 105.2133, 39.2832, 335.4824, 160.5573], [121.5894, 74.8559, 157.6944, 244.701, 124.0514, 104.2653, 168.3361, 3107.1924, 882.8029, 166.5796, 68.757, 63.2772, 221.3376, 1058.1234, 153.5926, 246.3143, 380.7374, 304.4464, 128.8341, 1266.3778, 159.831, 208.6778, 310.3065, 169.5694], [230.1174, 90.9533, 180.8496, 294.12, 111.3141, 144.2068, 473.7314, 2915.9676, 936.5959, 100.98, 67.5663, 36.2124, 350.1978, 853.754, 169.8775, 251.7007, 475.5388, 233.6064, 115.8992, 1000.0973, 221.0931, 174.393, 29.9981, 258.0679, 193.3532]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

