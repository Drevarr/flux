created: 20230403221011000
creator: Drevarr
modified: 20230705163524373
modifier: drevarr
tags: ChartData
title: 202304032210_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Nazhul Naxxremis", "Seren Nightroad", "Rozaalyna", "Blancooo Padreee", "Smol Gluvs", "Legacy Of Mathus", "Primal Clone", "Newtype Khan", "Black Raspberry Pie", "Be\u00eb", "Eibh\u00ebar"];
const professions = ["Druid", "Scourge", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Chronomancer", "Spellbreaker", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0432, 0.0702, 0.1099, 0.0501, 0.005, 0.0087, 0.0714, 0.0866, 0.0508, 0.0581, 0.0, 0.0, 0.0568, 0.1379], [0.1643, 0.0, 0.033, 0.4485, 0.0323, 0.039, 0.0714, 0.0], [0.2536, 0.2912, 0.6044, 0.3287, 0.0174, 0.013, 0.0417], [0.3458, 0.4368, 0.5385, 0.4763, 0.005], [0.2507, 0.3088, 0.5604, 0.2953, 0.0074, 0.0087, 0.0298, 0.0746, 0.4746, 0.3953, 0.0, 0.0, 0.1757, 0.027, 0.6207, 0.0667, 0.0, 0.0], [0.3573, 0.4912, 0.5495, 0.5348, 0.0323, 0.013, 0.0446, 0.1672, 0.2712, 0.1628, 0.0, 0.037, 0.0243], [0.2738, 0.4351, 0.7473, 0.4457, 0.005, 0.013, 0.0179, 0.1075, 0.6102, 0.3605, 0.0435, 0.0, 0.2135, 0.0, 0.569], [0.3573, 0.3509, 0.4615, 0.4513, 0.0124, 0.0087, 0.0149, 0.1463, 0.5424, 0.6512, 0.0, 0.2838, 0.027, 0.5517, 0.4889, 0.0, 0.0], [0.3487, 0.4368, 0.4945, 0.3844, 0.0174, 0.013, 0.003, 0.194, 0.5763, 0.1977, 0.0, 0.0, 0.2838, 0.0541, 1.069, 0.5111, 0.0, 0.0152], [0.366, 0.7158, 0.6374, 0.5042, 0.0372, 0.013, 0.0833, 0.2866, 1.0, 0.6744, 0.0217, 0.0, 0.3162, 0.0, 0.7241, 0.5778, 0.1081, 0.0303], [0.513, 0.5614, 0.8242, 0.5933, 0.0199, 0.039, 0.1042, 0.2776, 0.8814, 0.5116, 0.0435, 0.0, 0.4811, 0.1081, 0.931, 0.2, 0.1351], [0.6715, 0.7404, 0.967, 0.7994, 0.0397, 0.0303, 0.2024, 0.2985, 1.1525, 0.7209, 0.0435, 0.2593, 0.5162, 0.0, 0.7931, 0.9556, 0.0811, 0.0303]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

