created: 20230220220953000
creator: Drevarr
modified: 20230705163519662
modifier: drevarr
tags: ChartData
title: 202302202209_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Kahless The Drunk", "Zaylen Harker", "Blanco Padre Guard", "Sygaldry Verdandi", "Koralia Danai", "Ravioli Fetabringer", "Bella Sassy"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9633, 361.3982, 620.9131, 7.6205, 11.1812, 0.0, 5.3975, 10.9725, 23.2742, 14.9016, 0.1285, 0.4805, 17.2973, 2.5736, 0.0, 27.7965, 2.0491, 8.1405, 2.6941, 9.7632, 0.0, 127.296, 93.6099, 43.4003, 136.6541, 26.8281, 5.4944, 15.3691], [0.0, 397.021, 751.8146, 1.9732, 0.9988, 0.0, 0.0, 11.0257, 0.0, 122.2684, 136.4026, 0.0, 118.1242, 3.3475, 34.9218, 0.0, 0.0, 0.0, 18.4464, 0.0, 67.4669, 77.409, 0.0, 5.0641, 0.0, 0.0, 35.7498], [0.0, 443.5603, 951.642, 0.0, 0.0, 0.0, 17.0729, 6.7697, 58.7277, 64.4699, 74.0275, 0.0, 28.1635, 0.0, 13.3893, 0.0, 8.3226, 24.408, 75.6504, 99.7152, 15.1434, 19.7436, 41.4481, 10.1384, 13.1735], [0.0, 476.3102, 864.1813, 0.0, 0.0, 23.4398, 47.6203, 47.3746, 0.0, 175.0164, 73.9847, 19.2931, 27.2026, 8.5914, 7.9866, 0.0, 78.3918, 36.139, 7.6032, 9.563, 142.4654, 4.3569, 39.7243, 14.8808, 0.0, 0.0, 2.6729], [423.4507, 1137.5684, 14.6966, 89.0114, 11.3303, 11.2926, 0.0, 29.8644, 90.0958, 0.0, 73.1808, 97.944, 11.939, 29.1276, 0.0, 15.2361, 0.0, 19.656, 11.5538, 218.6309, 33.8823, 87.4528, 28.7488, 12.4301, 0.0, 22.9581], [0.0, 1166.0695, 1665.808, 69.9678, 102.1658, 91.5999, 259.8829, 182.1893, 235.9947, 69.6578, 105.1512, 244.9709, 17.802, 0.0, 85.4253, 0.0, 78.9021, 97.709, 65.016, 134.3079, 341.4715, 149.7843, 62.1359, 406.6123, 148.6629, 54.4496, 172.9258], [64.8622, 1539.5335, 2344.0629, 183.9348, 123.2616, 108.562, 200.7403, 125.2993, 158.2894, 384.5125, 266.422, 227.5627, 379.801, 81.0572, 17.119, 150.61, 15.3535, 128.8386, 16.6624, 234.792, 47.8503, 446.4907, 193.6071, 274.157, 459.3574, 151.1539, 103.7954, 64.531], [0.494, 1262.3083, 2002.329, 93.2602, 191.5183, 169.1315, 114.0361, 49.2233, 380.5203, 339.4334, 159.4076, 213.7766, 479.8147, 38.1969, 209.491, 191.8741, 77.7921, 181.9584, 55.015, 242.9136, 286.3908, 497.6213, 155.7063, 210.4795, 461.1493, 121.4363, 113.3651, 265.7129]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

