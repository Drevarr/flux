created: 20230626220846000
creator: Drevarr
modified: 20230705163539320
modifier: drevarr
tags: ChartData
title: 202306262208_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadey Starbolt", "My Birthday Girl", "Ryvalia Fazebringer", "Crusader Siolith", "Gavann", "Sub Train", "Drevarr Moonwillow", "Zaylen Harker", "Tika Fiery", "Sygaldry Verdandi", "Bella Sassy", "Solus Sanctus", "Koralia Danai"];
const professions = ["Scrapper", "Scrapper", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.3248, 32.3941, 11.2222, 11.2571, 4.002, 19.6126, 38.4453, 20.4336, 32.8041, 37.7091], [0.0, 5.9202, 4.5347, 11.0603, 20.85, 5.485, 8.0721, 2.0832, 14.6412, 11.2006, 18.6512, 5.6635, 8.5169, 14.306, 19.9769, 11.9016, 0.0, 28.6344, 28.3784], [93.6411, 27.9972, 10.5349, 17.1976, 3.0615, 16.0292, 0.0, 0.0, 0.0, 21.0269, 4.7678, 15.1708, 0.0, 31.7717, 0.0, 33.6389, 0.0, 23.22, 22.3614, 42.0849], [110.2202, 15.0381, 17.1838, 3.9358, 9.0552, 39.2895, 3.1901, 11.2783, 11.6592, 11.0779, 9.0438, 26.8612, 18.5638, 62.2845, 7.912, 29.6921, 9.1611, 0.0, 14.9445, 26.1905], [155.3521, 0.0, 27.4933, 0.6684, 27.9004, 5.3703, 0.0, 32.6928, 17.8605, 34.2235, 20.1894, 28.8093, 11.546, 40.8038, 14.877, 10.7431, 30.8115, 19.6267], [104.0798, 0.0, 4.7969, 16.456, 14.1002, 29.0453, 19.2551, 13.6924, 23.7216, 8.3614, 43.3268, 42.7013, 18.6686, 62.2104, 26.404, 60.8414, 14.6421, 0.0, 26.1252, 62.6125], [306.713, 45.5994, 8.6222, 16.5416, 0.7115, 23.6219, 4.8883, 19.4824, 18.5136, 5.0803, 7.0004, 11.1104, 4.6147, 30.5868, 6.256, 27.9919, 16.2081, 5.7895, 24.1326, 30.6306], [470.6617, 19.2786, 6.1888, 12.591, 56.7047, 22.7893, 0.0, 30.0384, 16.0171, 16.6496, 23.9163, 10.724, 26.4394, 39.974, 132.2482, 67.1814, 63.1584, 39.483, 63.2561], [464.5213, 0.0, 20.2198, 25.5254, 18.326, 49.594, 20.7238, 11.2971, 24.8976, 132.3353, 18.693, 31.8587, 66.5201, 46.954, 63.802, 49.0618, 70.8223, 43.7155, 51.9921, 23.1016], [497.3724, 0.0, 28.5688, 33.2543, 18.9081, 38.0241, 25.7958, 9.7129, 30.7776, 32.9868, 65.2362, 72.8198, 39.2251, 77.3186, 39.56, 71.2853, 75.3246, 27.5234, 39.852, 74.5173], [670.2247, 64.3797, 18.975, 27.0084, 32.9437, 77.8559, 15.3994, 11.3726, 15.9936, 51.8969, 36.4399, 47.0741, 72.4983, 40.733, 85.514, 60.2342, 70.1959, 42.7867, 67.158, 24.453], [565.2238, 0.0, 29.3885, 72.4123, 33.6983, 99.6098, 16.3863, 23.8202, 70.3584, 73.3471, 44.9539, 90.0878, 20.9236, 95.019, 53.636, 102.1918, 97.4052, 29.1334, 50.7744, 132.8184], [650.5754, 0.0, 58.5037, 30.4879, 27.144, 123.2317, 36.6741, 23.2921, 38.64, 71.3714, 64.1766, 82.2347, 46.2783, 84.5765, 37.95, 138.6845, 76.8123, 53.1893, 69.1137, 106.0488]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

