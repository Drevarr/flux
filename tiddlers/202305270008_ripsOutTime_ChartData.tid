created: 20230527000807000
creator: Drevarr
modified: 20230705163531830
modifier: drevarr
tags: ChartData
title: 202305270008_ripsOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Oo Dads Mad", "Ryvalia Fazebringer", "Panther B Me", "Smol Gluvs", "Demon Sekhmet", "Rozaalyna", "Newtype Khan", "Primal Clone", "Black Raspberry Pie", "Eibh\u00ebar"];
const professions = ["Firebrand", "Spellbreaker", "Chronomancer", "Scourge", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Chronomancer", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Boons Stripped per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9974, 5.0419, 0.0, 0.0, 4.1582, 0.0, 1.0, 4.0076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.9965, 0.0, 2.0244, 0.0], [7.9922, 7.4346, 0.0, 5.0886, 0.0, 8.8816, 12.771, 0.0, 0.0, 1.0, 3.0104, 8.5195, 0.0, 5.3656, 0.0, 0.0, 2.9952, 0.0, 7.5315, 2.3063, 0.0], [8.5078, 7.377, 0.0, 0.0, 0.0, 7.0316, 3.0135, 7.0658, 5.2901, 0.0, 2.9942, 1.0, 1.0, 6.0859, 0.0, 0.0, 2.9928, 0.0, 2.9952, 0.0, 1.0, 0.0, 9.8908, 3.25, 2.9813, 5.311, 0.0], [9.6979, 7.0628, 0.0, 0.0, 0.0, 10.4831, 1.0, 9.5263, 15.7481, 0.0, 0.9942, 0.0, 0.0, 11.0547, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 3.0638, 0.0, 0.0, 0.0, 6.972, 3.0305, 0.0], [12.7812, 8.0314, 0.0, 0.0, 0.0, 12.5295, 5.8514, 16.0592, 15.3511, 3.0, 4.1503, 2.0, 5.4583, 9.8516, 0.0, 11.2688, 12.1594, 1.0, 2.3684, 8.7576, 17.234, 3.8559, 4.3345, 11.225, 13.2056], [13.0182, 8.8115, 0.0, 2.0, 0.0, 15.1646, 3.0135, 19.7434, 17.8702, 0.0, 0.9942, 0.0, 3.0729, 12.7148, 0.0, 9.9032, 3.3841, 0.0, 1.9952, 3.0213, 5.018, 7.1197, 4.775, 12.8131], [14.5703, 9.7539, 0.0, 2.3158, 15.616, 5.8378, 14.7303, 14.0305, 1.0, 5.1387, 0.0, 4.7917, 10.5, 0.0, 9.1183, 5.177, 3.0, 0.0, 8.5135, 10.9789], [13.2526, 11.2958, 0.0, 5.4474, 0.0, 15.5527, 3.4595, 11.9671, 11.8855, 0.0, 3.9884, 2.0, 0.0, 9.5938, 9.7849, 3.0797, 1.0, 4.512, 7.2424, 0.0, 8.4414, 8.8275, 5.175, 12.7383, 5.4695, 5.5926], [12.3698, 14.3272, 0.0, 3.0, 0.0, 16.4283, 7.5946, 11.5329, 18.2672, 6.4091, 7.9075, 4.8298, 2.0, 10.1172, 0.0, 10.6237, 4.029, 1.0, 4.6555, 4.2727, 3.8298, 11.964, 7.1831, 0.975, 14.4673, 9.8841, 4.0741], [14.6068, 13.4974, 2.0403, 5.5, 2.6562, 21.4451, 7.3378, 17.2237, 18.2519, 1.0, 10.6763, 1.0, 8.5417, 14.9492, 15.7097, 9.8696, 3.5741, 12.9665, 2.0, 0.0, 11.0631, 12.1056, 1.975, 9.0187, 12.7378, 10.4568], [20.3568, 13.8272, 3.0081, 4.3158, 0.9688, 21.2257, 12.4054, 23.7829, 22.9237, 8.3409, 9.5145, 7.3617, 9.6354, 15.8555, 22.4731, 9.1377, 2.0, 7.9043, 4.697, 1.0, 11.6847, 13.0704, 9.35, 8.7477, 8.9451, 16.8765]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

