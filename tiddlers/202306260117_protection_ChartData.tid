created: 20230626011754000
creator: Drevarr
modified: 20230705163537999
modifier: drevarr
tags: ChartData
title: 202306260117_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Sakis Ranger", "Zhavashian", "Warrior Constantine", "Miphest\u00f6", "Eibh\u00ebar", "Primal Clone", "Raziel Umbra", "Seiker Novus Terra", "Ryvalia Fazebringer", "Elon The Archmagus", "Black Raspberry Pie", "Arriasa", "Imalou", "Tribal S", "Air One Com", "Etchery Of Ascalon", "Daddy Demon", "Traidoruns Maximus", "Drevarr Moonwillow", "Kosair", "Tika Fiery", "Gabe Malhorn", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Druid", "Tempest", "Spellbreaker", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Druid", "Firebrand", "Druid", "Firebrand", "Tempest", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.561, 19.0773, 50.5049, 62.2339, 26.6976, 15.671, 15.6658, 2.6838, 3.5112, 6.9889, 43.8058, 14.3557, 14.8313, 0.0, 23.362, 43.5884, 15.916, 89.527, 18.7856, 13.9821, 26.1052, 23.25, 29.8204, 17.388, 103.2, 0.0, 0.0], [0.0, 46.0647, 110.6757, 160.0301, 0.0, 0.0, 0.0, 2.457, 0.0, 0.0, 64.7566, 0.0, 58.8064, 260.2611, 0.0, 0.0, 52.5704, 0.0, 14.428, 0.0], [33.5826, 29.8723, 85.0777, 40.7808, 15.4493, 23.6122, 31.2228, 0.0, 48.8475, 56.0878, 51.2591, 46.31, 173.8248, 100.4157, 15.5379, 32.2, 18.5344, 17.3362], [58.077, 24.8648, 20.3125, 145.452, 103.5683, 48.6266, 33.1559, 47.63, 36.6694, 29.1241, 384.4, 17.5176, 0.0], [34.3116, 30.1514, 76.6836, 24.3256, 50.7168, 31.7486, 46.1648, 32.4324, 63.8655, 111.7322, 4.9183, 24.8195, 34.546, 46.8416, 38.367, 30.7352, 10.6506, 21.7676, 5.0421, 19.4994, 198.4, 27.2808, 3.7582], [34.6032, 18.5189, 0.0, 71.9888, 30.7584, 39.5102, 23.6122, 42.7518, 0.0, 46.6681, 48.0636, 23.0939, 167.9442, 115.8538, 0.0, 57.868, 36.0579, 31.2336, 25.7348, 25.6956, 26.1367, 9.7961, 9.4516, 237.2, 10.3464, 0.0], [30.7152, 23.4046, 31.0118, 78.2863, 58.0608, 47.3757, 52.8822, 29.469, 45.9166, 49.6193, 39.7902, 76.0483, 90.1122, 22.1852, 57.546, 35.7209, 33.8198, 39.1755, 38.3944, 10.2043, 15.3884, 243.8, 36.5472, 0.0], [27.3861, 88.8258, 87.4773, 182.2565, 93.1392, 12.4925, 30.6882, 23.5872, 0.0, 10.0701, 71.8497, 46.656, 171.3169, 111.9051, 45.6311, 0.0, 77.4, 68.6232, 45.4742], [15.0417, 40.1554, 23.1178, 117.7999, 27.648, 27.8586, 28.8922, 5.7865, 96.7063, 159.2962, 133.6144, 22.9673, 72.496, 51.8965, 43.9657, 28.9835, 9.0493, 44.5884, 44.9467, 0.0, 193.8, 30.6504, 0.0], [24.57, 15.0355, 104.1579, 101.2856, 114.6114, 154.7451, 313.9224, 99.596, 15.9495, 27.094, 62.2308, 19.0414, 44.6537, 19.6255, 29.1015, 27.7556, 0.0, 189.0, 15.7896, 10.7702], [20.0718, 25.638, 21.3457, 86.5595, 89.5968, 7.5029, 15.8928, 53.0334, 10.7342, 64.629, 72.9141, 41.9748, 98.2197, 189.5642, 136.0735, 15.9083, 56.81, 74.1378, 42.8574, 32.0411, 39.1392, 35.8502, 10.2283, 16.9781, 228.6, 25.0992, 0.0], [75.816, 39.6436, 45.5913, 189.6653, 139.8816, 5.6918, 22.6662, 24.3593, 93.468, 60.6873, 34.155, 22.6586, 112.516, 162.8785, 34.0187, 51.5015, 47.9651, 49.2306, 48.4762, 17.0775, 375.0, 37.044], [55.9756, 0.0, 115.8242, 176.1696, 40.1755, 58.9926, 181.251, 128.0556, 47.3266, 87.2264, 145.5134, 351.4547, 274.6062, 18.2545, 90.482, 28.1948, 16.2562, 43.2523], [74.8197, 63.7461, 54.2907, 54.0842, 100.8504, 22.7476, 191.3319, 82.9035, 45.0956, 128.5633, 269.9906, 178.699, 0.0, 120.29, 95.1435, 75.5688, 84.2433, 44.5763, 37.1375, 32.2694, 0.0, 261.8, 5.0976, 0.0], [90.3717, 81.381, 0.0, 86.8064, 134.6112, 68.9304, 25.6177, 84.672, 0.0, 102.6549, 78.176, 122.8881, 217.7566, 170.0919, 98.946, 82.1132, 78.4108, 71.0892, 64.9093, 64.2885, 71.5738, 13.9104, 225.0, 12.1824, 0.0], [29.3544, 45.9251, 171.4909, 248.6887, 152.6688, 29.7528, 46.1648, 52.9956, 15.5998, 66.3575, 47.5313, 152.061, 144.9081, 271.8931, 172.0046, 56.2246, 99.36, 155.1277, 62.6377, 93.4479], [86.4351, 125.1192, 168.2689, 209.669, 93.9168, 29.3462, 41.2078, 88.4142, 2.4829, 45.1652, 82.1666, 131.0736, 207.2601, 421.3306, 188.8088, 0.0, 117.99, 158.3853, 29.3294, 78.7969, 31.8402, 74.8212, 72.7983, 45.5317, 278.6, 17.4528, 0.0], [94.5756, 118.7911, 0.0, 215.7196, 34.56, 75.5832, 73.9015, 186.0138, 24.5408, 252.5791, 116.7199, 139.9679, 194.1692, 94.1312, 33.1955, 184.92, 245.778, 164.4381, 85.2943, 141.0651, 138.4855, 28.9801, 0.0, 466.8, 49.788, 33.3689], [27.7749, 31.0355, 203.1471, 160.277, 233.6256, 24.3936, 36.9318, 78.3594, 45.2819, 98.8222, 55.924, 156.2741, 155.2748, 512.8264, 359.174, 59.8466, 102.856, 144.681, 55.0211, 79.4657, 29.0844, 91.7515, 46.2193, 58.3616, 505.6, 49.356, 16.18], [154.5007, 158.6466, 64.4681, 348.2451, 277.6141, 178.1977, 323.4136, 509.7131, 306.0288, 263.304, 197.4761, 165.3476, 137.2416, 110.4911, 167.1578, 98.8732, 17.152, 370.2, 103.9608], [76.4235, 114.3707, 65.8094, 298.6981, 167.5296, 51.2635, 63.6469, 94.0464, 31.1368, 93.3363, 54.2046, 154.1675, 323.4136, 513.5182, 327.7514, 22.0823, 169.234, 164.6758, 183.5932, 47.5521, 126.2436, 105.8341, 130.2062, 23.9954, 638.8, 44.82, 0.0], [130.6854, 132.1452, 42.9332, 324.135, 313.2, 79.6858, 65.8038, 140.0967, 46.89, 368.9669, 547.5914, 322.9697, 35.0889, 192.142, 225.334, 87.562, 145.1086, 132.202, 214.477, 123.0993, 15.3139, 621.4, 17.6904, 0.0], [133.5771, 162.3897, 0.0, 313.5157, 466.0416, 122.5963, 91.0809, 164.0142, 6.9597, 352.8293, 182.3468, 247.1674, 339.2286, 481.3477, 410.2699, 108.3743, 181.102, 96.0421, 114.4473, 153.7718, 63.2335, 134.4675, 129.4859, 0.0, 605.2, 105.0192, 17.1196], [107.9892, 128.2367, 225.0567, 429.8339, 255.4848, 155.269, 100.6922, 167.0004, 261.9729, 190.4529, 195.5961, 252.9648, 483.0773, 461.2291, 0.0, 189.244, 195.0049, 100.891, 188.7749, 152.3861, 104.0787, 74.335, 747.0, 172.908, 0.0], [121.2084, 113.3936, 325.5025, 664.3224, 189.0432, 16.595, 89.0375, 180.9108, 59.1888, 492.3828, 207.5249, 337.2805, 94.8145, 0.0, 543.3377, 81.9496, 194.994, 724.8655, 99.4132, 137.7194, 169.3303, 154.6746, 93.567, 38.0549, 682.2, 52.2504, 36.4842]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

