created: 20230427220456000
creator: Drevarr
modified: 20230705163527068
modifier: drevarr
tags: ChartData
title: 202304272204_resOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsy Pop Tart", "Clem Storage Xviii", "Choo Sayaccho", "Al Darasuum", "Heal Warriior", "Primal Clone", "Slayer Of The Evil", "Smol Gluvs", "Xanvias Tlesia", "Johosh The Great", "Zadie Miststep", "Elusive In The Mist", "Malfax Jinn", "Evil Stepmother", "Xkaet", "Rylov", "Morv\u00fcs", "Drevarr Moonwillow", "Shandalar V Basing", "Klenga", "Hyde En Sikh", "Koralia Danai", "Wanguazen", "Amandavanbot", "Mac Aaroni"];
const professions = ["Reaper", "Scrapper", "Firebrand", "Firebrand", "Berserker", "Chronomancer", "Bladesworn", "Scourge", "Daredevil", "Firebrand", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Catalyst", "Berserker", "Scrapper", "Dragonhunter", "Firebrand", "Chronomancer", "Firebrand", "Guardian", "Necromancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Time Spent Ressurecting per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 846.72], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 91.16, 235.75, 0.0, 0.0], [238.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 91.16, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.15, 725.76, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 330.05, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.3, 725.76, 0.0], [0.0, 967.68], [0.0, 385.92, 0.0, 13.77, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 333.2, 0.0, 0.0, 0.0, 0.0, 270.72, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 14.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1330.56, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1572.48], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1572.48, 0.0], [0.0, 0.0, 1081.08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [85.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.32, 0.0, 0.0, 812.16, 0.0, 0.0, 94.3, 362.88, 0.0], [0.0, 14.4, 55.08, 0.0, 0.0, 0.0, 238.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.3, 241.92, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1814.4, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2177.28, 0.0], [0.0, 0.0, 28.8, 0.0, 0.0, 0.0, 0.0, 428.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.3, 1572.48, 0.0], [0.0, 96.48, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2494.8, 0.0, 0.0], [0.0, 289.44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 990.15, 1451.52, 0.0], [0.0, 0.0, 0.0, 41.31, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1273.05, 1330.56, 0.0], [171.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1225.9, 1330.56, 0.0], [4573.8, 0.0, 0.0, 0.0, 0.0, 0.0], [154.56, 2411.64, 0.0, 1763.52, 812.16], [600.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 476.0, 154.56, 0.0, 0.0, 0.0, 0.0, 0.0, 1321.82, 0.0, 1451.52, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

