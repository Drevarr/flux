created: 20230130220929000
creator: Drevarr
modified: 20230705163518399
modifier: drevarr
tags: ChartData
title: 202301302209_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Joh Oshi", "Arriasa", "Black Raspberry Pie", "Lord Erin The Wise", "Vinthry Stormgrave", "\u00c9\u00efbhear", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Sygaldry Verdandi", "Doctor House", "Belvyn Brightblade", "Whose Guardian", "\u00c2 R K", "Zaylen Harker", "Tyrisai", "Gavann", "Ravioli Fetabringer", "Arkitrix", "Koralia Danai", "Bella Lunabringer"];
const professions = ["Druid", "Druid", "Chronomancer", "Tempest", "Tempest", "Scrapper", "Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[61.2461, 354.4537, 0.5557, 66.0722, 111.1673, 49.8453, 111.4992, 194.2972, 64.7606, 245.145, 55.8205, 88.704, 51.408, 13.0349, 49.7002, 71.3122, 0.0, 70.9456, 0.0, 9.6186, 0.0, 25.1597, 0.0], [591.0733, 574.9538, 67.4201, 0.0, 0.0, 0.0, 135.8496, 140.3512, 26.9707, 0.0, 16.4716, 66.696, 78.5808, 7.4102, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7347, 0.0, 0.0, 16.6625], [415.1123, 217.1925, 108.8168, 55.0238, 1.2172, 0.0, 182.8416, 213.0412, 0.0, 398.6875, 3.078, 7.812, 60.5146, 0.0, 80.3141, 12.267, 6.5424, 3.6716, 0.0, 0.0, 0.0, 8.9669, 5.4653], [447.1936, 558.9675, 43.9897, 76.7932, 4.6883, 57.2981, 105.1766, 154.9806, 50.773, 63.112, 32.3886, 9.492, 21.7382, 2.3213, 31.3896, 58.8816, 7.4072, 0.0, 14.531, 15.2577, 25.5798, 0.1685], [750.9936, 913.9725, 149.2873, 24.5235, 0.0, 102.1862, 169.0005, 152.4734, 105.2167, 0.0, 42.336, 139.7563, 36.7834, 53.3443, 19.1774, 10.81, 109.636, 0.0, 0.0, 62.6745, 7.0949], [788.4218, 1614.6112, 167.161, 18.1139, 23.5768, 11.3067, 24.4358, 118.8642, 121.0978, 6.8522, 5.6846, 27.804, 76.5979, 5.3568, 8.9839, 65.6693, 5.076, 22.4641, 0.0, 26.4417, 0.4441, 0.7675, 23.5274], [1254.5725, 852.7837, 374.6075, 0.0, 4.1924, 17.5812, 209.4134, 242.9097, 0.7728, 0.0, 0.0, 230.244, 95.9861, 8.928, 0.0, 0.0, 9.0804, 3.6716, 0.0, 18.3319, 0.0, 24.8602, 160.4266], [678.0816, 1650.9938, 129.8392, 12.1396, 3.381, 30.8945, 91.4208, 130.1411, 143.1226, 183.6559, 0.7764, 55.104, 75.1291, 8.928, 0.0, 122.3838, 12.9156, 74.6962, 18.2092, 2.5461, 0.1316, 9.2851, 76.3143], [524.3578, 188.75, 144.9812, 335.8646, 639.5808, 226.4304, 261.1935, 75.9525, 259.476, 291.1162, 17.365, 0.0, 118.6628, 81.404, 61.9441, 30.8405, 135.4337, 13.4232, 87.7594, 204.0156], [1462.1286, 2273.9062], [1631.2845, 2120.6587, 314.5962], [102.0155, 537.5885, 677.8307, 432.1498, 106.2085, 51.7996, 401.016, 531.3384, 150.8386, 50.5661, 357.1333, 200.6148, 183.1872, 90.0558, 57.5984, 40.4341, 79.2792, 153.295], [1873.8384, 877.0387, 487.8695, 148.9215, 47.92, 116.5073, 287.8474, 383.5656, 251.16, 38.0475, 0.0], [1619.6186, 643.86, 269.2173, 49.9224, 187.0369, 155.6509, 264.5222, 595.9973, 293.7413, 250.3743, 132.3276, 417.48, 500.7874, 177.9797, 6.7109, 295.7983, 88.172, 214.6528, 85.0033, 117.2149, 89.9815, 31.7304, 320.7198], [2939.8118, 3233.0813, 438.4157, 359.9187], [1815.0227, 2912.805, 350.251, 248.3006, 234.6071, 528.6173, 1061.5487, 302.0102, 255.4233, 115.135, 549.612, 402.8918, 214.897, 227.1236, 267.7477, 65.2924, 361.7158, 100.6256, 141.2425, 145.8786, 38.8627, 781.4712], [2701.6326, 2793.1837, 354.9741, 124.9697, 242.2148, 221.3575, 304.3373, 850.9458, 317.0026, 566.5654, 91.0099, 624.708, 522.0115, 329.3986, 170.7847, 376.3516, 108.2316, 286.3484, 171.2393, 129.5493, 169.6982, 60.2597, 532.9334], [3321.3846, 4644.8325, 602.5207, 63.5897, 283.6434, 145.3315, 491.9635, 1036.7092, 502.1654, 295.1838, 149.4647, 599.592, 390.2602, 249.4483, 317.5517, 176.9268, 137.6668, 0.0, 12.4099, 9.3107, 39.9672, 138.9652], [3035.5696, 3915.5287, 570.6628, 91.4426, 235.0922, 133.9293, 451.8067, 1083.4929, 320.4029, 742.1971, 117.7693, 520.968, 452.6842, 222.9322, 356.479, 108.3444, 270.8723, 160.1845, 141.6952, 91.7087, 105.6744, 533.3999], [3034.1114, 4239.1125, 798.2056, 176.4743, 399.3637, 261.7115, 759.2198, 944.0561, 739.0286, 740.9349, 168.5984, 588.0, 619.4664, 242.663, 98.2458, 413.357, 166.0604, 256.6595, 103.8188, 93.6399, 67.5273, 105.9926, 382.3044]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

