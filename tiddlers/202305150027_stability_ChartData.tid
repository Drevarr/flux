created: 20230515002743000
creator: Drevarr
modified: 20230705163530104
modifier: drevarr
tags: ChartData
title: 202305150027_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Aira Draugr", "Venomina The Fierce", "Mistwalker Caelon", "Xanvias Einzbern", "Cuscuszera", "Evan Nightroad", "Blancooo Padreee", "Drogo Discourteous", "Ever Moore", "Ark Darkness", "Sub Train", "Aronorf Xideliesi", "Lucas Ryn", "Gabe Malhorn", "Koralia Danai"];
const professions = ["Herald", "Spellbreaker", "Vindicator", "Berserker", "Firebrand", "Vindicator", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.7799, 3.0467, 11.1006, 7.2973, 1.6887, 7.332, 0.1425], [6.1776, 11.8966, 9.7751, 4.928, 4.6056, 1.1914, 1.2825, 0.7392, 0.0, 1.4917, 5.4012, 5.9198, 2.9198, 1.2797, 1.584], [2.443, 9.2851, 16.071, 4.8333, 6.1408, 0.8248, 1.1685, 0.3927, 0.4524, 3.9448, 10.0504, 2.0051, 1.2566, 2.0672, 0.0], [3.145, 10.4458, 11.7633, 6.2548, 5.0662, 1.9247, 1.083, 0.9471, 1.7472, 2.3536, 3.8287, 6.7791, 2.6981, 2.1165, 1.056], [6.2556, 6.6963, 11.5545, 19.5734, 6.9485, 8.9088, 3.322], [2.4149, 6.3835, 23.1952, 10.8038, 1.5352, 6.7821, 3.0495, 0.0, 0.0, 2.1547, 1.9144, 4.0102, 2.0698, 5.2173, 1.694], [1.5163, 13.3474, 17.7278, 8.4345, 3.6845, 3.2994, 2.85, 0.0, 1.8896, 6.7686, 2.2915, 3.9917, 5.5126, 1.738], [26.4046, 26.3431, 10.3299, 7.369, 5.1324, 4.8165], [17.6884, 1.5675, 1.8896, 16.4772, 14.8949, 10.7554, 12.5511, 6.204], [14.0728, 35.6212, 15.258, 4.4521, 6.9654, 6.669, 1.8711, 4.7892], [17.065, 10.9933, 8.1366, 6.1406, 6.2415, 1.0511, 8.7848, 13.7424, 17.6638, 8.6117, 12.0097, 0.0], [7.8062, 23.3579, 23.5266, 11.6567, 4.8359, 6.4155, 4.959, 1.9173, 2.0748, 5.5692, 8.8881, 15.5632, 6.9115, 4.036, 0.0], [8.5644, 22.9226, 25.6804, 13.3626, 8.0598, 7.6986, 2.9925, 2.2523, 2.6208, 6.9615, 12.1699, 18.0457, 10.9032, 6.9892, 2.398], [7.6892, 38.7691, 19.6174, 13.5098, 8.6151, 6.498, 0.3465, 4.0716, 7.2267, 18.3232, 25.3977, 13.0469, 6.0541, 3.938], [16.3145, 45.5551, 46.8874, 26.1565, 15.7358, 18.7882, 8.379, 1.9288, 7.9092, 6.6631, 21.1947, 24.5384, 10.8293, 9.844, 4.356]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

