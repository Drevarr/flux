created: 20230313222416000
creator: Drevarr
modified: 20230705163521972
modifier: drevarr
tags: ChartData
title: 202303132224_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Legendary Hacker", "Smol Daddy Tika", "Arcanophage Farra", "Veron Blackburn", "Mistwalker Caelon", "Sigmund Mistwalker", "Ryvalia Fazebringer", "Ark Darkness", "Xyntharos", "Whose Guardian", "Sygaldry Verdandi", "Ace Hammers", "Legendary Hacker", "Blanco Padre Guard", "Ravioli Fetabringer", "Bella Sassy", "Johosh The Great", "Koralia Danai"];
const professions = ["Vindicator", "Berserker", "Spellbreaker", "Herald", "Vindicator", "Vindicator", "Chronomancer", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Herald", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.8812, 0.885, 10.1665, 21.3356, 5.3698, 1.9032], [0.0, 0.6392, 12.5097, 2.0776, 1.2927, 1.0672, 1.0996, 2.0995, 0.7421, 1.0819, 1.0662, 1.2627, 0.0, 4.2395, 2.6024, 1.0065, 0.0, 1.08, 1.1045, 0.0, 2.5493, 0.0, 2.1599, 4.9421, 1.0454, 0.7176, 0.0], [0.0, 0.0, 7.9228, 4.4149, 0.0, 1.3259, 0.7497, 1.8662, 0.0, 2.3329, 0.7997, 0.0, 1.2965, 6.763, 5.537, 1.3161, 0.7497, 4.212, 3.446, 2.1887, 5.2613, 0.0, 2.1599, 6.2681, 1.5206, 1.5288, 1.2096], [0.0, 3.1164, 0.0, 7.2442, 7.622, 4.0824, 0.0, 6.6268, 0.1999, 0.0, 5.1244, 7.8733, 4.4296, 3.8323, 6.7973, 7.272, 3.4902, 0.0, 3.0917, 0.0, 1.1544, 5.9065, 0.1426, 2.34, 8.2152], [2.746, 0.0, 31.2742, 7.791, 0.0, 5.4331, 2.3241, 2.4494, 0.0, 0.7438, 1.0329, 0.0, 2.0992, 2.2207, 1.1628, 2.1291, 1.2495, 2.412, 2.6066, 1.9016, 1.0848, 0.0, 2.1972, 10.9691, 0.9979, 2.652, 4.9644], [0.0, 17.3383, 22.9345, 10.1283, 0.0, 2.6195, 2.7489, 11.7806, 0.0, 7.9453, 1.2662, 0.9821, 0.9878, 4.5423, 1.3289, 2.4774, 1.6243, 5.58, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7488, 8.7948], [1.493, 3.5955, 9.5908, 1.5582, 0.0, 2.1991, 1.6493, 3.7325, 0.0, 5.9844, 3.8984, 1.7678, 2.8812, 13.3241, 9.1914, 3.1742, 0.0, 5.868, 6.8479, 2.1169, 5.1528, 0.0, 5.6605, 18.5632, 3.4214, 4.8048, 2.8476], [3.0126, 0.0, 35.0272, 7.791, 0.0, 5.3038, 4.6731, 1.1664, 0.0, 7.9115, 4.998, 0.0, 3.5809, 7.4696, 4.2081, 4.0258, 5.1729, 8.604, 6.4503, 7.7563, 0.0, 2.5323, 9.0405], [0.08, 2.1573, 41.699, 12.2059, 1.0525, 0.8732, 1.3495, 10.031, 1.2369, 0.4733, 2.2324, 0.0, 0.8438, 11.709, 6.8659, 2.5162, 1.0996, 1.548, 3.7995, 0.4126, 3.3629, 0.0, 10.39, 10.6075, 1.8533, 2.3088, 3.3264], [3.8924, 6.6317, 44.2009, 6.882, 0.0, 2.8459, 3.8734, 5.2488, 0.0, 3.922, 1.6993, 0.0, 6.3386, 10.6996, 6.5337, 5.1871, 3.4986, 2.196, 5.6992, 0.0, 6.3461, 0.0, 8.9004, 24.3491, 7.5557, 5.7408], [4.4256, 7.0312, 25.0194, 12.076, 1.1097, 3.7514, 4.6981, 12.7138, 5.0039, 2.399, 1.2066, 4.3218, 15.0401, 13.5103, 7.2001, 4.8231, 2.34, 8.5267, 0.592, 6.78, 2.6041, 8.3418, 19.0453, 6.3677, 4.836, 6.048], [13.4633, 11.9051, 83.398, 17.1402, 0.0, 6.4033, 3.1987, 23.9112, 0.8482, 2.7386, 2.599, 0.0, 1.1319, 9.9931, 4.9833, 2.8258, 0.5248, 4.32, 0.4418, 0.0, 0.2607, 3.6162, 0.6178, 0.4992, 4.5108], [20.3745, 94.2397, 24.6715, 2.3566, 4.7216, 1.6743, 13.0637, 1.6021, 4.091, 1.5327, 18.6739, 2.3241, 1.764, 5.3016, 0.1615, 8.136, 6.1236], [1.7862, 5.3533, 68.8033, 15.582, 0.4576, 7.0178, 1.2495, 7.2317, 2.2618, 9.0611, 2.3324, 1.0382, 1.8934, 12.6175, 7.4196, 5.5742, 1.7493, 4.14, 6.627, 2.4578, 4.3392, 2.9615, 9.2728, 19.8891, 4.5619, 5.7408, 4.6872], [3.6791, 2.7166, 59.6296, 15.0626, 0.0, 5.7242, 4.1234, 10.381, 0.0, 5.9844, 2.9322, 1.2066, 4.0543, 19.7842, 6.4229, 6.6194, 4.7981, 3.636, 11.1334, 0.2153, 8.5699, 0.0, 4.6178, 22.7821, 10.597, 8.1744, 7.5096], [6.2384, 13.9026, 94.2397, 21.4252, 2.1507, 6.2416, 6.1475, 17.2627, 2.5798, 12.4083, 6.1975, 0.7576, 5.536, 12.3147, 8.9699, 7.6646, 4.5482, 6.228, 9.7638, 4.3594, 9.0581, 2.2637, 10.2038, 25.4339, 7.7933, 5.8656, 9.1728], [4.6922, 10.2272, 95.9077, 20.6461, 2.0363, 4.1395, 6.1475, 24.8443, 2.4031, 9.4668, 3.3653, 3.3111, 4.8157, 23.2162, 13.621, 7.4323, 7.3471, 8.388, 8.6151, 3.9468, 9.1123, 3.0125, 8.1556, 20.8534, 7.7458, 5.5848, 6.1488], [0.0, 5.5719, 15.5805, 112.5873, 23.2431, 2.0935, 9.4756, 8.2717, 22.7448, 9.5682, 5.1313, 3.0305, 6.1123, 24.2256, 13.0673, 7.8968, 6.7723, 2.052, 11.3543, 2.2066, 10.631, 8.379, 24.8312, 9.1714, 6.396, 5.8464]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

