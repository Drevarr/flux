created: 20230315220824000
creator: Drevarr
modified: 20230705163522286
modifier: drevarr
tags: ChartData
title: 202303152208_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Xyntharos", "Zadie Miststep", "Mac Chiato", "Arcanophage Farra", "\u00c1rkantor", "Fribble Bibble", "Newtype Khan", "Drevarr Moonwillow", "Mike The Archmagus"];
const professions = ["Vindicator", "Tempest", "Tempest", "Spellbreaker", "Vindicator", "Scrapper", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[32.5458, 72.4475, 63.1571, 15.5232, 40.9622, 8.287, 6.1814, 99.4318, 7.4237, 59.8752, 103.7869, 4.1792, 17.6552, 0.0, 14.9046, 15.8603, 10.9572, 21.5914, 1.0046, 17.7922, 57.7555, 13.9515, 41.8349], [48.3027, 112.1884, 90.0022, 55.2658, 0.0, 0.0, 130.7256, 0.0, 26.1144, 153.5121, 0.0, 40.4794, 0.0, 9.9264, 32.1205, 3.8364, 31.5058, 0.0, 62.0544, 117.0562, 0.0, 117.0288], [42.3095, 93.3332, 59.3027, 0.0, 79.3109, 28.1098, 0.0, 62.4696, 26.8758, 115.344, 200.3463, 0.0, 94.6533, 4.7962, 25.8237, 58.8431, 0.0, 40.0493, 0.0, 92.9846, 31.8614, 34.2854, 35.8422, 115.5514], [118.9509, 209.7278, 75.1934, 103.0709, 0.0, 0.0, 223.5444, 55.1003, 98.1072, 141.0808, 0.0, 104.2529, 0.0, 42.7888, 7.9968, 0.0, 36.0101, 116.0126, 54.6653, 72.301, 119.8282], [121.5308, 202.6934, 227.947, 13.3308, 139.4712, 19.6723, 337.6193, 17.1072, 178.6536, 369.1807, 0.0, 189.9108, 10.2632, 39.7658, 23.9904, 0.0, 33.1459, 0.0, 189.4598, 165.9672, 11.7197, 147.0686, 158.8637], [99.1853, 162.5173, 227.7442, 41.9832, 59.5426, 62.2205, 48.3799, 311.8757, 0.0, 120.9816, 232.87, 39.2713, 167.0866, 5.2658, 91.7741, 139.3442, 118.2629, 196.8288, 157.3358, 332.9856, 241.2893], [135.1841, 287.3968, 242.8234, 0.0, 133.1986, 2.1808, 0.0, 295.6974, 0.0, 138.7368, 528.4748, 80.6238, 212.5336, 0.0, 88.3901, 100.1599, 0.0, 140.3438, 10.8537, 179.2306, 157.8686, 68.447, 296.4989], [130.8182, 213.0638, 228.8937, 0.0, 124.1222, 76.8845, 28.8994, 474.3675, 19.7923, 197.7696, 342.8726, 50.117, 120.6326, 67.5272, 79.9526, 129.1816, 60.352, 84.9211, 0.0, 270.8578, 201.505, 97.1174, 303.6181, 270.9158], [246.9115, 607.5, 437.2985, 98.3556, 429.0106, 108.288, 71.5716, 960.426, 108.6088, 349.4664, 672.4466, 106.8836, 404.4583, 45.6927, 146.9258, 208.3166, 224.9467, 353.2738, 437.9083, 540.9474, 578.3789]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

