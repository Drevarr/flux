created: 20230513000456000
creator: Drevarr
modified: 20230705163529813
modifier: drevarr
tags: ChartData
title: 202305130004_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Lucas Ryn", "Mac Aaroni", "Johosh The Great", "Tegan Parker", "Miphest\u00f6", "Zaidy Sagemist", "Venomina The Techie", "Arriasa", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Vindicator", "Scrapper", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[63.1066, 219.9053, 121.6351, 1045.7972, 51.9599, 30.2688, 0.0, 11.3386, 29.952, 28.7395, 0.0, 76.1024, 16.5683, 63.48, 137.3299, 0.0, 38.0627, 0.0, 30.8678, 0.0, 72.3005, 34.9547, 49.1864, 14.1201, 8.6659], [95.3165, 165.1507, 299.902, 649.0226, 13.9449, 225.2378, 9.4033, 9.1661, 58.752, 0.0, 17.1424, 0.0, 135.8413, 0.0, 16.6, 148.465, 91.5264, 0.0, 37.8613, 0.0, 12.3206, 29.9866, 49.1568, 15.4671, 94.0865, 6.1589, 56.3865], [103.4381, 242.7264, 408.4052, 1286.8243, 2.5465, 24.1109, 15.8371, 4.7021, 27.7056, 0.0, 16.1026, 24.064, 12.1097, 36.501, 32.89, 66.1248, 53.5248, 20.139, 0.0, 46.1472, 0.0, 33.6806, 0.0, 13.9844, 0.0, 7.6394, 30.579], [116.5709, 74.8339, 674.3282, 1467.7068, 84.882, 137.4671, 0.0, 0.0, 49.7664, 0.0, 103.0541, 12.6544, 0.0, 102.12, 131.3626, 0.0, 51.9586, 0.0, 87.2602, 133.5466, 23.8203, 182.5471, 0.0, 0.0, 0.0], [49.9046, 319.0925, 597.9984, 1899.4909, 93.4915, 64.2669, 13.4387, 8.5858, 33.0048, 12.4925, 22.1678, 121.1021, 24.0589, 41.1125, 162.6509, 15.8112, 89.8199, 0.0, 113.4912, 20.9457, 50.6621, 10.529, 110.6427, 12.7107, 29.4916, 0.0], [0.0, 219.9316, 596.963, 629.0527, 74.1604, 107.7312, 353.088, 61.6762, 109.8125, 29.003, 393.9878, 129.6498, 104.9959, 363.2275, 503.6774, 210.9672, 290.203, 25.5442, 171.959, 427.5466, 73.0123, 348.5915, 0.0, 117.4135, 92.6547], [178.9862, 67.1731, 1184.8347, 1752.7202, 96.0985, 317.7787, 23.54, 0.0, 346.5216, 2.6527, 510.8787, 23.3089, 0.0, 497.3175, 351.7517, 0.0, 490.6532, 5.2618, 2.6054, 48.002, 498.8592, 0.0, 393.3308, 16.0776, 0.0], [379.9459, 431.9424, 428.9061, 112.8007, 757.4746, 155.5202, 517.2033, 527.5625, 1432.0051, 293.2848, 523.614, 871.895, 271.6448, 1113.3898, 203.0116, 970.5481, 236.2286, 0.0], [329.4259, 739.7107, 1130.6652, 3873.4892, 250.5232, 596.0086, 88.7412, 38.9112, 195.6672, 35.2279, 49.1477, 18.7353, 302.8454, 41.7075, 171.4595, 502.2625, 533.9174, 219.6936, 134.5285, 353.9424, 233.0334, 221.8406, 35.2385, 322.5516, 137.547, 89.2445, 108.0474], [356.521, 1188.553, 2568.9475, 6112.752, 448.662, 725.2363, 179.1193, 358.1318, 883.7568, 203.5706, 106.8399, 65.7501, 1055.7478, 133.9729, 338.158, 798.6175, 1338.624, 145.0008, 1036.1516, 79.9243, 408.5683, 105.1614, 802.6435, 181.9442, 890.2853, 173.6433, 49.4882, 110.3185]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

