created: 20230605220452000
creator: Drevarr
modified: 20230705163533868
modifier: drevarr
tags: ChartData
title: 202306052204_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Al\u00ee\u00e7ization", "Blanco Padre Guard", "Sygaldry Verdandi", "Crusader Siolith", "Zaylen Harker", "Gabe Malhorn", "Solus Sanctus", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 584.5749, 0.5897, 711.853, 0.0, 0.0], [24.7586, 153.0374, 234.6621, 26.8286, 175.536, 1012.752, 614.9931, 262.6031, 122.7352], [0.0, 1706.8023, 40.273, 720.5398, 0.0, 37.3126, 32.065, 32.0146, 195.253, 94.3874, 17.8983, 0.0, 726.96, 206.1646, 134.8787, 80.7165], [0.0, 1647.3673, 55.015, 1039.8406, 28.5348, 11.1389, 0.0, 17.882, 142.7559, 100.5928, 0.0, 6.4915, 718.692, 282.2557, 0.0, 0.0], [39.7584, 2196.3593, 182.9318, 1151.3611, 17.9826, 28.8878, 40.502, 22.3298, 157.6333, 148.5377, 17.8794, 11.9453, 745.212, 505.923, 179.1913, 73.4265], [39.0384, 2018.4452, 74.671, 1687.5986, 0.0, 30.7193, 59.0806, 339.2882, 177.0172, 75.4151, 83.087, 1046.604, 830.0012, 123.9808, 50.787], [63.8496, 2103.2966, 212.7871, 1907.3527, 88.1715, 107.276, 3.377, 166.4335, 295.8881, 229.9591, 152.779, 67.8518, 1043.016, 467.7854, 199.9333, 22.6598], [29.8224, 3184.0759, 221.2392, 1894.6746, 22.2138, 62.987, 0.0, 23.8478, 263.9066, 210.755, 17.8983, 30.0288, 1112.124, 235.0902, 0.0, 0.0], [0.0, 2883.3815, 128.9652, 1627.7297, 45.279, 54.0626, 0.0, 65.8964, 414.6698, 266.0157, 79.7667, 201.8333, 951.288, 426.8841, 121.4297, 84.3008], [63.36, 2791.1008, 124.2041, 1706.6158, 56.3472, 78.9876, 60.863, 73.4408, 258.3158, 209.8078, 75.453, 103.4227, 1031.16, 887.4841, 73.0963, 51.3945]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

