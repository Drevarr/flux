created: 20230520220730000
creator: Drevarr
modified: 20230705163530873
modifier: drevarr
tags: ChartData
title: 202305202207_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Drevarr Moonwillow", "Soxxdodendron", "High Sorcer Baradun", "Primal Clone", "Tegan Parker", "Tika Mi", "Artakama Nahid", "Black Raspberry Pie"];
const professions = ["Chronomancer", "Scrapper", "Willbender", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[70.6865, 44.9782, 0.0, 0.0, 0.0, 0.0, 0.0, 37.0677, 0.0, 16.4088, 98.4954, 43.3704, 8.9338, 162.3784, 23.7613, 73.201, 0.0, 0.0, 28.0931, 0.0, 61.401, 8.5505, 0.0, 119.9966, 0.0, 9.3483, 0.0, 88.6091, 46.44, 0.0, 0.0, 0.0, 0.0], [157.2559, 27.0417, 2.7283, 40.8127, 0.0, 8.02, 0.0, 65.5509, 0.0, 0.0, 79.1802, 0.0, 70.1165, 22.1577, 0.0, 2.7864, 2.7826, 5.4978, 66.8808, 7.5888, 90.501, 0.0, 6.4315, 107.2051, 0.0, 5.499, 0.0, 41.9475, 0.0, 5.0616, 0.0, 5.544, 129.429], [40.2083, 6.0245, 33.0809, 7.9544, 0.0, 23.7677, 0.0, 19.7009, 7.9447, 0.0, 87.6981, 49.0824, 112.3488, 60.1995, 0.0, 103.6773, 0.0, 0.0, 46.7687, 0.0, 58.2, 0.0, 0.0, 53.298, 91.5372, 7.9705, 18.0574, 59.6376, 0.0, 0.0, 8.118, 103.1886], [445.2961, 42.9929, 0.0, 60.2154, 19.0732, 49.1114, 0.0, 144.4731, 40.5765, 98.7719, 67.903, 305.3722, 151.7668, 55.0295, 61.3008, 43.1521, 66.9115, 221.3929, 60.9246, 446.976, 17.7685, 6.2247, 442.5257, 0.0, 103.071, 51.2568, 0.0, 43.1357, 59.004, 210.4551], [342.4144, 125.5556, 32.4232, 0.0, 0.0, 41.7142, 0.0, 70.852, 31.8987, 64.5413, 236.8208, 56.2836, 545.5008, 84.4928, 78.1497, 112.3268, 0.0, 64.0009, 218.839, 0.0, 384.993, 56.0165, 32.5503, 256.5918, 15.6, 57.4434, 72.4808, 163.8749, 41.9688, 0.0, 0.0, 0.0, 199.7285], [427.2667, 43.4721, 0.0, 41.8534, 0.0, 44.7265, 0.0, 31.5293, 0.0, 0.0, 171.0772, 0.0, 593.689, 76.0836, 29.8619, 166.6615, 42.4789, 88.8056, 356.4315, 51.867, 656.205, 41.9603, 0.0, 334.5592, 0.0, 42.0885, 41.9474, 79.8201, 0.0, 0.0, 69.5772, 131.5566], [481.2117, 161.9079, 47.9892, 129.0542, 88.9044, 44.8663, 0.0, 110.5702, 89.7776, 94.9887, 531.3471, 90.9228, 1042.0013, 209.4969, 49.9629, 358.1685, 0.0, 120.0784, 540.4733, 129.4686, 820.911, 155.0778, 72.5661, 536.0256, 156.9753, 89.1442, 223.3205, 47.4768, 44.2557, 35.5005, 92.7036, 263.7338], [589.5308, 222.3581, 89.3525, 86.1105, 49.1344, 42.82, 0.0, 78.2892, 40.7232, 210.0326, 481.5596, 61.3428, 1026.5702, 120.1987, 98.7677, 277.7693, 122.1634, 138.2858, 589.9555, 43.8192, 891.333, 95.1694, 575.7707, 25.3045, 166.3236, 115.873, 219.8049, 77.1336, 42.291, 90.2845, 192.4956, 322.9519], [659.2156, 195.2479, 87.2332, 120.6043, 74.6364, 35.2067, 0.0, 135.0974, 14.7963, 137.4693, 523.3091, 148.2468, 1086.3994, 266.8933, 62.5777, 256.7551, 0.0, 115.0334, 462.898, 105.9066, 977.469, 144.9005, 69.4021, 573.4865, 0.0, 103.1274, 78.7175, 281.0882, 129.168, 21.5451, 73.9851, 132.264, 378.2696]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

