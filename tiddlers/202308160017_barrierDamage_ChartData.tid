created: 20230816001725000
creator: Drevarr
tags: ChartData
title: 202308160017_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Healdone", "Drevarr Moonwillow", "Strongg Mom", "P\u00edogre", "Alarics Bane", "Jimbo The Plug"];
const professions = ["Scrapper", "Scrapper", "Renegade", "Scrapper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5123, 0, 0, 0, 10654, 3642, 5874, 22287, 5095, 3143, 0, 0, 36146, 1086, 21676, 14696, 20132, 0, 7574, 691], [17693, 34781, 371, 30313, 28040, 1944, 6910, 24, 0, 8550, 3317, 29981, 934, 1016, 0, 265, 2355, 6677, 131, 1050, 948, 785, 1713, 76, 214, 0, 1467, 1215, 90, 10112, 1031, 2480, 0, 1291, 144, 218, 3725, 4509, 95, 1816, 64, 2365, 2006, 1212, 20, 0, 1128, 0, 752, 424, 1005, 1127, 2108, 404, 1571, 7140, 953, 5271, 270, 1476, 521, 108, 0, 1332, 17, 3721, 487, 0, 1602, 462, 0, 1550, 2108, 2855, 66, 202, 5239, 0, 3052, 3181, 563, 332, 0, 1019, 77, 57, 12569], [3294, 53360, 2574, 21563, 5958, 9759, 4124, 4852, 2621, 0, 0, 0, 11737, 4488, 8867, 1812, 14855, 11039, 0, 0, 0, 132600], [13628, 511, 690, 21058, 0, 894, 11035, 2273, 3783, 12814, 10438, 17854, 419, 281, 18, 4037, 18575, 22775, 0, 16976, 117, 18514, 42, 1122, 19986, 31420, 0, 20954, 0, 12452, 14772, 1078, 64, 234, 10627, 0, 11122, 126, 10490, 10848, 9532, 11369, 3409, 49430, 11023, 49017, 929, 9626, 11098, 3740, 0, 0, 280, 10739, 18459, 0, 8204, 11316, 0, 12081, 12365, 0, 10840, 2159, 195, 0, 6702, 7084, 0, 13384, 24052, 1146, 779, 588, 4847, 841, 109687], [9682, 14238, 9083, 15260, 31133, 1944, 279, 0, 0, 6399, 1659, 17239, 1160, 81, 10788, 2017, 4159, 45418, 8244, 6236, 59802, 7395, 9251, 1057, 3223, 3183, 6353, 56290, 0, 40071, 10239, 62253, 5346, 39684, 7839, 7623, 55877, 51336, 23703, 63219, 648, 70747, 87155, 35742, 2799, 19, 13478, 1246, 20081, 1247], [13679, 24887, 6586, 2320, 1957, 50779, 0, 12090, 2946, 45035, 58262, 3633, 0, 21265, 23796, 1820, 708, 9808, 71846, 41381, 135705, 4242, 28100, 25739, 23372, 1490, 12013, 11226, 30519, 40477, 7826, 7044, 25005, 516, 23807, 28679, 0, 15692, 17282, 846, 826, 13844, 70969, 0, 28334, 65732, 22837, 227, 6387, 5767, 6145, 497, 431037]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

