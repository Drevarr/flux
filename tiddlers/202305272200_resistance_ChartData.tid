created: 20230527220043000
creator: Drevarr
modified: 20230705163532060
modifier: drevarr
tags: ChartData
title: 202305272200_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Hyde En Sikh", "Gravlyn Isshtail", "Blanco Padre Guard", "Crusader Siolith", "Lucas Ryn", "Aronorf Xideliesi", "Venomina The Fierce", "Koralia Danai", "Bella Sassy", "Newtype Khan"];
const professions = ["Firebrand", "Chronomancer", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[30.3797, 54.513, 46.1358, 2.099, 38.1956, 48.3336, 37.7244, 93.2974, 0.0, 32.487, 7.2515, 5.5642, 53.6728, 14.536, 20.0256], [19.7203, 9.7965, 7.1053, 9.7462, 4.572, 7.7326, 32.7762, 2.835, 29.615, 52.5311, 36.1087, 44.793, 41.4413, 14.4283, 51.4685, 47.4516, 24.6078, 65.611, 7.0835, 21.2956, 8.3626, 5.3903, 21.2405, 10.6934, 26.208], [66.9463, 27.3749, 16.7042, 31.2603, 7.836, 21.2071, 94.4772, 13.284, 38.1488, 137.7562, 7.6212, 119.718, 153.9479, 37.7822, 94.8226], [7.3447, 6.9857, 0.0, 18.936, 4.7467, 46.767, 16.848, 73.9472, 158.9891, 45.0965, 124.74, 246.1385, 26.6631, 78.4778, 69.7662, 118.7298, 89.2598], [27.8555, 0.0, 7.0711, 0.0, 46.536, 9.0341, 148.947, 34.9434, 21.5875, 115.4948, 31.3258, 74.52, 103.1176, 6.0512, 88.8527, 101.9592, 98.5446, 93.0811, 0.0, 35.5898, 6.577, 59.0436, 30.5382, 36.288], [36.5268, 6.9397, 22.1869, 17.8965, 23.34, 18.6296, 126.7032, 6.9174, 99.6931, 173.9035, 94.0298, 103.599, 170.0549, 14.8444, 162.0562, 107.9568, 85.5414, 109.592, 17.7555, 70.1719, 32.0813, 0.0, 61.0533, 17.1398, 44.2624], [30.303, 13.6874, 6.8149, 0.0, 25.344, 1.7098, 96.678, 29.727, 90.2915, 283.2269, 123.0955, 147.825, 141.0784, 47.5397, 179.9658, 110.5146, 139.3686, 91.9275, 0.0, 60.2004, 39.5114, 5.3374, 103.1184, 20.7549, 70.784], [0.0, 35.64, 94.2691, 210.6385, 33.0602, 268.677, 226.5511, 16.0735, 182.4001, 166.4334, 78.9642, 135.6922, 0.0, 111.6227, 67.7536, 0.0, 160.3255, 104.0272, 112.8512], [0.0, 5.4899, 46.765, 10.3846, 18.012, 5.9972, 145.5672, 29.889, 22.0938, 297.3331, 105.7507, 107.973, 256.337, 46.8023, 198.8028, 122.598, 129.843, 150.1843, 0.0, 97.9118, 16.7152, 86.6596, 25.2294, 95.4688], [19.1375, 7.5579, 53.2042, 5.8626, 18.708, 33.227, 203.6526, 35.2674, 94.1245, 296.231, 150.1639, 205.659, 195.1463, 38.3306, 198.513, 174.636, 140.994, 156.3849, 0.0, 57.1506, 36.1782, 5.8666, 96.3617, 39.3104, 131.8912], [172.8436, 27.328, 0.0, 161.844, 27.9444, 136.4496, 137.5542, 173.8573, 580.7803, 49.091, 275.238, 432.6243, 60.6066, 416.0948, 310.9932, 182.9142, 214.5696, 0.0, 158.5631, 132.4122, 0.0, 247.0545, 170.185, 67.2896]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

