created: 20230826003133000
creator: Drevarr
tags: ChartData
title: 202308260031_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal S", "Greg The Knight", "Arcanophage Farra", "Luke The Ghastly", "Forever Dreaming", "Zaedy Zae", "Newtype Khan", "Jimbo The Pleb", "Jinxi Greenphene", "Brutal Araden", "Xanvias Einzbern", "Budget Chicken", "Bee Nemesis", "Ryvalia Fazebringer", "Sub Train", "Air One Com", "Mistwalker Cael", "Wall Knot", "Darks Na", "Mmathuss", "Solus Luxes", "Bella Sassy", "Koralia Danai"];
const professions = ["Druid", "Firebrand", "Spellbreaker", "Scourge", "Scourge", "Druid", "Spellbreaker", "Berserker", "Vindicator", "Renegade", "Berserker", "Firebrand", "Spellbreaker", "Chronomancer", "Firebrand", "Firebrand", "Herald", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.7528, 0.6916, 0.4477, 0.0, 0.6658, 0.0, 0.9173, 0.0, 0.0, 0.0, 2.397, 0.0, 0.8509, 0.6868, 3.2331, 0.6724, 0.0, 0.6734, 0.677, 8.3609, 0.6534], [3.2331, 2.9586, 0.0, 1.7209, 0.8463, 0.0, 14.2628, 1.089], [0.0, 2.4752, 0.0, 0.0, 2.4256, 0.0, 1.6489, 0.0, 0.0, 0.0, 6.392, 0.0, 0.0, 3.1018, 2.8019, 2.6453, 0.0, 0.0, 2.3942, 0.0, 0.9836, 0.0], [1.2546, 1.7108, 1.1939, 0.0, 0.7134, 0.0, 0.0, 1.5441, 0.0, 0.0, 1.9975, 0.0, 0.1987, 1.0705, 1.5933, 3.527, 1.7482, 0.0, 1.5712, 0.7738, 0.0, 10.3282, 0.6534], [1.3382, 1.456, 0.0, 0.0, 0.9988, 0.0, 1.769, 0.2206, 0.0, 0.0, 6.5917, 0.0, 2.1853, 0.7085, 1.4548, 1.6482, 2.3514, 0.8741, 0.0, 2.8432, 0.4836, 0.0, 5.9018], [1.0873, 0.6188, 0.5596, 0.5703, 1.6646, 0.0, 0.688, 0.7353, 0.8978, 3.5955, 1.6555, 0.4667, 0.7142, 4.8497, 0.4034, 0.0, 2.1698, 0.0, 13.2791, 1.3504], [0.0, 0.9828, 1.7163, 0.0, 1.617, 0.0, 2.3806, 0.0, 0.0, 0.0, 3.196, 0.0, 1.6555, 0.0, 1.7019, 0.0549, 8.6706, 1.2103, 0.0, 1.646, 0.0, 0.0, 11.3119, 0.0], [2.9692, 0.2548, 1.7163, 0.6142, 0.0, 1.296, 0.0, 0.0, 0.0, 1.197, 7.99, 0.021, 2.4501, 1.8941, 1.5933, 2.0574, 4.5723, 0.0, 2.6187, 1.2332, 0.0, 20.6564, 0.0], [3.7909, 16.4595, 1.4793, 0.0, 7.1079, 0.0, 0.0, 29.5092], [0.0, 0.0, 3.6191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.3945, 0.0, 0.0, 0.0, 0.0, 5.1918, 4.1149, 2.8913, 0.0, 6.2101, 0.0, 0.0, 35.9029, 1.2632], [2.8438, 1.2376, 0.0, 0.0, 0.761, 1.68, 0.0, 0.0, 0.0, 2.6077, 9.9875, 0.0, 1.0595, 0.0, 0.6043, 7.7889, 1.0758, 0.0, 2.9928, 0.8947, 0.0, 29.5092, 0.6534], [3.5965, 3.9676, 3.5818, 1.009, 3.8999, 0.0, 5.875, 0.1471, 0.9405, 7.5905, 0.3973, 5.1606, 7.0598, 8.9646, 1.6138, 0.0, 2.0201, 0.5078, 0.0, 11.8037, 1.6117], [0.0, 1.7108, 1.7163, 1.6671, 2.378, 2.52, 2.4898, 2.5, 0.0, 0.0, 4.5943, 1.7217, 0.0, 2.3333, 0.7966, 7.0541, 8.0016, 0.0, 3.741, 0.0725, 28.5256, 1.481], [1.9237, 1.9292, 0.485, 0.0, 3.8999, 0.0, 0.1966, 4.2647, 0.0, 0.0, 6.1923, 0.0, 0.0, 0.0, 2.9371, 1.4284, 4.2618, 3.4292, 0.0, 5.0129, 2.0795, 0.0, 35.9029, 0.0], [7.9876, 3.64, 2.4251, 0.0, 5.2792, 0.0, 4.8594, 0.0, 0.0, 0.0, 6.9913, 0.0, 1.7217, 0.0, 5.1606, 5.9335, 7.0541, 7.7326, 0.0, 8.0806, 1.8377, 0.0, 34.4274], [4.642, 3.6036, 4.9249, 3.9044, 7.9425, 2.496, 1.7035, 0.1471, 0.342, 22.372, 0.0, 0.1324, 1.5646, 3.8458, 14.549, 10.0188, 1.9631, 11.8964, 1.9828, 0.0, 39.8374, 1.5682], [2.091, 2.002, 0.0, 0.0, 3.2341, 0.0, 4.6192, 5.8824, 0.0, 3.591, 10.5867, 0.1324, 2.2235, 1.0164, 14.9899, 9.0774, 4.6444, 0.4489, 4.3524, 0.0, 82.1339, 1.2197], [3.0529, 5.2052, 1.7536, 0.0, 4.2804, 0.0, 4.1168, 2.2059, 0.0, 1.539, 19.176, 0.0, 4.5692, 6.9723, 6.5653, 18.6639, 8.2705, 1.8354, 13.6172, 3.627, 0.0, 77.2157], [6.4403, 5.5692, 5.0742, 4.2115, 3.7097, 0.972, 3.7019, 0.0, 5.3438, 28.3645, 0.0, 6.5558, 0.0, 0.0, 7.3894, 20.7214, 8.8084, 0.1436, 12.1957, 0.1693, 0.0, 67.3793, 0.0], [1.9237, 4.8776, 6.6039, 0.8774, 5.4218, 5.184, 3.8329, 1.7647, 0.0, 0.0, 26.367, 2.5826, 0.052, 5.9841, 27.6285, 5.4464, 1.3885, 11.1482, 1.4992, 0.0, 80.6585], [0.0, 1.026, 28.3645, 0.0, 6.026, 6.8076, 10.9331, 15.1369, 13.2463, 0.0, 10.5496, 2.2246, 0.0, 100.3313, 4.5302], [7.6531, 8.8088, 4.2906, 5.5715, 9.8449, 0.228, 5.7002, 5.2206, 3.762, 45.7428, 0.2467, 15.1644, 7.7683, 7.8015, 42.6184, 12.1032, 0.8299, 18.7798, 5.9966, 0.2458, 137.2178, 14.5055], [12.2533, 7.0252, 4.9995, 13.6874, 6.4682, 0.252, 3.3415, 3.1618, 0.0, 6.3698, 50.337, 18.6078, 0.0, 9.0036, 7.774, 38.9444, 18.2893, 3.7187, 21.623, 2.2246, 131.8078, 2.3958]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

