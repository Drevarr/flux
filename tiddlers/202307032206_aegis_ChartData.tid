created: 20230703220627000
creator: Drevarr
modified: 20230705163541225
modifier: drevarr
tags: ChartData
title: 202307032206_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Fribble Bibble", "Crusader Siolith", "Il Dim Snail Il", "Sub Train", "Drevarr Moonwillow", "Erma Starr", "Zaylen Harker", "Gabe Malhorn", "Mmathuss", "Koralia Danai", "Sister Elon\u00edth", "Solus Sanctus"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Guardian", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[49.3771, 5.146, 0.3722, 71.3664, 10.4218, 10.2887, 180.2865, 0.0, 118.2301, 10.403, 0.0, 9.5993, 5.313, 3.5023, 9.5429], [7.8744, 0.0, 30.3545, 2.8426, 28.3613, 19.9267, 200.8005, 0.0, 0.0, 0.0, 39.7247, 16.3185, 8.2818, 4.7714, 7.1208, 5.2164, 8.5716, 8.7547, 2.3324, 11.4998, 25.7611, 10.883, 19.639, 10.8979, 57.7946], [16.6752, 7.0847, 61.555, 17.4182, 3.7453, 5.3071, 353.8665, 29.0692, 16.7523, 0.0, 11.254, 27.6064], [26.0318, 11.1672, 0.0, 0.0, 0.0, 140.442, 0.0, 0.0, 0.0, 0.0, 18.4497, 14.8764, 5.3406, 7.2841, 1.7338, 27.9468, 17.8548, 29.1971, 25.8324, 49.7059, 34.0402, 25.4179, 40.0347, 4.6234, 76.3977], [73.3709, 0.0, 0.0, 50.6218, 0.0, 0.0, 214.2135, 0.0, 103.6472, 0.0, 0.0, 11.914, 3.4155, 10.9521, 12.4616, 3.612, 0.0, 2.2022, 6.1772, 8.778, 30.1752, 12.973, 7.9979, 19.6768, 33.1616, 53.7504], [13.9886, 31.3432, 34.2799, 6.5318, 0.0, 16.9871, 355.05, 114.6306, 177.4657, 173.7473, 5.5485], [45.5789, 11.5056, 13.487, 0.0, 327.0405, 113.4472, 35.0111, 184.7185, 19.6411, 9.867, 20.0079, 4.5938, 10.6709, 7.6104, 18.905, 16.3539, 7.825, 13.0205, 39.5842, 32.7584, 28.38, 20.4474, 63.3093], [68.2757, 13.9258, 42.4692, 9.3139, 0.0, 0.0, 429.6105, 81.2395, 54.5353, 85.8027, 128.0196, 35.4016, 16.0655, 9.9072, 26.649, 5.8205, 20.5632, 68.7086, 21.8645, 27.1366, 45.3341, 23.5435, 35.8261, 26.1096, 7.7331, 48.2357], [35.2032, 15.7833, 149.2006, 236.1744, 148.1844, 13.3742, 758.229, 164.2799, 212.4165, 76.7985, 42.2436, 13.9403, 20.4529, 23.2735, 13.6637, 20.538, 41.6385, 42.7513, 69.898, 29.3198, 27.1656, 47.476, 24.0284, 23.4746, 132.0599], [176.3866, 59.1745, 165.3422, 179.9885, 73.9022, 15.6968, 1022.1495, 132.1236, 93.5235, 170.4253, 39.9694, 41.5628, 15.3824, 1.9737, 25.1516, 14.5718, 12.0456, 69.0136, 19.3758, 24.1771, 62.3938, 21.6955, 22.8615, 40.7537, 30.7949, 89.9272], [167.9563, 41.1379, 175.1897, 232.1827, 71.2968, 1374.0435, 59.4762, 95.3916, 97.3859, 9.4583, 13.582, 21.5303, 38.3324, 10.1012, 14.3654, 27.09, 71.9272, 55.5056, 68.1674, 27.6566, 41.1734, 44.0796, 28.4178, 97.7786, 168.1631], [241.6051, 149.8435, 219.6634, 106.7959, 24.5381, 1895.967, 196.539, 315.2201, 27.3625, 43.5143, 59.4679, 29.9046, 32.5854, 19.2127, 19.2778, 40.4712, 49.8036, 44.0845, 21.3682, 59.0674, 59.2469, 47.2934, 42.1916, 20.64, 103.8244]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

