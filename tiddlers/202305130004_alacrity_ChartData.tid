created: 20230513000456000
creator: Drevarr
modified: 20230705163529645
modifier: drevarr
tags: ChartData
title: 202305130004_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Lookin Boi", "Drevarr Moonwillow", "Ryvalia Fazebringer", "High Sorcer Baradun", "Leetle Dim", "Jupiter Four", "Tegan Parker", "Eibh\u00ebar", "Mac Aaroni", "Black Raspberry Pie", "Artakama Nahid", "Miphest\u00f6"];
const professions = ["Tempest", "Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[139.6685, 46.3968, 143.3897, 0.0, 37.8893, 0.0, 115.8595, 138.5579, 0.0, 5.0732], [0.0, 0.0, 101.9372, 293.0925, 5.3961, 23.0702, 0.0, 0.0, 41.0688, 0.0, 0.0, 0.0, 38.9235, 7.7781, 0.0, 35.305, 117.5731, 0.0, 68.4726, 0.0, 2.6054, 0.0, 21.121, 11.702, 87.389, 0.0, 0.0, 0.0], [0.0, 9.3542, 35.7847, 154.401, 0.0, 0.0, 67.054, 37.9142, 64.8, 28.3702, 44.4022, 73.9968, 0.0, 35.8979, 60.03, 34.1107, 0.0, 158.6953, 0.0, 45.1757, 0.0, 0.0, 0.0, 41.1494, 0.0, 34.1699, 0.0], [93.2774, 203.7773, 401.0185, 858.6309, 58.2654, 249.5222, 64.3637, 26.04, 70.2144], [73.9584, 200.3904, 319.7642, 613.5643, 45.8363, 32.7839, 0.0, 0.0, 158.112, 41.6962, 0.0, 41.2096, 0.0, 0.0, 109.595, 130.6368, 30.4344, 63.7735, 0.0, 29.808, 0.0, 157.1136, 0.0, 133.2535, 0.0, 0.0, 34.1806], [37.9814, 88.1395, 162.5085, 963.2106, 22.5544, 62.2721, 0.0, 40.1314, 162.2016, 37.9239, 152.2048, 0.0, 74.635, 183.2141, 0.0, 152.0495, 0.0, 0.0, 142.8605, 0.0, 101.5341, 0.0, 0.0, 0.0], [60.5837, 72.6566, 367.696, 816.8888, 141.7529, 122.9831, 0.0, 35.0573, 95.6736, 20.7148, 134.4576, 0.0, 0.0, 112.125, 65.8829, 0.0, 59.3429, 0.0, 104.2176, 94.1741, 0.0, 136.2539, 33.1731, 0.0, 40.4203], [6.9466, 109.993, 487.1972, 1245.531, 99.5545, 91.5869, 34.0726, 37.691, 132.192, 0.0, 38.6703, 0.0, 178.0736, 21.4452, 43.1664, 120.8075, 133.056, 0.0, 126.2044, 0.0, 0.0, 132.0883, 0.0, 161.3294, 0.0, 39.7366, 33.7218], [217.4861, 340.4621, 250.3287, 741.0348, 134.538, 259.9298, 11.8778, 0.0, 189.0432, 25.0177, 27.1399, 1.5548, 218.2605, 45.086, 83.0953, 159.7925, 232.4851, 37.9296, 156.0773, 0.0, 97.9027, 14.2524, 129.4541, 15.6941, 178.5286, 31.7419, 37.7134], [78.5894, 249.0163, 321.5698, 1333.9525, 162.3065, 245.4459, 88.6397, 37.3488, 129.8304, 95.0162, 0.0, 194.7379, 49.6303, 0.0, 170.4875, 230.3078, 3.0456, 156.2115, 200.0448, 43.9393, 111.1085, 0.0, 165.1336, 8.8218, 31.6572], [135.5789, 185.8752, 487.5255, 1460.5254, 127.2624, 291.2393, 41.6613, 39.923, 138.24, 37.6412, 33.7916, 12.1992, 177.5923, 12.0502, 0.0, 163.07, 246.7584, 84.456, 73.1046, 80.6803, 42.9071, 176.4, 0.0, 210.998, 32.3379, 43.2503, 0.0], [126.8698, 196.7616, 705.6808, 2009.0078, 107.7395, 428.4462, 48.5139, 86.676, 130.0608, 49.7406, 0.0, 303.0861, 49.9588, 206.08, 267.5635, 22.464, 236.9689, 0.0, 104.7034, 0.0, 229.7904, 0.0, 289.2784, 22.968, 24.675, 37.2546]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

