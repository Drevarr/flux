created: 20230322220917000
creator: Drevarr
modified: 20230705163522868
modifier: drevarr
tags: ChartData
title: 202303222209_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Sizzln Sisigbringer", "Elonith Primal", "Zadie Miststep", "Charred Fishbringer", "\u00c1rkantor", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Tempest", "Tempest", "Scrapper", "Vindicator", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[490.4064, 80.443, 33.051, 41.607, 188.5488, 114.5088, 50.112, 58.9411, 75.6418, 52.0397, 51.4794, 644.322, 4.405, 82.4486, 17.676, 11.0189, 17.9386, 68.9786, 108.5384, 53.0957, 20.1461, 18.9532, 23.9674, 0.0, 18.1542], [799.2634, 102.3992, 117.231, 63.319, 175.6128, 173.8598, 137.7216, 82.6022, 64.7049, 100.489, 153.9648, 83.496, 1587.054, 161.5152, 28.0541, 77.292, 139.5614, 60.9449, 39.824, 114.9849], [953.0726, 127.7208, 106.145, 24.403, 210.8304, 223.7184, 150.6816, 150.9043, 160.8457, 0.0, 244.105, 187.1898, 2310.546, 195.4963, 129.4992, 32.688, 81.6165, 86.7371, 23.5442, 184.214, 120.1306, 24.3432, 25.3814, 28.2629, 0.0, 27.4936], [988.7386, 137.1656, 159.137, 27.209, 308.6688, 275.4662, 189.5616, 194.8397, 121.6501, 0.0, 195.2755, 152.292, 2234.218, 414.276, 111.7267, 38.556, 134.2084, 57.989, 61.39, 195.7756, 179.3088, 74.7262, 64.3482, 45.5544, 55.1126, 10.7235], [1897.2288, 213.5647, 235.773, 0.0, 479.1072, 247.8182, 184.2048, 139.944, 357.6183, 191.4317, 166.404, 2398.648, 156.1314, 90.6739, 179.316, 91.3145, 193.8472, 234.6959, 536.6661, 292.7232, 24.8968, 163.4218, 264.3523, 5.3554, 102.0774], [1752.5837, 186.3704, 160.172, 63.204, 296.5248, 298.6445, 222.5088, 249.1238, 189.0129, 257.9597, 294.735, 2635.752, 205.2851, 94.3459, 249.444, 175.0514, 163.3892, 133.3197, 506.8864, 444.9773, 182.94, 230.1778, 112.2034, 0.0, 79.9019], [1942.8019, 110.1341, 63.273, 0.0, 477.9984, 260.3981, 90.8928, 235.4352, 224.1148, 0.0, 331.415, 255.3684, 3562.244, 401.0611, 47.4912, 141.588, 159.4789, 114.0943, 73.6485, 390.5702, 105.8746, 62.9565, 144.071, 59.4533, 0.0, 36.9932], [3461.5757, 469.3592, 295.021, 152.766, 813.912, 567.2909, 431.856, 514.2413, 476.9771, 106.3171, 592.1203, 522.879, 5313.322, 759.7507, 691.56, 371.412, 254.0261, 372.1032, 453.4038, 733.703, 592.3526, 184.083, 228.3885, 257.7586, 5.5104, 117.813]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

