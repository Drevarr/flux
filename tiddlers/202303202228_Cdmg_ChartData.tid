created: 20230320222849000
creator: Drevarr
modified: 20230705163522606
modifier: drevarr
tags: ChartData
title: 202303202228_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Whose Guardian", "Sheep Paws", "Seren Nightroad", "Solus Sanctus", "Sister Elon\u00edth", "Mak\u00e4dos", "Morton Saltbringer", "Garphon", "Eibh\u00ebar", "High Sorcer Baradun", "Tullenar", "Smol Daddy Tika", "Legacy Of Mathus", "Lord Erin The Wise", "Demon Sekhmet", "Dark Sidiuz", "Cerys Fireblade", "Rozaalyna", "Xanvias Einzbern", "Nazhul Naxxremis", "Rina Of Theros", "Smol Gluvs", "Be\u00eb"];
const professions = ["Firebrand", "Dragonhunter", "Berserker", "Scourge", "Firebrand", "Dragonhunter", "Harbinger", "Chronomancer", "Renegade", "Chronomancer", "Tempest", "Necromancer", "Berserker", "Berserker", "Weaver", "Berserker", "Scourge", "Berserker", "Scourge", "Berserker", "Scourge", "Scourge", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[25.8529, 0.0, 0.325, 20.4, 37.2353, 0.7129, 0.9899, 14.8739, 6.9281, 2.8353, 0.0, 0.0, 40.5156, 19.6358, 0.0, 100.5524, 0.0, 13.075, 1.0548, 29.3732, 127.593, 78.0843, 3.1045, 14.9351], [2.9485, 29.4444, 54.35, 16.88, 19.1961, 16.0396, 10.8643, 25.6496, 4.0396, 52.0588, 12.5116, 3.9444, 29.8281, 28.3709, 2.7222, 47.8, 19.7784, 29.1625, 7.9452, 26.6813, 50.8605, 41.3976, 1.8226, 3.1567, 50.5714], [3.1389, 176.3047, 115.3808, 10.3194, 92.3905, 4.8811, 72.7125, 21.9452, 6.457, 117.1977], [202.8162, 244.7222, 217.65, 88.1733, 107.1373, 103.2475, 34.1457, 21.2201, 12.5072], [44.7721, 109.8611, 199.7, 28.56, 14.9608, 82.1881, 5.9246, 28.6827, 19.1763, 39.6588, 0.0, 9.7778, 10.6328, 23.3245, 0.0, 12.3143, 19.827, 5.65, 26.0137, 27.5639, 45.2791, 17.6265, 0.0, 14.5714], [0.5908, 25.2302, 110.6941, 21.9722, 77.6719, 40.1854, 0.6389, 35.7429, 44.8054, 64.2, 20.4658, 54.4822, 70.9535, 94.3253, 0.0, 5.5896, 74.1429], [32.6977, 0.0, 66.1094, 123.8212, 0.0, 29.781, 2.7568, 33.15, 26.4795, 31.7317, 46.1279, 69.7952, 0.0, 1.0075, 501.5714], [48.4722, 222.5, 40.7333, 98.5098, 3.505, 14.8794, 73.7468, 67.036, 139.8353], [0.0, 177.8571, 52.3135, 389.9875, 24.8082, 167.5597, 0.0], [6.4338, 88.3889, 99.0, 7.3067, 40.9216, 33.7921, 16.7487, 28.8462, 6.036, 156.1765, 8.8837, 6.9167, 50.1328, 64.3377, 15.3333, 156.8476, 8.227, 76.1375, 4.2329, 16.8679, 133.7093, 76.9277, 0.0, 0.0, 198.8961], [78.5, 22.8133, 59.9608, 19.7228, 21.4472, 27.734, 13.9029, 104.0471, 0.0, 5.1667, 32.0078, 84.3311, 0.0, 120.1143, 0.3514, 136.05, 13.0, 78.8574, 111.0698, 42.506, 0.0, 0.0, 98.3506], [845.4, 0.0, 52.9811, 832.4337, 0.0, 0.0, 123.987], [24.0588, 3.1667, 1.775, 8.5067, 4.3922, 15.3465, 3.8492, 53.4338, 16.205, 88.5647, 12.5581, 0.0, 77.1875, 142.1093, 0.0, 17.5905, 10.3622, 237.3, 29.8356, 44.3396, 85.9535, 82.7952, 0.0, 0.0, 67.7922], [38.4265, 99.75, 272.1, 0.0, 100.1373, 76.1287, 17.5126, 54.9135, 22.018, 0.0, 107.8092, 176.7558, 221.6145, 0.0, 23.1045, 158.5844], [77.75, 83.8611, 43.425, 106.48, 30.1569, 80.4356, 14.4121, 50.0395, 12.3345, 181.4824, 68.8837, 2.0556, 168.8594, 129.5199, 1.3472, 30.2476, 1.5676, 173.975, 10.6301, 56.0713, 159.2093], [16.8333, 186.0391, 165.5066, 0.0, 346.8952, 19.4973, 254.0, 23.6027, 104.5241, 160.2093, 263.7349, 1.6493, 159.9221], [0.0, 122.9333, 138.902, 148.8614, 93.7286, 13.7585, 18.6187, 212.9647, 9.4884, 0.0, 240.6797, 174.8477, 8.0139, 0.0, 106.7027, 191.475, 9.2466, 61.3061, 247.9767, 140.6265], [53.3, 36.32, 34.6275, 63.1881, 66.5678, 70.1709, 5.1043, 241.0706, 0.0, 2.4444, 48.4688, 68.5464, 0.0, 89.0857, 7.3784, 338.1375, 80.589, 79.6771, 301.5233, 202.9398, 0.0, 7.5522, 223.1688], [10.7353, 213.1111, 323.25, 118.0133, 353.7059, 90.0297, 29.5427, 88.1314, 5.5432, 1.1765, 29.8837, 368.9219, 198.106, 0.0, 60.5524, 23.573, 382.225, 18.6712, 139.3166, 272.686], [50.2206, 0.0, 0.0, 203.1867, 0.0, 169.7129, 1.402, 111.0598, 47.9029, 253.1294, 3.9302, 0.0, 199.5312, 85.7285, 0.0, 461.3714, 25.027, 172.7375, 41.8493, 104.9811, 153.2209, 386.6867, 1.4355, 1.8209, 272.0909], [284.8333, 554.55, 172.0, 174.3922, 202.8713, 76.9799, 48.8985, 616.6235, 19.7907, 4.8056, 305.0625, 279.4139, 9.5139, 242.6, 14.4216, 218.7375, 20.137, 160.0042, 85.0814, 348.0723, 11.2097, 11.3731, 592.039], [162.9265, 591.2778, 268.25, 174.4533, 273.098, 56.6337, 81.2864, 107.3932, 38.0899, 398.8824, 33.7209, 0.0, 265.3359, 212.4768, 22.1111, 518.1238, 11.5459, 273.525, 9.4932, 94.5115, 103.7907, 244.2169, 0.0, 7.9478, 568.2338], [242.8333, 687.5, 287.0267, 240.5098, 125.1188, 74.6482, 88.1741, 28.6547, 568.0471, 12.8837, 5.8056, 334.625, 183.1788, 9.9583, 497.5048, 23.9351, 348.7625, 71.3836, 132.065, 376.3256, 451.1928, 0.0, 15.6343, 656.4416], [373.5, 445.0, 207.4533, 453.3725, 253.4158, 102.2764, 123.4829, 22.6151, 687.1059, 0.4186, 20.1944, 596.9844, 279.702, 3.2778, 701.3143, 26.8541, 577.5, 25.9041, 53.9455, 623.4651, 528.9277, 0.0, 5.9776, 440.0779]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

