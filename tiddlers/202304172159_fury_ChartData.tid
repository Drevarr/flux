created: 20230417215912000
creator: Drevarr
modified: 20230705163525771
modifier: drevarr
tags: ChartData
title: 202304172159_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Krelkit", "Newtype Khan", "Skye Nightroad", "Mike The Archmagus", "Smol Daddy Tika", "Tootsie Pop Rocks", "Miphest\u00f6", "Lord Erin The Wise", "Kelida", "Demon Staph", "Etchery Howls", "Fribble Bibble", "Cat Wigglebooty", "Tribal S", "Arriasa", "Drevarr Moonwillow", "Arcanophage Farra"];
const professions = ["Scrapper", "Spellbreaker", "Scrapper", "Catalyst", "Spellbreaker", "Scrapper", "Tempest", "Weaver", "Scrapper", "Druid", "Druid", "Scrapper", "Scrapper", "Druid", "Druid", "Scrapper", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 43.2115, 14.4557, 144.698, 0.0, 88.7802, 30.8301, 95.9116, 40.2339, 9.0199, 16.0524, 0.0, 48.2051, 29.8637, 9.9226, 27.6242, 93.1613, 6.9208, 34.3446], [4.3472, 186.8407, 55.8609, 75.4845, 0.0, 71.5753, 31.9374, 36.5324, 0.0, 31.2228, 0.0, 0.0, 46.1916, 9.599, 0.0, 50.0476, 16.148, 8.2839, 55.5248, 0.0, 0.0, 0.0, 0.0, 0.0, 24.965, 0.0, 0.0, 33.2813, 16.6767, 27.048], [0.0, 77.9117, 12.0409, 195.3307, 110.0814, 47.673, 119.8756, 61.0589, 48.2219, 43.3415, 68.8136, 21.913, 48.5129, 70.0382, 19.6088], [3.4291, 60.5772, 126.4126, 119.5404, 79.3119, 101.6723, 42.2333, 91.0663, 33.9706, 17.9334, 92.2733, 63.0674, 61.6724, 32.1325, 74.2219, 36.8759], [44.9251, 46.9783, 220.2428, 97.7295, 157.6462, 85.0738, 42.5707, 138.2364, 30.7258, 58.0527, 134.1014, 86.8814, 78.4245, 93.8174, 64.1655], [0.0, 0.0, 70.4233, 11.6048, 321.2156, 0.0, 113.1351, 15.1528, 78.7626, 29.6132, 123.5035, 24.2315, 0.0, 14.5681, 60.1637, 91.4413, 79.3065, 85.7231, 92.5414, 0.0, 30.8491, 0.0, 21.7152, 0.0, 38.3275, 75.4507, 35.6387, 0.0, 39.4243, 98.3655, 49.4655], [213.4469, 0.0, 227.6854, 13.3461, 129.8745, 34.986, 63.2551, 147.835, 166.7635, 68.7446, 8.8464, 100.6494, 29.3339, 61.815, 73.3162, 15.4818, 0.0, 48.2211, 44.3789, 0.0, 40.6613, 20.6388, 60.3464, 31.2595, 28.3147, 53.6305], [35.6143, 93.2567, 46.3355, 385.0871, 12.1471, 170.6337, 30.597, 28.0976, 61.1838, 9.4247, 63.3305, 16.2598, 25.1685, 79.1194, 0.0, 57.721, 182.9783, 38.5885, 92.4111, 63.8561, 21.5074, 136.2962, 35.1187, 16.038, 137.7816, 66.7586, 52.5202, 23.2791, 80.5594, 55.2024], [82.4714, 222.482, 93.7946, 1142.9515, 0.0, 381.7845, 140.6296, 136.466, 108.6649, 85.5736], [12.9095, 4.6446, 121.8188, 53.0603, 934.8465, 393.2544, 160.3866, 152.9447, 134.7794, 182.5377, 143.9747, 52.2958, 215.3239, 117.2246, 8.6549, 85.5158], [625.4762, 8.9786, 214.9493, 130.3724, 111.4407, 86.3404, 136.8021, 62.5279, 10.9771, 59.1016, 139.0891, 8.6093, 107.8113, 342.069, 293.9226, 151.2596, 157.9144, 52.0546, 144.3398, 56.2598, 68.8176, 107.9813], [192.6923, 68.2539, 706.5349, 353.78, 92.1407, 133.0585, 109.2063, 252.8469, 13.9121, 305.6936, 173.2675, 64.9891, 150.9955, 259.7049, 213.6522], [122.6372, 44.0883, 725.1157, 266.0426, 21.5636, 172.3281, 100.1683, 34.1716, 120.5841, 193.0572, 118.7275, 0.0, 60.3215, 212.7899, 67.1628, 186.1255, 53.6885, 91.9555, 50.6189, 26.7543, 86.4389, 119.6653, 94.2711, 0.0, 33.359, 87.5748, 65.415], [895.5946, 19.1946, 281.162, 196.695, 180.3719, 118.9107, 49.0314, 123.3359, 9.4565, 71.597, 129.3931, 28.9195, 64.2434, 213.4587, 105.5416, 149.0438, 122.7377, 32.2344, 91.1067, 61.127, 67.9185, 119.8296, 107.5202, 98.5723, 54.9717, 103.8096, 110.0927, 63.651], [19.9709, 15.3696, 97.676, 48.5156, 708.393, 0.0, 194.5418, 229.0987, 199.085, 66.4317, 105.5793, 70.3248, 25.4549, 141.5358, 120.5213, 10.2053, 92.2087, 245.5635, 144.0252, 186.9727, 73.7035, 57.72, 145.4716, 61.801, 40.2651, 120.9965, 136.3748, 109.4062, 60.8373, 100.4659, 99.1682, 55.419], [0.0, 45.7085, 155.1686, 89.5518, 1330.153, 508.8474, 219.4825, 318.402, 211.8735, 336.2811, 96.9259, 0.0, 317.6561, 246.5693, 201.7678, 267.8266, 226.0782, 400.6, 59.1354, 120.0043, 227.12, 120.8064, 61.5276, 285.7958, 260.9617, 110.7968, 117.6419, 176.9818, 176.3089, 128.3555], [278.6243, 107.7808, 1076.7574, 0.0, 322.7218, 119.7071, 290.1368, 167.3914, 214.4544, 142.5988, 58.1566, 279.2815, 341.8325, 39.5808, 150.6118, 429.4017, 233.2086, 350.4843, 258.1146, 96.5256, 294.4597, 151.9315, 124.0272, 470.881, 234.4488, 182.527, 96.8191, 197.5104, 172.0282, 128.4535]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

