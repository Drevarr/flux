created: 20230603000934000
creator: Drevarr
modified: 20230705163533087
modifier: drevarr
tags: ChartData
title: 202306030009_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh Of The North", "Kardknight", "Miphest\u00f6", "Newtype Khan", "The Fancy Cheese", "Cyclotechnist Farra", "Xanvias Tsoli", "N\u00f3b\u00fa", "Aronorf Xideliesi", "Lord Erin The Wise", "Mistwalker Cael", "P\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6", "Sakis Ranger", "Arriasa", "Cat Wigglebooty", "Zadey Starbolt", "Drevarr Moonwillow"];
const professions = ["Tempest", "Renegade", "Tempest", "Spellbreaker", "Scrapper", "Scrapper", "Holosmith", "Druid", "Firebrand", "Weaver", "Vindicator", "Herald", "Druid", "Druid", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 15.4678, 0.0, 121.0019, 29.8056, 0.0, 0.0, 31.0989, 98.4957, 54.2685, 44.1697, 0.0, 17.4975, 0.0, 40.3305, 57.6299, 30.9443, 30.9879, 0.0, 31.008, 0.0, 31.0905, 61.9752], [44.0154, 100.9229, 92.5821, 227.093, 380.1146], [312.3445, 159.0202, 72.0291, 81.5939, 0.0, 30.5376, 0.0, 121.716, 83.2432, 38.6804], [0.0, 136.4299, 60.9039, 703.7982, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.1386, 0.0, 0.0, 0.0, 0.0, 33.6798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 71.3048], [0.0, 104.0332, 13.9679, 149.6448, 23.5752, 0.0, 28.534, 54.1443, 82.5682, 84.6768, 46.4398, 10.472, 73.255, 230.1037, 72.8372, 62.5347, 0.0, 63.1258, 0.0, 84.8043, 286.552], [0.0, 68.6783, 20.1712, 224.4672, 11.9592, 4.4302, 27.7559, 20.0718, 54.6632, 141.2775, 80.167, 19.844, 20.8362, 12.712, 97.3245, 145.2805, 78.1475, 63.1557, 11.6543, 62.6035, 0.0, 98.1005, 219.1123], [8.6264, 87.817, 52.3447, 214.1401, 0.0, 12.6857, 27.6494, 43.6871, 91.9972, 91.8528, 86.1989, 21.2544, 10.8726, 21.6048, 29.624, 131.0602, 68.7069, 54.7101, 16.7864, 127.9488, 0.0, 87.2519, 196.8546], [120.78, 0.0, 57.0352, 117.0359, 141.0539, 86.2914, 61.3576, 32.7672, 0.0, 0.0, 81.949, 49.0644, 85.5558, 97.5591, 62.3344, 106.2758, 56.3094, 78.4539, 367.3197], [35.5235, 74.6658, 0.0, 452.052, 23.1264, 0.0, 23.764, 97.3489, 38.571, 150.086, 0.0, 13.11, 0.0, 88.067, 238.0871, 58.6106, 48.9969, 0.0, 51.1795, 5.1291, 86.3919, 233.7731], [27.8795, 81.6512, 26.8345, 416.979, 19.9056, 12.8066, 25.1597, 39.8462, 264.1417, 163.3437, 119.537, 64.7472, 27.3737, 29.8144, 109.319, 185.2805, 86.0147, 91.3491], [11.9483, 48.9694, 0.0, 291.6905, 23.9448, 0.0, 0.7125, 41.2091, 183.7396, 146.3904, 104.1003, 30.504, 24.507, 24.1472, 92.8165, 193.5965, 45.3675, 69.1173, 34.6064, 106.7981, 74.907, 109.2137, 175.663], [144.8625, 171.6779, 53.209, 1006.2054, 141.9264, 100.0793, 521.9123, 192.5859, 127.5148, 349.0248, 56.9673], [54.8481, 129.9434, 23.4331, 688.0154, 89.6808, 79.2288, 25.6265, 73.6957, 328.7436, 281.5683, 119.2775, 101.0896, 51.0591, 40.1296, 134.9985, 216.9644, 124.0395, 136.3716, 122.7442, 159.8054, 36.3834, 148.1098, 342.9294], [69.7254, 166.2606, 51.7732, 676.5192, 71.7024, 26.6011, 77.1154, 384.4261, 340.9497, 237.5822, 45.3296, 59.9739, 10.864, 155.204, 286.5694, 160.1559, 102.6788, 147.2064, 42.2136, 182.6402, 358.7898], [112.6609, 198.8356, 0.0, 470.3679, 42.2928, 30.996, 16.0934, 111.1135, 542.1721, 320.6775, 191.791, 49.2328, 94.4444, 8.456, 278.047, 237.505, 106.4694, 50.301, 85.7142, 184.3507, 83.0619, 265.7907, 580.0346], [149.6847, 208.5653, 848.182, 100.848, 36.8021, 34.2178, 100.1855, 488.7831, 204.516, 344.6012, 88.56, 126.293, 9.5312, 242.5465, 451.3925, 288.0051, 188.5356, 131.9036, 353.2954, 28.6713, 218.8904, 302.9454], [71.8508, 213.8044, 53.0556, 1242.5584, 111.408, 44.7401, 57.3136, 138.2228, 669.7195, 526.0905, 412.2502, 85.1488, 101.6112, 8.5792, 326.1055, 506.6939, 442.2678, 261.0063, 87.2111, 486.0096, 29.52, 311.2357, 525.7896]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

