created: 20230301221309000
creator: Drevarr
modified: 20230705163520960
modifier: drevarr
tags: ChartData
title: 202303012213_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Sassy", "Kahless The Drunk", "Sygaldry Verdandi", "Gavann", "Zadie Miststep", "Tegan Parker", "Mac Aaroni", "Etchery Howls", "Tribal S", "Arriasa", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.7636, 32.2827, 15.9965, 4.4722, 1.1374, 1.8819, 7.967, 104.701, 100.1376, 58.1741, 98.7188, 122.8489, 21.619, 23.598, 35.4389, 8.2598, 1.3014, 60.1478, 44.2925, 23.3482, 19.6258, 26.4518, 83.0045, 0.0, 70.9095, 134.7441, 0.0, 8.1818, 10.9315, 48.48, 11.1672, 6.0102, 72.3866, 95.8914, 58.3578, 21.5424, 22.4196, 62.1473, 59.6487, 24.6264, 2.8123, 19.5149, 45.5466, 33.9583], [12.3732, 64.3297, 31.9332, 14.4619, 18.674, 6.5407, 24.9401, 69.6296, 40.7117, 36.9984, 69.5638, 14.7147, 39.593, 30.1212, 38.743, 42.889, 16.9003, 81.8331, 6.9442, 30.7824, 64.3421, 35.328, 18.3082, 0.0, 14.63, 287.6329, 0.0, 13.4758, 40.441, 40.3829, 39.7848, 7.4844, 39.7296, 61.1262, 71.0213, 43.6339, 56.9058, 9.6673, 60.8321, 90.7377, 57.6374, 34.1123, 52.9166, 145.163], [35.3556, 34.7569, 40.2454, 10.8222, 11.1879, 12.2324, 23.586, 118.7295, 80.8032, 86.8282, 85.2492, 136.4317, 0.0, 39.1085, 35.735, 42.7822, 22.4439, 29.0904, 33.7058, 167.6506, 17.5536, 57.0586, 169.1402, 0.0, 38.9235, 36.7594, 32.4573, 30.8616, 11.1942, 39.6492, 52.4088, 31.8272, 50.519, 69.4365, 11.3603, 100.3267, 64.7029, 97.5845, 27.5299, 55.8941, 118.7287], [90.0145, 93.1983, 0.5227, 24.6506, 20.2189, 15.3041, 197.854, 62.3078, 132.0528, 157.6702, 121.6415, 18.7264, 38.07, 18.1288, 46.656, 20.8229, 35.4729, 23.7181, 0.0, 113.6203, 23.0294, 6.4397, 0.0, 67.7411, 170.5602, 54.1262, 64.1907, 16.5672, 51.8767, 36.7224, 22.3236, 29.0672, 86.0778, 13.2413, 59.9808, 0.0, 49.0941, 48.5547, 16.7306, 53.6155, 39.1072, 35.6413, 98.6146], [12.2724, 100.8539, 44.0726, 35.6611, 8.3754, 9.7767, 37.0637, 335.7445, 0.0, 212.977, 171.8396, 92.8913, 0.0, 2.484, 5.1024, 44.4787, 34.772, 6.2914, 9.0556, 0.0, 109.1534, 0.0, 62.3002, 29.7365, 589.7816, 0.0, 28.7565, 6.7402, 13.4495, 101.5608, 7.9704, 57.0627, 170.2764, 0.0, 120.4896, 25.2399, 24.3243, 67.3406, 0.0, 75.6, 18.392, 156.0082, 189.9559], [17.6904, 113.4607, 111.7961, 56.3182, 31.2682, 26.8515, 86.5975, 234.2085, 51.6192, 74.7053, 172.5976, 107.606, 0.0, 27.918, 79.1424, 53.7069, 0.0, 139.2811, 24.4867, 137.7043, 0.0, 0.0, 381.0387, 71.049, 31.3502, 34.6188, 85.4304, 39.9168, 40.8547, 70.992, 67.6508, 98.3136, 86.5368, 31.586, 103.47, 219.6313, 59.1797, 48.9034, 53.2409, 335.7209], [110.633, 92.1817, 22.4189, 18.8395, 12.7373, 55.9892, 295.4552, 127.8624, 115.8758, 146.533, 117.4912, 0.0, 0.0, 0.0, 91.031, 9.6233, 129.3534, 29.0904, 199.3939, 48.8851, 125.5363, 0.0, 79.3782, 687.2897, 45.2837, 55.6179, 95.665, 35.8196, 29.2512, 25.1424, 53.7943, 138.069, 117.2934, 39.1565, 213.2718, 48.4704, 98.8475, 200.1692, 107.1403, 21.2379, 84.3718, 196.6774], [94.878, 308.8651, 64.1654, 31.5762, 112.2717, 55.6537, 40.4332, 629.2322, 520.2778, 113.3174, 581.5256, 270.5241, 16.5026, 77.328, 53.1583, 45.8957, 209.6769, 240.2136, 24.9725, 99.4032, 165.1232, 55.477, 359.1073, 14.8387, 39.7056, 51.7406, 280.4499, 101.6664, 16.3458], [74.2896, 91.8407, 27.6276, 0.0, 36.1486, 39.0609, 348.1219, 201.5322, 141.7248, 282.6835, 152.4807, 106.625, 95.0866, 4.4604, 41.6524, 185.8291, 63.2385, 10.4397, 0.0, 357.4454, 71.4067, 68.328, 0.0, 29.6446, 503.0026, 0.0, 44.0371, 32.8229, 73.7322, 126.2184, 4.9086, 0.0, 380.7468, 223.7049, 133.415, 704.2896, 60.4989, 84.7951, 72.5987, 296.0496, 63.6557, 29.1262, 201.5429], [41.8068, 43.2399, 17.4616, 6.721, 19.0255, 58.7918, 1276.1713, 0.0, 394.8989, 210.2659, 602.2463, 189.1199, 91.2168, 266.5372, 264.0384, 237.7768, 179.8186, 231.7144, 20.7152, 500.1005, 320.7782, 63.049, 68.5696, 0.0, 993.2251, 8.9064, 384.9037, 173.7432, 187.4698, 268.3032, 34.7976, 16.7973, 421.0452, 117.1008], [109.6956, 415.3744, 236.9575, 214.1603, 109.5006, 118.0548, 155.97, 788.8499, 245.401, 276.3466, 478.0254, 506.4875, 0.0, 44.5824, 93.0124, 108.4838, 109.6134, 117.8414, 240.2069, 170.2518, 208.4702, 198.8746, 226.3622, 0.0, 0.0, 1905.5091, 30.0132, 289.7005, 96.911, 163.1784, 137.5704, 15.714, 124.1181, 435.9744, 100.4891, 199.1827, 47.8023, 132.6253, 254.2005, 354.9269, 236.4768], [154.3752, 618.8496, 407.9556, 277.8741, 195.1365, 142.3359, 292.1642, 1091.1482, 361.4803, 630.8227, 726.426, 694.3829, 94.6519, 174.042, 219.2561, 332.3981, 177.0678, 357.4062, 116.1035, 83.8675, 673.8336, 230.2502, 358.4506, 26.2733, 106.5649, 2411.5095, 111.8341, 339.543, 201.6384, 262.4715, 326.0928, 241.2828, 137.4863, 431.6418, 193.7074, 343.6435, 237.9048, 408.7908, 247.1373, 365.853, 316.9152, 176.9117, 376.4301, 818.2601]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

