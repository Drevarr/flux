created: 20230605220452000
creator: Drevarr
modified: 20230705163533745
modifier: drevarr
tags: ChartData
title: 202306052204_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Skye Nightroad", "No Reserv\u00e9", "Smol Gluvs", "Cedryn X", "Mildly Ecstatic", "Be\u00eb", "Lord Erin The Wise", "Be\u00eb", "Kary\u00edna", "Duke Silvver", "Tootsie Pop Rocks", "Jeckyll Mbs", "Sister Elonith", "Cyclotechnist Farra", "My Birthday Girl", "Mistwalker Cael", "Xanvias Einzbern"];
const professions = ["Scrapper", "Vindicator", "Scourge", "Berserker", "Scourge", "Reaper", "Weaver", "Scourge", "Vindicator", "Vindicator", "Scrapper", "Berserker", "Berserker", "Scrapper", "Scrapper", "Vindicator", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[199.5455, 111.165, 210.7606, 0.0, 0.0, 240.9631, 23.4787, 334.0169, 93.6222], [0.0, 0.0, 13.6117, 426.9437, 15.907, 82.1458, 412.7323, 10.109, 43.7458, 61.9778], [32.6944, 45.4436, 332.5577, 74.5313, 0.0, 184.7297, 0.0, 11.8182, 117.5049, 105.8169, 121.093, 0.0, 133.5785, 18.0984, 36.2203, 33.1111], [17.0215, 97.7308, 86.7764, 221.8, 0.0, 0.0, 60.5152, 64.3301, 78.8028, 0.0, 0.0, 288.7662, 20.4761, 1.0169, 26.8222], [216.5278, 46.4382, 296.1923, 85.1664, 84.9333, 74.4865, 0.0, 0.0, 34.6893, 80.9155, 19.6744, 4.6667, 197.6462, 10.7793, 47.1525, 110.6667], [0.0, 210.2973, 23.64, 416.8485, 102.9417, 126.169, 0.0, 181.4375, 414.7538, 27.4468, 332.8136, 226.5556], [68.5556, 77.6069, 59.3846, 251.6208, 68.3, 0.0, 171.72, 367.9394, 160.1165, 355.6761, 19.6744, 165.2083, 111.2277, 0.0, 100.6949, 18.5556], [0.0, 173.8958, 1109.6154, 287.9034], [68.5833, 120.7057, 429.0192, 238.2254, 87.6667, 0.0, 0.0, 106.303, 3.8641, 298.0563, 207.2093, 0.0, 228.0523, 30.5612, 152.2373, 0.0], [0.0, 146.1579, 217.6538, 191.1127, 65.9, 246.8378, 0.0, 233.9091, 82.1456, 448.8592, 213.0465, 95.0417, 213.5108, 122.6702, 206.7288, 290.4667], [0.0, 70.3362, 1046.3269, 233.3238, 0.0, 441.3784, 0.0, 227.1818, 97.8641, 410.4366, 0.0, 428.4092, 0.0, 299.6271, 165.1111], [71.7222, 123.6488, 0.0, 319.2683, 137.0333, 0.0, 0.0, 0.0, 114.6796, 333.7465, 120.3958, 374.6615, 61.4894, 87.1695, 0.0], [3.8722, 621.75, 320.0966, 84.5, 170.4595, 0.0, 101.4242, 159.6019, 794.9155, 0.0, 0.0, 519.5754, 55.6356, 144.1017, 128.2], [223.8743, 1426.8846, 289.9195, 0.0, 327.6486, 0.0, 0.0, 404.0, 588.2817, 275.1163, 0.0, 635.6338, 46.1622, 127.2881, 393.5333], [876.1667, 172.2342, 1503.8462, 629.1199, 0.0, 113.8378, 159.08, 0.0, 484.0874, 501.4789, 0.0, 53.8542, 443.4, 58.7553, 367.6949, 56.2667], [0.0, 249.5102, 953.7115, 402.4902, 365.9333, 107.973, 383.04, 134.5758, 313.3981, 370.2958, 839.5581, 210.5, 815.3477, 77.484, 67.2542, 612.8444], [145.5833, 335.1772, 939.8269, 794.1413, 0.0, 141.2162, 120.28, 224.7273, 605.2913, 394.3099, 386.093, 163.3125, 786.4462, 75.9388, 254.8983, 139.2222]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

