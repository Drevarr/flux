created: 20230415000841000
creator: Drevarr
modified: 20230705163525611
modifier: drevarr
tags: ChartData
title: 202304150008_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Stoic Rapidfire", "Mac Chiato", "Mmathuss", "Koralia Danai", "Air One Com", "Venomina The Siren", "Drevarr Moonwillow", "High Sorcer Baradun", "Johosh The Great", "Aronorf Xideliesi", "Solus Sanctus", "Lucas Ryn", "Smol Daddy Tika", "Bella Sassy", "Blancooo Padreee", "Grasszanine", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Chronomancer", "Druid", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.4672, 1.9539, 3.1982, 5.04, 13.6971, 6.345, 10.5197, 8.2593, 8.19, 5.6079, 0.0, 19.4083, 0.0, 0.0, 15.5227, 2.2669, 29.4354, 39.8776, 38.133, 5.4696, 1.2121, 0.0], [3.6288, 12.2494, 2.8737, 4.68, 14.8185, 5.265, 15.6202, 10.2258, 9.828, 3.3801, 0.0, 18.4649, 7.5514, 6.0762, 4.6552, 41.1005, 24.9025, 32.9024, 4.0764, 3.7762, 11.9011], [2.8944, 0.0, 0.6952, 23.076, 4.5657, 32.67, 48.4546, 32.5128, 0.0, 9.4489, 10.58, 28.4386, 8.7575, 10.5858, 0.0, 3.9247, 9.5908, 9.7863, 0.0, 38.4149, 0.0], [7.9056, 4.2084, 2.1321, 1.368, 9.9324, 13.4325, 33.5782, 29.4975, 5.6628, 14.2117, 2.369, 19.8127, 7.866, 1.8039, 8.3794, 16.571, 43.7476, 30.2027, 8.3592, 12.4942, 9.1846], [6.1344, 19.9148, 2.642, 10.152, 5.4468, 19.44, 36.2347, 23.9913, 3.042, 13.1362, 5.658, 24.1256, 6.5026, 1.3292, 16.6778, 29.8715, 48.7954, 25.8157, 4.9536, 1.0256, 14.553], [16.1136, 16.7584, 6.1182, 4.788, 18.7434, 25.785, 31.5592, 29.1042, 8.2368, 8.7575, 1.426, 24.6647, 8.8099, 0.5696, 5.4648, 15.8079, 57.8814, 35.9395, 4.0764, 3.8695, 11.4484], [4.3632, 10.2204, 0.6952, 0.0, 36.045, 55.2825, 49.6234, 15.4698, 45.2088, 3.841, 0.0, 18.0605, 8.2598, 0.0, 58.5437, 57.8814, 23.6222, 0.7224, 1.4918, 14.2296], [13.5216, 23.071, 10.7068, 8.928, 34.3629, 17.685, 27.7339, 40.7721, 13.4316, 16.1322, 13.225, 45.6904, 0.2829, 19.5077, 10.5383, 2.7931, 16.0259, 41.5602, 45.2196, 9.804, 11.3753, 14.359], [30.4992, 28.8576, 0.0, 27.36, 21.7071, 3.7125, 63.6497, 20.7138, 9.1728, 18.7441, 0.0, 60.3814, 26.0627, 12.4846, 4.4123, 12.7553, 30.1185, 10.4613, 7.1208, 26.7599, 23.8022], [10.7136, 41.3325, 10.9849, 14.94, 23.4693, 27.8775, 25.2899, 32.775, 7.6284, 5.8383, 7.935, 50.4077, 18.826, 2.7533, 10.2819, 15.0448, 58.5545, 57.0307, 4.386, 7.366, 23.6729], [13.6512, 25.6262, 6.5353, 15.264, 23.6295, 39.2175, 28.2652, 35.0037, 7.3008, 5.8383, 14.559, 57.5511, 14.1064, 4.7945, 9.9176, 17.8793, 51.3193, 51.2939, 16.9248, 15.2914, 20.6329], [13.7376, 18.3366, 10.2897, 7.308, 28.4355, 44.2125, 41.1226, 55.062, 20.4984, 15.2104, 9.499, 39.0862, 21.2906, 12.4371, 15.099, 23.9844, 68.9866, 52.8125, 4.2828, 15.6643, 22.444], [19.2672, 30.5109, 15.0638, 12.348, 35.5644, 27.6075, 36.9785, 58.3395, 19.3752, 12.7521, 15.134, 35.3124, 4.9335, 11.1173, 5.7439, 15.7467, 34.5593, 66.7992, 32.7336, 17.2344, 19.6736, 19.404], [27.6552, 11.178, 80.868, 40.4837, 45.144, 32.7888, 38.266, 120.9789, 129.2472, 32.8176, 3.4499, 34.9919], [14.04, 24.4238, 11.8656, 8.532, 25.3917, 47.0475, 53.4488, 52.8333, 5.6628, 11.4462, 12.19, 60.5162, 29.314, 4.035, 16.3944, 59.4159, 70.1644, 67.9982, 9.804, 9.9301, 37.7084], [61.9056, 78.6821, 33.9746, 44.64, 46.3779, 88.83, 97.3342, 132.6732, 38.376, 57.5382, 14.766, 112.8109, 55.5864, 35.9348, 40.1966, 39.4652, 141.5067, 130.7657, 43.3956, 25.2214], [54.5616, 49.5239, 29.9421, 30.456, 80.6607, 79.38, 114.5483, 108.2886, 46.7064, 44.3251, 24.771, 131.5453, 52.7022, 68.7366, 16.3539, 71.5171, 161.8661, 129.7534, 60.1656, 33.2401, 50.6444], [62.208, 81.3874, 40.4636, 31.248, 98.6832, 73.9125, 119.4362, 148.9296, 48.1572, 49.7025, 9.407, 141.6538, 63.7146, 70.1607, 37.4035, 108.5839, 195.5181, 196.5705, 44.6856, 25.0349, 71.8595], [67.9104, 120.8412, 37.3117, 45.396, 139.2939, 117.585, 96.3778, 180.6558, 50.4036, 82.351, 25.116, 189.7702, 69.8501, 58.8628, 36.513, 81.983, 256.4282, 282.6227, 79.4124, 62.1911, 106.4633]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

