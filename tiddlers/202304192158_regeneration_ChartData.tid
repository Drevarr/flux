created: 20230419215809000
creator: Drevarr
modified: 20230705163526018
modifier: drevarr
tags: ChartData
title: 202304192158_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Solus Sanctus", "Johosh The Great", "Miphest\u00f6", "Tegan Parker", "Mac Chiato", "Etchery Howls", "Skye Nightroad", "Zadie Miststep", "Tootsie Pop Rocks", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Tempest", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 20.742, 180.6869, 56.015, 297.2362, 183.1277, 116.817, 55.078, 0.0, 28.3982, 42.3017, 40.138, 168.9216, 178.0351, 53.8272, 84.5706, 173.7736, 67.2417, 97.8394, 27.0287, 25.3198, 51.2563], [0.0, 22.8514, 292.2005, 87.7699, 306.359, 139.2683, 153.9683, 154.889, 0.0, 0.0, 80.4208, 17.5174, 175.1544, 116.114, 61.6224, 211.3154, 217.1092, 44.6194, 87.4973, 0.0, 39.0589, 80.9741], [3.4188, 65.7897, 303.3518, 90.8957, 578.7725, 178.0444, 66.3068, 82.0201, 0.0, 140.5937, 61.8699, 239.136, 112.5838, 86.5536, 65.9251, 157.927, 96.287, 65.9376, 6.2017, 38.9799, 66.9672], [0.0, 312.0638, 137.711, 231.8909, 269.8038, 134.4663, 94.127, 20.9568, 0.0, 106.7049, 177.8256, 118.7855, 170.4192, 108.9133, 517.2244, 46.3814, 162.792, 15.939, 83.3818, 89.7326], [67.7712, 313.2835, 28.5936, 470.9952, 73.3162, 157.1861, 101.6868, 0.0, 0.0, 116.0683, 0.0, 331.992, 227.8391, 186.4128, 179.8697, 389.9126, 202.1799, 194.9126, 38.1903, 37.5221], [40.9727, 532.4774, 138.1373, 667.8797, 110.0721, 208.2814, 148.2387, 0.0, 30.0519, 144.5387, 98.1087, 378.2928, 434.4971, 142.1952, 110.689, 196.6272, 45.0741, 51.3274, 0.0, 22.1878, 10.9397], [0.0, 0.0, 876.253, 155.7552, 1057.8298, 46.5966, 82.981, 37.4007, 0.0, 217.4048, 94.2995, 2.2649, 327.2856, 93.5018, 142.0608, 108.4693, 223.4694, 22.736, 127.0051, 56.7911, 62.1678, 225.7459], [0.0, 0.0, 0.0, 3.3946, 0.0, 0.0, 61.5009, 3.3984, 452.0103, 114.9667, 594.1512, 404.6338, 342.1152, 520.0017, 414.2754, 447.0466, 243.9418, 86.3218, 177.4494, 200.7994], [0.0, 522.3715, 210.7046, 839.0928, 142.0054, 274.1006, 265.5565, 0.0, 18.8632, 237.2222, 84.5478, 300.0648, 187.7669, 86.1504, 299.8815, 328.8978, 223.8359, 55.3219, 14.5576, 96.6207, 103.0579], [16.3795, 816.6629, 86.3491, 337.9709, 291.8964, 410.7121, 360.934, 0.0, 0.0, 116.0683, 0.0, 289.5072, 182.6147, 248.8416, 725.6939, 350.9968, 256.2347, 150.4253, 40.1083, 175.1596, 9.1675], [194.189, 833.2157, 469.7875, 1571.0448, 695.8201, 767.1112, 588.9761, 0.0, 69.6517, 905.1138, 83.057, 593.0064, 816.7096, 169.1424, 564.9136, 604.0034, 293.1807, 145.5552, 71.059, 12.2651, 178.2384], [93.3747, 63.6324, 2627.1907, 552.4426, 2718.8304, 1034.3131, 1323.3082, 726.2447, 151.3421, 52.3648, 790.0912, 172.5074, 1505.412, 1394.7988, 632.352, 1161.643, 1267.189, 688.844, 663.6989, 190.5145, 332.0794, 368.9842]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

