created: 20230327224031000
creator: Drevarr
modified: 20230705163523086
modifier: drevarr
tags: ChartData
title: 202303272240_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Einar Xxl", "Zefirokai", "Newtype Khan", "F\u00f9gly", "Tinkling Star", "X E R E C A R D", "Black Raspberry Pie", "Primal Clone", "Eibh\u00ebar", "Sassy Daddy Demon", "Fribble Bibble", "\u00c1rkantor", "Venomina The Siren", "Mac Chiato", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Firebrand", "Tempest", "Spellbreaker", "Tempest", "Mechanist", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Vindicator", "Scrapper", "Vindicator", "Tempest", "Tempest", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0034, 0.0, 0.0, 0.0, 0.3206, 0.0, 0.2025, 0.2821, 0.0, 0.168, 0.0, 0.1484], [0.0429, 0.1756, 0.2, 0.2393, 0.2564, 0.392], [0.4143, 0.0763, 0.0, 0.1166, 0.0855, 0.0, 0.16, 0.0152, 0.6641], [0.0, 0.0236, 0.0, 0.0127, 0.0571, 0.1603, 0.0, 0.184, 0.094, 0.0, 0.424, 0.0, 0.3594], [1.3429, 0.7481], [0.5286, 0.1221, 0.0444, 0.4172, 0.188, 0.0, 0.432, 0.0, 0.3906], [0.3865, 0.1795, 0.0, 0.704, 0.0, 0.7109], [0.0, 0.1178, 0.0, 0.0295, 0.2571, 0.2824, 0.0, 0.4724, 0.3248, 0.0, 0.0, 0.36, 0.2273, 0.2266], [0.0, 0.0707, 0.0, 0.1139, 0.3571, 0.2595, 0.2667, 0.7791, 0.453, 0.0, 0.0, 0.632, 0.0, 0.5859], [0.0, 0.165, 0.0, 0.1013, 0.4143, 0.3053, 0.0, 0.7239, 0.3504, 0.0, 0.0, 0.656, 0.0, 0.5625], [0.1987, 0.04, 0.1392, 0.6, 0.5573, 0.0444, 0.4663, 0.2991, 0.0, 0.608, 0.0, 0.625], [0.1145, 0.0, 0.1435, 0.8143, 0.5649, 0.0, 0.4601, 0.4786, 0.88, 0.3485, 0.7891], [0.0208, 0.1414, 0.08, 0.2068, 0.5, 0.3359, 0.1111, 0.6442, 0.4444, 0.0, 0.992, 0.0606, 0.7812], [0.1561, 1.1286, 0.8473, 0.0444, 1.0982, 0.6581, 0.2917, 1.304, 1.6094], [0.0208, 0.2054, 0.62, 0.1603, 1.2143, 0.8397, 0.0889, 1.1963, 0.8632, 0.0, 1.32, 0.0303, 1.5312], [0.1458, 0.7778, 0.26, 0.4557, 1.3714, 0.8779, 0.0667, 1.0552, 0.8803, 0.0, 1.064, 1.8516], [0.0, 0.7879, 0.22, 0.5359, 1.2571, 1.0229, 0.4889, 1.4294, 1.0855, 2.056, 0.0606, 1.6016]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

