created: 20230415000841000
creator: Drevarr
modified: 20230705163525576
modifier: drevarr
tags: ChartData
title: 202304150008_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Johosh The Great", "Zadie Miststep", "Stoic Rapidfire", "Sassy Daddy Demon", "Mac Chiato", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Druid", "Vindicator", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[514.7188, 145.8084, 773.7476, 199.75, 523.9663, 366.2667, 655.987, 876.0561, 790.9231, 826.3293, 184.12, 522.4471, 608.3509, 284.198, 604.3523, 178.654, 227.3017, 546.9248, 394.6833, 629.8378, 403.7013], [889.125, 251.2934, 1105.4951, 314.575, 742.5112, 333.3, 969.2727, 838.6982, 1113.2308, 846.6826, 39.24, 771.942, 1057.3246, 347.495, 485.8977, 236.3544, 324.8101, 777.5209, 560.4083, 230.1982, 673.1299], [2275.125, 2296.5329, 751.42, 2371.587, 7.9, 1869.2807, 1182.7525, 1778.0227, 756.1224, 978.9246, 1566.9025, 2239.3417, 1070.3153, 1223.3896], [1488.0104, 468.8204, 978.8932, 611.5125, 1492.7079, 1167.9533, 1996.1515, 800.6316, 1778.0577, 1596.7246, 151.74, 1479.0444, 1106.9649, 776.4851, 1612.5909, 407.097, 589.0223, 1168.3287, 1552.7583, 1006.2162, 330.2468], [2684.0, 948.9162, 4565.0485, 1564.15, 2888.2472, 689.66, 2186.6234, 2923.7544, 3955.625, 2906.3892, 0.0, 24.9386, 0.0, 26.5965, 29.8317, 9.0341, 10.443, 15.3436, 76.0557, 16.1167, 9.4054, 24.513], [1783.875, 424.3234, 2465.2913, 352.675, 1801.0506, 510.36, 924.4719, 1205.8035, 960.8269, 1500.4012, 0.0, 1717.6621, 1065.2632, 976.8614, 197.2273, 106.9367, 486.648, 1932.2117, 2227.5083, 1497.6306, 1509.8571], [2357.0729, 783.0479, 4826.2233, 646.85, 2712.7753, 1487.6467, 2980.4199, 3115.9614, 2615.7404, 3029.9341, 656.48, 2944.5631, 0.0, 2528.9649, 1098.9901, 498.0455, 768.2869, 1061.352, 2703.0056, 4570.125, 2340.036, 2322.5455]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

