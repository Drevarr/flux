created: 20230524221126000
creator: Drevarr
modified: 20230705163531400
modifier: drevarr
tags: ChartData
title: 202305242211_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Bubble Teabringer", "Queen Josie", "Zefirokai", "Soxx", "Morton Saltbringer", "Inedible Plant", "Pie Snarglebringer", "Plum Crazybringer", "Brioche Bunbringer", "Arriasa", "Bork Borkbringer", "Xkaet", "Mixon Cue Bringer", "Spicy Gyrosbringer", "Band Aidbringer", "Johosh Of The North"];
const professions = ["Firebrand", "Willbender", "Tempest", "Firebrand", "Chronomancer", "Vindicator", "Chronomancer", "Scrapper", "Chronomancer", "Druid", "Tempest", "Tempest", "Scrapper", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[32.0342, 0.0, 0.0, 17.0667, 29.9727, 10.0036, 4.0123, 0.0, 0.0, 6.9865, 10.0583, 21.0018], [42.0342, 0.0, 0.0, 17.0667, 12.9876, 1.0, 18.5679, 0.0, 11.014, 5.0135, 1.9917, 27.989], [0.0, 0.0, 36.8153, 3.9917, 84.3388], [74.6581, 1.9565, 0.0, 19.0917, 32.1464, 0.0, 12.5185, 0.0, 21.1075, 8.2613, 5.0167, 31.0128], [45.4615, 31.4, 38.005, 12.0, 1.0, 0.0, 28.1402, 0.0, 2.9917, 56.9762], [22.0057, 0.0, 0.0, 14.05, 28.0025, 11.942, 8.0247, 0.0, 50.4299, 21.0135, 12.2917, 74.0165], [91.5299, 0.0, 0.0, 57.5, 30.9777, 27.0688, 0.0, 0.0, 32.2617, 1.9955, 9.5417, 46.967], [68.151, 0.0, 0.0, 17.1917, 27.0025, 26.0399, 2.0, 0.0, 48.4019, 12.9775, 18.0583, 79.1575], [88.2194, 11.6087, 0.0, 11.1667, 36.0149, 49.2428, 11.321, 0.0, 47.4439, 15.009, 0.9917, 50.9872], [183.4074, 0.0, 2.0, 106.2667, 163.8734], [114.4188, 0.9565, 0.0, 66.5333, 71.206, 53.5833, 1.0, 0.0, 62.729, 42.0405, 1.9917, 80.0989], [0.9565, 0.0, 74.725, 105.4417, 66.808, 4.0123, 0.0, 101.2617, 55.464, 28.6, 99.0403], [88.3846, 0.0, 0.0, 22.6333, 103.3573, 32.0543, 7.0247, 0.0, 58.7757, 28.7477, 8.975, 113.3168], [189.3419, 3.7391, 0.0, 89.5083, 150.727, 110.6558, 26.1852, 12.3833, 107.2991, 59.0586, 54.3833, 184.685], [237.8433, 0.9565, 6.0588, 109.0417, 175.1067, 109.5761, 28.1605, 8.9333, 110.8738, 96.6577, 74.6167, 206.3516], [244.5499, 0.0, 5.0294, 133.225, 204.598, 94.7536, 22.5926, 1.9833, 118.6262, 100.6847, 59.25, 200.4066]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

