created: 20230410221909000
creator: Drevarr
modified: 20230705163525256
modifier: drevarr
tags: ChartData
title: 202304102219_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Sub Train", "Ark Darkness", "Sygaldry Verdandi", "Zaylen Harker", "Gavann", "Solus Sanctus", "Bella Sassy", "Johosh The Great", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 23.5699, 205.6285, 242.5573, 999.2083], [29.4314, 45.9043, 99.095, 80.9114, 0.0, 147.3254, 60.172, 86.4007, 78.7753, 136.5424, 50.4725, 75.4223, 85.9607, 134.0149, 172.7005, 104.2306, 133.6922], [60.264, 170.5935, 286.2972, 1726.656, 178.1911, 92.8973, 70.9632, 244.8324, 0.0, 183.456, 169.834, 166.8038, 227.5462, 98.614, 85.0028, 146.0528, 42.8765, 239.9679, 330.0787, 103.7482], [61.0675, 480.3838, 261.6438, 2696.5862, 201.3574, 195.5318, 76.1165, 210.6177, 71.5596, 191.8174, 216.3056, 122.3677, 56.4039, 121.1133, 120.345, 145.7291, 266.0886, 112.9138, 358.8883], [216.2995, 274.7146, 765.5148, 1473.9004, 3362.4749, 214.3247, 311.351, 305.9443, 219.114, 68.3514, 184.0675, 81.7908, 145.2125, 193.2168, 144.4603, 148.2201, 69.2723, 82.2989, 187.4722, 302.6544, 143.6266, 358.5512], [169.0963, 641.2753, 943.7204, 3594.4474, 250.604, 405.3974, 315.575, 322.4952, 29.0594, 270.2918, 153.7424, 243.9965, 232.4981, 285.2662, 98.1445, 184.9525, 92.9726, 333.551, 226.8739, 195.0504, 531.5901], [105.1718, 928.5623, 1313.786, 4324.8979, 230.7159, 217.4861, 273.7152, 184.4957, 219.128, 163.4248, 288.2729, 284.2657, 339.3074, 80.262, 158.6547, 91.4923, 292.7696, 291.4353, 202.2542, 320.4085], [97.6014, 306.6768, 877.0878, 1814.8061, 4158.9888, 160.1971, 317.7014, 190.7136, 207.5407, 87.2115, 321.9143, 114.5032, 246.3955, 164.5077, 147.0073, 74.6393, 148.3544, 143.5622, 232.9306, 311.8478, 148.9651, 333.0264], [377.0567, 381.3149, 768.8835, 1680.1404, 4911.2102, 133.9711, 220.5101, 141.9686, 266.9638, 119.548, 356.9748, 105.5068, 219.3005, 206.6144, 370.536, 63.5481, 197.0261, 105.5161, 294.1683, 257.8821, 191.1912, 334.8083], [321.7157, 276.0538, 847.4428, 1911.0338, 4931.4797, 236.9082, 434.3069, 246.7661, 299.5517, 40.5962, 214.1339, 207.3876, 200.0023, 185.2269, 253.4839, 132.6748, 218.9849, 206.2278, 195.034, 351.5819, 54.5112, 355.18]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

