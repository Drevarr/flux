created: 20230408223537000
creator: Drevarr
modified: 20230705163524873
modifier: drevarr
tags: ChartData
title: 202304082235_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Traidoruns Maximus", "Drevarr Moonwillow", "Kosair", "Sister Elon\u00edth", "Mmathuss", "Aronorf Xideliesi", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[297.0702, 1.6464, 58.8605, 206.9386, 9.3568, 13.2317, 34.2079, 0.0, 30.4668, 36.1218, 9.922], [31.648, 1.4784, 3.2886, 0.0, 0.6935, 48.6881, 144.5419, 0.0, 63.3494, 14.6676, 21.9208, 19.7964, 6.538, 5.368, 58.1249, 5.578, 33.8957, 9.1661, 3.5017, 17.347, 34.4064, 8.5457, 14.4837, 32.5584, 46.8692, 24.3356, 0.0, 0.0, 20.1822, 5.6511, 37.9631, 39.4878], [64.4717, 20.4296, 68.7257, 69.798, 62.4512, 41.9192, 59.06, 87.3392, 303.3728, 10.3713, 0.0, 67.4541, 170.5637, 155.2762], [31.1503, 96.3862, 84.8064, 49.4614, 51.2555, 118.9415, 203.3984, 18.7572, 46.299, 167.3406, 181.5744, 229.1566], [190.0858, 34.3266, 62.3007, 0.0, 23.3496, 275.0815, 308.4121, 13.4232, 10.5521, 30.6148, 0.0, 60.1614, 27.6276, 13.42, 78.2541, 42.2389, 44.7283, 12.4832, 17.4174, 117.8019, 62.1824, 39.9446, 35.6227, 17.5195, 38.046, 24.6401, 0.0, 6.7059, 23.814, 98.7581, 88.0833], [59.8345, 45.3684, 175.2093, 0.0, 10.3397, 187.7618, 445.6009, 0.0, 0.0492, 1.4628, 18.6498, 69.5152, 0.0, 51.3372, 42.9665, 53.1149, 15.5509, 11.6928, 86.8927, 100.352, 42.5342, 36.9873, 55.6594, 154.2737, 0.0, 65.8266, 0.0, 0.0, 94.4811, 135.0325, 74.3899], [141.3281, 23.2386, 676.5381, 22.0662, 302.9208, 502.7454, 12.5941, 75.8789, 49.2692, 0.0, 17.4096, 0.0, 26.62, 72.2465, 57.7198, 49.4894, 16.7614, 37.2708, 86.2304, 91.2576, 39.9122, 37.2985, 45.5818, 29.3555, 22.2407, 112.6639, 15.213, 116.1607, 54.7911, 117.9423, 287.8151], [355.2488, 141.2796, 596.5155, 0.0, 5.1853, 354.9202, 435.0964, 19.8584, 15.6526, 126.0524, 0.0, 34.8426, 37.1342, 29.568, 192.0852, 61.1959, 48.4411, 17.0108, 56.6979, 84.0541, 93.6768, 41.7573, 21.4263, 85.0653, 129.2967, 37.2952, 51.1812, 94.1647, 136.8698], [362.1718, 255.8556, 952.7805, 50.8081, 534.2198, 681.7421, 133.699, 70.5566, 138.0621, 96.2056, 124.0434, 115.7099, 92.796, 254.3452, 47.0893, 103.9584, 11.5223, 14.4028, 71.6904, 78.5792, 17.5122, 49.4361, 85.4012, 111.8161, 53.7077, 109.9545, 31.0464, 49.2144, 75.9213, 257.8383, 217.374]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

