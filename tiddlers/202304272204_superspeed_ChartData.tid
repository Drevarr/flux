created: 20230427220456000
creator: Drevarr
modified: 20230705163527104
modifier: drevarr
tags: ChartData
title: 202304272204_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Abserns Sorcerer", "Sole Tempesta", "Chio Slayer", "Mistwalker Caelon", "Morv\u00fcs", "Skye Nightroad", "Solikai", "Bell Delinger", "Mac Aaroni", "Joint Lee", "Binkety Bonk", "Xkaet", "Zadie Miststep", "Puny Tinker", "Clem Storage Xviii", "Drevarr Moonwillow"];
const professions = ["Weaver", "Tempest", "Tempest", "Herald", "Berserker", "Scrapper", "Tempest", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Tempest", "Tempest", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.149, 0.323, 0.491, 0.834, 0, 0.497, 0.82], [0.698, 0.249, 0.769, 1.743, 0.706, 0.262, 0.249, 0.991], [0.617, 0.698, 0.79, 0.392, 0.598, 0.49], [0.232, 0.312, 1.04, 1.45, 1.466, 0.874, 1.036], [0.721, 1.616, 0.24, 0.624, 0.541, 0.439, 0.424, 0, 0], [0.978, 0.715, 1.971, 1.942, 0.397, 0.787, 0.746], [0.62, 0.249, 0.825, 0.869, 0.706, 0.786, 0.38, 0.733, 0.618, 0.866, 0.79, 0.149, 0.512], [0, 1.133, 1.292, 1.713, 1.899, 0.504, 1.208, 1.103, 0, 0.382], [0.989, 0.248, 0.832, 0.872, 0.742, 0.262, 0.558, 0.695, 0.618, 0.83, 0.789, 0.268, 0.706, 1.161, 0.263, 0.254, 0.223, 1.089], [1.622, 1.245, 2.643, 1.083, 1.925], [0.425, 1.514, 1.183, 0.271, 1.441, 0.736, 1.158, 0.817, 0.391, 2.203], [0.97, 1.61, 1.746, 0.701, 1.049, 0.797, 0.777, 0.696, 0.854, 0.787, 0.601, 0.795, 0.333, 0.46, 0.494, 0.248, 1.094], [0.908, 0.249, 0.832, 1.825, 1.201, 0.262, 0.808, 0.946, 0.928, 0.831, 0.997, 0.555, 0.797, 0.98, 0.237, 0.381, 0.375], [0.929, 1.542, 2.662, 0.789, 1.357, 1.705, 0.788, 1.438, 0.783, 2.734], [0, 1.798, 1.391, 2.563, 1.894, 1.467, 1.815, 3.24, 1.286, 1.244, 0.247, 2.454], [2.161, 1.575, 2.808, 2.903, 1.967, 0.917, 1.63, 2.853, 1.466, 2.256, 1.189, 0.962, 1.947, 2.741, 0.684, 1.176, 0.778, 1.858]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

