created: 20230626013408000
creator: Drevarr
modified: 20230705163538948
modifier: drevarr
tags: ChartData
title: 202306260134_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Taery Shimui", "Smol Gluvs", "Taery Shimui", "Be\u00eb", "Mister Jekyll", "Morv\u00e4rth", "Be\u00eb", "Zayde Sunsabre", "Newtype Khan", "Arcanophage Farra", "Primal Clone"];
const professions = ["Reaper", "Scourge", "Scourge", "Scourge", "Reaper", "Reaper", "Reaper", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2455, 0.8, 0.6458, 0.6731, 0.0, 0.0, 0.0541, 0.6136, 0.4861, 0.1798], [0.8, 0.4706, 1.2075, 0.2381, 0.8571, 0.678], [0.6591, 0.0978, 0.6964, 0.0826, 0.4, 0.0, 0.2721, 0.0, 0.2381, 1.0952, 0.3898], [0.6857, 0.3603, 1.1132, 0.9365, 1.8095, 0.9831], [0.5625, 0.0074, 0.2921, 0.0, 0.2106, 0.3433, 0.0256, 0.3964, 0.2203, 0.6098, 0.2714, 0.2182, 0.08, 0.5, 0.3077, 0.0588], [0.0815, 0.2135, 0.0, 0.2334, 0.3731, 0.0256, 0.0, 0.0847, 0.0, 0.0714, 0.4205, 0.2909, 0.54, 0.1667, 0.2308, 0.0245, 0.0, 0.1081, 0.4091, 0.0278, 0.1573, 0.3068, 0.0652, 0.3929, 0.1653], [0.6406, 0.3111, 0.4607, 0.0, 0.3833, 0.2985, 0.2051, 0.5946, 0.6271, 0.1463, 0.1143, 0.5795, 0.4818, 0.0, 0.5208, 0.5192, 0.152, 0.0, 0.0, 0.3636, 0.2083, 0.191, 0.1932, 0.2609, 0.1786, 0.314], [0.9688, 0.3407, 0.3034, 0.0122, 0.3397, 0.2985, 0.0256, 0.6396, 0.9153, 0.7073, 0.7143, 0.3182, 0.3, 0.34, 0.7708, 1.3654, 0.0637, 0.0, 0.1622, 0.25, 0.2222, 0.0, 0.2727, 0.1848, 0.6607, 0.1074, 0.1714, 0.0, 0.3088, 0.7736, 0.3492, 0.4286, 0.0], [1.3281, 0.3185, 0.5618, 0.0488, 0.3966, 0.8507, 0.2308, 0.8739, 0.3729, 1.0244, 1.0, 0.2727, 0.6, 0.94, 0.625, 0.4615, 0.1078, 0.1111, 0.2432, 0.9318, 0.4444, 0.0899, 0.5114, 0.2826, 0.4643, 0.2479, 0.2571, 0.0, 0.1765, 0.5849, 0.1746, 0.2619, 0.8136], [1.1094, 0.5111, 0.4494, 0.0, 0.3776, 0.6866, 0.0769, 0.8198, 0.9153, 0.3902, 0.9714, 0.6932, 0.0182, 0.66, 0.8229, 0.7692, 0.1078, 0.0741, 0.2973, 1.0, 0.1667, 0.2135, 1.3409, 0.5543, 0.5714, 0.281, 0.1714, 0.1397, 0.6226, 0.3175, 0.5952, 0.0], [1.2344, 0.4222, 0.5056, 0.0122, 0.4668, 0.8507, 0.1026, 1.3514, 0.5763, 1.1463, 0.6857, 0.5227, 0.8364, 1.18, 1.4792, 1.2692, 0.1912, 0.8649, 0.6591, 0.1944, 0.1685, 0.7955, 0.4565, 0.1786, 0.405, 1.0571, 0.0, 0.5588, 1.2264, 1.0635, 1.619, 0.1186]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

