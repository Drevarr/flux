created: 20230916001624000
creator: Drevarr
tags: ChartData
title: 202309160016_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Brutal Araden", "Hey Yey Yeah Ah Ah", "Solus Luxes", "Akira Sparks", "Brutal Araden", "Arcanophage Farra", "Venomina The Fierce", "Eibh\u00ebar", "Primal Clone", "Revenant Brandorf", "Arriasa", "Legoh Brave", "Cat Wigglebooty", "Leafzely", "Kyrillien", "Pafema", "Kosa\u00efr", "Legendary Sakis", "Tegan Parker", "Kahlyanne", "Tribal S", "Zaedy Zae", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Firebrand", "Firebrand", "Elementalist", "Renegade", "Spellbreaker", "Spellbreaker", "Chronomancer", "Chronomancer", "Vindicator", "Druid", "Tempest", "Scrapper", "Scrapper", "Vindicator", "Druid", "Tempest", "Druid", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[54.6132, 36.1348, 0.991, 16.9807, 0.0, 27.9091, 2.0, 18.974, 0.0, 35.0682, 0.0], [1.991, 21.0, 0.0, 17.9318, 2.0, 0.0, 0.0, 18.026, 3.0, 0.0, 6.025, 0.0, 0.0, 8.9876, 27.0066, 0.0, 4.0013], [12.0374, 18.0822, 16.0219, 14.9898, 8.9857, 11.0851, 15.0377, 20.0709, 0.0, 11.971, 0.0, 8.9621, 0.0, 8.961, 0.9828, 0.9968, 0.0, 0.0, 0.0, 5.9917, 7.0, 0.0, 18.0094], [1.0, 0.0, 0.0, 0.0, 2.9959, 27.0109, 0.0, 31.0229], [16.1495, 10.0685, 17.0219, 11.0306, 1.9857, 16.0, 0.0, 0.0, 0.0, 0.0, 2.9959, 17.0197, 0.0, 29.027], [17.0514, 18.137, 16.0219, 6.9898, 0.9857, 20.0, 39.3962, 12.0213, 0.0, 5.9855, 0.0, 10.9848, 2.0, 7.961, 0.0, 1.9968, 3.0, 0.0, 5.9917, 17.0437, 0.0, 24.0189], [40.1729, 30.1644, 24.0292, 9.9796, 24.0143, 0.0, 38.1038, 9.0355, 0.0, 3.9952, 0.0, 21.9242, 0.0, 7.961, 0.0, 3.9968, 0.0, 0.0, 6.9876, 8.0044, 11.0, 17.0081], [10.014, 44.8219, 29.0803, 40.9898, 7.9857, 30.6383, 52.066, 9.3262, 3.982, 0.0, 0.0, 39.0758, 0.0, 12.039, 0.0, 10.0227, 0.0, 7.0435, 38.3375, 0.0, 26.9627, 14.0087, 0.0, 44.1282], [27.3178, 16.0822, 41.365, 52.1633, 28.3143, 2.0, 33.1226, 15.0213, 0.0, 0.0, 0.0, 16.9773, 4.0278, 0.987, 0.0, 12.9968, 0.0, 0.0, 16.075, 27.0249, 19.0197, 0.0, 60.1093], [39.4533, 60.1918, 22.0292, 25.0204, 26.2, 29.0638, 48.6604, 43.1489, 1.991, 34.9275, 3.0127, 29.8939, 0.0, 19.9481, 0.0, 14.9935, 1.0, 0.0, 13.0625, 0.0, 2.9959, 28.0175, 0.0, 43.0337], [135.5607, 44.4521, 105.0876, 70.551, 105.5429, 65.4468, 87.2547, 87.4113, 31.8919, 107.7343, 1.0, 53.8864, 7.0833, 46.0909, 0.0], [65.2837, 1.991, 76.8696, 0.0, 39.1136, 1.0, 51.2987, 0.0, 44.1461, 1.0, 1.0, 2.0, 3.9917, 70.2467, 76.1997], [0.0, 43.2411, 10.027, 75.343, 3.0127, 41.9091, 1.0, 36.7143, 39.1201, 0.0, 0.0, 32.8125, 3.9917, 63.0786, 0.0, 152.4278], [12.0374, 22.3973, 18.0219, 10.9796, 0.0, 24.234, 0.0, 40.5035, 9.973, 55.3382, 3.0253, 38.2424, 7.0833, 23.8961, 0.0, 50.1071, 0.0, 1.0, 13.0625, 1.96, 26.9627, 52.1266, 0.9855, 170.1997], [45.0841, 61.9589, 56.1606, 42.0306, 46.8143, 46.4681, 89.2925, 44.227, 11.964, 54.343, 0.0, 61.1591, 0.0, 25.8831, 0.0, 67.0877, 1.0, 7.5652, 12.05, 0.0, 1.0, 21.971, 89.393, 160.6802], [26.2464, 0.0, 24.1125, 0.0, 16.303, 66.1079, 201.7445, 238.8799], [57.3224, 84.1918, 76.8467, 78.7857, 100.0429, 113.3113, 87.0496, 2.991, 33.0483, 0.0, 53.9545, 0.0, 48.0, 0.0, 61.289, 2.0, 0.0, 25.4375, 34.9834, 106.7795, 174.5358], [67.5374, 73.0822, 106.562, 112.1429, 0.0, 0.0, 16.0377, 97.4823, 15.955, 110.1836, 0.0, 43.8788, 31.3611, 111.4545, 4.0, 6.2609, 20.15, 0.0, 36.9876, 131.8144, 199.9177], [97.8551, 134.1918, 84.4088, 91.4694, 81.6714, 14.0, 54.2453, 79.3546, 1.991, 100.058, 14.1139, 75.75, 6.0556, 0.9828, 69.513, 14.5797, 0.0, 1.0, 41.9917, 128.4192, 0.0, 217.9514], [167.8692, 91.274, 127.8686, 107.4694, 104.9571, 77.766, 103.3962, 120.6738, 57.1351, 147.5604, 13.0759, 92.2652, 19.2778, 84.8442, 6.1034, 158.7825, 11.1159, 1.0, 41.6875, 11.4242, 92.5228, 309.2456], [146.9159, 149.726, 137.8978, 168.3776, 169.0143, 77.6383, 204.9434, 176.3191, 20.0, 164.6812, 17.1013, 98.6742, 10.1944, 104.2078, 0.0, 95.6006, 15.1594, 26.5435, 33.425, 0.0, 2.0, 52.0788, 196.6507, 0.0, 295.8178], [148.5467, 148.4795, 118.3796, 93.9694, 110.0, 4.1064, 189.8962, 140.9078, 39.1532, 197.0821, 7.038, 88.75, 5.0556, 74.8442, 0.0, 165.8539, 30.1594, 27.0, 33.6625, 4.92, 6.0606, 64.083, 194.393, 0.0, 296.1754], [165.6168, 135.5068, 116.6277, 93.1327, 102.5, 74.7234, 165.8396, 125.1277, 32.3694, 168.0628, 18.1013, 86.5909, 32.4722, 119.5714, 2.9828, 152.5974, 12.029, 3.0217, 55.425, 7.0606, 88.5685, 227.2991, 0.9855, 295.5236]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

