created: 20230304223548000
creator: Drevarr
modified: 20230705163521152
modifier: drevarr
tags: ChartData
title: 202303042235_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Your Devoted Buffer", "High Sorcer Baradun", "Primal Clone", "Cat Wigglebooty", "Tootsie Pop Bringer", "Mac Aaroni", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Tempest", "Chronomancer", "Scrapper", "Scrapper", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1006, 0.1579, 0.0889, 0.0, 0.2692, 0.051, 0.1444, 0.0, 0.1613, 0.1188, 0.15, 0.0, 0.069, 0.1095, 0.0383, 0.0086, 0.0677, 0.16, 0.56, 0.4516], [0.0918, 0.0889, 0.0, 0.2111, 0.04, 0.129, 0.3207, 0.05, 0.1765, 0.4181, 0.3669, 0.0], [0.3728, 0.3459, 0.0222, 0.1905, 0.4388, 0.2889, 0.0667, 0.0778, 1.0, 0.0499, 0.1471, 0.1078, 0.4763, 0.0], [0.2633, 0.1353, 0.9333, 0.0, 0.0, 0.0102, 0.4556, 0.0, 0.04, 0.4355, 0.2779, 0.1, 0.1176, 0.1767, 0.1183, 0.0681, 0.0172, 0.171, 0.39, 0.54, 0.2742], [0.2544, 0.1805, 0.9111, 0.0, 0.0, 0.2245, 0.2222, 0.0222, 0.0645, 0.4679, 0.0, 0.2941, 0.2974, 0.2633, 0.1489, 0.0, 0.2355, 0.18, 0.6, 0.0], [0.0355, 0.015, 0.4889, 0.0, 0.0, 0.1429, 0.3556, 0.0, 0.0, 0.04, 0.5, 0.658, 0.0, 0.0, 0.1724, 0.3018, 0.0809, 0.0, 0.2323, 0.62, 1.12, 0.6613], [1.216, 0.4586, 1.7333, 0.2381, 1.4615, 0.7755, 1.2667, 0.0, 0.3111, 0.0, 1.5323, 1.3943, 0.3, 0.6765, 0.5776, 0.9349, 0.3617, 0.0259, 0.7645, 1.63, 1.68, 1.3387], [1.4408, 0.9398, 2.3111, 0.0, 0.9184, 1.0333, 0.0, 0.0778, 0.0, 1.4355, 1.2969, 0.0, 0.0, 0.6422, 1.3107, 0.2681, 0.0, 0.6129, 1.01, 2.02, 1.8548], [1.3521, 0.7218, 1.4, 0.9524, 0.7308, 0.7041, 1.1889, 0.1778, 0.2444, 1.2419, 1.3397, 0.75, 0.7353, 0.9009, 1.432, 0.5362, 0.0862, 0.6903, 1.4, 1.42, 0.9194]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

