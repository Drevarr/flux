created: 20230726005038000
creator: Drevarr
tags: ChartData
title: 202307260050_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Norn Name Generator", "Sister Elon\u00edth", "Jim Pam Zee", "Sakis Ranger", "Atros Wintersshroud", "Audra Storm", "Fluffys Dankest", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Druid", "Druid", "Druid", "Tempest", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[58.4038, 175.0794, 345.0308, 221.7368, 182.9241, 514.8118, 0.0, 345.304, 0.0, 23.451, 24.5, 30.3667, 0.0, 62.9588, 9.0, 390.6667, 30.0714, 509.6136, 31.4828, 337.9231, 324.6138, 234.8681, 0.0, 179.375, 660.5, 445.9345, 447.9012], [68.2857, 53.1013, 468.1296, 101.4316, 422.8197, 68.2133, 0.8654, 355.8651, 302.7225, 150.5263, 75.1519, 496.3765, 13.027, 333.872, 4.8627, 8.9643, 116.9333, 10.9706, 84.3505, 104.9286, 299.7667, 51.7286, 731.3295, 26.5862, 372.0192, 137.6, 220.1099, 0.0, 77.5625, 238.3125, 310.9563, 538.3333], [3187.3782, 2819.13, 2851.5794, 660.9911, 92.6957, 474.0441], [20.4423, 1025.5317, 878.6344, 1168.6842, 332.5949, 1109.6353, 1330.728, 134.2703, 264.0784, 5.2857, 51.0333, 61.7941, 370.9897, 213.4643, 1578.9222, 195.6714, 1890.3864, 26.069, 1769.0192, 562.8069], [1528.75, 1741.881, 1858.7826, 1643.2368, 1553.3769, 1791.9565, 810.8095, 586.8184], [2605.7692, 1795.82, 1618.5701, 159.9464, 332.6957, 7.3088, 20.3143, 898.4227, 173.4545, 1823.9125, 1676.881, 2336.913, 969.7895, 1584.0, 1993.9565, 1100.254, 628.187, 1248.6358], [1419.1368, 2904.2787, 1247.48, 211.4038, 2669.2619, 2583.6256, 1842.0351, 1812.5823, 3754.3059, 64.6757, 3521.192, 66.5946, 538.5098, 302.9286, 478.9333, 222.2941, 881.3196, 977.1071, 2867.4889, 119.1714, 943.2614], [3676.4295, 2800.11, 2205.6168, 536.7589, 59.0435, 616.5882, 658.8571, 1562.1134, 432.8485, 2706.1208, 1902.7619, 2070.3696, 1679.5526, 2675.8844, 326.9565, 1505.1587, 1263.5203, 2008.1543, 1102.95, 2734.4643, 195.6389, 2536.1429, 1259.5063, 2572.6543, 1288.9789, 2054.9508, 1363.64, 302.4423, 2237.1429, 2561.5507, 1820.2105, 1136.2785, 3306.3294, 232.0811, 2425.656, 290.6486, 557.1569, 146.25, 17.4333, 38.3235, 664.7216, 716.2143, 2348.6667, 19.6714, 3274.5682, 297.6552, 1808.4231, 1730.1862, 1545.9341, 140.4571, 1281.2812, 2381.5312, 2071.0349, 2693.0123]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

