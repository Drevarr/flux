created: 20230902220918000
creator: Drevarr
tags: ChartData
title: 202309022209_downed_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Melmyr", "Fqa Necr", "Zoran The Bear", "Unnamed Charr", "Mistwalker Cael", "Puppy Sky", "Aira Draugr", "Sygaldry Verdandi", "Aethli", "Scarlet Redwitch", "Mistwalker Cael", "Hyde En Sikh", "Sub Train", "Agent Pickpocket", "Revenant Brandorf", "Serene Azura", "Praechilla", "Drevarr Moonwillow", "Bella Sassy", "Xanvias Einzbern", "Crusader Siolith", "Legacy Of Mathus", "Melody Phoenixstorm", "Val Haden", "Sofya De Nova", "Zatoshin", "Be\u00eb", "Koralia Danai", "Sly The Ele", "Unbreakable Nemesis", "Jamaass", "Kandy Land", "Sygaldry Verdandi", "Newtype Khan", "Vysmaris", "Leyviathan", "Gabe Malhorn", "Glorious Gluvs", "Zaedy Zae", "Mort\u00e4rion", "Tootsie Pop Rocks", "Leriel Nova", "Lord Erin The Wise", "Rina Of Theros", "Scuba Steves", "Greg The Knight", "Willowshaven", "Elfina Lightborn", "Melmyr", "Daphne Agla\u00e9", "Sight Beyond Sights"];
const professions = ["Firebrand", "Firebrand", "Scourge", "Tempest", "Dragonhunter", "Vindicator", "Reaper", "Herald", "Firebrand", "Renegade", "Harbinger", "Herald", "Chronomancer", "Dragonhunter", "Thief", "Herald", "Dragonhunter", "Mechanist", "Scrapper", "Firebrand", "Berserker", "Firebrand", "Berserker", "Scrapper", "Reaper", "Tempest", "Herald", "Reaper", "Firebrand", "Tempest", "Firebrand", "Reaper", "Soulbeast", "Willbender", "Spellbreaker", "Chronomancer", "Herald", "Firebrand", "Berserker", "Druid", "Scrapper", "Scrapper", "Tempest", "Weaver", "Reaper", "Spellbreaker", "Firebrand", "Catalyst", "Berserker", "Willbender", "Reaper", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Downed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 2, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 2], [0, 0, 3, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 3, 1], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 3, 1, 1, 1], [1, 1, 1, 0, 0, 0, 2, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2], [0, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 2, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 2, 2], [1, 2, 1, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0], [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 3, 0, 0, 0, 0, 1, 3, 2], [0, 0, 0, 0, 1, 2, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 2, 0, 0, 0, 1, 1, 1, 1, 0], [0, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0], [0, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 1, 0, 2, 1, 0], [0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 1, 1, 0], [1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 4, 1, 0, 0, 0, 1, 2, 2, 1], [1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 2, 2, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0, 1, 0, 1, 0, 1, 1, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 2, 1, 0, 2, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 3], [0, 0, 0, 0, 2, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 2, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 2, 0], [0, 2, 0, 1, 0, 2, 1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 0], [2, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 2], [0, 0, 0, 4, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 2, 0], [2, 0, 0, 0, 1, 0, 5, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 1, 1, 3, 0, 0, 2, 1, 1, 1, 1, 1], [0, 2, 0, 0, 0, 3, 2, 1, 1, 2, 1, 0, 2, 0, 1, 1]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

