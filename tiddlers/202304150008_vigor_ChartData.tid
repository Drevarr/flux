created: 20230415000841000
creator: Drevarr
modified: 20230705163525676
modifier: drevarr
tags: ChartData
title: 202304150008_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Cat Wigglebooty", "Xyntharos", "Zadie Miststep", "Tegan Parker", "Yuuka Chou", "Stark Gandalf", "Smol Daddy Tika", "Grasszanine", "Mac Chiato", "Sassy Daddy Demon", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Scrapper", "Vindicator", "Tempest", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Tempest", "Vindicator", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[33.5232, 38.3265, 28.9688, 12.672, 38.2077, 17.955, 52.8112, 60.6993, 15.8184, 40.2537, 0.0, 101.3546, 1.9734, 35.8165, 31.8998, 20.8067, 29.7625, 92.8795, 90.4393, 27.6576, 27.5524, 24.7724], [248.1171, 88.0992, 0.0, 29.038, 0.0, 86.1244, 124.4926, 9.9687, 0.0, 29.9805, 127.0363, 54.6685, 0.0, 111.515, 0.0], [36.2448, 59.3685, 27.0684, 23.832, 59.1939, 29.025, 88.6208, 86.9193, 32.4324, 31.2657, 2.944, 97.3112, 1.9803, 42.5288, 34.8905, 17.9326, 34.6684, 95.2352, 85.2086, 32.8176, 20.979, 30.7877], [18.8604, 73.3631, 32.499, 164.8359, 0.0, 66.8086, 23.4976, 19.4709, 116.7604, 256.26, 195.5581, 15.6348, 15.6643, 51.4853], [17.1936, 0.0, 18.5864, 18.648, 117.0261, 37.53, 61.9496, 200.1897, 31.824, 52.2376, 0.0, 98.5242, 79.3417, 0.0, 31.5744, 60.9422, 119.2963, 191.3398, 3.9216, 20.0932, 55.4954], [174.4848, 149.0976, 122.2713, 145.944, 307.5039, 34.3575, 309.3229, 247.5168], [396.0793, 222.4919, 142.2062, 195.7999, 680.78], [128.2894, 97.083, 275.6251, 180.8656, 101.3959, 0.0, 86.8889, 142.1797, 328.686, 100.7748, 106.7132, 95.6617], [34.5168, 104.6088, 42.0858, 0.0, 90.0324, 0.0, 74.4883, 138.8349, 45.4896, 100.5574, 0.0, 214.5698, 76.8246, 48.1346, 0.0, 183.3716, 143.021, 199.4389, 43.602, 49.1841, 64.1626], [50.8032, 45.9918, 69.6177, 40.392, 113.9022, 126.6975, 106.8976, 210.5466, 29.718, 35.7213, 0.0, 219.961, 54.3803, 23.3078, 0.0, 29.5444, 241.9579, 206.0193, 68.0604, 49.4638, 108.145], [117.4608, 82.9656, 119.3049, 120.996, 257.0409, 125.2125, 313.467, 351.0858, 132.21, 144.268, 20.838, 94.2112, 0.0, 19.193, 20.8393, 11.3344, 24.8566, 60.7419, 69.5168, 7.224, 22.6107, 18.9512], [61.7328, 48.9226, 38.795, 0.0, 106.8534, 162.54, 242.5916, 340.86, 42.12, 93.2595, 0.0, 262.1471, 35.9738, 40.302, 0.0, 54.51, 431.4186, 451.8589, 73.1172, 52.0745, 84.9895], [97.7184, 156.1617, 47.6478, 130.068, 258.0021, 115.6275, 174.904, 307.2984, 238.5396, 53.1594, 73.669, 470.3822, 161.4103, 126.7449, 66.4277, 98.009, 183.2351, 337.2913, 166.8744, 27.4126, 91.1988], [135.6912, 266.8577, 88.8993, 88.2, 283.3938, 350.865, 875.0511, 705.5802, 114.0984, 130.2099, 73.531, 724.7121, 0.0, 229.0055, 129.5456, 96.7877, 461.9177, 939.2273, 895.6188, 197.0088, 132.9136, 289.1843]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

