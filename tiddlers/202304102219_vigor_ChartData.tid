created: 20230410221909000
creator: Drevarr
modified: 20230705163525295
modifier: drevarr
tags: ChartData
title: 202304102219_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Xyntharos", "Mac Chiato", "Arriasa", "Tegan Parker", "Ak\u00e1nt\u00f3r", "Grasszanine", "Zadie Miststep", "Newtype Khan", "Arcanophage Farra", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Vindicator", "Tempest", "Druid", "Tempest", "Druid", "Spellbreaker", "Tempest", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.9738, 12.2314, 57.4035, 145.7995, 442.1741, 18.6496, 14.8781, 13.3056, 20.9131, 7.9253, 27.977, 14.9744, 17.1108, 28.0711, 19.2134, 11.466, 17.9972, 6.96, 20.9371, 22.542, 11.2238, 45.9928], [10.6322, 27.8554, 73.4387, 213.9276, 668.8915, 22.0735, 39.9168, 32.4826, 20.1686, 15.8338, 40.8699, 19.1296, 12.4891, 27.8888, 22.8678, 15.3688, 20.1101, 14.0757, 26.532, 28.8267, 15.469, 48.7379], [54.2822, 117.3673, 0.0, 1071.2774, 15.2256, 29.5142, 19.6838, 29.6438, 0.0, 37.4556, 29.4196, 29.7763, 29.742, 69.434, 8.9964, 23.9963, 31.5795, 22.2484, 30.5927, 0.0, 42.7661], [0.0, 76.8701, 0.0, 229.0378, 929.3914, 35.1137, 80.015, 0.0, 64.2622, 73.0497, 48.0553, 0.0, 0.0, 83.9096, 39.7003, 0.0, 0.0, 0.0, 26.4008, 92.3493, 0.0, 48.4008], [0.0, 31.6662, 331.8927, 1005.9648, 23.822, 31.631, 31.68, 43.789, 0.0, 52.9984, 31.4776, 31.8578, 29.9547, 23.8645, 0.0, 23.2794, 0.0, 27.0565, 22.2303, 30.9058, 61.5485], [3.354, 82.2269, 156.7142, 72.3696, 493.223, 68.7704, 82.1318, 72.1459, 137.9995, 62.0693, 84.2604, 0.0, 72.031, 77.6841, 71.3979, 68.895, 0.0, 123.743, 62.5877, 67.3109, 151.6077], [407.4433, 1370.8147, 0.0, 66.7699, 46.3373, 50.2524, 0.0, 57.7886, 0.0, 72.2534, 101.4388, 86.7648, 2.205, 67.1971, 0.0, 89.4307, 80.3512, 70.7198, 71.2768], [21.1302, 31.248, 183.1252, 473.9809, 1305.5021, 48.2267, 16.3296, 52.7578, 62.0964, 74.7074, 0.0, 31.505, 44.932, 12.6244, 31.6859, 13.8469, 0.0, 81.1695, 45.7591, 33.7037, 112.5018], [184.5035, 75.0845, 448.987, 541.3138, 928.6406, 198.2977, 141.3418, 175.1693, 133.3973, 0.0, 166.7921, 20.5604, 105.3108, 107.7275, 64.1738, 51.6191, 81.2327, 77.1309, 104.3358, 81.5458, 73.3248, 39.7802], [0.0, 0.0, 156.7142, 294.515, 2589.984, 60.9026, 28.1837, 75.5251, 66.5633, 0.0, 0.0, 56.0756, 0.0, 60.9727, 144.5157, 52.5231, 84.817, 69.8593, 32.7825, 78.1178, 52.9354, 79.8011], [135.6022, 0.0, 231.9048, 840.3353, 2902.2835, 71.3201, 104.9933, 78.1862, 90.2513, 0.0, 135.3498, 74.9896, 58.212, 22.6331, 59.0244, 39.7341, 61.9527, 0.0, 52.2335, 118.9426, 74.7077, 197.3597], [187.6898, 175.5245, 514.745, 1368.6597, 3873.7152, 176.0784, 215.0669, 168.8755, 138.8455, 85.8739, 225.0903, 65.2092, 174.9535, 99.7983, 188.9778, 75.7197, 15.092, 64.094, 118.323, 99.1015, 36.8554, 180.2629]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

