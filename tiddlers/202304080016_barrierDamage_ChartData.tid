created: 20230408001602000
creator: Drevarr
modified: 20230705163524613
modifier: drevarr
tags: ChartData
title: 202304080016_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Reyga Bannerclaw", "Heks Appeal", "Smol Dome Dim", "Solus Sanctus", "Bella Sassy", "Aronorf Xideliesi", "Ryvalia Fazebringer", "Black Raspberry Pie", "Rina Of Theros", "Smol Daddy Tika", "Anita Strips", "Zadie Miststep", "Arriasa", "Arcanophage Farra", "Panther B Me", "Be\u00eb", "Dark Sidiuz", "Drevarr Moonwillow", "Newtype Khan", "Rozaalyna", "Cat Wigglebooty", "Smol Gluvs", "Lucky Leipreach\u00e1n", "S E M C H O R \u00c1"];
const professions = ["Spellbreaker", "Reaper", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Scourge", "Berserker", "Chronomancer", "Tempest", "Druid", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scrapper", "Spellbreaker", "Scourge", "Scrapper", "Scourge", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1770, 16507, 4232, 4588, 2193, 3334, 1015, 7199], [41525], [784, 0, 1188, 0, 0, 0, 0, 2305, 0, 333, 0, 2315, 269, 0, 0, 4444, 0, 7055, 9246, 3425, 2466, 2760, 4422, 0, 1622], [547, 0, 1808, 5274, 0, 0, 603, 0, 0, 1680, 0, 3872, 3213, 0, 107, 0, 843, 4274, 409, 9421, 5731, 0, 2116, 4363, 0, 1930], [2685, 0, 3954, 5374, 455, 0, 538, 131, 0, 101, 0, 4826, 569, 0, 1304, 0, 0, 4752, 5553, 5227, 0, 1089, 4483, 2717, 64, 2932], [1939, 2869, 1430, 0, 265, 0, 3299, 2767, 63, 33, 0, 267, 0, 527, 0, 596, 5916, 1572, 5749, 478, 7540, 5588, 3978, 0, 1893], [3706, 0, 1401, 477, 0, 0, 1292, 0, 116, 0, 0, 6023, 1321, 934, 31, 325, 1304, 4402, 217, 7217, 3605, 1313, 10134, 2402, 0, 1703], [1188, 0, 1401, 0, 437, 0, 0, 0, 188, 5048, 0, 1300, 3766, 0, 0, 0, 0, 5625, 6134, 14997, 3770, 694, 2738, 3406, 3879, 1743], [0, 0, 3530, 9987, 1759, 0, 0, 12606, 3, 3474, 0, 7149, 4479, 0, 0, 0, 16402], [73, 2166, 2713, 8076, 238, 0, 0, 1058, 0, 0, 0, 1954, 478, 0, 0, 0, 2449, 13656, 4952, 0, 1420, 1248, 4680, 13185, 991, 2166], [5051, 0, 0, 6328, 0, 0, 2420, 0, 62, 4165, 0, 3274, 2517, 0, 2529, 0, 2117, 12606, 1939, 11064, 2955, 782, 1861, 5483, 0, 2876], [1240, 96, 3279, 4191, 1188, 1145, 8125, 0, 72, 1478, 1248, 6176, 1465, 0, 0, 0, 2445, 1667, 887, 4871, 10105, 7793, 7016, 4147, 0, 573], [4798, 0, 4287, 0, 4833, 12491, 0, 5049, 6830, 217, 0, 8213, 7218, 5461, 7014, 9318, 0, 1091], [3391, 0, 3121, 0, 0, 0, 414, 4723, 0, 3435, 0, 7594, 3437, 599, 391, 0, 5390, 6711, 1230, 14123, 10668, 217, 8425, 3437, 1262, 2433], [187, 0, 6907, 5039, 1203, 0, 830, 8342, 0, 0, 0, 642, 2964, 0, 0, 4181, 8474, 3881, 10191, 9341, 3279, 4797, 12817, 1054, 3451], [9447, 619, 6353, 9672, 125, 0, 6821, 6115, 0, 7439, 0, 15974, 16031, 13066], [3376, 1304, 8488, 3402, 4758, 1207, 0, 4980, 0, 3316, 0, 8292, 6369, 538, 0, 0, 8649, 12194, 8652, 18309, 3746, 0], [4246, 772, 3413, 3719, 975, 85, 2682, 1487, 90, 2340, 0, 6853, 2661, 0, 1409, 2224, 5665, 13529, 2330, 11747, 4337, 6326, 3820, 9908, 732, 7742], [2926, 2867, 5865, 3882, 0, 174, 4419, 0, 0, 1624, 933, 5990, 3634, 3086, 57, 0, 7057, 13317, 10799, 18629, 4403, 7557, 3649, 6389, 2669, 3546], [7621, 0, 8154, 8042, 0, 1591, 3467, 2323, 0, 3320, 0, 15117, 1936, 0, 497, 1314, 11586, 14155, 10969, 13580, 12449, 3920, 10427, 6865, 126], [1393, 421, 3976, 648, 1190, 0, 3047, 187, 54, 1641, 0, 5888, 10333, 0, 165, 25142, 3144, 17594, 14309, 4973, 7156, 21505, 794, 22634], [5575, 226, 9144, 6999, 2321, 67, 7402, 7373, 579, 6884, 1248, 9786, 8361, 0, 0, 5638, 13977, 5726, 14555, 11132, 10625, 15747, 7164, 1249, 12005], [647, 9902, 441, 20573, 6008, 0, 3342, 34, 389, 7231, 0, 1487, 6425, 39537, 39228, 55917, 29024, 40159, 32043, 24190, 2138, 48594], [14074, 6960, 11701, 15539, 3761, 1986, 26751, 3522, 92, 8087, 2263, 21244, 14150, 433, 4092, 0, 30635, 26508, 12998, 38196, 24444, 24782, 34282, 24567, 6154, 35500]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

