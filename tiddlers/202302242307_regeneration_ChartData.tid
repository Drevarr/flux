created: 20230224230708000
creator: Drevarr
modified: 20230705163520142
modifier: drevarr
tags: ChartData
title: 202302242307_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Air One Com", "Akira Moonbright", "Tegan Parker", "Zadie Miststep", "Mike The Archmagus", "Arriasa", "Project Jupiter", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Vindicator", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[172.0753, 60.5717, 21.6595, 34.7741, 62.832, 95.8651, 88.6155, 88.1471, 76.3776, 11.2563, 37.7261, 15.639, 20.272, 206.1322, 0.0, 41.004, 17.1569, 53.9698, 96.1028, 63.8899, 104.4288, 24.4863, 99.7366, 25.0838, 98.9408, 94.0896, 32.365, 86.3017, 53.1072], [153.6199, 12.0931, 0.0, 37.4026, 20.2608, 43.7942, 95.0874, 25.2208, 12.1865, 40.7929, 64.7976, 16.4787, 148.8202, 0.0, 14.94, 14.8346, 161.5968, 240.9295, 47.6342, 144.0051, 3.7671, 14.9842, 70.596, 125.44, 86.0976, 90.7063, 186.1873, 81.8716], [349.4122, 0.0, 74.268, 26.1668, 225.923, 270.7717, 128.3462, 201.143, 117.5706, 29.3863, 75.3278, 510.6192, 240.9696, 423.7584, 97.6487, 99.8581], [356.3143, 202.825, 154.7904, 75.551, 112.6272, 44.9673, 124.2733, 213.2456, 27.7465, 6.935, 20.7682, 25.6627, 268.1246, 0.0, 138.42, 19.5045, 115.4837, 36.9293, 83.104, 138.1682, 22.7242, 46.8096, 210.3472, 86.9184, 180.9908, 164.1848, 85.6716], [563.0982, 19.943, 139.9843, 134.5008, 106.2923, 237.7186, 154.3412, 18.8879, 0.0, 0.0, 0.0, 0.0, 163.9123, 36.7839, 0.0, 10.4058, 102.8506, 184.0351, 94.5605, 98.2822, 118.8162, 49.6742, 63.0149, 320.1072, 40.8672, 178.9416, 103.2611, 150.0635], [674.0401, 402.9979, 387.4214, 263.9136, 234.024, 358.5653, 475.2505, 675.6826, 48.6769, 117.9684, 140.579, 140.8957, 61.272, 491.3549, 110.7336, 139.968, 90.6193, 160.3022, 225.6846, 61.4261, 200.3277, 115.1402, 73.304, 217.5629, 368.088, 180.0144, 176.2295, 180.2088, 81.3189], [385.4318, 329.6798, 1541.3107, 214.7054, 649.8, 98.2841, 947.2162, 655.3821, 577.1616, 652.7898, 337.1876, 243.1106, 391.2926, 1017.24, 623.2464, 989.5129, 640.2678, 332.8065], [1480.9378, 709.463, 449.8387, 261.4982, 405.6864, 789.7952, 554.5315, 311.4474, 115.1172, 109.6078, 283.2278, 68.0666, 869.1365, 56.2418, 567.936, 127.9152, 584.4269, 379.1302, 449.7499, 439.6672, 380.4184, 123.3448, 226.4923, 1111.0064, 429.7104, 865.7183, 326.7835, 251.2803], [1096.3113, 1024.7328, 922.729, 485.2742, 600.6, 719.2813, 639.2888, 1176.3278, 308.4021, 213.1569, 371.663, 108.791, 39.016, 1346.4499, 143.5877, 344.34, 309.7756, 666.1181, 839.1183, 534.6533, 925.8099, 508.5308, 461.5565, 329.8805, 1168.2384, 937.6128, 949.5539, 477.3845, 337.2744]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

