created: 20230626011254000
creator: Drevarr
modified: 20230705163537421
modifier: drevarr
tags: ChartData
title: 202306260112_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Raziel Umbra", "Zhavashian", "Primal Clone", "Ryvalia Fazebringer", "Momomeko", "Artakama Nahid", "Miphest\u00f6", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[46.574, 0.0, 0.0, 43.296, 136.7453, 7.7674, 0.0, 80.2929, 17.397, 20.9338, 7.8044, 3.564, 0.0, 1.3081, 4.4119, 0.0, 3.2384, 0.0, 0.0, 2.6781, 48.9269, 23.7197, 19.0944, 29.957, 29.7628, 20.3597, 10.8891], [32.9176, 21.8803, 0.0, 34.2757, 155.1547, 83.0606, 55.0368, 89.1011, 111.5404, 126.023, 100.3702], [169.5427, 64.1763, 135.7707, 52.9043, 544.918, 80.8214, 31.3988], [114.6684, 32.5928, 90.2484, 289.344, 638.5516, 121.5101, 149.1153, 78.5882, 317.203, 106.5809, 95.3132], [116.654, 66.596, 0.0, 404.888, 599.8885, 122.0904, 0.0, 97.386, 103.9976, 267.8248, 9.7196, 15.6578, 0.0, 42.579, 23.5511, 0.0, 28.0416, 0.0, 0.0, 0.0, 33.8477, 33.8256, 61.6896, 23.4241, 0.0, 0.0, 0.0], [70.0216, 0.0, 59.4466, 239.536, 358.5494, 183.649, 0.0, 90.3388, 121.7787, 415.3202, 0.0, 40.7128, 65.4444, 79.079, 142.4491, 0.0, 23.2944, 49.2442, 0.0, 0.0, 84.3557, 81.1397, 55.1232, 0.0], [63.656, 68.3542, 86.5779, 411.752, 210.5443, 95.3064, 188.9244, 111.4064, 492.983, 120.897, 26.8963, 89.3739, 35.4226, 81.4131, 49.5751, 83.72, 113.3261, 74.6905, 67.0732, 57.3595, 76.5043, 96.048, 60.3364, 42.4668, 28.8499, 42.0385], [0.0, 318.032, 657.0014, 129.9024, 0.0, 252.349, 114.4248, 792.4482, 173.7086, 4.0036, 0.0, 12.7737, 114.7084, 2.9946, 0.0, 147.8669, 44.0963, 68.134, 3.0158, 123.9019, 0.0, 12.7678, 6.4719, 5.3011, 12.1238], [110.9892, 33.7134, 114.1633, 430.32, 382.1542, 204.0494, 24.3162, 187.425, 263.0398, 694.9702, 101.2183, 62.8927, 42.2272, 28.0355, 1.8409, 53.5164, 37.2416, 67.415, 33.9519, 108.9483, 118.5254, 111.7915, 130.3488, 99.3103, 221.363, 95.9904, 46.8556]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

