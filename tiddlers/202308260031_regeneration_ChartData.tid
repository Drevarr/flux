created: 20230826003133000
creator: Drevarr
tags: ChartData
title: 202308260031_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Vylade Vinzanti", "Mike The Archmagus", "High Sorcer Baradun", "Tegan Parker", "J\u00e2sm\u00eene", "Venomina The Sly", "Drevarr Moonwillow", "Tribal S", "Zaedy Zae"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[60.179, 17.2172, 0.0, 94.7153, 40.7114, 40.764, 12.2959, 24.0443, 101.574, 202.3467, 38.2089, 52.4295, 26.7558, 152.1036, 204.1406, 139.5393, 47.8039, 69.1814, 755.9273, 121.6631], [87.0815, 189.7816, 173.3562, 53.16, 34.2997, 160.9572, 31.6883, 244.7865, 643.7943, 477.2475, 2.5415, 151.7711], [424.8076, 187.6784, 141.9272, 99.6726, 157.1382, 48.672, 52.7764, 92.5743, 89.2004, 128.8485, 807.9887, 198.1302, 115.0045, 83.8872, 99.359, 477.0322, 105.8358, 83.7102, 340.6555], [0.0, 51.6848, 185.9673, 0.0, 127.7384, 0.0, 114.7684, 694.386, 411.6433, 59.7064, 205.755, 58.2738, 2366.6378, 103.847], [324.0214, 178.4328, 143.7927, 224.8776, 118.6622, 0.0, 97.7777, 50.2945, 152.6175, 559.1002, 150.187, 8.9245, 56.4646, 74.6635, 523.9124, 56.3471, 35.3195, 271.447, 0.0, 1892.0315, 0.0], [1020.9222, 180.6482, 133.042, 242.8501, 333.3759, 745.3811, 257.193, 361.0813, 0.0, 0.0, 3720.1265, 118.6139], [356.2228, 580.8712, 300.2709, 693.804, 532.1488, 110.112, 268.6429, 484.1215, 15.2929, 481.4077, 2820.0705, 36.6135, 810.3341, 411.6128, 583.0507, 1078.0986], [448.2268, 525.07, 359.1834, 506.523, 279.843, 214.944, 33.6554, 303.4583, 0.0, 538.7783, 2873.204, 23.2432, 105.9021, 358.4835, 2903.3418, 535.4994, 154.2534, 1896.7618, 299.6144, 11358.5829, 385.3753], [854.2571, 332.9508, 381.1963, 959.4808, 519.4503, 222.072, 140.4094, 585.6664, 667.584, 3075.351, 1178.9809, 444.2233, 336.6998, 2470.5446, 1014.5844, 170.4049, 1605.6372, 390.7246, 10025.2589, 557.568]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

