created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Hyde En Sikh", "Artakama Nahid", "Rahani Sunray", "Chocolate Teapot", "Willgrantor", "Zaedy Zae", "Mechanical Dark", "Aronorf Xideliesi", "Drevarr Moonwillow", "Enter Effore", "Klenga", "Gabe Malhorn", "Sygaldry Verdandi", "Koralia Danai", "Tika Fiery", "Bella Sassy"];
const professions = ["Tempest", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Firebrand", "Druid", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[26.9997, 0.0, 63.9871, 76.3651, 0.0, 10.9395, 5.7748, 0.0, 41.5057, 26.0138, 25.9747, 15.3467, 0.0], [30.743, 36.234, 26.5332, 8.143, 36.5701, 57.5, 38.4635, 26.0469, 12.948, 28.7082], [13.4811, 41.186, 9.4965, 0.0, 0.0, 87.6299, 19.4198, 14.5632, 35.6265, 0.0, 0.0, 0.0, 14.0438, 17.5392, 9.7075, 0.0, 43.146], [62.8861, 9.6621, 0.0, 15.5363, 54.1975, 38.5172, 24.7726, 17.043, 13.9851, 24.323, 8.0216, 3.5175, 19.6063, 50.4708, 9.0619, 84.483], [61.4095, 70.8173, 25.8408, 10.8055, 20.9213, 66.6838, 77.3568, 6.0372, 23.1, 33.7421, 38.7494, 49.3186], [56.2986, 49.2418, 37.908, 22.7673, 67.1996, 37.0896, 95.025, 0.0, 89.341, 37.5005], [27.7132, 41.2665, 20.6486, 0.0, 20.4151, 67.8148, 71.7431, 20.6464, 29.406, 13.3947, 15.3934, 0.0, 20.8425, 30.6518, 20.6234, 15.5138, 136.674], [24.568, 111.6675, 113.629, 104.2446, 45.4349, 343.656], [70.6006, 119.4514, 73.4139, 0.0, 0.0, 117.1264, 0.0, 69.2445, 16.6419, 39.501, 0.0, 54.8625, 70.3238, 94.4969, 28.5012], [76.2909, 142.0775, 10.3393, 19.9844, 46.2574, 65.6885, 95.5142, 40.246, 76.4595, 23.616, 7.1581, 4.1646, 62.5275, 43.4304, 27.471, 69.4678, 72.873], [157.5339, 60.5131, 95.823, 52.5087, 87.232, 169.4963, 139.4993, 191.0078, 40.5072], [123.0991, 249.6523, 96.6812, 28.7283, 76.2333, 210.9994, 123.7977, 5.6887, 59.904, 17.14, 73.2564, 65.7384], [342.4918, 86.9439, 37.9072, 33.969, 261.3967, 67.0157, 28.732, 152.646, 22.2507, 63.058, 38.3195, 99.3825, 21.7987, 189.8396, 60.1553], [21.1955, 299.8162, 83.4522, 58.13, 210.2755, 0.8192, 159.627, 59.2798, 121.28, 146.458, 82.635, 74.5207, 196.4456, 3.7584], [135.6509, 224.1274, 131.2962, 21.9528, 22.5804, 293.5171, 151.4098, 22.9674, 81.666, 107.0469, 129.7069, 73.0333, 117.18, 128.6626, 177.8765, 88.3015], [88.8045, 229.5625, 38.6334, 35.1929, 5.6802, 31.9847, 154.2838, 42.658, 57.2715, 70.0177, 75.5307, 63.698, 123.4275, 140.94, 264.841, 24.7428, 589.761], [46.0317, 338.3853, 55.7151, 0.0, 107.5028, 198.9655, 243.0561, 90.1857, 95.2965, 41.5125, 82.0663, 47.9343, 172.6725, 131.1682, 381.2099, 89.8258, 724.302]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

