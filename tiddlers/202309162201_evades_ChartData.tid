created: 20230916220103000
creator: Drevarr
tags: ChartData
title: 202309162201_evades_ChartData
type: text/vnd.tiddlywiki


const names = ["La Poupounette", "Nox Anathema", "Etchery Howls", "Puppy Sky", "Ax Axun", "Gavid Doggins", "Necrocorruption", "Miphest\u00f6", "Adrinz", "Tootsie Pop Rocks", "Oo Dads Mad", "Mort\u00e4rion", "Belvyn Brightblade", "Xeltrom", "Sofya De Nova", "Aira Draugr", "Kronika Riddle", "Tribal S", "Hawaiian Supreme", "Keypek The Drunk", "Gamora Titus", "Etcherii", "Anja Starkin", "Arch Wells", "Sana Minatozak", "Bella Sassy", "Rina Of Theros", "Leafzely", "Meme Soulmessor", "Gabe Malhorn", "Sub Train", "Zaedy Zae", "Such A Brets", "Drevarr Moonwillow", "Venomina The Fierce", "Koralia Danai", "Arlyss Phury", "Be\u00eb", "Zori Fizbow", "Tegan Parker", "Crusader Siolith", "Regis Hawkesburne", "Xanvias Einzbern", "Lord Erin The Wise", "No Reserv\u00e9", "Glorious Gluvs", "Ryvalia Fazebringer", "Mistwalker Cael", "Arcanophage Farra", "Revenant Brandorf", "High Sorcer Baradun"];
const professions = ["Renegade", "Herald", "Druid", "Reaper", "Vindicator", "Herald", "Reaper", "Tempest", "Firebrand", "Scrapper", "Berserker", "Scrapper", "Firebrand", "Druid", "Weaver", "Herald", "Chronomancer", "Druid", "Spellbreaker", "Scrapper", "Firebrand", "Firebrand", "Druid", "Reaper", "Scrapper", "Firebrand", "Reaper", "Scrapper", "Reaper", "Firebrand", "Firebrand", "Druid", "Mechanist", "Scrapper", "Spellbreaker", "Firebrand", "Vindicator", "Reaper", "Vindicator", "Tempest", "Firebrand", "Berserker", "Berserker", "Weaver", "Vindicator", "Berserker", "Chronomancer", "Vindicator", "Spellbreaker", "Vindicator", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Evaded Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7, 35, 0, 0, 0, 0, 1, 0], [29, 14], [28, 17, 0], [3, 20, 4, 2, 1, 13, 0, 0, 2], [6, 10, 0, 0, 0, 0, 0, 2, 4, 0, 2, 4, 9, 16, 0, 0, 3, 0, 0, 0, 0], [59], [14, 4, 5, 0, 40, 0, 2, 0, 0, 0, 0], [60, 2, 6], [14, 3, 11, 5, 9, 0, 6, 2, 5, 9, 1, 7], [26, 40, 0, 0, 0, 0, 0, 1, 5, 0, 1, 0], [27, 22, 0, 1, 0, 0, 1, 5, 12, 1, 8, 0], [23, 37, 6, 6, 4, 8, 1, 3, 0, 0], [41, 32, 0, 1, 2, 15], [67, 23, 2, 0, 0, 4, 1], [74, 0, 6, 0, 0, 17], [61, 27, 0, 7, 0, 4, 0], [27, 4, 12, 23, 6, 25, 6], [20, 14, 0, 3, 0, 0, 1, 1, 14, 0, 0, 0, 8, 0, 9, 5, 9, 9, 0, 11, 0], [1, 40, 25, 3, 42, 0], [24, 19, 0, 5, 0, 2, 0, 0, 4, 0, 0, 0, 9, 18, 16, 3, 11, 1, 0, 0, 0], [45, 28, 17, 11, 2, 8, 2], [0, 0, 0, 14, 1, 19, 6, 1, 8, 2, 0, 22, 7, 4, 23, 1, 7, 0], [63, 43, 0, 4, 4, 4, 1], [78, 35, 1, 4, 0, 2], [51, 61, 3, 0, 7], [22, 16, 0, 2, 0, 0, 12, 0, 0, 0, 0, 0, 0, 4, 37, 0, 25, 7, 0, 0, 0], [31, 30, 0, 1, 0, 0, 7, 1, 27, 0, 0, 0, 2, 5, 0, 2, 13, 0, 4, 7, 0], [43, 23, 0, 0, 0, 6, 12, 11, 8, 2, 0, 1, 0, 0, 5, 0, 8, 6, 0, 3, 6], [26, 1, 3, 11, 6, 21, 25, 2, 0, 8, 17, 11, 4], [33, 22, 0, 1, 0, 3, 7, 9, 2, 1, 0, 2, 6, 0, 5, 14, 34, 0, 3, 3], [45, 15, 0, 2, 0, 1, 7, 1, 2, 3, 0, 0, 13, 0, 45, 0, 9, 5, 0, 7, 5], [0, 19, 0, 2, 0, 0, 6, 0, 19, 0, 0, 3, 2, 23, 9, 18, 12, 11, 6, 32, 0], [87, 62, 0, 1, 0, 1, 14, 0, 3], [22, 25, 0, 1, 1, 0, 0, 1, 28, 16, 0, 5, 0, 5, 13, 14, 23, 14, 0, 11, 2], [26, 0, 6, 0, 4, 28, 0, 14, 17, 3, 27, 11, 7, 23, 9, 11, 0], [20, 15, 4, 2, 0, 8, 2, 14, 1, 1, 12, 6, 5, 31, 5, 17, 19, 2, 28, 3], [20, 33, 2, 19, 8, 4, 12, 7, 4, 1, 10, 71, 5], [26, 31, 0, 5, 0, 0, 22, 3, 7, 1, 0, 8, 5, 14, 17, 11, 20, 8, 4, 19, 1], [112, 89, 1, 0, 1], [1, 1, 3, 2, 7, 4, 81, 12, 0, 4, 2, 11, 26, 16, 8, 5, 0, 22, 0], [50, 52, 0, 0, 0, 2, 12, 2, 21, 5, 2, 13, 13, 8, 3, 15, 2, 7, 1, 0, 2], [16, 45, 0, 4, 0, 1, 5, 7, 24, 13, 0, 23, 3, 24, 27, 0, 15, 0, 1, 2, 0], [36, 23, 0, 0, 0, 0, 26, 5, 4, 14, 2, 4, 20, 13, 34, 18, 10, 7, 0], [59, 0, 3, 0, 5, 59, 18, 7, 10, 2, 21, 3, 11, 14, 1, 22, 6, 0, 1, 12], [145, 87, 0, 16, 0, 2, 15], [61, 53, 0, 5, 0, 1, 14, 9, 20, 13, 1, 28, 4, 11, 43, 16, 10, 3, 4, 2, 5], [24, 37, 11, 1, 0, 6, 30, 15, 36, 22, 1, 21, 0, 15, 68, 25, 10, 8, 4, 19, 6], [143, 110, 1, 6, 0, 7, 6, 21, 25, 15, 4, 19, 8, 14, 10], [63, 80, 1, 15, 1, 1, 9, 7, 29, 4, 5, 13, 16, 0, 51, 9, 68, 17, 10, 0, 7], [77, 58, 1, 1, 0, 22, 2, 20, 27, 2, 33, 4, 13, 63, 1, 67, 1, 21, 2], [38, 64, 0, 10, 0, 7, 28, 13, 59, 50, 7, 32, 28, 39, 23, 0, 3, 3, 19, 6, 0]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

