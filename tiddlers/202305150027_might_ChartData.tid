created: 20230515002743000
creator: Drevarr
modified: 20230705163530041
modifier: drevarr
tags: ChartData
title: 202305150027_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Drogo Discourteous", "Zanos Engine", "Gabe Malhorn", "Sub Train", "Miphest\u00f6", "Koralia Danai", "Aronorf Xideliesi", "Lucas Ryn", "Artakama Nahid", "Venomina The Fierce", "Blancooo Padreee"];
const professions = ["Tempest", "Firebrand", "Mechanist", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7.254, 21.8698, 13.2678, 12.7422, 34.3687, 1.1685, 10.4052, 1.558, 10.6657, 8.6887, 2.2915, 19.9833, 0.0], [33.9487, 45.7277, 33.5486, 14.1238, 21.3544, 0.0], [44.3524, 17.9618, 37.6681, 10.2885, 3.7538, 2.9484, 4.641, 6.9737, 11.0757, 11.8642, 3.347, 0.704], [6.6737, 47.3845, 32.6957, 16.1196, 31.8942, 7.296, 1.8365, 7.3164, 3.8454, 11.281, 8.0203, 7.392, 10.9761, 1.298], [64.9466, 39.14, 22.4139, 40.9676, 4.5885, 0.0, 3.9448, 22.4254, 19.5734, 8.5378, 7.3338, 0.0], [16.5953, 30.3217, 60.8046, 40.372, 10.0556, 33.9105, 15.789, 1.326, 5.4012, 19.287, 18.4061, 18.3591, 4.092], [2.9484, 47.151, 61.3016, 45.0157, 25.8681, 33.1773, 6.783, 1.2705, 10.1556, 5.072, 15.9986, 26.9254, 5.2483, 16.784, 2.332], [18.7855, 59.6279, 70.2483, 39.3296, 18.4992, 6.8737, 13.68, 0.1386, 1.9032, 3.1824, 10.1188, 38.0965, 15.1906, 11.2714, 2.64], [23.3064, 89.0791, 108.0234, 58.3783, 43.7532, 52.9737, 9.291, 4.3659, 10.4832, 11.1716, 24.8867, 57.5744, 19.6258, 27.4648, 8.096], [24.7104, 125.204, 151.4315, 80.9336, 72.922, 59.1142, 6.3555, 0.0, 20.046, 30.2991, 38.6974, 84.0224, 49.7482, 59.1132, 14.102], [81.4882, 217.9102, 264.591, 120.6422, 89.1951, 54.8983, 28.3575, 10.5567, 0.4992, 38.4209, 71.5834, 138.9234, 66.7867, 63.0016, 24.75], [70.3123, 273.766, 310.8157, 151.2529, 95.7965, 126.6603, 48.6495, 4.516, 44.6862, 107.6144, 69.223, 51.5222, 59.8515, 20.152]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

