created: 20230605220452000
creator: Drevarr
modified: 20230705163533925
modifier: drevarr
tags: ChartData
title: 202306052204_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Ryvalia Fazebringer", "Artakama Nahid", "Primal Clone", "Stoic Rapidfire", "Venomina The Siren", "Cat Wigglebooty", "Miphest\u00f6", "Ak\u00e1nt\u00f3r", "Newtype Khan", "Crusader Siolith", "Zayde Sunsabre", "Solus Sanctus", "Gabe Malhorn", "Sygaldry Verdandi", "Johosh Of The North", "Koralia Danai", "Blanco Padre Guard", "Etchery", "Zaylen Harker", "Drevarr Moonwillow", "Bella Sassy"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Druid", "Tempest", "Scrapper", "Tempest", "Druid", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 207.7139, 253.2783, 8.1734, 0.0, 253.968, 27.4518, 303.9485, 0.0], [19.0368, 565.4149, 149.3638, 105.8858, 0.0, 0.0, 0.0, 0.0, 0.7107, 0.0, 0.0, 0.0, 220.428, 7.0011, 0.0, 0.0], [0.0, 497.3774, 0.0, 428.4735, 3.7539, 19.0809, 0.0, 64.515, 32.5501, 11.1371, 0.0, 38.375, 215.904, 108.1489, 32.1668, 11.6437], [33.4656, 287.3997, 0.0, 343.9527, 0.0, 7.5758, 14.388, 11.552, 276.7466, 209.2526, 80.637, 9.5165, 203.58, 0.0, 0.0, 15.4913], [53.4528, 902.0831, 82.9046, 233.3713, 0.0, 26.1905, 0.0, 0.0, 15.6354, 44.7442, 0.0, 0.0, 103.272, 51.403, 0.0, 0.0], [0.0, 781.258, 31.1875, 555.2547, 0.0, 100.1331, 25.971, 0.0, 55.4346, 48.892, 0.0, 6.1382, 225.42, 97.8314, 86.1571, 6.885], [0.0, 1578.5477, 0.0, 366.7264, 0.0, 0.0, 0.0, 0.0, 31.7446, 16.7546, 0.0, 0.0, 302.172, 49.0078, 44.1184, 16.524], [0.0, 0.0, 617.0018, 0.0, 114.1358, 0.0, 23.954, 199.8488, 185.0189, 0.0, 14.2195, 1050.816, 469.2593, 16.5271, 40.3582], [13.8384, 1228.9759, 134.5781, 507.3596, 5.7147, 37.9287, 5.159, 0.0, 39.894, 69.9904, 10.8033, 47.6928, 255.216, 535.033, 50.3854, 0.0], [65.5056, 1106.1956, 107.4746, 515.1073, 53.7414, 73.8927, 82.115, 72.439, 93.1491, 134.102, 68.0174, 29.1677, 227.76, 324.4466, 80.5002, 23.895], [24.336, 869.6285, 72.7054, 585.7761, 72.2529, 0.0, 0.0, 152.9233, 337.6773, 115.2245, 0.0, 17.1562, 536.484, 224.0358, 173.7839, 86.6902], [41.8176, 1111.2788, 87.1634, 882.7728, 59.9979, 1.2488, 60.852, 108.8861, 37.0512, 50.1004, 12.071, 41.5325, 346.008, 378.9817, 43.1202, 33.3923], [36.8064, 1241.4885, 134.5344, 723.592, 0.0, 131.7348, 17.248, 86.3287, 17.1516, 80.8662, 18.4848, 24.7738, 419.172, 274.5176, 93.1173, 15.0862], [7.1712, 995.1459, 58.7496, 721.4789, 28.7025, 19.697, 47.509, 84.0061, 164.1717, 29.6879, 127.5776, 153.5443, 416.832, 373.823, 175.1704, 43.011], [0.0, 900.9101, 42.8719, 627.3322, 71.9691, 22.0612, 17.05, 5.6773, 301.1947, 184.8556, 118.8554, 40.7597, 196.248, 735.1176, 82.885, 191.8485], [54.1296, 1699.3729, 19.9618, 964.9458, 0.0, 70.3629, 29.876, 24.9863, 142.6612, 97.7187, 0.0, 88.055, 508.716, 598.4115, 0.0, 11.988], [24.2208, 1494.8695, 80.4367, 741.4352, 7.224, 47.9353, 14.267, 1.7305, 61.7361, 110.9787, 135.8834, 164.1648, 389.532, 1120.3634, 188.9245, 211.9162], [82.0368, 1253.6101, 63.1394, 692.601, 101.1489, 190.2762, 2.145, 84.4312, 172.558, 139.8501, 81.4317, 166.7261, 550.368, 1047.9571, 140.3415, 199.3208], [10.9728, 2088.8288, 55.4736, 1415.9582, 20.0337, 0.0, 43.857, 39.1948, 144.4142, 65.9732, 13.0737, 148.488, 633.984, 455.8098, 49.3317, 4.5967], [0.0, 1395.1594, 71.7662, 963.7719, 0.0, 41.675, 22.9825, 260.0688, 137.9232, 133.9725, 220.1818, 655.98, 1629.4186, 179.7459, 172.1857], [0.0, 2544.3671, 34.267, 1486.627, 60.3204, 89.8101, 36.696, 30.785, 175.685, 102.4871, 108.6386, 94.3037, 759.72, 949.9414, 164.8826], [174.6432, 2699.6021, 91.2257, 1130.2309, 132.8958, 13.6363, 57.816, 106.9583, 279.542, 238.6793, 132.5535, 185.2291, 800.748, 1742.5419, 154.8998, 212.4023]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

