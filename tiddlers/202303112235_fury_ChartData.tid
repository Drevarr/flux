created: 20230311223557000
creator: Drevarr
modified: 20230705163521758
modifier: drevarr
tags: ChartData
title: 202303112235_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Tootsie Pop Rock", "Harry Callahann", "My Birthday Girl", "Legendary Hacker", "Lord Erin The Wise", "Slautorn", "Mistwalker Caelon", "Xyntharos", "Raimaru Hanzo", "Sofya De Nova", "Aronorf Xideliesi", "Vopiscus Zergherdus", "Tribal S", "Venomina The Fierce", "Demon Sekhmet", "K\u00f4sair", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Scrapper", "Scrapper", "Herald", "Weaver", "Weaver", "Vindicator", "Vindicator", "Spellbreaker", "Weaver", "Firebrand", "Scrapper", "Druid", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[348.8877, 30.5596, 23.5382, 39.2805, 27.9094, 68.9364, 124.8771, 59.6904, 68.735, 203.5334, 124.1887, 0.0, 31.429, 0.0, 29.4662, 0.0, 37.9031], [329.4774, 50.8875, 51.6817, 49.6005, 0.0, 50.895, 178.296, 74.6715, 95.2918, 111.0182, 253.08, 46.9597, 12.6997, 18.6984, 11.3956, 11.8948, 72.9399, 0.0, 0.0, 38.6055, 74.1031, 53.3764, 11.52], [207.0432, 52.2445, 39.8614, 73.5623, 0.0, 96.174, 179.8342, 137.9902, 147.6241, 180.0192, 431.775, 62.694, 31.9093, 13.5072, 43.349, 11.8948, 35.2507, 16.2086, 76.9523, 73.4807, 11.9812, 104.976], [744.5592, 77.2947, 34.2327, 91.0417, 8.0442, 83.6784, 247.9363, 104.8678, 166.5002, 416.1257, 405.0563, 28.0058, 9.338, 12.0305, 16.6656, 0.0, 40.1276, 21.7829], [512.1281, 645.4863, 633.7687, 64.6987, 135.8546, 57.0478, 24.2887, 36.9582, 89.453, 175.5624, 214.5555, 173.7918, 153.1068, 134.784], [1307.9556, 58.0796, 0.0, 68.112, 79.0686, 137.5218, 220.1082, 98.7818, 148.1448, 50.4979, 519.4125, 34.5667, 23.3717, 32.3232, 18.0959, 74.3089, 4.0421, 85.3536, 32.0333, 90.7124, 103.8576, 142.08], [1304.4717, 57.2925, 41.9082, 60.7912, 55.6227, 83.7486, 274.9254, 169.591, 234.1938, 357.34, 409.545, 60.2032, 48.2374, 8.4546, 31.0464, 17.1315, 57.368, 0.0, 174.5016, 52.6815, 12.7764, 64.9264, 49.92], [1189.503, 47.8207, 44.0062, 35.9588, 85.6413, 151.632, 290.7274, 230.5688, 278.3248, 438.869, 459.5625, 98.8402, 0.0, 19.9584, 39.136, 54.6728, 16.128, 102.8568, 91.3387, 90.221, 81.466, 112.896], [1184.526, 28.6598, 71.7915, 29.2508, 66.3647, 99.8244, 280.6589, 201.3088, 294.7275, 448.506, 428.5687, 56.9835, 45.2493, 5.9413, 26.8632, 41.1917, 8.1218, 39.6571, 15.1906, 134.4768, 120.267, 120.0654, 91.3836, 126.816], [2087.8515, 94.2029, 96.9672, 91.5577, 0.0, 0.0, 391.4122, 409.9911, 369.9716, 445.8076], [1082.9952, 66.6558, 90.315, 88.9133, 104.6727, 143.3484, 282.7565, 164.4412, 277.023, 417.4748, 505.7325, 90.5175, 71.0222, 20.1062, 36.5568, 43.679, 26.6438, 88.2979, 47.6544, 111.6247, 107.5838, 33.726, 105.696], [1065.078, 60.9564, 59.5107, 97.4273, 113.6489, 38.8908, 247.2371, 348.5451, 362.1608, 510.5683, 574.3462, 0.0, 51.4924, 7.1056, 0.0, 34.7452, 0.0, 96.9823, 28.607, 29.8248, 81.765, 65.52, 20.2048, 191.568], [3026.016, 135.0215, 99.1675, 107.9408, 367.7278, 569.1816, 881.831], [1675.2582, 34.1421, 95.5344, 43.9245, 66.6589, 212.355, 420.6387, 274.6929, 362.8117, 582.2675, 602.1338, 44.5556, 33.1346, 21.924, 61.648, 103.7415, 0.0, 39.78, 171.3442, 180.5076, 140.3556, 187.344], [286.1775, 54.0629, 219.2635, 101.7165, 254.03, 274.2714, 707.8701, 660.8078, 795.7903, 484.9338, 960.5925, 350.7097, 202.6079, 131.9808, 140.7575, 183.3551, 228.048], [2375.0244, 105.5203, 237.6335, 231.9742, 216.9481, 331.5546, 727.8672, 499.1756, 722.7594, 303.951, 1163.8688, 223.1955, 178.7026, 64.848, 153.1429, 41.8583, 194.3068, 85.2062], [2354.121, 62.7477, 151.3493, 261.5346, 340.0488, 662.8416, 721.9027, 752.9611, 1347.0599, 823.1513, 61.2967, 168.4575, 69.1992, 123.5498, 65.562, 274.5193, 81.3254, 54.7536, 448.0515, 275.2168, 169.708, 370.56], [3084.2469, 193.1282, 151.7702, 176.343, 263.4966, 442.6812, 887.8442, 513.1034, 736.8188, 1524.9589, 1431.4838, 140.5148, 242.3078, 47.2072, 150.3936, 162.635, 86.975, 221.5576, 44.1806, 268.9536, 423.936, 321.4739, 129.9452, 315.264]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

