created: 20230426221022000
creator: Drevarr
modified: 20230705163526694
modifier: drevarr
tags: ChartData
title: 202304262210_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Tika Rucola", "Rey Peltrow", "Primal Clone", "Eibh\u00ebar", "Tegan Parker", "Zadie Miststep", "High Sorcer Baradun", "Black Raspberry Pie", "Miphest\u00f6"];
const professions = ["Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.3011, 178.5342, 116.1332, 51.3233, 0.0, 13.632, 62.6702, 209.4985, 0.0, 97.1274, 0.0, 26.0878, 5.3768, 0.0, 2.277, 342.7668], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 462.6619, 27.7704, 226.5033, 0.0, 85.7872, 169.9802, 27.5814, 27.6428, 680.3461], [1423.5078, 521.1022, 113.1027], [42.1837, 847.5792, 324.8847, 55.6971, 38.3328, 67.776, 213.2822, 570.4306, 137.0006, 268.1021, 0.0, 108.5221, 126.1104, 0.0, 33.3808, 646.8276], [80.6397, 889.005, 379.0136, 73.1921, 65.7677, 66.816, 161.7221, 802.226, 81.7522, 511.9701, 0.0, 179.5071, 215.4386, 0.0, 64.348, 944.903], [40.8128, 1203.5478, 374.5768, 44.2843, 45.4925, 44.6208, 170.172, 1060.4992, 175.7818, 521.7019, 45.8105, 310.6822, 214.0944, 0.0, 176.7407, 1140.8268], [130.856, 1070.8386, 318.4513, 86.2451, 26.231, 65.1648, 244.9694, 1000.1116, 266.9856, 488.69, 78.3881, 231.2738, 356.9462, 42.3522, 124.4608, 1142.8219], [78.6435, 1318.6602, 462.2036, 89.3204, 219.7325, 79.2576, 192.001, 1297.8689, 192.3466, 383.9298, 19.4042, 140.9887, 262.3634, 43.2036, 82.4274, 1182.7249], [106.6137, 1574.1804, 488.1589, 78.8644, 109.9296, 67.0464, 294.4171, 1637.433, 286.9608, 690.1959, 0.0, 358.6053, 315.276, 40.4514, 84.1124, 1559.0102], [0.0, 1699.191, 535.7436, 146.726, 196.4794, 145.8816, 310.0651, 2522.8081, 593.7994, 926.4311, 48.6192, 373.2439, 426.6002, 47.6388, 280.0255, 2271.6778]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

