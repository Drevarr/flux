created: 20230531221142000
creator: Drevarr
modified: 20230705163532639
modifier: drevarr
tags: ChartData
title: 202305312211_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Legacy Of Mathus", "Cat Wigglebooty", "Tegan Parker", "Ryvalia Fazebringer", "Primal Clone", "Zefirokai", "Etchery Of Ascalon", "Brace Stonebrow", "Venomina The Siren", "Artakama Nahid", "Black Raspberry Pie", "Sub Train", "Crusader Siolith", "Miphest\u00f6", "Grasszanine", "Tika Fiery", "Sygaldry Verdandi", "Johosh Of The North", "Koralia Danai", "Blanco Padre Guard", "Solus Sanctus", "Drevarr Moonwillow", "Gavann", "Bella Sassy"];
const professions = ["Spellbreaker", "Scrapper", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Firebrand", "Tempest", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[523.5199, 30.1007, 69.1076, 109.5792, 309.1425, 105.6865, 141.141, 312.7324, 364.0408, 82.4525, 59.956], [561.8925, 171.7018, 8.3808, 778.8981, 462.0739, 0.0, 0.0, 0.0, 34.545, 13.6629, 22.4378, 48.739, 102.5676, 0.0, 0.0], [526.422, 60.8563, 133.7904, 875.385, 130.7124, 0.0, 50.4445, 108.78, 28.905, 109.2228, 116.466, 185.8963, 43.3992, 15.9386, 0.0], [403.767, 9.7805, 64.9728, 201.5331, 0.0, 0.0, 12.6675, 37.2072, 0.0, 1606.0337, 145.6154, 0.0, 10.9172, 83.4944, 0.0], [1286.5515, 33.2808, 25.5312, 212.4268, 24.355, 174.1829, 36.8304, 237.6288, 295.865, 0.0, 339.3306, 12.7295, 0.0, 77.2429, 0.0], [223.732, 510.8664, 598.545, 0.0, 0.0, 437.5042, 687.7823, 170.0864, 243.3068], [706.758, 301.429, 148.824, 1758.5512, 194.6162, 0.0, 69.5584, 45.9984, 62.51], [748.524, 0.0, 143.4896, 506.604, 369.42, 164.7585, 238.3934, 320.3012, 854.1009, 0.0, 49.6151], [699.1335, 180.6672, 0.0, 1880.716, 384.5402, 0.0, 86.3282, 215.34, 162.855, 61.9653, 96.4628, 95.5284, 241.9301, 48.0128, 69.7076], [538.0245, 0.0, 103.3776, 2190.4078, 222.0994, 0.0, 91.9181, 238.1616, 257.56, 267.5517, 208.586, 185.0935, 229.2608, 6.4205, 80.2093], [1881.2625, 88.8394, 546.3072, 384.3913, 143.225, 14.7204, 719.026, 223.0656, 58.28, 4.9026, 45.1388, 158.8318, 257.1602, 138.4627, 75.3335], [982.2345, 286.6224, 243.5184, 2198.9671, 342.3101, 147.9908, 176.6234, 123.5208, 336.285, 286.0368, 149.2344], [567.1965, 204.0317, 179.7552, 2360.038, 527.3184, 48.9073, 91.5124, 198.3792, 107.5125, 80.6915, 271.0302, 282.3422, 501.2468, 0.0, 7.1261], [980.9085, 91.4203, 128.1744, 2465.0842, 598.5958, 60.3283, 193.0326, 190.8312, 172.725, 135.0216, 211.0206, 87.5008, 434.9351, 7.0963], [622.2255, 583.7045, 132.624, 2037.1182, 508.326, 98.3475, 140.1086, 42.7128, 503.7225, 98.9355, 104.0298, 312.3883, 473.7517, 144.6579, 7.1261], [915.603, 527.7384, 0.0, 1880.716, 1388.6796, 1.5736, 102.557, 336.552, 457.1925, 0.0, 335.0536, 643.4695, 54.4511, 113.8227, 166.1516], [1202.3505, 586.2854, 0.864, 2587.249, 578.933, 34.6437, 60.1367, 363.0144, 230.8875, 204.8631, 43.4938, 373.1687, 567.4238, 231.8942], [1364.454, 614.1326, 19.5696, 3143.6048, 0.0, 56.9273, 67.034, 222.7992, 302.5625, 308.0582, 209.3098, 663.3091, 490.734, 16.2202, 0.0], [904.332, 676.619, 114.2208, 3007.4338, 1004.5862, 247.0997, 226.5721, 638.3832, 475.17, 0.0, 59.8423, 30.8634, 383.097], [1271.634, 482.9112, 301.8816, 3124.9299, 595.2442, 104.9971, 61.5342, 327.4944, 323.2425, 209.4442, 197.071, 522.3674, 839.0055, 121.8483, 244.3784], [1318.044, 498.9403, 147.2688, 3085.2458, 839.6875, 27.1312, 262.5459, 446.22, 904.045, 196.9065, 261.6208, 458.8347, 482.9167, 0.0, 69.8683], [1574.2935, 697.4026, 14.2992, 3584.7988, 1006.8206, 26.852, 193.9342, 436.896, 115.15, 231.1441, 103.7008, 584.868, 300.5594, 15.7414, 260.6131], [1483.131, 847.2341, 3.7152, 3440.8466, 1470.4586, 78.0689, 96.7417, 730.5576, 529.22, 450.4739, 381.9032, 353.9025, 174.4053, 0.0, 7.7155], [1534.845, 977.0971, 496.1088, 5771.316, 1785.7325, 174.6652, 240.4567, 414.7848, 769.2725, 687.8065, 557.3918, 915.2611, 1149.6734, 193.9379, 374.6849]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

