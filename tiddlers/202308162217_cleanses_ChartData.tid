created: 20230816221734000
creator: Drevarr
tags: ChartData
title: 202308162217_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Vanhelsing Wizard", "Sygaldry Verdandi", "Avatar Shazbott", "Rahani Sunray", "Solus Sanctus", "Reila Feres", "Milvia Rosalyn", "Aspros Gemeos", "Raziel Umbra", "Newtype Khan", "Cat Wigglebooty", "Eibh\u00ebar", "Miphest\u00f6", "F\u00f9gly", "Xo Zen Xo", "Klengah", "Super Druid", "Tegan Parker", "Drevarr Moonwillow", "Arriasa", "Zaedy Zae", "Tribal S"];
const professions = ["Virtuoso", "Firebrand", "Tempest", "Chronomancer", "Firebrand", "Druid", "Druid", "Spellbreaker", "Chronomancer", "Spellbreaker", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Tempest", "Scrapper", "Druid", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.5246, 0.5, 0.55, 0.0357, 0.0811, 0.0, 0.2143, 0.1064, 0.0575, 0.3394, 0.3, 0.1582], [0.2459, 0.0, 0.05, 0.0357, 0.037, 0.1486, 0.1444, 0.1429, 0.3617, 0.2069, 0.1468, 0.0, 0.1765, 0.0443, 0.0, 0.1, 0.0, 0.2019, 0.0259, 0.0, 0.0, 0.2766, 0.0291, 0.2836, 0.0, 0.2581, 0.1951], [1.234, 0.069, 0.4862, 0.0, 0.3824, 0.4051, 0.2222, 0.6143], [0.1148, 0.4737, 0.025, 0.0, 0.4815, 0.1757, 0.0749, 0.0893, 0.0638, 0.1724, 0.0734, 0.0, 0.2, 0.2342, 0.0222, 0.0429, 0.0354, 0.2885, 0.0037, 0.0, 0.1263, 0.4468, 0.0255, 0.2388, 0.274, 0.1774, 0.2439], [0.1639, 0.7105, 0.4, 0.0952, 0.5, 0.2162, 0.0909, 0.2768, 0.1915, 0.2184, 0.2477, 0.0, 0.1, 0.057, 0.4667, 0.1429, 0.1327, 0.1731, 0.0111, 0.0, 0.2421, 0.1383, 0.0618, 0.1642, 0.1644, 0.3387, 0.1951], [0.1818, 1.2388, 1.1918, 1.1613, 1.561], [0.131, 0.7407, 0.0135, 0.369, 0.8393, 1.1489, 0.0115, 0.7156, 0.1765, 0.3291, 0.1778], [0.5405, 0.1925, 0.4732, 0.7872, 0.5862, 0.4404, 0.1333, 0.3529, 0.2722, 0.6667, 0.7], [0.2295, 0.5789, 0.15, 0.0, 0.7037, 0.3108, 0.3476, 0.2679, 0.1915, 0.1954, 0.4771, 0.0, 0.3, 0.2152, 0.7778, 0.6286, 0.1239, 0.5385, 0.0, 0.0, 0.0, 0.4149, 0.0073, 0.403, 0.0, 0.2742, 0.2317], [0.1311, 0.0, 0.325, 0.3571, 0.1111, 0.6892, 0.1444, 0.5089, 0.617, 0.4368, 0.3486, 0.2, 0.1519, 0.5333, 0.3429, 0.0796, 0.4327, 0.0148, 0.0, 0.1474, 0.4255, 0.0836, 0.3433, 0.3973, 0.5161, 0.5122], [0.4754, 0.1053, 0.925, 0.4405, 1.4259, 0.6892, 0.0321, 0.2321, 0.6383, 0.7011, 0.4771, 0.0, 0.1529, 0.2025, 0.0444, 0.6571, 0.0885, 0.2308, 0.063, 0.0, 0.0211, 0.1064, 0.0582, 0.5672, 0.4521, 0.2258, 0.0], [0.6885, 1.1053, 0.5, 0.1071, 0.463, 0.3108, 0.3797, 0.2054, 0.0638, 0.2184, 0.5596, 0.0, 0.3, 0.2658, 0.0222, 0.3, 0.2301, 0.4423, 0.0, 0.0, 0.3684, 0.3085, 0.0582, 0.4179, 0.3562, 0.5323, 0.1951], [2.1064, 1.0345, 0.6606, 0.0, 0.5647, 0.1139, 0.8222, 0.8286, 0.3363, 0.9519, 0.0333, 0.0, 0.3684, 0.6596, 0.1673, 0.4776, 0.8904], [2.7021, 2.6667, 2.0, 0.1333, 1.6588, 0.5633], [1.2857, 1.4255, 1.6322, 1.2202, 0.0, 0.9, 0.3038, 1.0222, 1.4286, 0.3805, 1.5962, 0.2481, 0.0, 1.3579], [0.8197, 1.1842, 1.025, 0.6429, 0.8148, 1.9189, 0.1604, 0.3036, 1.8085, 0.931, 0.9358, 0.0333, 0.5882, 0.2089, 0.4, 0.6429, 0.3717, 1.7115, 0.0778, 0.0, 1.0947, 0.3617, 0.2945, 0.3433, 0.3836, 0.9839, 0.8049], [1.8214, 1.1667, 3.6216, 1.2781, 2.3839, 4.4468, 2.0, 2.6055, 0.1667, 2.0529, 0.0949, 0.8667], [1.082, 1.0263, 1.225, 1.0238, 0.6296, 2.4865, 0.877, 2.2321, 1.7021, 3.0, 1.5138, 0.2, 0.6882, 0.6519, 1.0889, 1.9714, 0.7522, 1.1538, 0.1778, 0.0, 0.5053, 1.9043, 0.4655, 1.3731, 1.2603, 1.3871, 1.7561], [1.2131, 1.1316, 0.8, 1.0833, 1.8148, 1.3919, 1.0695, 1.7143, 2.0426, 1.8736, 1.4679, 0.0667, 1.0412, 0.5063, 1.2444, 1.7, 0.7522, 1.5288, 0.237, 0.0, 1.0632, 2.1915, 0.5927, 0.9403, 2.137, 1.8387, 1.0122], [1.3279, 3.1316, 0.175, 0.9524, 1.3333, 2.2027, 1.3583, 2.4554, 3.0426, 1.5747, 1.3303, 1.2471, 0.6203, 1.3556, 0.1571, 1.1858, 1.5, 0.1556, 1.1895, 1.8617, 0.3636, 0.9552, 1.9726, 1.3548, 0.8171], [1.1803, 0.2895, 2.1, 1.8333, 1.8519, 2.5, 0.877, 2.5714, 3.2553, 1.8046, 2.4862, 0.0, 1.1118, 0.6139, 1.4444, 1.2857, 0.2478, 2.4135, 0.263, 0.0, 0.9263, 1.8085, 0.36, 1.7761, 2.2055, 1.871, 1.7073], [2.2131, 2.8947, 2.45, 2.4048, 2.7407, 3.3784, 1.6203, 1.9911, 5.4043, 3.2529, 0.9266, 0.0, 1.9118, 0.1582, 2.0444, 3.2857, 0.8673, 3.0, 0.1481, 0.0, 2.2211, 1.4362, 0.7164, 1.6269, 3.1233, 1.6452, 3.0488]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

