created: 20230607221050000
creator: Drevarr
modified: 20230705163534001
modifier: drevarr
tags: ChartData
title: 202306072210_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Solus Sanctus", "Koralia Danai", "Tegan Parker", "Newtype Khan", "Permanent Dawn", "Be\u00eb", "Tootsie Pop Rocks", "Smol Gluvs", "Mistwalker Cael", "Cyclotechnist Farra", "Husky Guard", "Xanvias Einzbern", "Shaca Booey", "Kary\u00edna", "Artakama Nahid", "Johosh The Great", "Inedible Plant", "Chrozz", "Etcherii", "Rozaalyna", "Grasszanine", "Eibh\u00ebar", "Sygaldry Verdandi", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Weaver", "Reaper", "Scrapper", "Reaper", "Vindicator", "Scrapper", "Dragonhunter", "Berserker", "Berserker", "Vindicator", "Tempest", "Firebrand", "Vindicator", "Willbender", "Firebrand", "Reaper", "Spellbreaker", "Chronomancer", "Firebrand", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[256, 278, 241, 424, 307, 1000, 290, 589, 476, 613, 4085, 229, 290], [363, 501, 268, 436, 300, 4349, 281, 512, 373, 474, 5393, 190, 1021], [280, 818, 240, 451, 246, 1306, 355, 288, 437, 11861, 5926, 193, 286], [450, 267, 295, 615, 6431, 1948, 1035, 348, 463, 604, 4576, 176, 235], [228, 650, 228, 386, 13141, 8031, 488, 545, 351, 409, 5907, 5190, 1249], [583, 331, 2126, 371, 601, 5372, 511, 723, 647, 886, 8746, 5027, 415], [401, 155, 2928, 509, 295, 1261, 400, 378, 385, 316, 5464, 7345, 3327], [581, 487, 2865, 570, 294, 5427, 422, 517, 247, 546, 5615, 10509, 1562], [324, 329, 2498, 1131, 19775, 8749, 255, 868, 256, 10499, 5714, 7330, 2435], [376, 470, 3012, 8784, 255, 897, 305, 336, 809, 5777, 236, 241], [538, 842, 2629, 564, 19298, 8616, 463, 371, 372, 3427, 997, 214], [21421, 819, 1025, 1898, 635, 449, 491, 12253, 2509, 8908, 2125], [279, 338, 216, 561, 227, 835, 1757, 351, 272, 300, 5374, 1886, 6788], [491, 397, 2123, 520, 24513, 1277, 140, 271, 476, 438, 1417, 1032, 317], [241, 734, 9249, 20560, 19159, 645, 188, 492, 388, 12313, 6081, 5193, 426], [287, 353, 242, 532, 283, 2660, 204, 274, 247, 261, 4054, 198, 276], [203, 229, 248, 550, 242, 7660, 320, 284, 286, 279, 5702, 1775, 176], [356, 231, 245, 391, 285, 7713, 146, 274, 360, 732, 5359, 4587, 1328], [280, 705, 1893, 447, 26668, 7916, 348, 304, 394, 251, 5637, 168, 223], [392, 432, 245, 456, 208, 7681, 504, 226, 281, 884, 879, 1115], [324, 394, 8251, 416, 275, 1158, 399, 255, 467, 236, 3672, 1185], [199, 374, 225, 471, 196, 8074, 382, 250, 241, 310, 5426, 1088, 4749], [295, 364, 197, 311, 230, 4530, 237, 211, 375, 189, 5014, 196, 203], [184, 489, 212, 507, 205, 8787, 347, 285, 248, 569, 3666, 142, 1222], [309, 236, 180, 445, 217, 8627, 126, 269, 262, 212, 5517, 401, 220]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

