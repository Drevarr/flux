created: 20230625214748000
creator: Drevarr
modified: 20230705163536426
modifier: drevarr
tags: ChartData
title: 202306252147_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Sakis Ranger", "Jacob Pine", "Irish Necroman", "Oo Dads Mad", "Arriasa", "Tacitus Kilgore I", "Ryvalia Fazebringer", "Rozaalyna", "Caelon Cai", "Tribal S", "Blancooo Padreee", "Smol Gluvs", "Be\u00eb", "Mammary Mission", "Primal Clone", "Newtype Khan", "Zayde Sunsabre", "Morton Saltbringer", "K\u00f4sair", "Grasszanine", "Raziel Umbra"];
const professions = ["Druid", "Reaper", "Reaper", "Spellbreaker", "Druid", "Spellbreaker", "Chronomancer", "Reaper", "Reaper", "Druid", "Spellbreaker", "Reaper", "Reaper", "Scourge", "Chronomancer", "Spellbreaker", "Spellbreaker", "Chronomancer", "Spellbreaker", "Spellbreaker", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0165, 0.0495, 0.0422, 0.0, 0.0122, 0.0148, 0.0075, 0.0304, 0.0737, 0.0, 0.0078, 0.0, 0.0116, 0.0588, 0.0], [0.0879, 0.099, 0.0361, 0.0, 0.0243, 0.0, 0.0, 0.0465, 0.0046], [0.033, 0.099, 0.1084, 0.0, 0.0456, 0.0, 0.0211, 0.0197, 0.0276, 0.0, 0.0902, 0.0, 0.0073, 0.0, 0.0], [0.0962, 0.0891, 0.1566, 0.0, 0.0456, 0.0325, 0.0648], [0.0577, 0.0594, 0.0241, 0.0, 0.0426, 0.0296, 0.0392, 0.0358, 0.0507, 0.0, 0.0039, 0.0, 0.0493, 0.0, 0.0], [0.0519, 0.0323, 0.1045, 0.0431, 0.1818, 0.1118, 0.0588, 0.0678], [0.0714, 0.1287, 0.0663, 0.0222, 0.0669, 0.0207, 0.0437, 0.0197, 0.0276, 0.0, 0.0118, 0.0364, 0.0363, 0.0, 0.0678], [0.0852, 0.099, 0.1325, 0.0, 0.0578, 0.0266, 0.0497, 0.025, 0.0, 0.0, 0.0078, 0.0364, 0.0334, 0.0, 0.0339], [0.1099, 0.0891, 0.1205, 0.0222, 0.0578, 0.0266, 0.0361, 0.0537, 0.0092, 0.0, 0.0, 0.0, 0.0522, 0.0294, 0.0], [0.0742, 0.0693, 0.0542, 0.0222, 0.0426, 0.0621, 0.0828, 0.0716, 0.0645, 0.0, 0.0118, 0.0, 0.0827, 0.0], [0.0687, 0.2871, 0.241, 0.0, 0.0517, 0.0089, 0.1009, 0.0698, 0.0, 0.0, 0.0, 0.0545, 0.0334, 0.0, 0.0508], [0.1071, 0.1881, 0.1988, 0.0222, 0.0851, 0.0237, 0.0633, 0.0733, 0.0369, 0.0039, 0.1455, 0.0537, 0.0, 0.0339], [0.2033, 0.1584, 0.241, 0.0667, 0.1216, 0.0651, 0.1175, 0.0537, 0.023, 0.0, 0.0235, 0.0, 0.0914, 0.0588, 0.0169], [0.1181, 0.1386, 0.241, 0.0, 0.155, 0.0769, 0.1521, 0.0501, 0.0138, 0.0896, 0.0039, 0.0943, 0.0, 0.0508], [0.1213, 0.1852, 0.1485, 0.0507, 0.0149, 0.0196, 0.0727, 0.1495, 0.0588, 0.2034], [0.2198, 0.3762, 0.3313, 0.0, 0.1033, 0.0562, 0.116, 0.0161, 0.0, 0.1343, 0.0, 0.1273, 0.0755, 0.0882, 0.1186], [0.2253, 0.3663, 0.1446, 0.0667, 0.1094, 0.0266, 0.1657, 0.0483, 0.023, 0.0, 0.0078, 0.0, 0.0871, 0.0, 0.0339], [0.217, 0.099, 0.1205, 0.0, 0.1155, 0.0888, 0.1114, 0.1324, 0.0323, 0.0235, 0.0, 0.106, 0.0588, 0.0], [0.217, 0.6535, 0.3434, 0.0, 0.2036, 0.0089, 0.0768, 0.0519, 0.0276, 0.0, 0.0, 0.0827, 0.0, 0.1356], [0.239, 0.6436, 0.4277, 0.0, 0.0942, 0.0473, 0.1461, 0.0769, 0.0507, 0.0448, 0.0, 0.0, 0.1001, 0.0588, 0.0339], [0.3187, 0.4356, 0.253, 0.0, 0.1945, 0.1479, 0.2636, 0.1324, 0.0276, 0.0, 0.0039, 0.0909, 0.0914, 0.0294, 0.0508]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

