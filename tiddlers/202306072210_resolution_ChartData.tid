created: 20230607221050000
creator: Drevarr
modified: 20230705163534140
modifier: drevarr
tags: ChartData
title: 202306072210_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Kaehln Lao", "Chrozz", "Belvyn Brightblade", "Sub Train", "Blanco Padre Guard", "Rafaellagabriela", "Gabe Malhorn", "Crusader Siolith", "Etcherii", "Sygaldry Verdandi", "Johosh The Great", "Solus Sanctus", "Koralia Danai"];
const professions = ["Dragonhunter", "Firebrand", "Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[53.874, 109.388, 878.5545], [0.0, 333.0576, 82.2425, 0.0, 116.1518, 42.4734, 85.1123, 119.531, 111.1682, 293.3431], [0.0, 54.878, 789.6735, 0.0, 86.1773, 31.2625, 29.0892, 43.7681, 32.2072, 54.9167, 14.49, 6.2997, 67.2823], [23.616, 5.934, 1751.4115], [2178.724, 59.2592, 447.8141, 150.3022, 0.0, 178.848, 37.6766, 178.3937, 83.421, 116.9366, 174.0766], [71.4937, 117.576, 3190.6, 216.1984, 253.5854], [3649.8185, 83.2885, 375.9264, 216.6756, 0.0, 113.5933, 52.5493, 224.9274, 119.094, 32.8141, 189.1798], [3892.532, 146.52, 137.2901, 185.4996, 0.0, 171.2966, 119.8697, 187.7603, 94.093, 152.3819, 272.6858], [156.2715, 142.554, 4863.386, 210.1422, 506.4014, 109.8296, 41.8488, 126.4604, 40.7222, 246.5263, 114.954, 144.4377, 294.8534], [314.2958, 180.274, 5683.826, 201.2859, 717.4478, 212.0057, 0.0, 147.9719, 50.1889, 189.5566, 132.687, 106.9431], [204.7027, 298.264, 5751.0565, 119.951, 518.8224, 171.2736, 0.0, 168.6388, 66.889, 263.3349, 84.525, 97.9616, 220.3606], [56.826, 266.386, 6215.9725, 175.4984, 422.2027, 168.9819, 0.0, 153.3622, 56.1152, 352.938, 129.398, 129.9661, 311.7593], [23.985, 390.31, 6789.141, 402.0509, 684.3619, 170.2359, 16.1532, 166.0554, 100.7586, 228.3918, 117.944, 94.875, 336.509], [480.6225, 396.658, 7280.2655, 306.6501, 698.7614, 163.5769, 20.7564, 188.9827, 42.1943, 56.4992, 84.295, 178.0614, 210.8602]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

