created: 20230506003334000
creator: Drevarr
modified: 20230705163528463
modifier: drevarr
tags: ChartData
title: 202305060033_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "High Sorcer Baradun", "Primal Clone", "Venomina The Siren", "Johosh The Great", "Eibh\u00ebar", "Tegan Parker", "Miphest\u00f6", "Black Raspberry Pie", "Artakama Nahid"];
const professions = ["Scrapper", "Tempest", "Chronomancer", "Tempest", "Willbender", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[33.0634, 131.1626, 0.0, 0.0, 0.0, 0.0, 282.1272, 48.3786, 137.2259, 16.9924, 1.032, 2.7486, 96.39, 2.7606, 156.51, 497.8233], [281.3941, 701.7981, 196.5236, 44.3889, 20.0569, 1070.5985, 126.1485], [178.5599, 369.9725, 31.9158, 0.0, 0.0, 0.0, 822.9947, 288.3209, 255.0502, 33.9293, 33.6845, 19.5616, 395.0856, 76.7447, 547.362, 788.4657], [337.4774, 616.3595, 126.5904, 40.1931, 41.716, 815.1991, 170.2354, 139.3479, 44.6292, 54.4896, 38.5091, 434.322, 32.7591, 589.098, 810.0675], [322.4566, 716.1685, 148.3817, 0.0, 9.812, 8.9208, 1370.5442, 172.3162, 174.5134, 9.702, 0.0, 120.7612, 328.4064, 38.9705, 585.996, 1026.0855], [216.1562, 870.585, 87.4332, 48.0519, 0.0, 1175.6537, 260.2301, 244.1368, 34.2065, 8.999, 34.7371, 582.4224, 93.9064, 615.888, 1139.9859], [222.0222, 871.3688, 50.8239, 33.0336, 44.327, 1138.903, 185.9715, 231.8087, 44.4074, 45.0778, 42.6612, 729.162, 134.5792, 653.676, 1359.9315], [677.1767, 1570.0315, 197.9986, 41.8914, 2.936, 1986.027, 461.9376, 672.6898, 135.7448, 102.3331, 89.913, 1243.0908], [410.0923, 1079.8702, 268.4682, 127.7388, 33.7847, 11.868, 1506.4108, 552.8426, 386.2131, 103.1184, 75.5011, 75.3222, 944.1684, 193.196, 1088.238, 1795.8951], [385.2059, 1030.4883, 299.043, 90.3096, 33.6656, 1443.6746, 554.4032, 533.544, 115.3984, 181.5907, 90.7902, 954.3744, 223.6546, 970.644, 2054.6258]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

