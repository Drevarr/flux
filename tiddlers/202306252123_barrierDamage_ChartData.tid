created: 20230625212343000
creator: Drevarr
modified: 20230705163535629
modifier: drevarr
tags: ChartData
title: 202306252123_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Sakis Ranger", "Grasszanine", "Smol Gluvs", "Latedoctor", "Rina Of Theros", "Tootsie Pop Khorne", "Be\u00eb", "Irish Necroman"];
const professions = ["Spellbreaker", "Druid", "Spellbreaker", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[252, 2445, 3616, 7579, 5981, 8988, 5302, 13574, 5027, 1364, 7595, 0, 9097, 5867, 6246, 3865, 7411, 3098, 2120, 4827, 285, 4566, 3219, 7229, 4625, 10836], [0, 1904, 4303, 15141, 11129, 14252, 4340, 12335, 4697, 0, 15590, 0, 7748, 2347, 4519, 2612, 7723, 0, 7790, 8399, 0, 7713, 4535, 12289, 8340, 9897], [269, 2864, 269, 8984, 8034, 11694, 8396, 10460, 5088, 174, 1877, 310, 5848, 5824, 1167, 12309, 9510, 2968, 4246, 12147, 0, 3196, 16113, 18823, 0, 18413], [2823, 29212, 14212, 44760, 32369, 50239, 64810, 3274, 46708, 533, 73067, 2033, 2123, 28355, 58377, 53775, 41965, 0, 43018, 59984, 32267, 60522, 38238, 1951, 56970, 70815], [1441, 33364, 20036, 244, 47741, 24813, 30530, 27569, 5073, 168, 61400, 25050, 79529, 79744, 79860, 0, 71093, 66754, 48255, 41772, 38321, 66405, 50976, 64737], [14628, 18784, 68581, 57783, 23554, 42856, 37883, 0, 48442, 27662, 24858, 28040, 47442, 85282, 36702, 0, 51976, 61849, 10194, 50779, 70998, 144048, 12823, 87671], [6130, 58269, 22824, 6463, 35148, 40454, 11416, 60156, 13774, 50224, 484, 35578, 46382, 31374, 68489, 62429, 6234, 93917, 47885, 51281, 61608, 27180, 155617, 48818, 93814], [2449, 33153, 9130, 52517, 64696, 82133, 67968, 90149, 45418, 55842, 30875, 52241, 37060, 40614, 32440, 41689, 2314, 275, 126705, 26607, 69019, 67825, 70479, 15116, 83262], [39146, 61256, 29527, 4722, 33241, 59386, 25847, 66405, 40645, 0, 51942, 743, 41206, 75971, 59094, 67540, 2589, 62088, 40697, 46602, 68383, 65967, 164930, 4406, 92810]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

