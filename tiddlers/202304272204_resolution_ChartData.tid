created: 20230427220456000
creator: Drevarr
modified: 20230705163527063
modifier: drevarr
tags: ChartData
title: 202304272204_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Ever Moore", "Vinnakh", "Malfax Jinn", "Fuzzy Toe Beans", "La Morte Vivante", "Choo Sayaccho", "Al Darasuum", "Klenga", "Koralia Danai", "Evil Stepmother", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[186.5589, 277.6192, 350.3002, 48.2963], [161.0414, 575.28, 0.0, 54.1946, 72.6582, 73.9066, 82.2093], [105.4816, 81.1826, 41.4968, 50.0413, 114.3082, 304.1539, 24.1542, 40.0192, 120.9397, 196.8019, 7.801], [0.0, 0.0, 154.8207, 202.5487, 181.2608, 30.5256, 264.6151, 25.3743, 83.5267, 280.0598, 46.8018, 37.2389, 54.1754], [82.6896, 203.5757, 81.2399, 133.0656, 536.2963, 56.2545, 104.7428, 116.5548, 62.7782, 1.7952], [177.1196, 224.4598, 402.4944, 99.6159, 77.4346, 361.2758, 54.3591, 82.044, 119.8553, 53.8272, 0.0], [164.4132, 508.5234, 130.1072, 269.2574, 853.9862, 166.698, 135.1903, 139.7997, 259.0963, 21.1398], [71.214, 39.6533, 146.6928, 40.0294, 10.026, 78.0759, 242.0563, 156.1756, 133.5012, 504.4486, 86.1161, 331.5418, 379.2787, 95.1831, 29.9916, 110.944, 196.439, 65.3997], [345.8598, 274.0997, 128.9952, 168.1317, 54.7756, 337.2273, 666.5221, 358.7612, 207.6127, 725.3215, 68.2066, 307.4136, 673.0099, 95.6205, 140.0673, 188.3171, 379.4515, 27.7331], [608.4078, 158.2272, 164.376, 188.828, 112.95, 266.0364, 549.7338, 361.8552, 265.9978, 604.4069, 150.3043, 403.1246, 801.1958, 142.9569, 137.606, 105.8989, 490.8557, 80.3162], [749.892, 276.7046, 138.1536, 104.0737, 40.2063, 200.7666, 692.9248, 513.4136, 267.8525, 734.386, 153.0585, 461.8819, 871.3123, 145.6542, 79.6738, 185.2995, 374.3712, 89.1181]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

