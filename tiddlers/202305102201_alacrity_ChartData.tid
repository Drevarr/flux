created: 20230510220110000
creator: Drevarr
modified: 20230705163529402
modifier: drevarr
tags: ChartData
title: 202305102201_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Eibh\u00ebar", "Primal Clone", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Black Raspberry Pie", "Mac Aaroni", "Miphest\u00f6"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 14.5794, 34.131, 138.5363, 11.0976, 18.4024, 0.0, 17.1288, 7.2213, 2.7518, 6.7743, 12.9184, 190.3082, 19.3114, 13.7416, 38.149], [38.0297, 46.8087, 95.053, 39.3851, 75.5616, 144.9753, 70.8768, 18.0274, 0.0, 0.0, 35.8092, 33.4807, 59.0038, 9.3475, 29.3706, 46.8496], [8.6112, 33.9965, 334.337, 72.8486, 33.9048, 403.2827, 66.7699, 33.1344, 0.0, 28.5768, 57.3153, 21.9001, 343.0118, 90.9586, 66.8203, 163.4716], [16.5204, 57.5224, 370.303, 235.4841, 58.5072, 289.5018, 59.4173, 81.5818, 0.1717, 70.9657, 75.7173, 134.6491, 300.0054, 118.8984, 55.9012, 97.0456], [719.32, 201.332, 39.2496, 354.808, 76.1098, 31.1501, 43.1827, 55.7203, 81.7908, 514.206, 86.3362, 270.7238], [46.2123, 271.213, 312.464, 0.0, 623.2143, 182.4912, 44.7408, 87.0534, 37.73, 43.1504, 404.5087, 207.3917, 0.0, 285.7826], [36.6725, 39.2097, 673.078, 555.5221, 137.9448, 703.3323, 86.9069, 43.7861, 8.584, 56.0423, 60.9339, 40.6279, 632.2137, 63.7891, 42.0714, 495.0999], [35.671, 35.101, 676.9315, 369.3382, 138.108, 618.0527, 160.3008, 64.5466, 40.0014, 142.4077, 91.3409, 96.0086, 527.9182, 224.8027, 62.4809, 396.883], [45.4428, 66.4025, 691.6115, 427.7273, 82.2528, 645.6563, 174.145, 55.3363, 5.3757, 138.227, 89.7631, 99.2956, 681.4528, 186.1286, 14.7294, 432.3549], [68.7662, 736.569, 595.3203, 160.5888, 1052.081, 197.6602, 64.3219, 133.0409, 72.1672, 49.1127, 778.4767, 138.9288, 432.0202]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

