created: 20230515002743000
creator: Drevarr
modified: 20230705163530049
modifier: drevarr
tags: ChartData
title: 202305150027_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Drogo Discourteous", "Tika Mi", "Artakama Nahid", "Ever Moore", "Belvyn Brightblade", "Osh Kosh Johosh", "Cuscuszera", "Hyde En Sikh", "Ark Darkness", "Sub Train", "Tribal S", "Gabe Malhorn", "Lucas Ryn", "Aronorf Xideliesi", "Miphest\u00f6", "Koralia Danai"];
const professions = ["Spellbreaker", "Firebrand", "Tempest", "Tempest", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Druid", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[49.2804, 182.5106, 197.1592, 99.6033], [251.1335, 214.0586, 54.2084, 28.8618, 28.0449, 11.0295], [27.378, 82.6956, 175.9522, 18.5749, 62.1756, 74.4198, 0.0, 4.6316, 37.6584, 82.044, 36.1869, 40.619, 33.1743, 22.044], [29.3717, 128.1056, 196.9935, 97.6131, 78.0649, 78.0858, 18.3825, 0.0, 22.0116, 16.2767, 43.4833, 76.4795, 34.225, 34.2571, 14.52], [163.8702, 11.7135, 4.8731, 215.9808, 203.4679, 158.4845, 89.039, 24.288], [184.6541, 354.8657, 90.1299, 139.7858, 37.3821, 110.3466, 0.0], [94.9946, 253.7449, 279.6678, 68.5187, 79.7536, 119.2366, 36.0525, 8.674, 10.764, 47.6697, 119.9894, 123.4556, 60.5774, 70.1877, 9.614], [123.6768, 172.4463, 324.6891, 317.0891, 175.2274, 197.2738, 126.852], [60.2035, 252.004, 288.4489, 168.4063, 159.8143, 89.9086, 50.7585, 0.0, 16.848, 46.1448, 92.6413, 107.9879, 41.8387, 45.3808, 21.318], [249.5376, 728.495, 361.2632, 145.0764, 236.9152, 126.711, 44.5368, 84.9108], [430.6023, 174.1873, 152.4454, 150.3977, 49.7325, 22.4416, 147.617, 281.8211, 398.0561, 103.7098, 140.7692, 0.0], [515.7594, 533.9866, 207.8306, 198.2711, 134.9088, 50.1315, 16.0545, 62.9148, 99.9804, 201.4864, 223.9961, 93.6936, 49.4169, 46.948], [93.5766, 801.2285, 398.6026, 210.0154, 200.1636, 99.6075, 14.911, 92.0244, 49.1615, 274.4372, 374.6635, 127.4011, 184.7227, 18.7], [209.561, 598.0198, 679.6194, 287.9113, 162.9615, 245.622, 43.5195, 13.4442, 19.0944, 108.9309, 232.3896, 271.8316, 157.8192, 158.9314, 50.38], [166.5144, 616.59, 745.56, 361.0737, 231.1244, 176.243, 89.6895, 21.1481, 61.464, 137.4067, 180.6335, 302.2897, 129.5078, 173.7958, 60.192], [228.4589, 597.7296, 785.3232, 433.0041, 401.6851, 210.2451, 71.022, 56.6202, 15.3833, 392.6138, 170.1269, 216.7157, 16.214], [245.7, 1008.7412, 801.8912, 482.4741, 384.7211, 245.2554, 135.3465, 27.3966, 115.2684, 135.7824, 384.6496, 559.1309, 184.9848, 203.7216, 95.876]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

