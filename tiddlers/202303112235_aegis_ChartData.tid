created: 20230311223557000
creator: Drevarr
modified: 20230705163521692
modifier: drevarr
tags: ChartData
title: 202303112235_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Drevarr Moonwillow", "Zaylen Harker", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[434.9898, 33.4636, 0.0, 0.0, 74.0655, 29.0628, 250.1738, 163.5049, 223.5191, 189.8489, 304.1662, 0.0, 6.1898, 5.544, 0.0, 6.878, 0.0, 42.6517, 22.176, 42.7584, 35.604, 54.5454, 46.3232, 93.456], [515.1195, 12.3487, 14.6858, 0.0, 20.2577, 46.4724, 43.3504, 425.4404, 113.1264, 405.7177, 249.0188, 0.0, 5.3894, 0.0, 14.8176, 6.345, 16.1945, 48.2558, 5.4936, 25.3368, 46.4715, 35.9377, 54.2388, 142.464], [963.0495, 73.6037, 0.0, 33.9915, 32.8145, 115.0578, 244.1606, 101.2396, 137.6003, 104.2723, 397.575, 14.9445, 24.3322, 10.0624, 27.5352, 0.0, 55.8279, 0.0], [1082.4975, 0.0, 0.0, 134.397, 168.48, 124.7373, 82.3962, 190.7137, 482.0427, 352.0462, 59.778, 40.607, 0.0, 3.2592, 29.0347, 23.914, 0.0, 158.5488, 188.9393, 79.4102, 59.2592, 86.592], [1294.5177, 36.639, 103.4146, 37.9582, 59.3995, 106.353, 407.2141, 579.1139, 539.3357, 506.9062, 561.0938, 162.567, 47.7038, 0.0, 73.3656, 35.4051, 0.0, 64.0844, 9.9691, 98.532, 65.4638, 68.9926, 80.9116, 80.352], [1010.331, 74.6893, 145.1181, 190.275, 154.8509, 185.8194, 419.52, 431.6435, 466.4349, 621.201, 583.11, 183.6473, 194.5506, 34.1788, 32.256, 90.0229, 77.3097, 136.3826, 49.775, 59.8944, 77.0558, 116.6256, 34.5576, 225.84], [2276.9775, 163.2471, 122.194, 185.6632, 144.3542, 482.625, 826.4544, 737.352, 1054.8485, 1289.4306, 1289.7675, 199.017, 251.5924, 123.0768, 166.2192, 229.486, 75.6193, 94.9716, 138.7512, 290.7816, 312.2595, 235.6427, 164.318, 192.144]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

