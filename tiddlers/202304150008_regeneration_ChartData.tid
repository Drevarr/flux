created: 20230415000841000
creator: Drevarr
modified: 20230705163525623
modifier: drevarr
tags: ChartData
title: 202304150008_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Elonith Primal", "Cat Wigglebooty", "Johosh The Great", "Mac Chiato", "Lucas Ryn", "Zadie Miststep", "Tegan Parker", "Stoic Rapidfire", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24.219, 591.9538, 276.5686, 126.9348, 86.9915, 332.9471, 631.1433, 741.0622, 149.5884, 130.3495, 133.0468], [594.4184, 570.0228, 38.8908, 67.6784, 0.0, 357.4366, 234.5641, 340.7397, 32.465, 157.861, 660.084, 119.6296, 88.7004, 258.6478, 124.4443], [79.0992, 149.1728, 85.5158, 54.432, 291.7242, 264.1275, 350.5517, 392.9067, 71.7444, 109.8526, 94.576, 274.8164, 205.355, 63.1351, 46.2282, 194.7097, 416.107, 361.0822, 90.4032, 89.8834, 87.0593], [72.0144, 99.2732, 79.5829, 99.792, 207.1386, 317.4525, 176.6041, 401.5593, 110.8692, 78.5869, 0.0, 383.1795, 126.695, 74.0532, 0.0, 57.2355, 532.8794, 479.6994, 179.31, 165.7807, 152.5801], [168.3504, 162.5494, 113.0477, 92.664, 264.9708, 141.345, 219.0019, 419.52, 98.9352, 147.2639, 53.774, 434.3959, 0.0, 161.0432, 80.0344, 47.7259, 156.6617, 423.0056, 407.3142, 102.942, 88.1584, 52.7789], [103.1004, 255.8874, 109.595, 601.1188, 0.0, 294.8177, 146.2551, 84.6032, 421.0352, 1133.3994, 732.2882, 185.5536, 99.3006, 157.1724], [152.064, 218.0853, 115.1797, 79.992, 387.2835, 219.1725, 252.6863, 442.0692, 106.5636, 146.4957, 8.487, 324.4155, 271.2721, 80.8889, 108.0006, 204.7396, 497.2083, 583.4683, 76.6776, 99.1141, 158.272], [205.7616, 644.2609, 125.7939, 193.176, 309.2661, 884.5875, 496.1279, 684.9975, 279.0216, 107.9321, 271.492, 462.565, 207.4526, 230.4668, 187.5843, 347.3377, 905.9118, 1185.8344, 117.0288, 96.8764, 115.2598], [633.744, 760.4429, 628.0888, 384.876, 1554.6609, 970.245, 2104.1605, 1989.4425, 590.616, 892.9557, 226.872, 2464.048, 19.5753, 944.8639, 472.7063, 236.3627, 1364.4943, 2310.0415, 2671.3334, 793.1436, 502.9832, 831.138]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

