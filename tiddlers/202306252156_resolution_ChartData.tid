created: 20230625215649000
creator: Drevarr
modified: 20230705163537003
modifier: drevarr
tags: ChartData
title: 202306252156_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Aemilius Scorchwill", "Belvyn Brightblade", "Raelyn Sunray", "Imalou", "Mmathuss", "Crusader Siolith", "Sygaldry Verdandi", "Bella Sassy", "Koralia Danai", "Tika Fiery", "Solus Sanctus"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[950.1022], [0.0, 11.8737, 31.8614, 6.5562, 1125.5578, 160.2594, 23.5695], [253.0311, 0.0, 60.049, 96.3144, 38.8191, 106.5456, 234.4186, 268.1827, 37.3067, 634.185], [79.2233, 42.1592, 73.0038, 23.6771, 764.1595, 73.5029, 367.0433, 118.0858, 260.8887, 333.4548, 256.221, 0.0], [113.3924, 23.7474, 64.0099, 65.698, 836.0165, 156.2022, 191.7595, 319.6742, 62.016, 229.1995, 332.416, 173.7466, 0.0, 51.9326, 51.3677, 0.0, 35.0781, 112.1463, 247.008, 283.8845, 41.6909, 216.24], [57.876, 48.096, 157.7763, 51.4645, 1205.8685, 97.5757, 466.8132, 227.471, 54.2592, 188.2815, 251.3896, 170.4024, 0.0, 57.1761, 94.8121, 11.4405, 41.6498, 130.6242, 182.4274, 173.5546, 58.7105, 962.115], [61.7715, 157.0635, 261.2064, 149.9096, 1392.1531, 134.699, 335.6936, 228.5107, 29.9136, 219.9708, 263.5436, 246.7542, 0.0, 154.1104, 76.8663, 89.784, 53.2287, 161.352, 95.9645, 57.6352, 743.835], [97.2094, 324.8735, 631.2966, 285.0083, 1687.7328, 386.2454, 1005.7078, 221.999, 130.6368, 172.7319, 242.5598, 232.091, 46.9022, 92.6953, 93.8654, 30.218, 17.857, 70.4497, 228.7613, 280.4602, 51.9482, 1175.295], [76.886, 373.7961, 470.0758, 176.7459, 2013.2026, 286.9117, 1011.1998, 270.9734, 166.2336, 265.9455, 330.8059, 222.8814, 40.0646, 64.3684, 79.6858, 39.7294, 106.5897, 152.3482, 249.3072, 134.8956, 1080.18], [121.8958, 322.0177, 415.4426, 341.6703, 1859.2234, 523.9198, 851.7053, 0.0, 43.8528, 203.6205, 417.3898, 314.5139, 40.0277, 162.6486, 81.7643, 5.336, 69.9068, 87.2298, 190.1165, 243.8784, 145.5872, 1333.905], [129.9539, 176.828, 500.5021, 0.0, 2142.7262, 360.4822, 822.1862, 300.577, 33.9072, 282.9701, 320.9892, 264.9161, 63.0907, 213.9786, 141.7962, 0.0, 39.2805, 67.8478, 304.4971, 492.2669, 105.3232, 1108.23]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

