created: 20230419215809000
creator: Drevarr
modified: 20230705163525877
modifier: drevarr
tags: ChartData
title: 202304192158_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Drevarr Moonwillow", "Ark Darkness", "Gabe Malhorn", "Sygaldry Verdandi", "Solus Sanctus", "Koralia Danai", "Bella Sassy", "Johosh The Great", "Jupi Jupi Jupi"];
const professions = ["Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 60.984, 22.4486, 26.0957, 26.5242, 48.755, 7.105, 0.0, 10.827, 2.7092, 34.9774, 23.532, 8.9685, 24.3936, 10.3586, 66.836, 73.551, 43.0099, 4.7141, 2.2635, 30.2971], [0.0, 0.0, 47.5675, 20.3174, 150.8458, 55.3945, 51.9728, 31.2052, 0.0, 16.2663, 198.2001, 0.1147, 35.8704, 54.4791, 30.9792, 74.8779, 45.3838, 35.3545, 30.4243, 12.3165, 14.8971, 4.4645], [41.1645, 126.1498, 46.5667, 168.455, 81.1367, 92.4395, 7.9008, 0.0, 0.0, 35.5049, 2.7523, 128.8536, 89.3038, 74.5248, 85.6804, 54.1156, 30.4662], [33.4954, 234.2246, 63.4756, 78.6906, 60.3641, 0.0, 48.9559, 71.7037, 58.512, 46.1784, 49.728, 32.2596, 136.1514, 28.5337, 107.8531, 30.3034, 11.5018, 9.7128], [0.8392, 9.7318, 245.8526, 75.7642, 330.9696, 117.7622, 115.7444, 64.6839, 0.0, 72.5975, 124.1484, 0.0, 416.4528, 137.772, 69.1488, 116.3123, 159.9752, 146.2493, 134.1734, 12.2296, 15.2919, 88.165], [25.4442, 35.3957, 181.7323, 77.3626, 368.7341, 139.5941, 107.8461, 86.34, 0.0, 0.3876, 74.8122, 131.6813, 249.6936, 125.8458, 113.9712, 164.5538, 161.2688, 110.5538, 193.1069, 24.4012, 35.9268, 82.4736], [25.9036, 381.5856, 128.4403, 565.8307, 145.0033, 207.4038, 94.1839, 0.0, 87.1225, 78.8425, 297.2664, 93.8834, 89.712, 135.1057, 251.0662, 126.6964, 73.7078, 61.7177, 36.769, 84.5866], [41.8751, 74.0513, 301.6094, 117.7133, 617.1734, 154.7136, 168.3998, 12.1638, 37.5523, 94.7273, 101.1191, 264.9576, 95.7916, 117.936, 194.4457, 289.6586, 93.6155, 125.856, 15.398, 20.6612, 36.3293], [0.6838, 91.2458, 314.5032, 130.607, 424.9565, 186.7121, 129.0057, 90.8303, 0.0, 146.0597, 87.3575, 255.036, 232.3234, 106.176, 221.748, 221.6368, 150.285, 79.0157, 7.4962, 32.821, 68.4326], [0.0, 91.086, 555.3029, 154.6896, 987.3926, 229.3332, 285.4118, 100.3794, 50.0131, 225.1971, 123.195, 319.908, 231.1784, 129.0912, 232.9945, 302.5946, 197.0074, 231.6845, 47.8556, 64.6156, 109.6354]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

