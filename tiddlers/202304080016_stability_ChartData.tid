created: 20230408001602000
creator: Drevarr
modified: 20230705163524846
modifier: drevarr
tags: ChartData
title: 202304080016_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Etcheryy", "Smol Daddy Tika", "Smol Gluvs", "Jeckyll Mbs", "Kmpek", "Kos\u00e4ir", "Kos\u00e4ir", "Vocare Veilrender", "Arcanophage Farra", "Mistwalker Caelon", "Kiloak", "Gavann", "Xyntharos", "Ark Darkness", "Air One Com", "Aronorf Xideliesi", "Ryvalia Fazebringer", "Mmathuss", "Viral Marketing", "Solus Sanctus", "Sister Elon\u00edth", "Bella Sassy", "Koralia Danai"];
const professions = ["Chronomancer", "Berserker", "Scourge", "Berserker", "Vindicator", "Vindicator", "Herald", "Vindicator", "Spellbreaker", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 6.8208, 0.4934, 7.3186, 11.6554, 1.9845], [1.2725, 0.0, 0.3773, 1.7052, 0.0, 2.1614, 0.0, 1.3598, 0.0, 0.9658, 1.0512, 0.8064, 1.2039, 3.1891, 0.0, 0.0, 0.0, 0.0, 1.7037, 1.248, 2.2464, 1.8837, 2.0976, 0.0, 0.0, 5.9976], [1.3764, 0.9442, 1.9997, 0.7389, 1.1167, 0.0, 0.2045, 0.4778, 2.4093, 0.4292, 0.0, 1.728, 1.8213, 0.0, 0.0, 2.929, 2.538, 4.1712, 3.3696, 1.1232, 0.7535, 1.4352, 2.1067, 1.1844, 0.0], [0.5454, 1.346, 1.7356, 0.2274, 0.0, 1.0238, 1.0906, 0.0, 0.0, 1.0016, 0.0, 0.432, 1.9139, 1.7395, 1.1611, 1.4652, 3.0005, 3.2571, 2.82, 4.2432, 1.5725, 1.932, 0.8501, 0.9024, 1.0496], [0.2857, 2.0894, 0.415, 1.4778, 0.0, 1.1755, 1.1587, 0.0, 0.0, 1.252, 0.0, 1.296, 0.4939, 1.5221, 0.0, 0.0, 4.715, 1.9458, 5.405, 0.1248, 0.6739, 2.3023, 3.0912, 0.7022, 0.376, 9.1463], [0.2857, 3.9778, 1.8488, 0.8526, 5.8173, 0.3307, 2.7327, 0.6796, 0.8335, 1.0147, 4.692, 5.4331, 0.0, 12.595], [0.6446, 1.3632, 0.0, 2.1024, 1.1045, 0.0, 7.144, 7.6986, 6.9325, 9.984, 3.7066, 4.4372], [0.0, 0.0, 0.0, 1.9326, 3.2463, 0.0, 1.295, 0.0, 0.0, 1.3593, 0.0, 3.5712, 0.3396, 3.4066, 0.2549, 2.3088, 1.5002, 3.0033, 1.2925, 0.7488, 3.0326, 1.5488, 4.1952, 0.0, 1.5604, 11.6953], [1.714, 2.2702, 3.773, 3.183, 0.0, 4.2091, 4.7712, 2.7563, 0.0, 2.182, 1.7136, 1.296, 2.1609, 2.2469, 0.0, 0.0, 4.1435, 6.8949, 4.9938, 5.2416, 1.3478, 2.4697, 2.3184, 3.5112, 1.598, 0.0], [0.9869, 2.3706, 0.981, 2.6715, 2.0257, 0.0, 1.7722, 1.3598, 3.5251, 0.7869, 0.0, 0.7776, 1.9448, 0.0, 0.2549, 2.1312, 6.4296, 5.5413, 5.4637, 5.616, 3.3696, 1.2139, 3.7536, 4.3613, 1.2032, 9.1463], [2.8827, 5.0024, 6.98, 4.0925, 8.1286, 10.5038, 8.7926, 6.5415, 2.7974, 7.4759, 3.5136, 5.472], [0.2264, 1.5739, 1.9872, 0.0, 2.8092, 0.0, 2.5205, 8.7157, 7.7832, 11.9263, 10.8576, 5.616, 4.7302, 8.6664, 6.1723, 2.8489], [1.0128, 3.797, 2.3393, 1.9326, 2.2594, 3.9816, 2.6582, 0.1838, 0.0, 0.0358, 0.0, 3.024, 3.334, 3.1891, 0.2266, 9.5015, 4.23, 4.23, 5.2416, 2.471, 4.5209, 5.8512, 3.9917, 0.3196, 23.3906], [4.363, 1.788, 4.6408, 5.2861, 0.1558, 7.2427, 7.4294, 1.8742, 0.0, 3.577, 2.4192, 2.5056, 3.6118, 1.667, 2.0107, 2.22, 12.3591, 6.5142, 12.3962, 6.9888, 5.8406], [1.6621, 2.7122, 4.6031, 2.4441, 1.4803, 6.9773, 6.9523, 6.9457, 0.0, 5.5801, 1.4688, 2.3616, 5.1553, 8.915, 3.6533, 9.8587, 6.8526, 4.935, 2.3712, 2.3587, 3.0558, 4.416, 6.3941, 2.6132, 10.9456], [3.8955, 1.2858, 3.3202, 1.1936, 2.9086, 5.8397, 3.0672, 7.497, 2.8944, 6.4028, 3.9024, 4.2624, 4.3218, 0.9422, 3.6816, 12.2877, 7.7409, 6.2275, 9.6096, 8.3117, 4.3953, 8.9976, 6.9854, 2.6508, 2.549], [2.2594, 0.0, 3.8485, 5.6272, 1.8698, 1.4789, 9.8832, 6.174, 0.0, 3.112, 0.0, 5.5008, 7.9336, 3.9139, 3.2002, 1.5096, 13.3593, 4.0185, 10.105, 11.1072, 11.1197, 4.3953, 4.1952, 5.1744, 1.5228, 8.3966], [4.9603, 4.7011, 4.339, 4.0356, 6.025, 8.3424, 2.7264, 3.1605, 0.2264, 2.1104, 1.7712, 5.7888, 5.4022, 3.479, 4.3046, 0.1776, 13.3593, 12.0978, 13.8062, 3.9936, 4.8298, 8.079, 8.5008, 10.8293, 5.17, 9.2963], [3.9994, 3.6162, 3.7353, 1.9894, 8.1026, 5.1571, 12.2688, 5.4023, 5.6272, 4.3997, 0.8928, 3.2544, 3.6735, 7.3205, 2.5771, 2.4716, 12.4306, 10.7019, 14.9813, 12.48, 7.4131, 8.1627, 13.0272, 6.8376, 4.4368, 4.6481], [3.2203, 2.4108, 6.6782, 5.9114, 6.4925, 6.5981, 6.8842, 9.2242, 0.0, 6.224, 0.216, 7.2288, 4.6922, 1.8845, 3.2285, 2.3384, 15.9311, 12.0132, 13.865, 20.7168, 9.3226, 7.9953, 13.8552, 9.5357, 6.298, 23.0908], [5.6355, 3.5961, 7.5837, 7.3324, 6.4925, 7.584, 12.2006, 3.969, 3.3148, 8.0482, 2.6496, 5.5008, 6.3592, 8.4077, 6.7685, 1.0064, 19.646, 6.9372, 13.2775, 19.5936, 8.3117, 7.4092, 15.5112, 7.5768, 4.9068, 22.9408], [4.3889, 6.469, 5.5086, 5.684, 8.0247, 11.9827, 13.9046, 9.6285, 4.6084, 8.2271, 0.2304, 5.3856, 2.624, 3.5515, 5.579, 2.9896, 18.2172, 4.653, 16.8025, 21.3408, 7.7501, 10.3394, 13.1376, 9.9053, 4.2864, 36.4354], [3.7137, 4.8216, 4.6408, 4.8314, 7.2716, 11.3002, 11.928, 9.2978, 3.234, 7.7263, 2.1744, 5.0112, 3.9514, 16.2355, 9.6288, 0.8584, 24.2182, 12.4362, 13.5125, 21.7152, 10.7827, 5.0232, 14.9592, 12.3816, 7.8396, 34.936]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

