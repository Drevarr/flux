created: 20230506003334000
creator: Drevarr
modified: 20230705163528489
modifier: drevarr
tags: ChartData
title: 202305060033_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Venngi", "Miphest\u00f6", "\u00c1rkantor", "Primal Clone", "Mrs Stealth Monkey", "Black Raspberry Pie", "High Sorcer Baradun", "Eibh\u00ebar", "Mac Adaymia", "Zaidy Sagemist", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Stoic Rapidfire", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Tempest", "Vindicator", "Chronomancer", "Vindicator", "Chronomancer", "Tempest", "Chronomancer", "Vindicator", "Vindicator", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.456, 0.1592, 0.3064, 0.303, 0.125, 0.1471, 0.1984, 0.0187, 0.3183, 0.0926], [0.0594, 0.3028, 0.0134, 0.0405, 0.0, 0.4213, 0.2734, 0.5149, 0.0, 0.0, 0.0882, 0.375], [0.2079, 0.5968, 0.0537, 0.1622, 0.0217, 0.8352], [0.104, 0.1761, 0.047, 0.0, 0.0, 0.0, 0.4015, 0.3114, 0.2681, 0.2576, 0.0208, 0.0, 0.2639, 0.0561, 0.2567, 0.2951], [0.2254, 0.0738, 0.1757, 0.0, 0.5527, 0.2803, 0.2723, 0.0758, 0.0, 0.1324, 0.1865, 0.243, 0.0083, 0.3483], [0.2376, 0.2077, 0.0134, 0.0676, 0.087, 0.0, 0.4585, 0.2457, 0.3574, 0.2879, 0.1042, 0.0735, 0.2758, 0.1121, 0.265, 0.2429], [0.2277, 0.6109, 0.1342, 0.0946, 0.1087, 1.0434, 0.1488], [0.2129, 0.2993, 0.0268, 0.0676, 0.0217, 0.5465, 0.1696, 0.2085, 0.2424, 0.0, 0.0882, 0.3234, 0.1215, 0.32, 0.3712], [0.401, 0.5775, 0.0537, 0.4595, 0.0, 0.0, 0.6914, 0.4394, 0.434, 0.1818, 0.0625, 0.0441, 0.4226, 0.3084, 0.2767, 0.3483], [0.3168, 0.7025, 0.1946, 0.1892, 0.0, 0.1739, 0.7485, 0.4879, 0.4383, 0.0, 0.0735, 0.5516, 0.2991, 0.4183, 0.6563], [0.1287, 0.8556, 0.047, 0.3243, 0.0217, 1.1314, 0.3356, 0.4809, 0.1061, 0.1458, 0.0735, 0.5813, 0.2991, 0.3933, 0.5921], [0.4653, 1.132, 0.2886, 0.3514, 0.0, 1.5564, 0.6817, 1.2894, 0.3182, 0.4688, 0.3824, 0.9722, 0.8505, 0.9567, 1.2631], [0.703, 1.3521, 0.1812, 0.1081, 0.0, 1.9021, 1.173, 1.3234, 0.6212, 0.3542, 0.6176, 1.1111, 0.9252, 1.0633, 1.4152], [0.896, 1.8539, 0.4094, 0.8378, 0.0, 0.0217, 2.1388, 1.5467, 1.8298, 0.4394, 0.1875, 0.6176, 1.4306, 1.2243, 1.24, 0.4638], [0.8713, 1.6761, 0.5369, 0.8243, 0.0, 0.2174, 2.031, 1.6125, 1.6468, 0.4242, 0.4688, 0.6618, 1.3036, 0.9813, 1.2717, 1.5124]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

