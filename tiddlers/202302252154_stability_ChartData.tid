created: 20230225215428000
creator: Drevarr
modified: 20230705163520319
modifier: drevarr
tags: ChartData
title: 202302252154_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Husky Guard", "Viral Marketing", "Viral Marketing", "Sassy Daddy Demon", "Sumatra Satyricon", "Vopiscus Zergherdus", "Mistwalker Caelon", "Smol Daddy Tika", "Venomina The Fierce", "Xanvias Tseli", "Xyntharos", "Ace Hammers", "Sizklea", "Blanco Padre Guard", "Aronorf Xideliesi", "Gabe Malhorn", "Bella Sassy", "Sygaldry Verdandi", "Koralia Danai"];
const professions = ["Dragonhunter", "Willbender", "Firebrand", "Vindicator", "Soulbeast", "Scrapper", "Vindicator", "Berserker", "Spellbreaker", "Berserker", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 1.3552, 1.6084, 1.0873, 0.0, 1.0128, 1.2168, 0.0, 0.0, 1.4974], [0.9266, 1.1189, 1.9188, 1.14, 0.3721, 1.8096, 1.1704], [1.2688, 2.3528, 5.1489], [2.0218, 0.0, 0.6294, 4.6691, 0.0, 0.7441, 0.0, 0.1702, 0.0, 0.0, 0.6305], [1.4321, 0.0, 0.0, 2.4305, 0.76, 0.4341, 0.0, 1.4258, 1.4311, 0.0, 1.6813], [3.7736, 0.95, 1.3022, 0.9984, 1.2981, 0.0, 1.2352, 2.1541], [1.9656, 0.1456, 0.7925, 4.4772, 0.228, 0.7028, 1.9032, 0.6171, 0.0, 1.261], [2.106, 0.0, 0.9091, 3.4538, 0.836, 2.3357, 1.0608, 1.0427, 0.3451, 0.7356], [3.134, 2.28, 2.2944, 2.3088, 0.915, 0.0, 1.1764, 1.1296], [1.0109, 0.0, 1.2587, 3.5818, 0.988, 2.253, 1.1856, 1.0002, 0.0, 0.9411, 1.261], [1.8252, 0.0336, 0.0, 7.1635, 1.33, 2.6664, 0.0, 0.6171, 0.0304, 0.0, 0.6305], [2.9765, 0.6048, 1.352, 7.8671, 5.168, 1.5916, 0.0, 1.6386, 0.5294, 0.1051], [0.8705, 0.336, 1.1189, 8.5706, 3.496, 2.7491, 4.368, 3.043], [1.8533, 0.0, 5.6643, 12.4082, 3.344, 4.5474, 3.6192, 2.5962, 0.4117, 5.7794], [6.2899, 0.0, 4.3357, 8.2508, 4.218, 2.1497, 6.24, 5.6179, 3.2351, 6.7251], [4.2962, 2.7888, 6.3636, 13.8793, 3.876, 3.4106, 6.1464, 2.9792, 1.6849, 0.647, 7.8547], [3.875, 3.6624, 5.5711, 14.391, 2.318, 2.7284, 9.2352, 5.4051, 0.0, 0.2353, 8.0649], [6.1495, 4.4016, 5.6643, 15.4144, 4.332, 6.4077, 6.396, 3.1282, 1.9999, 6.0684], [8.2555, 0.8736, 5.2214, 19.124, 5.738, 6.015, 9.516, 2.4898, 1.7357, 2.4116, 8.8267]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

