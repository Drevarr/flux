created: 20230701000406000
creator: Drevarr
modified: 20230705163539951
modifier: drevarr
tags: ChartData
title: 202307010004_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Drevarr Moonwillow", "Traidoruns Maximus", "Seiker Soulkeeper", "Gavann", "Air One Com", "Aronorf Xideliesi", "Gamora Titus", "Mmathuss", "Gestern Yesteryear", "Koralia Danai", "Bella Sassy", "Dingle Mcbingle", "Solus Sanctus"];
const professions = ["Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.5734, 0.0, 20.0304, 2.5805, 2.0755, 30.768, 47.0741, 19.2326, 0.0, 0.0, 15.4071, 10.626, 0.885, 21.1327, 1.1515, 22.137, 15.745, 2.8849, 0.0, 21.0428, 26.9568, 105.9615], [12.4714, 4.8452, 12.0182, 19.3536, 17.5554, 15.456, 17.065, 10.2211, 4.0915, 1.7381, 10.1621, 0.8625, 4.9018, 17.4989, 18.424, 13.677, 11.233, 23.6372, 0.0, 41.4441, 30.3264, 81.1573], [19.7823, 17.116, 45.3024, 3.4099, 64.8168, 25.464, 134.0957, 39.5842, 23.5445], [55.1324, 19.2662, 91.2413, 22.2106, 87.8637, 45.216, 132.108, 32.2056], [7.152, 4.3632, 14.0011, 15.4105, 16.9891, 134.7299, 25.599, 26.0406, 18.4162, 29.8929, 0.0, 9.541, 10.9501, 16.2098, 181.2845, 203.0021], [5.0459, 9.3464, 57.0211, 26.8646, 39.9105, 43.296, 31.9968, 22.9219, 0.0, 16.9157, 118.558, 18.009, 18.3476, 20.5682, 15.5222, 32.524, 22.137, 19.6667, 0.0, 27.8433, 65.7072, 128.8074], [26.5198, 33.5439, 18.8698, 77.2301, 88.8582, 64.608, 32.724, 44.3923, 28.7875, 22.6685, 61.519, 25.323, 30.9424, 21.5914, 32.1959, 23.829, 17.484, 17.3712, 60.7762, 243.8467, 178.198], [46.6877, 54.8813, 34.8947, 135.36, 66.3691, 46.6603, 67.571, 20.808, 107.5217, 58.9605, 33.5634, 23.2848, 39.0589, 30.409, 14.241, 34.122, 0.0, 29.4258, 160.5053, 147.9544], [20.0117, 17.9474, 20.255, 18.5242, 35.0676, 45.408, 83.531, 22.4078, 24.0835, 13.6109, 77.1446, 31.878, 18.2795, 67.5965, 36.7559, 39.48, 27.824, 19.5426, 27.4176, 87.8496, 206.5565, 268.2761], [44.7252, 17.03, 33.8458, 49.4438, 45.7047, 24.744, 54.9763, 35.3506, 35.476, 22.1299, 89.7107, 28.5315, 79.5515, 54.3312, 21.3718, 37.271, 28.952, 26.2119, 20.9126, 51.5806, 195.5491, 285.0298], [69.9835, 29.1287, 47.7734, 82.4832, 25.5548, 36.84, 96.7661, 32.629, 33.5895, 21.9586, 130.5777, 45.0915, 43.1968, 83.5783, 41.0855, 59.737, 21.244, 35.0526, 26.5843, 73.1367, 242.3866, 423.6283], [38.5038, 28.0106, 69.5261, 50.3654, 29.4032, 71.736, 128.9568, 91.3853, 31.066, 28.5682, 133.2001, 34.8105, 89.0146, 80.2973, 15.5222, 123.516, 21.667, 20.0699, 25.1731, 53.377, 271.1405, 446.9093], [89.9683, 44.6054, 9.6858, 122.2731, 42.5385, 32.4401, 74.5466, 52.5545, 55.742, 45.167, 25.0642, 77.8842, 476.2368, 738.9017], [37.7297, 24.3695, 98.1677, 80.3635, 49.4233, 54.648, 84.2582, 47.9002, 39.347, 34.6637, 76.8168, 24.771, 158.32, 45.5112, 51.8636, 58.938, 48.128, 37.3791, 46.7174, 132.1165, 224.5277, 518.4931]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

