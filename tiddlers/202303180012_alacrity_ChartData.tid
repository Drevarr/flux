created: 20230318001239000
creator: Drevarr
modified: 20230705163522290
modifier: drevarr
tags: ChartData
title: 202303180012_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Primal Clone", "Venomina The Siren", "Eibh\u00ebar", "Mac Chiato", "Zadie Miststep", "Black Raspberry Pie", "Abigail Ryn"];
const professions = ["Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 42.0288, 763.3181, 0.0, 0.0, 119.2464, 88.4646, 42.6624, 0.0, 0.0, 0.0, 0.0, 438.254], [95.6304, 33.9864, 66.3163, 335.2924, 0.0, 0.0, 0.0, 0.0, 32.7402, 71.76, 32.3664, 0.0, 432.3113, 139.2346, 16.2286, 32.8104, 63.5481, 0.0, 0.0, 0.0, 0.0, 21.5744, 348.7575], [274.6416, 43.344, 28.6681, 91.0272, 0.0, 0.0, 37.128, 35.2176, 837.8241, 123.1877, 42.2356, 25.7544, 129.4776, 88.2951, 0.0, 24.6245, 0.0, 215.5429, 704.1682], [225.7824, 61.3032, 336.205, 655.6274, 32.7496, 70.1842, 75.9854, 86.0605, 65.988, 41.5584, 102.9072, 0.0, 634.6259, 66.7085, 34.0355, 0.0, 98.5194, 100.9565, 41.5822, 28.9579, 17.4266, 32.6963, 0.0, 455.8529], [431.1024, 0.0, 442.5422, 180.3183, 101.2911, 79.0399, 153.2573, 66.1572, 38.0328, 91.0008, 925.8766, 37.4266, 239.1984, 130.6683, 124.2741, 72.508, 9.4867, 63.8731, 217.7054, 648.367], [364.2864, 61.0848, 724.5672, 656.0429, 44.2312, 128.5849, 137.4538, 191.4299, 9.3906, 69.5448, 111.5136, 87.6078, 932.3553, 115.4794, 61.5865, 336.3595, 174.0627, 113.1722, 83.3134, 67.2854, 2.8373, 46.5445, 87.5046, 749.0238], [414.3984, 100.3296, 439.3637, 768.8457, 14.2688, 127.9255, 93.1789, 121.6829, 66.4533, 77.7192, 137.0952, 0.0, 1097.2697, 146.555, 103.2731, 186.2078, 179.3988, 208.2622, 134.2478, 128.7149, 50.5151, 155.9996, 766.6226], [663.1488, 55.9104, 742.0493, 1093.5434, 77.532, 223.3393, 142.1773, 217.9848, 110.9106, 178.6512, 165.0528, 20.3133, 1863.8272, 71.0717, 125.7805, 356.0458, 306.0099, 311.9291, 222.4422, 71.941, 135.3442, 360.6799, 1345.882]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

