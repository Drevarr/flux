created: 20230217231312000
creator: Drevarr
modified: 20230705163519469
modifier: drevarr
tags: ChartData
title: 202302172313_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Demon Sekhmet", "Arka\u00f1", "Ravioli Fetabringer", "Tribal S", "Mac Aaroni", "\u00c9\u00efbhear", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Berserker", "Chronomancer", "Firebrand", "Druid", "Tempest", "Scrapper", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[43.1884, 0.0175, 14.55, 192.6094, 347.0109, 3336.7925, 7.614, 0.0, 13.0312, 256.5165, 0.0, 147.0625, 325.3393, 18.7296, 88.2547, 542.4112, 0.0, 180.2083, 32.4583, 0.0, 0.0, 10.4, 0.0, 233.5876, 1557.5455], [1192.8551, 2.9649, 0.0, 527.2578, 490.9457, 486.6792, 653.6842, 479.3333, 0.0, 223.0385, 61.3952, 499.925, 562.1786, 120.1631, 380.9057, 717.7103, 47.81, 41.125, 373.9722, 0.0, 30.9216], [1091.8261, 78.7193, 240.575, 584.7734, 626.9022, 1390.3396, 884.7544, 422.4118, 74.7188, 411.6429, 450.2661, 37.6951, 532.35, 1426.7679, 142.5064, 556.9057, 811.3178, 49.11, 359.5208, 755.1667, 269.2911, 156.0196, 578.12, 24.5976, 595.8454, 1249.8182], [444.1014, 478.9123, 1283.6, 1327.8281, 1469.7065, 2164.3585, 17.4561, 0.0, 1417.2549, 562.125, 726.956, 806.9516, 0.0, 1729.4625, 1381.4821, 623.4764, 1737.9151, 108.5833, 537.8692, 43.54, 1400.9375], [2565.913, 141.2105, 674.95, 2071.3125, 3003.1196, 1329.4528, 1686.8421, 1256.8627, 1346.5625, 1956.6319, 1141.6855, 4157.56, 219.3963, 1215.6907, 1622.8545], [2708.8986, 366.3509, 776.55, 2313.8281, 3519.2174, 2651.9245, 1678.4035, 1112.1961, 674.5938, 1192.2582, 1060.1371, 7.939, 2760.65, 3628.75, 627.2747, 1658.8208, 0.0, 2653.7103, 101.87, 1830.4583, 1161.6389, 333.1646, 593.8824, 1596.4, 45.7439, 921.3505, 2077.1818], [2581.1884, 353.5965, 1195.275, 2311.8516, 1427.1848, 2288.0, 1322.7895, 1386.2353, 152.6875, 1580.8791, 1429.7016, 1.8293, 2219.7, 2197.3571, 800.2017, 1406.6604, 2829.7944, 377.34, 2476.4583, 2226.8472, 617.8734, 538.3725, 4075.44, 62.9512, 1111.0309, 1649.6909], [3678.6667, 529.7719, 1018.35, 2226.0625, 3832.5, 3646.5849, 2139.386, 1435.0392, 1262.0312, 1705.6538, 1420.9597, 2585.3, 4030.4286, 777.6738, 1520.0, 0.0, 3306.7757, 220.78, 1933.5, 1007.2222, 287.5443, 867.2941, 1550.2, 316.5244, 2039.1546, 3558.8]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

