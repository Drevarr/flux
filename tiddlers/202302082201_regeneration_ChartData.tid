created: 20230208220141000
creator: Drevarr
modified: 20230705163518908
modifier: drevarr
tags: ChartData
title: 202302082201_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Sassy", "Kahless The Drunk", "Blanco Padre Guard", "Etchery Howls", "Mac Aaroni", "Stoic Rapidfire", "Zadie Miststep", "Tribal S", "Elonith Primal", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Druid", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[410.5958, 128.1331, 142.2632, 91.8387, 95.059, 37.9534, 214.3033, 386.4432, 59.8319, 86.9722, 493.7625], [1280.4792, 217.7026, 94.3334, 1084.2825], [907.4822, 23.699, 131.5851, 79.4133, 0.0, 36.848, 123.9084, 641.784, 215.2844, 113.4864, 614.46], [2052.5702, 207.937, 218.7894, 153.3279, 0.0, 87.1455, 76.8398, 796.9104, 199.9465, 157.2792, 790.3525], [1291.4957, 154.812, 797.4079, 161.3482, 48.001, 126.5268, 158.8356, 1286.3136, 265.4438, 173.808, 1053.36], [1569.1795, 282.2933, 614.2121, 120.5478, 84.571, 30.0311, 420.5401, 1192.62, 70.4718, 135.8429, 1765.9075], [1379.4221, 206.8195, 503.9831, 174.7761, 65.067, 68.2609, 461.039, 1827.8832, 318.0904, 154.2461, 1426.425], [2294.6746, 132.8357, 568.3853, 328.8331, 0.0, 0.0, 128.4822, 2526.2952, 406.6637, 200.2541, 1987.02], [2406.7296, 308.5066, 776.7191, 246.5945, 72.979, 188.4315, 170.6443, 3098.0664, 569.8543, 343.1856, 3110.5375], [6572.3962, 242.2051, 855.2475, 94.5729, 67.781, 238.9593, 214.137, 4500.3816, 701.0562, 360.3619, 2618.77], [7261.0848, 327.8755, 1387.9279, 420.2465, 267.743, 308.6941, 637.1719, 4890.2568, 1003.3941, 469.452, 4153.9225]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

