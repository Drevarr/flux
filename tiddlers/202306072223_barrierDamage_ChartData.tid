created: 20230607222341000
creator: Drevarr
modified: 20230705163534219
modifier: drevarr
tags: ChartData
title: 202306072223_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Permanent Dawn", "Xanvias Einzbern", "Marco D Roronoa", "Venomina The Siren", "Eibh\u00ebar", "Rafaellagabriela", "Koralia Danai", "Artakama Nahid", "Zayde Sunsabre", "Etcherii", "No Reserv\u00e9", "Manuel Radiador", "Ria Zerria", "Melody Phoenixstorm", "Tegan Parker", "Tootsie Pop Rocks", "Drevarr Moonwillow", "Grasszanine", "Newtype Khan", "Inedible Plant", "Skye Nightroad", "Cyclotechnist Farra"];
const professions = ["Weaver", "Berserker", "Renegade", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Vindicator", "Scrapper", "Scourge", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Spellbreaker", "Spellbreaker", "Vindicator", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[217, 877, 58119, 862, 965, 2169, 0, 0, 0, 194, 0, 0, 269, 269], [0, 0, 41508, 1608, 11810, 2920, 0, 0, 0, 1109, 0, 2205, 269, 2927], [0, 16528, 13164, 0, 1802, 901, 15210, 0, 16914], [478, 46888, 0, 8077, 0, 0, 0, 0, 1989, 0, 0, 3318, 4822], [0, 260, 38369, 1109, 21230, 0, 0, 568, 0, 0, 0, 1136, 0, 3088], [50523, 1303, 7795, 3175, 0, 0, 0, 1175, 0, 1168, 3383, 55], [0, 0, 46671, 0, 11028, 1109, 0, 1113, 0, 1150, 0, 1109, 6346, 1109], [1636, 1109, 44733, 990, 8935, 1912, 0, 1045, 1248, 2482, 0, 7028, 0, 269], [2992, 676, 44886, 0, 3386, 1372, 0, 2276, 2963, 6817, 3360, 3383, 0], [0, 573, 54587, 0, 7928, 1998, 0, 4177, 0, 1115, 0, 2705, 1248], [860, 2217, 61184, 0, 2721, 0, 0, 1109, 0, 1432, 0, 1109, 0, 4122], [0, 8453, 3711, 32213, 0, 13500, 5598, 11980], [478, 987, 46680, 0, 31170], [1527, 6847, 87605], [75, 366, 65609, 1109, 14474, 0, 0, 3331, 0, 4561, 0, 2554, 639, 4285], [5854, 11643, 76189, 10, 8681, 884, 172, 3134, 4, 1118, 0, 3255, 269, 2810], [183, 789, 87347, 411, 27909, 6867, 2, 957, 1948, 7112, 0, 1019, 2026, 8335], [83, 931, 106704, 2583, 21669, 3669, 0, 3439, 1233, 3437, 0, 3431, 0, 3437], [1978, 1109, 100093, 817, 20157, 6097, 0, 3063, 2957, 5657, 0, 2739, 2963, 9957], [996, 3823, 224748, 2233, 29879, 9326, 0, 4840, 1093, 14854, 0, 6369, 2197, 17142], [677, 12054, 273858, 73803], [7321, 4966, 398157, 8777, 30717, 38241, 9901, 368, 31512, 21059, 8705, 52453]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

