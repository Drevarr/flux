created: 20230628220723000
creator: Drevarr
modified: 20230705163539922
modifier: drevarr
tags: ChartData
title: 202306282207_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Zayde Sunsabre", "Legacy Of Mathus", "Ateriuz", "My Birthday Girl", "Arcanophage Farra", "Grasszanine", "Belvyn Brightblade", "Xanvias Einzbern", "Johosh The Mighty", "No Reserv\u00e9", "Gavann", "Blade Stacker", "Xyntharos", "Ryvalia Fazebringer", "Blanco Padre Guard", "Crusader Siolith", "Sub Train", "Sygaldry Verdandi", "Tika Fiery", "Bella Sassy", "Solus Sanctus", "Koralia Danai"];
const professions = ["Spellbreaker", "Spellbreaker", "Berserker", "Scrapper", "Spellbreaker", "Spellbreaker", "Firebrand", "Berserker", "Berserker", "Vindicator", "Firebrand", "Chronomancer", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 1.5646, 2.8645, 0.882, 1.4818, 0.0, 0.4838, 0.0, 0.8602, 0.0, 1.2145, 1.5034, 1.0657, 0.0, 0.7272, 0.0, 0.0, 1.5876, 3.211, 3.7946, 0.0, 0.0, 0.2419], [0.0, 2.0188, 2.0903, 1.6758, 2.7989, 2.5666, 0.1037, 0.0, 2.4576, 0.0, 3.8991, 1.5552, 1.7272, 1.0138], [1.615, 3.5613, 0.6615, 1.5915, 1.8061, 0.7258, 0.8893, 1.1674, 0.0, 1.8537, 1.5034, 0.9923, 0.747, 1.8422, 0.0, 1.3834, 2.5402, 2.9243, 1.0184, 2.8459, 0.2646, 0.0, 0.8294], [0.0, 0.0, 1.5646, 2.8645, 2.5137, 3.4026, 1.4734, 0.553, 1.1588, 2.3654, 0.0, 2.3011, 0.1037, 0.9555, 1.921, 1.9877, 0.9432, 3.334, 1.6055, 0.3395, 0.8893, 0.0882, 1.0114, 1.9354], [0.0, 0.0, 6.4259, 2.1168, 2.9635, 1.4734, 0.0, 0.8624, 1.9046, 0.0, 2.4929, 1.2442, 1.3598, 1.4674, 0.0, 0.0, 1.1947, 2.8577, 4.1285, 0.0, 4.1503, 1.2789, 0.0, 0.0], [0.0, 0.9589, 6.0388, 3.1752, 4.3355, 1.1407, 0.1728, 0.5929, 0.8602, 0.0, 4.7301, 0.985, 0.0, 0.3068, 3.5875, 0.0, 0.8174, 3.8102, 2.523, 1.9992, 1.6008, 0.882, 0.0, 2.1427], [1.6632, 0.0, 1.8169, 3.4839, 1.0143, 1.7013, 1.1407, 0.0, 0.3773, 1.1366, 0.2204, 3.0042, 2.281, 1.029, 0.08, 3.1997, 0.0, 2.7038, 4.604, 2.867, 0.2263, 4.4467, 1.3671, 0.0211, 2.3501], [0.0, 1.9179, 4.0258, 2.7783, 4.8843, 2.7567, 0.8986, 1.3744, 0.6451, 0.0, 3.1321, 1.1405, 1.1025, 1.2139, 3.636, 0.0, 3.9614, 3.5721, 2.7523, 0.0, 2.6681, 0.5071], [1.3608, 0.0, 3.3815, 5.2646, 2.1168, 4.9941, 2.1389, 1.5898, 0.1887, 1.2902, 0.0, 2.1733, 2.5402, 1.2495, 0.3468, 3.1027, 0.0, 3.7728, 4.2071, 3.6698, 1.5088, 3.8538, 0.5513, 2.3598, 2.3846], [0.0, 6.6116, 7.5097, 5.5566, 4.3904, 1.2358, 0.3802, 0.4042, 0.4915, 0.0, 1.4702, 0.3629, 1.2127, 0.4402, 1.7453, 0.0, 4.4016, 4.7628, 4.7019, 3.3948, 1.423, 2.3594, 0.0211, 3.3523], [4.6432, 6.9678, 2.205, 4.4453, 0.5704, 3.2141, 0.7007, 0.7987, 0.0, 0.8949, 1.9699, 1.7272, 1.6275, 4.3147, 0.0, 3.647, 5.2391, 7.5689, 0.1886, 4.2689, 1.2789, 0.0, 3.9398], [6.7125, 13.3162, 1.3226, 8.8849, 4.4064, 2.4623, 0.2668, 6.1085, 0.0, 0.0, 13.8915, 6.078, 2.9799, 4.091, 1.8522, 0.0, 0.0], [1.2398, 0.0, 7.2677, 2.3226, 4.2777, 7.1344, 1.9487, 0.3456, 1.4284, 1.4131, 2.2673, 3.2599, 1.7107, 1.1025, 2.8814, 1.9877, 1.3754, 4.4016, 8.4937, 7.5115, 3.9229, 5.0989, 0.0221, 0.0, 2.2464], [0.189, 0.0, 4.5423, 5.5742, 2.9547, 2.1403, 0.2852, 2.4538, 1.2936, 3.1642, 3.8733, 5.1136, 0.7776, 3.381, 2.8281, 6.6902, 2.4334, 3.4584, 13.3358, 6.0207, 0.0, 3.4981, 2.646, 0.0, 2.6611], [0.0, 5.1984, 11.4582, 5.9535, 7.4088, 1.1883, 1.8317, 2.5872, 4.7309, 0.0, 9.3962, 3.4733, 4.4467, 1.5208, 6.9797, 11.9864, 8.8877, 3.2816, 10.4943, 1.7419, 2.6957], [2.2165, 1.615, 6.9678, 6.7032, 8.5064, 5.0857, 2.6266, 4.4198, 6.1133, 0.2519, 5.9446, 4.0954, 1.764, 2.0544, 5.5752, 0.0, 6.6653, 14.1296, 8.429, 4.4887, 12.9845, 2.6239, 0.0, 6.6701], [0.0, 6.3087, 16.3356, 7.7616, 12.1285, 7.4622, 2.3155, 5.6864, 4.823, 0.2519, 9.588, 5.9616, 4.851, 2.9348, 8.1931, 2.1583, 7.2941, 5.636, 9.3464, 3.5834, 10.5536, 4.7628, 0.0, 7.7414], [0.0, 8.0752, 19.9744, 8.2026, 11.3602, 9.3634, 4.9075, 4.1233, 2.519, 0.2834, 10.6107, 8.6573, 3.8588, 4.1754, 10.0354, 1.3331, 5.4706, 7.2236, 10.4359, 2.3386, 11.1465, 2.6239, 1.4328, 7.3958], [2.6765, 7.2172, 14.4001, 10.0107, 9.6589, 5.1808, 4.2163, 6.6028, 6.6662, 2.2358, 5.4971, 6.0653, 7.9748, 1.2273, 7.9507, 0.0, 11.1298, 14.1296, 8.945, 6.0352, 12.3916, 4.2336, 6.1946, 5.2531], [4.8302, 9.3369, 14.2453, 5.733, 9.8784, 7.5097, 4.2854, 5.1475, 5.1917, 3.3064, 9.9715, 5.9098, 5.2552, 3.3217, 12.217, 2.9836, 10.6896, 14.9234, 9.0597, 7.7326, 10.4943, 3.528, 2.2966, 8.3981], [5.9875, 0.2509, 9.9931, 17.1872, 7.497, 13.9944, 7.2721, 4.1472, 4.9858, 7.4035, 2.1728, 9.9715, 6.5837, 3.6015, 3.8686, 11.3928, 0.0, 9.4949, 14.1296, 8.601, 5.5448, 13.3403, 5.7771, 0.4425, 6.4973], [6.6982, 0.1255, 9.0846, 18.1937, 11.5983, 13.6102, 8.4128, 3.1104, 5.1205, 6.697, 3.1175, 14.1263, 9.2794, 5.0348, 3.0148, 11.5382, 2.243, 15.5314, 16.5904, 14.335, 4.6773, 13.1624, 4.8951, 8.3635]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

