created: 20230923001758000
creator: Drevarr
tags: ChartData
title: 202309230017_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Leafzely", "High Sorcer Baradun", "Revenant Brandorf", "Varen Frostwood", "Seiker Novus Terra", "Tegan Parker", "Venomina The Sly", "Drevarr Moonwillow", "Arriasa", "Zaedy Zae"];
const professions = ["Scrapper", "Tempest", "Vindicator", "Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[90.243, 51.4566, 2.6832, 41.7833, 33.9051, 0.0, 7.5411, 29.2765, 43.6968, 0.0, 0.0, 26.432, 0.0, 16.9008, 21.2098, 37.9247, 65.9786, 73.6474, 40.0393, 147.1411, 67.0805, 47.424, 33.1, 25.3751, 31.7952, 79.0675, 0.0], [154.462, 257.2828, 9.761, 121.0087, 96.4592, 76.0266, 105.6019, 163.8868, 65.1567, 6.9672, 69.024, 65.3415], [14.8685, 101.1438, 21.288, 272.2244, 33.443, 5.879, 12.9184, 58.7384, 10.3873, 0.0, 18.944, 73.4832, 55.9588, 125.9891, 74.7911, 157.6529, 63.0885, 346.0341, 2.8694, 49.3056, 111.5108, 40.5367, 79.3152, 174.6874, 17.6986], [9.3073, 70.7712, 7.6116, 310.7518, 35.6957, 77.227, 34.4362, 121.1896, 35.2303, 35.488, 41.2236, 56.5152, 21.4929, 23.5763, 80.4258, 72.7696, 89.0036, 341.1654, 36.5414, 138.24, 108.6761, 59.5879, 94.5562, 56.015, 0.0], [157.9086, 416.2231, 26.4491, 363.1166, 276.3238, 112.347, 93.983, 207.298, 45.2865, 65.44, 18.1764, 104.8656, 72.2264, 94.6785, 164.0621, 339.4453, 69.1886], [0.0, 383.7863, 37.5654, 334.9898, 208.3403, 0.0, 86.5841, 137.4391, 215.4852, 32.4653, 135.84, 21.2731, 126.8064, 84.4015, 145.1915, 66.8959, 274.4003, 43.4373, 427.719, 135.8006, 150.144, 127.4284, 53.1052, 132.6758, 202.9968], [104.2456, 416.6654, 28.4204, 642.5762, 340.8995, 47.0318, 262.1892, 527.9792, 116.7474, 9.5043, 190.624, 0.0, 275.8896, 37.22, 56.4337, 292.0882, 548.8006, 173.9541, 721.6406, 117.1786, 270.1056, 177.4491, 128.9131, 211.7837, 148.7578, 0.0], [291.092, 2178.426, 416.2445, 1196.883, 1017.5579, 89.562, 292.964, 654.2882, 447.202, 156.1287, 708.8, 15.2222, 502.8576, 436.7306, 935.8503, 478.2632, 1644.295, 312.4541, 1685.451, 386.9352, 428.544, 876.8663, 277.4331, 472.1587, 343.5139, 41.2474], [0.0, 3478.9942, 209.0463, 1656.0468, 1062.4374, 767.8687, 695.7187, 952.8568, 355.4957, 596.896, 156.5863, 387.8112, 497.7601, 334.7254, 3696.1994, 345.6504, 802.7904, 655.2402, 130.4478], [22.0779, 2548.353, 150.3846, 1314.5454, 538.1499, 296.6172, 418.5157, 626.464, 953.9516, 248.6701, 279.6894, 378.496, 121.5641, 198.2736, 371.1451, 775.6169, 558.7546, 1324.8635, 677.5161, 3079.8656, 365.5315, 533.2224, 795.8389, 690.3149, 556.6234, 213.9014]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

