created: 20230703220627000
creator: Drevarr
modified: 20230705163541484
modifier: drevarr
tags: ChartData
title: 202307032206_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Drumina", "Tootsie Pop Rocks", "\u00c4rt\u00ebm\u00edza", "Vopiscus Zergherdus", "Artakama Nahid", "Fribble Bibble", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Druid", "Scrapper", "Druid", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[74.112, 136.1045, 167.1062, 27.4385, 6.8666, 659.604, 115.5567, 215.3692, 133.1407, 86.719, 32.6784, 0.0, 16.4475, 47.6129, 28.7309, 35.1792, 20.4296, 7.2437, 36.04, 199.8691, 123.3725, 32.0646, 39.5806, 25.4285, 38.3091], [290.3338, 0.0, 0.0, 0.0, 331.7745, 0.0, 30.0095, 0.0, 10.9444, 123.1567, 139.7066, 84.9658, 72.9675, 73.1894, 74.844, 60.2725, 63.727, 79.5036, 89.1475, 216.6965, 184.4625, 66.5606, 62.1126, 706.9909], [382.8811, 8.3941, 290.8886, 255.7094, 0.0, 23.6181, 2175.6675, 0.0, 60.4408, 24.9147, 0.0, 432.6144, 27.468], [7.7648, 69.7442, 249.359, 58.2153, 3196.239, 80.4678, 181.5781, 55.2636, 96.647], [463.8485, 93.3902, 194.783, 444.8304, 1775.6445, 354.2847, 524.3825, 334.5126, 104.3197, 123.9396, 64.5909, 35.2751, 91.8248, 62.6218, 109.3428, 172.212, 225.933, 36.0149, 204.431, 181.3258, 140.1272, 248.9494, 304.839, 404.4885], [996.0653, 91.0556, 208.1498, 467.9338, 188.7587, 26.5802, 3619.932, 243.3585, 455.4451, 247.0052, 54.8456, 139.9725, 109.6755, 141.0035, 162.5081], [1145.8642, 74.298, 291.4978, 639.2736, 155.9464, 77.7995, 4688.6325, 485.8938, 612.6634, 275.2419, 86.4558, 158.1839, 168.1185, 129.9546, 150.3004, 145.3469, 51.7608, 267.1099, 291.0376, 172.6507, 479.5243, 515.6659, 401.8661, 470.1242, 288.3821, 1134.4208], [1223.867, 281.7031, 1029.379, 1568.4278, 706.02, 113.4005, 9020.637, 1133.2892, 1098.0577, 1273.4034, 640.7327, 114.5446, 198.6809, 281.4264, 0.0, 66.9562, 95.76, 271.4804, 152.207, 250.7498, 371.749, 586.74, 427.8683, 531.9926, 93.3478, 1418.4672]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

