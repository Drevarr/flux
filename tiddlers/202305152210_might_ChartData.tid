created: 20230515221048000
creator: Drevarr
modified: 20230705163530285
modifier: drevarr
tags: ChartData
title: 202305152210_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Mi", "Eibh\u00ebar", "Tribal S", "Arriasa", "Miphest\u00f6", "Etcherii", "Tootsie Pop Rocks", "Black Raspberry Pie", "Fribble Bibble", "Venom The Ferocious", "Cat Wigglebooty", "Belvyn Brightblade", "Ark Darkness", "Rosetendril", "High Sorcer Baradun", "Gavann", "Sub Train", "Koralia Danai", "Drevarr Moonwillow", "Solus Sanctus", "Sygaldry Verdandi", "Demon Sekhmet", "Grasszanine", "Bella Sassy", "Artakama Nahid", "Newtype Khan"];
const professions = ["Tempest", "Chronomancer", "Druid", "Druid", "Tempest", "Willbender", "Scrapper", "Chronomancer", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Firebrand", "Tempest", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.057, 0.0, 0.0, 8.0708, 39.8208, 15.4128, 0.0, 0.0, 10.1028, 2.0107, 0.0, 0.0, 1.8997, 0.9729, 0.0, 0.0, 7.752, 0.0, 0.0, 2.7392, 14.9037, 0.0, 0.0, 0.0], [5.442, 0.0, 0.0, 0.0, 0.0, 4.919, 10.1962, 0.927, 0.0, 14.0777, 5.0693, 4.1904, 0.0, 7.0735, 0.0, 5.2416, 6.084, 2.8123, 17.6256, 10.4966, 0.0, 7.1684, 0.0, 1.5002, 0.0, 6.1231], [10.268, 0.0, 0.0, 0.0, 3.5136, 14.7014, 6.6248, 4.6445, 6.0696, 0.0, 4.7291, 7.4265, 0.0, 11.115, 2.1874, 18.6864, 4.703, 0.0, 13.8124, 0.0, 4.3132], [0.0, 11.627, 0.0, 6.3936, 1.395, 10.3066, 17.3098, 0.0, 23.0212, 2.8037, 0.0, 0.1833, 2.6273, 0.0, 2.4444, 0.0, 0.0, 14.4432, 15.1997, 1.8852, 6.4108, 0.0, 0.0, 0.0, 0.0], [6.9192, 21.0528, 8.3155, 3.2472, 17.7754, 22.7104, 11.3768, 5.9538, 20.3398], [0.888, 39.864, 1.3794, 2.8728, 24.0132, 56.2176], [0.0, 4.832, 0.0, 0.0, 3.886, 18.2707, 46.4755, 0.0, 7.4529, 3.2568, 3.6504, 0.0, 8.084, 0.0973, 4.8636, 6.201, 0.9374, 7.6704, 3.7488, 0.0, 3.8465, 0.0, 1.3127, 0.0, 8.7975], [0.0, 0.0, 32.5823, 23.424, 31.7741, 0.0, 0.0, 0.0, 5.1542, 5.3352, 0.0, 0.0, 0.0, 0.0, 13.6305, 3.348, 16.9728, 8.6563, 0.0, 7.4016, 12.5617, 7.3137, 3.6791, 2.6041], [19.177, 2.5832, 3.6288, 14.5474, 37.2442, 46.2384, 2.4836, 0.0, 12.7527, 4.0781, 3.4992, 1.2464, 8.6903, 12.4855, 5.67, 14.6835, 6.1603], [21.3408, 0.0, 8.1972, 29.3147, 0.8779, 5.5296, 7.5886, 8.2861, 11.0586, 9.324, 16.4385, 12.6778, 13.7904, 17.5853, 4.6685, 10.3738, 4.3292, 12.6895, 8.7271], [0.9563, 8.456, 1.2289, 0.0, 12.5546, 22.9555, 48.1354, 2.0813, 2.7324, 8.1154, 2.8037, 4.2336, 6.3055, 6.5184, 4.2084, 14.3325, 1.5624, 13.3824, 9.6106, 2.7833, 8.6254, 4.684, 6.126, 1.5428, 10.557], [2.5958, 32.767, 6.0944, 9.72, 20.4262, 59.0285, 37.9392, 0.0, 40.7425], [5.0322, 20.234, 0.0, 14.1696, 13.551, 40.5235, 48.8467, 4.9031, 39.0863, 2.0107, 7.344, 0.0, 21.6651, 1.2972], [51.793, 0.0, 0.0, 0.0, 45.4426, 57.383, 0.0, 0.0, 16.3964, 2.917, 0.0, 0.0, 8.569, 0.227, 0.0, 8.4825, 2.9016, 0.0, 0.0, 0.0, 4.1962, 27.9622, 2.938, 0.0, 0.0], [24.3552, 7.9488, 0.0, 20.8567, 4.7348, 1.4364, 28.782, 10.8475, 37.7808, 49.7568, 0.0, 60.7278, 0.0, 7.2512, 0.0, 9.079], [36.995, 4.1382, 5.1408, 23.2161, 86.2003, 42.8956, 5.2109, 1.4904, 0.0, 3.557, 6.486, 8.2152, 8.8335, 6.3389, 13.6272, 18.8803, 1.5989, 2.8557, 7.9486, 0.0, 9.3164, 7.8826], [10.9068, 34.428, 2.4192, 27.6999, 60.6682, 58.3315, 0.8045, 0.0, 20.8681, 8.8358, 14.6016, 0.1466, 16.5318, 6.1617, 11.34, 12.87, 17.6328, 10.2, 7.0886, 3.1288, 21.3888, 21.4329, 13.6272, 0.0, 7.2491], [6.3984, 41.072, 0.0, 13.176, 30.4898, 81.5155, 88.6829, 1.0669, 5.5255, 42.0675, 2.917, 4.752, 0.0, 14.4299, 0.0, 4.1832, 15.093, 9.8654, 3.264, 6.7478, 0.0197, 6.3525, 23.4911, 13.5647, 19.5656], [6.5122, 34.126, 6.3703, 2.7864, 21.9208, 80.1101, 72.5587, 0.8197, 32.9584, 8.6376, 5.3784, 1.1914, 10.105, 17.9338, 10.1556, 22.9905, 4.7318, 25.3776, 15.1315, 4.4514, 16.4932, 11.9939, 11.8769, 1.1868, 15.4836], [22.046, 3.6366, 5.7456, 49.9196, 87.6058, 84.6518, 0.5597, 2.7931, 60.4513, 8.8075, 4.7736, 1.5764, 10.0242, 9.5993, 4.7124, 11.817, 12.4992, 10.0368, 16.9037, 1.1943, 16.8429, 21.0071, 10.0641, 17.8765], [5.2371, 34.428, 0.0, 11.7072, 29.9916, 74.9568, 89.8685, 3.7429, 6.5729, 29.8116, 1.5576, 6.8904, 4.6008, 15.2383, 10.0533, 6.3, 14.4495, 6.9638, 14.1984, 10.7693, 1.8457, 16.2601, 35.9108, 20.6283, 7.6351, 18.7915], [0.0, 193.4899, 12.4476, 93.7409, 34.3805, 21.2544, 12.721, 45.1087, 27.3385, 24.2676, 88.803, 45.0418], [25.4314, 25.38, 18.6599, 50.6867, 32.9489, 32.886, 47.502, 23.436, 95.7168, 73.3402, 11.8539, 69.7029, 50.8855, 65.0729, 6.3098, 39.9758], [8.6071, 57.078, 2.8591, 19.5696, 46.8308, 137.7331, 99.5904, 7.9847, 95.5627, 15.3778, 5.6376, 0.3483, 13.8236, 14.8529, 3.2004, 14.2155, 15.2669, 14.8512, 19.4256, 1.4805, 14.57, 45.4918, 22.8787, 13.7273, 9.7124], [4.4174, 33.069, 0.0, 21.9208, 71.4432, 150.8083, 0.6996, 0.0, 82.6444, 26.196, 10.4544, 0.2933, 20.4929, 1.5566, 35.5824, 54.9315, 7.0531, 52.1424, 30.263, 6.2971, 46.2743, 5.2518, 44.0695, 0.0, 19.4953], [22.7245, 62.967, 7.2983, 7.0416, 83.299, 159.9859, 157.9219, 2.9558, 1.9582, 116.5965, 21.0134, 13.9104, 6.1772, 24.0499, 16.7339, 14.8932, 49.842, 10.8029, 53.2032, 40.2144, 7.1459, 38.3482, 47.8338, 31.6926, 5.9538, 31.3191]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

