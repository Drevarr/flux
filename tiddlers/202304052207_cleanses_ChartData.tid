created: 20230405220700000
creator: Drevarr
modified: 20230705163524430
modifier: drevarr
tags: ChartData
title: 202304052207_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Etchery Howls", "Johosh The Great", "Ak\u00e1nt\u00f3r", "Yuuka Chou", "Venomina The Siren", "Eibh\u00ebar", "Mac Chiato", "Arriasa", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Druid", "Firebrand", "Druid", "Tempest", "Tempest", "Chronomancer", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0196, 0.0, 0.0548, 0.6869, 0.0227, 0.0, 0.6984, 0.7], [0.1765, 0.0577, 0.1507, 0.0758, 0.0, 0.0, 0.0789, 0.1587, 0.4, 0.2344, 0.2453, 0.0, 0.0909, 0.0694, 0.0, 0.0737, 0.1905, 0.0237, 0.1012, 0.1197, 0.2653, 0.0887, 0.0708, 0.0, 0.0726], [0.8824, 0.4615, 0.6438, 0.5152, 0.3636, 0.2045, 0.6316, 0.6032, 1.0833, 0.2344, 0.283], [0.2222, 0.4667, 0.1562, 0.7925, 0.2677, 0.2023, 0.4615, 0.3895, 0.0238, 0.0, 0.1875, 0.2023, 0.1224, 0.129, 0.0796, 0.0536, 0.121], [0.2353, 0.0, 0.2055, 0.3636, 0.1136, 0.0227, 0.0263, 0.254, 0.3333, 0.0781, 0.283, 0.2626, 0.0809, 0.1923, 0.3, 0.071, 0.119, 0.1652, 0.0816, 0.2661, 0.0088, 0.0, 0.1613], [0.3922, 0.0, 0.2192, 0.1515, 0.0, 0.0, 0.0, 0.4762, 0.9333, 0.0312, 0.4528, 0.0, 0.197, 0.0231, 0.2885, 0.1526, 0.0714, 0.0, 0.1786, 0.2393, 0.2857, 0.2016, 0.0708, 0.0536, 0.3024], [0.4314, 0.3269, 0.3836, 0.6717, 0.3864, 0.0, 0.2105, 0.0938, 0.0755, 0.0, 0.4545, 0.1561, 0.0, 0.5579, 0.1429, 0.0118, 0.3036, 0.6125, 0.1429, 0.4435, 0.0265, 0.0, 0.504], [0.2157, 0.25, 0.1781, 0.5808, 0.0, 0.1842, 0.0317, 0.45, 0.0, 0.2075, 0.0, 0.3586, 0.0751, 0.0962, 0.2789, 0.2381, 0.0, 0.6696, 0.8148, 0.4694, 0.3145, 0.2655, 0.1429, 0.4194], [1.0784, 0.0962, 0.5616, 0.6515, 0.4091, 0.0, 0.4127, 1.35, 0.0469, 1.8491, 0.0, 0.5354, 0.0925, 0.2115, 0.2947, 0.1667, 0.1598, 0.5089, 0.6553, 0.7143, 0.5242, 0.1593, 0.0179, 0.8992], [0.9412, 0.3077, 0.5753, 0.9798, 0.4545, 0.0, 1.1053, 0.3016, 0.8, 0.9062, 1.2075, 0.1471, 0.7677, 0.578, 0.6346, 0.6421, 0.2857, 0.142, 0.8244, 1.0969, 0.4694, 0.8468, 0.3982, 0.0357, 0.6774]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

