created: 20230626010646000
creator: Drevarr
modified: 20230705163537280
modifier: drevarr
tags: ChartData
title: 202306260106_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Yngvar The Burdened", "Gamora Titus", "Rednuii", "Iskalla", "Drevarr Moonwillow", "Gestern Yesteryear"];
const professions = ["Scourge", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.5931, 10.0913, 14.3851, 0.0, 51.4758, 24.8226, 53.555, 14.3255, 14.5973, 26.802, 6.4345, 1.8286, 17.3151, 0.0, 30.7776, 24.8249, 9.1188, 14.2604, 30.9672, 29.5214, 30.6348, 24.5005, 46.8418, 14.3184, 13.2432, 33.4598, 13.7668, 21.9187, 34.6544], [94.9737, 18.5385, 57.9223, 0.0, 135.9025, 77.9731, 242.9056, 48.7906, 41.6696, 31.046, 0.0, 33.5712, 8.415, 144.1994, 13.0385, 54.4757, 47.604, 19.252, 26.0469, 19.2879, 3.7255, 15.1172, 9.7642, 31.104, 58.5317, 10.802, 28.7538, 18.7547, 28.1182, 18.8763, 86.3251], [42.84, 0.0, 73.6583, 0.0, 85.599, 115.5392, 11.5534, 9.4419, 98.6837, 0.0, 96.0627, 48.4638, 218.0732, 56.2115, 40.9274, 47.664, 62.7146, 17.5379, 11.1244, 16.7945, 0.0, 9.3744, 25.9816, 81.396, 59.3736, 108.8544, 94.9088, 101.2066, 79.399, 97.7558, 41.6256, 0.0, 52.3654, 0.0, 0.0, 86.1907], [101.9092, 0.0, 73.6281, 65.6604, 175.3331, 10.3162, 184.1728, 34.0194, 56.3648, 32.1984, 0.0, 29.8355, 79.5102, 146.417, 0.0, 37.3711, 22.572, 17.9104, 64.647, 79.9675, 4.2773, 13.9745, 0.0, 13.6483, 17.8751, 37.0994, 18.744, 53.448, 14.9101, 117.1061, 69.9722, 47.0232, 60.2784, 0.0, 115.5998, 20.83, 28.032, 127.5824], [0.0, 5.98, 0.0, 3.9907, 33.1944, 27.6567, 28.3278, 131.0338, 133.8719, 13.4496, 253.8368, 50.2684, 32.4851, 93.5883, 42.4393, 74.8384, 37.6332, 111.7116, 32.9893, 78.2093, 41.79, 51.4968, 59.2515, 14.2999, 43.6073, 75.9999, 0.0, 36.8726, 21.7728, 96.1207, 31.5436, 74.9496, 43.1368, 72.571, 74.5945, 49.6037, 33.744, 0.0, 35.3868, 8.6054, 67.7606], [41.971, 57.7256, 48.8631, 78.6378, 169.0448, 28.7123, 106.1029, 185.3561, 257.2586, 108.1382, 676.032, 84.6882, 58.8744, 88.6568, 38.9646, 153.8285, 112.0614, 433.6794, 54.1757, 195.7018, 146.91, 59.8612, 129.2099, 37.5144, 86.5579, 62.0545, 80.4182, 83.3684, 194.8363, 77.1804, 170.1768, 79.6601, 159.4068, 92.5221, 103.9954, 103.8, 23.2848, 124.1158, 0.0, 33.0931, 116.5956]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

