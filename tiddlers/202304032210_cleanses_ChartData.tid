created: 20230403221011000
creator: Drevarr
modified: 20230705163524253
modifier: drevarr
tags: ChartData
title: 202304032210_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Azar Fletcher", "Tootsie Pop Rocks", "Johosh The Great", "Lagertha Scorned", "Black Raspberry Pie", "Primal Clone", "Cat Wigglebooty", "Eibh\u00ebar", "High Sorcer Baradun", "Venomina The Siren", "Zenek Tryst", "Tika Sumiko", "Tegan Parker", "Mac Chiato", "Ak\u00e1nt\u00f3r", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Soulbeast", "Scrapper", "Firebrand", "Scrapper", "Chronomancer", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0819, 0.0476, 0.4732, 0.1433, 0.0508, 0.1628, 0.0, 0.1676], [0.1095, 0.1632, 0.0, 0.1476, 0.0223, 0.0606, 0.0, 0.0687, 0.3898, 0.3023, 0.0, 0.2297, 0.0, 0.2931, 0.0, 0.0, 0.0303], [0.1297, 0.1316, 0.2637, 0.1671, 0.0273, 0.0346, 0.0774, 0.1821, 0.3051, 0.1047, 0.0, 0.1459, 0.0, 0.3966, 0.0444, 0.0, 0.0], [0.2702, 0.7473, 0.0501, 0.0099, 0.0, 0.1756, 0.197, 0.5932, 0.3488, 0.0, 0.0, 0.3541, 0.0, 0.9138], [0.2622, 0.3596, 0.4066, 0.1783, 0.0347, 0.039, 0.0833, 0.2478, 0.4407, 0.3837, 0.0, 0.0, 0.2216, 0.0, 0.7414, 0.0222, 0.0, 0.0], [0.2507, 0.3263, 0.6923, 0.2591, 0.0298, 0.0, 0.1696, 0.2149, 0.8305, 0.4767, 0.0, 0.3243, 0.0, 0.7069, 0.2889, 0.0, 0.0303], [0.1354, 0.3737, 0.4396, 0.234, 0.0695, 0.0087, 0.381, 0.3851, 0.678, 0.1628, 0.0, 0.327, 0.3276, 0.0, 0.0, 0.0758], [0.4726, 0.3333, 0.7692, 0.1922, 0.0397, 0.0, 0.1577, 0.2597, 0.5254, 0.6628, 0.0, 0.0, 0.4081, 0.0, 0.3103, 0.0222, 0.0, 0.0], [0.3314, 0.3877, 0.0659, 0.2758, 0.0893, 0.0606, 0.3393, 0.3851, 0.5254, 0.4302, 0.0, 0.0, 0.4297, 0.8448, 0.0889, 0.0303], [0.2651, 0.2123, 1.0, 0.4596, 0.0868, 0.013, 0.253, 0.3433, 0.7966, 0.4535, 0.0, 0.7243, 1.5, 0.1333, 0.1081, 0.0303], [0.201, 0.039, 1.0238, 1.1672, 1.3898, 0.6395, 0.2222, 1.1297, 0.027, 2.2414, 0.8444, 0.027, 0.1061], [0.4092, 0.6807, 0.8901, 0.493, 0.1266, 0.0303, 0.5089, 0.6119, 0.6949, 0.4884, 0.0, 0.0, 0.6622, 0.027, 1.069, 0.1556, 0.0811, 0.0], [0.536, 0.9298, 1.1978, 0.7437, 0.134, 0.0, 0.7351, 0.5851, 1.2034, 0.7674, 0.7703, 1.6897, 0.0444, 0.0, 0.0], [0.6599, 1.0789, 1.5385, 0.8496, 0.2581, 0.1169, 0.5774, 0.7552, 1.4746, 0.6628, 0.0, 0.0, 0.8108, 0.1622, 1.6724, 0.1111, 0.1081, 0.0152], [0.6571, 0.9912, 1.6703, 0.9833, 0.2134, 0.2251, 0.6101, 0.7075, 1.5593, 1.3605, 0.0, 0.0, 0.8486, 0.0, 1.5517, 0.0444, 0.1351, 0.1667], [0.4611, 1.4088, 1.6923, 0.8162, 0.3648, 0.1948, 0.872, 1.0537, 1.1695, 0.8256, 0.0, 0.0, 1.2081, 2.2586], [0.7378, 1.1404, 1.8681, 0.9387, 0.4045, 0.1082, 1.003, 1.0299, 1.7458, 0.8605, 0.0, 1.0432, 0.2162, 1.8276, 0.6667, 0.2432, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

