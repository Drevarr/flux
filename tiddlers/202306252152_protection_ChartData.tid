created: 20230625215204000
creator: Drevarr
modified: 20230705163536684
modifier: drevarr
tags: ChartData
title: 202306252152_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Rafaellagabriela", "Imalou", "Black Raspberry Pie", "Primal Clone", "Eibh\u00ebar", "Rednuii", "Elon The Mender", "Ryvalia Fazebringer", "Gavann", "Tribal S", "Arriasa", "Miphest\u00f6", "Traidoruns Maximus", "Drevarr Moonwillow", "Crusader Siolith", "Fribble Bibble", "Gabe Malhorn", "Tika Fiery", "Solus Sanctus", "Bella Sassy", "Sygaldry Verdandi", "Koralia Danai", "Gestern Yesteryear"];
const professions = ["Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Druid", "Chronomancer", "Firebrand", "Druid", "Druid", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 339.0881, 121.6488], [32.7161, 65.9088, 11.186, 72.1243, 39.0062, 0.0, 19.2136, 63.7774, 144.96, 36.9725], [0.0, 55.5864, 39.48, 90.4148, 60.4531, 0.0, 26.7524, 0.0, 42.4771, 88.896, 21.1445, 15.9144, 10.5678, 0.0, 28.4695, 26.51, 37.2557, 0.0], [9.3362, 66.792, 38.5588, 106.4353, 38.0453, 10.4949, 14.8896, 0.0, 38.7418, 25.056, 20.4761, 35.9328, 35.8455, 0.0, 25.5858, 42.3046, 57.4358, 0.0], [27.0195, 32.7888, 29.7745, 54.0932, 30.9691, 15.7603, 22.8984, 37.0171, 44.3293, 28.992, 30.3496, 20.292, 15.1743, 0.0, 27.8928, 60.8825, 96.3917, 16.4275], [0.0, 101.0331, 43.2814, 88.764, 244.0866, 105.7056, 33.4181], [15.5471, 78.9912, 54.1534, 142.0434, 49.0963, 0.0, 33.0128, 0.0, 41.7671, 60.864, 3.0988, 59.5992, 49.2004, 3.7055, 0.0, 63.944, 0.0, 28.1851], [22.9844, 46.1472, 41.2237, 58.374, 61.1957, 33.2069, 28.9144, 29.2891, 26.3012, 59.328, 23.9394, 52.1208, 47.923, 32.2664, 40.5808, 34.3029, 54.1834, 25.3037], [54.9884, 72.9744, 24.1815, 238.6199, 108.3701, 31.9976, 20.0155, 60.073, 77.856, 58.998, 53.7168, 104.5944, 0.0, 16.3057, 80.1562, 28.5331, 32.4576], [26.2678, 70.7112, 51.1266, 149.632, 123.4834, 42.77, 27.3902, 109.9589, 176.352, 49.3979, 45.372, 28.0648, 68.8136, 0.0, 115.1549, 67.5629, 51.1373], [29.3535, 121.9368, 82.8422, 136.7897, 100.7261, 0.0, 15.4724, 54.9902, 57.233, 213.12, 25.0939, 80.0523, 16.7846, 65.4326, 125.3136, 81.4598, 22.6872], [0.0, 105.2664, 67.9056, 119.991, 159.9562, 32.6744, 49.5475, 119.7447, 167.904, 14.1571, 73.4616, 83.3813, 19.1365, 34.7611, 203.3128], [192.9585, 166.7702, 0.0, 44.0296, 19.1765, 79.4903, 227.232, 38.1573, 124.7616, 15.9485, 0.0, 48.9696, 194.2674, 35.7034, 79.1899], [36.1974, 74.5752, 56.0945, 132.963, 80.4586, 14.5942, 47.2256, 9.4282, 74.7363, 125.76, 43.3523, 99.1344, 73.4716, 12.7746, 55.4185, 83.7743, 186.2784, 74.0894], [63.0191, 115.1472, 90.2776, 224.0264, 125.7547, 0.0, 31.3396, 34.0584, 84.6455, 228.384, 27.342, 56.5896, 42.3875, 0.0, 44.4606, 141.0387, 145.2528, 23.9458], [74.9266, 175.536, 81.7236, 180.1811, 116.1014, 2.7, 59.9908, 35.0078, 62.1104, 217.44, 44.2029, 123.4848, 78.1942, 41.234, 57.8827, 137.3509, 70.3718, 55.0786], [0.0, 158.9208, 60.865, 197.1744, 132.9619, 0.0, 107.2352, 29.6314, 148.6699, 291.552, 61.0942, 53.9904, 45.0197, 58.04, 276.163, 101.9357, 21.8261], [0.0, 176.3088, 89.3893, 232.7177, 129.9043, 22.5775, 56.8888, 16.8912, 100.3892, 229.056, 106.5427, 62.5176, 48.5036, 0.0, 153.148, 225.8567, 370.3392, 21.4949], [101.0758, 222.7872, 126.9282, 204.4387, 191.5368, 0.0, 45.966, 72.1574, 48.4968, 302.496, 66.1676, 105.3816, 77.7297, 0.0, 98.0441, 168.6619, 125.9597, 130.2941], [73.9376, 190.8816, 157.1962, 274.2281, 151.0018, 35.6109, 42.2624, 21.3072, 93.4744, 212.64, 102.3198, 163.6128, 177.8337, 69.998, 145.9127, 212.9148, 223.1645, 62.9942], [146.0555, 123.7032, 159.7624, 232.3285, 187.7803, 114.9244, 40.3181, 121.103, 323.04, 57.084, 80.3016, 72.2716, 157.4575, 105.8562, 346.5084, 184.0608, 50.2762], [54.5928, 225.4368, 117.6833, 259.5697, 152.3122, 26.7485, 102.3848, 3.6984, 138.6372, 373.92, 146.9177, 177.612, 129.6398, 100.7078, 100.5083, 248.8181, 193.6704, 0.0], [47.9467, 251.5464, 159.0057, 291.3511, 251.2037, 16.6842, 125.8472, 36.6859, 186.5783, 442.944, 84.3045, 135.432, 140.4786, 113.3132, 110.103, 225.5088, 350.8243, 153.0806]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

