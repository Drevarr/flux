created: 20230715220952000
creator: Drevarr
tags: ChartData
title: 202307152209_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Crusader Siolith", "My Birthday Girl", "Artakama Nahid", "Gestalia Yesteryear", "Drevarr Moonwillow", "Tribal S", "Arriasa"];
const professions = ["Tempest", "Firebrand", "Scrapper", "Tempest", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[147.386, 514.4916, 292.951, 62.307, 37.8032, 197.1603, 1.1077, 17.9046, 32.629, 21.1596, 24.3954, 24.9796, 40.7534, 66.4114, 16.9573, 0.0, 42.3504, 18.3686, 93.9359, 0.0, 29.8119, 21.3293, 0.0, 23.3496], [250.1923, 399.3019, 93.6146, 83.2145, 87.0408, 241.029, 13.524, 52.2783, 102.9067, 8.0942, 28.0474, 19.089, 65.0369, 62.6661, 29.1209, 42.042, 28.4544, 38.0074, 148.6976, 222.0798, 71.7197, 41.2675, 184.3057, 45.7968], [621.5165, 1153.576, 505.4756, 256.0818, 66.424, 112.1247, 115.6882, 77.0733, 375.2928, 78.0965, 0.0, 49.3391, 0.0, 286.839, 71.9316, 104.852, 0.0, 0.0, 184.614, 237.0178, 72.6426, 130.6224], [868.9794, 1358.4323, 617.6834, 273.1123, 100.9701, 374.2704, 69.5005, 266.1417, 455.2517, 60.4666, 142.7932, 31.4459, 270.6947, 295.5172, 65.3967, 127.446, 122.9184, 163.1263, 201.7639, 111.9169, 109.7376, 539.847, 53.204], [292.3025, 1468.2488, 1531.777, 284.6045, 87.2833, 623.6181, 191.0362, 74.1762, 677.3198, 254.987, 247.496, 207.2772, 400.0216, 92.538, 487.41, 106.4304, 0.0, 46.2921, 183.2368, 0.0, 347.2356, 171.948, 269.8288, 247.1448], [1568.478, 3705.2124, 1738.248, 834.983, 402.9795, 494.6427, 346.0856, 269.2476, 1209.6619, 319.7779, 435.6106, 462.299, 1013.5283, 266.166, 282.7, 93.6317, 303.7125, 343.737, 704.6732, 1104.6403, 461.143, 504.8176], [1166.3508, 6175.242, 2933.1854, 708.0152, 633.5753, 234.7722, 550.6715, 282.7674, 2590.1179, 222.9612, 587.7529, 397.3699, 0.0, 1162.9769, 428.2745, 0.0, 116.5392, 0.0, 53.048, 77.8252, 320.5626, 808.3429, 348.8419, 125.3013, 996.5128], [2090.8274, 7058.1391, 4731.537, 2366.6276, 897.1578, 786.5793, 533.7214, 259.5645, 2625.2568, 252.6216, 692.5653, 413.1371, 0.0, 1765.1561, 736.8457, 429.572, 0.3629, 58.0093, 63.2843, 271.9678, 1626.5823, 2651.0131, 182.885, 628.5216]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

