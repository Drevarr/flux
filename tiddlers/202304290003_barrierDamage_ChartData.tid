created: 20230429000309000
creator: Drevarr
modified: 20230705163527128
modifier: drevarr
tags: ChartData
title: 202304290003_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Koralia Danai", "Arriasa", "Endless Endings", "Cat Wigglebooty", "Aronorf Xideliesi", "Sister Elon\u00edth", "Bella Sassy", "Tegan Parker", "Permanent Dawn", "Morv\u00e4rth", "Hyde En Sikh", "Mistwalker Caelon", "Rina Of Theros", "Drevarr Moonwillow", "Khailerian", "Demon Sekhmet", "Panther B Me", "Newtype Khan", "Puny Tinker", "Blancooo Padreee", "Smol Gluvs", "Be\u00eb", "X Devastation X", "Cyclotechnist Farra"];
const professions = ["Firebrand", "Druid", "Spellbreaker", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Weaver", "Reaper", "Chronomancer", "Vindicator", "Scourge", "Scrapper", "Vindicator", "Spellbreaker", "Scourge", "Spellbreaker", "Scrapper", "Spellbreaker", "Scourge", "Scourge", "Reaper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[511, 2402, 227, 16533, 0, 0, 0, 0, 0, 0, 0, 0, 20250], [2366, 2041, 1841, 17092, 0, 0, 3606, 0, 0, 0, 0, 0, 13019], [21439, 423, 0, 5486, 0, 0, 0, 0, 0, 14731], [3254, 2016, 7200, 26366, 409, 0, 1908, 949, 0, 0, 85, 12, 503], [796, 0, 1782, 0, 15819, 5223, 0, 6699, 0, 820, 0, 2480, 0, 9179], [2431, 13, 1088, 0, 30735, 851, 0, 7795, 0, 0, 0], [1096, 5959, 0, 0, 17574, 214, 0, 2409, 0, 0, 0, 0, 0, 21192], [422, 7445, 1542, 24788, 409, 0, 0, 0, 0, 0, 0, 14368], [2621, 5260, 2939, 35822, 0, 295, 0, 0, 2779], [2601, 1905, 3690, 0, 35540, 2924, 619, 2668, 0, 0], [2059, 6930, 1149, 0, 19500, 324, 0, 1211, 0, 0, 0, 0, 956, 23053], [6779, 1790, 3329, 0, 24140, 0, 295, 5216, 0, 0, 0, 0, 0, 14936], [1863, 10118, 1737, 0, 28687, 4662, 0, 3408, 0, 0, 0, 4495, 0, 19124], [1700, 5921, 145, 0, 33897, 153, 1875, 1731, 0, 0, 692, 3056, 224, 36690], [6437, 0, 2545, 0, 58782, 1040, 63, 6800, 0, 0, 0, 0, 0, 22627], [7534, 6998, 2376, 0, 30489, 0, 0, 5362, 0, 0, 2135, 139, 3374, 40703], [1975, 3369, 6416, 0, 42167, 0, 0, 753, 0, 0, 0, 0, 0, 46316], [9464, 5251, 728, 0, 26983, 379, 0, 2865, 0, 0, 0, 0, 0, 56188], [103253], [9831, 8696, 441, 0, 42357, 551, 0, 5723, 0, 1189, 0, 0, 1688, 44482], [9406, 7066, 6091, 0, 46191, 259, 3376, 7364, 0, 0, 0, 0, 0, 43876], [10113, 6862, 9774, 0, 69014, 256, 999, 3666, 0, 0, 76, 0, 1188, 61497], [579, 14810, 2302, 0, 0, 5857, 214721], [25117, 23819, 21641, 0, 105562, 2673, 7048, 23192, 2292, 105, 4906, 0, 1610, 170199]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

