created: 20230614223544000
creator: Drevarr
modified: 20230705163535120
modifier: drevarr
tags: ChartData
title: 202306142235_dmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Hyde En Sikh", "Fribble Bibble", "Raelyn Sunray", "Elon The Archmagus", "Sygaldry Verdandi", "Sub Train", "Tegan Parker", "Cedryn X", "Bella Sassy", "Drevarr Moonwillow", "Zayde Sunsabre", "Primal Clone", "Tootsy Pop Star", "River No Hug", "Eibh\u00ebar", "Be\u00eb", "Smol Gluvs", "Rozaalyna", "No Reserv\u00e9", "River No Hug", "Elonith Requiem", "Jacob Pine", "Lord Erin The Wise", "Johosh The Mighty", "Alarics Bane"];
const professions = ["Chronomancer", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Tempest", "Berserker", "Firebrand", "Scrapper", "Spellbreaker", "Chronomancer", "Reaper", "Scourge", "Chronomancer", "Reaper", "Reaper", "Reaper", "Vindicator", "Reaper", "Reaper", "Reaper", "Weaver", "Berserker", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 11.4043, 41.5091, 22.883, 9.4375], [33.9592, 51.1064, 72.4, 74.4152, 35.7875, 4.2923, 2.3115, 12.0111], [51.4694, 282.617, 122.0, 44.3158, 4.3625, 16.1231, 4.1639, 40.4667, 0.0], [25.2245, 7.3404, 36.5636, 135.2456, 39.7, 91.5846, 52.6721, 0.0, 24.069], [38.3878, 135.617, 200.2909, 83.6257, 0.0, 122.3538, 3.2459, 88.6889, 0.0], [74.0816, 26.3617, 14.7636, 184.6901, 111.325, 65.6462, 6.7049, 0.0, 0.0], [18.1224, 14.9362, 124.2727, 96.9649, 38.8125, 117.5692, 33.0656, 48.0667, 251.7356], [0.0, 167.383, 459.4182, 156.7602, 99.925], [30.551, 50.8085, 35.7091, 163.2105, 19.9125, 261.3538, 83.7049, 146.1778, 130.908], [144.2245, 3.0426, 488.9636, 237.6491, 193.35, 212.8308, 47.2623, 57.8889, 47.1609], [1202.2923, 296.0, 147.7111, 183.7471], [72.9184, 39.1277, 292.8, 371.3392, 78.8125, 503.0769, 165.2131, 185.3333, 38.1954], [237.4694, 56.4894, 548.8545, 593.6725, 256.1875, 742.0923, 724.2459, 69.5222, 2.092], [375.3061, 380.8511, 520.9455, 862.6608, 858.8], [382.6939, 52.3191, 546.9818, 620.9474, 273.0625, 883.9692, 455.7705, 685.4222, 91.7126], [2106.9385, 2287.2787, 675.9778, 0.0], [2579.4308, 814.6393, 909.1778, 1400.2414], [138.2653, 825.0426, 2560.7818, 1519.3392, 519.45], [1260.0612, 354.9149, 1642.9091, 1528.1579, 1500.8], [4007.3385, 1251.7049, 2056.2111, 415.6897], [2530.4308, 2231.5902, 2366.2444, 1187.0], [88.8367, 156.1064, 885.9455, 1554.0994, 1064.8125, 700.3077, 1608.4918, 824.8111, 315.0345], [2353.102, 770.4043, 1746.9818, 2464.2456, 1073.4], [506.8163, 2721.9149, 3217.0909, 3928.2339, 666.9], [1166.9184, 328.2979, 1082.7636, 2308.6374, 1953.3625, 3591.8923, 2193.6721, 3295.2778, 662.7816]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

