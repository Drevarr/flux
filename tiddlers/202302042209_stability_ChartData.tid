created: 20230204220933000
creator: Drevarr
modified: 20230705163518720
modifier: drevarr
tags: ChartData
title: 202302042209_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Grasszanine", "Demon Sekhmet", "Etch\u00e9ry", "Belvyn Brightblade", "Domina Flagbringer", "Xanvias Einzbern", "Ryvalia Fazebringer", "Daddys Lil Orchid", "Mistwalker Caelon", "Aronorf Xideliesi", "Zaylen Harker", "Mac Arons", "Blanco Padre Guard", "Ravioli Fetabringer", "Sygaldry Verdandi", "Koralia Danai", "Johosh The Great"];
const professions = ["Dragonhunter", "Spellbreaker", "Berserker", "Berserker", "Firebrand", "Spellbreaker", "Berserker", "Chronomancer", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.2936, 5.7266, 0.8784, 6.6248, 2.3594, 3.1845], [13.4858, 7.3064, 3.2794, 2.4843, 2.9885, 5.211, 0.3763, 2.5044, 0.0, 4.4453, 7.9988], [14.3031, 4.5418, 1.9325, 5.6311, 3.775, 8.9745, 0.0, 0.0, 0.0, 7.7792, 7.9988], [11.0338, 5.5292, 1.5811, 5.4655, 5.0333, 8.685, 0.9139, 3.4271, 0.0, 9.7241, 6.5704], [24.1109, 5.9241, 2.4595, 10.5997, 1.4156, 16.5015], [22.0676, 6.9115, 1.8154, 6.6248, 4.2468, 16.212, 0.0, 0.0, 0.0, 11.1132, 15.7119], [23.7023, 7.7013, 1.6982, 5.2998, 5.6624, 14.475, 1.9891, 4.2179, 1.0045, 9.4462, 11.9981], [9.3992, 6.1216, 0.8198, 7.4529, 7.5499, 19.3965, 4.5696, 9.0949, 0.0, 14.4472, 11.4268], [21.659, 11.2558, 4.0992, 13.084, 8.4937, 28.95, 4.8922, 0.0, 1.7517, 34.7287, 4.5707], [44.5439, 17.1799, 1.5811, 5.7967, 5.6624, 15.633, 5.8598, 12.522, 0.0, 20.2816, 21.4253], [28.1975, 9.2811, 3.455, 12.9184, 16.0436, 23.739, 6.3437, 2.109, 0.294, 25.2825, 23.7106], [43.318, 19.1546, 2.7523, 14.5746, 16.9873, 29.529, 5.5373, 0.0, 1.96, 30.0056, 31.138], [67.4289, 21.5242, 7.2614, 19.3775, 19.3467, 32.424, 4.1395, 16.4763, 0.1225, 36.1179, 36.8514], [69.0635, 18.9571, 4.919, 20.7025, 22.4925, 35.6085, 2.7418, 21.6168, 0.4165, 35.0066, 31.995], [83.3666, 18.3647, 4.2163, 22.1931, 19.8185, 41.3985, 5.8061, 19.2443, 1.7885, 43.6193, 43.7075], [86.6359, 24.2888, 8.784, 23.0212, 23.7508, 22.002, 7.2576, 25.1757, 2.1805, 42.2302, 38.2798], [89.0879, 33.175, 6.6758, 18.3838, 0.0, 43.425, 5.1072, 27.6801, 2.0825, 56.3995, 50.8493], [85.4099, 32.9775, 9.0768, 27.3273, 26.4247, 50.0835, 8.3866, 26.362, 0.3797, 58.0665, 60.562]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

