created: 20230625214256000
creator: Drevarr
modified: 20230705163536101
modifier: drevarr
tags: ChartData
title: 202306252142_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Hayuf", "Wall Knot", "Drumina", "Arriasa", "Booboo Hurts", "Shrimp Tempsura", "Yngvar The Burdened", "Wall Knot", "Blaze All Might", "Aronorf Xideliesi", "Koralia Danai", "Ani Deasun", "Gestern Yesteryear"];
const professions = ["Firebrand", "Firebrand", "Druid", "Druid", "Firebrand", "Tempest", "Scourge", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[102.8564, 49.4833, 146.6672, 0.0, 22.8327, 0.0, 4.0212], [0.0, 95.3287, 112.014, 45.3965, 93.9906], [34.1225, 0.0, 0.0, 0.0, 28.6902, 18.0339, 14.3387, 49.7475, 17.283, 0.0, 25.6641, 11.7562, 71.1569, 0.0, 14.5928, 40.9856, 11.6113, 0.0, 14.5332], [0.0, 0.0, 53.5799, 88.5169, 173.8688, 50.715], [0.0, 21.9632, 0.0, 28.2431, 10.0701, 0.0, 54.5325, 28.413, 14.1312, 28.6416, 50.0485, 79.8138, 21.425, 21.3923, 35.5448, 0.0, 7.3774, 25.4628], [44.3399, 194.0551, 52.9893, 13.7877, 105.5266, 46.5512, 9.5438, 0.0], [14.1372, 63.03, 47.208, 50.0774, 31.2858, 48.3529, 105.2842, 31.9082, 3.4532, 56.6892, 28.0327, 16.2911, 3.4373], [75.9785, 76.2381, 15.2725, 27.1814, 59.9389, 25.2054, 25.6601, 168.9851, 42.7846, 13.6556, 46.0355, 18.4993, 0.0, 47.1478], [40.1556, 0.0, 8.9666, 22.3448, 33.2006, 70.645, 36.9605, 140.5323, 163.2262, 72.156, 122.3232], [82.7075, 176.9625, 85.197, 72.4224, 67.371, 84.13, 206.8153, 47.2727, 53.9305, 159.5117, 63.1745, 0.8425, 5.3856], [132.6312, 146.2294, 47.9968, 85.734, 149.9839, 125.054, 40.2624, 304.4663, 169.848, 270.1709, 214.1564], [292.7468, 157.107, 35.9489, 152.2692, 110.2096, 0.0, 356.1938, 119.679, 186.3994, 192.603, 257.4203, 556.1946, 196.6419, 55.8866, 230.7316], [225.2703, 124.4607, 104.5499, 45.7934, 244.525, 124.041, 105.6427, 281.5725, 154.602, 44.6458, 134.2755, 248.4619, 524.0689, 181.1792, 91.2679, 290.0923, 174.7569, 43.2446, 47.1478]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

