created: 20230330095927000
creator: Drevarr
modified: 20230705163523496
modifier: drevarr
tags: ChartData
title: 202303300959_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Koralia Danai", "Solus Sanctus", "Venomina The Siren", "Fribble Bibble", "Mac Chiato", "Khailerian", "Zefirokai", "Sygaldry Verdandi", "Sister Elon\u00edth", "Zaylen Harker", "Drevarr Moonwillow", "Bella Sassy", "Johosh The Great", "Newtype Khan", "Grasszanine", "Arcanophage Farra"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Tempest", "Herald", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.2442, 51.1434, 1.472, 16.7085, 335.8432, 3.948, 7.019, 5.7307, 16.0539, 10.3896, 0.0, 0.0, 8.8712, 0.0, 16.416], [1.3133, 33.9738, 0.0, 18.6021, 375.0976, 1.4476, 17.2396, 0.6683, 9.1851, 5.7283, 2.1082, 6.8737, 2.0434, 5.0688], [1.3651, 63.5639, 1.84, 41.7712, 261.696, 7.7973, 27.0908, 2.2477, 13.8175, 9.828, 2.687, 4.8206, 14.7463, 5.7328, 20.7936], [21.0527, 462.3296, 0.0, 9.8512, 3.9488, 0.0, 0.0, 2.6611, 17.8012, 21.6576], [25.6935, 3.956, 29.407, 403.448, 11.2518, 12.9297, 1.3973, 14.776, 8.9294, 8.5187, 5.8463, 15.6096], [0.0, 58.3278, 0.0, 90.7828, 392.544, 0.0, 2.9554, 0.0, 0.0, 5.279, 0.0, 2.7025, 0.0, 0.0], [1.886, 32.1917, 416.5328, 11.7124, 22.7809, 5.8522, 18.6097, 11.6251, 1.3997, 2.6242, 15.0988, 14.786, 13.536], [525.5728, 31.5511, 10.8979, 25.434, 0.0, 20.2738, 0.8765, 2.7612, 0.0, 49.5936], [44.3243, 1.932, 21.9438, 543.0192, 11.6795, 22.4731, 16.1392, 24.4402, 11.0074, 0.5184, 1.7371, 16.0388, 7.8613, 18.3744], [10.051, 40.3232, 604.0816, 3.4874, 28.2606, 6.1965, 13.8974, 9.6034, 0.0, 13.5125, 0.6244, 12.3264], [0.0, 37.8705, 0.0, 32.7487, 671.6864, 13.6206, 19.333, 3.8475, 17.0123, 9.6034, 9.3413, 3.7178, 15.4368], [1.9181, 53.7006, 11.638, 35.8676, 638.9744, 10.2319, 24.0739, 8.6265, 21.2454, 22.9694, 21.385, 2.611, 23.8464], [1.8835, 37.6269, 0.0, 56.1406, 806.896, 10.9886, 26.1673, 3.4425, 32.5071, 24.7104, 0.0, 18.7413, 3.6894, 20.448], [2.471, 70.8701, 2.53, 62.267, 811.2576, 4.5402, 25.059, 4.1917, 22.6831, 20.8354, 1.0109, 15.51, 2.4974, 23.8464], [8.0006, 67.4606, 14.72, 10.0251, 1262.6832, 18.4569, 33.2478, 17.0708, 36.9798, 38.6942, 8.8906, 33.84, 9.3086, 45.4464], [13.7894, 126.1537, 24.679, 111.1672, 2233.1392, 32.4723, 48.7019, 15.8152, 48.7207, 68.8522, 71.0288, 14.8711, 66.5856], [18.5414, 219.186, 5.451, 167.085, 3142.5328, 52.5084, 68.7121, 28.998, 126.7537, 92.1586, 5.0458, 85.0113, 28.6922, 98.6112]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

