created: 20230628220723000
creator: Drevarr
modified: 20230705163539782
modifier: drevarr
tags: ChartData
title: 202306282207_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tika Fiery", "Solus Sanctus", "Tegan Parker", "Tribal S", "Demon Staph", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[313.4951, 619.8481, 285.0, 548.4196, 744.0103, 328.3194, 106.4909, 505.625, 11.9403, 531.5368, 488.287, 180.8, 431.5862, 539.5347, 6.7826, 162.8321, 537.9938, 400.2213, 46.1707, 241.0, 1099.8667, 588.6111], [11.1389, 401.2718, 795.6962, 260.5667, 738.1964, 838.1134, 878.4444, 860.5273, 1305.5469, 1.4328, 507.3824, 262.2593, 778.6933, 1351.5517, 1327.6436, 46.913, 676.855, 502.4568, 515.5164, 319.0366, 537.281, 1062.5111, 26.9184, 627.8333], [1161.5437, 2554.3354, 662.7333, 1670.3571, 1507.0722, 1649.6727, 607.5938, 246.209, 820.6176, 1633.6389, 1422.9067, 2638.7931, 2755.8317, 290.5435, 1225.0611, 1936.3704, 2420.2213, 406.6829, 1690.6033, 2825.6444, 2063.7778], [1.8235, 1503.3204, 3558.0886, 1198.8333, 1241.0179, 1256.7423, 1344.0556, 1938.6, 3219.5781, 1133.8235, 1539.0833, 1495.4, 3689.0, 1950.2079, 37.5435, 1309.5496, 1662.6358, 1880.0984, 351.2561, 1172.438, 1164.2444, 55.6531, 2007.4444], [1375.25, 253.8431, 2212.835, 4853.7089, 1473.9778, 744.6696, 1925.4433, 5289.8889, 2641.0364, 2035.8119, 0.0, 333.2672, 2684.3519, 3530.8934, 244.122, 2488.1653, 4344.6, 32.9796, 3225.0556], [39.8039, 1779.6699, 3020.519, 1507.4556, 2404.0357, 3736.5979, 192.4583, 1727.7273, 4809.5312, 154.209, 2641.4779, 3972.9537, 4500.4933, 5266.6634, 23.1522, 339.0076, 1092.1605, 1453.6066, 376.3293, 1676.9091, 2722.6444, 10.0, 3061.0694], [190.7222, 43.6275, 2306.5146, 3224.3861, 1582.9667, 2506.5893, 2929.1753, 1935.7083, 2082.0364, 2236.4844, 4.5672, 1934.4853, 1418.2685, 1994.4667, 1003.4483, 5626.7228, 82.9783, 2113.8473, 2358.9506, 1909.4426, 982.2317, 1392.5868, 4471.7556, 0.0, 3464.0139]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

