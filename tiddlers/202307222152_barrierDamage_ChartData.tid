created: 20230722215203000
creator: Drevarr
tags: ChartData
title: 202307222152_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Einzbern", "Tootsie Pop Rocks", "Glorious Gluvs", "Bella Sassy", "Hyde En Sikh", "Sr Conrad", "Nina Chan Fanboy", "Newtype Khan", "Drevarr Moonwillow", "Skylar Shadowmoon", "Daphne Agla\u00e9", "Name Is What", "Mort\u00e4rion", "Be\u00eb", "Keypek The Drunk", "Sirius Quack"];
const professions = ["Berserker", "Scrapper", "Berserker", "Firebrand", "Chronomancer", "Bladesworn", "Druid", "Spellbreaker", "Scrapper", "Scrapper", "Scourge", "Scourge", "Scrapper", "Scourge", "Scrapper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 2296, 0, 0, 0, 1290, 0, 0, 4626, 0, 2748, 2458, 2655, 5548, 0, 0, 3260, 0, 1379], [829, 5605, 0, 488, 1359, 0, 2864, 1297, 0, 0, 2480, 9457, 1561, 190, 0, 1244, 0, 299], [0, 7392, 0, 285, 0, 0, 0, 0, 2090, 2918, 0, 5473, 3153, 0, 421, 1360, 393, 0, 4789], [0, 6320, 0, 890, 954, 0, 0, 0, 4642, 0, 0, 2323, 1439, 119, 1477, 0, 8962, 0, 1745], [0, 4584, 0, 387, 262, 0, 0, 0, 4906, 0, 0, 981, 2987, 421, 4931, 0, 8232, 0, 1727], [24177, 0, 4726, 6712, 2950], [8920, 0, 6842, 509, 1354, 0, 0, 8452, 0, 0, 7822, 421, 2969, 4174], [0, 14055, 0, 4007, 6930, 2242, 2864, 6594, 0, 3011, 1226, 3756, 2711, 421, 6526, 0, 3526], [626, 7262, 0, 4707, 1110, 1532, 5, 0, 7047, 0, 717, 892, 3557, 2207, 2798, 455, 24812, 69, 8379], [122, 49938, 0, 5553, 9416, 5428, 0, 1415, 19687], [899, 39163, 0, 6030, 4606, 2000, 0, 0, 10603, 6443, 8815, 2590, 5678, 4107, 13250, 1300, 6430], [0, 16987, 8932, 7878, 6111, 0, 2614, 22549, 1781, 3593, 20346, 10236, 0, 9107, 13858, 22503, 423, 14019], [0, 0, 1159, 18338, 9287, 237, 0, 41018, 3304, 5082, 29882, 24743, 5643, 27706], [1000, 50358, 0, 10902, 6736, 5821, 1015, 0, 45738, 1248, 8235, 13900, 17686, 5020, 11180, 7271, 30376, 1025, 13882], [2053, 97082, 0, 11166, 9501, 6281, 1535, 3209, 44601, 1233, 7031, 22463, 35151, 4270, 16493, 14895, 43806, 67, 47566], [1208, 166271, 2, 57899, 25799, 8525, 1663, 3435, 41346, 0, 19158, 28950, 23888, 1630, 10048, 4669, 70649, 942, 27644]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

