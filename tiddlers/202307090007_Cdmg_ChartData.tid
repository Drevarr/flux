created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Jerryatric Reflexes", "Hayuf", "Glorious Gluvs", "Prolly Getn Carried", "Scythe User", "Danaeryn", "Tantai Jin", "Jmbrage Rev", "Boof Floof", "Free H\u00e4nd", "Whip \u00d1 Sl\u00e0pper", "Lost Uber Driver", "Koranthin", "Drevarr Moonwillow", "Luke The Knight", "Naithan Stone", "Tru Master", "Blaze All Might", "Audra Storm", "Red Reaper Robin", "Tika Fiery", "Erin Celes", "Jerryatric Reflexes", "Ggclaudx"];
const professions = ["Spellbreaker", "Firebrand", "Berserker", "Specter", "Reaper", "Tempest", "Reaper", "Vindicator", "Firebrand", "Vindicator", "Tempest", "Herald", "Firebrand", "Scrapper", "Berserker", "Tempest", "Scourge", "Firebrand", "Weaver", "Reaper", "Firebrand", "Herald", "Berserker", "Holosmith"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.608, 10.4314, 0.0, 26.9649, 27.7735], [14.816, 5.098, 26.6552, 59.4386, 16.2059], [10.232, 0.0, 0.0, 3.5439, 4.7735, 23.9841, 0.0, 4.2069, 2.5395, 0.0, 29.8644, 0.0, 115.9808], [1.28, 315.3725, 45.4828, 55.2018], [46.624, 38.2549, 14.5517, 1.7807, 37.0069], [4.632, 23.3137, 0.0, 20.5175, 27.4462, 2.1151, 0.0, 0.1552, 17.9349, 9.1818, 17.1186, 7.5395, 46.6154], [2.488, 41.9608, 25.1034, 6.1754, 27.7941, 3.5794, 0.0, 14.7845, 18.8, 0.0, 10.8305, 0.0263, 37.4231], [42.52, 8.1373, 41.5172, 9.3421, 33.7826, 3.9683, 25.0833, 15.3448], [5.528, 5.1765, 8.7241, 2.7982, 20.7368, 34.6508, 0.0, 6.8448, 7.6651, 6.8136, 56.5395, 13.0577], [26.896, 56.098, 2.069, 3.2018, 32.3021, 9.0278, 3.2222, 34.3534, 7.4465, 0.0, 5.2542, 11.0658, 39.7115], [3.464, 2.3529, 0.0, 42.5702, 27.167, 8.5476, 26.6944, 16.9224, 25.8605, 0.0, 9.8136, 67.2885], [7.0198, 0.0, 65.1293, 53.9395, 0.0, 0.0, 260.2885], [20.248, 0.0, 5.2759, 79.6228, 25.7986, 6.5913, 0.0, 36.569, 12.7116, 0.0, 24.2542, 16.5263, 32.5577], [17.6, 26.6471, 12.3793, 37.7632, 33.2357, 16.8532, 4.4167, 29.8276, 26.4744, 1.8182, 9.1695, 4.0921, 16.2885], [33.1468, 0.0, 23.5086, 59.0791, 0.0, 102.8305, 96.1184, 170.8654], [12.4, 24.8824, 9.2069, 239.5702, 38.8101], [15.3095, 163.6944, 7.3448, 160.9581, 0.0, 62.6102], [49.8787, 57.4603, 12.75, 53.2414, 55.3628, 0.0, 11.339, 0.0, 67.2115], [15.464, 65.0784, 64.4828, 38.0526, 68.3593, 14.7183, 0.0, 49.0431, 39.1907, 0.0, 0.0, 42.8947, 72.0769], [32.8, 49.3137, 55.2069, 59.2719, 57.2952, 38.1389, 13.0556, 34.9397, 47.693, 0.0, 21.4746, 19.6842, 81.5192], [23.712, 35.3922, 0.0, 51.0877, 55.1442, 84.1032, 0.0, 42.1466, 42.386, 0.0, 4.8814, 19.0132, 134.6923], [58.08, 74.1373, 0.0, 139.2105, 126.3455, 49.0556, 11.5278, 172.7931, 37.2233, 7.7576, 54.7627, 59.7237, 98.1923], [117.7262, 53.5556, 214.6121, 99.0419, 2.1212, 0.0, 294.7632, 947.9423], [266.0, 79.9722, 107.7672, 217.5023, 0.0606, 0.5932, 591.4231]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

