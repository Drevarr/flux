created: 20230508221143000
creator: Drevarr
modified: 20230705163529146
modifier: drevarr
tags: ChartData
title: 202305082211_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Sister Elon\u00edth", "No Reserv\u00e9", "La Morte Vivante", "Belvyn Brightblade", "Eibh\u00ebar", "Be\u00eb", "Kiloak", "Tegan Parker", "Solus Sanctus", "Zady Stardust", "Newtype Khan", "Osh Kosh Johosh", "Artakama Nahid", "Grasszanine", "Xanvias Einzbern", "N\u00e9azoule", "Drevarr Moonwillow", "Bella Fae"];
const professions = ["Firebrand", "Firebrand", "Herald", "Dragonhunter", "Firebrand", "Chronomancer", "Scourge", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Spellbreaker", "Chronomancer", "Tempest", "Spellbreaker", "Berserker", "Reaper", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[325, 438, 1678, 951, 1330, 522, 1012, 563, 1824, 304, 1532, 5882, 9700, 586, 331, 327], [418, 415, 1431, 770, 300, 297, 1464, 3371, 3951, 591, 418, 327, 299, 308], [369, 477, 431, 611, 323, 2020, 263, 3143, 3674, 2059, 1340, 6185, 328, 286], [323, 363, 17706, 301, 899, 11461, 10052, 1817, 873, 364, 517], [697, 847, 452, 393, 1412, 551, 8140, 277], [320, 520, 502, 400, 670, 411, 553, 541, 2323, 353, 3360, 3301, 293, 1664, 507, 336, 403], [286, 283, 843, 685, 1804, 489, 464, 369, 1807, 477, 3203, 5337, 221, 997, 1093, 360, 401], [613, 477, 652, 1348, 384, 675, 416, 1829, 334, 976, 738, 937, 449, 952, 681, 754], [349, 785, 592, 1361, 666, 927, 620, 335, 310, 2911, 1683, 5342, 706, 1016, 354, 310], [373, 366, 721, 730, 1037, 347, 438, 230, 1561, 249, 2974, 3351, 252, 419, 780, 402, 360], [744, 449, 782, 400, 1250, 350, 174, 445, 1274, 296, 10569, 1043, 5535, 484, 483, 214, 309], [496, 461, 1297, 484, 4649, 273, 350, 448, 1784, 304, 12355, 5682, 6334, 310, 323, 241, 305], [279, 447, 677, 471, 1025, 278, 312, 227, 4954, 281, 2660, 5071, 7614, 233, 602, 404, 496], [370, 266, 614, 279, 6908, 471, 218, 405, 1457, 296, 3085, 3856, 573, 477, 337, 326, 256], [242, 318, 153, 379, 1742, 333, 3162, 7407, 227, 659, 745, 398, 468], [205, 248, 552, 384, 1313, 266, 509, 193, 882, 322, 6369, 4773, 23989, 1210, 567, 306, 470], [332, 338, 430, 597, 819, 444, 1820, 278, 4184, 5593, 1601, 1360, 325, 219, 235], [754, 656, 1208, 495, 691, 243, 210, 184, 2826, 163, 310, 316, 819, 162, 194], [212, 511, 378, 210, 1132, 238, 149, 355, 168, 203, 2714, 5050, 4926, 319, 244, 225, 206]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

