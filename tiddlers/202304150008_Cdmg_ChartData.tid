created: 20230415000841000
creator: Drevarr
modified: 20230705163525500
modifier: drevarr
tags: ChartData
title: 202304150008_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Be\u00eb", "Smol Gluvs", "Be\u00eb", "Cedryn X", "High Sorcer Baradun", "Lord Erin The Wise", "Sheep Paws", "Nazhul Naxxremis", "Panther B Me", "Rina Of Theros", "Xanvias Einzbern"];
const professions = ["Firebrand", "Scourge", "Reaper", "Reaper", "Berserker", "Tempest", "Weaver", "Berserker", "Scourge", "Scourge", "Scourge", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[40.0417, 6.982, 27.4466, 9.425, 79.9888, 1.4933, 1.5065, 36.2421, 14.3462, 3.012, 0.0, 86.8567, 23.3246, 10.1287, 17.6591, 14.4093, 2.2989, 21.0919, 29.7, 193.2432, 46.5909], [215.625, 43.6826, 320.5825, 308.5856, 110.7662], [44.485, 103.5049, 10.825, 56.0674, 20.3267, 10.1299, 49.3333, 59.3077, 43.1976, 16.72, 40.5154, 0.0, 17.1404, 25.0297, 22.5114, 14.9916, 12.0754, 35.7883, 49.9083, 21.1802, 20.5779], [63.05, 81.5056, 24.8267, 9.7143, 58.0211, 9.6923, 72.8204, 21.9, 62.5529, 6.2667, 39.1228, 12.901, 33.9886, 25.9536, 18.5028, 35.6936, 34.1167], [97.5312, 0.0, 26.3592, 53.6, 16.5955, 10.5067, 2.6537, 11.1404, 26.7212, 103.024, 0.0, 13.5666, 0.0, 32.7018, 91.8911, 0.0, 75.3797, 16.5196, 8.2646, 41.5333, 43.1712, 103.1818], [116.2292, 24.6168, 7.7087, 47.9625, 29.4719, 0.0, 5.8139, 34.807, 2.6538, 81.2695, 0.0, 60.2901, 25.614, 37.4851, 11.1932, 35.3376, 17.8352, 34.8552, 37.7, 52.4414, 7.1429], [157.7292, 49.4072, 0.0, 126.2375, 86.236, 22.0733, 7.6537, 47.6632, 117.6538, 18.2754, 15.92, 17.116, 0.0, 26.7018, 0.0, 31.4886, 27.3249, 21.0866, 32.5042], [98.8155, 10.1133, 7.6277, 150.0632, 65.8558, 107.3832, 0.82, 85.5597, 0.0, 25.5351, 7.9604, 94.0455, 45.0169, 25.9916, 24.0891], [264.2708, 74.3772, 555.165, 87.7875, 308.5281, 30.6267, 7.3506, 113.3018, 30.1154, 30.8771], [226.5104, 56.2395, 133.4175, 29.4625, 113.3764, 36.6733, 7.7922, 67.9298, 71.1827, 72.7844, 43.56, 156.4744, 0.0, 117.5526, 94.6436, 25.8864, 2.1561, 44.5894, 65.5599, 124.975], [162.9062, 49.5988, 343.0583, 204.55, 158.7865, 17.9533, 26.1429, 54.0351, 51.0288, 120.2395, 11.32, 95.2218, 10.3667, 113.5789, 106.8218, 54.0, 66.7932, 36.4609, 78.9304, 239.4833, 22.2252, 173.2273], [599.3229, 164.8982, 403.932, 99.2125, 519.5506, 83.46, 26.5152, 254.5825, 322.5673, 527.7964, 6.18, 479.8089, 9.7667, 201.1754, 228.1683, 190.2955, 101.1603, 81.0168, 189.9694, 327.1833, 548.4414, 520.2338]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

