created: 20230515221048000
creator: Drevarr
modified: 20230705163530157
modifier: drevarr
tags: ChartData
title: 202305152210_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Eibh\u00ebar", "High Sorcer Baradun", "Primal Clone", "Sheep Poh", "Fribble Bibble", "Cat Wigglebooty", "Tootsie Pop Rocks", "Rosetendril", "Arriasa", "Tika Mi", "Tribal S", "Artakama Nahid", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Scrapper", "Scrapper", "Scrapper", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0896, 0.0533, 0.3623, 0.0, 0.0, 0.0059, 0.5593, 0.3333, 0.0256, 0.6279, 0.029, 0.1071, 0.7538, 0.1613, 0.3118, 0.5, 0.4762, 0.5403, 0.0, 0.3158, 0.0, 0.085], [0.2609, 0.0265, 0.0175, 0.0833, 0.0519, 0.0881, 0.3765, 0.0, 0.0, 0.0, 0.6949, 1.5556, 0.0256, 0.8605, 0.1014, 0.3571, 0.2923, 0.4624, 0.5, 0.7535, 0.381, 0.8548, 0.0, 0.5113, 0.0, 0.7974], [0.5593, 1.0, 0.1026, 1.6163, 0.0435, 0.75, 1.1923, 0.6559, 1.0235, 1.3803, 2.0, 0.9355, 0.0, 0.3985, 0.1304, 0.1438], [0.043, 0.0, 0.033, 0.123, 0.3887, 0.0, 0.0, 0.0148, 0.6441, 1.2889, 0.0256, 0.5116, 0.0, 0.8214, 0.8769, 0.3548, 0.2529, 1.1408, 0.0, 0.9919, 0.0, 0.5188, 0.0, 0.6601], [1.6824, 2.1972, 1.3333, 1.9919, 0.0795, 1.6917, 0.0, 0.0131], [0.1987, 0.0, 0.0625, 0.1038, 0.4016, 0.8785, 0.0, 0.0, 0.071, 0.6441, 1.1556, 0.0769, 0.9535, 0.3623, 0.6607, 1.0462, 0.871], [0.0, 0.1523, 0.0, 0.0, 0.0472, 0.2561, 0.7935, 0.0, 0.2121, 0.0178, 0.3898, 0.2667, 0.6512, 0.0, 0.0536, 0.4769, 0.0, 0.5294, 1.0141, 0.0, 0.6048, 0.0331, 0.4812, 0.0, 0.5033], [0.0, 0.0762, 0.0, 0.0, 0.0047, 0.2541, 0.587, 0.0, 0.0059, 0.9831, 1.0222, 0.1026, 1.3837, 0.0435, 0.7857, 0.9462, 0.2258, 0.9706, 0.5563, 0.0, 0.7339, 0.0, 0.3008, 0.0, 0.7255], [0.1523, 0.0, 0.0, 0.1038, 0.3525, 1.1134, 0.0, 0.1515, 0.0858, 1.1356, 1.2889, 0.1795, 1.3721, 0.2319, 1.2857, 1.4538, 0.7742, 1.0, 1.0141, 0.2857, 1.2581, 0.0397, 1.1579, 0.1087, 0.366], [0.0435, 0.2483, 0.0, 0.0625, 0.1321, 0.6598, 1.3785, 0.8788, 0.0828, 0.9661, 1.9333, 0.0, 1.186, 0.2319, 0.875, 1.5077, 0.9247, 1.2471, 1.5986, 1.5714, 1.1452, 0.351, 1.3759, 0.1087, 1.3529], [0.1358, 0.0, 0.1042, 0.0943, 0.6127, 1.7105, 0.0, 0.0, 0.1775, 1.2542, 1.7111, 0.0769, 1.907, 0.1594, 0.0714, 1.6022, 1.2, 2.2606, 0.619, 1.7823, 0.2252, 1.2556, 0.0, 1.1176], [0.1358, 0.0, 0.0, 0.1085, 0.7357, 1.1822, 0.071, 1.2881, 2.3556, 0.0, 2.6744, 0.2174, 1.5179, 2.0385, 2.5591, 1.0235, 1.7394, 2.4286, 2.0484, 0.0861, 2.2707], [0.7971, 0.255, 0.0702, 0.1179, 0.6393, 1.6255, 0.0566, 0.8182, 0.074, 1.5424, 2.0444, 0.0513, 2.3488, 0.3478, 1.5357, 1.9, 1.5591, 1.5941, 2.2113, 2.0476, 1.5645, 0.0861, 1.7519, 0.3478, 1.0588], [0.6087, 0.5265, 0.1228, 0.0625, 0.2925, 0.9283, 1.8988, 0.0, 0.2811, 1.1864, 1.4222, 0.2821, 2.1512, 0.3768, 1.4286, 1.9769, 1.5376, 1.4765, 2.9225, 2.8095, 1.9274, 0.5762, 1.3835, 0.1957, 1.5556]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

