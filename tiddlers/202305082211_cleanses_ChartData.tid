created: 20230508221143000
creator: Drevarr
modified: 20230705163529096
modifier: drevarr
tags: ChartData
title: 202305082211_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Osh Kosh Johosh", "Primal Clone", "Eibh\u00ebar", "F\u00f9gly", "Red Date Sayaccho", "High Sorcer Baradun", "Fribble Bibble", "Mac Aaroni", "Tegan Parker", "Artakama Nahid", "Arriasa", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Scrapper", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0725, 0.0082, 0.0, 0.0, 0.2189, 0.2656, 0.0, 0.0093, 0.3795, 0.5192, 0.3152, 0.1961, 0.2786, 0.0, 0.1502, 0.0933, 0.1125], [0.087, 0.1475, 0.0, 0.0, 0.1424, 0.2568, 0.1867, 0.0238, 0.0561, 0.2491, 0.2692, 0.6304, 0.6013, 0.3214, 0.0, 0.4348, 0.5133, 0.5125], [0.029, 0.1803, 0.0, 0.0, 0.053, 0.1959, 0.1411, 0.0561, 0.3125, 0.4231, 0.6196, 0.7712, 0.7429, 0.0, 0.502, 0.4733, 0.725], [0.0145, 0.0246, 0.0, 0.0, 0.0795, 0.3757, 0.0373, 0.0, 0.1963, 0.4103, 0.9231, 0.337, 0.5948, 0.7071, 0.0, 0.415, 0.5667, 0.75], [0.5362, 0.9262, 0.0, 0.0397, 1.2946, 0.9876, 0.0, 0.5981], [0.5951, 0.9808, 1.9783, 1.2745, 0.8357, 0.0, 0.5099, 0.7933, 1.5625], [0.1884, 0.0902, 0.0, 0.1291, 0.9027, 0.4315, 0.0, 0.0935, 0.6639, 1.1848, 0.1699, 0.9286, 0.0816, 0.2372, 0.6467, 1.35], [0.0, 0.3443, 0.0, 0.0, 0.0993, 0.5878, 0.5228, 0.0, 0.0467, 0.9438, 0.6923, 1.0652, 0.3529, 1.5, 0.0, 0.4664, 0.12, 0.7625], [0.4928, 0.3361, 0.0, 0.0, 0.1954, 1.1919, 0.639, 0.0, 0.3178, 1.3533, 2.0192, 2.3804, 0.1438, 0.8286, 0.0, 0.9684, 1.1267, 2.0], [0.3333, 0.5164, 0.1887, 1.0811, 0.61, 0.0, 0.4019, 1.4629, 1.7115, 2.5435, 0.5229, 1.3643, 0.102, 0.9447, 0.8333, 1.675], [0.4058, 0.5082, 0.069, 0.3907, 0.5622, 0.7759, 0.0952, 0.5888, 1.4402, 1.8654, 2.8043, 1.5556, 1.7357, 0.0816, 1.0751, 0.9467, 2.1625], [0.4783, 0.0574, 0.0, 0.1724, 0.4305, 1.4135, 0.7261, 0.0952, 0.5514, 1.5027, 2.3654, 2.6739, 1.902, 1.8714, 1.1937, 0.9733, 1.525], [0.3478, 0.7541, 0.0, 0.2616, 1.2216, 0.9004, 0.1429, 0.1028, 1.5281, 2.6923, 2.2609, 2.4902, 3.45, 0.0, 1.3478, 1.12, 2.825], [0.4828, 0.4205, 1.5689, 0.9917, 0.3571, 0.6449, 1.8569, 1.75, 2.5543, 1.9935, 2.4929, 0.0408, 1.2609, 1.1133, 2.175]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

