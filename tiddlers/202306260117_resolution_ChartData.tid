created: 20230626011754000
creator: Drevarr
modified: 20230705163538022
modifier: drevarr
tags: ChartData
title: 202306260117_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Yummy Kiwi", "Imalou", "Air One Com", "Kosair", "Traidoruns Maximus", "Bella Sassy", "Tika Fiery", "Gabe Malhorn", "Solus Sanctus", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[777.4, 151.632, 0.0], [69.2832, 0.0, 206.829, 129.0816, 64.6061, 77.3828, 137.2518, 151.9533, 182.9609, 323.2369, 367.5292, 234.3608, 128.4228, 35.4388, 240.304, 126.5959, 73.3804, 236.1041], [40.2165, 56.7201, 0.0, 210.6569, 179.712, 65.3453, 39.1644, 158.7222, 43.9025, 123.4714, 46.1098, 250.6947, 353.3573, 158.6158, 150.328, 139.4015, 6.4513, 130.0436, 72.3573, 31.7931, 68.1404, 0.0, 446.8, 75.6864, 0.0], [114.693, 279.3042, 24.2774, 305.3345, 200.2785, 224.8536, 567.979, 372.037, 247.5554, 317.4, 234.7697, 182.9395, 229.4474, 129.7442, 65.9269, 121.8508, 0.0, 230.0, 62.6184], [189.54, 213.5727, 63.2318, 443.6636, 134.4384, 121.931, 139.4026, 237.6486, 0.0, 405.7348, 277.9417, 277.2831, 320.6138, 153.0144, 132.0619, 352.774, 611.1875, 234.0103, 259.2271, 185.5297, 184.0102, 105.8601, 17.7606, 802.0, 98.496, 50.8643], [181.2537, 134.0995, 312.0507, 655.4318, 253.4976, 45.5347, 95.1298, 239.5764, 61.8724, 419.1115, 212.1101, 252.5507, 89.7446, 0.0, 448.1136, 88.8233, 243.892, 569.0638, 109.2181, 270.725, 159.8341, 236.8297, 113.3272, 39.98, 1212.2, 137.6352, 68.5377], [140.4297, 204.732, 104.3122, 561.2166, 325.296, 111.4344, 140.1215, 249.6312, 47.0626, 256.1863, 181.6917, 386.9012, 521.5933, 515.5938, 219.5483, 247.4745, 199.088, 282.2853, 149.7734, 268.5592, 143.8581, 100.9579, 152.9917, 0.0, 1072.0, 117.7848, 46.5127], [165.0699, 146.8021, 194.6088, 520.2212, 528.9408, 82.9382, 89.7943, 239.5809, 206.3629, 641.9843, 938.135, 469.1531, 56.3686, 286.902, 389.4481, 228.8663, 263.6225, 192.7542, 220.1724, 236.4025, 0.0, 764.6, 157.248, 85.5287], [253.3275, 187.1437, 0.0, 459.5926, 471.9168, 236.1374, 201.3088, 316.3104, 18.1705, 527.7785, 304.1842, 319.1018, 492.9144, 510.232, 681.4606, 51.5735, 212.98, 266.4468, 185.8668, 231.3584, 164.5263, 175.701, 217.7467, 0.0, 1150.2, 148.9104, 17.6635], [172.773, 309.9363, 256.9545, 568.5019, 411.7824, 130.5427, 187.7999, 318.2382, 472.3178, 348.8497, 460.9422, 714.3248, 779.7037, 487.0503, 46.3256, 437.0, 407.3086, 238.3301, 197.2152, 219.4553, 164.6612, 108.5012, 1049.8, 170.3808, 1.4439]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

