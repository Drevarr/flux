created: 20230215221053000
creator: Drevarr
modified: 20230705163519407
modifier: drevarr
tags: ChartData
title: 202302152210_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Xyntharos", "F\u00f9gly", "Tegan Parker", "Grasszanine", "Fribble Bibble", "Zadie Miststep", "Domina Flagbringer", "Newtype Khan", "Abigail Ryn", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Mac Chiato"];
const professions = ["Vindicator", "Tempest", "Tempest", "Spellbreaker", "Scrapper", "Tempest", "Spellbreaker", "Spellbreaker", "Tempest", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[226.6528, 398.128, 19.0613, 66.361, 46.2462, 112.9842, 15.5438, 38.6002, 0.0, 38.87, 17.8315, 0.987, 36.8078, 2.957, 32.7228, 6.8063, 13.7101], [451.682, 472.1052, 52.3166, 231.7673, 73.3203], [337.8694, 485.144, 0.0, 31.6454, 0.0, 26.754, 31.5389, 49.914, 0.0, 0.0, 0.0, 60.2534, 63.2026, 0.0, 100.9181, 0.0, 0.0, 39.2585, 30.976, 54.6431, 0.0, 31.6972, 0.0], [357.7618, 274.756, 0.0, 63.9994, 46.6774, 98.0637, 0.0, 65.1655, 64.9994, 27.209, 50.6544, 35.1175, 107.352, 25.8754, 127.8038, 0.0, 0.0, 41.7533, 0.0, 89.5356, 0.0, 0.0, 0.0, 44.7502], [165.688, 0.0, 109.6963, 75.6756, 45.276, 47.5565, 152.0159, 0.0, 109.0752, 74.0198, 39.7169, 83.8368, 145.8298, 99.3744, 0.0, 80.8056, 47.0893, 4.059, 116.2886, 73.6593, 128.3515], [507.2562, 852.28, 31.3373, 154.3306, 109.0936, 182.8533, 21.4997, 30.7248, 0.0, 46.2254, 57.4766, 33.025, 68.8416, 54.1426, 0.0, 100.5322, 0.0, 0.0, 78.7248, 0.0, 62.1841, 0.0, 0.0, 0.0, 0.0], [849.3452, 1184.848, 0.0, 98.7149, 304.3194, 27.3714, 0.0, 0.0, 0.0, 182.689, 0.0, 0.0, 172.104, 242.4456, 215.665, 0.0, 0.0, 141.3373, 0.0, 104.8572, 0.0, 70.1831, 0.0], [777.3106, 1367.224, 69.1027, 260.0122, 67.5906, 332.6757, 51.8654, 193.1117, 116.0718, 107.3698, 0.0, 153.9734, 166.559, 0.0, 282.1718, 94.1175, 67.2948, 112.9244, 42.031, 143.1013, 0.0, 164.3466, 0.0, 42.1621], [352.506, 827.5218, 121.7789, 291.2205, 442.6396, 188.2411, 132.9292, 349.729, 447.2016, 0.0, 378.8448, 177.255, 90.4122, 239.6048, 64.933, 310.3222, 304.2732, 51.085, 80.6387], [1593.2004, 2168.844, 5.4014, 285.1632, 309.386, 272.1705, 28.403, 92.3409, 0.0, 122.889, 82.8624, 42.7371, 140.4096, 242.8805, 190.7088, 0.0, 21.8862, 77.9279, 35.398, 171.5301, 0.0, 128.8399, 0.0, 40.0], [1613.3942, 2518.696, 164.3645, 482.593, 594.6248, 474.1632, 107.8819, 224.613, 69.8517, 175.812, 97.3853, 25.2475, 241.6954, 230.269, 5.083, 200.2282, 72.7875, 20.6388, 131.8086, 24.662, 214.9214, 48.6244, 148.0829, 68.0261], [466.5672, 5072.556, 327.2558, 834.9437, 350.6734, 752.3019, 171.6139, 103.7102, 23.5014, 23.424, 30.9523, 38.3741, 110.1696, 29.3299, 189.8775, 64.5084, 29.002, 11.858, 90.972]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

