created: 20230508221143000
creator: Drevarr
modified: 20230705163529048
modifier: drevarr
tags: ChartData
title: 202305082211_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Gavann", "Gabe Malhorn", "Fribble Bibble", "Belvyn Brightblade", "Ark Darkness", "Drevarr Moonwillow", "Kiloak", "Sygaldry Verdandi", "Zady Stardust", "Solus Sanctus", "Sister Elon\u00edth", "Bella Fae", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 22.345, 7.8948, 61.9164, 226.5463, 43.533, 31.9968], [26.2059, 38.3309, 45.724, 110.0148, 0.0, 66.3062, 42.462, 72.8992], [0.0, 7.6836, 0.0, 0.0, 0.0, 60.9168, 0.5905, 0.0, 5.1799, 329.5882, 0.872, 11.2442, 18.0265, 37.338, 0.0, 34.747, 3.591, 14.8896], [6.8427, 20.4704, 0.0, 0.0, 63.873, 438.746, 65.658, 0.0, 0.0], [0.0, 35.0347, 0.0, 12.7746, 312.9238, 3.4246, 0.0, 36.2088, 257.4749], [0.0, 11.2133, 141.0514, 8.0301, 23.3226, 35.6053, 839.4595, 25.5798, 27.7049, 45.1319, 46.3932, 5.4571, 128.2558, 37.737, 18.6912], [0.0, 45.528, 0.0, 359.9598, 729.1886, 241.8483, 0.0, 47.1217, 500.2224, 22.8072, 32.2258, 37.6977, 44.2764, 34.5195, 32.6218, 16.758, 24.0064], [42.7427, 56.5372, 0.0, 156.134, 439.8338, 32.4748, 39.1986, 93.4388, 975.0528, 108.2448, 53.7096, 52.9609, 33.3984, 155.5646, 78.687, 102.5024], [0.0324, 83.5444, 0.0, 0.0, 456.9049, 805.6972, 217.4037, 19.1457, 91.1255, 711.4838, 14.288, 19.3586, 82.1717, 36.3972, 0.0, 196.581, 108.864, 66.352], [78.286, 108.4299, 45.6654, 0.0, 260.6018, 564.9308, 225.7881, 47.0232, 44.3558, 965.9117, 73.0948, 32.1871, 155.0012, 112.0728, 18.0756, 217.5142, 71.442, 35.376], [77.5401, 124.7718, 0.0, 798.0826, 189.0621, 130.5528, 1300.0704, 40.4269, 48.6864, 121.5141, 74.382, 40.6475, 270.8567, 101.304, 89.6544], [36.5486, 97.306, 36.2271, 19.4677, 713.6743, 828.9036, 149.3838, 65.772, 110.99, 779.0266, 69.003, 24.4205, 59.8689, 71.3244, 14.7941, 316.2298, 178.668, 85.7824], [74.2647, 229.4173, 0.0, 0.0, 284.7316, 779.59, 180.4415, 61.6707, 147.5509, 1370.6602, 47.4256, 51.8935, 30.8555, 52.626, 30.2046, 138.4568, 163.422, 60.2976]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

