created: 20230626220846000
creator: Drevarr
modified: 20230705163539344
modifier: drevarr
tags: ChartData
title: 202306262208_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Mike The Archmagus", "Caelon Cai", "Be\u00eb", "Ateriuz", "Shaca Booey", "Legacy Of Mathus", "Lord Erin The Wise", "Regis Hawkesburne", "Tika Fiery", "Johosh The Mighty", "Gavann", "Xanvias Einzbern"];
const professions = ["Firebrand", "Weaver", "Reaper", "Reaper", "Berserker", "Berserker", "Berserker", "Weaver", "Berserker", "Firebrand", "Berserker", "Firebrand", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[48.5014, 3.6, 19.0, 52.2742, 13.7551, 0.1145, 0.0, 50.9512, 37.6143, 6.1667, 20.1744, 78.7423, 30.614, 3.6894, 0.0, 9.2803, 35.2069, 0.0, 4.6829, 41.6154], [2.4364, 105.2576, 35.9677, 35.3061, 20.0534, 75.8824, 68.0976, 47.8286, 3.2791, 112.8763, 47.6708, 0.0, 52.4167, 43.023, 6.3889, 109.6951, 45.8112], [66.3669, 25.0364, 37.1061, 44.4677, 16.6531, 28.8015, 140.5294, 27.9268, 35.9143, 44.8333], [4.5378, 3.2727, 16.8788, 34.6129, 40.7347, 2.458, 32.7059, 41.0, 39.4857, 51.7976, 83.686, 64.5052, 22.0351, 94.4224, 24.03, 38.4015, 87.4138, 0.0, 56.9146, 53.9441], [63.3838, 6.0909, 81.5152, 100.3548, 126.8367, 55.0305, 92.7647, 77.3902, 154.4035, 10.4037, 19.92], [53.6667, 172.9216, 95.7805, 56.4857, 106.9881, 0.0, 50.12, 16.4242, 113.6207, 0.0, 87.878, 105.1329], [55.2101, 4.1273, 30.6515, 0.0, 79.4082, 63.916, 0.0, 53.7561, 67.7143, 2.8246, 125.9627, 12.25, 113.9242, 12.4368, 0.0, 94.0, 23.2308], [6.4188, 24.8545, 98.3788, 49.3387, 0.7143, 65.9924, 136.6078, 101.878, 66.3571, 122.1905, 57.5581, 119.567, 17.7544, 51.1739, 35.75, 151.2727, 138.5172, 20.7222, 93.0976, 45.3427], [51.2591, 11.9818, 181.8182, 46.9194, 27.0816, 80.5496, 39.7451, 35.3171, 90.2143, 0.0, 59.7674, 16.8557, 76.9649, 58.0497, 23.38, 8.6742, 119.0115, 0.0, 57.9024, 110.8392], [93.2703, 4.2182, 157.9242, 104.9839, 26.8367, 28.0992, 18.3529, 10.7805, 81.6143, 8.881, 125.7326, 70.6289, 137.0175, 31.7391, 9.15, 132.9697, 18.5287, 0.0, 101.7317, 42.7832], [138.3179, 10.9818, 216.3636, 157.1613, 78.6735, 138.0305, 351.6275, 25.3415, 140.3571, 265.131, 84.186, 194.1443, 232.3684, 118.8882, 147.04, 267.5152, 292.2414, 0.0, 296.0122, 160.5804], [131.2367, 212.3939, 137.5645, 200.1633, 177.1374, 258.7059, 22.8049, 148.6, 258.1279, 241.8557, 186.0175, 200.3913, 186.36, 356.0606, 301.8966, 0.8611, 231.1341, 238.6224], [218.9902, 4.1273, 233.2273, 337.129, 319.0408, 467.6794, 139.5294, 192.6098, 268.4143, 280.619, 119.4651, 155.3505, 89.9649, 45.3789, 145.25, 300.5833, 325.5287, 0.7778, 548.8049, 352.2727]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

