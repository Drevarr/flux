created: 20230701000406000
creator: Drevarr
modified: 20230705163540101
modifier: drevarr
tags: ChartData
title: 202307010004_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Pale Pam", "Gestern Yesteryear", "Tegan Parker", "Klengah", "Sakis Ranger", "Tribal S", "Arriasa", "Demon Staph", "Drevarr Moonwillow", "Ak\u00e1nt\u00f3r"];
const professions = ["Druid", "Firebrand", "Tempest", "Druid", "Druid", "Druid", "Druid", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3658.8197, 2037.623, 5267.4487, 2617.3229, 2611.2283, 904.94, 635.4356, 1415.127, 3162.24, 1750.8627, 1061.5785], [2626.7705, 1284.7541, 1306.6538, 1466.4583, 951.8478, 390.56, 370.7525, 1206.9683, 2056.68, 1518.3333, 1212.3274, 950.6267, 678.4054, 508.9861, 1596.0426, 430.16, 1434.69, 1521.3939, 14.4375, 559.6044, 333.5513, 460.093], [2117.2131, 308.7705, 1930.8718, 752.25, 1603.9891, 606.18, 955.6436, 1413.619, 3113.02, 1665.7451, 2230.2466, 1940.4, 1817.3243, 1101.375, 1016.266, 1146.78, 705.62, 2530.3939, 1288.2527, 905.4359, 739.4524], [1149.5902, 1754.7541, 510.6538, 3259.625, 4085.6522, 657.78, 934.7327, 2077.6032, 7619.2, 2820.9804, 2486.6054, 2733.5333, 3449.7703, 1579.0694, 3344.9894, 1113.73, 2160.5, 925.2727, 1510.8571, 1397.7521, 331.6977], [2945.6066, 3163.541, 1129.6923, 5826.2188, 2971.5, 879.74, 1001.5842, 1440.8571, 3734.78, 2529.8235, 1491.7982, 3153.4133, 2696.6216, 1168.4722, 2240.617, 30.81, 2556.32, 3711.4848, 1481.7473, 2130.6282, 1046.556], [2199.5246, 1691.1475, 1393.8205, 3326.1562, 2682.5543, 372.9, 974.5941, 1791.9683, 4502.98, 3270.7843, 2895.0179, 3106.96, 2888.1351, 1550.25, 4503.2872, 1856.66, 2413.93, 2071.3939, 0.0, 2296.4066, 1279.2949, 1407.3383], [3853.8361, 5623.5902, 1374.9615, 2572.6458, 2176.5543, 993.32, 989.396, 1593.9048, 5453.22, 2248.098, 2557.2422, 2173.4933, 3487.2703, 1375.1389, 3966.8191, 656.01, 4149.84, 4834.803, 14.5312, 1706.7473, 995.4316, 1238.4672], [1575.7705, 3142.8361, 4746.7821, 2937.7812, 4235.4022, 1037.78, 1132.8515, 2692.9524, 11109.8, 8687.3529, 4130.9148, 3626.28, 3491.4459, 2321.7639, 4130.1596, 2163.38, 3648.98, 3038.2576], [4558.2131, 1410.1311, 3057.6795, 3923.9062, 3365.2935, 1464.06, 1393.9109, 1861.8254, 3359.1, 3680.9804, 3277.5605, 3679.2, 1799.0135, 975.9167, 4626.4149, 1591.21, 4335.28, 4359.4848, 0.0, 1344.9121, 1362.6068, 1327.6702], [7843.5738, 7074.7049, 7209.2564, 2972.5, 2652.2609, 1443.94, 1647.703, 5215.0, 8055.48, 9818.0784, 5006.5471, 4514.4, 6145.5541, 2417.25, 6186.1809, 3391.47, 6210.6, 4527.8333, 0.0, 1968.1429, 1384.8291, 1311.6406]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

