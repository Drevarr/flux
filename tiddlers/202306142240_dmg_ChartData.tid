created: 20230614224052000
creator: Drevarr
modified: 20230705163535404
modifier: drevarr
tags: ChartData
title: 202306142240_dmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Koralia Danai", "Ryvalia Fazebringer", "Sakis Ranger", "Solus Sanctus", "Crusader Siolith", "Artakama Nahid", "Johosh The Mighty", "Morton Saltbringer", "Venomina The Siren", "Tika Fiery", "Be\u00eb", "Zayde Sunsabre", "Momomeko", "Cedryn X", "Elonith Requiem", "Black Raspberry Pie", "Johosh The Mighty", "Smol Gluvs", "Elonith Requiem", "Rina Of Theros", "Be\u00eb", "Mistwalker Cael", "Xanvias Einzbern", "Permanent Dawn", "Shaca Booey"];
const professions = ["Druid", "Firebrand", "Chronomancer", "Druid", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Chronomancer", "Tempest", "Firebrand", "Reaper", "Spellbreaker", "Chronomancer", "Berserker", "Reaper", "Chronomancer", "Berserker", "Scourge", "Scourge", "Scourge", "Scourge", "Vindicator", "Berserker", "Weaver", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[41.2041, 0.0, 83.6182, 66.4561, 22.3375, 5.597, 11.8889, 45.5366, 0.0], [93.6122, 0.0, 115.2909, 52.7895, 41.0, 60.3582, 35.5714, 108.2927, 0.0], [68.0, 53.5957, 145.1636, 86.8421, 20.9375, 39.2687, 51.3492, 125.7805, 7.2523], [199.0816, 114.2128, 15.8364, 63.3041, 139.2625, 47.403, 4.0, 134.3902], [67.449, 30.3617, 66.6364, 141.0994, 86.6375, 105.806, 18.0317, 324.4146, 3.2243], [49.0, 114.4255, 66.4364, 118.5263, 270.55, 104.5821, 42.3333, 166.1829, 2.1495], [208.7551, 44.4255, 32.1455, 157.1754, 159.9625, 105.6716, 29.7778, 183.0, 53.028], [965.0122, 286.028], [378.8955, 152.4921, 509.939, 338.4019], [624.5102, 80.0851, 113.2727, 231.6491, 99.9625, 2.0299, 0.127, 348.5366, 157.3645], [323.6735, 108.1489, 234.5273, 199.0409, 290.75, 130.1194, 100.9365, 526.0854, 56.8692], [2246.2375], [714.2041, 326.2553, 716.6182, 604.7778, 318.2375, 0.0], [316.3878, 69.7447, 428.8, 422.4854, 171.7375, 472.1791, 118.3651, 793.3902, 8.0654], [984.8806, 513.254, 2275.3415, 9.4579], [2224.9796, 1733.5745, 1855.6545], [719.0612, 121.1489, 384.2182, 531.0643, 456.8125, 594.3433, 422.2698, 953.9268, 28.7103], [4014.0299, 1181.5238], [635.2449, 1320.8085, 1.7636, 1575.3216, 728.675], [2298.0292, 2225.5875], [2080.4898, 966.1702, 1333.2, 1649.6316, 1306.6375], [2567.7143, 1814.6383, 1787.6364, 2006.4795], [4579.7551, 1685.5319, 4922.5273, 799.9104, 1284.6825, 6155.9024, 0.0], [5064.5306, 3336.234, 3418.5636, 3549.1343, 3055.127, 5023.8537, 836.5234], [2170.2245, 2217.3617, 435.1455, 2617.4737, 2495.7375, 2731.8806, 1707.9683, 4821.2683, 12.4393], [4837.6327, 1871.8511, 2058.6545, 3259.7836, 2313.05, 3730.5821, 1907.8095, 5424.8293, 1119.3925]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

