created: 20230429000309000
creator: Drevarr
modified: 20230705163527217
modifier: drevarr
tags: ChartData
title: 202304290003_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Puny Tinker", "Lord Erin The Wise", "Permanent Dawn", "Miphest\u00f6", "Cyclotechnist Farra", "Xanvias Tsoli", "Mistaeva", "Aronorf Xideliesi", "Cat Wigglebooty", "Kos\u00e4ir", "Demon Sekhmet", "Arriasa", "Newtype Khan", "Blancooo Padreee", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Weaver", "Weaver", "Tempest", "Scrapper", "Holosmith", "Herald", "Firebrand", "Scrapper", "Herald", "Spellbreaker", "Druid", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[704.8423], [125.5256, 178.5636, 71.5318, 27.7536, 412.6617, 123.9987, 12.0473, 73.7889, 17.136, 60.6989], [107.6455, 123.4428, 33.583, 710.7237, 92.6969, 38.6022, 0.0, 38.8032, 231.2965], [287.5412, 214.0756, 79.1948, 222.2617, 30.4387, 0.0, 107.1532, 5.4672, 221.0941, 0.0, 0.0, 0.0, 268.6648], [151.4335, 184.4308, 33.3998, 0.0, 437.3289, 96.322, 32.5786, 78.1625, 61.4448, 27.7906, 57.6832, 11.9851, 17.2643, 441.0097], [116.1842, 35.2316, 508.2471, 47.2403, 65.7934, 141.4547, 36.312, 47.2894, 86.336, 39.406, 81.2882, 478.3779], [123.5959, 375.6715, 570.13, 55.692, 0.0, 232.7387, 375.4846], [224.3405, 55.584, 52.1147, 0.0, 547.5604, 107.3121, 1.5695, 56.9818, 11.5056, 73.2662, 89.3847, 0.0, 90.2722, 615.2874], [306.37, 256.304, 104.4737, 826.3512, 151.3302, 6.7024, 251.6694, 28.0296, 65.0391, 0.0, 0.0, 71.9796, 66.683], [712.0085, 87.4608, 0.0, 247.4208, 387.7632, 553.1564, 0.0, 228.641, 413.4768], [291.0442, 264.6416, 149.3222, 0.0, 497.9691, 118.0145, 98.5417, 205.4967, 30.9672, 162.7921, 0.0, 108.8825, 210.8515, 920.354], [217.4804, 329.1808, 50.7714, 887.7622, 134.5861, 33.9784, 224.2407, 52.9584, 123.665, 49.6972, 27.236, 59.965, 997.9897], [288.6359, 348.7896, 109.4501, 27.3773, 576.3388, 141.0305, 18.8769, 180.6922, 62.7504, 208.0086, 89.8164, 148.7199, 157.5433, 1124.2686], [326.3666, 298.5324, 103.4051, 60.368, 1089.468, 347.4841, 69.3567, 203.9972, 130.8864, 194.4048, 120.1689, 205.2254, 305.5074, 1078.2026], [434.7419, 487.2864, 128.9282, 48.9059, 1555.5753, 247.1343, 262.9192, 337.7044, 51.816, 66.3995, 217.4048, 56.1974, 119.1722, 2221.4774]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

