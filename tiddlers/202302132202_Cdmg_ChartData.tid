created: 20230213220222000
creator: Drevarr
modified: 20230705163519179
modifier: drevarr
tags: ChartData
title: 202302132202_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Gavann", "Jeckyll Mbs", "Mac Chiato", "Abigail Ryn", "Smol Daddy Tika", "Sygaldry Verdandi", "Tacoplasm", "Legacy Of Mathus", "Ravioli Fetabringer", "Whose Guardian", "Lord Erin The Wise", "Xanvias Tseli", "Nelliel T", "Dark Sidiuz", "Smol Gluvs", "Elonith Tenebris", "Rina Of Theros", "Daring Deathblade", "Be\u00eb"];
const professions = ["Vindicator", "Firebrand", "Berserker", "Tempest", "Tempest", "Berserker", "Firebrand", "Tempest", "Berserker", "Firebrand", "Dragonhunter", "Weaver", "Berserker", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7.9594, 9.539, 10.5, 7.35, 0.0, 49.887, 9.3636, 0.0, 9.425, 20.6941, 0.0, 3.4378], [1.4937, 3.2559, 5.9024, 97.5405, 49.1304, 0.6145, 0.0, 9.775, 20.8645, 31.2865], [2.3719, 10.7895, 1.9512, 25.95, 0.0, 153.0, 0.0, 3.075, 1.2375, 22.3897, 0.0, 1.2324], [3.8813, 18.7387, 35.8537, 0.0, 37.1351, 20.1217, 2.7345, 215.8625, 4.0489, 37.6167, 5.8162], [5.6469, 32.4265, 4.0976, 11.1351, 59.9391, 5.2545, 49.4125, 16.1285], [16.4781, 6.1034, 2.7439, 0.0, 51.4054, 2.513, 22.1164, 0.0, 92.05, 19.9134, 16.5333, 63.6973], [2.2656, 22.8784, 4.7927, 7.55, 53.8649, 0.0, 0.2836, 4.725, 52.15, 36.4735, 74.25, 27.4], [23.2836, 76.9125, 44.8534, 138.6167, 24.8378], [19.2031, 28.657, 73.0, 0.0, 0.0, 0.0, 19.7964, 0.0, 57.2625, 25.405, 14.0833, 18.6054], [12.7562, 9.7514, 35.7073, 28.0, 128.2162, 38.2783, 1.6364, 0.0, 51.0, 27.2584, 137.5, 39.9459], [23.7156, 25.1506, 75.2927, 39.8649, 71.4087, 14.3855, 62.45, 35.175, 20.6592, 47.1333, 20.4432], [8.4688, 20.9111, 130.0122, 6.1, 138.5135, 18.2696, 8.04, 62.95, 85.9125, 43.8966, 39.8, 34.2595], [15.8812, 18.2069, 145.5488, 0.0, 175.7838, 221.9043, 11.7891, 1.225, 48.775, 46.6117, 31.0833, 27.0216], [27.9062, 53.1779, 236.7561, 373.6757, 55.3391, 24.9782, 47.35, 217.3, 7.067, 215.05, 53.027], [44.5938, 63.9347, 85.5976, 227.9459, 125.9826, 16.9673, 23.25, 215.3875, 50.2067, 36.55, 16.3135], [39.7594, 46.7623, 285.8293, 3.45, 345.7297, 190.1478, 48.7636, 34.55, 186.7875, 40.3687, 66.9167, 42.8973], [0.0, 167.0244, 22.15, 419.5135, 106.487, 66.0655, 229.7, 267.1125, 78.4218, 179.3, 101.4324], [33.7531, 84.0962, 132.5732, 48.85, 231.5135, 105.9826, 64.9891, 115.225, 297.275, 61.1648, 100.8333, 92.2216], [4.7636, 48.675, 449.1875, 200.5349, 491.0167, 78.3027], [41.9406, 84.9927, 258.8902, 0.0, 563.9189, 434.4783, 117.7855, 38.85, 345.6375, 85.7402, 356.0167, 69.1622]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

