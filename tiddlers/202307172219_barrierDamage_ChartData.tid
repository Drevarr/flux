created: 20230717221937000
creator: Drevarr
tags: ChartData
title: 202307172219_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Klengah", "Soweng", "Oo Dads Mad", "Tribal S", "Cat Wigglebooty", "Johosh The Mighty", "Aira Draugr", "Mistwalker Cael", "Xx Zen Xx", "Belvyn Brightblade", "Cedryn X", "Sub Train", "Legacy Of Mathus", "Permanent Dawn", "Inedible Plant", "Crusader Siolith", "Primal Clone", "Duke Silvver", "Morton Saltbringer", "Solus Sanctus", "High Sorcer Baradun", "Glorious Gluvs", "Bella Sassy", "Black Raspberry Pie", "Tegan Parker", "Eibh\u00ebar", "Elonith Requiem", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Newtype Khan", "Daphne Agla\u00e9", "Drumina", "Tootsy Pop Star", "Rozaalyna", "Venomina", "Rina Of Theros", "Be\u00eb", "Lucky Luprac\u00e1n", "Cyclotechnist Farra"];
const professions = ["Druid", "Reaper", "Berserker", "Druid", "Scrapper", "Berserker", "Herald", "Vindicator", "Druid", "Firebrand", "Berserker", "Firebrand", "Berserker", "Weaver", "Vindicator", "Firebrand", "Chronomancer", "Vindicator", "Chronomancer", "Firebrand", "Tempest", "Berserker", "Firebrand", "Chronomancer", "Tempest", "Chronomancer", "Scourge", "Chronomancer", "Scrapper", "Spellbreaker", "Scourge", "Druid", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5558, 2519, 5440, 7116, 3613, 0, 745, 269, 1963], [0, 10020, 0, 7783, 1718, 2649, 911, 1517, 0, 1297, 0, 1817], [0, 10681, 7634, 5551, 4083], [0, 10343, 0, 11428, 5077, 1753, 5, 437, 1276, 0, 0, 0, 0], [3927, 887, 6525, 11316, 2111, 74, 2796, 1483, 2213], [0, 12644, 618, 3074, 1785, 4186, 2661, 6236, 1180, 0, 0, 2071, 0], [0, 12544, 7238, 6546, 8200], [0, 9647, 1048, 4589, 9387, 2595, 1910, 4404, 421, 0, 306, 38, 1360], [6570, 1534, 17124, 3053, 0, 2355, 574, 4513], [0, 20984, 5247, 359, 9771], [12646, 3713, 4491, 3737, 3914, 0, 3345, 0, 5277], [0, 16179, 2834, 2827, 7304, 0, 0, 5624, 1255, 0, 0, 1222, 712], [0, 15162, 6526, 3035, 9116, 1265, 5001], [0, 12665, 5519, 6409, 5782, 1179, 4150, 1115, 1463, 0, 0, 1321, 1526], [0, 15893, 5115, 4406, 9510, 68, 4227, 152, 1771, 0, 916, 0, 664], [0, 14616, 3483, 972, 8565, 1538, 5432, 6880, 1310, 0, 0, 0, 2660], [0, 19672, 1826, 445, 8369, 1265, 4125, 5358, 421, 0, 601, 0, 3383], [0, 13230, 8811, 1196, 4945, 2205, 5767, 4030, 1735, 0, 0, 3256, 365], [0, 11428, 3502, 4370, 8840, 75, 6736, 9156, 690, 0, 0, 826, 2429], [0, 22936, 5068, 2838, 6638, 2632, 421, 3748, 1843, 1290, 0, 1919], [0, 23822, 4968, 7508, 6137, 306, 1220, 938, 2173, 0, 1177, 0, 2135], [0, 8774, 6183, 7851, 10347, 269, 1059, 6717, 4771, 0, 4104, 0, 421], [0, 17237, 6152, 798, 3486, 0, 6434, 3162, 5477, 0, 4891, 0, 3324], [2033, 14862, 4491, 6934, 6628, 1293, 6808, 4141, 1078, 0, 2885, 675, 1540], [0, 20557, 4131, 6239, 7697, 3683, 1742, 3165, 3071, 0, 888, 964, 1263], [641, 12260, 5086, 7092, 13675, 2017, 2183, 3214, 4370, 0, 2612, 4004, 2644], [29319, 17778, 0, 6849, 10404, 2009], [0, 11469, 9429, 4708, 21874, 0, 7406, 8700, 1769, 0, 4145, 6081, 4028], [49, 10472, 10220, 7013, 14383, 6350, 4044, 13611, 4786, 80, 5022, 3984, 9311], [0, 30840, 6271, 7115, 18452, 7502, 7960, 9603, 6709, 0, 8350, 10720, 6291], [0, 26153, 14287, 10258, 16335, 8237, 17456, 14248, 849, 0, 4651, 5432, 3169], [0, 47307, 6971, 1255, 19576, 4875, 9300, 12500, 3814, 0, 7855, 5946, 4865], [0, 46879, 20854, 25150, 34683, 9191, 10729], [0, 36623, 39011, 20318, 10747, 7615, 30626, 34119, 15562, 0, 4859], [0, 28236, 18069, 11206, 37312, 10450, 18445, 46503, 22707, 0, 11309, 8267, 21093], [0, 48203, 28762, 30972, 62681, 5511, 27241, 31056, 6951, 0, 7527, 7404, 9889], [1317, 78698, 17069, 12275, 66531, 17013, 27741, 43511, 9118, 0, 15886, 12129, 11936], [3973, 77088, 35333, 24646, 76374, 18743, 12091, 65086, 18730, 0, 12719, 11702, 8005], [0, 136910, 77635, 37394, 80906, 3624, 24983, 81070, 23299, 0, 16331, 17240, 33162]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

