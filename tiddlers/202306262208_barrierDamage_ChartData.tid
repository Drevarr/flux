created: 20230626220846000
creator: Drevarr
modified: 20230705163539333
modifier: drevarr
tags: ChartData
title: 202306262208_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Grasszanine", "Specialist Zeff", "Cyclotechnist Farra", "Dim Og", "Lucky Leipreach\u00e1n", "My Birthday Girl", "Tootsie Pop Khorne", "Irish Necroman", "Latedoctor", "Rina Of Theros", "Be\u00eb", "Smol Gluvs", "Rozaalyna"];
const professions = ["Scrapper", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[7583, 38868, 14916, 15513, 2126, 35214, 4786, 0, 17212, 19170], [41181, 0, 6924, 7466, 3437, 3336, 3437, 3353, 3443, 3425, 10687, 14598, 4546, 13348, 4521, 3437, 6820, 0, 7094, 15767], [1348, 33744, 17400, 21624, 15054, 27632, 13359, 0, 34493, 28561], [41280, 11240, 12007, 38601, 2053, 21654, 21988, 0, 1895, 47870], [38235, 8407, 22589, 8945, 50461, 18600, 0, 37713, 51421], [37704, 40510, 23869, 51280, 3949, 44890, 9670, 0, 27737, 1932], [60, 21248, 20881, 11223, 19411, 10691, 13282, 18755, 20523, 42479, 41590, 19443, 36417, 22066, 40659, 20539, 8053, 26451, 41966], [361610, 401, 45110, 34698, 19724, 20084, 8563, 56, 23575, 23921], [348881, 0, 23766, 30642, 46168, 76750, 38346, 51716, 53077, 11337], [0, 53268, 662, 20282, 8079, 22933, 24528, 11000, 47609, 130862, 81696, 45869, 54521, 22613, 68023, 26406, 183, 27357, 92174], [510655, 1191, 32151, 39151, 28420, 28378, 31855, 10701, 36531, 30701], [251996, 524, 26642, 54266, 36402, 14009, 31013, 17940, 53052, 43444, 87589, 75707, 40535, 135451, 93082, 51958, 52613, 0, 53959, 86273], [396820, 221, 20427, 13012, 22026, 49386, 31532, 19114, 22195, 90437, 80495, 48540, 151001, 42546, 77894, 47049, 923, 38154, 96583], [537138, 305, 42381, 7601, 17115, 23254, 27082, 26780, 33440, 46605, 94034, 74668, 10005, 190472, 74473, 44941, 67774, 261, 77543]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

