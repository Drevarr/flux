created: 20230327224031000
creator: Drevarr
modified: 20230705163523068
modifier: drevarr
tags: ChartData
title: 202303272240_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Dynacaster Amazoni", "X E R E C A R D", "Primal Clone", "Venomina The Siren", "Zadie Miststep", "Eibh\u00ebar", "Tinkling Star", "Mac Chiato", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Mechanist", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 29.3466, 7.636, 39.2093, 22.8326, 63.0477, 17.7795, 47.1233, 21.4531, 52.875, 10.8695, 43.7184], [43.4592, 34.2174, 10.005, 58.4798, 0.0, 37.8655, 39.609, 15.4149, 35.9424, 31.0435, 0.0, 29.845, 0.0, 29.8944], [0.0, 261.3184, 60.973, 66.9454], [172.8387, 202.0637, 0.0, 219.1962, 0.0, 157.9392], [0.0, 166.4596, 0.0, 178.0012, 95.5416, 123.571, 0.0, 219.4029, 135.3456, 0.0, 0.0, 82.6612, 29.799, 172.2816], [210.0815, 79.8812, 174.6125, 107.5275, 143.2069, 178.7573, 0.0, 149.2837, 246.1824], [32.5382, 345.705, 9.453, 256.754, 53.0677, 154.1713, 64.9418, 46.2447, 184.0363, 0.0, 90.1812, 162.2016], [43.2691, 340.8342, 34.661, 206.1829, 70.7021, 119.7537, 29.8485, 135.14, 101.4811, 0.0, 0.0, 178.365, 0.0, 160.3584], [116.0054, 337.9577, 108.5198, 356.6195, 282.8218, 95.1091, 108.2763, 108.6103, 179.8848], [7.8624, 399.8927, 49.082, 443.7778, 74.1237, 139.5792, 29.1397, 148.3985, 136.7496, 40.7549, 188.0588, 87.1834, 195.0912], [32.0026, 551.6181, 30.199, 354.7772, 144.6942, 240.6771, 75.411, 305.1034, 169.7155, 0.0, 0.0, 195.3438, 67.0903, 292.7232]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

