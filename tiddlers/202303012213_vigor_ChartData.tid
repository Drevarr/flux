created: 20230301221309000
creator: Drevarr
modified: 20230705163520994
modifier: drevarr
tags: ChartData
title: 202303012213_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Sakura Shanks", "Mistwalker Caelon", "Jupi Jupi Jupi", "Zadie Miststep", "Xyntharos", "Arriasa", "Flanneryflame", "Grasszanine", "Whose Guardian", "Tegan Parker", "Mac Aaroni", "Arcanophage Farra", "Jeckyll Mbs", "Fribble Bibble", "Newtype Khan", "Demon Sekhmet", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Vindicator", "Dragonhunter", "Tempest", "Vindicator", "Druid", "Tempest", "Spellbreaker", "Dragonhunter", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Scrapper", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[129.5374, 12.8879, 22.1389, 8.0146, 20.4144, 20.3544, 16.2162, 7.9834, 35.6526, 22.4379, 20.6131, 19.7778, 15.2361, 32.3205, 18.9072, 9.8582, 14.6942, 10.7602, 34.9615], [9.6516, 28.4535, 16.0563, 6.0403, 5.3148, 5.0261, 11.4309, 24.8921, 2.9914, 20.9002, 13.9944, 24.0717, 1.9897, 0.0, 0.0, 23.3626, 1.998, 10.9319, 5.4662, 0.0, 3.9917, 8.0371, 10.0714, 1.0208, 6.4372, 68.3187, 4.0455, 14.7994, 10.3934, 11.9399, 16.896, 6.8526, 12.2966, 13.833, 3.4668, 20.6976, 7.4613, 8.9991, 9.9846, 11.3956, 8.2555, 4.2205, 2.9775], [48.1824, 55.1398, 0.0, 51.2266, 0.0, 6.8161, 3.9677, 126.9414, 6.0192, 0.0, 2.9738, 0.0, 0.0, 0.0, 0.0, 85.2941, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 214.423, 0.0, 0.0, 0.0, 21.032, 0.0, 0.0, 0.8037, 32.103, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 45.2443], [0.0, 7.8939, 23.7705, 23.7934, 0.0, 0.0, 4.0937, 84.8557, 0.0, 86.5133, 62.0418, 23.0908, 0.0, 0.0, 0.0, 32.279, 0.0, 0.0, 0.0, 0.0, 31.5058, 0.0, 31.7117, 3.7536, 162.0401, 0.0, 0.0, 0.0, 0.0, 31.5744, 0.0, 0.0, 23.6988, 0.0, 43.127, 0.0, 0.0, 17.1217, 0.0, 0.0, 0.0, 38.9431, 23.9263], [6.9804, 41.5905, 23.4416, 15.5461, 8.7476, 6.2654, 16.2803, 11.0347, 0.0, 32.5114, 22.0412, 26.3355, 10.8847, 0.0, 3.962, 20.7014, 8.9817, 9.3702, 9.9236, 0.0, 18.0576, 0.0, 24.8602, 1.9646, 111.3927, 0.0, 16.6643, 6.5136, 10.9449, 7.9992, 9.0234, 10.4481, 55.9584, 17.3821, 13.8125, 13.7088, 23.5224, 30.0278, 17.9256, 25.6133, 13.6294, 23.9378, 32.4535], [0.0, 0.0, 0.0, 6.7417, 0.0, 27.5223, 128.7377, 0.0, 55.2614, 81.634, 60.368, 29.8786, 65.7288, 0.0, 32.2445, 0.0, 0.0, 0.0, 0.0, 66.7656, 64.9373, 0.0, 0.0, 0.0, 78.1011, 0.0, 20.9958, 0.0, 0.0, 36.4848, 0.0, 0.0, 44.7354, 0.0], [12.9128, 154.1988, 90.3775, 70.2874, 25.5969, 73.3738, 45.0416, 103.0295, 99.2779, 29.6982, 60.3161, 79.1525], [216.6319, 0.0, 30.5613, 70.8566, 15.4052, 37.0392, 24.9804, 62.0456, 12.267, 94.8073, 72.5472, 0.0, 26.8191, 0.0, 53.35, 51.4382, 49.2518, 25.117, 57.1824], [0.0, 42.7097, 0.0, 0.0, 0.0, 0.0, 0.0, 8.9817, 0.0, 47.7437, 58.6599, 54.1048, 0.0, 0.0, 0.0, 17.9712, 0.0, 0.0, 0.0, 0.0, 46.9973, 0.0, 18.4579, 0.0, 0.0, 276.7461, 0.0, 0.0, 0.0, 0.0, 0.0, 52.6338, 64.1085, 97.9794, 67.8915, 20.1062, 20.9202, 0.0, 128.1357, 0.0, 0.0, 0.0, 0.0], [9.1728, 31.7525, 43.7437, 32.0021, 0.0, 0.0, 37.3786, 119.2428, 0.0, 0.0, 51.0213, 24.7509, 0.0, 0.0, 28.9613, 23.8473, 0.0, 0.0, 0.0, 30.3638, 0.0, 0.0, 153.6777, 22.7405, 0.0, 0.0, 16.0248, 22.032, 9.8855, 54.7578, 21.4268, 45.7248, 23.8476, 0.0, 24.9615, 68.9709, 19.7467, 0.0, 0.0, 119.2805], [47.2458, 19.0762, 23.7547, 0.0, 19.8517, 23.649, 116.6766, 40.6387, 42.6662, 31.6623, 38.2582, 0.0, 0.0, 0.0, 23.5699, 15.6722, 31.6802, 0.0, 68.7139, 27.6442, 19.7309, 0.0, 23.9932, 214.7386, 26.4794, 23.7933, 59.8685, 13.724, 0.0, 0.0, 14.9756, 53.2962, 24.7009, 0.0, 90.4638, 23.9679, 21.8182, 79.897, 28.4256, 0.0, 44.7212, 49.0063], [10.0548, 52.9601, 42.458, 0.0, 0.0, 0.0, 0.0, 73.3078, 0.0, 39.2026, 150.848, 161.5599, 0.0, 0.0, 0.0, 66.0096, 85.6928, 0.0, 14.5217, 34.635, 13.9234, 0.0, 31.1126, 0.0, 0.0, 318.0845, 0.0, 44.5485, 12.829, 0.0, 0.0, 0.0, 75.8466, 0.0, 42.5146, 0.0, 36.2191, 41.0108, 0.0, 29.3328, 0.0, 2.0636, 117.0734], [173.7317, 112.103, 31.6061, 144.0257, 93.1176, 35.9818, 82.1445, 118.895, 90.6826, 123.2899, 24.9212, 249.2924, 71.1091, 0.0, 59.6651, 42.8472, 6.3666, 25.2898, 32.1161, 0.0, 68.0085, 0.0, 93.1896, 45.5822], [41.2272, 98.4975, 60.0093, 39.688, 20.5973, 0.0, 30.8602, 317.8666, 88.8653, 101.1946, 129.5065, 130.0176, 0.0, 0.0, 0.0, 1.728, 17.1935, 81.7885, 70.075, 57.9832, 125.9755, 88.5187, 107.4154, 0.0, 0.0, 532.8231, 0.0, 55.1066, 36.193, 37.1577, 7.8144, 0.0, 0.0, 101.8422, 0.0481, 30.5606, 17.3502, 40.0059, 42.0093, 98.3347, 63.3226], [15.8256, 140.5003, 72.5972, 66.037, 41.1532, 21.55, 0.0, 286.0458, 115.5322, 134.7686, 177.4373, 206.7604, 74.6548, 0.0, 0.0, 74.9261, 65.988, 0.0, 72.3506, 73.1808, 49.2782, 44.3366, 43.0934, 0.0, 42.8617, 487.8558, 0.0, 57.8739, 3.3134, 137.1714, 110.2992, 33.5826, 21.4052, 65.772, 119.7972, 28.9978, 76.1481, 19.7356, 76.4746, 95.091, 80.8315, 0.0774, 111.1396, 128.2591], [305.4633, 194.2195, 16.4525, 158.2533, 167.1439, 63.6029, 13.6512, 65.2929, 68.3942, 52.6804, 68.7148, 86.7316, 68.2246, 36.0677, 93.001, 75.0672, 0.0, 562.959, 75.2, 43.5562, 91.2303, 100.716, 52.0344, 75.4674, 131.6902, 44.3309, 174.1089, 76.1805, 129.7258, 88.7744, 48.0211, 0.0, 66.0352, 224.8171], [45.6624, 99.6168, 127.8823, 57.7122, 13.0904, 43.3526, 81.2127, 402.038, 145.7011, 199.319, 89.4475, 224.1917, 10.7677, 45.1008, 74.5766, 96.0422, 33.1956, 167.9051, 47.5065, 60.6549, 255.2299, 56.5027, 133.7731, 0.0, 40.0862, 579.8415, 4.5731, 89.097, 46.8696, 97.6463, 93.6408, 35.5266, 37.6667, 129.5604, 112.8154, 75.3139, 149.583, 43.2135, 83.242, 150.3616, 72.3946, 19.8827, 84.2833, 238.3603]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

