created: 20230722000818000
creator: Drevarr
tags: ChartData
title: 202307220008_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Gavann", "Tegan Parker", "Seiker Novus Terra", "Cat Wigglebooty", "Venomina The Sly", "Tribal S", "Arriasa", "Drevarr Moonwillow", "Klengah", "Zaedy Zae"];
const professions = ["Firebrand", "Tempest", "Tempest", "Scrapper", "Druid", "Druid", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[118.1253, 73.5221, 28.175, 147.734, 148.1584, 21.9716, 225.6038, 129.7642, 57.4574, 81.3768, 97.0004, 299.6154, 32.8492, 21.1138, 66.2277, 27.2087], [224.9296, 16.1352, 36.995, 90.6691, 116.8297, 30.574, 98.7017, 95.0796, 73.5034, 177.2453, 105.2598, 313.9381, 16.262, 148.3461, 120.736, 30.3628], [243.9965, 105.5592, 70.119, 118.2992, 265.2056, 43.2729, 170.3671, 137.445, 142.8027, 263.5269, 151.359, 322.4543], [58.5413, 25.2331, 92.218, 198.9493, 44.7086, 64.0528, 266.999, 167.4404, 92.9128, 389.9396, 377.053, 663.4894, 221.5697, 131.3138, 2.4841, 7.5029, 77.7479], [396.6805, 6.3374, 72.765, 38.8315, 157.5134, 153.6895, 125.8673, 79.9607, 57.3873, 410.8969, 777.1557, 1187.6228, 59.0311, 87.1239, 42.1159, 153.3778, 103.518], [996.2445, 13.4914, 580.307, 281.4041, 590.3491, 394.5206, 1508.5963, 344.9061, 300.6003, 1956.8321, 1065.4678, 5353.9801, 748.9464, 171.3437, 135.2586, 161.8725, 205.906], [2348.6523, 108.864, 421.792, 84.0105, 1865.3594, 917.2212, 1149.3636, 609.2047, 788.8481, 3317.9419, 2972.8222, 4176.809, 535.1824, 535.5373, 0.0, 432.5157], [1670.2885, 324.8813, 612.5, 483.6516, 890.2555, 360.0736, 1588.2821, 666.3657, 813.0222, 3366.0991, 2025.2915, 5585.4659, 843.1034, 492.9172, 187.7668, 159.7165, 522.4379], [1923.5205, 427.4856, 1006.411, 286.8181, 1685.5461, 291.6264, 2312.9568, 889.916, 740.1494, 3189.5227, 3767.8413, 4810.4917, 663.7335, 448.0209, 340.2319, 49.2862, 573.5043], [2560.7714, 343.7381, 656.747, 636.3017, 1698.8173, 575.2835, 1341.8513, 1171.3548, 1227.4162, 3540.6689, 3536.769, 5257.9793, 514.1231, 173.0704, 314.9578, 1019.3568, 463.3159]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

