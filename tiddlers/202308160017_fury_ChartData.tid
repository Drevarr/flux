created: 20230816001725000
creator: Drevarr
tags: ChartData
title: 202308160017_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Explorer Theodora", "Jimbo The Pleb", "Strongg Mom", "Fable Goes Brrrr", "Sakis Unleashed", "Pafema", "Kosa\u00efr", "Ax Axun", "Tribal S", "Xanvias", "P\u00edogre", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Berserker", "Renegade", "Holosmith", "Druid", "Druid", "Weaver", "Vindicator", "Druid", "Reaper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 2.5908, 97.6976, 25.7968, 0.0, 0.0, 0.0, 0.0, 35.4389, 0.0, 0.0, 5.346, 8.0039, 0.0, 2.676, 0.0, 56.4999, 74.5741, 49.7448, 0.0, 46.6883, 0.0, 29.7675, 0.0, 0.0, 0.0, 73.5551, 4.1438, 13.6555, 46.2554, 25.7765, 0.0, 0.0], [75.1247, 42.7857, 67.408, 42.5187, 35.8995, 50.4381, 54.4365, 9.9117, 45.6676, 121.8431, 10.6325, 45.1989], [0.0, 104.3859, 0.0, 67.0963, 63.0414, 0.0, 16.7459, 0.0, 0.0, 0.0, 0.0, 16.755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 44.8743, 361.452], [19.9511, 8.019, 16.0113, 84.204, 4.004, 12.9897, 0.0, 24.0618, 27.9256, 40.2512, 16.0963, 8.1198, 7.912, 3.9334, 20.3148, 19.7672, 67.5663, 12.0686, 17.0082, 14.5332, 36.4441, 34.4651, 12.0464, 2.8602, 19.7003, 78.3069, 7.953, 73.8629, 0.0, 73.4118, 28.2537, 0.0, 19.8979, 21.3039, 4.0163, 16.008, 20.5621, 30.305, 8.7533, 13.3644], [0.0, 31.4685, 159.1106, 102.459, 18.854, 23.6736, 71.0941, 161.6714, 90.6398, 86.7634, 74.7398, 133.2394, 76.5123, 6.556, 0.0, 53.0136, 29.7297, 54.395, 1.129], [77.77, 12.4992, 116.62, 70.4679, 80.0184, 18.5104, 43.9257, 83.4624, 65.0451, 5.9732, 4.2175, 420.9025, 167.9328, 91.9802, 90.0589, 31.0793, 47.6719, 80.949, 58.3446], [13.4191, 41.7774, 28.8323, 35.82, 54.0688, 94.9166, 43.7835, 21.3672, 30.2702, 51.46, 58.0845, 7.992, 15.896, 3.9897, 26.4032, 15.7443, 46.745, 26.6314, 3.2208, 0.0, 0.0, 27.1997, 17.205, 290.471, 29.6688, 74.819, 56.9677, 85.1048, 40.1548, 77.8056, 25.4898, 38.4859, 18.4248, 47.3906, 40.8672, 8.6007, 17.4244, 25.3825, 46.3854, 22.8855, 3.9528, 54.8486, 38.4798, 15.9732, 47.881, 16.2563, 16.3632, 13.3334, 3.9903], [26.3736, 15.088, 9.2781, 17.4211, 20.4019, 22.3241, 14.3313, 78.8164, 37.3157, 17.7596, 32.1805, 39.2958, 23.3629, 25.4183, 154.1862, 23.9305, 56.9478, 2.501, 96.2282, 16.7291, 74.0733, 16.7035, 0.0, 43.24, 73.9201, 41.259, 51.0029, 23.408, 56.9579, 59.3779, 21.0456, 11.9803, 8.325, 0.0, 14.9658, 8.8167, 42.9413, 30.0414, 50.7194, 18.0319, 29.7856, 24.5128, 15.0368, 78.5225, 607.4181], [134.8099, 152.0267, 126.005, 191.784, 63.918, 49.7888, 31.8573, 163.9939, 39.1404, 100.2496, 25.8557, 45.4038, 88.144, 50.9855, 46.5977, 122.8957, 89.1643, 35.6164, 54.264, 90.9891, 109.4174, 18.4965, 50.6252, 145.7107, 36.9805, 74.8618, 177.3262, 58.0419, 131.3592, 90.1099, 41.9328, 97.8803, 146.3034, 94.0695, 174.5429, 42.5718, 99.507, 129.4493, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.7395, 98.7394, 61.3657, 48.6922, 64.0332, 76.9045, 87.1718, 46.0872, 47.6672, 45.6395, 38.3691, 20.245, 36.4925, 38.8186, 39.6006, 35.0987, 3.2677, 39.3562, 408.6986, 61.0288, 122.5117, 108.0218, 86.9744, 23.3249, 55.7328, 32.676, 79.8917, 56.6752, 38.8786, 69.8868, 19.4036, 94.6386, 45.5383, 76.7625, 81.1504, 59.0064, 31.8472, 82.9282, 28.014, 55.59, 116.9792, 44.0692, 60.0638, 118.5951, 68.745, 60.495, 30.3056, 65.6919, 48.7843, 106.2318, 477.8316], [34.6456, 86.112, 0.0, 62.7072, 8.6464, 25.3453, 59.4642, 114.7378, 99.5602, 64.3375, 144.4971, 87.1228, 26.5478, 22.6421, 40.8375, 41.5105, 310.1043, 123.5682, 35.0042, 290.6635, 15.4314, 87.024, 41.1254, 41.4288, 118.5904, 176.7896, 95.8545, 143.724, 94.211, 76.4397, 177.0358, 52.3143, 20.758, 0.0, 16.9978, 38.8542, 93.43, 31.873, 6.6554, 102.4374, 15.975, 64.1886, 72.8325, 442.3235, 43.7192, 254.047, 0.0, 115.3376, 44.0793, 55.896, 0.0, 0.0, 0.0, 107.4534, 66.5496, 0.0, 113.3174, 50.2073, 36.6183, 149.8656, 113.202, 0.0, 103.3155, 130.4607, 0.0, 0.0, 29.9727, 190.3872, 6.1857, 117.5287, 204.0078, 123.9226, 11.9547, 0.0, 53.5448, 120.1244, 908.6943], [58.9421, 26.0195, 4.433, 36.0242, 68.502, 10.2382, 15.9775, 0.0, 0.0, 28.1078, 32.3263, 56.3288, 20.1222, 0.0, 0.0, 11.5494, 32.6253, 15.8565, 188.3348, 118.0507, 106.5839, 64.2642, 131.3092, 99.9837, 61.295, 115.1287, 62.5874, 408.7405, 0.0, 227.4237, 76.9915, 190.1368, 37.4587, 201.3018, 103.0598, 139.3344, 220.9226, 316.5232, 176.256, 152.6189, 71.7147, 192.1218, 192.7226, 132.2121, 48.376, 31.1531, 39.0239, 38.7453, 34.31, 35.4096, 51.0418, 78.0078, 111.1792, 55.1128, 46.3575, 907.8064, 39.2952, 321.3648, 186.1552, 225.5376, 104.9351, 99.5248, 51.345, 112.4059, 26.99, 147.247, 213.2352, 0.0, 139.601, 126.791, 86.7813, 158.9026, 68.3088, 79.31, 96.0638, 37.5615, 210.6099, 69.3313, 161.2575, 321.2604, 171.0093, 89.5215, 135.5484, 135.3882, 61.6777, 121.6697, 1964.3526]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

