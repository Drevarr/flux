created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Synomi\u00f1 Spyce", "F\u00f9gly", "Legacy Of Mathus", "Ain Sof Aur", "Legoh Brave", "Wall Knot", "Heymerino", "Lost Uber Driver", "A\u00fcrora Windrunner", "Ateriuz", "Conky Jr", "Mother Ship", "Kittendoo", "Drevarr Moonwillow", "Aronorf Xideliesi", "Gestern Yesteryear", "Twinks R Us"];
const professions = ["Scourge", "Tempest", "Berserker", "Guardian", "Tempest", "Firebrand", "Chronomancer", "Herald", "Firebrand", "Berserker", "Herald", "Tempest", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[26.7062, 41.5543, 126.4368, 24.5846, 0.0, 0.0, 21.1966, 205.2068, 108.6193, 0.0, 0.0], [0.0, 197.883, 20.1301, 4.2379, 64.728, 82.5227, 123.8873, 205.8787, 65.8458, 0.0, 35.8766, 41.9988, 71.7885], [135.0413, 273.6549, 174.5525, 67.9673, 12.8887, 43.2915, 77.309, 168.1279, 132.5399], [140.5457, 80.8993, 19.455, 7.1345, 8.6645, 56.9148, 66.9679, 24.1223, 197.5298, 63.6035, 0.0, 36.8122, 0.0, 288.7987, 15.1351, 16.001, 81.0426], [377.3187, 39.5131, 4.7369, 54.095, 48.5728, 307.3915, 70.9962, 219.7938], [232.041, 198.1395, 130.2943, 13.2866, 3.3048, 0.0, 0.0, 70.7446, 0.0, 186.6507, 13.3533, 0.0, 0.0, 0.0, 278.5433, 15.6849, 33.4822, 37.7849], [7.2836, 0.5702, 0.0, 64.4322, 267.0624, 38.0556, 294.4287, 144.9448, 0.0, 26.036, 31.6274, 397.1588, 229.5385, 8.0133, 83.0418], [393.7312, 36.4764, 201.3544, 23.7907, 42.3038, 636.4215, 50.3103, 108.6642, 125.7747], [285.0056, 118.657, 223.5388, 0.0, 0.0, 58.0785, 14.0407, 0.0, 61.0936, 187.7892, 21.9419, 0.0, 0.0, 0.0, 592.884, 0.0, 78.0912, 28.7885], [191.3085, 149.3307, 259.5035, 79.5464, 0.0, 51.9095, 91.762, 194.5644, 127.3635, 91.0168, 89.9298, 0.0, 39.7782, 19.4705, 327.015, 20.9994, 81.4088, 40.2089], [117.3586, 1288.4198, 129.554, 158.5558, 241.2285], [202.7454, 82.0327, 278.881, 36.4582, 19.1225, 16.3835, 33.853, 125.6407, 194.5746, 211.4448, 87.8077, 27.5899, 99.8752, 69.1994, 216.2362, 133.7043, 70.9966, 166.5833], [101.7885, 50.1975, 336.121, 148.8874, 759.0, 157.5174, 72.1857, 25.7311, 20.0359, 762.4868], [585.3012, 573.379, 519.627, 82.1344, 78.0581, 82.181, 178.5528, 388.9265], [748.9016, 121.6475, 55.6178, 116.0485, 222.5665, 363.2318, 219.8632, 493.4765, 190.6304, 0.0, 62.7997, 33.5098, 321.1132, 62.427, 45.2214, 46.6813], [404.6346, 299.7949, 161.3758, 16.3015, 13.8348, 49.29, 201.857, 523.0646, 74.5767, 320.298, 80.5004, 164.2426, 64.8302, 24.7529, 488.5875, 32.7173, 286.0282, 17.3431], [573.0692, 1089.2358, 1076.4589, 53.7469, 45.6257, 114.111, 282.0275, 651.3355, 493.35, 195.9758, 208.7891, 75.6271]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

