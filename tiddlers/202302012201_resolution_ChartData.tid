created: 20230201220146000
creator: Drevarr
modified: 20230705163518549
modifier: drevarr
tags: ChartData
title: 202302012201_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Whose Guardian", "Arkitrix", "Raelyn Sunray", "Zaylen Harker", "\u00c2 R K", "Sygaldry Verdandi", "Bella Lunabringer", "Koralia Danai", "Johosh The Great", "Ravioli Fetabringer"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[153.6298, 204.3966, 146.1915, 54.245, 154.1866, 95.7107, 180.8035, 75.8961, 80.9315], [179.4778, 112.4178, 155.1269, 0.0, 39.3156, 60.8617, 172.5584, 136.71, 135.5908, 157.2221, 91.4301, 195.5598, 52.9906, 102.396, 92.7515], [205.1165, 172.7053, 186.4724, 134.1963, 160.5358, 35.6227, 23.0359, 205.4144, 20.6819, 36.2057, 30.5042, 158.0132, 598.3399], [43.1533, 570.8892, 246.5928, 37.4246, 46.0169, 83.2947, 27.199, 237.3749, 38.7029, 0.0, 69.2366, 172.6625, 175.4141, 104.076, 82.5532, 86.929, 32.4478, 12.765, 69.3057, 86.3411, 32.2883], [40.2604, 411.353, 212.0712, 188.8973, 182.6406, 35.1548, 3.6742, 494.7038, 0.0, 0.0, 163.184, 165.1777, 140.2341, 102.9294, 0.0, 0.0, 29.4157, 198.7255, 100.4625], [77.6679, 547.6235, 304.7088, 179.5622, 216.0704, 39.5337, 448.3589, 0.0, 0.0, 137.0163, 229.5894, 141.024, 215.9136, 53.4257, 138.8006, 60.4503, 222.7748, 131.3782, 121.6967, 34.4938, 64.4077, 477.9216], [105.5127, 734.14, 393.4488, 283.008, 243.8436, 72.7331, 27.817, 460.3027, 39.8635, 0.0, 108.6048, 127.8395, 218.0676, 192.0996, 70.5443, 114.1296, 15.778, 219.4048, 98.1586, 117.9293, 101.0528, 84.779, 397.9072], [91.8113, 1035.2255, 416.904, 339.6941, 232.1738, 373.2629, 39.8635, 39.1628, 122.3297, 213.85, 276.8226, 166.257, 83.6312, 177.7565, 37.3596, 221.9068, 99.6052, 39.7992, 101.9697, 126.353, 534.1264], [104.9502, 836.3918, 368.3232, 330.5702, 201.0882, 146.32, 76.7264, 449.5032, 63.7459, 136.7257, 156.3361, 203.2858, 270.0782, 150.0723, 102.9274, 138.2352, 62.522, 245.4965, 138.3436, 126.6426, 55.1603, 142.2151, 500.216], [81.0029, 1052.2348, 375.7008, 334.3296, 302.7534, 125.7063, 41.907, 484.0474, 0.0, 178.1052, 235.4512, 184.7664, 259.9313, 210.0042, 203.5048, 180.4944, 45.4544, 241.4627, 64.4032, 108.3079, 192.0202, 136.4906, 617.8205]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

