created: 20230701000406000
creator: Drevarr
modified: 20230705163540177
modifier: drevarr
tags: ChartData
title: 202307010004_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Vhalloe", "Pale Pam", "Sakis Ranger", "Klengah", "Demon Staph", "Tribal S", "Arriasa", "Ak\u00e1nt\u00f3r", "Drevarr Moonwillow"];
const professions = ["Druid", "Druid", "Druid", "Druid", "Druid", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[190.4576, 15.525, 37.1036, 6.0329, 66.9252, 21.15, 43.428, 145.3907, 0.0, 41.9146, 360.6595, 362.0531], [269.4407, 227.8692, 252.0461, 285.7421, 272.9741, 46.128, 459.251, 121.5043, 140.6545, 35.8387, 171.1168], [141.1137, 20.5277, 79.3728, 104.6016, 132.1414, 101.736, 339.6509, 57.2443, 80.262, 112.3877, 368.8955, 143.2095, 109.4726, 462.9089, 146.1484, 0.0, 36.284, 244.4066, 53.5987, 229.4183, 788.711, 1853.9992], [86.182, 186.2977, 81.6566, 340.6234, 369.3993, 123.72, 112.2312, 212.6779, 336.7035, 65.7043, 569.7338, 122.337, 183.0331, 231.6485, 329.6975, 228.185, 212.299, 45.4133, 0.0, 347.6346, 863.5162, 640.3379], [17.2307, 262.1585, 508.9968, 294.912, 367.367, 56.184, 225.3835, 282.8347, 263.5465, 226.9051, 1612.7159, 223.56, 417.841, 326.975, 337.4816, 785.605, 243.601, 167.1978], [69.7828, 248.3109, 74.4307, 315.7402, 273.2336, 138.048, 399.863, 136.3824, 49.931, 104.7989, 738.6652, 96.807, 356.8413, 69.678, 72.176, 373.133, 82.156, 64.0873, 0.0, 792.6564, 527.3424, 1916.4446], [128.5276, 47.5922, 190.4947, 126.3053, 211.4868, 118.056, 984.5803, 161.5118, 160.5485, 65.2882, 685.1229, 354.936, 381.0778, 158.6894, 308.6481, 294.079, 261.461, 85.3981, 399.9072, 505.4131, 2280.2083, 2107.6975], [259.4635, 102.9253, 125.0122, 368.9626, 92.4471, 441.192, 684.4891, 429.7709, 223.8565, 107.3938, 1350.6865, 333.9255, 386.2859, 598.7369, 557.4642, 656.731, 512.347, 365.3536, 26.3424, 294.0438, 1692.887, 2152.7365], [359.1491, 91.6007, 381.0643, 448.128, 377.8311, 251.544, 469.2379, 306.9965, 166.1345, 195.84, 1383.9045, 435.7005, 334.9876, 357.457, 433.4246, 580.45, 433.716, 429.8131, 8.0237, 428.9403, 1368.1699, 2966.9209]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

