created: 20230501220820000
creator: Drevarr
modified: 20230705163527939
modifier: drevarr
tags: ChartData
title: 202305012208_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Gonzo Cc", "Miphest\u00f6", "Hyde En Sikh", "Primal Clone", "Eibh\u00ebar", "Black Raspberry Pie", "Morv\u00fcs", "Blancooo Padreee", "Kiloak", "Sub Train", "Whose Guardian", "Koralia Danai", "Sygaldry Verdandi", "Xanvias Einzbern", "Bella Sassy", "Gabe Malhorn", "Johosh The Great", "Newtype Khan"];
const professions = ["Specter", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[240.065, 28.6506, 66.0759, 7.6072, 36.3059], [244.7012, 14.2678, 17.2898, 8.514, 5.5125, 28.5545, 262.138, 10.8808], [226.6891, 6.8913, 13.6532, 7.0488, 7.2104, 34.8804, 188.5327, 10.4864, 143.5336, 18.8496, 25.4782, 0.0, 8.0664, 34.0858], [230.643, 6.6971, 18.183, 0.0, 14.553, 24.4251, 188.9632, 10.7184, 155.9159, 15.4638, 35.9252, 3.3516, 6.6667, 26.6847], [236.7935, 13.7825, 26.0304, 5.1183, 13.8915, 25.743, 198.4328, 7.3312, 166.2766, 15.0084, 18.0287, 0.0, 5.671, 41.9622], [267.1066, 21.062, 23.7974, 6.8904, 10.606, 31.366, 191.9762, 14.9408, 149.093, 9.5634, 24.9493, 7.0119, 0.0, 41.2153], [0.0, 6.7221, 83.8121, 74.1538, 804.0619], [142.3397, 0.0, 0.0, 10.1178, 127.9782, 21.7014, 424.8443, 5.0808, 422.009, 0.0, 72.5998, 20.7491, 0.0, 81.4121], [459.968, 7.3766, 13.398, 6.1083, 41.4761, 65.1043, 355.113, 28.304, 338.8707, 17.5428, 66.2963, 0.0, 0.0, 89.4922], [55.9066, 25.201, 7.3359, 48.9069, 81.7098, 790.2878, 38.7904, 320.4236, 12.9492, 47.5182, 7.4529, 7.5325, 151.7565], [481.4947, 68.0391, 15.8862, 7.8507, 87.6929, 61.6777, 508.3496, 24.5456, 247.646, 28.2942, 63.387, 0.0, 0.0, 61.3816], [551.3466, 35.7181, 42.8098, 7.8309, 38.808, 65.28, 360.7087, 61.364, 331.037, 38.7684, 66.649, 19.8268, 81.0047], [653.7082, 10.6766, 10.3994, 7.4745, 47.4295, 75.6475, 696.8824, 25.4736, 288.078, 27.1854, 97.4609, 0.0, 7.8066, 97.776], [781.9896, 23.4885, 51.4228, 0.0, 15.6775, 68.3551, 724.0001, 32.944, 454.6073, 57.7764, 83.0026, 36.2722, 0.0, 47.7337], [922.572, 96.7688, 22.968, 0.0, 64.7829, 106.662, 385.2438, 74.82, 678.4995, 31.9572, 103.6762, 8.0042, 11.9192, 183.1263], [793.4119, 68.9126, 24.3716, 7.6923, 64.2096, 104.6413, 869.9192, 61.1784, 453.5965, 16.6716, 129.6393, 0.0, 0.0, 194.3298], [959.0356, 7.9589, 16.0138, 0.0, 48.8628, 108.6828, 947.3984, 82.6152, 393.7066, 41.6592, 81.019, 9.9887, 0.0, 180.2745], [877.7614, 68.1361, 17.9916, 1.8216, 88.9056, 217.8928, 1364.0644, 88.9488, 677.4887, 15.0678, 101.1636, 5.1156]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

