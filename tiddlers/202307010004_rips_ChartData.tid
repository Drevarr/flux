created: 20230701000406000
creator: Drevarr
modified: 20230705163540205
modifier: drevarr
tags: ChartData
title: 202307010004_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Latedoctor", "Zayde Sunsabre", "Smol Gluvs", "Arcanophage Farra", "Newtype Khan", "Morv\u00e4rth", "Broken Cheese", "Morton Saltbringer", "Be\u00eb", "Primal Clone"];
const professions = ["Spellbreaker", "Reaper", "Spellbreaker", "Reaper", "Spellbreaker", "Spellbreaker", "Reaper", "Chronomancer", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.6066, 0.0984, 0.1282, 0.5625, 0.3478, 0.16, 0.0297, 0.3651, 0.82, 0.6078, 0.009, 0.2933, 0.3243], [0.36, 0.3919, 0.4306, 0.234, 0.2, 0.25, 0.197, 0.0, 0.1319, 0.0769, 0.2537], [0.3443, 0.0, 0.1538, 0.1562, 0.5435, 0.12, 0.2475, 0.3968, 1.12, 0.0588, 0.2691, 0.4133, 0.6081, 0.2361, 0.234, 0.42, 0.1, 0.5606, 0.0, 0.1209, 0.2179, 0.2791], [0.3934, 0.6885, 0.3974, 0.6146, 0.2283, 0.6, 0.2079, 0.4444, 0.56, 0.5686, 0.287, 0.5733, 0.4054, 0.3611, 0.1489, 0.08, 0.25, 0.303, 0.0625, 0.2637, 0.2051, 0.2156], [0.1639, 0.7705, 0.6282, 0.1562, 0.7174, 0.16, 0.2079, 0.4286, 0.7, 0.4118, 0.1211, 0.92, 0.6892, 0.4444, 0.0213, 0.74, 0.42, 0.697, 0.2198, 0.3248, 0.0042], [0.7869, 0.1148, 0.2436, 0.5938, 0.3043, 0.56, 0.0891, 0.4127, 0.46, 0.6863, 0.2646, 0.7067, 0.9865, 0.4722, 0.4681, 0.31, 0.38, 0.303, 0.0938, 0.1648, 0.2436, 0.148], [0.2131, 0.5902, 0.1923, 0.7812, 0.1848, 0.3, 0.2871, 0.4603, 0.7, 0.7255, 0.3139, 0.4533, 0.4189, 0.4167, 0.5319, 0.49, 0.2, 0.5758, 0.0, 0.2527, 0.0726, 0.277], [0.9672, 0.8033, 0.5513, 0.7188, 0.4457, 0.32, 0.2277, 0.5238, 1.58, 1.098, 0.3812, 0.1944, 0.617, 0.74, 0.71, 0.0455, 0.0, 0.6484, 0.5342, 0.0846], [0.8689, 0.8361, 0.7179, 0.7812, 0.8696, 0.3, 0.0891, 0.4286, 1.58, 0.9608, 0.2556, 1.2027, 0.6389, 0.5851, 0.54, 0.35, 1.0455, 0.0, 0.7143, 0.3846, 0.5095], [0.4754, 0.5513, 1.1667, 1.0109, 0.38, 0.3564, 0.9524, 1.3, 1.0588, 0.5874, 1.0533, 0.8108, 0.6806, 0.8298, 0.57, 0.95, 0.8485, 0.0312, 0.2747, 0.359, 0.4588], [1.7869, 0.459, 0.5128, 1.1667, 0.6848, 0.5, 0.3861, 0.6349, 1.3, 1.5686, 0.6457, 0.9467, 1.1622, 1.0833, 1.4362, 1.25, 0.53, 0.7879, 0.0, 0.3516, 0.641, 0.5645]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

