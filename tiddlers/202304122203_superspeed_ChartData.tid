created: 20230412220340000
creator: Drevarr
modified: 20230705163525472
modifier: drevarr
tags: ChartData
title: 202304122203_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["K\u00f4sair", "Tootsie Pop Rocks", "Blancooo Padreee", "Grasszanine", "Minka Bringer", "Arcanophage Farra", "Mac Chiato", "Tegan Parker", "K\u00f4sair", "Jeckyll Mbs", "Venomina The Siren", "Smol Daddy Tika", "Xanvias Einzbern", "Zadie Miststep", "Skye Nightroad", "Fribble Bibble", "Johoshua", "Drevarr Moonwillow"];
const professions = ["Spellbreaker", "Scrapper", "Berserker", "Spellbreaker", "Scrapper", "Spellbreaker", "Tempest", "Tempest", "Berserker", "Berserker", "Tempest", "Berserker", "Berserker", "Tempest", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0.384, 0.604, 0.92, 0, 0.765, 1.184], [0.186, 0, 0, 0.211, 0.267, 0.047, 0.252, 0, 0.344, 0, 0.459, 0, 0.294, 0.092, 0, 0.121, 0], [0.37, 0, 0, 0, 0, 0.359, 0.407, 0, 0.052, 0.604, 0, 0, 0, 0.317, 0, 0.202, 0, 0, 0, 0.195], [0.113, 0, 0, 0.582, 0, 0.363, 0.335, 0, 0.17, 0.602, 0.307, 0, 0, 0.668, 0, 0, 0, 0.765, 0.666, 0.28], [0, 1.142, 0.842, 0, 0.789, 0.197, 0, 0.513, 1.793, 1.119, 0.593, 0.522], [0.377, 1.624, 0, 0.473, 0, 0.53, 0.5, 0, 0.267, 0.738, 0.918, 0, 0.647, 0, 0, 0, 0, 0.784, 0, 0.049], [0.271, 0.555, 0, 0.204, 0.203, 0.497, 0.39, 0, 0.261, 0.411, 0, 0.681, 0.556, 0, 0.242, 0, 0.457, 0.399, 0.329], [0.211, 0, 0, 0.35, 0.406, 0.472, 0.487, 0.307, 0.58, 0.506, 0, 0.165, 0.624, 0, 0.206, 0, 0.461, 0.399, 0.204], [0.472, 1.246, 0, 0.309, 0.17, 0.58, 0.652, 0, 0.19, 0.998, 0.516, 0.666, 0.402], [0.332, 0, 0, 0.772, 0.339, 0.416, 0.42, 0.275, 0.746, 0, 0.386, 0.768, 0, 0, 0, 0.769, 0.666, 0.255], [0.357, 0.753, 0.421, 0.571, 0.432, 0.489, 0.21, 0, 0.289, 0.669, 0.649, 1.161, 0.378, 0.625, 0, 0.484, 0.74, 0.435, 0.399, 0.41], [0.561, 1.771, 0, 0.628, 0.509, 0.624, 0.463, 0, 0.563, 0, 0, 0.386, 0.768, 0.644, 0.808, 0, 0.384, 0, 0.573], [0.416, 1.204, 0, 0.657, 0.17, 0.817, 0.587, 0, 0.532, 0.604, 0.896, 0, 0.673, 1.052, 0, 0.197, 0, 0, 0.666, 0.779], [0.657, 0.273, 0, 0.582, 0.305, 0.248, 0.69, 0.635, 0.481, 0.724, 0.917, 0.464, 0.625, 0.384, 0.484, 0.453, 0.922, 0.799, 0.736], [0.505, 1.401, 0, 0.617, 0.521, 0.451, 0.891, 0, 0.447, 0, 1.081, 0.461, 0.192, 0.484, 1.145, 1.152, 0.2, 0.865], [1.076, 0, 0.421, 1.106, 0.99, 0.962, 1.417, 1.157, 1.243, 1.637, 1.214, 0.579, 1.063, 0.686, 0.906, 0.299, 0.866, 1.198, 1.067], [1.205, 1.316, 0.841, 1.339, 0.914, 1.221, 1.57, 0, 1.277, 0.77, 2.025, 2.35, 1.284, 1.486, 0.767, 0.966, 1.057, 1.845, 1.6, 1.891], [1.265, 1.121, 0.211, 1.378, 0.88, 1.578, 1.63, 0.238, 1.384, 1.676, 1.941, 2.153, 1.763, 1.564, 1.735, 1.013, 1.247, 2.177, 1.003, 1.733]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

