created: 20230506002551000
creator: Drevarr
modified: 20230705163528452
modifier: drevarr
tags: ChartData
title: 202305060025_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Be\u00eb", "Temperstep", "Hyde En Sikh", "Tegan Parker", "Kaotic Reaper Z", "Primal Clone", "Venomina The Siren", "Viral Marketing", "Artakama Nahid", "Stoic Rapidfire", "Zaylen Harker", "Black Raspberry Pie", "Jupi Jupi Jupi", "Air One Com", "Miphest\u00f6", "Newtype Khan", "Johosh The Great", "Blancooo Padreee", "Smol Daddy Tika", "Solus Sanctus", "Ark Darkness", "Koralia Danai", "Drevarr Moonwillow", "Aronorf Xideliesi", "Lucas Ryn", "Bella Sassy"];
const professions = ["Scourge", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Firebrand", "Tempest", "Druid", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Willbender", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[195.1805, 174.7963, 0.0, 0.0, 0.0, 0.0, 481.1011, 117.1751, 112.6707, 0.0, 52.3908, 0.0, 212.628, 378.5224], [7.803, 0.0, 1.0256, 0.0, 61.4625, 556.5672, 40.8109, 646.344, 596.5043], [0.0, 102.4218, 437.9706, 0.0, 0.0, 0.0, 206.7695, 74.5186, 78.9201, 216.9644, 0.0, 0.0, 0.0, 0.0, 451.2, 468.3663], [60.1718, 235.4133, 128.4007, 15.7842, 0.0, 308.1126, 125.2381, 110.0435, 49.5911, 22.7866, 0.0, 360.8388, 0.0, 249.006, 507.1513], [105.75, 2180.309], [169.2275, 118.6211, 138.5253, 0.0, 16.5009, 0.0, 141.4348, 449.4528, 134.6997, 18.6278, 26.7907, 0.0, 42.1848, 439.0734, 152.28, 664.7463], [256.241, 350.1152, 70.1343, 33.5664, 2.8681, 312.9385, 103.6499, 69.0172, 68.8288, 126.3994, 10.7603, 313.8912, 62.2975, 226.728, 649.5268], [237.8429, 1017.4243, 339.3401, 18.0153, 1.2765, 45.6522, 1715.0364], [115.7218, 214.7722, 111.236, 29.7369, 0.0, 507.4577, 229.1481, 299.4112, 120.2216, 84.9542, 0.0, 504.4032, 104.0286, 481.092, 631.3617], [271.5284, 611.3952, 178.1518, 0.0, 15.9137, 62.7422, 775.4786, 336.9596, 0.0, 0.0, 0.0, 0.0, 153.7704, 198.1651, 365.19, 556.2464], [300.0589, 1299.868, 233.1999, 174.2256, 41.3995, 1485.2512], [53.8613, 622.1077, 204.0332, 52.4142, 41.4948, 20.1756, 277.6726, 171.796, 80.0316, 30.298, 155.1302, 404.36, 964.5804, 0.0, 503.088, 398.6514], [134.2088, 762.9376, 215.5658, 0.0, 0.0, 45.8698, 555.3451, 2.8611, 135.6091, 0.0, 63.8602, 214.8263, 868.4172, 44.9518, 327.12, 945.5697], [210.6456, 562.5358, 25.9483, 0.0, 0.0, 0.0, 812.6006, 201.9676, 100.0395, 0.0, 46.7702, 0.0, 403.4772, 50.2429, 767.04, 1440.9383], [382.6284, 538.2368, 267.4625, 22.1112, 0.0, 1754.0145, 357.7675, 351.9572, 49.9514, 1.8576, 37.3102, 1043.5068], [331.7002, 614.008, 127.6632, 36.0306, 10.212, 59.1422, 604.3462, 321.4836, 310.6277, 139.5425, 257.0506, 27.778, 596.484, 62.5276, 699.642, 630.3798], [388.4056, 437.1214, 220.5275, 48.4182, 31.5296, 44.3863, 721.6517, 400.0338, 196.4412, 64.449, 128.3808, 92.6323, 590.1336, 115.3011, 721.074, 1131.1488], [279.1721, 623.9366, 63.9657, 51.7815, 2.7402, 36.6721, 1114.0312, 362.7095, 287.7904, 35.7034, 92.0131, 88.5095, 372.4056, 141.8028, 671.16, 1203.8094], [443.8667, 598.0699, 125.8528, 74.6586, 9.2759, 45.4742, 391.2659, 340.9911, 573.7619, 15.9667, 120.1661, 201.3759, 534.5676, 45.918, 777.474, 1521.945], [499.4167, 846.8085, 173.9948, 107.559, 65.5355, 27.5931, 1104.7507, 296.3839, 321.5411, 212.3906, 66.6672, 85.4685, 575.8452, 257.702, 1026.48, 2045.7886], [460.3984, 1205.2846, 212.8167, 30.9024, 0.0, 64.5026, 744.2961, 403.6752, 252.0187, 176.3824, 71.3318, 36.3453, 1035.1152, 213.8085, 1246.722, 1760.5467], [244.3311, 941.6531, 520.241, 84.9483, 68.7948, 132.17, 1331.9374, 731.5313, 417.0334, 151.4344, 112.777, 95.2347, 879.0768, 282.0873, 767.886, 1678.0671], [567.6459, 182.1151, 1407.5154, 42.3085, 80.8524, 6.1442, 0.0, 1060.2043, 638.6755, 308.0004, 35.1212, 106.0483, 18.4212, 1028.3112, 95.8848, 1024.224, 2255.4243], [60.617, 369.9149, 193.4397, 42.7841, 2138.5984, 451.6636, 639.7476, 171.0047, 268.7741, 185.1769, 1259.874, 402.1274, 1664.928, 2422.8382], [504.8384, 1828.4374, 298.6407, 225.4743, 0.0, 0.0, 1786.3106, 597.8399, 477.3602, 230.2423, 431.9952, 233.3937, 1261.9152, 150.9588, 1819.182, 3116.5506], [732.4601, 1956.7259, 513.4018, 144.5553, 88.6061, 22.6481, 2134.515, 761.8329, 860.0365, 232.6817, 200.4144, 2095.8588, 303.666, 1968.924, 3930.0548]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

