created: 20230531221142000
creator: Drevarr
modified: 20230705163532449
modifier: drevarr
tags: ChartData
title: 202305312211_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Be\u00eb", "Kary\u00edna", "Venomina The Siren", "Smol Gluvs", "No Reserv\u00e9", "Grasszanine", "Soxx", "Arriasa", "Black Raspberry Pie", "Cat Wigglebooty", "Gavann", "Kira Dragonblaze", "Miphest\u00f6", "Melody Phoenixstorm", "Oo Dads Mad", "Eibh\u00ebar", "Sister Elonith", "Tribal S", "Primal Clone", "Newtype Khan", "Tika Fiery", "Sygaldry Verdandi", "Kosair", "Sub Train", "Solus Sanctus", "Mistwalker Cael", "Tegan Parker", "Artakama Nahid", "Crusader Siolith", "Blanco Padre Guard", "Etchery Of Ascalon", "Drevarr Moonwillow", "Ryvalia Fazebringer", "Johosh Of The North", "Belvyn Brightblade", "Cedryn X", "Bella Sassy", "Koralia Danai", "Legacy Of Mathus", "Mel E Tonin", "Zefirokai", "Mildly Ecstatic", "Brace Stonebrow", "Johnny London", "Tuandha Lan", "Puppy Sky", "Aarrii Shadeslayer", "Proteccdebussy", "Fiorela Marina", "Slingsshot"];
const professions = ["Scourge", "Vindicator", "Tempest", "Scourge", "Vindicator", "Spellbreaker", "Willbender", "Druid", "Chronomancer", "Scrapper", "Firebrand", "Dragonhunter", "Tempest", "Scrapper", "Spellbreaker", "Chronomancer", "Berserker", "Druid", "Chronomancer", "Spellbreaker", "Firebrand", "Firebrand", "Guardian", "Firebrand", "Firebrand", "Vindicator", "Tempest", "Tempest", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Chronomancer", "Tempest", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Dragonhunter", "Tempest", "Scourge", "Firebrand", "Druid", "Renegade", "Scourge", "Reaper", "Firebrand", "Reaper", "Untamed"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[355.6865, 318.9496, 23.5287, 394.5947, 2598.449, 0.0, 28.2717, 180.2398, 155.0472, 210.4695, 149.4113, 416.6795, 416.2491, 96.6308, 3.1579], [422.6024, 394.6715, 48.7159, 347.6753, 246.0439, 38.1837, 108.6413, 93.2542, 124.3133, 228.4013, 18.8672, 476.358, 329.4212, 268.0, 17.8416], [461.6662, 599.2519, 14.8718, 345.7854, 199.5974, 0.0, 25.6118, 88.6298, 93.5983, 136.55, 133.5161, 273.2278, 381.435, 113.6667, 170.7536], [381.1368, 355.1547, 61.4253, 367.1049, 272.0353, 0.5455, 0.0, 53.6742, 95.5363, 134.625, 138.5, 358.6511, 410.9759, 0.0, 19.75], [345.1598, 324.9748, 20.2273, 347.5285, 191.0724, 77.5714, 20.6, 115.5828, 101.7903, 302.8531, 54.5952, 344.6337, 495.9789, 0.0, 72.292], [304.3099, 295.7482, 41.7442, 386.3047, 220.307, 38.9808, 128.7159, 127.733, 49.8956, 127.6791, 104.0, 304.8739, 418.2995, 24.6486, 1118.4857], [396.7512, 167.2724, 16.9412, 350.2089, 278.5205, 41.46, 84.5714, 107.9209, 182.9719, 114.0972, 107.5476, 259.0886, 287.0552, 0.0, 49.0175], [317.6697, 305.3443, 92.7, 356.1101, 100.3546, 9.6809, 29.3953, 90.1105, 789.7835, 273.8148, 48.3197, 365.2936, 360.2317, 28.4737, 0.0], [405.7679, 239.0327, 24.0972, 325.042, 263.3472, 35.902, 112.1124, 87.9138, 105.5663, 104.8805, 57.392, 341.458, 376.0, 3.7692, 8.8736], [342.8463, 234.982, 22.4, 327.6567, 196.8462, 129.9388, 15.1954, 58.2941, 156.3787, 199.9379, 43.8537, 449.7191, 293.737, 36.8974, 0.0], [321.7018, 237.2652, 48.3429, 373.6306, 126.2482, 148.275, 57.1628, 31.7045, 105.5469, 214.8063, 181.0163, 272.1646, 306.5336, 213.8378, 0.0], [468.4482, 390.2655, 31.4857, 446.1403], [361.3293, 184.4833, 30.8333, 297.1866, 248.0554, 39.4884, 2.2584, 57.5028, 110.4516, 280.6687, 102.7698, 359.0763, 377.2993, 0.0], [550.8488, 314.7778, 89.0111, 417.5255], [592.1659, 481.8957, 66.9529, 384.8639], [293.3575, 255.7127, 19.5873, 314.0076, 204.5597, 57.3043, 19.3111, 80.6536, 149.8675, 55.5975, 184.392, 332.9702, 248.4028, 22.439, 104.1667], [67.829, 411.5673, 39.2386, 440.8769, 462.641, 27.18, 81.1556, 138.7485, 195.5565], [334.9775, 145.2151, 51.0476, 284.6834, 192.7039, 155.7959, 19.9891, 102.7386, 115.5263, 123.2658, 48.3307, 314.0128, 276.0825, 0.0, 0.0], [264.003, 214.8175, 80.1978, 294.7596, 177.0833, 4.9608, 52.2584, 120.1356, 67.6227, 136.3778, 37.1094, 363.6695, 301.2778, 6.8413, 0.0], [319.3686, 205.1558, 41.1705, 215.9524, 158.3158, 19.3043, 19.3626, 41.7263, 238.6345, 155.8313, 39.871, 271.5702, 398.1024, 67.2344, 94.0708], [266.1179, 262.4409, 31.9195, 253.6816, 159.8552, 141.0976, 18.1236, 67.6595, 85.9798, 85.95, 48.8583, 361.6525, 306.3146, 272.4444, 30.025], [321.303, 99.4982, 26.541, 277.3147, 138.8052, 1.3846, 17.7582, 127.518, 125.9198, 130.9812, 20.3659, 245.7839, 368.094, 0.0], [348.1256, 291.5663, 115.25, 340.8947, 245.3383, 0.0], [303.0481, 191.036, 61.0667, 355.9968, 175.3373, 27.3636, 12.0879, 42.6488, 80.3489, 160.1083, 26.8629], [332.3545, 196.7607, 30.1222, 266.2612, 189.103, 23.68, 49.4835, 68.8976, 76.4355, 66.1588, 54.856, 218.5763, 222.2907, 0.0, 0.0], [264.0584, 217.4094, 44.1379, 245.0853, 119.8395, 0.0, 26.5495, 81.6034, 117.0526, 154.5096, 61.3629, 278.7215, 357.9965, 0.0, 0.0], [244.4284, 240.6691, 13.0125, 284.4291, 179.3819, 39.8077, 9.0, 64.7907, 44.0556, 150.9851, 28.9512, 238.8426, 269.5265, 0.0, 68.8235], [237.1631, 196.7491, 40.4505, 255.8306, 153.8651, 43.54, 27.8876, 60.2011, 100.7126, 100.646, 54.4715, 263.2827, 294.314, 14.027, 9.5098], [259.9636, 155.5125, 21.5393, 266.158, 145.655, 79.7059, 45.2297, 59.9884, 80.587, 133.6197, 90.032, 195.3846, 248.2782, 4.087, 0.0], [228.6484, 189.8732, 8.5977, 247.3531, 116.7754, 7.5417, 17.8372, 80.1243, 42.0202, 155.4364, 31.864, 255.4746, 280.7097, 0.0, 0.0], [331.4081, 130.6547, 61.2471, 299.9308, 96.6946, 162.5854, 28.4, 114.8909, 61.0208], [229.1206, 129.9319, 39.9375, 252.5646, 100.1085, 21.72, 2.5604, 76.2727, 66.3173, 117.354, 101.6694, 203.2746, 205.0857, 0.0, 0.0], [256.2192, 187.1575, 22.4471, 208.691, 134.8175, 23.566, 48.7303, 100.4278, 70.0964, 70.5238, 81.248, 198.8347, 254.5039, 11.3333, 74.0244], [248.9177, 180.6774, 30.0145, 217.09, 91.4862, 23.84, 33.527, 106.9318, 33.7189, 178.6593, 20.976, 262.3872, 268.5157, 0.1304, 22.6567], [372.321, 159.2764, 36.4943, 286.0196], [292.3245, 385.0776, 67.1461, 132.153, 100.0447, 334.5723, 133.6984, 505.6929, 368.7637, 63.4603, 0.0], [172.9286, 209.0643, 18.619, 203.7426, 54.5476, 18.2609, 7.5205, 69.3152, 65.8675, 53.7391, 43.912, 231.2712, 253.187, 0.087, 0.0], [196.0633, 105.8459, 25.4462, 209.3115, 45.9787, 17.8367, 23.0235, 60.1716, 22.1371, 0.0, 178.0231, 0.0, 0.0], [307.4725, 21.0612, 77.3258, 99.0056, 99.498, 268.0625, 77.8468, 304.5238, 453.825, 0.0952, 472.4271], [400.4286, 0.0, 891.1167, 94.8647, 123.1968, 175.75, 318.686, 327.0085, 428.2657, 118.4848, 402.4773], [65.6404, 152.4044, 309.7315, 699.6049, 2460.5714, 383.1917, 438.137, 10.5641, 0.0], [0.0, 238.5859, 33.58, 3.7582, 92.2235, 116.0081, 141.1366, 163.2031, 273.5761, 302.2534, 0.0, 112.1493], [150.0703, 40.7455, 12.7927, 62.3214, 79.74, 90.4419, 97.7823, 218.453, 283.1568, 4.2059, 16.4673], [396.9045, 201.0238, 1512.0405, 209.6356, 0.0, 0.0], [364.749, 388.8706, 0.0, 48.2642], [251.3185, 212.2439], [1.8136], [0.0], [0.0], [0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

