created: 20230424220408000
creator: Drevarr
modified: 20230705163526512
modifier: drevarr
tags: ChartData
title: 202304242204_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Kiloak", "Raziel Umbra", "Tika Rucola", "Zefirokai", "Sassy Daddy Demon", "Primal Clone", "Eibh\u00ebar", "Black Raspberry Pie", "Cat Wigglebooty", "High Sorcer Baradun", "Fribble Bibble", "Tegan Parker", "Mac Aaroni", "Tribal S", "Drevarr Moonwillow", "Arriasa", "Zadie Miststep"];
const professions = ["Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Tempest", "Vindicator", "Chronomancer", "Chronomancer", "Chronomancer", "Scrapper", "Tempest", "Scrapper", "Tempest", "Tempest", "Druid", "Scrapper", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0807, 0.02, 0.0758, 0.1546, 0.1607, 0.0, 0.0172, 0.2031, 0.169, 0.2267, 0.0111, 0.0843, 0.136], [0.0373, 0.06, 0.0455, 0.1753, 0.4286, 0.0, 0.3281, 0.0563, 0.3733, 0.0667, 0.2289, 0.08], [0.68, 0.2222, 0.5663, 0.408], [0.0766, 0.1, 0.0152, 0.0619, 0.2143, 0.0, 0.0517, 0.4062, 0.3239, 0.44, 0.0667, 0.494, 0.048], [0.3214, 0.0, 0.0, 0.6562, 0.0986, 0.52, 0.3889, 0.5663, 0.296], [0.1739, 0.02, 0.2576, 0.3918, 1.1429, 0.0, 0.0172, 0.8438, 0.2254, 0.6533, 0.2111], [0.1449, 0.0, 0.7424, 0.3918, 1.2143, 0.0, 0.0, 1.0938, 0.0141, 0.4667, 0.1778, 0.494, 0.344], [0.1636, 0.0, 0.5, 0.4433, 0.8214, 0.0, 0.069, 0.4062, 0.1831, 0.64, 0.3556, 0.8313, 0.328], [0.1698, 0.0, 0.3636, 0.3196, 0.625, 0.1034, 0.0, 0.8906, 0.5493, 0.88, 0.6556, 0.4096, 0.048], [0.236, 0.02, 0.5758, 0.5979, 1.25, 0.0, 0.1379, 0.9688, 0.3662, 0.8533, 0.2778, 0.1928, 0.0], [0.0373, 0.1, 0.6515, 0.5464, 0.9821, 0.1724, 0.0, 1.3594, 0.662, 0.8, 0.2111, 0.759, 0.432], [0.5155, 0.0, 0.3182, 0.5258, 0.9464, 0.0, 0.0, 0.9531, 0.5211, 0.4, 0.7333, 0.7229, 0.576], [0.619, 0.02, 0.4545, 0.9897, 1.75, 0.0, 0.0, 1.3281, 0.2394, 1.1867, 0.8667, 0.988, 0.848], [0.6625, 0.54, 1.0758, 1.0103, 1.9821, 0.0345, 0.1724, 1.3906, 0.493, 1.3067, 0.8333, 1.1807, 0.816], [0.7184, 0.02, 0.8485, 1.134, 2.7143, 0.0, 0.0517, 2.2812, 0.3239, 1.7867, 0.5778, 1.9398, 0.904], [0.735, 0.58, 0.8182, 1.0928, 2.0179, 0.7241, 0.3276, 1.4688, 0.7324, 1.4133, 0.7667, 1.7349, 1.152], [0.8012, 0.02, 1.0303, 0.9897, 1.5536, 0.0, 0.069, 1.3438, 0.662, 1.9067, 1.0556, 1.6627, 1.272], [0.9151, 0.02, 0.9242, 1.0206, 2.4821, 0.1379, 0.0345, 1.8125, 0.7606, 1.6, 0.8556, 1.4578, 1.072]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

