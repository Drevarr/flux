created: 20230607222341000
creator: Drevarr
modified: 20230705163534280
modifier: drevarr
tags: ChartData
title: 202306072223_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Newtype Khan", "Permanent Dawn", "Be\u00eb", "Uneeta Healah", "Kary\u00edna", "Cyclotechnist Farra", "Proteccdebussy", "Inedible Plant", "Xanvias Einzbern", "Tegan Parker", "Tootsie Pop Rocks", "Shaca Booey", "Smol Gluvs", "Etcherii", "Mistwalker Cael", "Artakama Nahid", "Johosh The Great", "Chrozz", "Rozaalyna", "Sygaldry Verdandi", "Drevarr Moonwillow", "Grasszanine", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Spellbreaker", "Weaver", "Reaper", "Scrapper", "Vindicator", "Scrapper", "Dragonhunter", "Vindicator", "Berserker", "Tempest", "Scrapper", "Berserker", "Reaper", "Firebrand", "Vindicator", "Tempest", "Firebrand", "Willbender", "Reaper", "Firebrand", "Scrapper", "Spellbreaker", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[263, 279, 248, 363, 313, 237, 309, 600, 488, 619, 429, 237, 3067, 583], [236, 651, 234, 330, 13153, 397, 488, 555, 362, 417, 237, 365, 7486, 3118], [588, 334, 2133, 315, 605, 707, 519, 730, 655, 890, 423, 4239, 6044, 855], [409, 155, 2937, 455, 303, 1567, 385, 385, 400, 319, 513, 300, 5264, 4473], [498, 452, 5937, 395, 24994, 6539, 648, 436, 588, 11526, 225, 335, 3763, 3836], [245, 735, 9248, 20472, 19158, 280, 197, 504, 396, 12325, 902, 529, 6555, 2191], [544, 842, 2628, 499, 19317, 297, 471, 384, 380, 253, 4910, 460], [323, 373, 313, 424, 544, 295, 583, 235, 5612], [363, 236, 253, 333, 292, 395, 149, 283, 374, 743, 638, 312, 3469, 3421], [285, 343, 222, 502, 234, 247, 1761, 359, 285, 307, 248, 295, 5562, 7790], [457, 266, 305, 558, 6445, 575, 1043, 361, 474, 612, 540, 253, 812, 563], [587, 490, 2871, 509, 302, 312, 433, 529, 260, 558, 216, 248, 10242, 3392], [495, 401, 2125, 463, 24509, 354, 151, 278, 491, 444, 1056, 292, 4237, 668], [332, 328, 2508, 1243, 19777, 372, 265, 878, 270, 10554, 233, 219, 7969, 4013], [399, 436, 255, 401, 216, 336, 513, 234, 294, 892, 582, 370, 5130], [383, 473, 3020, 8925, 260, 225, 310, 348, 816, 371, 327, 1314, 322], [295, 360, 251, 479, 292, 280, 220, 288, 258, 271, 399, 227, 1051, 1470], [207, 234, 257, 487, 248, 241, 329, 297, 298, 289, 237, 215, 4745, 287], [286, 705, 1899, 385, 26674, 260, 362, 315, 411, 259, 473, 194, 487, 398], [331, 399, 8254, 364, 283, 1175, 407, 265, 474, 247, 229, 189, 5555], [191, 489, 220, 451, 213, 324, 358, 298, 262, 578, 374, 188, 1181, 3068], [326, 235, 195, 396, 235, 232, 114, 293, 288, 235, 585, 231, 4385, 2399], [206, 375, 232, 415, 205, 224, 393, 261, 256, 316, 748, 202, 4127, 4453], [300, 362, 201, 254, 237, 174, 245, 217, 388, 195, 195, 255, 276, 1556]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

