created: 20230227222028000
creator: Drevarr
modified: 20230705163520430
modifier: drevarr
tags: ChartData
title: 202302272220_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Sygaldry Verdandi", "Kahless The Drunk", "Cat Wigglebooty", "Etchery Howls", "Tribal S", "Zadie Miststep", "Mac Aaroni", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Scrapper", "Druid", "Druid", "Tempest", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.7869, 0.0, 18.229, 3.2928, 46.6019, 16.3542, 34.6675, 530.5916, 0.0, 0.0, 82.9431, 6.1727, 61.273, 1789.4448, 76.0282], [87.121, 71.8437, 75.5183, 73.0874, 52.2884, 51.4022, 12.8929, 17.3725, 12.8625, 80.753, 28.0045, 82.9037, 797.7749, 38.2463, 3.7422, 134.1644, 90.725, 1228.0392, 82.0934], [78.6408, 209.0428, 105.1109, 78.9939, 133.4659, 26.4038, 12.7015, 13.3319, 28.1064, 77.1956, 20.6035, 155.8618, 792.7416, 23.3411, 17.5997, 142.7836, 0.0, 75.0515, 1430.532, 30.4262], [124.6656, 97.9151, 134.2213, 38.4121, 0.0, 7.5341, 11.2065, 17.3725, 23.2848, 212.3768, 56.9968, 55.9085, 1525.9227, 0.0, 0.0, 85.5572, 0.0, 61.194, 1599.4656], [360.0082, 393.194, 168.3944, 174.6625, 327.1458, 22.464, 0.0, 13.8905, 0.0, 473.905, 2.5715, 608.1024, 1565.3501, 445.4486, 54.1598, 750.7976, 180.0324], [148.8014, 137.789, 111.8008, 2.6117, 23.1936, 96.4685, 0.0, 0.0, 0.0, 121.6631, 32.1283, 496.0723, 1592.1942, 310.9966, 0.0, 99.1107, 45.2836, 3042.5112, 2.1715], [94.6589, 118.7958, 60.5713, 46.207, 150.0719, 81.1699, 3.8392, 2.5137, 20.2272, 117.6907, 4.657, 121.3363, 1883.2856, 148.2643, 88.1118, 243.3893, 41.9895, 143.7467, 3291.0768, 124.201], [391.537, 652.4921, 262.5964, 0.0, 57.136, 111.0272, 42.4858, 0.0, 68.9312, 12.2451, 69.1914, 5.1901, 0.0, 1066.6359, 156.307, 23.6099, 377.4123, 77.3226, 334.593, 4575.996, 223.3171], [308.5474, 759.2549, 354.026, 0.0, 303.3992, 293.4191, 216.3686, 47.254, 39.3441, 5.9829, 333.6248, 60.4464, 457.9238, 4808.4602, 245.3005, 0.0, 644.8225, 69.5826, 159.6176, 4588.5096], [645.9418, 1313.0061, 595.2868, 291.8675, 352.6039, 242.9107, 25.6901, 111.9621, 140.5908, 472.0077, 109.1328, 777.888, 6669.096, 582.5232, 212.7838, 1171.5183, 379.8405, 815.1041, 9405.6768, 337.3843]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

