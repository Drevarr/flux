created: 20230625215204000
creator: Drevarr
modified: 20230705163536519
modifier: drevarr
tags: ChartData
title: 202306252152_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Eibh\u00ebar", "Black Raspberry Pie", "Miphest\u00f6", "Primal Clone", "Fribble Bibble", "Drumina", "High Sorcer Baradun", "Arriasa", "Drevarr Moonwillow", "Elon The Mender", "Tribal S"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Scrapper", "Druid", "Tempest", "Druid", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.1583, 0.2714, 0.3913, 0.1209, 0.087, 0.15, 0.0833, 0.0476, 0.005, 0.5161, 0.2316, 0.3924, 0.0, 0.0, 0.1479, 0.026, 0.0], [0.0, 0.1167, 0.2286, 0.5797, 0.1429, 0.0, 0.275, 0.0, 0.2381, 0.36, 0.0161, 0.0737, 0.3544, 0.0, 0.0, 0.1831, 0.0, 0.0], [0.0, 0.075, 0.3714, 0.5725, 0.4725, 0.65, 0.0833, 0.3175, 0.27, 0.129, 0.0737, 0.2532, 0.0278, 0.0, 0.2676], [0.0, 0.3833, 0.2286, 0.3696, 0.6154, 0.0, 0.5, 0.0, 0.9683, 0.44, 0.7097, 0.0, 0.3165, 0.0, 0.0093, 0.2394, 0.0195, 0.0], [0.1047, 0.4417, 0.6, 0.3986, 0.6154, 0.0, 0.625, 0.2083, 0.4127, 0.735, 0.0484, 0.0, 0.0253, 0.1667, 0.0935, 0.338, 0.1169, 0.0417], [0.0, 0.125, 0.4857, 0.7464, 0.956, 0.0435, 1.05, 0.2083, 0.5079, 0.34, 1.0161, 0.2526, 0.3544, 0.0, 0.0093, 0.5352, 0.0584, 0.0], [0.0814, 0.2583, 0.2714, 0.8913, 0.8352, 1.15, 0.0, 0.8413, 0.67, 0.3226, 0.1684, 0.1519, 0.0556, 0.0, 0.4225, 0.0], [0.0233, 0.725, 0.8429, 1.4058, 1.1319, 0.0, 0.975, 0.25, 0.8254, 1.25, 1.1452, 0.6076, 0.0, 0.0187, 0.5704, 0.2078, 0.1944], [0.0465, 0.8, 0.9571, 1.7754, 1.0769, 1.7391, 1.775, 1.0417, 0.873, 0.855, 0.9194, 0.3684, 0.6709, 0.1389, 0.1495, 0.6268, 0.4286, 0.2083], [0.2093, 1.0167, 1.1, 1.6957, 1.5055, 0.1304, 3.5, 0.4167, 1.0476, 1.22, 0.6613, 0.2842, 1.0, 0.1389, 0.0187, 1.1549, 0.1299, 0.0833], [0.1163, 0.9583, 0.8857, 1.913, 1.3626, 2.25, 1.0833, 1.7143, 1.685, 1.8548, 0.5474, 1.0, 0.0556, 0.028, 0.7042, 0.1364, 0.125]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

