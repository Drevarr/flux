created: 20230320222849000
creator: Drevarr
modified: 20230705163522708
modifier: drevarr
tags: ChartData
title: 202303202228_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Misaki Amakase", "Bella Sassy", "Johosh The Great", "Cat Wigglebooty", "Stoic Rapidfire", "Zadie Miststep", "Fribble Bibble", "\u00c1rkantor", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Firebrand", "Firebrand", "Scrapper", "Druid", "Tempest", "Scrapper", "Vindicator", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[76.1838, 0.0, 23.6174, 268.1958, 502.0206, 46.9354, 31.8938, 164.8387, 122.2496, 5.867, 484.0214, 85.0239, 167.5197, 0.0, 85.3151, 154.154], [5.2931, 20.1247, 43.7184, 105.0795, 76.1593, 43.2502, 252.2325, 465.8472, 295.3833, 7.8166, 4.9807, 55.309, 79.5238, 116.27, 12.0434, 8.5995, 136.5004, 18.4736, 71.502, 349.8509, 21.9429, 25.0527, 75.7293, 117.6252, 19.1083], [46.9146, 54.5173, 40.896, 52.0125, 108.8799, 64.8359, 53.2405, 673.92, 413.2498, 17.1666, 60.1372, 5.4734, 88.3661, 90.4913, 49.9075, 32.886, 150.8823, 34.408, 46.8332, 270.8597, 14.5125, 28.4283, 51.531, 18.363], [84.7661, 101.2295, 35.4528, 18.582, 36.8154, 420.567, 120.7612, 1766.5128, 238.3628, 55.9504, 0.0, 328.233, 586.5323, 23.3129], [222.0445, 133.6262, 79.8912, 228.5985, 58.0819, 71.1777, 466.3585, 766.584, 968.8717, 60.588, 113.3149, 66.0744, 151.1629, 340.7043, 0.0, 845.3834, 29.8448, 51.1905, 1499.917, 68.886, 63.4859, 15.0189, 526.5128, 76.3994], [106.0909, 47.2349, 0.0, 269.838, 95.9351, 134.0048, 107.9555, 2677.1472, 1071.7956, 96.0058, 0.0, 0.0, 172.1139, 863.9858, 0.0, 63.8347, 163.1367, 129.7568, 107.4589, 1021.1616, 54.18, 26.2322, 0.0, 50.2339, 18.9728], [230.1174, 109.296, 51.7248, 81.681, 46.3259, 75.6682, 54.5598, 4785.6744, 712.817, 223.091, 0.0, 0.0, 470.441, 1135.7254, 29.8764, 344.547, 242.0244, 245.9344, 110.9242, 1038.3336, 217.2231, 232.7951], [80.9962, 91.5948, 113.1264, 254.562, 121.3907, 210.7365, 317.5025, 3743.2044, 690.9412, 220.3982, 169.2428, 118.5257, 344.7347, 1084.5666, 205.3267, 120.8655, 874.4025, 199.2352, 198.7578, 1642.1011, 168.8481, 153.4479, 582.1121, 137.6206], [28.065, 0.0, 208.1088, 264.366, 94.2557, 0.0, 312.225, 2590.38, 894.996, 15.7828, 28.6767, 119.8109, 699.7197, 1061.5783, 347.7118, 52.353, 769.8997, 480.8288, 444.7262, 2062.0138, 377.4798, 139.4574, 103.1283, 666.8966, 91.5438], [317.0541, 180.4928, 342.6624, 364.8, 247.8008, 373.6535, 780.9894, 7062.6816, 621.0103, 304.062, 392.1832, 140.5706, 641.7664, 2012.3347, 339.755, 519.5137, 1122.7243, 613.7504, 331.366, 3049.9762, 468.1152, 454.6093, 154.9107, 521.4422, 467.3407]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

