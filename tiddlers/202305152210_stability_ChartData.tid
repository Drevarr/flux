created: 20230515221048000
creator: Drevarr
modified: 20230705163530349
modifier: drevarr
tags: ChartData
title: 202305152210_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Husky Guard", "Newtype Khan", "Jeckyll Mbs", "Domitia Gravestorm", "Arriasa", "Etcherii", "Klenga", "Aira Draugr", "Xanvias Einzbern", "Mistwalker Caelon", "No Reserv\u00e9", "Evan Nightroad", "Ark Darkness", "Gavann", "Venom The Ferocious", "Sub Train", "Ryvalia Fazebringer", "Sygaldry Verdandi", "Koralia Danai", "Solus Sanctus", "Bella Sassy"];
const professions = ["Dragonhunter", "Spellbreaker", "Berserker", "Spellbreaker", "Druid", "Willbender", "Firebrand", "Herald", "Berserker", "Vindicator", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 2.8109, 3.0826, 0.0, 2.6499, 1.1894, 0.864, 0.0, 1.3743, 0.0, 0.63, 3.9195, 2.3213, 2.3664, 4.2941, 0.8093, 2.9723, 0.0, 2.6879, 0.0, 2.3929], [0.0, 0.0, 0.0, 0.0, 0.0, 1.4054, 5.4538, 0.0, 0.0, 3.8093, 1.1611, 0.0, 0.0, 3.8399, 0.0, 1.638, 2.7495, 1.741, 2.2848, 3.8851, 2.2109, 3.9048, 0.0, 1.1877, 0.0, 2.4633], [0.9563, 2.567, 0.0, 0.0, 0.9964, 3.2794, 5.4538, 0.0, 0.0, 3.9749, 0.8779, 1.0152, 0.1833, 1.7381, 0.0, 0.0, 1.3392, 3.3456, 3.4762, 0.5626, 0.8159, 0.4258, 2.3129, 1.0879, 3.4486], [1.184, 3.171, 0.0, 1.3824, 1.1957, 5.6218, 7.1136, 0.0, 0.0, 2.1531, 0.9346, 0.0648, 0.0, 1.9402, 0.0, 1.1088, 1.872, 1.6517, 1.8768, 2.7264, 1.6582, 2.6809, 0.0, 1.8128, 0.0, 2.956], [1.0246, 3.624, 0.9029, 0.54, 2.6903, 6.0902, 7.5878, 0.8197, 4.6374, 0.8779, 0.7992, 0.0, 1.0105, 0.0, 0.4536, 2.5155, 0.625, 2.6112, 1.6358, 0.5527, 1.457, 2.9098, 0.9376, 0.0, 1.3372], [0.0, 7.248, 1.9813, 0.1512, 13.3518, 23.8925], [10.5264, 9.9514, 1.9444, 10.0824, 2.271, 5.9384, 0.0, 7.601], [0.0, 5.889, 0.0, 0.0, 8.3698, 14.9914, 17.0726, 0.0, 0.0, 5.4655], [1.4117, 4.681, 0.0, 0.7992, 2.0924, 7.9642, 11.3818, 0.0, 1.2448, 3.9749, 1.0478, 0.5832, 0.0, 3.0719, 0.0, 1.3356, 2.808, 2.4998, 4.488, 4.2941, 1.3522, 3.2054, 0.0, 2.5004, 0.0, 2.8152], [2.0948, 0.302, 0.1003, 0.0, 1.4946, 8.9011, 8.7734, 0.0, 0.0, 1.1593, 1.6142, 2.6352, 0.0, 3.557, 0.0, 1.2348, 5.733, 1.116, 7.9152, 8.1792, 0.0, 6.0611, 0.0, 1.8128, 0.0, 3.0263], [1.1157, 4.077, 0.0, 0.0, 0.0, 9.8381, 27.5059, 0.8395, 0.0, 1.8218, 0.0, 0.0, 0.0, 2.3444, 0.1297, 0.2772, 7.254, 3.4373, 5.6304, 1.2269, 0.1382, 0.8159, 0.0, 0.0, 0.0, 0.0704], [0.0, 8.305, 0.0, 0.0, 2.491, 5.6218, 36.5165, 1.2593, 0.0, 2.8155, 4.8994, 3.24, 0.0, 1.2934, 1.8161], [0.0, 2.718, 1.1035, 0.0, 0.3986, 12.8832, 33.4339, 0.0, 6.1279, 2.0674, 5.9832, 0.0, 10.9538, 4.4105], [9.815, 2.2823, 0.8208, 7.8716, 6.793, 7.4529, 6.1454, 0.0, 0.1833, 6.0226, 2.108, 0.0, 4.1535, 2.857, 7.5888, 6.2707, 1.8556, 2.6226, 2.484, 0.0, 0.4549, 2.4633], [2.8454, 0.0, 0.0, 6.2936, 3.455, 3.6936, 0.0, 6.8714, 2.2052, 2.1924, 11.7, 4.2408, 7.8336, 7.9066, 2.0727, 8.0426, 0.0, 5.1883, 6.1934], [4.0075, 2.869, 0.0, 0.0, 8.9011, 22.2893, 0.0, 0.0, 4.4717, 5.2958, 4.5576, 0.0, 7.7202, 0.0, 2.4948, 12.9285, 4.464, 9.1392, 14.3136, 1.5989, 9.8493, 2.0581, 3.3755, 0.0, 6.1231], [2.5958, 4.53, 0.0, 0.0, 4.3842, 6.5587, 23.9491, 0.0, 3.9749, 0.0, 3.348, 0.0, 4.1633, 1.5242, 5.7204, 12.4605, 9.4637, 9.5472, 9.0653, 1.8852, 10.199, 1.9162, 4.6257, 1.8198, 11.9646], [6.1024, 8.607, 2.508, 2.7, 7.1741, 21.7843, 33.671, 0.1224, 0.0, 7.6185, 4.1347, 3.3912, 0.2749, 7.8819, 0.8432, 0.4536, 14.4495, 6.2942, 11.2608, 12.9504, 1.0462, 14.3952, 2.5549, 8.5014, 1.4439, 7.3899], [8.0833, 12.08, 0.627, 0.3024, 5.8788, 31.6224, 50.5066, 0.7696, 1.1233, 19.0463, 5.0126, 5.0112, 0.2566, 10.0646, 0.7459, 7.4592, 15.561, 8.928, 19.8288, 17.04, 2.0924, 14.7448, 1.4194, 13.1271, 13.8649], [13.439, 1.6302, 2.268, 14.8464, 34.199, 52.4035, 0.035, 0.4099, 11.5934, 4.4746, 8.8992, 0.5316, 12.8131, 4.9618, 5.1156, 17.199, 11.0261, 15.8304, 18.1306, 5.4384, 13.5792, 0.1419, 14.5023, 12.3869], [7.2864, 16.61, 1.5299, 4.3416, 24.3122, 46.3795, 44.5786, 2.5502, 18.2182, 8.4677, 4.6656, 3.5377, 10.9942, 5.1888, 6.3756, 15.5025, 8.6155, 18.1968, 14.9952, 2.4971, 14.6283, 7.5938, 6.9386, 4.1142, 3.4486]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

