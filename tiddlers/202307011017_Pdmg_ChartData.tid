created: 20230701101710000
creator: Drevarr
modified: 20230705163540477
modifier: drevarr
tags: ChartData
title: 202307011017_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Fluffy No Care Bear", "Ryvalia Routbringer", "Govinda Ektar", "Grim Breacher", "F\u00f9gly", "Trodek", "Dizzy Bunnyhopper", "No Reserv\u00e9", "Atros Shroudkeeper", "Elonith Requiem", "Sister Elonith", "Legacy Of Mathus", "Latedoctor", "Charr Surethang"];
const professions = ["Berserker", "Berserker", "Vindicator", "Reaper", "Catalyst", "Scrapper", "Holosmith", "Vindicator", "Vindicator", "Scourge", "Berserker", "Berserker", "Reaper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[3763.4231, 656.5], [2035.0316], [342.2564, 62.1667, 693.8101, 102.3774, 0.0, 407.1915, 87.913, 315.0127, 138.4286, 175.6429, 88.4321, 19.5156, 352.4688], [804.4231, 1542.6667, 1456.8228], [557.5652, 1036.1943], [0.0, 1034.9787, 607.1522, 1195.5255, 0.0, 915.5714, 607.3086, 563.4651, 265.6719, 457.6094, 913.7583], [0.0, 1401.6975, 0.0, 1131.1358, 969.3023, 780.0, 353.4531, 918.575], [1445.3726, 963.381, 801.7284, 179.5349, 635.5, 671.7969, 1181.9667], [851.7174, 1919.7643, 444.4857, 688.5952, 902.8148, 621.6744, 813.5312, 1256.7812, 1332.2583], [1580.587, 1685.6401, 219.0571, 1117.0476, 1085.5062, 192.4186, 1209.9062, 1045.625, 1752.525], [67.8077, 94.963, 2902.9825, 2909.4359, 793.9722, 1325.7848, 1377.0094, 297.6054, 3375.7872], [398.0278, 91.6392, 736.0472, 177.9243, 2610.5532, 822.7174, 1990.3567, 0.0, 1606.6667, 988.0988, 561.5938, 1172.625, 1893.9417], [70.2404, 80.1852, 1207.6316, 1300.7308, 415.1389, 1825.6772, 745.6698, 118.8108, 793.4894, 606.413, 1470.2707, 177.5143, 476.2143, 641.037, 1136.7209, 677.2031, 1173.9688, 784.0333], [0.0, 83.9259, 2489.3333, 2385.0513, 893.2222, 2898.4114, 1290.3491, 128.7838, 4599.5745, 2483.8043, 2568.293, 0.0, 785.7619, 1521.2593, 1266.2344, 1642.5312, 2803.9167]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

