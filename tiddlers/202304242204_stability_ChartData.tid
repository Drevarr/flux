created: 20230424220408000
creator: Drevarr
modified: 20230705163526672
modifier: drevarr
tags: ChartData
title: 202304242204_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Smol Gluvs", "Smol Bee", "Arriasa", "Raziel Umbra", "Kmpek", "Solo Bloodborn", "Newtype Khan", "Grasszanine", "Tika Rucola", "Daddys Lil Orchid", "Blancooo Padreee", "Mistwalker Caelon", "Ryvalia Fazebringer", "Rudjulin", "Sub Train", "Gavann", "Xyntharos", "Zaylen Harker", "Sygaldry Verdandi", "Kiloak", "Bella Sassy", "Koralia Danai", "Johosh The Great"];
const professions = ["Scourge", "Vindicator", "Druid", "Chronomancer", "Vindicator", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Chronomancer", "Vindicator", "Spellbreaker", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.8924, 0.6451, 0.7088, 1.5869, 1.4438, 1.6358, 1.1393, 2.8224, 2.4817, 3.42], [10.4135, 0.0, 0.8375, 0.2677, 0.8333, 0.0, 0.0, 0.0922, 0.5794, 2.5358, 0.1323, 1.1836, 0.0], [6.3901, 0.8085, 0.8686, 0.7585, 0.457, 0.8723, 0.8352, 0.7066, 0.6475, 1.5068, 0.7497, 1.5272, 1.5], [5.9168, 3.1752, 6.2233, 3.96], [0.2231, 3.0912, 0.0, 0.0, 1.9661, 2.556, 2.5725, 4.2777, 2.329, 2.82], [9.7035, 0.0, 1.582, 1.1155, 1.9354, 0.0, 0.8352, 0.0, 0.9202, 0.0, 1.764, 1.6799, 3.24], [4.0234, 0.0, 0.4343, 1.5171, 3.0912, 1.731, 1.9488, 2.0582, 1.6018, 3.381, 0.3087, 1.6799, 2.76], [7.3368, 0.0, 2.8849, 1.9187, 2.688, 0.0, 0.0, 1.536, 1.6018, 0.9187, 1.4112, 1.6799, 3.96], [6.6268, 0.0245, 3.8465, 0.0, 2.9837, 0.0, 0.0, 3.3178, 0.0, 6.6518, 0.0, 3.5507, 5.94], [18.2236, 0.0, 0.8478, 0.0, 2.5897, 1.7818, 1.8432, 2.556, 1.3598, 1.1025, 0.0382, 3.6], [9.9401, 0.0, 2.4196, 1.5171, 1.6397, 0.0, 3.5357, 4.4237, 1.9426, 1.9478, 2.3814, 1.5654, 4.14], [15.8569, 0.0, 0.4653, 1.9633, 4.7846, 0.0, 2.4221, 1.6896, 0.0, 1.176, 2.6901, 3.6271, 1.26], [12.7802, 1.764, 2.1404, 3.0788, 3.2525, 0.0, 0.0, 1.4438, 2.0107, 4.6305, 1.3671, 3.3217, 3.42], [3.3062, 0.0, 3.7027, 6.2976, 2.4878, 4.9245, 4.7628, 5.6888, 8.28], [15.8569, 2.3765, 4.8391, 4.1943, 5.376, 0.0, 6.4867, 6.5434, 3.3058, 2.8665], [27.2171, 1.1025, 2.1404, 3.9245, 1.2267, 1.6982, 4.3315, 2.7605, 2.058, 3.8808, 2.6726, 0.42], [28.6371, 0.0, 0.3722, 5.399, 2.5805, 0.0, 1.392, 1.6896, 2.2493, 3.4545, 4.3659, 6.6433, 3.0], [24.8503, 0.0, 5.6456, 4.5959, 4.0051, 2.9032, 2.617, 5.5603, 4.7371, 5.6963, 5.2038, 6.4142, 6.3], [23.667, 2.45, 2.6367, 5.0421, 8.3328, 0.0, 0.2784, 5.5603, 3.1694, 7.6072, 4.8069, 9.6977, 5.94], [30.0571, 2.891, 9.9884, 9.2363, 8.279, 6.0691, 6.5741, 4.9075, 9.1875, 7.8939, 9.4686, 11.58], [36.2105, 2.6215, 7.6309, 8.9686, 6.9888, 3.8164, 1.392, 5.2224, 6.2026, 10.1798, 7.7616, 9.2777, 11.58], [40.7072, 0.0, 9.0889, 9.4148, 10.6445, 0.0, 5.5958, 8.9088, 4.8734, 7.4603, 7.5411, 10.8049, 12.06], [36.6838, 3.0135, 6.5762, 8.567, 8.6822, 3.6801, 4.5101, 6.912, 7.3613, 10.143, 10.9368, 13.0194, 11.76]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

