created: 20230626090515000
creator: Drevarr
modified: 20230705163539221
modifier: drevarr
tags: ChartData
title: 202306260905_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Geradenil", "Utopia Skye", "Yngvar The Burdened", "Urilstormwalker", "Illusive Heart", "Koralia Danai", "Drevarr Moonwillow", "Brace Stonebrow", "Traidoruns Maximus", "Gestern Yesteryear"];
const professions = ["Vindicator", "Tempest", "Scourge", "Firebrand", "Chronomancer", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[58.7541, 52.1986, 2.2579, 351.7688, 60.8062, 13.1498, 110.5566], [40.8229, 84.0678, 128.0208, 39.1899, 46.8803, 0.0, 389.2419], [38.2336, 30.7221, 7.652, 7.4612, 13.4095, 34.079, 39.7872, 65.6723, 28.5852, 64.5338, 146.3925, 38.4507, 0.0, 9.5539, 257.209, 31.2819, 4.4394, 29.4941], [297.255, 72.109, 1.5686, 651.7927, 151.4409, 23.4423, 47.6137], [0.0, 13.5072, 2.1566, 42.1736, 179.8322, 28.6383, 5.5827, 49.4802, 11.9519, 9.5634, 40.2111, 50.8939, 12.7896, 13.637, 50.2824, 112.6196, 229.3557, 38.9312, 16.9042, 4.0858, 303.2132, 82.2523, 16.6393, 49.5634], [110.7485, 94.5058, 108.9125, 38.376, 38.5192, 103.7126, 232.6534, 235.4548, 421.8967], [90.3501, 27.21, 52.274, 3.2029, 22.6496, 32.0332, 74.3062, 73.1752, 121.3902, 39.6519, 158.6382, 277.7658, 46.6928, 48.7379, 0.0, 479.9746], [22.2037, 98.777, 113.3765, 311.7338, 530.9913, 156.3531, 36.0237, 87.7978, 843.7029, 201.5325, 80.597, 107.7846], [33.319, 23.2964, 64.26, 391.264, 40.4814, 66.4264, 26.0753, 9.4612, 58.4545, 56.5245, 156.803, 103.6871, 139.5279, 268.861, 330.6012, 23.2478, 19.0026, 16.631, 599.6493, 123.6235, 31.6292, 91.9842], [48.0106, 48.9288, 63.4376, 112.0861, 607.7345, 91.4238, 79.0218, 121.1872, 35.4904, 26.1838, 125.4881, 157.1465, 167.8591, 144.4446, 172.5903, 372.9121, 436.0038, 191.7608, 0.0, 86.5574, 786.4567, 155.7335, 96.3798, 81.8202]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

