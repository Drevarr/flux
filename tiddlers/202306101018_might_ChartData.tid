created: 20230610101822000
creator: Drevarr
modified: 20230705163534668
modifier: drevarr
tags: ChartData
title: 202306101018_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Gamora Titus", "F\u00e2ble", "Gestern Yesteryear", "Drevarr Moonwillow", "Cat Noises", "Sakis Ranger", "Slang\u00efn", "Tomitigas", "Hit The Gas", "Aronorf Xideliesi"];
const professions = ["Chronomancer", "Firebrand", "Herald", "Firebrand", "Scrapper", "Virtuoso", "Druid", "Herald", "Tempest", "Spellbreaker", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1008, 0.0, 5.9544, 6.1758, 0.0, 0.0, 0.0, 11.4752, 0.0, 1.4076, 0.0, 13.8666, 0.0, 0.0, 0.0, 0.0], [6.171, 0.0, 0.0, 0.0, 6.4795, 0.7992, 4.7536, 0.3546, 0.0, 4.7232, 0.0, 0.4862, 4.732, 0.9883, 8.379, 4.892], [7.5672, 7.6321, 10.1771, 20.141, 15.5474], [0.0, 0.0, 0.0, 0.4805, 0.0, 0.0, 0.0, 4.9613, 0.0, 0.0, 1.3752, 1.2702, 5.3261, 5.0378, 0.0, 3.6229, 3.4628, 0.5712, 4.6881, 8.3658, 10.8706, 5.0445, 4.959, 1.5854], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.1668, 0.0, 1.4045, 12.0383, 12.7908, 3.4639, 22.2897, 6.5688, 3.8976], [5.184, 3.024, 2.8798, 5.3372, 4.4772, 1.6529, 6.783, 5.8913, 1.4994, 3.4164, 12.6919, 7.1222, 3.3062, 4.617], [1.1934, 2.5674, 0.0, 2.0011, 10.3518, 11.4917, 8.1432, 20.1508, 6.5205, 3.348, 3.1968, 0.0, 0.0, 3.1142], [0.8167, 0.9999, 0.363, 0.4752, 1.9688, 3.2152, 2.2771, 9.1406, 1.5757, 8.112, 7.452, 5.8035, 3.0167, 2.7227, 1.2269, 5.8414, 4.2878, 4.7634, 3.5587, 20.4848, 10.9063, 2.9299, 1.8981, 1.5215], [0.0, 0.0, 0.0, 0.169, 0.0, 0.0, 0.6107, 4.2648, 8.232, 0.0, 0.0, 21.7132, 0.0, 0.0, 30.9305, 23.5305, 18.462, 10.0499, 7.8788, 18.0106], [69.6482, 26.4716, 26.665, 29.0187], [9.2945, 14.8538, 12.721, 1.3138, 4.536, 10.4112, 8.1687, 6.7294, 8.3138, 11.3231, 20.6842, 3.4047, 8.6496, 12.0523, 16.8462, 11.4061, 0.9229, 6.5151, 3.2452]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

