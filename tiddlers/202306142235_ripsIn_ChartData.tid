created: 20230614223544000
creator: Drevarr
modified: 20230705163535279
modifier: drevarr
tags: ChartData
title: 202306142235_ripsIn_ChartData
type: text/vnd.tiddlywiki


const names = ["River No Hug", "Be\u00eb", "Elonith Requiem", "Smol Gluvs", "Hyde En Sikh", "Cedryn X", "No Reserv\u00e9", "Johosh The Mighty", "Zayde Sunsabre", "River No Hug", "Raelyn Sunray", "Rozaalyna", "Sub Train", "Fribble Bibble", "Bella Sassy", "Eibh\u00ebar", "Drevarr Moonwillow", "Elon The Archmagus", "Sygaldry Verdandi", "Tootsy Pop Star", "Jacob Pine", "Alarics Bane", "Tegan Parker", "Primal Clone"];
const professions = ["Reaper", "Reaper", "Reaper", "Reaper", "Chronomancer", "Berserker", "Vindicator", "Berserker", "Spellbreaker", "Scourge", "Firebrand", "Reaper", "Firebrand", "Scrapper", "Firebrand", "Chronomancer", "Scrapper", "Tempest", "Firebrand", "Reaper", "Reaper", "Reaper", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1077, 0.0328, 0.2778, 0.092], [0.3385, 0.1475, 0.2222, 0.0], [0.2, 0.2459, 0.3333, 0.0345], [0.0615, 0.0328, 0.2889, 0.3563], [0.0612, 0.383, 0.0545, 0.2164, 0.0875], [0.4082, 0.2766, 0.3091, 0.2105, 0.1625], [0.1837, 0.2979, 0.2, 0.3216, 0.2125], [0.2653, 0.234, 0.1455, 0.2749, 0.35], [0.1385, 0.5738, 0.5111, 0.2299], [0.2653, 0.1702, 0.0909, 0.4561, 0.1], [0.0408, 0.1489, 0.0545, 0.2222, 0.1125, 0.2, 0.2459, 0.2889, 0.0], [0.2857, 0.2128, 0.3091, 0.3041, 0.4375], [0.2041, 0.2128, 0.2182, 0.3392, 0.1125, 0.2462, 0.1311, 0.0667, 0.1724], [0.102, 0.1489, 0.1818, 0.2339, 0.2875, 0.2154, 0.1311, 0.4333], [0.1429, 0.4468, 0.0545, 0.3275, 0.1875, 0.1231, 0.0164, 0.3111, 0.092], [0.2041, 0.2553, 0.2545, 0.2865, 0.2125, 0.1846, 0.0984, 0.3889, 0.0805], [0.3061, 0.1064, 0.0545, 0.3743, 0.0875, 0.1538, 0.1311, 0.4556, 0.1954], [0.2245, 0.2128, 0.2182, 0.269, 0.3875, 0.3385, 0.2295, 0.1444, 0.2069], [0.5102, 0.3617, 0.0545, 0.193, 0.2625, 0.1692, 0.0, 0.5556, 0.2069], [0.4082, 0.1489, 0.3091, 0.5205, 0.2125, 0.3231, 0.2131, 0.0778, 0.069], [0.2245, 0.1915, 0.0727, 0.5906, 0.3375, 0.2154, 0.2623, 0.2333, 0.0345], [0.3265, 0.2128, 0.2, 0.3392, 0.3875, 0.3692, 0.3115, 0.6, 0.1149], [0.2449, 0.3191, 0.2727, 0.4094, 0.425, 0.4308, 0.1803, 0.4667, 0.0805], [0.4694, 0.3191, 0.4727, 0.462, 0.325, 0.3231, 0.3279, 0.3, 0.2529]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

