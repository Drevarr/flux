created: 20230224230708000
creator: Drevarr
modified: 20230705163520087
modifier: drevarr
tags: ChartData
title: 202302242307_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Arcanophage Farra", "Manuel Radiador", "Daring Deathblade", "Husky Guard", "Kosair", "Rozaalyna", "Dark Sidiuz", "Skye Nightroad", "Smol Gluvs", "Ace Hammers", "Burnhard Riemann", "Harry Callahann", "Nazhul Naxxremis", "Ez Mode Mathus", "Whose Guardian", "Lord Erin The Wise", "Panther B Me", "Rina Of Theros", "Viral Marketing", "Jeckyll Mbs", "Luck Engi", "Elonith Tenebris", "Sofya De Nova", "Smol Daddy Tika", "Sp\u00edcy Cheese", "Sassy Daddy Demon", "Mistwalker Caelon", "Xanvias Tseli"];
const professions = ["Spellbreaker", "Scrapper", "Scourge", "Dragonhunter", "Dragonhunter", "Scourge", "Scourge", "Scrapper", "Scourge", "Vindicator", "Berserker", "Scrapper", "Scourge", "Scourge", "Dragonhunter", "Weaver", "Scourge", "Scourge", "Willbender", "Berserker", "Scrapper", "Scourge", "Catalyst", "Berserker", "Berserker", "Vindicator", "Vindicator", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12052.0, 507.0, 0.0, 0.0, 15358.0, 11499.0, 13928.0, 3789.0, 0.0, 0.0, 0.0, 0.0, 4346.0, 5057.0, 1890.0, 6113.0, 2083.0, 11858.0, 3961.0, 24615.0, 6529.0, 17899.0, 4933.0, 0.0, 29146.0, 12225.0, 15938.0], [30467.0, 57754.0, 40703.0, 2276.0, 25359.0, 10330.0, 43551.0, 0.0], [589.0, 12777.0, 18536.0, 9076.0, 8759.0, 18370.0, 20407.0, 5571.0, 35030.0, 443.0, 765.0, 28934.0, 16109.0, 29955.0, 7295.0, 21965.0], [29659.0, 27151.0, 30216.0, 9641.0, 4048.0, 8122.0, 12413.0, 9907.0, 2472.0, 4000.0, 0.0, 0.0, 0.0, 13225.0, 2423.0, 22254.0, 8774.0, 4888.0, 8360.0, 19640.0, 6863.0, 27149.0, 0.0, 0.0, 34902.0, 21087.0, 21981.0, 5199.0, 3448.0], [45798.0, 90582.0, 0.0, 25940.0, 36518.0, 59857.0, 37735.0, 36485.0, 0.0, 0.0, 0.0, 0.0, 10193.0], [19490.0, 18246.0, 37705.0, 2055.0, 17332.0, 19402.0, 38287.0, 13503.0, 2498.0, 969.0, 0.0, 0.0, 11165.0, 2732.0, 12013.0, 19038.0, 31552.0, 31032.0, 16024.0, 23165.0, 3679.0, 2441.0, 34201.0], [11143.0, 27376.0, 4138.0, 5420.0, 16774.0, 7754.0, 32830.0, 16100.0, 0.0, 0.0, 0.0, 17245.0, 10219.0, 0.0, 16996.0, 0.0, 11989.0, 19480.0, 4601.0, 19077.0, 1538.0, 1369.0, 36080.0, 23337.0, 37847.0, 14531.0, 23504.0], [66519.0, 73995.0, 68873.0, 9997.0, 62269.0, 16732.0, 33240.0, 25269.0, 0.0, 8714.0, 0.0, 2687.0], [19073.0, 30007.0, 13729.0, 10974.0, 20459.0, 6386.0, 22477.0, 7207.0, 782.0, 5598.0, 0.0, 1161.0, 0.0, 14437.0, 2368.0, 10495.0, 8661.0, 12024.0, 11802.0, 30593.0, 11794.0, 28816.0, 1460.0, 0.0, 22869.0, 15557.0, 29901.0, 11181.0, 19813.0], [10538.0, 31131.0, 13199.0, 0.0, 28273.0, 4684.0, 51060.0, 8389.0, 0.0, 0.0, 4702.0, 0.0, 12777.0, 6435.0, 5148.0, 9981.0, 6758.0, 9529.0, 29331.0, 3515.0, 19898.0, 3152.0, 0.0, 48447.0, 28923.0, 16116.0, 17070.0, 4329.0], [1892.0, 38800.0, 20989.0, 0.0, 28903.0, 12569.0, 35155.0, 1928.0, 0.0, 0.0, 0.0, 0.0, 15978.0, 4179.0, 8814.0, 6084.0, 5578.0, 18747.0, 49604.0, 0.0, 51660.0, 2813.0, 0.0, 30599.0, 24989.0, 10140.0, 71156.0, 5374.0], [40448.0, 82074.0, 5075.0, 0.0, 89443.0, 87532.0, 117458.0, 60843.0, 22643.0], [21903.0, 38608.0, 29307.0, 3746.0, 30451.0, 22678.0, 73051.0, 24163.0, 3000.0, 159.0, 0.0, 0.0, 23293.0, 1242.0, 10698.0, 14059.0, 20618.0, 12200.0, 22906.0, 19459.0, 17959.0, 735.0, 1643.0, 44619.0, 26398.0, 74129.0, 8949.0, 10058.0], [32546.0, 39194.0, 41513.0, 2340.0, 31859.0, 9766.0, 46902.0, 13214.0, 2137.0, 0.0, 4657.0, 2613.0, 1584.0, 20705.0, 17390.0, 14168.0, 6318.0, 44010.0, 7497.0, 38516.0, 137.0, 0.0, 59592.0, 47718.0, 51964.0, 17025.0, 14638.0], [14520.0, 36964.0, 29033.0, 1755.0, 19544.0, 26466.0, 29098.0, 18397.0, 2413.0, 0.0, 0.0, 0.0, 5004.0, 33026.0, 8443.0, 7084.0, 30658.0, 22438.0, 17122.0, 20376.0, 15428.0, 33293.0, 3543.0, 0.0, 99080.0, 41595.0, 45893.0, 18094.0, 27092.0], [15970.0, 39583.0, 46824.0, 2826.0, 44225.0, 8597.0, 25241.0, 1693.0, 21294.0, 0.0, 0.0, 7582.0, 5229.0, 0.0, 19706.0, 3292.0, 32341.0, 27486.0, 52819.0, 37474.0, 97060.0, 6027.0, 2394.0, 60757.0, 12352.0, 20250.0, 23445.0, 9751.0], [43884.0, 51867.0, 36009.0, 6149.0, 23630.0, 20412.0, 44704.0, 14713.0, 3916.0, 576.0, 1382.0, 4711.0, 1819.0, 20860.0, 10281.0, 36372.0, 15540.0, 28488.0, 31106.0, 40742.0, 10907.0, 26055.0, 0.0, 1192.0, 82360.0, 950.0, 55982.0, 7732.0, 16235.0], [34416.0, 40918.0, 12591.0, 4825.0, 48981.0, 24448.0, 65259.0, 22155.0, 3059.0, 1455.0, 815.0, 3239.0, 0.0, 27017.0, 1567.0, 23132.0, 19208.0, 6462.0, 29205.0, 40943.0, 22435.0, 49237.0, 1144.0, 2282.0, 69091.0, 40606.0, 57216.0, 13264.0, 14390.0], [12429.0, 38997.0, 27379.0, 5215.0, 25716.0, 27408.0, 50381.0, 18177.0, 0.0, 1963.0, 0.0, 1052.0, 17619.0, 26054.0, 23448.0, 28369.0, 3076.0, 51265.0, 23515.0, 53523.0, 6638.0, 3276.0, 89604.0, 25773.0, 63323.0, 21073.0, 36290.0], [45781.0, 50248.0, 32011.0, 5114.0, 36076.0, 0.0, 29842.0, 21372.0, 14197.0, 6464.0, 0.0, 0.0, 0.0, 44143.0, 0.0, 19979.0, 29629.0, 55628.0, 40401.0, 49549.0, 12548.0, 63311.0, 0.0, 0.0, 60853.0, 41580.0, 48074.0, 15116.0, 34320.0], [53821.0, 549.0, 30556.0, 22765.0, 47041.0, 63563.0, 94672.0, 37549.0, 58845.0, 4266.0, 0.0, 115278.0, 65150.0, 96012.0, 52676.0, 24609.0], [27394.0, 38821.0, 43627.0, 13891.0, 50476.0, 35150.0, 54688.0, 30753.0, 3484.0, 3063.0, 1008.0, 3944.0, 0.0, 44734.0, 12526.0, 38188.0, 23087.0, 24045.0, 43007.0, 62243.0, 11846.0, 21186.0, 1706.0, 700.0, 71826.0, 22840.0, 100922.0, 14296.0, 39788.0], [36340.0, 47719.0, 89045.0, 18058.0, 27800.0, 16424.0, 94820.0, 17611.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24943.0, 10427.0, 12961.0, 4387.0, 64147.0, 42250.0, 36247.0, 32020.0, 27809.0, 1837.0, 0.0, 100488.0, 60563.0, 64503.0, 6277.0, 4499.0], [53740.0, 55351.0, 37992.0, 12740.0, 67402.0, 37651.0, 13665.0, 3479.0, 17079.0, 4019.0, 2855.0, 0.0, 0.0, 28952.0, 0.0, 37269.0, 54384.0, 0.0, 35040.0, 68886.0, 14782.0, 65804.0, 0.0, 3171.0, 57952.0, 50949.0, 88320.0, 41506.0, 34050.0], [29144.0, 30578.0, 703.0, 20778.0, 63390.0, 38150.0, 89710.0, 26672.0, 11236.0, 5807.0, 0.0, 0.0, 0.0, 42036.0, 1393.0, 53133.0, 0.0, 17866.0, 22185.0, 37668.0, 8256.0, 93461.0, 5280.0, 0.0, 96226.0, 100366.0, 44111.0, 62810.0], [27927.0, 74209.0, 57021.0, 12913.0, 93100.0, 24250.0, 52268.0, 19049.0, 0.0, 11420.0, 5165.0, 0.0, 86423.0, 0.0, 19840.0, 34470.0, 34477.0, 7033.0, 40268.0, 36125.0, 49279.0, 3566.0, 3843.0, 75720.0, 97332.0, 54121.0, 23937.0, 45584.0], [64746.0, 94367.0, 124932.0, 4043.0, 29616.0, 8372.0, 43747.0, 36709.0, 3782.0, 5065.0, 0.0, 0.0, 29949.0, 89712.0, 11001.0, 27617.0, 33135.0, 73452.0, 89569.0, 116406.0, 44897.0, 45454.0, 4486.0, 15099.0, 147714.0, 106033.0, 130541.0, 118766.0, 44075.0], [62280.0, 99568.0, 136149.0, 9221.0, 84594.0, 95790.0, 109119.0, 57901.0, 4501.0, 0.0, 2774.0, 8420.0, 0.0, 92606.0, 7388.0, 57003.0, 0.0, 66307.0, 166036.0, 176236.0, 80358.0, 105835.0, 2952.0, 2316.0, 232690.0, 85440.0, 140356.0, 55640.0, 39074.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

