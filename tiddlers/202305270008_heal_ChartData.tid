created: 20230527000807000
creator: Drevarr
modified: 20230705163531737
modifier: drevarr
tags: ChartData
title: 202305270008_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Artakama Nahid", "Tegan Parker", "Arriasa", "Elonith Primal", "Zaedy Sagemist", "Johosh Of The North", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Tempest", "Druid", "Tempest", "Vindicator", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[332.8021, 135.2251, 39.2097, 0.0, 10.625, 443.9072, 126.6216, 555.8816, 70.8931, 53.75, 75.422, 838.5319, 56.2292, 305.9062, 155.7312, 166.0942, 38.7407, 169.823, 32.5758, 52.3191, 158.2432, 164.7852, 146.725, 90.6355, 44.9878, 91.4938], [633.9323, 502.9241, 70.3226, 86.0938, 1121.2215, 413.0, 1139.4342, 119.2137, 14.7045, 142.3642, 1389.0851, 137.0417, 603.9102, 1056.4839, 261.2899, 84.7963, 563.067, 34.6061, 647.6396, 789.3838, 29.925, 592.514], [721.0495, 535.1152, 0.0, 8.1579, 0.0, 1358.346, 470.0541, 1310.8684, 321.1069, 22.0909, 235.3699, 1721.2234, 65.6667, 686.7656, 47.0645, 884.7634, 189.9565, 18.4259, 542.512, 128.2424, 911.1712, 948.9225, 645.757, 342.0793, 131.1728], [1442.8932, 998.5916, 114.4274, 84.2632, 2993.8586, 396.625, 619.8702, 176.6364, 281.1618, 2642.2872, 328.0625], [926.6927, 713.5236, 142.6048, 0.0, 2072.4852, 376.9189, 1761.7237, 642.4351, 39.0227, 207.3353, 769.8085, 358.6146, 781.1055, 104.4516, 1133.5376, 376.913, 130.2407, 595.7608, 249.4242, 217.3404, 895.3514, 937.2606, 106.325, 713.6262, 387.5976, 712.8519], [1772.2578, 895.2749, 2.5242, 281.0263, 3031.6392, 904.7432, 3031.4671, 844.7099, 157.0455, 517.5491, 3324.3085, 398.7917, 183.0156], [841.9974, 663.1099, 97.871, 5.0789, 235.4062, 2359.77, 400.8378, 1495.9079, 617.1527, 175.6416, 2273.7447, 238.6354, 1105.3594, 1477.172, 335.1594, 38.3148, 773.8804, 400.0, 247.3191, 1123.6126, 1014.1972, 403.85, 934.4019, 509.2561, 516.8025], [1224.2578, 892.3482, 120.9516, 0.0, 274.5, 2726.7194, 693.5, 1875.2961, 589.5496, 404.4318, 251.763, 2673.734, 344.3229, 1048.5078, 83.3226, 1477.2258, 251.3043, 75.4444, 906.9713, 487.7879, 3.1915, 770.0631, 1421.4542, 1153.425, 915.7477, 345.0366, 822.2716]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

