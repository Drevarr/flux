created: 20230508221143000
creator: Drevarr
modified: 20230705163529347
modifier: drevarr
tags: ChartData
title: 202305082211_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Nazhul Naxxremis", "Arriasa", "Tribal S", "Tika Rucola", "N\u00e9azoule", "Tootsy Pop Tart", "Grasszanine", "Newtype Khan", "Smol Gluvs", "Rozaalyna", "Primal Clone", "Be\u00eb", "Osh Kosh Johosh", "Eibh\u00ebar"];
const professions = ["Scourge", "Druid", "Druid", "Chronomancer", "Reaper", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Chronomancer", "Scourge", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1034, 0.1424, 0.1811, 0.0456, 0.2619], [0.0145, 0.0, 0.0, 0.0, 0.0132, 0.0824, 0.0581, 0.0238, 0.0374, 0.0815, 0.0769, 0.0326, 0.0392, 0.1071, 0.0237, 0.06, 0.025], [0.0, 0.0246, 0.0, 0.0099, 0.0568, 0.0539, 0.0, 0.0374, 0.1005, 0.0769, 0.0435, 0.0327, 0.0857, 0.0, 0.0514, 0.0267, 0.125], [0.087, 0.1475, 0.0, 0.2069, 0.0397, 0.1446, 0.0664, 0.119, 0.1589, 0.0145, 0.7308, 0.4348, 0.4379, 0.4857, 0.0204, 0.3953, 0.1333, 0.3625], [0.0, 0.082, 0.0, 0.0397, 0.1081, 0.0705, 0.1215, 0.077, 0.3077, 0.2391, 0.2876, 0.55, 0.0, 0.4783, 0.3467, 0.6875], [0.0, 0.123, 0.0303, 0.0345, 0.053, 0.077, 0.0207, 0.0, 0.028, 0.1449, 0.75, 0.2826, 0.2484, 0.7071, 0.3518, 0.28, 0.575], [0.0, 0.0574, 0.0, 0.0714, 0.0467, 0.115, 0.9038, 1.0761, 0.2941, 0.7, 0.0, 0.4743, 0.4733, 0.75], [0.0435, 0.0492, 0.1212, 0.4138, 0.053, 0.1176, 0.0207, 0.0238, 0.0748, 0.1422, 0.8846, 0.2935, 0.268, 0.4214, 0.0, 0.3755, 0.5467, 0.85], [0.029, 0.0328, 0.0303, 0.1034, 0.0695, 0.1203, 0.0332, 0.0, 0.0935, 0.1268, 0.6154, 0.9674, 0.4837, 0.4643, 0.0612, 0.5059, 0.4067, 0.575], [0.0145, 0.0738, 0.0, 0.069, 0.0132, 0.1378, 0.0249, 0.0238, 0.0654, 0.1078, 0.7692, 1.0109, 0.2092, 0.6714, 0.0612, 0.6364, 0.3333, 1.3875], [0.087, 0.1803, 0.0303, 0.0, 0.0265, 0.1892, 0.083, 0.4766, 0.1576, 0.7692, 0.6848, 0.634, 0.7071, 0.0, 0.4506, 0.48, 0.7875], [0.1304, 0.2049, 0.0, 0.1379, 0.1159, 0.2203, 0.0332, 0.0, 0.0561, 0.2156, 0.8846, 1.1522, 0.7778, 1.0071, 0.0204, 0.7233, 0.7133, 1.2125], [0.4638, 0.1967, 0.303, 0.6552, 0.1093, 0.3541, 0.2075, 0.2143, 0.3364, 0.2437, 1.1154, 1.0217, 0.6275, 0.6, 0.0408, 0.5336, 0.8, 1.0], [0.4203, 0.2459, 0.0, 0.069, 0.1921, 0.3284, 0.083, 0.2143, 0.3271, 0.3025, 1.4615, 1.0543, 0.7647, 1.4286, 0.0204, 0.8893, 0.6467, 1.075]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

