created: 20230520000848000
creator: Drevarr
modified: 20230705163530622
modifier: drevarr
tags: ChartData
title: 202305200008_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Drevarr Moonwillow", "Soxxdodendron", "Primal Clone", "High Sorcer Baradun", "Tegan Parker", "Venomina The Siren", "Artakama Nahid", "Miphest\u00f6", "Black Raspberry Pie"];
const professions = ["Chronomancer", "Scrapper", "Willbender", "Chronomancer", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 219.051, 0.0, 0.0, 0.0, 34.8577, 50.5692, 28.263, 9.4301, 0.0, 71.6725, 61.9344, 39.0014, 0.0, 0.0, 71.4067, 110.3514, 0.0, 0.0, 0.0, 0.0, 30.4176, 54.4918, 0.0, 45.2088, 35.7273, 32.775], [18.3645, 448.8624, 40.955, 90.816, 2.7846, 25.4826, 0.0, 27.3239, 21.2678, 0.0, 49.298, 49.104, 22.7894, 33.4954, 0.0, 63.698, 16.0877, 17.9352, 0.0, 0.0, 17.7566, 30.0001, 21.6209, 0.0, 57.1099, 16.8063, 30.3628], [35.5365, 273.2373, 76.8978, 85.4806, 15.4791, 63.2346, 7.986, 24.1935, 62.6666, 49.8658, 16.0613, 27.0864, 63.4584, 55.487, 0.0, 51.3912, 45.5818, 8.037, 0.0, 0.0, 60.5598, 16.06, 135.8779, 0.0, 15.997, 84.9442, 0.0], [66.0645, 794.7324, 42.3259, 116.9256, 0.0, 101.5529, 0.0, 112.605, 95.6384, 34.0179, 67.6804, 101.376, 172.0325, 66.3062, 0.0, 159.448, 121.8307, 48.8142, 0.0, 0.0, 0.0, 64.5991, 19.6248, 104.7144, 102.1289, 70.6367], [229.1508, 1399.2363, 34.9146, 249.744, 34.9713, 105.8314, 42.8868, 87.3382, 81.1589, 0.0, 266.8222, 74.3688], [0.0, 1106.0154, 0.0, 202.5197, 37.3628, 40.0171, 0.0, 46.5088, 62.7334, 142.4678, 85.9698, 153.3312, 168.1416, 42.769, 0.0, 107.9891, 101.9724, 40.7772, 0.0, 0.0, 42.0675, 30.257, 152.8407, 0.0, 171.948, 36.2838, 17.4101], [81.3285, 1445.3523, 48.1736, 385.6274, 0.0, 176.1131, 35.9436, 6.2161, 102.8949, 42.0029, 348.0572, 371.448, 294.5952, 73.2614, 0.0, 130.439, 256.0622, 37.9854, 0.0, 0.0, 51.2301, 38.6082, 189.8424, 39.2779, 216.6158, 71.4323, 86.526], [150.7797, 1390.7817, 51.4294, 448.9716, 45.6674, 225.2536, 36.5244, 157.8616, 145.5309, 135.4198, 389.5566, 334.7784, 370.7453, 43.2547, 64.9305, 131.859, 301.1413, 151.1379, 42.1281, 32.5706, 53.4156, 347.1655, 70.7371, 280.5264, 109.2076, 153.9114], [191.1816, 2573.6571, 89.964, 507.775, 42.0475, 133.7679, 63.5976, 99.3678, 95.6384, 85.7984, 281.8622, 504.7416, 544.6306, 54.5597, 51.2065, 76.9516, 360.8835, 48.7296, 41.0508, 97.2101, 3.469], [242.0298, 1678.2381, 127.8131, 371.2104, 82.4242, 181.713, 35.2308, 140.9574, 139.1104, 143.1604, 282.0479, 381.0312, 164.8066, 155.4432, 76.4925, 157.6222, 356.2751, 204.3513, 35.2674, 0.0, 90.0874, 114.9254, 406.3155, 34.0134, 307.5744, 139.637, 84.4284]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

