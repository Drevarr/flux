created: 20230405220700000
creator: Drevarr
modified: 20230705163524552
modifier: drevarr
tags: ChartData
title: 202304052207_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Kiloak", "Sygaldry Verdandi", "Raelyn Sunray", "Sister Elon\u00edth", "Solus Sanctus", "Koralia Danai", "Johosh The Great", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[64.9256, 51.9147, 427.3315, 49.4252, 0.0, 57.4094, 141.705, 37.193, 140.212], [0.0, 0.0, 71.3575, 284.9497, 54.0575, 40.0347, 0.0, 67.4544, 0.0, 29.8136, 240.0097, 133.5145, 33.7709, 110.2988, 48.2513, 0.0, 101.1528, 224.7523, 58.311, 113.4414, 81.4176, 91.8568, 154.9008], [24.6254, 0.0, 0.0, 446.7811, 0.0, 0.0, 25.3274, 0.0, 39.6774, 39.9213, 39.7601, 23.7048, 409.6085, 116.7681, 40.04, 297.4222, 37.6992, 0.0, 488.9808, 208.7678, 48.754, 102.951, 61.1296, 42.0857, 241.8372], [69.6762, 32.8557, 71.0889, 278.1563, 75.6474, 34.3379, 80.1877, 63.0552, 16.5267, 66.1716, 22.6814, 235.8378, 141.5071, 66.7867, 431.9308, 73.1069, 87.5336, 472.0464, 335.0295, 55.7414, 164.3868, 37.9736, 0.0, 305.8956], [560.1361, 470.7261, 125.4282, 409.9934, 102.0835, 371.4282, 979.02, 901.4312, 92.0759, 396.6264, 279.2524, 215.3502, 604.6488], [125.9955, 12.6526, 130.3911, 816.4154, 218.0292, 0.0, 0.0, 42.021, 209.5824, 0.0, 167.5584, 17.8143, 261.5501, 297.6292, 155.9272, 425.638, 17.4821, 411.0502, 612.9648, 651.4911, 59.0323, 495.3924, 101.4932, 0.0, 531.216], [112.7763, 104.1652, 790.2655, 159.8978, 0.0, 47.4536, 171.4747, 87.561, 0.0, 158.1313, 622.2883, 500.3368, 136.1818, 396.6212, 50.8015, 220.545, 901.6056, 875.1132, 182.4162, 273.8664, 286.9002, 80.0128, 414.036], [88.4263, 201.3898, 221.9638, 661.3774, 82.4925, 0.0, 58.7168, 104.6178, 211.2744, 75.7658, 76.144, 11.8643, 590.6162, 425.8914, 229.2576, 336.8396, 65.8997, 408.9209, 1330.4088, 845.8889, 130.2587, 278.6652, 249.6701, 190.2673, 733.1004], [148.8308, 110.7392, 80.3569, 961.1237, 74.6755, 53.8463, 88.1197, 259.8926, 258.5376, 230.6214, 88.5577, 626.2898, 658.438, 152.0605, 504.5602, 177.408, 344.5065, 1147.3056, 734.8045, 109.0711, 456.6114, 301.7179, 108.5963, 816.912]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

