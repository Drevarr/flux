created: 20230603000934000
creator: Drevarr
modified: 20230705163533167
modifier: drevarr
tags: ChartData
title: 202306030009_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Sumatra Satyricon", "A Girl Named Jeff", "Husky Guard", "Vdddzz", "Latedoctor", "Dargon Spiritwalker", "Newtype Khan", "Wild Doggy", "Morv\u00e4rth", "Morv\u00e4rth", "Smol Gluvs", "Melli Dragonswrath", "P\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6\u0153\u00e6", "The Fancy Cheese", "Sureting", "Xyntharos", "Duke Silvver", "Kary\u00edna", "Lord Erin The Wise", "Be\u00eb", "Mistwalker Cael", "Xanvias Tsoli", "Cyclotechnist Farra"];
const professions = ["Soulbeast", "Spellbreaker", "Dragonhunter", "Soulbeast", "Reaper", "Scourge", "Spellbreaker", "Dragonhunter", "Reaper", "Scourge", "Scourge", "Berserker", "Herald", "Scrapper", "Reaper", "Vindicator", "Vindicator", "Vindicator", "Weaver", "Scourge", "Vindicator", "Holosmith", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[118.617, 235.2222, 360.8235, 260.8753, 42.0167, 356.5238, 88.2373, 135.3899, 462.8103, 428.8227, 174.9634, 0.0, 0.0, 112.9771], [75.9286, 260.68, 497.4974, 519.3826, 833.7778, 38.7901, 221.2868, 0.0, 240.0593, 145.5478], [52.1702, 284.037, 95.6471, 532.5173, 17.7167, 38.0238, 1266.6667, 250.9661, 347.769, 45.9128, 55.5745, 32.3171, 719.7609, 66.4643], [0.0, 978.7987, 701.7481, 182.9877, 551.0368, 77.7073, 513.1185, 342.9375], [432.4, 750.9894, 345.3356, 283.637, 84.9877, 374.7574, 0.0, 594.2667, 273.9449], [146.1489, 1105.3086, 0.0, 376.5173, 30.7, 0.0, 723.9524, 718.0169, 428.9819, 412.1436, 283.1418], [0.0, 495.358, 67.2353, 257.4411, 0.0, 13.4286, 425.3333, 431.7627, 238.8375, 251.8769, 227.0213, 0.0, 175.0, 90.6429, 231.8971, 316.1481, 161.349, 291.3037, 0.0, 175.2206, 0.0, 64.0222, 121.125], [80.1667, 59.9762, 778.1429, 513.3898, 111.7653, 819.5333, 650.6312, 122.878, 138.9643, 464.92, 468.3651, 37.0671, 427.7333, 346.679, 206.0, 46.2439, 401.3704, 109.0809], [40.2553, 1539.4815, 625.2941, 602.739, 6.1333, 973.2542, 349.9206, 0.0, 501.363, 380.8493], [852.2872, 1152.695, 0.0, 2247.8478, 72.75, 348.1143, 714.3651, 992.1342, 949.5556, 79.3704, 565.9191], [44.234, 896.3704, 61.9412, 217.261, 6.6333, 0.0, 440.4762, 608.6271, 322.1408, 655.9487, 483.7376, 52.8049, 869.0652, 141.3214, 513.6914, 470.1217, 604.9597, 495.4741, 38.1111, 340.2794, 0.0, 337.9185, 183.0], [149.8723, 1455.9753, 537.4118, 297.0878, 79.95, 29.119, 602.0, 2440.8305, 402.1155, 57.1846, 1000.1277, 51.2561, 1034.3913, 252.3214, 1532.7829, 921.1958, 1213.745, 247.8074, 53.8395, 866.9632, 0.0, 786.0815, 250.1728], [332.4468, 1895.2099, 802.3235, 1684.2032, 35.35, 133.0952, 852.4946, 1639.3436, 2241.0709, 433.9878, 2171.8913], [0.0, 1809.6914, 0.0, 125.3788, 160.4833, 242.119, 768.381, 1933.3729, 602.1697, 598.9128, 715.6667, 293.0, 1114.7086, 1572.2646, 1528.6644, 1394.9704, 0.0, 725.4044, 0.0, 1008.0741, 306.8493], [174.9149, 814.0741, 0.0, 619.2864, 0.0, 90.619, 701.87, 415.841, 1454.1348, 1073.3043, 114.5714, 1437.08, 834.7778, 1424.1409, 1250.3778, 35.2469, 839.7206, 0.0, 819.0148, 329.9816], [37.4043, 1180.1111, 348.0, 169.2933, 0.0, 0.0, 597.2381, 1547.8814, 1428.7509, 560.441, 2024.7305, 97.7439, 2995.2174, 520.8929, 1002.2971, 2154.1323, 924.5302, 908.363], [176.8936, 1482.679, 698.3529, 341.6282, 90.2167, 654.5, 1458.8095, 908.661, 551.9386, 1736.3282, 2197.7234, 170.6951, 546.9348, 358.5714, 540.5657, 830.9788, 1200.7383, 1515.8741, 191.2222, 643.1176, 157.9634, 448.4963, 310.511], [150.5532, 1482.8765, 14.5294, 926.3187, 0.0, 86.4762, 1060.0, 1659.0508, 459.5776, 1770.1538, 1864.227, 258.8659, 95.8043, 577.6786, 755.9771, 1761.9683, 1134.7987, 1098.7852, 14.5926, 955.2206, 35.0244, 622.5111, 558.7463], [64.4043, 1279.4568, 1456.6471, 880.5543, 13.0167, 83.6667, 511.4286, 1211.8305, 1259.8339, 1788.5846, 1849.8156, 972.6463, 329.5217, 515.1071, 1254.0914, 1375.3228, 1776.2148, 1870.9556], [438.2128, 1515.7407, 685.3529, 1393.1594, 9.9833, 58.7143, 654.0952, 1757.7627, 1357.5668, 1673.1795, 1038.9149, 95.6098, 1227.1522, 210.3929, 1027.2593, 1336.2953, 821.2519, 130.4568, 1125.0074, 26.8293, 911.837, 561.3346], [170.7872, 1540.4074, 676.4118, 572.7159, 58.8667, 188.381, 314.2381, 1866.9492, 955.0469, 1640.1282, 1378.2553, 174.3537, 1593.2609, 1268.5357, 585.24, 1534.1534, 1906.0671, 2071.6667, 177.284, 983.4412, 214.1951, 926.1333, 408.1728], [95.2553, 2343.4815, 1144.6176, 315.2702, 0.0, 82.4524, 6405.2857, 1821.661, 467.8231, 1691.2974, 1349.3972, 0.0, 1277.6739, 532.2143, 1129.1371, 2117.455, 1832.255, 1424.963, 137.8148, 1080.9632, 0.0, 1190.6889, 707.4706], [0.0, 2137.8519, 673.7647, 422.4342, 0.0, 147.0, 1471.0, 1071.5932, 454.8592, 2047.2821, 2559.6099, 45.6098, 3459.2826, 699.6071, 1382.6857, 1840.2593, 2749.2215, 2061.9037, 174.5432, 1328.4191, 190.0244, 1194.4148, 736.5184]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

