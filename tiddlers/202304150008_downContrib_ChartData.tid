created: 20230415000841000
creator: Drevarr
modified: 20230705163525543
modifier: drevarr
tags: ChartData
title: 202304150008_downContrib_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Newtype Khan", "Corlyss Velaryonn", "Nazhul Naxxremis", "Arcanophage Farra", "Nazhul Naxxremis", "Rozaalyna", "Panther B Me", "Hauzzy", "Sassy Daddy Demon", "Rina Of Theros", "Smol Gluvs", "Lord Erin The Wise", "Inedible Plant", "Sheep Paws", "Kmpek", "Be\u00eb", "Paul Bjart Mist Cop", "Fruji", "Xyntharos", "The Fancy Cheese", "Kosa\u00edr", "Mistwalker Caelon", "Xanvias Einzbern"];
const professions = ["Spellbreaker", "Spellbreaker", "Vindicator", "Scourge", "Spellbreaker", "Reaper", "Reaper", "Scourge", "Spellbreaker", "Vindicator", "Scourge", "Reaper", "Weaver", "Vindicator", "Berserker", "Vindicator", "Reaper", "Scrapper", "Scrapper", "Vindicator", "Scrapper", "Scrapper", "Vindicator", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution in Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[14990.0, 4564.0, 5864.0, 3946.0, 25339.0, 0.0, 10531.0, 2783.0, 279.0, 5995.0, 60.0, 17462.0, 7009.0, 12448.0, 0.0, 4366.0, 8585.0, 6817.0, 6975.0, 1192.0, 4801.0], [15289.0, 2412.0, 6541.0, 10211.0, 21069.0, 0.0, 1783.0, 14158.0, 294.0, 9721.0, 0.0, 12012.0, 2368.0, 9249.0, 9204.0, 11846.0, 5792.0, 6232.0, 328.0, 1556.0, 9760.0], [12622.0, 10237.0, 4613.0, 2436.0, 1127.0, 9809.0, 592.0, 20178.0, 2602.0, 3984.0, 2256.0, 10952.0, 3645.0, 19055.0, 2812.0, 24343.0, 9462.0, 7856.0, 2180.0], [29233.0, 10631.0, 7669.0, 16573.0, 51306.0, 10499.0, 7799.0, 27333.0, 1188.0, 15228.0], [9070.0, 10579.0, 5459.0, 4137.0, 28016.0, 0.0, 1233.0, 7996.0, 3293.0, 8905.0, 0.0, 18953.0, 5108.0, 16561.0, 2809.0, 23485.0, 15227.0, 22449.0, 396.0, 0.0, 7996.0], [13135.0, 16673.0, 54933.0, 10692.0, 20956.0, 53925.0, 4128.0, 27927.0, 20214.0], [20697.0, 18829.0, 13097.0, 7892.0, 58066.0, 4158.0, 18616.0, 23274.0, 13184.0, 37048.0, 0.0, 35782.0, 4397.0, 33749.0], [14493.0, 14980.0, 4068.0, 16368.0, 32620.0, 9611.0, 19777.0, 33059.0, 15409.0, 19246.0, 494.0, 31362.0, 1409.0, 2669.0, 29874.0, 588.0, 2349.0, 19852.0, 19379.0, 6887.0], [20982.0, 3525.0, 20132.0, 23009.0, 31197.0, 876.0, 9524.0, 14800.0, 0.0, 22884.0, 0.0, 12349.0, 20438.0, 57022.0, 7273.0, 25301.0, 14991.0, 13265.0], [266.0, 176.0, 0.0, 0.0, 659.0, 0.0, 0.0, 181.0, 0.0, 558.0, 5308.0, 68528.0, 3944.0, 20947.0, 63192.0, 5462.0, 97392.0, 12689.0, 18424.0, 0.0, 6055.0, 20841.0], [22427.0, 9167.0, 9376.0, 33110.0, 46303.0, 0.0, 15146.0, 34944.0, 5961.0, 15507.0, 0.0, 19656.0, 620.0, 15127.0, 20646.0, 747.0, 7189.0, 19323.0, 21349.0, 6407.0, 13120.0, 25885.0], [10126.0, 24209.0, 22075.0, 81478.0, 24772.0, 9099.0, 39458.0, 7743.0, 3440.0, 3686.0, 11123.0, 11.0, 2288.0, 24529.0, 2107.0, 24041.0, 21148.0, 45512.0, 2404.0, 6209.0, 14271.0], [42612.0, 29314.0, 1974.0, 15748.0, 74090.0, 8959.0, 20126.0, 58839.0, 20337.0, 10366.0, 7251.0, 29762.0, 0.0, 6540.0, 0.0, 11602.0, 13593.0, 34670.0, 8855.0], [30614.0, 10456.0, 17824.0, 21987.0, 31201.0, 905.0, 12286.0, 17295.0, 9867.0, 37357.0, 12243.0, 21909.0, 0.0, 13422.0, 25404.0, 2311.0, 33916.0, 23838.0, 22213.0, 11403.0, 9615.0, 31070.0], [4061.0, 16932.0, 31628.0, 98501.0, 20484.0, 29300.0, 11551.0, 12930.0, 4901.0, 19117.0, 3155.0, 43400.0, 57159.0, 36547.0, 20887.0], [25299.0, 18806.0, 10924.0, 34220.0, 57613.0, 11889.0, 32173.0, 42180.0, 7253.0, 55760.0, 4025.0, 61696.0, 0.0, 24510.0, 72766.0, 9768.0, 2127.0, 36240.0, 20105.0, 2200.0, 3799.0, 30632.0], [50697.0, 116506.0, 23319.0, 26893.0, 37156.0, 17147.0, 66263.0, 1691.0, 82652.0, 11247.0, 20957.0, 49933.0, 7488.0, 42376.0, 55180.0, 45718.0, 20734.0], [34036.0, 25169.0, 35317.0, 38237.0, 116848.0, 7176.0, 20685.0, 28899.0, 39700.0, 3127.0, 44197.0, 0.0, 10535.0, 36929.0, 25135.0, 41553.0, 62563.0, 69943.0, 12187.0, 9687.0, 26595.0], [62382.0, 36387.0, 22627.0, 72183.0, 110312.0, 14271.0, 35621.0, 39522.0, 18543.0, 68101.0, 15239.0, 21103.0, 38623.0, 83822.0, 0.0, 24442.0, 52402.0, 65881.0, 13493.0, 3530.0, 37443.0], [102236.0, 33055.0, 30533.0, 57176.0, 86252.0, 14794.0, 30782.0, 42231.0, 902.0, 47286.0, 2911.0, 94192.0, 5466.0, 32151.0, 75256.0, 0.0, 87167.0, 62612.0, 61341.0, 30350.0, 18385.0, 0.0], [71571.0, 7253.0, 38713.0, 33398.0, 124285.0, 9179.0, 16054.0, 55493.0, 13565.0, 74132.0, 3218.0, 88028.0, 3525.0, 6704.0, 47495.0, 15758.0, 65871.0, 82602.0, 64889.0, 28877.0, 41972.0, 62437.0], [70616.0, 33680.0, 15195.0, 20888.0, 101611.0, 13116.0, 15532.0, 29496.0, 2230.0, 71309.0, 0.0, 115447.0, 5445.0, 37475.0, 54655.0, 38749.0, 36561.0, 114953.0, 85019.0, 34789.0, 43347.0, 21272.0], [111763.0, 25646.0, 62518.0, 48767.0, 92845.0, 26308.0, 60535.0, 63801.0, 8090.0, 69405.0, 12202.0, 109015.0, 5540.0, 22052.0, 72925.0, 19303.0, 44356.0, 77504.0, 90209.0, 48467.0, 21328.0, 27156.0], [112045.0, 64200.0, 54676.0, 50455.0, 187171.0, 23485.0, 30565.0, 65507.0, 37933.0, 83605.0, 13005.0, 115610.0, 0.0, 38596.0, 122087.0, 31461.0, 96409.0, 70195.0, 120578.0, 23294.0, 39237.0, 33969.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

