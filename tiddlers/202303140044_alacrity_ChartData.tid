created: 20230314004438000
creator: Drevarr
modified: 20230705163521989
modifier: drevarr
tags: ChartData
title: 202303140044_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Tegan Parker", "Primal Clone", "High Sorcer Baradun", "Venomina The Siren", "Eibh\u00ebar", "Zadie Miststep", "Black Raspberry Pie", "Mac Chiato"];
const professions = ["Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.3692, 5.4332, 316.0784, 35.3192, 0.0, 32.4047, 20.7917, 2.6827, 0.0, 33.2352, 18.4593, 26.0958, 5.3508, 62.4819, 23.3108, 13.8582, 2.7739, 24.84, 33.4443, 0.0, 37.3714, 2.6892, 39.5116, 100.4098, 28.512, 16.2552, 18.5472], [36.0976, 72.0698, 241.0202, 28.0476, 0.0, 35.8651, 13.6195, 35.8085, 0.0, 65.4562, 61.9419, 0.0, 18.0898, 0.0, 8.8592, 72.1167, 0.0, 32.904, 51.0721, 0.0, 62.0506, 0.0, 6.8149, 127.0492, 29.2248, 59.904, 61.9416], [43.1359, 0.0, 841.9028, 213.6032, 0.0, 44.0471, 38.1097, 195.1387, 87.3312, 80.0013, 19.0527, 8.9317, 269.8126, 54.5948, 7.8581, 0.0, 48.24, 117.4304, 0.0, 111.192, 0.0, 82.4121, 82.2083, 18.7704, 34.8816, 40.5972], [32.9518, 98.4368, 640.4966, 64.0161, 63.8068, 66.0736, 155.1312, 93.4508, 26.4228, 0.0, 26.754, 205.1101, 156.974, 100.4137, 27.2641, 123.768, 128.608, 6.1893, 138.9086, 30.8573, 68.6706, 249.0356, 55.1707, 47.8608, 95.0292], [21.4346, 216.2893, 1278.4913, 107.6456, 154.0678, 2.374, 277.8365, 85.4379, 69.5388, 0.0, 40.8807, 78.7361, 24.7744, 90.1139, 71.28, 6.141, 43.1098, 23.3774, 40.5757, 88.2588, 188.1629, 13.163, 130.8216, 89.964], [2.8764, 1512.0057, 283.5924, 40.4862, 122.5039, 79.893, 268.0387, 32.3243, 99.3, 77.8022, 44.9241, 41.2835, 282.8339, 6.1461, 81.3684, 43.2327, 99.252, 84.7372, 36.8488, 42.9038, 42.0905, 93.1372, 201.0607, 96.1805, 78.6552, 77.4396], [47.3215, 201.1882, 961.5789, 330.9876, 31.4943, 115.6802, 32.1121, 261.3902, 40.4525, 93.6875, 73.7705, 0.0, 63.7568, 255.2773, 87.54, 72.2329, 76.3195, 133.596, 137.3556, 35.6468, 107.124, 0.0, 38.5806, 387.4156, 111.3869, 136.1568, 108.2592], [195.4711, 395.5849, 1228.8695, 227.4972, 33.8738, 82.7257, 97.7109, 498.9859, 86.9246, 136.5248, 141.5434, 169.6227, 42.2507, 237.9156, 153.4303, 95.9234, 114.2543, 73.692, 48.5096, 36.9743, 145.2547, 45.3923, 68.0002, 234.4503, 138.901, 47.3928, 86.562], [203.3092, 328.8684, 1640.4387, 529.1387, 34.6403, 128.4545, 101.9092, 499.8024, 33.6672, 98.1504, 120.7517, 70.2342, 52.9318, 160.1918, 113.5085, 0.0, 108.8564, 41.2224, 34.857, 114.5875, 323.1677, 73.561, 105.1752, 171.0828], [152.1486, 308.3341, 1524.5154, 413.5723, 68.1481, 38.7433, 106.4574, 429.7018, 37.4957, 78.4392, 148.6738, 133.2349, 297.1674, 208.0805, 132.0011, 45.6567, 86.904, 104.2206, 77.9672, 176.3885, 4.5784, 160.7651, 313.404, 118.8, 102.8976, 67.3344]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

