created: 20230626012920000
creator: Drevarr
modified: 20230705163538517
modifier: drevarr
tags: ChartData
title: 202306260129_evades_ChartData
type: text/vnd.tiddlywiki


const names = ["Ylsgavor", "Stark Wall", "Imalou", "Xanvias", "High Sorcer Baradun", "Necrotic Windrunner", "Mammary Mission", "Charr Surethang", "Vesnan", "N\u00e8yp\u00e4", "Toushay", "Vipares", "Ygyn", "Kosair", "Alarics Bane", "Sofya De Nova", "Palm Sauce", "Sl\u00e4ngin", "Fablegodx", "Tootsie Pop Rocks", "Tribal S", "Nbezerkzz", "Reaper Madnesss", "Drevarr Moonwillow", "Alarics Clone", "Johosh The Mighty", "Traidoruns Maximus", "Astraea Lumena"];
const professions = ["Druid", "Firebrand", "Firebrand", "Reaper", "Weaver", "Scourge", "Scourge", "Berserker", "Scourge", "Firebrand", "Reaper", "Renegade", "Firebrand", "Firebrand", "Reaper", "Weaver", "Vindicator", "Berserker", "Berserker", "Scrapper", "Druid", "Scourge", "Reaper", "Scrapper", "Chronomancer", "Berserker", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Evaded Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6, 10, 3], [3, 16], [1, 1, 0, 0, 4, 0, 2, 7, 0, 3, 1, 1], [2, 1, 0, 0, 3, 0, 0, 0, 4, 1, 0, 3, 5, 0, 1], [4, 0, 0, 18, 0], [1, 8, 3, 3, 8, 0, 0], [0, 1, 0, 27], [0, 5, 0, 3, 0, 7, 11, 3], [0, 7, 0, 2, 0, 11, 0, 0, 0, 10], [0, 0, 6, 18, 0, 10], [0, 1, 4, 0, 5, 0, 9, 0, 0, 0, 1, 14, 3, 0, 0], [0, 15, 0, 1, 0, 3, 1, 4, 0, 4, 0, 0, 0, 0, 1, 11, 0, 2], [0, 7, 0, 0, 0, 3, 0, 0, 29, 0, 8], [0, 3, 5, 0, 0, 21, 0, 3, 8, 10, 0, 0], [0, 18, 7, 13, 13, 0, 1], [15, 2, 14, 22, 0, 0], [1, 0, 0, 0, 8, 2, 6, 0, 1, 0, 5, 14, 6, 27], [1, 15, 0, 0, 0, 2, 5, 12, 0, 13, 1, 0, 0, 4, 4, 7, 7, 0, 9, 7, 0, 0], [0, 0, 25, 9, 0, 33, 5, 0, 0, 8, 0, 0, 9, 1], [0, 31, 0, 0, 4, 3, 1, 0, 11, 4, 0, 10, 5, 8, 8, 0, 7], [0, 0, 10, 4, 0, 29, 0, 6, 0, 7, 3, 0, 14, 0, 6, 4, 9, 0, 1, 5, 0, 0], [0, 47, 23, 0, 0, 1, 2, 11, 2, 14], [0, 0, 9, 13, 0, 3, 2, 2, 0, 14, 1, 0, 4, 10, 0, 6, 28, 2, 13], [2, 8, 17, 0, 0, 17, 5, 0, 0, 5, 0, 0, 12, 0, 2, 4, 15, 0, 8, 16, 0, 0], [0, 13, 18, 6, 0, 24, 5, 1, 2, 21, 3, 0, 14, 11, 6], [2, 13, 12, 6, 0, 6, 6, 8, 2, 0, 3, 0, 11, 8, 3, 8, 6, 8, 15, 28, 0, 0], [2, 9, 0, 1, 0, 24, 0, 2, 1, 20, 0, 0, 4, 13, 16, 12, 21, 0, 4, 33, 1, 0], [0, 2, 26, 2, 0, 29, 15, 2, 0, 22, 1, 0, 9, 20, 7, 4, 30]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

