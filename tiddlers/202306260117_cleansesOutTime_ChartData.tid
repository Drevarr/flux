created: 20230626011754000
creator: Drevarr
modified: 20230705163537840
modifier: drevarr
tags: ChartData
title: 202306260117_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Kosair", "Zayde Sunsabre", "Drumina", "Solus Sanctus", "Raziel Umbra", "Pale Pam", "Eibh\u00ebar", "Primal Clone", "Black Raspberry Pie", "Seiker Novus Terra", "Tegan Parker", "Zhavashian", "Arriasa", "Etchery Of Ascalon", "Sakis Ranger", "Elon The Archmagus", "Daddy Demon", "Drevarr Moonwillow", "Tribal S"];
const professions = ["Firebrand", "Spellbreaker", "Druid", "Firebrand", "Chronomancer", "Druid", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.0795, 24.3214, 0.0, 48.5868, 23.0674, 16.0663, 40.2422, 22.3071, 18.9731, 16.97, 20.0167, 19.1724, 22.9077, 9.9474, 7.0, 12.0816, 0.0, 16.0025, 0.0], [2.963, 5.0101, 32.1706, 14.0111, 20.0227, 16.0357, 31.9281, 12.9888, 23.0482, 32.1429, 38.0679, 0.0, 20.98, 14.9958, 10.0172, 10.9077, 8.9474, 17.012, 0.0, 0.0, 3.0, 0.0, 0.0], [8.9474, 15.0361, 10.0816, 0.0, 133.325, 21.8667, 0.0], [6.4444, 5.0101, 0.0, 12.0278, 38.35, 16.0568, 23.1023, 20.4286, 0.0, 43.0778, 14.9888, 18.0361, 37.1677, 17.0272, 20.9697, 0.0, 15.02, 14.9916, 15.0345, 24.3385, 6.9737, 1.0, 5.0408, 0.0, 7.0025, 0.0, 1.0], [0.9815, 13.0303, 0.0, 9.0357, 60.6833, 39.2614, 76.75, 0.0, 14.7725, 32.6404, 47.012, 68.1553, 0.0, 0.0, 52.1, 17.9916, 25.0517, 30.7692, 30.6316, 43.9184, 0.0, 23.005, 20.2222, 0.0], [10.9605, 67.8434, 50.2041, 0.0, 167.54, 40.3556, 0.0], [19.0556, 42.2323, 1.9944, 41.1786, 82.2389, 22.7841, 53.5227, 51.6667, 93.1925, 9.0136, 0.0, 1.0, 37.01, 64.4477, 25.5345, 48.5385, 23.7237, 7.0, 39.3265, 0.0, 80.32, 11.3556, 0.0], [27.037, 60.202, 1.9944, 42.1111, 23.2056, 30.7727, 26.4545, 64.619, 3.9394, 86.1497, 46.1685, 0.0, 76.8587, 64.2626, 5.0, 66.02, 40.9874, 53.7241, 46.7077, 57.5789, 33.8675, 53.551, 0.0, 76.3325, 37.5111, 0.0], [19.3889, 39.6768, 2.9888, 41.1746, 85.0667, 18.1705, 18.1477, 68.8214, 0.0, 95.7126, 44.7528, 37.1446, 87.6025, 57.2092, 41.1448, 1.0, 56.64, 48.0042, 51.1034, 29.6308, 6.9605, 21.0241, 48.6327, 0.0, 70.1525, 7.0444, 0.0], [47.8704, 46.6566, 1.9944, 52.5119, 111.1278, 30.9545, 99.2955, 103.9286, 0.0, 90.5749, 60.1685, 77.012, 134.9006, 111.4158, 66.0438, 0.0, 109.815, 10.9333, 0.0], [4.0, 87.7183, 179.2556, 15.2273, 60.0, 101.5595, 132.497, 57.618, 75.9096, 132.9814, 88.1359, 81.0539, 2.0, 81.61, 5.9958, 31.9828, 69.9385, 56.7368, 62.9759, 47.551, 0.0, 133.83, 40.8444, 0.0], [52.8519, 63.404, 0.0, 91.6429, 129.1389, 82.9773, 83.2159, 83.9167, 159.0539, 108.4382, 93.0723, 167.6832, 125.9321, 136.165, 4.0, 87.32, 80.2929, 60.6034, 78.4154, 56.8684], [62.2222, 79.2929, 4.0, 89.631, 186.8833, 48.0909, 45.1477, 118.8427, 110.2892, 95.5901, 10.9832, 28.1633, 142.5, 115.8201, 65.3793, 94.2769, 75.1184, 65.7831, 38.6735, 3.963, 280.4325, 26.8667], [70.2222, 70.697, 12.9665, 143.8135, 138.5444, 150.3182, 110.0909, 149.0238, 0.0, 125.5928, 92.2135, 102.8494, 170.8199, 125.9266, 166.0774, 12.0204, 104.16, 104.2469, 74.8793, 94.4769], [67.2963, 39.1717, 9.0056, 90.1865, 160.1667, 136.0227, 96.8182, 133.1548, 0.0, 177.7305, 133.9888, 101.9819, 186.5155, 55.7228, 0.0, 1.0, 114.43, 105.7113, 34.069, 100.3538, 71.1447, 63.3373, 62.1429, 0.0, 163.33, 43.2222, 0.0], [83.369, 0.9697, 171.7246, 124.6854, 117.8253, 188.5093, 162.8777, 102.4377, 17.0612, 136.11, 115.5146, 105.8103, 131.4308, 83.2632, 77.2289, 78.3673, 13.0, 261.815, 56.8444, 1.0], [59.6852, 79.9091, 4.9832, 101.8532, 147.1167, 93.0455, 47.9318, 117.1429, 6.9091, 166.9521, 111.382, 118.1205, 191.6398, 173.8478, 153.3636, 2.0, 111.34, 106.9498, 66.8448, 106.3385, 64.0921, 59.1325, 65.6531, 0.963, 170.58, 35.9556, 2.2609], [42.9444, 78.7374, 26.9944, 115.1349, 191.7556, 101.2045, 155.1136, 131.0357, 7.9091, 201.6108, 114.7978, 107.4217, 182.6335, 210.8234, 204.0404, 12.1429, 123.94, 102.7657, 95.4828, 87.1846, 61.9474, 91.012, 74.9796, 30.1481, 237.955, 39.8667, 0.0], [80.2963, 116.2929, 13.0, 49.4405, 141.3214, 7.0, 291.5988, 180.618, 116.9759, 230.1429, 225.6033, 258.6768, 12.0204, 198.1, 146.841, 103.5345, 133.7385, 103.3289, 108.0, 82.7143, 8.5926, 303.31, 92.3333, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

