created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Cedryn X", "Glorious Gluvs", "Hyde En Sikh", "Enter Effore", "Chocolate Teapot", "Ateriuz", "Rahani Sunray", "Klenga", "Johosh The Mighty", "Zaedy Zae", "Aronorf Xideliesi", "Sygaldry Verdandi", "Gabe Malhorn", "Koralia Danai", "Xanvias Einzbern", "Tika Fiery", "Bella Sassy", "Newtype Khan"];
const professions = ["Berserker", "Berserker", "Chronomancer", "Firebrand", "Chronomancer", "Berserker", "Chronomancer", "Firebrand", "Berserker", "Druid", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.495, 0.0, 0.0, 0.0, 0.0, 13.2588, 95.7858, 0.0], [29.2535, 44.6886, 6.7875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.1031, 0.0, 27.1115, 0.0, 14.5742, 0.0, 0.0], [20.2152, 27.9002, 13.6955, 9.2204, 11.4448, 30.537, 16.0086, 6.7962, 5.3625, 8.5608], [0.0, 20.343, 22.2105, 9.8154, 13.0806, 41.9738, 13.8226, 43.019, 0.0], [14.5758, 29.5106, 10.9413, 4.258, 4.2321, 31.1251, 23.6099, 6.3726, 20.895, 13.5302, 17.3204, 17.0798], [0.0, 0.0, 126.7625, 47.0856, 13.7744, 20.6895, 20.3872], [31.2418, 3.5217, 6.361, 1.6169, 30.6727, 11.7378, 12.8338, 3.9195, 9.6678, 11.3236, 9.3912, 11.9962, 9.7927, 26.1014, 6.2014, 64.071], [35.4785, 89.7798, 34.1936, 10.3807, 17.5891, 37.9111, 29.4923, 1.8963, 25.4475, 7.1586, 7.2538, 14.4222], [21.5392, 80.2784, 10.0835, 31.8156, 0.0, 83.4226, 20.3599, 2.3969, 14.4495, 40.2579, 1.4125, 19.3414], [0.0, 27.5781, 5.1321, 0.0, 27.2483, 59.9882, 27.4778, 0.0, 27.3195, 16.3651, 20.5405, 0.0, 20.7375, 27.6451, 27.5112, 0.0, 137.889], [54.5099, 82.2512, 31.4094, 0.0, 0.0, 73.3793, 29.3236, 15.054, 18.2655, 37.6816, 0.0, 24.0975, 24.7846, 49.8264, 9.229], [7.0652, 79.594, 36.1952, 6.7754, 96.4517, 11.241, 48.243, 27.1769, 67.1038, 14.2265, 58.7737, 30.443, 54.9822, 0.877], [110.554, 82.0677, 30.189, 7.1425, 103.4186, 45.9843, 8.9806, 46.137, 7.8228, 21.3066, 29.2077, 62.4487, 13.7599, 63.1188, 18.8129], [71.1098, 111.9631, 17.0667, 3.626, 8.8719, 151.1921, 45.286, 7.9339, 19.617, 45.959, 33.0372, 7.2391, 28.2187, 82.4969, 49.5041, 50.7593], [36.726, 67.8784, 30.085, 31.6809, 0.0, 102.9662, 41.9016, 10.9679, 38.8635, 43.5051, 26.717, 14.534, 106.0763, 52.8473, 120.4372, 14.616], [47.2028, 92.6785, 24.4713, 7.3038, 15.0864, 61.7526, 33.763, 13.2434, 18.0765, 12.2508, 16.4707, 29.8506, 112.35, 47.147, 65.8175, 8.1432, 174.042], [17.4783, 110.9968, 27.7371, 7.8425, 4.4148, 124.5005, 44.7219, 7.6457, 38.9025, 61.4016, 34.5694, 30.2978, 68.67, 70.6788, 89.4216, 64.6862, 266.085], [83.9034, 111.4799, 95.9738, 15.1567, 0.0, 188.8318, 56.4597, 23.0432, 17.1795, 98.1909, 28.2731, 19.7607, 65.8088, 146.0138, 177.3931, 21.569]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

