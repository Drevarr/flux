created: 20230412220340000
creator: Drevarr
modified: 20230705163525300
modifier: drevarr
tags: ChartData
title: 202304122203_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Johoshua", "Drevarr Moonwillow", "Primal Clone", "Tegan Parker", "Venomina The Siren", "Eibh\u00ebar", "Zadie Miststep", "Black Raspberry Pie", "Mac Chiato"];
const professions = ["Chronomancer", "Scrapper", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[143.6925, 0.0, 0.0, 0.0, 35.8994, 78.9449, 134.0728, 0.0, 104.98, 0.0, 56.9894, 0.0, 13.271, 0.0, 0.0, 0.0, 0.2419, 26.3866, 0.0, 153.0792], [98.8942, 2.6519, 7.8723, 109.4856, 7.912, 59.2567, 125.0235, 2.6132, 163.85, 14.157, 64.2355, 2.7091, 44.4269, 45.6754, 11.6325, 47.9063, 12.721, 31.752, 19.3536, 155.952], [92.8084, 16.073, 0.0, 54.537, 4.9598, 53.3022, 136.2161, 0.0, 189.66, 10.527, 46.153, 2.8125, 47.9002, 51.5352, 7.5999, 66.2176, 26.7523, 19.129, 9.8582, 205.2], [316.4616, 56.1746, 31.802, 174.0039, 155.2884, 146.557, 481.5191, 0.0, 306.53, 58.113, 171.6864, 0.0, 82.2701, 44.0011, 0.0, 63.3472, 32.0746, 48.4963, 33.7478, 370.5912], [211.8196, 40.7322, 40.6974, 155.6877, 219.8836, 168.8383, 542.7211, 442.25, 78.903, 123.3139, 0.0, 56.4019, 83.4504, 0.0, 132.2373, 41.6506, 37.3507, 64.6229, 810.1296], [390.3365, 43.6752, 0.0, 259.9254, 227.5594, 156.7373, 350.7802, 0.0, 673.96, 61.611, 165.6154, 41.8977, 110.3674, 207.1349, 42.8076, 239.2347, 40.441, 60.2899, 84.1882, 671.8248], [371.5719, 33.2132, 0.0, 185.8374, 166.625, 260.5565, 522.241, 35.438, 527.22, 97.977, 193.9469, 0.0, 103.1616, 130.3291, 0.0, 151.1425, 48.5453, 38.543, 76.3862, 928.3248], [542.3124, 0.7762, 0.0, 200.3463, 214.5695, 205.7177, 458.1814, 0.0, 424.56, 68.64, 211.9642, 76.6714, 49.0762, 0.0, 298.9196, 11.6323, 54.3024, 55.7021, 1114.6464], [618.8921, 33.7306, 33.3651, 141.0759, 295.9335, 208.887, 793.2443, 0.0, 659.46, 62.535, 304.6618, 0.0, 104.7686, 159.1051, 49.0116, 226.0703, 85.6598, 127.2413, 130.9694, 1311.228], [364.9789, 42.042, 85.5158, 359.2239, 502.8272, 210.3276, 785.6239, 24.2332, 884.21, 213.335, 78.6254, 160.5485, 235.7016, 82.7614, 346.232, 0.0, 115.007, 87.9077, 1277.5752]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

