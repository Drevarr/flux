created: 20230422000344000
creator: Drevarr
modified: 20230705163526080
modifier: drevarr
tags: ChartData
title: 202304220003_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Skye Nightroad", "Sarah Dresser", "Ryvalia Fazebringer", "Drevarr Moonwillow", "Eibh\u00ebar", "Morton Saltbringer", "Rahani Sunray", "Tegan Parker", "Venomina The Siren", "Zadie Miststep"];
const professions = ["Scrapper", "Tempest", "Chronomancer", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.8576, 54.6984, 18.5566, 15.7965, 0.0, 24.1178, 10.0549, 30.2157, 10.0643, 24.66, 22.743, 0.0, 28.704, 0.0, 15.1603, 18.7079, 17.6352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [83.1952, 93.2837, 51.2797, 27.72, 160.398, 0.0, 63.342, 8.4276, 10.2413], [0.0, 28.4284, 0.0, 31.2051, 9.3456, 20.6624, 37.2082, 19.0418, 37.3496, 119.16, 71.127, 0.0, 2.9532, 0.0, 0.0, 17.0032, 0.0, 0.0, 27.9533, 26.4384, 0.0, 36.0622, 0.0, 26.8578], [0.0, 46.9168, 21.4036, 15.8317, 0.0, 34.1317, 26.9491, 38.0835, 29.9691, 55.44, 56.007, 0.0, 14.2968, 2.6879, 31.4093, 42.5735, 13.9603, 57.3475, 30.5265, 35.1648, 0.0, 40.3754, 0.0, 44.6598], [0.0, 113.6568, 101.68, 0.0, 55.0771, 39.9072, 35.904, 80.2953, 75.9285, 82.8576, 32.0544, 83.7991, 0.0, 181.0773], [40.6217, 103.1488, 42.5785, 86.1754, 0.0, 115.406, 29.5266, 73.1119, 34.4102, 79.56, 0.0, 35.742, 0.0, 47.6986, 82.9179, 45.0701, 18.2606, 66.6578, 50.337, 56.6784, 0.0, 19.3931, 45.3247, 58.05], [1.2144, 113.9408, 50.1282, 81.5916, 0.0, 115.1592, 74.8246, 48.6716, 0.0, 207.18, 33.327, 0.0, 28.9524, 39.1063, 0.887, 0.0, 36.9811, 0.0, 50.1791, 134.6198, 139.6224, 32.4288, 67.8436, 0.0, 139.1265], [8.0758, 74.0335, 158.8626, 85.3065, 272.34, 219.24, 0.0, 30.0012, 39.312, 11.452, 35.6717, 82.6556, 84.8115, 171.5904, 0.0, 6.259, 72.3506, 113.5845], [82.3884, 49.8232, 173.4792, 69.3792, 171.2578, 51.1166, 122.5786, 98.8533, 313.38, 253.008, 0.0, 77.5008, 31.5882, 75.8419, 81.3443, 49.8221, 88.6002, 40.0793, 172.8864, 85.104, 25.8467, 86.2859, 69.2343], [0.0, 56.0987, 18.744, 70.0969, 43.6137, 111.2792, 86.7762, 384.3, 316.512, 43.8426, 49.0452, 57.5379, 107.9366, 36.4541, 37.9315, 85.9339, 80.8987, 338.1696, 57.3408, 63.0115, 168.1144, 143.7318]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

