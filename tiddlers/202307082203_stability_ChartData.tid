created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Mechanical Dark", "Newtype Khan", "Johosh The Mighty", "No Reserv\u00e9", "Shandalar V Basing", "Lil Rev Robin", "Crusader Siolith", "Xanvias Einzbern", "Mistwalker Cael", "Aronorf Xideliesi", "Klenga", "Sygaldry Verdandi", "Gabe Malhorn", "Tika Fiery", "Koralia Danai", "Bella Sassy"];
const professions = ["Scrapper", "Spellbreaker", "Berserker", "Vindicator", "Firebrand", "Vindicator", "Willbender", "Berserker", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.5652, 1.7588, 1.5034, 1.1681, 1.8374, 5.832], [1.6549, 0.9662, 1.3545, 0.0, 0.0, 2.443, 1.7459, 0.0, 0.0, 0.572, 0.9097, 0.0, 1.26, 1.7539, 1.8932, 0.0], [1.7058, 2.8987, 0.4214, 1.8441, 0.0, 2.5334, 1.8802, 0.1214, 1.2675, 1.7712, 0.0, 1.3695], [5.1533, 2.2274, 1.4815, 0.7874, 3.8454, 0.0, 2.9733, 1.677], [1.5082, 0.531, 9.135, 4.8442, 6.9684, 0.0], [3.5217, 7.3763, 3.9254, 8.0963, 0.5011], [2.1338, 0.8729, 0.0, 0.0, 3.2573, 0.5103, 0.0, 1.131, 1.1439, 0.4309, 2.1263, 1.1484, 1.5306, 1.0858, 8.829], [1.1202, 3.2208, 1.5802, 1.6887, 0.0, 3.6192, 0.7521, 1.5625, 1.5405, 2.3247, 1.604, 1.5373, 2.31, 1.2737, 4.0683, 1.211], [1.2475, 2.5766, 0.0, 0.2901, 1.2232, 3.5287, 3.9484, 0.0, 1.9695, 1.2362, 2.0828, 3.8012, 3.0975, 5.9299, 7.9352, 0.0], [3.9718, 6.039, 4.2441, 0.0, 0.0, 6.9217, 0.0, 2.7495, 2.1033, 3.5192, 0.0, 4.6725, 3.1111, 5.8406, 2.2759], [4.7992, 9.1793, 4.1387, 0.7252, 2.9385, 8.4599, 6.1778, 4.0807, 1.2675, 1.6236, 3.5431, 5.3105], [6.1995, 10.3871, 4.5752, 1.699, 10.9933, 3.2616, 5.0895, 4.0037, 5.3865, 4.4161, 4.935, 4.4683, 8.8213, 0.0], [12.0377, 3.326, 2.0513, 3.754, 11.2648, 5.2377, 1.1226, 4.329, 3.487, 3.9262, 5.7577, 9.8963, 3.7375, 10.0297, 6.7651], [4.29, 9.9442, 3.7625, 1.409, 2.5308, 2.2168, 9.0518, 4.9303, 3.276, 4.3357, 4.7401, 5.1428, 6.3262, 7.9553, 11.9229, 3.1946, 18.441], [9.5984, 14.9365, 4.6956, 1.8959, 3.9368, 12.5767, 6.339, 1.2743, 4.8165, 4.059, 6.3202, 6.4844, 5.8538, 6.3058, 10.1103, 6.0134], [3.7426, 10.8299, 2.0769, 1.4608, 5.0616, 10.5409, 8.434, 6.2349, 6.318, 3.0812, 5.0513, 5.9813, 6.51, 5.9508, 10.4728, 6.786, 27.486]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

