created: 20230304223548000
creator: Drevarr
modified: 20230705163521227
modifier: drevarr
tags: ChartData
title: 202303042235_might_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Cat Wigglebooty", "Aronorf Xideliesi", "Gabe Malhorn", "Pinky Aldar", "Drevarr Moonwillow", "Koralia Danai", "Sygaldry Verdandi", "Mac Aaroni", "Blanco Padre Guard", "Bella Sassy", "Newtype Khan", "Venomina The Fierce"];
const professions = ["Tempest", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[28.7706, 0.9656, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.9042, 0.0], [23.7952, 1.2289, 6.6672, 0.5351, 0.1433, 7.7969, 3.1824, 5.94, 1.5959, 31.0908, 0.198, 3.7536, 10.15, 14.7875, 16.0388, 2.8258, 18.042, 5.51, 0.952, 1.5475], [39.0458, 11.0164, 1.1088, 12.2284, 10.098, 1.7199, 1.4553, 3.2545, 6.2608, 41.258, 7.014, 0.0, 38.57, 53.1167, 16.3678, 4.8442, 28.272, 9.483, 4.536, 6.5447], [39.3702, 7.4613, 1.6272, 3.9148, 3.7097, 0.5331, 12.6378, 5.2569, 1.5985, 0.4706, 49.3623, 0.0, 10.967, 35.4032, 30.9946, 26.2378, 22.2024, 32.271, 10.44, 1.47, 5.0939], [4.4499, 87.0464, 143.0247, 47.1292, 22.9425], [43.5885, 3.0723, 2.6784, 0.0273, 1.1159, 3.7318, 3.7026, 2.1829, 13.0086, 4.1943, 61.0029, 3.504, 3.3619, 23.6292, 61.0428, 19.6578, 5.416, 28.272, 17.313, 5.572, 2.8855], [18.7117, 19.3116, 0.0, 4.1998, 11.8286, 8.9046, 0.0, 6.5934, 3.1798, 1.555, 52.3092, 6.102, 6.5933, 43.7668, 34.307, 24.5927, 22.5052, 37.293, 1.74, 0.42, 7.125], [32.7725, 18.741, 0.2304, 0.8081, 3.4684, 8.9631, 4.1004, 4.9599, 12.7261, 55.4036, 6.294, 1.4253, 48.1516, 34.6619, 16.5323, 9.8229, 32.736, 8.439, 7.28, 7.0444], [30.1766, 0.0, 5.2128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9232, 57.9086, 1.506, 0.0979, 10.3936, 52.2886, 20.2335, 47.6679, 67.797, 2.697, 6.552, 23.8576], [57.7574, 26.1145, 0.216, 4.3789, 4.4637, 0.2666, 10.3428, 7.8435, 10.2465, 7.3451, 42.1421, 1.5123, 45.6344, 46.6102, 30.4325, 28.3585, 41.664, 8.468, 5.446, 4.2879], [61.3267, 16.766, 0.4464, 0.6279, 4.8633, 0.0333, 5.2938, 1.7766, 7.7517, 3.6455, 4.5217, 80.7478, 8.676, 6.3213, 44.7412, 84.5845, 29.8567, 15.6762, 71.517, 8.99, 4.76, 6.2384], [68.6816, 18.2582, 9.0432, 1.6435, 6.4241, 19.6921, 7.8336, 2.5704, 21.8889, 3.841, 11.1712, 118.1747, 5.106, 9.0522, 57.246, 129.0653, 63.0035], [55.7024, 6.2324, 7.6896, 12.8029, 25.1233, 16.2792, 12.5874, 40.2435, 1.7825, 18.7004, 179.767, 8.202, 7.2896, 94.4356, 158.9952, 66.8692, 135.129, 61.567, 31.738, 30.3701]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

