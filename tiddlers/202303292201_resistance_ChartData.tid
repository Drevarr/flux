created: 20230329220116000
creator: Drevarr
modified: 20230705163523348
modifier: drevarr
tags: ChartData
title: 202303292201_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Kiloak", "Morton Saltbringer", "Mort\u00e4rion", "Jorja Peachbringer", "Ark Darkness", "Pieca Pizzabringer", "Brioche Bunbringer", "Band Aidbringer", "Ryvalia Fazebringer", "Zaylen Harker", "Gavann", "Domina Flagbringer", "Bura Beignetbringer", "Bubble Teabringer", "Newtype Khan", "Bella Lunabringer", "Johosh The Great", "Ravioli Fetabringer"];
const professions = ["Firebrand", "Chronomancer", "Berserker", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Scrapper", "Chronomancer", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[244.9816, 36.0067, 0.0, 9.3051, 26.2764, 7.2324], [6.1387, 0.0, 159.926, 15.1536, 195.2576, 19.2183, 0.0, 6.5124, 9.5991], [35.3241, 0.0, 24.158, 0.0, 358.9829, 79.524, 0.0, 0.0], [1.667, 0.0, 230.9505, 20.0323, 260.1413], [34.0805, 0.0, 166.6902, 363.834], [0.0, 10.4966, 490.5695, 39.762, 0.0, 21.2891, 13.0248, 47.4222], [8.3614, 0.0, 228.0515, 12.1229, 315.9292, 37.2217, 0.0, 15.3953, 8.6832, 6.8355], [9.7373, 10.9536, 238.681, 20.0323, 294.0992, 46.7204, 0.0, 2.2682, 4.0824, 9.702], [12.4097, 8.2824, 243.5126, 24.7632, 318.3548, 17.672, 0.0, 0.0, 5.4108, 8.9082], [14.3678, 0.0, 283.6149, 23.9501, 571.2194, 34.0186, 0.0, 7.1619, 0.0, 7.9821], [43.7648, 0.0, 428.5629, 50.3395, 498.4526, 30.7051, 0.0, 7.2154, 0.0, 6.7473], [50.4857, 0.0, 244.9621, 0.0, 757.9875, 159.6002, 0.0, 0.0, 0.0], [21.8295, 0.0, 419.866, 34.6685, 704.6252, 83.8316, 11.418, 0.0, 5.3136, 7.4676], [29.0531, 0.0, 531.9592, 34.9642, 606.9964, 62.5147, 2.4825, 25.8228, 15.7878], [27.5449, 0.0, 615.0627, 41.8387, 757.9875, 88.4704, 20.922, 0.0, 7.0956, 16.8462], [80.8882, 4.032, 688.9862, 85.7472, 605.7836, 70.9089, 11.319, 8.0727, 28.188, 41.601], [19.4216, 12.0792, 683.1882, 27.8678, 902.9147, 51.2488, 8.019, 0.0, 31.8492, 61.0344], [57.868, 11.76, 834.9005, 96.1699, 1121.2151, 153.4151, 0.0, 24.462, 43.6884]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

