created: 20230329220116000
creator: Drevarr
modified: 20230705163523232
modifier: drevarr
tags: ChartData
title: 202303292201_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Bella Lunabringer", "Jorja Peachbringer", "Ryvalia Fazebringer", "\u00c4lplrmagron\u00e4bringer", "Bubble Teabringer", "Mort\u00e4rion", "Morton Saltbringer", "Ravioli Fetabringer", "Sister Elon\u00edth", "Charred Fishbringer", "Blancooo Padreee", "Baidu Sugiyama", "K\u00f4sair", "Spicy Gyrosbringer", "Sumatra Satyricon", "Brioche Bunbringer", "Sizzln Sisigbringer", "Gavann", "Arkintor", "Rina Of Theros", "Abigail Ryn", "Nazhul Naxxremis", "Newtype Khan", "Band Aidbringer", "Iced Coffeebringer", "Domina Flagbringer", "Panther B Me", "Smol Gluvs", "Boysto Yardbringer", "Seren Nightroad", "Bee Honeybringer", "Tootsie Pop Bringer", "Plum Crazybringer", "My Birthday Girl"];
const professions = ["Firebrand", "Chronomancer", "Chronomancer", "Vindicator", "Firebrand", "Berserker", "Chronomancer", "Firebrand", "Dragonhunter", "Scrapper", "Berserker", "Scourge", "Berserker", "Scrapper", "Soulbeast", "Chronomancer", "Weaver", "Firebrand", "Tempest", "Scourge", "Tempest", "Scourge", "Spellbreaker", "Scrapper", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Vindicator", "Scourge", "Scourge", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 10947, 0, 21496, 1438, 0, 0, 1011, 1063], [2775, 0, 4661, 672, 27949], [0, 0, 5919, 0, 23695, 5157, 0, 0, 1302, 0], [0, 0, 10827, 2337, 18244, 2182, 0, 0, 1378, 1225], [0, 0, 11684, 0, 21272, 3319, 0, 0, 97], [0, 0, 4104, 0, 31686, 1150, 0, 0], [0, 0, 9147, 0, 25261, 3816, 0, 0, 0], [0, 0, 12507, 0, 21080, 3831, 0, 1359, 25], [0, 37931, 1539, 0, 0, 0], [0, 0, 13419, 0, 19384, 6385, 0, 675, 0, 388], [163, 0, 13001, 0, 27945, 0, 0, 0, 0, 0], [0, 0, 10179, 0, 26550, 4571, 0, 0, 0, 1064], [0, 0, 10507, 0, 31644, 2507, 0, 0], [1163, 0, 8123, 1087, 30649, 3529, 200, 916, 0, 0], [0, 0, 11253, 0, 33225, 5416, 0, 0, 0, 0], [0, 0, 5267, 0, 40264, 3614, 0, 0, 1600, 0], [269, 0, 20009, 269, 25847, 6987, 0, 0, 0, 0], [736, 0, 10211, 0, 42903, 1204, 0, 0, 0, 0], [0, 0, 17041, 1145, 37515, 0, 0, 0, 196], [0, 0, 8165, 0, 46051, 2177, 0, 887, 0, 0], [267, 0, 10708, 89, 46554], [1002, 0, 32373, 0, 24383], [275, 0, 16769, 0, 40309, 3187, 0, 1170, 0, 1712], [1305, 0, 8077, 1885, 49386, 5710, 0, 0, 164, 137], [405, 0, 16375, 0, 48127, 9974], [0, 0, 25245, 0, 62570, 2427, 706, 0, 0], [228, 0, 32446, 722, 56536, 4950, 0, 277, 0, 0], [0, 0, 32815, 1766, 62291, 891, 0, 0, 1188, 2376], [1865, 0, 7875, 0, 90182, 6526, 232, 0, 56, 503], [41870, 0, 64628, 7960, 0, 0], [403, 0, 47188, 1618, 61474, 4271, 0, 191, 4375, 0], [844, 0, 58456, 4193, 51213, 10900, 0, 470, 1449, 637], [11149, 995, 75226, 2651, 57330, 6272, 0, 2294, 1884, 167], [6367, 163588, 1238, 168094, 12407, 1049, 1095, 0, 2463]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

