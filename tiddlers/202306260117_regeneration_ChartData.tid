created: 20230626011754000
creator: Drevarr
modified: 20230705163538008
modifier: drevarr
tags: ChartData
title: 202306260117_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Daddy Demon", "Tegan Parker", "Pale Pam", "Etchery Of Ascalon", "Zhavashian", "Sakis Ranger", "Tribal S", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Druid", "Tempest", "Tempest", "Druid", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[66.4362, 84.7311, 318.6558, 346.8553, 214.0992, 33.7445, 14.3035, 61.7652, 0.0, 80.5608, 39.9574, 82.1551, 153.9885, 635.628, 442.7854, 40.6867, 70.978, 274.6468, 28.7895, 33.3151, 41.9322, 23.6791, 9.604, 0.0, 293.2, 43.0272, 1.3945], [387.2039, 332.7786, 303.1776, 29.3462, 68.3769, 178.605, 114.3032, 55.1871, 151.7489, 229.0531, 617.8131, 391.6895, 23.7905, 75.762, 94.9188, 51.0992, 106.8886, 66.2127, 34.0947, 93.2068, 0.0, 194.2, 48.5352, 0.0], [21.8971, 530.8091, 190.5434, 0.0, 2495.8, 472.1544, 0.0], [140.8671, 84.9638, 432.0702, 423.0425, 286.1568, 74.1048, 129.4506, 103.3452, 29.4565, 159.844, 46.6307, 141.6843, 266.1314, 606.5707, 569.7054, 77.1544, 138.506, 268.581, 41.4648, 83.7973], [199.1871, 92.8274, 253.2492, 541.2128, 261.36, 113.7629, 94.4108, 72.5382, 252.8798, 124.6623, 284.929, 448.7988, 848.3688, 440.7361, 49.9888, 151.938, 448.4214, 110.1275, 143.9939, 104.7934], [138.51, 376.8465, 820.0796, 1944.9335, 612.0576, 118.0872, 109.6982, 504.3654, 316.7604, 561.6711, 330.5086, 1017.6149, 959.4956, 981.721, 0.0, 372.9096, 806.426, 926.2732, 365.5949, 115.7111, 424.4615, 303.7319, 309.5129, 3.2168, 2603.2, 271.5984, 0.0], [252.6714, 355.117, 302.7874, 1666.6096, 508.1832, 9.079, 641.4052, 477.9745, 821.3165, 681.711, 2190.5384, 1424.9466, 240.3538, 393.3, 597.8203, 448.7234, 768.9227, 194.9142, 469.6804, 101.9705, 300.4274, 3291.0, 155.1096, 0.0], [202.9779, 546.1691, 1221.6213, 2076.9336, 920.9376, 104.5598, 39.6942, 456.481, 961.9866, 1066.4173, 23.7719, 183.4501, 973.59, 1303.5896, 311.4264, 341.9416, 761.6697, 351.4801, 446.3699, 81.0653, 3777.0, 270.2592], [273.3507, 572.2725, 696.1131, 1183.5558, 1107.4752, 278.5675, 512.3914, 686.9016, 158.5432, 1050.5218, 690.1665, 989.6057, 1270.348, 2281.5154, 2022.7957, 209.7719, 714.012, 1060.6199, 454.0095, 425.8664, 463.2656, 513.2156, 364.5919, 183.3068, 2324.8, 297.8856, 206.3054]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

