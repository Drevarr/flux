created: 20230614224052000
creator: Drevarr
modified: 20230705163535408
modifier: drevarr
tags: ChartData
title: 202306142240_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Shaca Booey", "Black Raspberry Pie", "Tika Fiery", "Ryvalia Fazebringer", "Crusader Siolith", "Sakis Ranger", "Venomina The Siren", "Zayde Sunsabre", "Momomeko", "Arriasa", "Artakama Nahid", "Koralia Danai", "Solus Sanctus", "Xanvias Einzbern", "Smol Gluvs", "Be\u00eb", "Permanent Dawn", "Cedryn X", "Mistwalker Cael", "Rina Of Theros", "Elonith Requiem", "Johosh The Mighty", "Morton Saltbringer", "Johosh The Mighty", "Elonith Requiem", "Be\u00eb"];
const professions = ["Berserker", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Druid", "Tempest", "Spellbreaker", "Chronomancer", "Druid", "Tempest", "Firebrand", "Firebrand", "Berserker", "Scourge", "Scourge", "Weaver", "Berserker", "Vindicator", "Scourge", "Scourge", "Berserker", "Chronomancer", "Spellbreaker", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[685.4286, 436.3478, 703.0192, 1491.2515, 736.15, 1574.7188, 831.8571, 1197.8293, 335.8889], [229.234, 412.7447, 789.1071, 1217.1737, 868.8875, 1630.2174, 991.45, 1097.8158, 214.1731], [343.6087, 292.0976, 608.2778, 1163.2303, 737.0854, 1423.5246, 1198.5238, 1243.9737, 334.3654], [239.2979, 287.0732, 804.3455, 797.006, 637.878, 1866.5522, 1227.0625, 613.7595, 227.102], [224.4894, 305.3684, 550.4909, 945.125, 509.7317, 964.3333, 1085.0312, 644.2289, 312.6139], [466.5208, 146.9756, 565.0192, 1118.1557, 643.0897, 1030.2909, 466.5645, 827.3718], [361.6809, 427.8222, 811.0727, 879.6364, 617.9494, 1139.6, 886.1719, 325.2048, 86.6602], [519.2174, 585.8293, 967.7091, 1340.1325, 1005.5679, 132.449], [307.8936, 401.1556, 361.0182, 745.9524, 537.1266, 894.0333, 384.5, 739.0988, 402.8365], [374.5957, 185.4054, 749.0179, 787.5808, 299.8049, 825.1304, 464.1746, 916.1039, 92.0], [190.5208, 281.4211, 585.3519, 785.4192, 347.7195, 967.9844, 595.3906, 689.4545, 135.4353], [162.4048, 146.8824, 785.0909, 1541.3543, 170.25, 739.3971, 101.127, 505.8025, 126.0109], [225.8542, 197.7209, 383.375, 601.7636, 309.7564, 1146.7101, 414.4762, 791.3494, 261.3137], [677.4583, 456.2766, 1129.3455, 1330.7101, 743.9844, 691.3614, 144.1237], [357.25, 289.2609, 2541.0, 1159.1964, 471.9], [456.4286, 537.6087, 1104.0909, 1258.5119], [254.1837, 226.6957, 627.3393, 546.0298, 249.5823, 710.0448, 109.1406, 306.4756, 242.7885], [991.6377, 2540.6154, 794.7037, 681.8734], [511.4898, 327.8696, 856.4906, 2361.5938, 156.371, 535.7778, 30.5385], [237.9388, 371.3478, 876.9259, 586.3333, 89.4557], [900.0179, 174.6667], [1253.8308, 1114.4167], [385.2059, 102.5593, 380.3, 581.4019], [881.0, 183.3962], [367.4167, 598.1489, 314.9811], [398.0741]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

