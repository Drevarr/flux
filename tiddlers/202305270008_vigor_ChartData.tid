created: 20230527000807000
creator: Drevarr
modified: 20230705163531868
modifier: drevarr
tags: ChartData
title: 202305270008_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Zaedy Sagemist", "Demon Sekhmet", "Newtype Khan", "Zefirokai", "Drevarr Moonwillow", "Artakama Nahid", "Elonith Primal", "Johosh Of The North"];
const professions = ["Tempest", "Vindicator", "Spellbreaker", "Spellbreaker", "Tempest", "Scrapper", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[204.2266, 250.8365, 0.0, 0.0, 0.0, 344.2378, 64.0633, 143.0746, 31.5658, 0.0, 0.0, 63.2864, 63.3936, 131.8374, 0.0, 73.1203, 0.0, 0.0, 115.1256, 0.0, 78.7567, 311.0822, 0.0, 71.613, 31.734, 29.6784], [416.1946, 396.9744, 27.1002, 12.8242, 452.9923, 65.1866, 204.4339, 151.415, 28.9278, 152.9251, 130.0734, 62.6266, 65.7306], [204.5952, 218.5651, 48.2558, 0.0, 31.0128, 337.8672, 44.7966, 57.8573, 71.4317, 26.1954, 78.1579, 22.3852, 56.5805, 256.9011, 6.1132, 62.496, 143.6621, 50.5899, 156.8733, 0.0, 54.8251, 153.4963, 3.344, 118.7347], [363.8477, 412.0099, 0.0, 0.0, 0.0, 528.7565, 157.9116, 200.1293, 149.5915, 96.1092, 158.859, 107.2737, 98.0458, 254.3923, 69.5491, 162.7696, 0.0, 173.0813, 48.6268, 0.0, 186.9384, 525.9226, 0.0, 263.8213, 131.3788, 125.5824], [1454.1005, 1281.3197, 179.0944, 48.8893, 65.6768, 504.6394, 124.0418, 513.6384, 444.6874, 40.0752, 425.2911], [809.3491, 852.4406, 136.0255, 0.0, 18.2784, 1272.0643, 164.0388, 312.7795, 197.7576, 0.0, 322.2108, 187.6484, 111.9878, 598.8506, 0.0, 291.9902, 324.8865, 0.0, 637.4145, 62.2651, 0.0, 206.8452, 484.2086, 56.432, 119.7405, 272.2072, 117.0936], [1423.5034, 1481.1821, 359.6459, 35.3126, 55.384, 1162.3997, 274.2943, 389.5334, 237.6235, 124.2648, 617.4647, 323.5715, 323.5104, 996.3699, 359.7538, 561.1784, 98.7001, 818.4524, 55.906, 428.1581, 1165.2634, 139.584, 385.8752], [1332.0806, 1563.8774, 476.439, 51.3471, 1891.6013, 263.7079, 575.2896, 542.5915, 77.6754, 557.3628, 204.4143, 375.3533, 1001.0112, 44.3117, 277.2144, 624.8502, 68.7668, 905.3859, 139.7784, 88.501, 438.8185, 1269.6845, 74.624, 428.9234, 759.3594, 398.844], [1651.6915, 1745.7706, 245.184, 65.927, 68.5216, 2069.5219, 243.5222, 670.2835, 532.1534, 677.1428, 408.3219, 380.1811, 997.3734, 349.308, 505.6361, 54.2209, 867.7638, 87.5932, 122.6512, 526.4408, 1292.9952, 99.936, 387.9873, 512.6804, 344.574]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

