created: 20230318001239000
creator: Drevarr
modified: 20230705163522389
modifier: drevarr
tags: ChartData
title: 202303180012_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Fribble Bibble", "Tegan Parker", "Zaylen Harker", "Venomina The Siren", "Whose Guardian", "Aronorf Xideliesi", "Bella Sassy", "Koralia Danai", "Mac Chiato", "Sygaldry Verdandi", "Shaca Booey", "Viral Marketing", "Drevarr Moonwillow", "Zadie Miststep", "Jupi Jupi Jupi", "Newtype Khan", "Arcanophage Farra", "Grasszanine", "Abigail Ryn"];
const professions = ["Scrapper", "Tempest", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Spellbreaker", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[22.5504, 3.024, 20.5162, 17.4502, 4.0456, 7.8556, 4.5975, 8.177, 0.0, 0.0, 5.8872, 67.7327, 7.9992, 5.0436, 4.5158, 5.6889, 7.5374, 5.4772, 2.8694, 0.3919, 1.4461, 4.2244, 31.9784], [0.0, 3.3528, 79.5123, 8.7749, 15.8855, 50.9443, 33.4278, 15.2604, 4.3222, 11.4778, 0.0, 9.6054, 49.3626], [32.2944, 3.696, 41.3213, 39.8861, 4.4725, 0.0, 0.0, 10.998, 8.6736, 0.5016, 0.0, 43.29, 12.3624, 3.7398, 4.5158, 22.1823, 7.2032, 4.3594, 4.919, 0.0, 0.2696, 10.6112, 40.1339], [38.5584, 0.0, 0.0, 14.8224, 0.0, 0.0, 3.7128, 0.0, 82.7517, 6.3024, 4.426, 0.0, 40.5279, 0.0, 0.0, 17.041, 0.0, 0.0, 108.8123], [35.7744, 8.9544, 11.4139, 17.2424, 5.5016, 3.9278, 5.8886, 16.1515, 0.1692, 1.5288, 5.1744, 1.0888, 79.5123, 11.1019, 0.0, 9.949, 8.8641, 11.3246, 0.0, 0.6442, 0.0, 6.4874, 84.7749], [33.1296, 2.688, 38.2872, 69.8006, 5.7304, 3.1537, 0.0, 3.1979, 3.384, 1.1232, 0.8976, 86.8745, 0.1939, 0.0, 2.0462, 3.0429, 5.421, 2.3474, 1.4347, 0.839, 0.9559, 10.1586, 69.7515], [0.0, 9.2352, 4.5672, 0.0, 120.1519, 14.7379, 6.0729, 20.4624, 31.7079, 15.1862, 13.1528, 10.3651, 0.0, 9.2158, 8.8007, 81.5556], [12.6672, 0.84, 65.305, 36.5622, 0.0, 6.6514, 6.1091, 9.5938, 0.6345, 0.8424, 1.9272, 3.1594, 78.6288, 0.0, 12.3516, 15.0998, 13.0536, 5.4581, 4.5085, 0.0, 7.6226, 11.5667, 59.0205], [15.8688, 0.0, 45.9446, 45.7028, 4.8166, 0.0, 28.7813, 15.1857, 0.936, 9.6096, 87.4635, 23.3674, 9.1728, 45.3789, 12.1415, 5.0301, 0.1464, 1.7157, 5.8336, 11.8041], [30.3456, 4.5192, 42.9106, 33.4461, 3.4736, 14.3063, 13.4147, 12.9536, 1.5651, 5.3664, 9.7152, 83.6352, 0.2909, 3.3967, 0.3528, 10.1871, 9.5795, 1.5649, 1.4054, 0.0, 7.8452, 92.7158], [3.8136, 45.0778, 61.491, 4.68, 5.4473, 1.9839, 11.0106, 7.2072, 9.0288, 1.5351, 95.7093, 0.0, 7.7541, 8.1144, 14.3766, 14.7777, 8.9424, 2.1667, 3.1961, 2.0588, 9.2534, 76.6193], [22.968, 1.9992, 51.1459, 66.4768, 6.0008, 4.2145, 6.3925, 16.4754, 0.0, 11.7, 13.3056, 0.232, 93.9423, 9.696, 6.1415, 10.7251, 9.7902, 10.3964, 5.7008, 5.1826, 4.8285, 14.0309, 55.8012], [47.7456, 2.5872, 34.2418, 60.8678, 4.056, 10.6366, 9.7619, 11.3749, 3.1725, 8.9232, 9.3456, 4.7302, 91.8809, 6.9811, 7.857, 11.219, 8.1144, 12.6985, 10.6564, 4.4506, 2.8538, 3.8236, 8.4487, 78.7655], [24.6384, 3.696, 33.2304, 20.1508, 4.9192, 1.8062, 8.3763, 65.2942, 0.0, 7.5504, 10.2432, 15.226, 64.1988, 4.6541, 0.0, 31.8226, 32.2371, 4.567, 43.5197, 0.0, 0.0, 35.5885, 1.7099, 63.0983], [24.2208, 9.996, 85.2432, 87.2508, 5.3352, 1.9496, 8.8172, 8.0555, 0.0, 2.1528, 0.924, 108.0778, 8.9203, 2.4017, 15.876, 18.3456, 13.5525, 8.8306, 0.7027, 0.6017, 6.9853, 10.9632, 57.3035], [69.0432, 9.6936, 104.1701, 120.4892, 6.2816, 10.5506, 2.3303, 22.7498, 1.0575, 5.2104, 18.216, 8.1396, 161.9695, 22.7371, 9.6754, 23.9904, 30.8259, 18.4907, 18.779, 15.9869, 2.6827, 0.2696, 8.5493, 141.22], [38.9418, 1.7343, 2.3712, 31.3896, 13.7802, 451.4532, 22.3008, 28.6489, 50.4504, 31.4874, 37.2414, 32.8261, 33.672, 9.6079, 32.7891, 352.1914], [152.2848, 14.784, 110.0938, 208.3632, 19.0632, 38.1884, 10.99, 69.3827, 21.4461, 28.4544, 27.4296, 9.639, 271.5198, 42.6624, 19.2136, 18.3456, 27.7389, 48.6032, 26.6782, 24.0389, 8.5615, 7.5981, 20.1663, 234.5797], [169.5456, 24.6288, 203.5723, 235.3694, 12.7296, 44.1805, 18.831, 83.4698, 28.764, 24.6168, 38.2536, 0.0, 434.3728, 37.0872, 45.7695, 86.6477, 74.4849, 48.6032, 50.3383, 28.1088, 20.907, 103.0945, 379.6628]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

