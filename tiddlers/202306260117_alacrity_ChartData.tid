created: 20230626011754000
creator: Drevarr
modified: 20230705163537800
modifier: drevarr
tags: ChartData
title: 202306260117_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Momomeko", "Drevarr Moonwillow", "Elon The Archmagus", "Tegan Parker", "Miphest\u00f6", "Raziel Umbra", "Eibh\u00ebar", "Zhavashian", "Primal Clone", "Seiker Novus Terra", "Daddy Demon", "Black Raspberry Pie"];
const professions = ["Chronomancer", "Scrapper", "Tempest", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[90.1773, 105.6696, 223.4457, 212.3856, 0.0, 56.8075], [30.4722, 30.6167, 0.0, 22.8438, 82.08, 12.1598, 32.8073, 29.9754, 0.0, 112.6499, 31.7285, 35.4211, 87.5502, 56.385, 123.9143, 2.7577, 73.6, 32.688, 31.3473, 15.8294, 39.884, 13.3414, 55.199, 5.5393, 159.0, 30.8664, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37.1675, 120.566, 154.5661, 88.7272, 96.2507, 66.1755, 46.773, 64.0587, 37.3594, 560.0, 64.7784, 18.9789], [336.6184, 113.2312, 164.5056, 0.0, 8.8546, 85.05, 82.8905, 9.6618, 74.8992, 206.3521, 228.1342, 143.0411, 0.0, 100.142, 44.258, 59.6252, 33.124, 58.802, 50.635, 16.3028, 0.0, 246.0, 49.8528, 0.0], [31.7358, 32.6522, 94.8532, 217.81, 499.0822, 78.4392, 109.2773, 152.0509, 88.9818, 82.1862, 638.0, 96.5304, 40.0347], [79.0722, 109.8108, 31.0118, 59.3939, 223.9488, 126.3856, 143.6778, 0.0, 67.5598, 170.1057, 106.6533, 237.9065, 0.0, 6.3592, 198.49, 142.0974, 191.0677, 145.4908, 68.3354, 74.503, 0.0, 125.8, 73.1592, 0.0], [78.6105, 141.6839, 73.8644, 200.408, 250.0416, 22.2869, 144.3218, 118.3896, 312.5171, 64.5141, 0.0, 30.4996, 152.306, 252.0685, 63.0356, 102.557, 80.848, 64.4055, 94.3353, 0.0, 478.8, 63.3528, 0.0], [33.8256, 71.4235, 269.2787, 358.4624, 142.8192, 34.5206, 23.2716, 92.5344, 146.1668, 72.4229, 204.6465, 209.3032, 390.0248, 303.9795, 0.0, 60.72, 202.9803, 18.0467, 75.1023, 89.4505], [99.6786, 49.9732, 105.7622, 341.7926, 41.7312, 70.1131, 79.0099, 164.3166, 17.3177, 208.6916, 147.2612, 0.0, 255.116, 297.2851, 25.4369, 182.988, 311.2664, 142.64, 145.3634, 148.8855, 118.7854, 128.4055, 0.0, 407.4, 144.072, 0.0], [128.6685, 210.9205, 251.8798, 379.5775, 200.5344, 5.8397, 63.4955, 148.743, 0.0, 142.6347, 126.1361, 282.9785, 367.3779, 679.041, 217.9089, 0.0, 650.4, 82.4688, 40.6677], [115.6437, 144.8944, 239.314, 423.0425, 249.6096, 78.503, 35.948, 161.3682, 12.2265, 218.9871, 198.3134, 288.518, 385.1603, 707.2334, 426.9375, 72.1535, 180.274, 305.6499, 116.4083, 159.8552, 125.7967, 115.3916, 104.0834, 31.4847, 643.2, 40.5, 24.2206], [136.1772, 157.0853, 360.7835, 466.8779, 345.9456, 50.5613, 48.7758, 219.0132, 7.4362, 375.5997, 117.0065, 131.3077, 375.3989, 659.6694, 205.0666, 33.6895, 205.114, 521.2112, 159.8625, 161.6706, 76.2303, 134.7015, 132.151, 0.0, 584.4, 158.6952, 8.6933]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

