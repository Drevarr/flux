created: 20230515221048000
creator: Drevarr
modified: 20230705163530131
modifier: drevarr
tags: ChartData
title: 202305152210_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Sheep Poh", "Ryvalia Fazebringer", "Drevarr Moonwillow", "High Sorcer Baradun", "Miphest\u00f6", "Primal Clone", "Eibh\u00ebar", "Artakama Nahid", "Tika Mi", "Rosetendril", "Black Raspberry Pie"];
const professions = ["Tempest", "Chronomancer", "Scrapper", "Tempest", "Tempest", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 39.1049, 252.8186, 43.1498, 210.0336, 0.0, 39.3424], [17.4418, 40.317, 11.0352, 31.0824, 9.3662, 136.7962, 146.5402, 0.0, 93.0784, 56.2435, 26.7408, 0.0, 12.611, 9.4696, 37.2456, 42.5295, 0.0, 24.9696, 75.4531, 0.0, 66.0895, 0.0, 0.0, 0.0, 35.753], [10.8841, 211.098, 2.6836, 5.4216, 7.6723, 202.8518, 131.8387, 0.0, 8.281, 26.819, 11.1888, 2.7495, 47.4531, 0.0, 18.7488, 28.899, 26.0698, 78.8256, 44.6448, 27.0833, 79.6105, 0.0, 28.9421, 2.2154, 50.1106], [109.2586, 68.2128, 0.0, 131.4054, 53.3798, 47.1492, 94.2435, 39.4171, 176.3376, 150.5654, 55.3115, 179.3858, 43.7175, 104.8293, 0.0, 18.0877], [123.8314, 394.128, 336.0288, 20.6184, 322.9295, 198.645, 277.6069, 0.0, 330.6452], [82.295, 0.0, 167.0963, 377.8291, 460.487, 0.0, 0.0, 173.2385, 81.42, 68.3856, 18.5866, 123.4427, 12.8099, 97.8516, 175.2075, 90.1282, 167.7696, 197.1187, 8.7448, 248.2145, 33.8527, 107.0171, 0.0, 116.69], [75.0044, 132.729, 17.0795, 32.8536, 169.0891, 341.0534, 491.5498, 0.0, 0.3643, 215.1404, 85.1299, 84.4776, 0.0, 93.7744, 0.0, 53.3988, 189.9495, 98.7437, 219.096, 226.5638, 40.921, 188.5941, 67.9183, 77.1373, 0.0, 210.1547], [43.4679, 282.37, 4.5144, 229.5706, 598.4832, 700.4525, 13.5198, 10.034, 222.7589, 99.9413, 79.812, 3.1344, 105.2133, 55.0337, 98.5068, 214.6365, 108.6538, 171.1968, 156.359, 35.3247, 162.0767, 124.0556, 201.9698, 30.303, 177.1465], [396.375, 74.0111, 58.2768, 148.065, 1013.7907, 878.5296, 0.0, 0.0, 238.1616, 88.8115, 45.9, 37.6498, 108.5681, 45.7912, 0.0, 54.6394, 173.5632, 161.1302, 32.8375, 132.9367, 204.8194, 119.7692, 0.0, 103.4586], [373.423, 74.3622, 81.432, 346.6476, 641.5834, 712.7827, 23.9788, 43.43, 372.8106, 85.583, 49.5504, 19.7964, 102.3434, 129.5579, 50.9292, 180.531, 125.617, 230.6016, 120.9158, 6.5241, 126.7007, 220.2909, 139.8974, 85.4892, 100.7138], [0.0, 0.0, 360.4975, 659.6198, 800.5171, 0.0, 5.8291, 339.1898, 151.9651, 115.5384, 34.9736, 116.6925, 61.617, 88.4772, 339.8265, 106.2878, 393.9648, 148.1117, 7.1952, 201.2991, 247.8272, 151.3992, 93.599, 91.2125]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

