created: 20230426221022000
creator: Drevarr
modified: 20230705163526841
modifier: drevarr
tags: ChartData
title: 202304262210_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Rey Peltrow", "Sister Elon\u00edth", "Lucas Ryn", "Mac Adaymia", "Zaylen Harker", "Johosh The Great", "Tegan Parker", "Miphest\u00f6", "Zadie Miststep", "\u00c1rkantor", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[24.7715, 1079.2704, 413.3988, 61.096, 204.8429, 114.9312, 130.2696, 983.8534, 172.3714, 149.9845, 24.5272, 29.4408, 165.4588, 20.295, 13.3888, 228.6442], [2664.0822, 874.937, 291.1967], [502.2058, 867.2769, 69.0915, 431.8802, 331.2842, 0.0, 97.5467, 1706.6513], [0.0, 0.0, 80.2944, 308.5786, 1282.0752, 182.4077, 689.6235, 84.6188, 288.4381, 370.877, 51.6582, 92.4007, 964.0565], [104.1365, 974.0562, 376.3516, 57.679, 102.263, 171.0336, 150.5338, 878.8718, 19.9752, 530.4796, 0.0, 198.4801, 419.0238, 0.0, 14.8916, 701.8938], [43.4102, 575.9286, 306.5829, 95.1976, 66.0211, 143.616, 125.184, 1045.17, 193.7107, 405.3017, 14.7757, 326.1386, 291.5692, 4.158, 129.7435, 1226.6182], [69.9855, 787.4568, 241.251, 146.931, 63.6768, 99.9936, 85.9858, 1188.7067, 306.3514, 599.1748, 23.914, 325.648, 325.9074, 51.8562, 163.5341, 1175.1433], [25.5171, 1453.2024, 482.3911, 49.5465, 146.425, 139.968, 299.5027, 1847.8606, 144.601, 930.0567, 93.2231, 375.9427, 381.3862, 0.0, 158.3426, 1695.0794], [0.0, 2263.3884, 653.6516, 140.1653, 91.1117, 170.2272, 360.2952, 1977.9262, 369.0053, 878.7261, 75.4805, 418.4683, 487.3336, 0.0, 182.2511, 1630.4366], [160.63, 1779.1098, 651.8768, 167.638, 214.3469, 176.5248, 531.6408, 2808.9524, 551.5104, 1160.3764, 0.0, 496.4046, 484.4008, 66.4686, 275.7447, 2758.8934], [220.3702, 3511.6614, 1189.2842, 526.013, 343.7914, 328.6272, 874.1755, 4457.0694, 1340.2872, 2232.9756, 163.818, 924.5229, 1246.0734, 155.8458, 524.9851, 4005.4631], [452.9818, 6087.393, 2176.4722, 484.7356, 611.1706, 455.04, 1014.3816, 6324.9043, 1228.2312, 3673.285, 140.0028, 1226.7, 1461.3898, 363.6468, 579.5876, 6414.4073]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

