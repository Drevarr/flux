created: 20230508221143000
creator: Drevarr
modified: 20230705163529384
modifier: drevarr
tags: ChartData
title: 202305082211_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Elektra Gd", "F\u00f9gly", "Newtype Khan", "Mac Aaroni", "Grasszanine", "Miphest\u00f6", "Artakama Nahid", "Tegan Parker", "High Sorcer Baradun", "Jeckyll Mbs", "Xanvias Einzbern", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Spellbreaker", "Tempest", "Spellbreaker", "Tempest", "Tempest", "Tempest", "Tempest", "Berserker", "Berserker", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 0, 0.304, 0.025, 0.355, 0.537, 0.54, 0.835, 0.107], [0.368, 0.739, 0.745, 0.096, 0.587, 0.508, 1.284, 0.475], [0, 0, 0, 0, 0.141, 0.165, 0, 0, 0.432, 0.145, 1.58, 0.257, 0.707, 0.679, 0, 0.801, 0.634, 1.133], [0, 0.416, 0, 0, 0.245, 0.321, 0.203, 0, 0.495, 0.416, 0.406, 0.659, 0.182, 0.482, 0, 0.339, 0.476, 0.622], [0.518, 0.694, 0, 1.071, 0, 0.501, 0.903, 1.391, 0, 0.97, 0, 0.795, 0.633, 1.132], [0.047, 0, 0, 0, 0.527, 0.278, 0, 0.238, 0.472, 0.642, 1.036, 0.56, 0.709, 0, 0.281, 0.385, 0.68], [0.088, 0.417, 1.191, 0.368, 0.273, 0.509, 0.642, 0.238, 0.472, 0.542, 0.543, 0.449, 0.376, 0, 0.448, 0.523, 0.675], [0.368, 0.208, 0.337, 0.488, 0, 0.645, 0.712, 0.401, 0.542, 0.927, 0.182, 0.407, 0.654, 0.732, 0.571, 0.351], [0.366, 0.362, 0.991, 0.506, 0.508, 0.558, 0.642, 0.652, 0.548, 0.306, 0, 0.407, 0.678, 0.226, 0.757, 0.678], [0.614, 0.608, 0, 2.0, 0.313, 0.331, 0.541, 0, 0.396, 0.472, 0.84, 0.792, 1.359, 1.281, 0, 0.377, 0.317, 0.648], [0.613, 0.694, 0, 0, 0.397, 0.863, 0.846, 1.032, 0.438, 1.023, 1.94, 1.12, 1.145, 0.281, 0, 1.037, 0.524, 1.133], [0.553, 0.833, 1.361, 2.044, 0.643, 1.125, 1.04, 0.762, 0.534, 1.425, 1.382, 1.325, 0.541, 1.588, 1.332, 1.337, 1.235, 1.398], [2.997, 1.19, 1.473, 1.08, 1.204, 1.471, 1.756, 1.893, 2.035, 1.702, 2.315, 0.168, 1.667, 1.497, 2.319]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

