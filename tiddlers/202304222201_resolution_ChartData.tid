created: 20230422220129000
creator: Drevarr
modified: 20230705163526437
modifier: drevarr
tags: ChartData
title: 202304222201_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Ark Darkness", "Belvyn Brightblade", "Ever Moore", "Jupi Jupi Jupi", "Zaylen Harker", "Sygaldry Verdandi", "Yummy Kiwi", "Bella Sassy", "Koralia Danai"];
const professions = ["Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[49.1022, 135.679, 0.0, 20.0032, 196.6504, 104.2536, 0.0, 70.4126, 40.0248, 34.9965, 44.1612, 23.0958, 240.7096, 95.3644, 139.6339], [1265.232, 123.3232, 227.3089], [27.6858, 66.5067, 0.0, 23.6551, 215.2856, 281.9784, 60.3536, 92.7535, 0.0, 23.5813, 29.7313, 589.0613, 116.5901, 177.3659], [337.0588, 222.5262, 977.209, 255.3611, 262.9935, 32.6726, 0.0, 580.4045, 327.9713, 205.233], [858.3232, 34.7787, 98.5684, 1541.3272, 246.1624, 0.0, 530.3489], [158.5296, 138.402, 46.1825, 62.5786, 893.0573, 180.3875, 538.5146, 229.5324, 150.754, 40.0109, 231.8904, 459.2916, 102.0545, 251.6222], [563.7744, 0.0, 0.0, 2883.552, 274.0408, 0.0, 379.5805, 83.9736, 122.364, 45.9988, 40.216, 674.4566, 246.4461, 403.886, 53.6993, 143.9726, 19.0445, 108.2637, 344.9434, 174.623, 174.2111], [113.319, 632.6802, 42.5997, 65.2736, 3705.9528, 567.248, 628.8572, 224.0604, 183.744, 133.4637, 89.2671, 854.2288, 223.4718, 561.2308, 186.6546, 155.6516, 34.2124, 179.5886, 332.8381, 163.3192, 342.6773], [99.9864, 1110.6222, 121.4136, 49.4816, 3667.2112, 414.5944, 0.0, 597.7554, 159.7068, 329.3235, 171.745, 64.3016, 968.3654, 209.1807, 503.3495, 232.595, 154.1446, 35.3808, 331.8224, 291.4781, 244.1523, 412.4048], [108.6534, 1068.7723, 63.3897, 316.3335, 4423.408, 620.1008, 0.0, 553.8198, 322.9943, 298.9305, 168.6825, 24.1589, 804.6221, 194.377, 765.5481, 305.8616, 209.6123, 82.8064, 274.512, 277.5332, 280.8898, 272.8062]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

