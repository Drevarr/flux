created: 20230527220043000
creator: Drevarr
modified: 20230705163531903
modifier: drevarr
tags: ChartData
title: 202305272200_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Aronorf Xideliesi", "Lucas Ryn", "Tribal S", "Tootsie Pop Rocks", "Tegan Parker", "Daddy Demon", "Zadey Starbolt", "Drevarr Moonwillow", "Johosh Of The North"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Druid", "Scrapper", "Tempest", "Tempest", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2192, 0.16, 0.4836, 0.1967, 0.4037, 0.3016, 0.3889, 0.2621, 0.0, 0.4231, 0.4194, 0.0952, 0.0127, 0.1094], [0.045, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0916, 0.0185, 0.3274, 0.519, 0.1712, 0.0978, 0.2254, 0.0, 0.0994, 0.1151, 0.1481, 0.1893, 0.0, 0.6154, 0.0323, 0.0, 0.2381, 0.0, 0.3125], [0.0, 0.0244, 0.0, 0.0, 0.025, 0.0, 0.1527, 0.2593, 0.3009, 0.557, 0.2534, 0.0222, 0.216, 0.3279, 0.0994, 0.1389, 0.3519, 0.199, 0.0, 0.1154, 0.0645, 0.0, 0.2571, 0.0253, 0.2422], [0.0, 0.9441, 0.881, 1.1111, 1.2233], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0153, 0.0, 0.0354, 0.9536, 0.0, 0.3956, 0.9906, 0.623, 0.5404, 0.1905, 0.7778, 0.3398, 0.0, 0.6154, 0.6452, 0.0, 0.5429, 0.0, 0.5703], [0.9658, 0.4533, 1.4085, 0.8197, 1.6025, 0.7183, 1.5833, 1.4806, 0.0, 1.5, 1.3548, 0.0, 1.5429, 0.0886, 0.9219], [0.7733, 1.7324, 0.918, 1.5776, 1.3095, 1.5833, 1.4951, 0.087, 2.1282, 1.3548, 0.2593, 1.6381], [0.1982, 0.0, 0.6393, 0.0526, 1.3, 0.2614, 0.7824, 1.1481, 0.7876, 1.789, 0.9452, 0.7156, 1.6432, 1.0492, 0.8137, 1.2063, 1.9722, 0.9757, 0.087, 1.2436, 0.9677, 0.037, 1.7238, 0.5823, 1.1328], [0.3153, 0.5854, 0.7541, 0.3421, 1.25, 0.3523, 0.9237, 1.3519, 1.5044, 2.9747, 1.6096, 0.7822, 1.7981, 0.9836, 2.0248, 1.3214, 1.9074, 2.0971, 0.1739, 1.9615, 1.1613, 0.0, 2.0857, 0.8987, 1.6562], [0.4324, 0.0732, 0.4754, 0.0789, 1.1, 0.5227, 1.1947, 1.2222, 1.7522, 3.6287, 1.0959, 0.8, 2.0188, 0.8361, 2.1988, 1.2222, 1.9444, 2.3786, 0.0, 1.9872, 1.0645, 1.8952, 0.6582, 1.7656]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

