created: 20230701000406000
creator: Drevarr
modified: 20230705163540172
modifier: drevarr
tags: ChartData
title: 202307010004_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Traidoruns Maximus", "Oo Dads Mad", "Zefirokai", "Seiker Soulkeeper", "Zayde Sunsabre", "Newtype Khan", "Arcanophage Farra", "Gavann", "Dingle Mcbingle", "Gamora Titus", "Aronorf Xideliesi"];
const professions = ["Scrapper", "Firebrand", "Spellbreaker", "Catalyst", "Firebrand", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.3706, 0.0, 0.0, 11.1514, 6.8319, 2.592, 0.0, 5.2618, 2.646, 0.0, 5.682, 0.0, 2.587, 12.5244, 0.0, 8.084, 10.387, 10.3917, 0.0, 5.1752, 5.1667, 29.5909], [20.9004, 12.6721, 20.929, 5.9443, 18.8094, 6.456, 31.3181, 17.6904, 6.4435], [18.2341, 0.0, 10.895, 21.9802, 20.6255, 18.672, 21.3312, 10.8864, 10.9025, 0.0, 10.927, 10.971, 0.0], [0.0, 0.0, 0.0, 0.0, 3.3295, 33.744, 23.5128, 29.6352, 25.48, 0.0, 49.0622, 22.563, 0.0, 0.0, 26.8069, 0.0, 17.343, 10.3917, 12.6202, 0.0, 42.7939], [57.082, 35.3501, 70.0502, 52.1626, 69.8758, 35.616, 65.351, 56.4883], [17.0873, 19.9543, 27.481, 15.2525, 13.88, 0.0, 27.8275, 25.0387, 13.769, 14.639, 78.3466, 14.8005, 32.9848, 13.23, 9.5805, 0.0, 0.0, 13.6178, 13.9104, 13.8147, 69.863, 52.0016], [39.9086, 0.0, 0.0, 19.031, 35.1541, 0.0, 0.0, 21.9845, 12.446, 21.1262, 50.8105, 23.322, 40.2693, 23.7434, 19.0228, 58.515, 42.676, 0.0, 0.0, 0.0, 62.8992, 64.1861], [0.0, 13.8189, 56.4595, 19.8605, 45.9641, 6.336, 13.9138, 41.9731, 16.856, 0.0, 13.8773, 45.1605, 62.0209, 35.0683, 0.0, 55.178, 67.774, 40.8533, 27.4583, 132.8746, 55.0477], [31.872, 20.9918, 32.3266, 43.953, 27.0504, 130.3591, 54.096, 54.0896, 13.3711, 65.8197, 0.0, 47.705, 27.6388, 37.2099, 108.3888, 249.9994], [40.9219, 36.6797, 18.4202, 63.9229, 45.4365, 37.9206, 43.3591, 63.0561, 42.065, 59.455, 70.0432, 40.8453, 113.4432, 278.2848], [72.4838, 93.7267, 37.1432, 17.904, 47.8013, 50.6822, 56.105, 52.2158, 128.3922, 61.7895, 45.2392, 28.6474, 73.5578, 28.012, 51.23, 49.2287, 0.0, 26.9023, 88.2835, 184.943], [65.3676, 27.8099, 52.4534, 92.5747, 55.304, 18.312, 35.4389, 32.5987, 42.042, 40.7347, 93.6444, 39.4335, 49.6644, 39.3725, 56.1932, 51.841, 36.66, 43.6141, 74.5909, 130.9651, 180.5914]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

