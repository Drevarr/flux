created: 20230902151655000
creator: Drevarr
tags: ChartData
title: 202309021516_blocks_ChartData
type: text/vnd.tiddlywiki


const names = ["Forever Dreaming", "Goggles With Frames", "High Sorcer Baradun", "Elonith Requiem", "Daphne Agla\u00e9", "Lord Fluffernaut", "Mort\u00e4rion", "Gamora Titus", "Lord Erin The Wise", "Greg The Knight", "Loganlek", "Regis Hawkesburne", "Luke The Ghastly", "Adrinz", "Scarlet Merc\u00fcry", "Sofya De Nova", "Elleerie", "Bee Nemesis", "Cat Wigglebooty", "Lucky Luprac\u00e1n", "J\u00e2sm\u00eene", "Elizabeth Conbolt", "Yummy Kiwi", "Rod Reaper", "Liu Mira", "Keypek The Drunk", "Mister Jekyll", "Sub Train", "Venomina The Sly", "Jimbo The Pleb", "Air One Com", "Mike The Archmagus", "Glorious Gluvs", "Arcanophage Farra", "Zaedy Zae", "Mistwalker Cael", "Budget Chicken", "Newtype Khan", "Tegan Parker", "Koralia Danai", "Xanvias Einzbern", "Primal Clone", "Rina Of Theros", "Be\u00eb", "Rahani Sunray", "Gestern Yesteryear", "Bella Sassy", "Eibh\u00ebar", "Drevarr Moonwillow", "Ryvalia Fazebringer"];
const professions = ["Scourge", "Berserker", "Tempest", "Reaper", "Reaper", "Berserker", "Scrapper", "Firebrand", "Weaver", "Firebrand", "Berserker", "Berserker", "Scourge", "Guardian", "Firebrand", "Weaver", "Reaper", "Berserker", "Scrapper", "Scrapper", "Tempest", "Tempest", "Firebrand", "Reaper", "Berserker", "Scrapper", "Reaper", "Firebrand", "Druid", "Berserker", "Firebrand", "Weaver", "Berserker", "Spellbreaker", "Druid", "Herald", "Firebrand", "Spellbreaker", "Tempest", "Firebrand", "Berserker", "Chronomancer", "Reaper", "Reaper", "Chronomancer", "Firebrand", "Firebrand", "Chronomancer", "Scrapper", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Blocked Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1, 3, 0, 1, 3, 2, 1, 0, 0, 0, 4, 0], [0, 1, 1, 1, 0, 1, 0, 6, 0, 0, 2, 1, 3, 0], [9, 2, 0, 1, 3, 2], [0, 2, 1, 1, 3, 5, 5, 0, 1, 0, 0, 0], [4, 15, 2, 1, 1], [3, 2, 7, 6, 1, 0, 1, 1, 2, 0], [7, 0, 17, 3, 0, 0], [1, 3, 3, 12, 1, 2, 2, 6, 0], [7, 1, 17, 0, 0, 0, 2, 0, 4, 1], [9, 1, 17, 4, 1, 2], [8, 1, 13, 4, 0, 1, 0, 0, 0, 0, 1, 1, 3, 1, 0, 0, 4, 0], [0, 7, 7, 0, 0, 1, 0, 0, 1, 0, 2, 3, 13, 1, 0, 0, 0, 2, 0], [11, 0, 20, 3, 1, 0, 4], [3, 2, 12, 5, 1, 2, 15, 1], [15, 1, 17, 5, 1, 1, 2], [6, 1, 14, 1, 0, 0, 1, 0, 1, 1, 3, 3, 7, 2, 0, 0, 0, 4, 0], [10, 3, 13, 2, 2, 0, 2, 0, 1, 0, 0, 3, 3, 0, 0, 0, 5, 0], [5, 0, 13, 4, 0, 1, 2, 0, 1, 2, 0, 3, 0, 7, 3, 0, 0, 0, 5, 0], [8, 0, 11, 1, 0, 0, 3, 2, 1, 0, 4, 11, 1, 0, 0, 0, 6, 0], [7, 1, 7, 3, 0, 0, 10, 1, 3, 1, 2, 3, 3, 2, 0, 0, 0, 6, 0], [9, 0, 16, 2, 0, 1, 0, 3, 1, 0, 1, 2, 4, 3, 0, 1, 6, 0], [6, 1, 13, 3, 0, 0, 0, 3, 2, 1, 3, 3, 8, 1, 0, 1, 5, 0], [14, 1, 20, 4, 1, 4, 1, 2, 3, 3], [14, 1, 17, 2, 1, 0, 0, 0, 1, 0, 0, 1, 1, 4, 2, 0, 0, 2, 7, 0], [6, 1, 18, 8, 0, 0, 0, 3, 0, 2, 2, 14], [11, 0, 14, 3, 1, 0, 4, 0, 1, 0, 0, 2, 4, 12, 0, 0, 0, 0, 4, 0], [13, 1, 18, 4, 0, 0, 0, 1, 2, 0, 1, 3, 10, 1, 0, 0, 0, 4, 0], [11, 2, 15, 3, 0, 2, 2, 1, 2, 1, 0, 3, 3, 10, 4, 0, 0, 1, 4, 0], [11, 19, 4, 1, 0, 2, 1, 1, 2, 3, 3, 13, 0, 0, 5, 0], [8, 1, 19, 4, 0, 0, 3, 1, 3, 4, 1, 1, 2, 12, 1, 0, 2, 1, 4, 0], [10, 2, 19, 2, 0, 1, 3, 0, 2, 2, 4, 3, 10, 2, 1, 0, 1, 5, 0], [13, 1, 23, 3, 0, 1, 1, 1, 1, 0, 1, 3, 12, 1, 0, 0, 8], [9, 2, 20, 2, 1, 0, 4, 1, 2, 1, 0, 2, 3, 18, 1, 0, 0, 0, 3, 0], [13, 0, 21, 0, 1, 2, 0, 0, 2, 2, 3, 8, 17, 1, 0, 0, 0, 6, 1], [13, 3, 21, 3, 0, 2, 2, 1, 1, 2, 0, 2, 4, 13, 5, 0, 0, 1, 5, 0], [16, 0, 17, 2, 1, 4, 0, 4, 1, 1, 1, 7, 16, 3, 0, 0, 1, 4, 0], [11, 3, 17, 6, 3, 1, 1, 0, 4, 2, 0, 5, 4, 13, 5, 2, 0, 2, 5, 1], [18, 3, 27, 3, 0, 1, 2, 2, 3, 1, 1, 6, 13, 3, 0, 0, 6, 0], [16, 3, 23, 9, 0, 2, 0, 0, 3, 1, 0, 5, 4, 16, 1, 0, 0, 0, 7, 0], [10, 4, 25, 7, 1, 1, 2, 2, 4, 1, 1, 3, 6, 17, 1, 1, 1, 6, 0], [11, 2, 27, 3, 1, 1, 5, 0, 3, 2, 3, 4, 7, 20, 6, 0, 0, 0, 8, 0], [10, 2, 27, 5, 2, 4, 1, 3, 6, 0, 5, 6, 19, 3, 0, 2, 1, 8, 0], [16, 0, 29, 8, 0, 1, 4, 3, 3, 0, 3, 7, 19, 2, 0, 0, 0, 10, 0], [16, 2, 27, 4, 1, 1, 0, 2, 5, 0, 0, 7, 10, 24, 1, 0, 1, 2, 3, 0], [17, 1, 25, 4, 0, 0, 2, 0, 0, 1, 4, 17, 18, 2, 12, 0, 9, 0], [22, 3, 26, 4, 2, 3, 3, 2, 3, 3, 6, 3, 8, 16, 4, 0, 2, 6], [19, 2, 24, 6, 2, 2, 3, 0, 6, 3, 3, 3, 5, 22, 5, 1, 1, 1, 10, 2], [18, 1, 30, 9, 1, 7, 0, 2, 2, 3, 4, 9, 28, 4, 0, 0, 0, 6, 1], [25, 1, 33, 12, 0, 2, 5, 0, 6, 5, 3, 2, 8, 27, 6, 1, 0, 2, 9, 0], [27, 2, 30, 10, 1, 1, 5, 1, 5, 6, 3, 4, 12, 24, 6, 0, 1, 3, 17, 0]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

