created: 20230204220933000
creator: Drevarr
modified: 20230705163518702
modifier: drevarr
tags: ChartData
title: 202302042209_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Mike The Archmagus", "Vinthry Stormgrave", "High Sorcer Baradun", "Cat Wigglebooty", "Bambiae", "Raziel Umbra", "Ryvalia Fazebringer", "Black Raspberry Pie", "Aronorf Xideliesi", "Zaylen Harker", "Zaidy Sagemist", "Blanco Padre Guard", "Ravioli Fetabringer", "Drevarr Moonwillow", "Mac Arons", "Sygaldry Verdandi", "Koralia Danai", "Johosh The Great"];
const professions = ["Spellbreaker", "Tempest", "Tempest", "Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[662.0292, 181.2775, 43.393, 184.3351, 203.6906, 358.98, 42.793, 0.0, 0.0, 0.0, 0.0], [428.2757, 154.4215, 47.1408, 120.5714, 136.685, 260.8395, 41.1802, 105.0526, 16.8927, 230.5989, 244.2478], [709.8424, 130.9226, 32.2666, 90.2629, 96.2615, 268.656, 19.8374, 65.5096, 0.0, 230.0432, 215.1095], [391.4963, 267.1769, 18.3878, 172.0792, 166.5701, 255.339, 28.8691, 135.7643, 17.8238, 228.0984, 277.6712], [498.5652, 166.2697, 16.5725, 124.7119, 175.3784, 296.7375, 36.6643, 51.8013, 9.702, 331.1734, 297.6681], [468.733, 140.0062, 36.4243, 122.3932, 150.5265, 285.7365, 80.4787, 134.4462, 19.551, 323.6719, 243.6765], [507.5557, 186.2142, 39.6451, 149.058, 153.8296, 295.5795, 35.6429, 156.9857, 19.1835, 261.438, 249.6756], [389.8616, 167.2571, 38.2397, 140.777, 169.8732, 395.457, 71.232, 68.014, 16.268, 323.1163, 279.6709], [517.7722, 188.9788, 35.0189, 167.7731, 189.3772, 269.814, 47.0938, 93.1897, 20.2003, 362.2903, 353.6595], [1393.5306, 446.4797, 86.6102, 355.4205, 344.7797, 508.0725, 107.6275, 34.007, 20.1023, 767.6443, 735.0289], [1146.2913, 338.2661, 79.056, 351.28, 502.6988, 652.8225, 144.8832, 0.0, 18.8895, 1044.6408, 878.7209], [1581.5142, 364.3322, 95.3357, 325.9402, 471.3981, 865.605, 129.0778, 91.4761, 31.85, 365.0686, 1121.2548], [1060.064, 515.0018, 91.9392, 515.7407, 665.9659, 631.11, 82.2528, 422.5829, 22.05, 960.4583, 922.9998], [1381.6795, 458.3279, 96.1555, 323.1246, 464.7919, 804.231, 146.3347, 408.0838, 22.4175, 937.1206, 988.1325], [1215.3548, 662.7093, 162.6797, 575.8607, 399.0447, 959.982, 108.0576, 337.0382, 22.7727, 814.3197, 872.7218], [1642.8132, 521.1233, 190.7885, 486.4259, 581.3438, 576.105, 113.2723, 387.6532, 40.3392, 996.854, 1041.8385], [1793.6087, 540.8703, 150.7334, 610.9722, 587.4782, 655.7175, 121.2826, 529.6126, 61.9728, 1014.0795, 1089.2597], [1892.5045, 717.8034, 139.1386, 428.7902, 5.3479, 917.4255, 121.0138, 432.3368, 36.7623, 1342.1967, 1160.9629], [2825.0666, 1013.416, 223.6992, 952.4806, 864.4658, 1618.5945, 170.5805, 720.4735, 23.03, 1889.244, 1788.0085]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

