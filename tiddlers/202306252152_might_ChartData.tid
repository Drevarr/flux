created: 20230625215204000
creator: Drevarr
modified: 20230705163536674
modifier: drevarr
tags: ChartData
title: 202306252152_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Demon Maddx", "Irish Necroman", "Tika Fiery", "Zayde Sunsabre", "Tegan Parker", "Elon The Mender", "Oo Dads Mad", "Fribble Bibble", "Black Raspberry Pie", "Traidoruns Maximus", "Cersei Crownguard", "Gestern Yesteryear", "Johosh The Mighty", "Gavann", "Koralia Danai", "Drevarr Moonwillow", "Gabe Malhorn", "Sygaldry Verdandi", "Solus Sanctus", "Crusader Siolith", "Bella Sassy", "High Sorcer Baradun", "Grasszanine", "Tribal S", "Newtype Khan", "Miphest\u00f6", "Blancooo Padreee", "Arcanophage Farra"];
const professions = ["Reaper", "Reaper", "Firebrand", "Berserker", "Tempest", "Druid", "Spellbreaker", "Scrapper", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Druid", "Spellbreaker", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.7868, 4.968, 3.7177, 6.94, 5.1106, 1.9465, 3.3464, 2.6496, 3.797, 3.744, 4.8, 6.2472, 4.142, 2.8426, 1.5729, 5.7056, 5.0266, 3.9744], [6.2505, 6.5136, 3.5861, 5.9671, 5.7658, 2.682, 2.9516, 1.3138, 2.377, 9.312, 1.7013, 1.9608, 3.6775, 2.538, 8.9655, 3.2703, 8.279, 4.4381], [1.8198, 9.0528, 3.5532, 7.5238, 7.9498, 0.0, 1.88, 0.0, 1.2965, 11.904, 2.2481, 0.8664, 5.6904, 0.0, 5.4003, 16.2121, 7.6877, 1.1261], [1.7011, 2.484, 3.6848, 11.6748, 7.1635, 3.9737, 3.3276, 2.9808, 6.6062, 7.584, 1.1241, 17.2368, 3.3291, 2.6395, 3.2507, 8.9758, 7.0224, 2.0866], [14.8656, 24.1163, 0.0, 11.7968, 11.8982, 40.5821, 0.0], [0.0, 7.8384, 2.3688, 18.4851, 10.1774, 0.0, 1.5228, 0.0, 1.4818, 10.752, 2.2785, 0.0, 6.7742, 2.9272, 5.7149, 12.2461, 14.784, 6.061], [1.4637, 14.4072, 11.2847, 19.1337, 8.605, 2.0183, 8.5352, 2.3515, 12.9345, 16.512, 8.2634], [6.4483, 10.6536, 4.0467, 12.2585, 8.2118, 0.1525, 3.7036, 2.749, 13.5828, 15.936, 2.5823, 4.0128, 3.4452, 1.9796, 4.7711, 7.5842, 3.7699, 7.1208], [5.1824, 6.1272, 8.5211, 11.4802, 6.9888, 0.0, 1.7296, 0.0, 3.6735, 21.504, 0.0, 12.8592, 11.7678, 6.7342, 5.6624, 0.0, 6.6528, 7.187], [16.6042, 5.1542, 1.202, 9.2496, 2.4398, 7.6249, 28.032, 6.5925, 7.6608, 4.8775, 6.1927, 3.6701, 14.3335, 9.4618, 4.6368], [22.6176, 11.3807, 7.4617, 0.0, 37.0166, 30.3811, 29.6093], [9.8109, 26.6616, 3.29, 8.9507, 0.4805, 4.7362, 0.0, 4.5816, 1.1422, 10.944, 2.6431, 9.2568, 10.6453, 4.8222, 14.4183, 22.8222, 21.3629, 0.0], [5.7758, 11.04, 9.2778, 16.6042, 7.4693, 2.7, 8.4224, 2.76, 7.9027, 21.504, 4.9519, 11.0808, 7.0452, 7.191, 5.4003, 14.8205, 12.049, 4.8686], [10.8394, 14.4624, 9.0804, 7.7183, 10.3085, 1.974, 2.1528, 8.2423, 7.968, 4.6785, 13.908, 12.9291, 1.2352, 10.3287, 23.9355, 22.3978, 0.0], [15.6262, 11.6472, 11.6795, 10.7668, 7.6877, 2.1079, 3.5908, 3.3451, 5.5257, 13.728, 2.2177, 17.328, 12.6969, 0.0, 9.6471, 16.7688, 21.4368, 0.0], [6.6065, 15.3456, 12.9297, 23.2847, 11.881, 4.7272, 6.0724, 4.957, 16.3611, 18.912, 6.3798, 14.82, 8.3614, 9.7967, 6.1343, 7.6538, 10.9402, 11.029], [15.0724, 10.1568, 14.0154, 18.2905, 7.2072, 1.794, 2.1244, 3.2899, 5.2479, 15.168, 5.6507, 17.5104, 16.8001, 12.4783, 20.1086, 34.8902, 1.6229], [18.1976, 21.3624, 9.0146, 28.3438, 7.4693, 9.4752, 2.5613, 6.2357, 14.688, 4.1924, 11.9016, 1.0452, 2.115, 17.3543, 29.989, 16.7059, 1.1923], [17.2877, 28.152, 7.8631, 8.1075, 10.4832, 2.8166, 7.1628, 4.2835, 5.4022, 29.184, 3.7367, 17.6928, 12.1937, 5.0422, 17.3019, 30.9631, 18.7757, 0.0], [11.5515, 18.7128, 13.2587, 22.701, 23.8493, 0.0718, 4.8692, 7.7942, 6.6062, 28.8, 3.4026, 10.8528, 8.013, 1.066, 12.321, 32.2851, 33.6336, 1.921], [20.0569, 26.0544, 17.4699, 18.55, 17.2973, 0.0, 6.3732, 5.4979, 12.4406, 38.208, 5.9849, 18.6504, 30.7357, 0.0, 20.0283, 41.4697, 42.9475, 18.0504], [4.5494, 48.9072, 30.7615, 57.9848, 34.6382, 2.8012, 0.0, 22.2881, 31.008, 0.4253, 23.3472, 25.355, 10.5412, 0.0, 49.4018, 0.0], [7.5955, 29.2008, 22.1746, 38.5917, 19.9618, 4.9425, 7.2944, 2.4288, 16.5155, 48.864, 18.4103, 24.5784, 29.2648, 7.5463, 25.5858, 32.2851, 26.0198, 27.1584], [9.7318, 37.6464, 31.3208, 61.2927, 49.5331, 12.9532, 15.4229, 25.8382, 54.144, 9.6912, 24.2592, 21.2905, 21.2346, 0.0, 35.9729, 41.9866, 3.1133], [17.4064, 42.2832, 22.372, 55.0661, 27.3437, 3.1216, 9.588, 0.0, 27.7213, 36.288, 5.0735, 31.7832, 22.4131, 8.5784, 29.5181, 41.4697, 66.528, 13.2149], [16.6943, 32.1816, 23.2932, 57.9848, 18.3019, 8.5352, 12.8395, 23.7699, 62.4, 8.9621, 25.1256, 44.2842, 22.2329, 72.1437, 70.4845], [17.6042, 53.4888, 27.3399, 70.3082, 36.8222, 10.9703, 27.073, 77.664, 8.9925, 17.1, 41.652, 23.4342, 39.3749, 67.7013, 35.2598, 17.3218], [28.3645, 61.4376, 32.4394, 68.557, 33.983, 1.7402, 13.1224, 12.2654, 38.5566, 105.12, 18.8052, 34.0632, 31.8196, 11.3702, 20.1331, 66.101, 61.0579]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

