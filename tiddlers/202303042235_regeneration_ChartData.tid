created: 20230304223548000
creator: Drevarr
modified: 20230705163521236
modifier: drevarr
tags: ChartData
title: 202303042235_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Gabe Malhorn", "Sygaldry Verdandi", "Cat Wigglebooty", "Tootsie Pop Bringer", "Bella Sassy", "Your Devoted Buffer", "Mac Aaroni", "Tribal S", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[172.1907, 59.866, 7.5312, 8.4084, 27.0007, 58.6099, 13.158, 42.3225, 0.0, 34.2296, 242.5381, 16.656, 47.9264, 197.2348, 337.2733, 66.2935, 22.1351, 141.639, 36.772, 10.206, 21.6169], [324.6963, 51.6585, 0.2448, 0.0, 49.6584, 28.3886, 46.8792, 33.4719, 52.0502, 236.202, 28.416, 15.3299, 226.142, 249.3764, 202.993, 27.7194, 250.449, 73.805, 34.202, 43.4918], [348.5997, 49.5957, 67.4496, 0.0, 0.0, 101.1595, 2.7846, 4.9896, 2.8235, 408.6016, 0.0, 25.0893, 279.328, 241.8052, 142.457, 0.0, 402.504, 47.618, 25.41, 0.0], [4.0019, 3.1601, 21.6144, 0.0, 0.0, 35.0526, 28.3968, 0.0, 0.0, 2.783, 58.4951, 974.2782, 0.0, 0.0, 103.8548, 301.1918, 42.77, 0.0, 372.465, 243.948, 230.762, 54.9208], [310.5274, 215.8949, 9.3744, 59.9617, 28.1016, 220.7117, 9.3024, 1.7483, 161.0334, 13.7253, 69.0116, 258.3046, 10.212, 21.8253, 294.5124, 454.6269, 236.0575, 175.0626, 397.389, 82.041, 14.714, 36.4634], [23.9571, 10.404, 14.7231, 307.8702, 94.254, 107.4968, 922.8531, 26.502, 118.9184, 855.442, 1215.5325, 0.0], [826.2342, 73.2524, 31.5648, 27.8569, 91.038, 255.2978, 76.4388, 13.0221, 109.3851, 12.535, 45.6872, 506.5893, 0.0, 71.9059, 368.8104, 581.7994, 382.627, 25.2636, 339.264, 83.839, 18.886, 24.7603], [1160.665, 176.2183, 12.6432, 0.0, 164.3676, 17.8092, 0.0, 389.5452, 0.0, 38.7103, 187.7239, 0.0, 0.0, 524.2272, 602.7385, 207.1877, 233.5625, 745.302, 104.922, 37.534, 12.5575], [2115.9341, 409.362, 173.1312, 102.779, 123.3393, 210.749, 315.4248, 108.6844, 305.5833, 252.2309, 2577.0042, 146.772, 139.079, 1377.4768, 2475.6641, 1405.6525, 343.599, 1458.891, 841.174, 174.72, 185.6057]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

