created: 20230213220222000
creator: Drevarr
modified: 20230705163519257
modifier: drevarr
tags: ChartData
title: 202302132202_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Oo Dads Mad", "Black Raspberry Pie", "Raziel Umbra", "Arka\u00f1", "Ryvalia Fazebringer", "Zady Stardust", "Jeckyll Mbs", "Blanco Padre Guard", "Koralia Danai", "Sygaldry Verdandi", "Gavann", "Smol Daddy Tika", "Zaylen Harker", "Grasszanine", "Ravioli Fetabringer", "Bella Sassy", "Jupi Jupi Jupi", "Xanvias Tseli", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Chronomancer", "Spellbreaker", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[25.333, 0.0, 13.0928, 144.274, 6.4578, 19.6248], [37.728, 71.1451, 9.0405, 4.5325, 24.5985, 18.326, 0.0, 13.7592, 55.132], [6.8765, 6.911, 0.0, 6.9075, 27.9841, 34.9002, 0.0, 20.972, 181.506, 6.8808, 6.8376], [32.544, 85.956, 4.5805, 0.0, 6.5449, 29.7298, 28.567, 0.0, 13.6808, 141.052, 6.5424, 20.6904], [38.736, 96.5352, 6.3886, 0.0, 6.3818, 26.8203, 32.2052, 0.0, 12.3872, 146.78, 0.0, 12.6984], [22.32, 119.8094, 14.8264, 0.0, 7.397, 42.3729, 35.3045, 0.0, 11.2504, 158.236, 1.833, 26.9952], [15.2684, 0.0, 29.1712, 33.6444, 38.5385, 33.124, 271.722, 7.2756, 14.7408], [29.952, 89.3942, 0.0, 7.842, 0.0, 101.4093, 0.0, 0.0, 31.0072, 161.816, 27.3822, 0.0], [1.3224, 12.4156, 7.669, 59.8299, 41.2335, 0.0, 41.7088, 272.08, 7.8396, 15.8064], [34.272, 94.6838, 14.4246, 35.988, 57.3436, 43.7938, 7.5656, 141.052, 31.2174, 7.3704], [40.032, 130.9176, 6.6297, 0.0, 21.611, 7.0886, 21.6948, 0.0, 37.7888, 201.554, 13.818, 13.4976], [55.872, 138.5875, 6.8708, 6.8713, 53.2703, 41.503, 0.0, 13.9944, 187.95, 21.4008], [57.456, 239.8834, 19.4873, 0.0, 0.0, 35.8662, 8.4893, 5.928, 0.0, 212.652, 0.0, 9.9456], [81.36, 118.7515, 29.8136, 26.7055, 63.6916, 40.964, 13.6024, 247.736, 33.3042, 32.0568], [75.312, 42.5813, 28.9296, 0.0, 70.9918, 73.7083, 0.0, 52.0184, 287.474, 58.233, 0.0], [70.272, 165.3, 15.3488, 0.0, 34.9909, 79.1913, 57.2688, 0.0, 37.5928, 225.182, 7.6422, 20.5128], [121.68, 190.1611, 7.0717, 30.404, 81.3073, 59.6943, 0.0, 41.944, 426.736, 7.755, 28.5048], [66.4979, 56.8194, 188.324, 171.8062, 11.5596, 99.6464, 403.466], [154.08, 307.8547, 14.4246, 0.0, 31.9632, 126.2194, 68.1835, 0.0, 55.5856, 236.996, 0.0, 7.992], [123.696, 201.7982, 40.7827, 0.0, 36.822, 55.4921, 124.1048, 15.444, 41.4344, 286.042, 20.5578, 62.16], [109.872, 405.1834, 50.1446, 141.2508, 215.9907, 247.2662, 0.0, 19.4432, 120.288, 55.6668, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

