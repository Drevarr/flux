created: 20230401223327000
creator: Drevarr
modified: 20230705163524184
modifier: drevarr
tags: ChartData
title: 202304012233_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Sygaldry Verdandi", "Aluin Ellesmera", "Svess", "Johosh The Great", "Tootsie Pop Rocks", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Firebrand", "Tempest", "Druid", "Firebrand", "Scrapper", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 236.7837, 128.7546, 77.7651, 13.2148, 254.0105, 0.0, 217.3991, 10.7774, 71.779, 5.8126, 69.9285, 0.0, 313.0848, 179.9657, 23.1268, 476.8666, 88.5812, 0.0, 196.1882, 18.1081, 12.0582, 12.4358, 46.4107, 177.5616], [46.3478, 226.0429, 67.9463, 335.64, 25.0002, 59.8645, 59.2192, 57.9747, 0.0, 81.7491, 0.4402, 13.1738, 106.0805, 97.1006, 65.4966, 64.2335, 97.7029, 207.0432, 0.0, 63.1765, 35.2199, 435.9725, 110.9508, 52.1001, 58.8526, 37.9447, 47.0448, 62.881, 101.9075, 49.9392], [237.6528, 820.457, 245.1557, 557.205, 94.6132, 203.9199, 12.9683, 0.0, 10.1962, 53.9986, 4.0003, 7.2333, 0.0, 44.9388, 0.0, 23.4099, 0.0, 93.744, 0.0, 51.3597, 53.1787, 347.9462, 25.804, 0.0, 21.8008, 0.0, 0.0, 8.5843, 72.2884, 37.9168], [152.1408, 185.5116, 439.063, 48.2433, 948.4192, 281.554, 82.8711, 27.8174, 198.8541, 0.0, 122.2042, 302.7384, 321.3969], [183.3955, 429.2915, 157.8469, 345.1632, 26.9899, 128.1121, 58.1584, 62.1243, 54.536, 112.2537, 25.7816, 23.6083, 38.258, 130.9586, 34.3278, 108.5891, 55.0308, 216.3168, 105.662, 74.29, 478.4838, 80.444, 53.7615, 26.7131, 62.9809, 29.2743, 85.6474, 124.6675, 93.4626], [180.7344, 170.2784, 190.6258, 898.2145, 0.0, 217.8575, 154.7972, 207.5199, 0.0, 214.9095, 61.2097, 6.1252, 3.6142, 109.2485, 2.6957, 52.6928, 8.1689, 287.5488, 0.0, 296.2032, 0.0, 876.5658, 78.0926, 85.5658, 0.0, 0.0, 5.0592, 29.1737, 94.6764], [470.279, 867.4022, 475.6244, 317.9108, 9.0311, 387.3193, 314.4742, 323.589, 105.3491, 573.2033, 36.1049, 111.5831, 591.5506, 34.412, 0.0, 0.0, 536.3904, 90.6336, 184.8856, 207.1593, 2665.7395, 82.9811, 0.5733, 179.1093, 1.1013, 130.1157, 15.9283, 253.8335, 130.9748], [98.831, 1393.705, 457.1259, 951.1996, 87.5588, 399.1482, 178.6122, 218.4525, 130.5377, 298.9955, 49.7257, 8.4029, 449.7513, 481.0298, 440.5331, 171.4946, 170.4494, 721.9968, 48.438, 406.2333, 158.8126, 1903.0765, 370.5993, 128.8627, 152.9636, 59.895, 197.3741, 282.0273, 190.5955], [1109.3914, 2099.241, 735.8736, 2470.647, 261.4233, 716.9856, 413.9507, 482.8698, 165.2013, 690.4646, 180.5285, 361.9728, 485.437, 592.2482, 311.0562, 163.9377, 177.1701, 767.6928, 592.4523, 359.331, 4160.7994, 424.1874, 157.5054, 410.312, 182.2516, 123.3441, 236.6563, 657.9449, 660.6251]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

