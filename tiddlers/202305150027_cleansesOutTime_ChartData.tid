created: 20230515002743000
creator: Drevarr
modified: 20230705163529918
modifier: drevarr
tags: ChartData
title: 202305150027_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Ark Darkness", "Artherwise", "Tootsie Pop Rocks", "Venomina The Fierce", "Yuuka Chou", "Lucas Ryn", "Aronorf Xideliesi", "Drogo Discourteous", "Miphest\u00f6", "Ikong Winnie Ilocos", "Osh Kosh Johosh", "Tegan Parker", "Tika Mi", "Artakama Nahid", "Tribal S"];
const professions = ["Firebrand", "Druid", "Scrapper", "Spellbreaker", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[49.273, 48.2385, 21.3704, 14.9752, 0.9957, 12.0667, 11.9091, 1.9833], [69.1904, 40.107, 82.1429], [17.0342, 20.2308, 79.0894, 0.0, 22.9505, 0.0, 0.0, 0.0, 12.1294, 19.3648, 45.1705, 21.0238, 31.8785, 12.08], [12.9487, 61.134, 49.0161, 19.9712, 12.0099, 1.9957, 0.0, 0.0, 0.0, 2.0, 32.3774, 25.0184, 18.631, 17.9159, 0.0], [46.1667, 30.1529, 132.8742, 157.9631, 106.5714, 59.1402, 38.24], [27.094, 83.0124, 48.2546, 15.144, 45.6634, 17.0298, 20.64, 22.3636, 13.0667, 10.0471, 51.2013, 44.9724, 28.7381, 12.9626, 13.08], [29.1795, 94.0645, 59.4381, 27.9794, 20.9901, 2.9915, 21.36, 4.0, 7.9667, 21.0471, 42.1447, 38.1336, 20.2857, 15.9813, 1.0], [145.2159, 87.4908, 30.7366, 15.9653, 8.983, 17.5467], [25.9145, 83.5434, 134.2202, 33.9588, 48.3465, 12.0213, 12.3867, 5.0118, 4.9874, 73.0046, 16.8929, 21.9252, 0.0], [111.9231, 136.6261, 31.0412, 53.0693, 31.9362, 24.32, 27.0, 15.3167, 6.0118, 52.2704, 75.5069, 20.869, 31.9346, 0.0], [29.9145, 116.6998, 131.1124, 17.214, 64.396, 18.0213, 10.0267, 0.0, 20.45, 30.1176, 85.9057, 86.3594, 66.7619, 21.9252, 15.08], [132.9181, 227.3784, 80.1811, 111.6188, 57.2894, 76.4, 58.05, 55.5176, 124.2704, 192.8571, 0.0, 64.2056, 0.0], [71.0427, 255.0025, 257.9587, 89.749, 127.1881, 67.3234, 49.1333, 14.6061, 55.4471, 159.6667, 165.1982, 129.5833, 84.9065, 11.06], [107.5556, 263.0074, 294.5321, 104.1893, 145.3317, 70.2553, 85.3733, 9.2727, 85.8, 73.2353, 157.956, 213.023, 147.369, 94.8598, 39.72], [271.5757, 295.0413, 104.1605, 190.3762, 84.0979, 57.68, 85.8182, 44.1333, 40.3529, 186.0503, 255.7005, 156.1548, 69.729, 28.58]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

