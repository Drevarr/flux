created: 20230710072127000
creator: Drevarr
tags: ChartData
title: 202307100721_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Yngvar The Burdened", "Govinda Ektar", "Chocolate Teapot", "Danaeryn", "Notorious H U D", "Locopuff", "Drevarr Moonwillow", "Legoh Brave", "Gestern Yesteryear"];
const professions = ["Scourge", "Vindicator", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 42.2464, 85.544, 27.5515, 0.0, 16.1439, 20.7346, 23.5488, 44.7952, 48.1474, 0.0, 10.5536, 48.2196, 9.3555], [12.5956, 0.0, 2.5826, 42.0655, 44.9593, 0.0, 21.1497, 13.8802, 122.6864, 13.6982, 0.0, 50.2618, 6.977, 13.9744, 58.6224, 42.5235, 10.2748], [39.7957, 10.4227, 5.5209, 10.7447, 21.3418, 16.0368, 50.4157, 34.2572, 30.3475, 63.2218, 121.9374, 37.3824, 36.7736, 9.0241, 60.9093], [28.0978, 0.0, 0.0, 23.1868, 98.8353, 35.7021, 15.4368, 0.0, 0.0, 121.2712, 12.239, 0.0, 37.2552, 0.0, 23.9008, 66.1414, 8.6584, 0.0, 57.7388, 153.4104, 22.3665], [6.8224, 44.3685, 52.503, 36.5508, 63.2218, 141.276, 25.4786, 80.1388, 53.1614, 121.0825, 28.2629, 0.0, 76.2751, 7.7231, 31.8349, 108.6426, 98.2976, 10.6445, 29.8316, 131.274, 20.5387], [139.5763, 167.7222, 33.8061, 166.1499, 210.4931, 76.2675, 100.2388, 449.592, 16.1664], [53.5957, 54.9494, 0.0, 16.1974, 70.3507, 11.9018, 23.2534, 47.683, 13.8996, 56.7459, 256.0627, 52.0238, 55.4736, 3.9897, 19.5442, 187.159, 35.0938, 8.6265, 82.5824, 47.8701, 6.6739, 126.6116, 222.3277, 33.388], [138.9096, 153.4616, 33.4955, 84.6855, 286.0063, 63.7579, 0.0, 176.57, 42.9876, 0.0, 144.4851, 166.0074, 44.343, 22.3788, 208.1079, 15.3631], [173.949, 68.1274, 7.4316, 41.7872, 130.0042, 8.8067, 413.6492, 67.2879, 85.7828, 147.1058, 334.0251, 104.1326, 112.2187, 35.7836, 433.9785, 90.7622, 148.3345, 84.5352, 29.216, 246.5964, 111.6696, 0.0, 100.7148, 342.6423, 42.0394]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

