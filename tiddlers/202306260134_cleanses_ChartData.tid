created: 20230626013408000
creator: Drevarr
modified: 20230705163538740
modifier: drevarr
tags: ChartData
title: 202306260134_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Mememonoko", "Aronorf Xideliesi", "Sygaldry Verdandi", "Pale Pam", "Newtype Khan", "Solus Sanctus", "Zhavashian", "Miphest\u00f6", "Cat Wigglebooty", "Tootsie Pop Rocks", "Primal Clone", "Venomina The Siren", "Tegan Parker", "Fribble Bibble", "Artakama Nahid", "Drevarr Moonwillow", "Elon The Archmagus"];
const professions = ["Vindicator", "Firebrand", "Firebrand", "Druid", "Spellbreaker", "Firebrand", "Tempest", "Tempest", "Scrapper", "Scrapper", "Chronomancer", "Tempest", "Tempest", "Scrapper", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.1719, 0.1011, 0.0122, 0.0455, 0.0299, 0.0, 0.0, 0.0, 0.0244, 0.0, 0.0795, 0.0, 0.08, 0.0, 0.0192, 0.0049, 0.0, 0.0, 0.0, 0.0694, 0.375, 0.3587, 0.6429, 0.1488, 0.0571, 0.2721, 0.4906, 0.5238, 1.2857, 0.4576], [0.1875, 0.0222, 0.0, 0.0, 0.0835, 0.0, 0.0, 0.1532, 0.0, 0.3171, 0.1571, 0.125, 0.2818, 0.38, 0.3542, 0.5577, 0.0588, 0.0, 0.027, 0.4773, 0.4306, 0.236, 0.2386, 0.337, 0.0179, 0.2479, 0.0, 0.0, 0.2059, 0.0189, 0.3968, 0.5952, 0.4576], [0.0645, 0.0299, 0.1951, 0.0857, 0.1477, 0.1364, 0.12, 0.8229, 0.7115, 0.0931, 0.0, 0.2703, 0.5, 0.0278, 0.2022, 0.2045, 0.2065, 0.1071, 0.2562, 0.2, 0.3603, 0.4906, 0.4444, 0.8571, 0.1695], [1.8, 0.0, 0.8971, 1.0, 1.3333, 2.5238, 1.7119], [0.4688, 0.0519, 0.0787, 0.0, 0.1765, 0.0896, 0.0, 0.3153, 0.0, 0.3171, 0.1857, 0.3523, 0.2364, 0.38, 0.3542, 0.4231, 0.1863, 0.0, 0.0541, 0.5909, 0.2222, 0.0562, 0.4318, 0.3152, 0.0179, 0.0909, 0.0, 0.0, 0.1618, 0.283, 0.0, 0.4286, 0.0], [0.25, 0.0815, 0.0112, 0.0, 0.1784, 0.1343, 0.0, 0.4685, 0.3898, 0.0488, 0.4, 0.3068, 0.3455, 0.26, 0.3646, 0.4423, 0.0245, 0.0, 0.0, 0.1806, 0.2022, 0.2614, 0.1957, 0.1964, 0.0496, 0.0, 0.2143, 0.1912, 0.3774, 0.254, 0.5476, 0.2881], [1.0909, 0.7778, 1.1461, 1.3864, 0.8261, 0.9286, 0.1405, 0.4118, 1.2075, 1.0476, 2.6905], [0.125, 0.0815, 0.0449, 0.061, 0.2163, 0.4179, 0.0, 0.7838, 0.1695, 0.2195, 0.7143, 0.4432, 0.7, 0.86, 0.375, 1.0577, 0.098, 0.2432, 1.0, 0.3056, 0.382, 0.2614, 0.2717, 0.4107, 0.0661, 0.0, 0.1786, 0.0588, 0.434], [1.0156, 0.3333, 0.0787, 0.2073, 0.4288, 0.4478, 0.0, 0.7207, 0.0, 0.6098, 0.0, 0.125, 0.7455, 0.12, 0.8125, 0.0192, 0.1912, 0.0, 0.0, 0.6818, 0.0, 0.3933, 0.4432, 0.2065, 0.1786, 0.0, 0.0, 0.0, 0.0, 0.4921, 0.3333, 0.6271], [0.0, 0.3556, 0.1348, 0.0, 0.3966, 0.8507, 0.0, 1.2523, 0.4407, 0.439, 0.1143, 0.625, 0.8182, 1.3, 0.5104, 0.4038, 0.3186, 0.0, 0.5227, 0.6944, 0.0, 0.0, 0.0, 0.0, 0.0165, 0.0, 0.0, 0.0294, 0.1321, 0.0, 0.0238, 0.0], [0.6562, 0.5333, 0.6742, 0.122, 0.4459, 0.1642, 0.0, 1.3063, 0.4407, 0.878, 0.5571, 0.4659, 0.4182, 0.74, 0.9167, 0.8846, 0.1275, 0.0541, 0.2955, 0.3333, 0.3034, 0.2841, 0.3261, 0.0179, 0.405, 0.4571, 0.4286, 0.3382, 1.1132, 0.746, 0.9286, 0.0], [1.0631, 0.6271, 2.1707, 0.5143, 0.9091, 0.9636, 1.62, 1.6354, 2.3077, 0.451, 0.2432, 1.3864, 1.1667, 0.4382, 1.6818, 0.7609, 0.4643, 0.1322, 0.1429, 0.0, 0.5, 0.3019, 1.2381, 0.881, 0.9831], [1.3063, 0.3051, 0.9268, 0.7857, 1.1932, 1.1182, 2.12, 0.9896, 2.6346, 0.4755, 0.3243, 1.0227, 1.5694, 0.8315, 1.0909, 0.337, 1.5179, 0.6446, 0.1143, 0.1786, 0.0956, 0.4528, 1.619, 1.5952, 0.4915], [0.9219, 0.3926, 0.4045, 0.1463, 0.7647, 0.5224, 0.5641, 1.2883, 0.6441, 0.6829, 0.6714, 0.75, 0.5091, 0.96, 0.9479, 1.6346, 0.4069, 0.7838, 1.0455, 0.8611, 0.7079, 1.1023, 0.4348, 1.2857], [2.1719, 0.7556, 1.236, 0.1098, 1.2619, 1.1642, 0.2308, 1.5586, 1.678, 1.2439, 1.9571, 2.2045, 0.1, 2.2, 1.5938, 2.9038, 0.5196, 1.1081, 2.5455, 1.4861, 1.0674, 1.7273, 0.7174, 1.0536, 0.5868, 1.8286, 0.5956, 1.3774, 1.2857, 0.8571, 1.1356], [1.2188, 0.7333, 1.1461, 0.1707, 1.3055, 1.403, 0.7179, 2.7477, 0.6949, 1.6829, 1.5571, 1.9545, 1.9273, 2.02, 2.1042, 2.0385, 0.7745, 0.0, 1.0811, 2.1818, 1.75, 0.9551, 2.0341, 0.9891, 2.3036, 0.5207, 0.4857, 0.0, 1.0294, 2.1887, 1.5397, 1.2619, 0.5932], [0.1094, 0.7111, 1.573, 0.3902, 1.556, 1.6716, 0.9231, 2.4234, 1.7797, 1.9756, 1.6429, 1.8295, 1.7273, 3.1, 1.7604, 3.8654, 0.8578, 0.2593, 1.2432, 2.5909, 2.875, 1.3371, 0.7159, 1.7283, 2.0536, 0.5289, 2.1714, 0.5714, 0.7059, 2.1887, 1.5556, 1.4762, 1.0339]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

