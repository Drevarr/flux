created: 20230625212343000
creator: Drevarr
modified: 20230705163535848
modifier: drevarr
tags: ChartData
title: 202306252123_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "K\u00f4sair", "Latedoctor", "Tootsie Pop Khorne", "Irish Necroman", "Smol Gluvs", "Rina Of Theros", "Be\u00eb", "Blancooo Padreee", "Caelon Cai", "Zayde Sunsabre", "Newtype Khan", "Morton Saltbringer", "Grasszanine", "Black Raspberry Pie", "Eibh\u00ebar", "Rahani Sunray", "Primal Clone"];
const professions = ["Chronomancer", "Spellbreaker", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper", "Reaper", "Spellbreaker", "Reaper", "Spellbreaker", "Spellbreaker", "Chronomancer", "Spellbreaker", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0154, 0.049, 0.0734, 0.23, 0.2429, 0.4078, 0.2909, 0.0764, 0.0597, 0.0, 0.1918, 0.0333, 0.0519, 0.0729, 0.0395, 0.0647, 0.0632, 0.0286, 0.0412, 0.1735, 0.031, 0.0952, 0.241, 0.0875, 0.0566, 0.0884], [0.3761, 1.07, 1.3857, 0.7604], [0.0, 0.1284, 0.07, 0.0, 0.1845, 0.4182, 0.0903, 0.2687, 0.1644, 0.3, 0.0779, 0.3125, 0.0526, 0.2518, 0.3684, 0.0, 0.1443, 0.0714, 0.0, 0.0095, 0.1084, 0.275, 0.434, 0.0884], [0.0, 0.042, 0.055, 0.07, 0.0857, 0.4951, 0.4909, 0.3403, 0.1194, 0.4247, 0.0, 0.4026, 0.125, 0.1316, 0.1439, 0.0316, 0.0, 0.0103, 0.0102, 0.2093, 0.1238, 0.1325, 0.2938, 0.0189, 0.3129], [0.0, 0.0175, 0.2294, 0.24, 0.4714, 0.4078, 0.4, 0.3264, 0.209, 0.0, 0.2055, 0.0, 0.0625, 0.0526, 0.0, 0.1368, 0.0, 0.2165, 0.102, 0.0465, 0.1333, 0.2169, 0.3312, 0.0, 0.3673], [0.0154, 0.042, 0.2385, 0.4, 0.4286, 0.5534, 0.1818, 0.1597, 0.403, 0.0345, 0.7397, 0.2333, 0.026, 0.2188, 0.5, 0.2662, 0.2105, 0.0286, 0.3402, 0.398, 0.1473, 0.2476, 0.3855, 0.1625, 0.4528, 0.5374], [0.1468, 0.29, 0.7286, 0.8544, 0.7818, 0.0625, 0.5224, 0.0, 0.8493, 0.2222, 0.2208, 0.5208, 0.2237, 0.2806, 0.3684, 0.0, 0.2268, 0.2245, 0.155, 0.2286, 0.3253, 0.6062, 0.0, 0.4694], [0.0, 0.014, 0.211, 0.56, 0.5429, 0.2718, 1.1273, 0.5139, 0.3582, 0.9863, 0.2667, 0.2727, 0.2083, 0.5658, 0.2302, 0.3895, 0.2286, 0.2784, 0.5204, 0.1473, 0.2381, 0.4578, 0.3187, 0.3396, 0.4354], [0.0154, 0.028, 0.2385, 0.12, 0.0, 0.1456, 0.8364, 0.4722, 0.9104, 0.9315, 0.1333, 0.5455, 0.4583, 0.7237, 0.4029, 0.3158, 0.0, 0.2887, 0.7449, 0.1628, 0.2952, 0.8193, 0.6438, 0.434, 0.3061], [0.0, 0.028, 0.1743, 0.35, 0.2857, 0.835, 0.4182, 0.4792, 0.403, 0.411, 0.2111, 0.3506, 0.5625, 0.5263, 0.3597, 0.6105, 0.0, 0.3196, 0.8469, 0.2326, 0.3619, 0.6386, 0.55, 0.5849, 0.4354], [0.0, 0.035, 0.4037, 1.36, 0.3857, 0.7476, 0.6364, 0.5625, 1.1493, 0.0, 1.5479, 0.1667, 0.5844, 0.5208, 1.2105, 0.3813, 0.5684, 0.0, 0.4742, 0.0714, 0.155, 0.4857, 0.2169, 1.0813, 0.4906, 0.6463], [0.0256, 0.0105, 0.3853, 0.9, 1.2429, 0.9515, 0.7455, 0.9028, 0.8657, 0.0, 1.3836, 0.5556, 0.7273, 0.5, 0.8289, 0.3957, 0.6105, 0.0, 0.5773, 0.5612, 0.1705, 0.2381, 0.7229, 0.9, 0.2642, 0.4694], [0.0051, 0.042, 0.2018, 0.52, 1.2143, 1.4757, 0.8364, 1.0, 0.9254, 0.0, 1.0959, 0.5065, 0.0625, 0.5, 0.5683, 0.8421, 0.0, 0.5876, 0.9898, 0.2868, 0.4667, 0.747, 1.1062, 1.5283, 0.5034], [0.0103, 0.0524, 0.5505, 0.74, 0.6571, 1.1845, 1.2182, 0.9375, 1.3134, 0.0, 1.2329, 0.4, 0.3247, 0.8438, 1.0132, 0.7122, 0.5263, 0.0286, 0.4742, 0.949, 0.1318, 0.6952, 0.8675, 1.25, 0.0566, 0.4014], [1.9612, 0.2727, 1.2986, 0.8657, 0.0, 1.2466, 0.5, 1.1948, 0.7812, 0.9737, 0.7554, 1.4211, 0.0571, 1.0825, 0.9388, 0.4419, 0.7333, 1.0723, 1.6438, 1.283, 0.9864], [1.6866, 2.2877, 0.8444, 1.4156, 1.0417, 2.0263, 0.9353, 1.2421, 0.1429, 0.9278, 1.8673, 0.7364, 0.581, 1.3735, 2.0938, 2.7358, 1.3605], [0.0, 0.0839, 0.6514, 1.06, 1.6, 1.7864, 2.6364, 1.1944, 1.1493, 1.5479, 0.5333, 0.1429, 1.1042, 1.5, 0.7626, 1.4105, 0.2857, 0.9381, 1.3673, 0.4109, 0.619, 0.988, 1.5875, 0.7925, 0.9728], [0.0359, 0.1224, 0.5138, 1.28, 2.0, 2.0583, 1.3273, 1.3958, 1.8806, 0.069, 1.6712, 0.5222, 0.5325, 1.4062, 1.3158, 0.777, 1.0632, 0.4286, 0.7526, 1.3878, 0.4186, 0.6571, 1.4699, 1.7063, 2.1132, 1.2721]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

