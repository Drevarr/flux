created: 20230625214748000
creator: Drevarr
modified: 20230705163536475
modifier: drevarr
tags: ChartData
title: 202306252147_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Morton Saltbringer", "Seiker Novus Terra", "Ryvalia Fazebringer", "Sakis Ranger", "Gavann", "Primal Clone", "Air One Com", "Tacitus Kilgore I", "Oo Dads Mad", "Rozaalyna", "Caelon Cai", "Be\u00eb", "Tegan Parker", "Irish Necroman", "Newtype Khan", "Imalou", "Elonith Primal", "Grasszanine", "Blancooo Padreee", "Tika Fiery", "Drevarr Moonwillow", "Traidoruns Maximus", "K\u00f4sair", "Zayde Sunsabre", "Bellatrix Astra", "Koralia Danai", "Gestern Yesteryear", "Solus Sanctus", "Aronorf Xideliesi", "Bella Sassy"];
const professions = ["Chronomancer", "Tempest", "Chronomancer", "Druid", "Firebrand", "Chronomancer", "Firebrand", "Spellbreaker", "Spellbreaker", "Reaper", "Reaper", "Reaper", "Tempest", "Reaper", "Spellbreaker", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[67.4419, 1.7453, 6.6931, 0.0, 97.4366, 94.569, 70.9285, 39.443, 0.0, 0.0, 81.0216, 691.067, 0.0, 0.0], [41.0592, 133.4654, 164.1408, 0.0, 213.0341, 289.835, 273.9531, 110.3857, 40.6224], [770.3405, 0.0, 28.0474, 0.0, 273.6754, 54.489, 50.1054, 0.8217, 0.0, 0.0, 0.0, 61.6374, 588.0615, 0.0, 0.0], [111.4714, 117.1277, 34.5014, 0.0, 267.6744, 156.8421, 570.3561, 223.7845, 12.395, 18.2776, 100.8576, 19.3842, 343.4665, 4.0205, 0.0], [697.9248, 61.7584, 1188.1805, 34.6055, 0.0], [162.8045, 1258.4925, 211.1846, 118.4299, 22.4048, 0.0, 26.4748, 256.997, 16.4621, 0.0], [324.6298, 35.6813, 44.9395, 0.0, 167.0794, 189.3037, 436.9585, 269.5274, 100.3061, 0.0, 0.0, 0.0, 576.3485, 6.4767], [877.6076, 226.3397, 0.0, 160.956, 114.8532, 682.799, 4.693, 190.4166], [458.9894, 92.9362, 150.7546, 38.34, 236.0904, 252.4049, 1046.6831], [215.0803, 47.171, 13.0675, 34.0848, 216.5083, 213.981, 501.7051, 295.8228, 92.8066, 51.0594, 159.9768, 16.0446, 402.376, 9.6053, 55.139], [183.6307, 37.1842, 41.9117, 37.1304, 151.4453, 122.0619, 521.8774, 384.5696, 199.6747, 46.3131, 161.6904, 58.2978, 329.342, 44.8249, 52.595], [239.8906, 76.7438, 35.6966, 5.94, 208.6123, 285.3633, 544.0019, 308.6966, 96.973, 0.0, 135.0072, 36.5662, 421.668, 27.2809, 50.3624], [244.2586, 120.4243, 74.6602, 13.8024, 331.632, 282.3821, 510.1645, 308.6966, 143.7408, 0.0, 113.832, 0.0, 436.826, 0.0, 0.0], [272.7379, 55.4126, 100.3171, 37.8648, 227.2469, 286.1914, 559.9446, 416.6171, 178.6344, 53.5652, 172.9512, 35.453, 483.678, 42.0033, 57.3197], [301.5667, 69.4718, 249.1594, 8.5536, 295.4683, 329.5838, 515.6956, 518.7855, 111.8678, 27.5933, 172.0944, 53.9176, 713.115, 32.6903, 45.2223], [615.3638, 157.7054, 108.2851, 58.5792, 301.6272, 692.9541, 896.3668, 721.7528, 198.7373], [320.7859, 163.1837, 437.1245, 58.4712, 336.8434, 404.2784, 579.1408, 533.3028, 117.5966, 180.4766, 171.6048, 43.2454, 828.5225, 57.9829], [567.1411, 75.8712, 62.6285, 85.0608, 349.477, 251.7424, 694.6436, 744.4874, 196.6541, 137.76, 213.9552, 170.5858, 816.8095, 24.3569, 23.2861], [476.6362, 64.333, 114.9782, 41.4072, 349.7928, 387.5508, 1122.492, 731.6136, 351.4358, 71.6954, 306.612, 0.0, 860.561, 74.9714, 71.7534], [296.6746, 89.0578, 448.2, 189.2808, 424.489, 358.8985, 897.9936, 942.2504, 294.3562, 7.9891, 330.48, 0.0, 1071.7395, 53.2607, 86.4728], [410.4173, 79.3618, 159.2803, 33.0048, 321.3672, 379.4354, 1042.4534, 1288.1987, 456.8458, 0.0, 336.1104, 17.1578, 1129.6155, 24.7517, 151.4247], [557.0074, 168.1286, 267.8842, 77.3064, 863.3486, 945.359, 1338.531, 1056.197, 662.5618], [562.7731, 328.1611, 377.4442, 46.44, 513.0821, 224.2495, 1208.7124, 921.1593, 434.868, 36.7616, 235.2528, 1010.763, 76.2433, 36.6555], [322.3584, 25.4035, 32.0314, 36.1368, 491.2891, 1076.1988, 1029.1137, 941.7026, 378.7258, 9.1978, 763.0416, 65.8966, 969.7675, 16.696, 141.1445], [586.535, 225.335, 360.1536, 180.1224, 856.4002, 670.0985, 561.8967, 1249.0296, 261.9624, 199.4027, 302.94, 275.3476, 795.795, 83.948, 129.6962], [435.577, 131.9141, 360.0739, 0.0, 579.0926, 537.9338, 770.7778, 1167.6783, 623.2934, 71.3711, 770.3856, 23.6434, 1274.3055, 132.2964, 83.9546], [549.145, 165.5592, 188.0448, 30.8232, 456.2309, 401.1316, 1305.019, 956.7676, 489.7603, 65.9468, 764.5104, 69.5024, 1443.1105, 74.5035, 157.6551], [391.897, 147.3792, 601.823, 46.548, 583.6723, 939.0654, 1079.8698, 1147.6829, 353.4149, 24.2031, 899.7624, 110.2068, 1208.1615, 115.6442, 69.1055], [887.5776, 248.3146, 374.6554, 172.3032, 644.1557, 822.9658, 1718.8769, 1680.9857, 547.8816, 113.557, 210.528, 85.4744, 1700.1075, 0.0], [779.4259, 167.8862, 367.0061, 71.712, 1125.18, 1086.9641, 1820.7146, 1589.2258, 880.2562, 308.066, 918.612, 129.349, 1933.6785, 56.7256, 37.7978]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

