created: 20230524221126000
creator: Drevarr
modified: 20230705163531550
modifier: drevarr
tags: ChartData
title: 202305242211_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Morton Saltbringer", "Pie Snarglebringer", "Brioche Bunbringer", "Band Aidbringer", "Ryvalia Fazebringer", "Al Darasum", "Grasszanine", "Mouschi W", "Xanvias Einzbern", "Bella Lunabringer", "Bubble Teabringer", "Soxx", "Bura Beignetbringer", "Blanco Padre Guard", "Sister Elon\u00edth", "Ravioli Ryebringer", "Newtype Khan"];
const professions = ["Chronomancer", "Chronomancer", "Chronomancer", "Scrapper", "Chronomancer", "Berserker", "Spellbreaker", "Berserker", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[59.0944, 20.8512, 52.8454, 32.43, 16.1417, 0.0, 36.6197, 43.6141, 28.5384, 51.9028], [66.3601, 6.7613, 0.0, 26.2656, 73.6805, 36.581, 20.9385, 7.056, 46.8574, 42.8837, 36.2652, 82.9374], [75.8862, 7.676, 0.0, 23.7312, 78.4157, 31.2625, 20.3675, 10.206, 51.1888, 52.2743, 28.9896, 78.3892], [73.1414, 6.0069, 0.0, 29.1456, 72.1652, 40.2132, 14.0859, 7.1316, 52.1732, 46.327, 35.3628, 86.683], [80.8915, 5.8372, 0.0, 29.8368, 64.0206, 40.4726, 22.4232, 0.0, 43.1167, 60.5172, 33.8964, 87.7531], [39.0457, 0.0, 0.0, 47.645, 23.0591, 21.0936, 360.9115], [276.4195, 0.0, 0.0, 188.6976, 199.4487, 123.3637, 0.0, 0.0], [303.2854, 71.6477, 0.0, 142.3442, 56.9696, 87.0816, 165.3397], [236.216, 15.2294, 16.8647, 136.4544, 137.1328, 42.6779, 0.0, 0.0, 120.0968, 67.195, 119.6808, 0.0], [266.7319, 8.1381, 0.0, 45.1584, 162.135, 66.5464, 39.8212, 0.0, 130.1377, 58.6391, 62.7732, 103.2704], [198.5958, 0.0, 0.0, 88.2432, 92.6215, 32.6894, 34.9102, 0.0, 121.1796, 79.2984, 73.7712, 285.4652], [273.6747, 9.1282, 0.0, 114.9696, 129.5564, 70.3082, 47.6636, 4.6872, 89.3835, 45.8053, 39.9312, 215.3697], [222.6533, 4.2435, 0.0, 90.432, 215.9274, 57.3362, 48.3489, 7.8372, 119.6046, 65.1082, 36.7164, 237.8431], [151.288, 0.0, 0.0, 96.9408, 229.5649, 81.8533, 51.6991, 0.0, 152.6804, 90.7758, 85.0512, 196.3744], [315.6543, 93.1392, 214.9804, 85.6152, 44.0089, 5.9724, 91.1554, 58.9521, 74.8992, 274.496], [279.1643, 0.0, 11.2526, 118.5984, 275.2127, 113.8942, 93.0812, 5.8464, 260.4722, 110.9134, 104.8476, 86.4154], [635.3451, 26.0182, 290.016, 658.9574, 408.618, 20.7862, 0.0, 485.6045, 133.0335, 57.4152, 439.3007]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

