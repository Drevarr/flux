created: 20230503220838000
creator: Drevarr
modified: 20230705163528144
modifier: drevarr
tags: ChartData
title: 202305032208_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "High Sorcer Baradun", "Skye Nightroad", "Belvyn Brightblade", "Artakama Nahid", "Gavann", "Tegan Parker", "Miphest\u00f6", "Zadie Miststep", "Sub Train", "Koralia Danai", "Demon Dalham", "Zaylen Harker", "Sygaldry Verdandi", "Xkaet", "Johosh The Great", "Drevarr Moonwillow", "Lucas Ryn", "Bella Sassy", "Kosa\u00efr", "Newtype Khan", "Smol Daddy Tika", "Blancooo Padreee", "Venomina The Fierce"];
const professions = ["Chronomancer", "Tempest", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Tempest", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Willbender", "Scrapper", "Firebrand", "Firebrand", "Catalyst", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[66.6432, 24.9185, 0.0, 0.0, 0.0, 20.3742, 0.0, 0.6176, 8.8638, 4.2697, 65.6429, 63.3913], [265.1248], [59.4235, 31.8108, 4.4791, 3.0727, 1.5268, 5.0421, 2.1733, 2.1615, 65.5921, 2.8465, 57.3946, 47.357], [122.7346, 43.4748, 3.0561, 2.3176, 4.9529, 9.5697, 4.9218, 0.0, 96.1722], [137.7293, 8.2178, 0.0, 1.2662, 25.3134, 0.0, 0.0, 55.8419, 9.9403, 6.0278, 70.4544, 30.577], [104.4077, 93.3117, 8.7965, 0.0347, 9.1238, 16.9785, 12.1128, 5.9356, 106.3656], [3.5339, 75.7855, 0.0, 5.7348, 139.8778, 134.6133], [166.608, 60.1754, 0.0, 0.0, 0.0, 13.9944, 0.0, 35.4765, 95.2858, 0.0259, 0.0, 0.0], [78.8611, 59.9103, 0.0, 0.0, 10.6134, 25.725, 6.0404, 0.446, 46.9781, 0.0, 58.4256, 98.8158], [97.188, 36.3173, 3.2502, 3.9841, 8.3045, 15.7437, 13.0077, 0.0, 119.6613, 0.0, 6.1116, 76.297, 108.8839], [121.6238, 73.9601, 5.3684, 8.6024, 17.2872, 8.5972, 118.3317, 0.0, 11.2603, 74.9222, 84.646], [164.3866, 72.6347, 5.0774, 19.1414, 10.7016, 4.1548, 1.5439, 102.3769, 8.7487, 86.2637, 65.2557], [132.1757, 56.7293, 7.0178, 11.0975, 23.9757, 12.5603, 10.0871, 106.8088, 0.0, 80.4211, 100.3074], [157.7222, 76.3459, 2.9591, 0.5382, 16.0132, 5.2479, 3.228, 7.308, 129.4115, 0.0, 108.9466, 111.1212], [4.2898, 6.6976, 221.3299, 459.7734], [195.4867, 93.5768, 3.3957, 0.0, 10.6506, 27.1656, 2.0454, 3.8084, 137.3889, 1.1721, 122.0064, 117.8332], [188.267, 94.6371, 6.6944, 1.2412, 8.528, 29.7381, 3.9311, 7.1708, 146.6959, 1.7755, 4.9395, 127.5053, 111.4941], [264.3514, 138.377, 5.3846, 3.6716, 17.689, 36.8382, 14.4779, 5.9699, 193.674, 5.3784, 9.3348, 152.2502, 174.8854], [251.5781, 141.0279, 7.7778, 24.6529, 55.3602, 15.3709, 232.2316, 17.2463, 140.2214, 180.1059], [314.3338, 173.6339, 1.6817, 15.9015, 51.9645, 22.6916, 17.8069, 302.2556, 2.5661, 2.2604, 255.6979, 187.9366], [308.7802, 204.3844, 10.6399, 0.0, 19.551, 61.4313, 11.8891, 16.9834, 309.7898, 2.1384, 0.0, 235.7645, 246.1074], [598.6781, 291.8641, 12.5479, 2.1353, 17.6518, 113.19, 14.7336, 21.2722, 444.0764, 3.6547, 2.5953, 360.5203, 353.8726], [793.6094, 415.1309, 23.9963, 40.7778, 134.1816, 36.786, 3.6369, 37.6712, 5.6376, 7.5767, 471.8726, 457.9089], [627.0014, 359.9922, 15.5717, 27.8183, 116.277, 24.6092, 25.012, 504.7934, 6.0912, 389.7331, 394.8905]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

