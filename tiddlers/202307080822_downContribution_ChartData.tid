created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Free H\u00e4nd", "Aronorf Xideliesi", "Govinda Ektar", "Elonith Requiem", "Legoh Brave", "Lost Uber Driver", "Luke The Knight", "Rapiorel", "Free H\u00e4nd", "Legacy Of Mathus", "Elonith Requiem", "Bae Ken", "Shaca Booey", "No Reserv\u00e9", "Charr Surethang", "Ateriuz"];
const professions = ["Renegade", "Guardian", "Vindicator", "Reaper", "Tempest", "Herald", "Berserker", "Willbender", "Vindicator", "Berserker", "Scourge", "Reaper", "Berserker", "Vindicator", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[136.5108, 29.4752, 0.0, 149.9194, 183.7526], [261.9676, 55.0839], [75.4892, 11.5155, 11.8605, 0.0, 0.0, 0.0, 112.4948, 31.3978, 98.1782, 144.3736, 40.5806, 19.3488], [0.0, 38.9783, 281.0415, 0.0, 0.0, 257.8226, 459.433], [186.0297, 0.0, 0.0, 36.1774, 228.3299, 45.7367, 101.828, 293.5927], [226.6618, 659.5604, 0.0, 427.9697, 377.5484, 134.9173, 0.0, 0.0, 0.0], [60.3165, 0.0, 36.5846, 250.8966, 0.0, 99.5161, 272.6082, 0.0, 43.828, 258.6545, 288.4176, 0.0, 286.9394, 17.3226, 72.478], [249.6367, 4.146, 310.0089, 115.2241, 0.0, 246.1452, 31.4769, 282.9247], [143.9644, 0.0, 0.0, 235.0538, 194.5964, 521.6923, 0.0, 88.697, 0.0, 110.447, 346.551, 30.5948, 0.0], [202.8525, 110.7981, 225.9555, 0.0, 0.0, 49.4839, 703.4536, 65.4021, 186.3871], [31.6726, 428.2258, 323.8473, 367.9011, 525.0909, 247.2258, 98.8656, 943.7959, 0.0, 0.0], [101.3417, 45.0652, 132.9852, 73.4138, 0.0, 19.6129, 277.3608, 17.4947, 162.5699, 142.3782, 350.0989, 0.0, 316.9091, 332.4839, 89.3902, 361.4694, 0.0, 0.0], [269.7914, 102.1646, 339.9763, 0.0, 0.0, 91.3871, 190.1649, 0.0, 301.7957, 145.8655, 217.7582, 0.0, 0.0, 169.2326, 0.0, 47.3103, 0.0], [48.446, 0.0, 176.3056, 30.7414, 0.0, 0.0, 667.3196, 38.8399, 66.1828, 560.4655, 220.7473, 0.0, 0.0, 232.0323, 162.5039, 104.8776, 0.0, 0.0], [104.723, 10.6832, 594.8783, 11.2414, 0.0, 210.1452, 882.433, 154.9288, 96.0873, 809.7473, 136.3636, 3106.2581, 114.4212, 111.5306, 0.0, 0.0], [287.1259, 79.5248, 451.0742, 90.9138, 0.0, 64.2419, 661.6186, 50.1388, 449.5806, 573.3309, 779.8571, 0.0, 213.4545, 566.2581, 134.3669, 136.5714, 0.0, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

