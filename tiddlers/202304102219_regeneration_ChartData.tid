created: 20230410221909000
creator: Drevarr
modified: 20230705163525249
modifier: drevarr
tags: ChartData
title: 202304102219_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Zadie Miststep", "Fribble Bibble", "Tribal S", "Ak\u00e1nt\u00f3r", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Scrapper", "Tempest", "Scrapper", "Druid", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 112.9392, 107.6653, 190.5997, 969.9302, 115.8315, 129.7901, 143.7427, 142.1618, 128.9798, 68.2864, 141.4728, 246.1691, 182.721, 37.3968, 163.0691, 0.0, 90.8731, 369.0856, 71.1058], [77.5109, 165.5251, 431.3348, 599.8987, 1653.8362, 101.48, 100.7597, 102.6854, 73.4666, 123.9347, 36.7108, 109.121, 57.4182, 113.3424, 83.5915, 39.7674, 42.7726, 109.1439, 35.1114, 44.9597, 135.6667], [268.6554, 227.039, 1000.6535, 1883.4645, 8308.969, 325.858, 311.1091, 157.8509, 186.3569, 0.0, 260.3037, 190.316, 229.7786, 299.9114, 273.6385, 159.2231, 259.0165, 106.4251, 218.3315, 548.9539, 400.6171, 884.3621], [246.2342, 1687.4743, 3590.9091, 8865.2525, 338.9904, 106.2336, 249.57, 0.0, 216.4781, 5.8996, 268.9394, 63.0993, 311.9546, 32.0607, 109.9075, 163.611, 135.9818, 303.5893, 7.9757, 197.8413], [169.5112, 1167.2467, 1828.5575, 3261.6674, 8233.1462, 781.6805, 692.7379, 1038.3437, 329.94, 821.5262, 371.3416, 779.8644, 356.8739, 812.6101, 104.8037, 195.9696, 58.4065, 683.6681, 373.9161, 247.5034, 615.0514], [509.2378, 780.6643, 1636.6735, 3669.6409, 11096.3923, 499.3867, 740.0333, 601.7933, 554.4007, 335.6874, 715.988, 313.6196, 365.1833, 502.1814, 483.1032, 196.8845, 361.7175, 160.0531, 730.3067, 676.986, 136.8408, 946.6811], [11.7055, 1610.0755, 1997.1298, 4707.4682, 12743.472, 1012.0322, 988.3642, 752.6746, 772.9733, 258.2738, 799.1547, 289.9036, 279.9468, 357.3599, 756.4096, 313.9259, 272.1088, 343.2455, 242.3282, 437.3867, 141.7291, 449.9589]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

