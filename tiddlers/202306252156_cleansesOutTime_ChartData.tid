created: 20230625215649000
creator: Drevarr
modified: 20230705163536821
modifier: drevarr
tags: ChartData
title: 202306252156_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Arcanophage Farra", "Newtype Khan", "Solus Sanctus", "Crusader Siolith", "Pale Pam", "Raziel Umbra", "Black Raspberry Pie", "Primal Clone", "Miphest\u00f6", "Momomeko", "Eibh\u00ebar", "Etchery Howls", "Tribal S", "High Sorcer Baradun", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow", "Demon Staph", "Elon The Mender"];
const professions = ["Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Druid", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Druid", "Druid", "Tempest", "Tempest", "Tempest", "Scrapper", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.0189, 0.0, 5.0096, 7.962, 55.0811, 9.0136, 6.9914, 8.0263, 4.0, 5.4186, 15.9434, 14.0286, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0222, 18.1205, 1.9943, 0.0, 21.986], [5.0377, 0.994, 0.0, 0.0, 48.9952, 4.0068, 0.9979, 14.0526, 0.0, 16.1744, 18.934, 48.181, 0.0, 0.0, 5.9286, 0.0, 2.0345, 12.8444, 19.0843, 31.2299, 12.1591, 52.97], [6.0377, 0.994, 12.024, 0.0, 54.4452, 9.0204, 2.9957, 11.0351, 1.0, 16.0698, 10.0, 30.6286, 3.3214, 18.0976, 18.8333, 0.0, 0.0, 1.0, 33.0361, 18.9828, 18.2273, 55.31], [0.0, 0.0, 1.0, 9.9873, 64.337, 14.0544, 11.9872, 22.114, 0.0, 19.2093, 27.1415, 31.4667, 1.9643, 16.6341, 2.9524, 0.0, 0.0, 24.5333, 25.2169, 14.9828, 7.0227, 50.082], [84.4711, 10.0351, 3.0, 131.5, 116.8774, 162.1524, 0.0, 103.0244, 123.5, 22.1724, 30.1111, 116.0843, 57.1379], [0.0, 6.1557, 3.0048, 0.0, 169.9507, 0.0, 15.0471, 0.0, 0.0, 41.4302, 32.5, 72.219, 0.0, 0.9756, 60.0714, 0.0, 21.7111, 86.0361, 63.9598, 23.4773, 94.23], [20.9057, 8.994, 20.0529, 14.3544, 130.655, 17.1429, 45.1285, 37.9035, 0.0, 48.2674, 28.9057, 13.0667, 8.8929, 54.5854, 18.5714, 0.0, 10.069, 10.1556, 57.1928, 41.5805, 33.1818, 121.078], [8.0943, 5.988, 1.0, 0.9873, 153.6089, 9.0136, 30.0321, 53.2368, 7.0125, 56.7326, 63.1604, 74.9714, 0.0, 46.3415, 33.881, 0.0, 4.6207, 36.4667, 94.2771, 56.9713, 21.6591, 101.494], [5.0377, 0.0, 11.0625, 0.0, 181.0191, 19.1088, 26.1242, 27.6842, 0.0, 32.6628, 55.6132, 44.4762, 0.0, 35.2683, 15.619, 1.98, 0.0, 37.1778, 96.5783, 61.4368, 32.4545, 108.712], [0.0, 19.0962, 3.9747, 183.4165, 16.2857, 28.0685, 40.2018, 0.0, 35.1512, 51.1509, 88.4, 1.9643, 0.0, 39.1429, 6.9655, 31.4444, 62.8675, 97.2759, 38.5455, 125.886], [5.5689, 11.0288, 16.519, 191.6248, 16.0272, 28.03, 64.7807, 0.0, 49.6512, 52.2358, 97.6571, 0.0, 62.8537, 21.881, 0.0, 8.4138, 46.6667, 110.4578, 47.8333, 24.5682, 135.186], [2.9984, 5.0068, 117.0664, 146.7281, 4.0, 88.4651, 123.9811, 201.2381, 0.0, 67.1463, 87.4048, 20.1379, 75.3333, 126.9157, 87.9368, 21.3409, 232.258], [46.0702, 8.0125, 111.2558, 165.4906, 256.3714, 5.9643, 154.4634, 71.2857, 0.98, 10.069, 138.2, 220.8193, 219.5287, 124.4091, 286.45], [26.4528, 0.0, 20.0433, 27.3418, 218.2003, 49.2177, 38.9722, 61.7281, 5.2375, 60.3488, 43.9717, 102.7429, 57.7561, 23.8571, 0.98, 3.0, 24.1687, 87.7586, 18.0909, 186.538], [1.0, 14.9701, 34.226, 32.038, 296.2703, 46.4014, 62.4797, 82.386, 0.0, 81.7326, 94.7736, 143.8286, 7.0, 64.8293, 61.119, 0.0, 8.0345, 54.9111, 126.7108, 92.0115, 47.2273, 167.616], [20.3019, 4.988, 48.351, 47.2785, 316.2464, 80.0204, 93.8266, 88.7544, 9.0125, 89.1977, 110.6226, 177.6667, 5.0, 70.0488, 6.9286, 11.8966, 69.3778, 148.7349, 58.3736, 63.9091, 201.182], [22.283, 18.018, 77.7019, 65.481, 328.6455, 78.8027, 107.9979, 109.5702, 20.0625, 88.3605, 121.6038, 150.5143, 41.1786, 76.0244, 41.6667, 11.06, 12.0, 80.9333, 145.5783, 157.2644, 92.2727, 203.104], [17.5472, 0.0, 34.2692, 75.3418, 347.4992, 64.1497, 86.379, 118.2632, 0.0, 51.8837, 102.3396, 184.0286, 0.0, 95.1951, 44.0238, 4.1724, 120.5778, 171.4217, 194.3391, 49.0909, 217.154], [22.1887, 8.024, 58.2692, 65.8228, 358.4865, 90.9864, 96.833, 145.5526, 18.0375, 88.1744, 148.4434, 235.3143, 7.9643, 129.0244, 40.4286, 35.4483, 145.1333, 178.8193, 128.1494, 88.8864, 310.238]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

