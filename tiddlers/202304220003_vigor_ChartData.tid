created: 20230422000344000
creator: Drevarr
modified: 20230705163526278
modifier: drevarr
tags: ChartData
title: 202304220003_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Mac Saharlot", "Xyntharos", "Tegan Parker", "Sarah Dresser", "\u00c1rkantor", "Domina Flagbringer", "Newtype Khan", "Skye Nightroad", "Drevarr Moonwillow", "Elonith Primal"];
const professions = ["Tempest", "Druid", "Vindicator", "Tempest", "Tempest", "Vindicator", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 31.3461, 0.0, 23.4832, 16.7411, 35.698, 32.1417, 15.12, 0.0, 0.0, 1.242, 0.0, 7.8221, 0.3934, 17.5085, 0.0, 57.105, 93.4848, 0.0, 18.9715, 33.454, 24.1488], [10.3831, 0.0, 0.0, 54.1946, 0.0, 65.9715, 0.0, 0.0, 0.0, 64.08, 0.0, 0.0, 29.67, 0.0, 0.0, 28.8486, 0.0, 0.0, 64.9968, 0.0, 0.0, 0.0, 55.9417, 0.0, 53.9478], [6.6792, 23.8276, 24.4795, 25.7751, 6.9696, 28.6311, 21.6154, 31.4293, 15.8152, 34.92, 20.097, 11.3643, 7.7832, 6.1438, 20.16, 17.0032, 15.9034, 0.0, 13.9872, 26.9663, 52.3584, 12.96, 20.7228, 22.897, 2.0898], [0.0, 26.107, 31.8479, 0.0, 156.24, 15.939, 0.0, 0.0, 21.0874, 0.0, 18.5645, 51.6215, 54.2145, 62.4672, 0.0, 0.0, 0.0, 69.5439], [86.768, 127.6007, 69.3954, 66.96, 176.085, 0.0, 93.2328, 0.0, 43.344], [0.0, 55.7244, 25.5859, 97.655, 90.6983, 70.8787, 133.6652, 119.991, 0.0, 76.8195], [0.0, 70.4036, 0.0, 126.5481, 57.8952, 51.1623, 0.0, 75.0789, 0.0, 357.3, 0.0, 0.0, 8.556, 0.0, 13.1443, 70.242, 55.0387, 85.1908, 66.3757, 0.0, 56.5344, 74.6214, 0.0, 54.2187], [50.3976, 16.9752, 109.0944, 132.4488, 119.4817, 57.3503, 134.1, 0.0, 17.7813, 7.728, 15.3596, 79.5514, 52.0149, 70.224, 88.3379, 100.2862, 183.3408, 37.0656, 25.944, 78.6848, 45.0855], [0.0, 117.9736, 66.9563, 57.4385, 94.5384, 88.7847, 86.4618, 203.7676, 78.9165, 460.62, 178.101, 0.0, 16.5324, 9.5593, 65.7216, 125.2729, 22.1338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [164.0047, 146.3736, 130.7096, 130.1094, 71.2536, 170.6231, 107.873, 227.957, 90.2268, 690.48, 210.42, 88.9686, 16.8636, 8.9934, 60.8429, 121.033, 34.6157, 74.8752, 94.9635, 355.1904, 150.8544, 60.482, 163.3285, 203.4072], [69.1601, 284.3408, 236.4823, 346.5, 183.5856, 319.3498, 191.7062, 256.8334, 270.1692, 876.06, 118.125, 51.8949, 133.8324, 100.4235, 158.7398, 21.7239, 8.6592, 0.0, 31.5149, 23.3708, 31.968, 31.3344, 0.0, 0.0, 59.3658]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

