created: 20230213220222000
creator: Drevarr
modified: 20230705163519274
modifier: drevarr
tags: ChartData
title: 202302132202_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Arriasa", "Smol Daddy Tika", "Arcanophage Farra", "Belvyn Brightblade", "Xanvias Tseli", "Uneeta Healah", "Sassy Daddy Demon", "Ryvalia Fazebringer", "Mistwalker Caelon", "Veron Blackburn", "Jupi Jupi Jupi", "Blanco Padre Guard", "Zady Stardust", "Gavann", "Xyntharos", "Zaylen Harker", "Sygaldry Verdandi", "Ace Hammers", "Ravioli Fetabringer", "Bella Sassy", "Koralia Danai"];
const professions = ["Dragonhunter", "Druid", "Berserker", "Spellbreaker", "Firebrand", "Berserker", "Scrapper", "Vindicator", "Chronomancer", "Vindicator", "Herald", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.176, 12.9595, 1.0447, 0.0, 0.9971, 2.645], [3.168, 6.612, 0.6027, 0.0, 0.0, 0.3703, 2.2908, 1.1368, 7.876, 0.0, 1.4208], [4.464, 7.6699, 1.3259, 0.0, 0.0, 0.8464, 1.078, 0.6864, 0.0, 9.308, 0.0, 0.9768], [2.016, 11.1082, 1.2858, 1.5229, 3.4385, 4.9857, 0.0, 1.6072, 1.432, 0.4512, 0.0], [3.744, 12.1661, 1.567, 0.0, 2.6832, 8.1995], [4.608, 8.7278, 0.884, 0.0, 0.7977, 3.0153, 2.0212, 0.0, 1.96, 8.95, 0.0, 0.9768], [0.529, 1.2054, 1.1784, 2.3276, 5.5248, 0.0, 0.8232, 20.406, 0.0, 2.4864], [7.056, 11.3726, 0.7232, 0.0, 1.8674, 1.7986, 5.2553, 0.0, 2.3128, 4.654, 1.2972, 1.5096], [3.312, 12.4306, 1.3259, 0.0, 0.0, 3.6501, 5.39, 0.0, 0.0, 10.74, 1.692, 0.0], [0.144, 14.8109, 0.0, 0.0, 2.1393, 2.5921, 0.0, 0.0, 4.1944, 22.554, 0.0, 1.5096], [11.52, 32.7955, 0.0, 0.0, 3.7166], [4.2189, 2.9552, 9.5749, 6.3333, 0.0, 2.6656, 23.27], [0.2645, 1.6876, 1.958, 6.0835, 5.5248, 0.0, 6.1152, 25.06, 2.0304, 2.5752], [2.451, 0.0, 4.3331, 6.1893, 18.4608, 5.2528, 49.404, 2.1714, 6.1272], [4.176, 26.977, 4.902, 3.0277, 7.2473, 12.1275, 0.0, 6.1936, 28.64, 3.108], [6.912, 26.1835, 5.585, 0.0, 0.0, 2.0102, 20.2125, 1.9812, 2.6656, 31.146, 1.6356, 1.8648], [11.808, 22.7453, 2.0492, 3.9886, 6.877, 12.5317, 3.8808, 35.084, 2.9892, 9.0576], [6.624, 35.1758, 5.2636, 0.0, 3.1365, 1.1638, 8.7587, 0.0, 6.8208, 42.96, 2.0868, 5.9496], [18.432, 20.8939, 3.9778, 2.0306, 1.3754, 29.106, 2.2152, 4.1944, 32.22, 0.6486, 4.1736], [11.664, 38.0851, 2.5715, 0.84, 4.605, 13.225, 10.5105, 0.0, 7.2128, 35.442, 2.5098, 1.0656], [21.312, 43.3747, 5.6252, 6.9075, 12.9076, 17.1133, 0.8892, 8.5456, 69.81, 7.4448, 12.1656], [16.992, 49.9867, 6.6699, 6.273, 15.2352, 19.5388, 9.016, 74.822, 5.1606, 12.2544]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

