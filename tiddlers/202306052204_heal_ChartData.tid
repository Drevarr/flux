created: 20230605220452000
creator: Drevarr
modified: 20230705163533790
modifier: drevarr
tags: ChartData
title: 202306052204_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Nurse Pam", "Arriasa", "Solus Sanctus", "Tegan Parker", "Stoic Rapidfire", "Artakama Nahid", "Etchery", "Johosh Of The North", "Ak\u00e1nt\u00f3r", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Druid", "Firebrand", "Tempest", "Druid", "Tempest", "Scrapper", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[36.36, 504.303, 570.8641, 580.4085, 332.3721, 723.2083, 1436.9108], [65.7568, 0.0, 565.2727, 557.5049, 807.2254, 463.0698, 850.375, 1768.6123, 552.2473, 318.5932, 368.9333], [1.9722, 593.2245, 323.4038, 525.9732, 0.0, 41.2432, 533.1818, 125.699, 178.7183, 197.3023, 120.1458, 464.2031, 48.0638, 249.339, 47.2444], [36.8654, 1510.3578, 123.6333, 23.5676, 103.0606, 564.068, 678.4225, 182.5349, 313.2708, 1130.9138, 307.5771, 405.1695, 413.8222], [1438.8045, 336.5, 1698.1592, 93.7333, 25.8108, 23.36, 385.2424, 480.2718, 446.4789, 30.8837, 952.5208, 1088.7477, 384.7314, 260.2881, 69.9333], [1635.8625, 441.7885, 1474.4633, 788.3667, 119.9459, 83.84, 302.697, 600.0194, 628.3521, 231.4884, 880.3542, 1217.4369, 575.7154, 197.9492, 225.3333], [28.0, 1969.869, 365.6538, 2350.3953, 320.2667, 24.4054, 296.4, 378.0303, 787.6796, 755.6056, 264.6512, 1645.2708, 2061.9877, 527.4415, 59.6102, 92.1333], [106.6389, 2325.0473, 872.0385, 2522.8784, 387.3, 202.2162, 9.52, 599.0303, 839.1553, 376.1549, 378.3256, 1179.4583, 1679.1908, 791.5931, 430.7627, 318.3778], [11.9167, 3026.1246, 299.9423, 2926.5098, 78.7, 135.1622, 32.56, 744.6667, 915.2718, 650.3099, 881.2326, 1371.6458, 1692.3969, 749.7154, 187.8136, 226.4], [4.3333, 2905.6434, 873.6346, 3186.2612, 131.7, 67.8919, 21.44, 532.0303, 1002.9223, 864.0986, 994.7907, 2015.4375, 2149.8892, 1104.9282, 205.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

