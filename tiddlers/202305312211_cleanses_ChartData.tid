created: 20230531221142000
creator: Drevarr
modified: 20230705163532409
modifier: drevarr
tags: ChartData
title: 202305312211_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Black Raspberry Pie", "Miphest\u00f6", "Eibh\u00ebar", "Cat Wigglebooty", "Venomina The Siren", "Etchery Of Ascalon", "Tegan Parker", "Artakama Nahid", "Tribal S", "Arriasa", "Johosh Of The North", "Drevarr Moonwillow"];
const professions = ["Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Scrapper", "Tempest", "Tempest", "Tempest", "Tempest", "Druid", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2157, 0.0565, 0.4333, 0.17, 0.1294, 0.0, 0.0109, 0.0486, 0.16, 0.0292, 0.2571, 0.1107, 0.1672, 0.0, 0.0], [0.2051, 0.2155, 0.0, 0.1348, 0.1184, 0.0, 0.0652, 0.0757, 0.244, 0.0877, 0.1786, 0.209, 0.2833, 0.0156, 0.0175], [0.2715, 0.2155, 0.0111, 0.1725, 0.1491, 0.0, 0.1087, 0.0757, 0.176, 0.0409, 0.0429, 0.2213, 0.2867, 0.0], [0.3077, 0.1484, 0.1667, 0.1518, 0.2083, 0.0, 0.0, 0.1838, 0.38, 0.0409, 0.0786, 0.1025, 0.2799, 0.0, 0.0], [0.7029, 0.4841, 0.0556, 0.4288, 0.4956, 0.2222, 0.0, 0.3622, 0.388, 0.2047, 0.0214, 0.2131, 0.8225, 0.0312, 0.0], [0.8039, 0.5548, 0.2, 0.5453, 0.4167, 0.0, 0.1522, 0.2595, 0.544, 0.1228, 0.2071, 0.3566, 0.8669, 0.0469, 0.0], [1.267, 0.6643, 0.2667, 0.6864, 0.6996, 0.1667, 0.4891, 0.5838, 0.768], [1.0106, 0.788, 0.2778, 0.6751, 0.4276, 0.3704, 0.0543, 0.2919, 0.716, 0.2105, 0.25, 0.8689, 1.4983, 0.0625, 0.0], [1.2217, 0.8693, 0.4111, 0.8533, 0.7895, 0.4815, 0.5761, 0.3946, 0.972, 0.5205, 0.6571, 0.8525, 1.3242, 0.3281, 0.0175], [1.7511, 1.1378, 0.6667, 0.9276, 0.8794, 0.1481, 0.2935, 0.5297, 0.816, 0.4269, 0.4429, 0.9221, 1.6553, 0.2344, 0.0], [1.7225, 1.1555, 0.5889, 0.9893, 1.0746, 0.3519, 0.6522, 0.3892, 0.776, 0.3918, 0.3643, 0.8934, 1.4676, 0.1094, 0.0], [1.6848, 1.3216, 0.2333, 1.1039, 0.0154, 0.4815, 0.7609, 0.6541, 1.18, 0.4094, 0.6286, 1.1598, 1.7474, 0.2969, 0.0], [1.4208, 1.1413, 0.7778, 1.0636, 0.9605, 0.5741, 0.7391, 0.5622, 1.056, 0.5146, 0.6857, 1.5615, 1.8874, 0.3281, 0.0088]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

