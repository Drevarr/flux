created: 20230429215910000
creator: Drevarr
modified: 20230705163527484
modifier: drevarr
tags: ChartData
title: 202304292159_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Bombshell Cutie", "Tootsie Pop Rocks", "Fribble Bibble", "Kenley Ellesmera", "Jupi Jupi Jupi", "Fallendruid", "Johosh The Great", "Miphest\u00f6", "Zady Stardust", "Kaotic Reaper Z", "Gabe Malhorn", "Drevarr Moonwillow", "Owl Scowls", "Newtype Khan", "Blancooo Padreee", "Venomina The Fierce"];
const professions = ["Chronomancer", "Scrapper", "Scrapper", "Druid", "Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Scrapper", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0479, 4.6658, 7.0011, 3.7978, 11.9784, 24.4667, 25.4755, 0.7494, 23.0144, 4.1205, 2.4898, 10.1682, 1.7339], [0.86, 15.4413, 0.0, 25.1105, 2.9534, 42.9061, 0.0, 0.0, 19.4811, 10.6774, 0.0, 0.0, 9.7888, 12.5939], [6.8393, 12.502, 3.312, 3.4132, 62.4544, 30.1594, 3.0305, 28.1029], [4.6368, 18.3601, 24.1448, 25.4755, 0.7494, 21.2796, 26.568, 1.3832, 22.237, 4.1675, 5.4607, 3.2604, 2.9624, 14.047], [0.0, 0.5741, 6.6976, 52.4746, 37.9277, 0.2645, 25.5587, 12.3923, 6.9905, 11.7837, 9.0956, 11.1853, 9.0664, 3.0912, 11.4098], [0.0, 19.1759, 0.0, 4.129, 25.6312, 54.4062, 53.2358, 3.7468, 29.1438, 9.2865, 0.0, 0.0], [2.0507, 3.974, 1.3331, 5.7152, 2.9146, 4.1216, 101.4079, 48.7805, 8.3421, 22.3205, 11.9618, 0.0, 16.4402, 11.8942, 10.7593, 1.1592, 14.1008], [6.1047, 12.6643, 0.0, 0.1429, 13.0714, 26.9836, 93.6816, 28.103, 0.0, 11.565, 6.7343, 22.142, 1.3385, 7.5719, 3.2228, 20.8104, 13.9932], [2.3152, 15.3455, 0.0, 25.2898, 1.4573, 16.1644, 65.6737, 37.585, 0.529, 26.7152, 26.3527, 42.1933, 0.4259, 11.3274, 0.0, 3.8824, 9.2032], [0.0, 27.8208, 83.3799, 38.9558, 2.3252, 35.9671, 14.8523, 0.0, 35.2561, 3.9242, 8.932, 5.1414, 0.4968, 30.6774], [1.2852, 3.3516, 7.9695, 16.5741, 7.7722, 11.3344, 104.6273, 40.7837, 8.287, 16.191, 13.899, 40.8629, 4.7759, 8.1809, 5.5928, 2.5392, 5.5973], [0.0, 3.984, 7.3994, 10.1266, 6.6074, 13.0021, 4.416, 16.8084, 107.8466, 39.7555, 28.1029, 5.6273, 23.2824, 6.7532, 3.4307, 3.8874, 5.9248, 20.9898], [3.5532, 12.0418, 11.563, 15.2167, 11.9011, 16.3576, 133.279, 39.6413, 34.9263, 9.6863, 1.9258, 26.3233, 2.6161, 4.7299, 1.1662, 9.1264, 16.7918], [0.0, 30.8544, 10.2721, 24.6343, 25.6473, 63.2958, 22.6982, 26.5972, 236.9405, 60.3187, 0.0, 70.5465, 31.98, 2.6174, 63.6701, 16.153, 6.6178, 4.0755, 15.6584, 44.9397], [0.0, 0.0, 22.4333, 45.7884, 201.8501, 168.504, 58.5189, 31.857, 7.6395, 112.1354, 17.3394, 30.8966, 13.9194, 25.4104, 110.8692], [27.7628, 48.7935, 36.145, 59.5056, 325.1493, 170.2176, 16.2545, 133.2288, 52.029, 3.7666, 78.7799, 21.0506, 22.8172, 1.8183, 21.6752, 90.4176]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

