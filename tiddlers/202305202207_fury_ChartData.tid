created: 20230520220730000
creator: Drevarr
modified: 20230705163530978
modifier: drevarr
tags: ChartData
title: 202305202207_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Bamm\u00edt", "Lavitz Elite", "Tootsie Pop Rocks", "Grilo Gringo", "My Birthday Girl", "Red Omega Red", "Venomina The Siren", "Lucky Leipreach\u00e1n", "Eruyin", "Aronorf Xideliesi", "Lord Erin The Wise", "Tribal S", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Tempest", "Berserker", "Berserker", "Scrapper", "Dragonhunter", "Scrapper", "Herald", "Weaver", "Scrapper", "Vindicator", "Firebrand", "Weaver", "Druid", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[63.675, 27.5209, 34.7861, 0.0, 0.0, 15.2139, 30.7367, 30.9359, 0.0, 7.703, 68.7428, 115.5974, 30.8339, 8.7063, 24.8454, 26.2548, 30.723, 108.5416, 30.8754, 197.589, 0.0, 20.3491, 101.5708, 0.0, 62.8813, 29.2896, 0.0, 27.0421, 29.2248, 67.2854], [66.1076, 84.8219, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.2274, 58.707, 173.7166, 29.0496, 91.2326, 85.8276, 30.1101, 0.0, 22.9337, 0.0, 59.5383, 86.6592, 210.393, 0.0, 2.5436, 127.0015, 0.0, 36.0396, 0.0, 47.7003, 0.0, 0.0, 32.9074, 18.81, 5.319], [373.935, 37.2033, 420.1405, 130.9185, 56.7084, 148.614, 27.2592, 32.5008, 92.7746, 100.3068, 93.1711], [203.9033, 106.7291, 0.0, 80.758, 13.9892, 50.8146, 18.7405, 87.3485, 0.0, 76.4377, 107.3731, 28.356, 183.0067, 129.4756, 51.0796, 79.7026, 0.0, 0.0, 112.6917, 62.883, 217.086, 18.8112, 18.9842, 297.7074, 15.9894, 24.682, 63.6004, 51.516, 0.0], [208.6292, 82.9682, 80.8056, 23.1356, 39.4225, 240.707, 70.686, 452.214, 0.0, 36.4175, 229.6382, 0.0, 97.4592, 127.2807, 58.5576, 19.5471, 66.5146, 69.3, 237.4047], [274.0174, 71.8145, 34.372, 50.3777, 0.0, 31.5462, 0.0, 64.0476, 0.0, 15.953, 133.4066, 48.2664, 305.3722, 140.0873, 54.1609, 59.7915, 23.6742, 45.276, 175.582, 23.1642, 272.376, 0.0, 14.2692, 237.1, 51.7329, 27.7402, 29.4831, 47.4336, 17.1495, 33.7512, 20.8692, 104.607], [74.2459, 0.0, 124.5413, 429.5374, 49.6332, 1295.823, 13.7643, 6.3488, 236.1863, 0.0, 87.9402, 32.2796, 0.0, 0.0, 0.0, 24.1164, 106.7346], [246.8303, 120.0104, 27.6486, 35.708, 7.8064, 24.3269, 0.0, 74.9662, 26.9533, 123.3851, 159.8, 44.2068, 342.1901, 97.3737, 55.1536, 124.6333, 19.9267, 55.6571, 262.4153, 48.2256, 411.183, 63.9414, 38.9818, 290.8548, 0.0, 58.6278, 0.0, 95.88, 12.4848, 0.0, 33.175, 28.908, 107.0892], [351.429, 77.2913, 67.9157, 72.085, 33.6036, 57.1569, 0.0, 47.7885, 0.0, 88.7443, 121.4096, 68.2584, 492.169, 191.2768, 35.8178, 93.3444, 32.3585, 0.0, 167.7606, 18.7578, 256.371, 0.0, 18.9222, 297.7074, 0.0, 66.5379, 37.3962, 74.7864, 67.7592, 22.311, 40.9336, 29.1456, 208.9481], [301.6337, 145.0667, 39.1952, 22.6985, 9.6706, 83.4716, 27.6198, 113.2207, 221.3447, 24.684, 562.5562, 100.0433, 40.3674, 111.7463, 11.9605, 280.2927, 57.8646, 400.707, 74.9529, 30.5857, 311.8694, 0.0, 73.7289, 44.1868, 123.4455, 0.0, 0.0, 33.1848, 154.6056], [467.1889, 217.7028, 0.0, 51.592, 0.0, 60.5759, 0.0, 48.1445, 0.0, 115.1351, 45.5886, 46.7364, 498.937, 74.4151, 73.0831, 36.2812, 0.0, 0.0, 298.1702, 88.6482, 399.543, 0.0, 24.0095, 441.7643, 0.0, 88.407, 43.9701, 112.0198, 5.1192, 15.6177, 40.6043, 0.0, 312.9345], [368.1706, 112.8905, 66.2105, 43.1915, 8.118, 30.8217, 7.9652, 67.1333, 29.5126, 130.2221, 153.3217, 29.58, 601.5398, 124.8038, 35.611, 131.5994, 78.1361, 44.3705, 337.2771, 53.1216, 610.227, 32.0333, 33.2534, 360.4468, 63.4077, 33.2786, 123.6852, 60.8472, 13.2867, 15.9289, 77.8932, 169.4988], [380.1901, 214.8275, 43.6775, 66.0635, 28.1752, 49.086, 17.5777, 132.8029, 33.0584, 129.7663, 357.8705, 61.9344, 910.4314, 131.8782, 41.2773, 163.3527, 48.2236, 91.0048, 466.7289, 39.474, 866.598, 44.0691, 472.6771, 13.0, 100.251, 52.7834, 191.6002, 49.788, 34.5987, 36.3237, 93.8916, 224.9937], [591.5341, 331.7572, 91.3744, 61.9748, 0.0, 61.1478, 0.0, 138.4204, 52.0137, 179.2206, 450.7273, 67.7076, 1059.8688, 157.0392, 74.1171, 234.2318, 38.9783, 65.1004, 518.4458, 45.2268, 1029.849, 48.2168, 63.4669, 613.3838, 157.9059, 62.0542, 136.7888, 58.86, 26.8398, 27.2891, 94.0896, 286.6941], [872.9921, 326.3488, 101.8492, 114.9792, 67.8304, 116.7032, 14.4187, 235.4216, 112.5185, 320.7465, 625.8835, 150.9804, 1575.049, 118.7972, 150.5711, 426.8416, 127.1899, 131.3974, 933.9366, 176.4396, 1418.916, 85.5472, 100.6702, 939.1108, 2.925, 323.6796, 190.5691, 552.2688, 154.656, 107.5257, 144.2864, 259.4196, 673.1194]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

