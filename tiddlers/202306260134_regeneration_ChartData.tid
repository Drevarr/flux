created: 20230626013408000
creator: Drevarr
modified: 20230705163538920
modifier: drevarr
tags: ChartData
title: 202306260134_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Zhavashian", "Belvyn Brightblade", "Sygaldry Verdandi", "Cat Wigglebooty", "Tootsie Pop Rocks", "Miphest\u00f6", "Elon The Archmagus", "Artakama Nahid", "Fribble Bibble", "Drevarr Moonwillow"];
const professions = ["Tempest", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Tempest", "Tempest", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[87.89, 132.3821, 311.0897, 198.1144, 268.4772, 196.6272, 110.4851, 48.3235, 48.0042, 115.8639, 88.9274], [124.2259, 68.904, 83.4322, 35.3059, 814.0569, 32.6397, 92.4053, 11.9746, 60.0191, 61.7232, 115.4243, 43.0661, 35.235, 78.2352, 71.4402, 109.6867, 36.3469], [361.0688, 119.5602, 21.1429, 36.3132, 39.8816, 37.6376, 26.0775, 82.7712, 72.4464, 188.8836, 0.0, 81.0855, 53.1269, 29.9146, 159.9997, 80.073, 93.6578, 60.937, 14.4716, 57.9439, 55.7382, 76.4801, 64.9618, 64.4923, 63.222], [163.6762, 115.2144, 52.0009, 41.2985, 862.3196, 68.9202, 16.4268, 148.5358, 0.0, 84.319, 0.0, 22.535, 182.3459, 12.4425, 193.6656, 0.0, 57.1445, 0.0, 13.4366, 64.2114, 0.0, 62.745, 68.244, 39.7376, 23.977, 0.0, 0.0, 0.0, 0.0, 43.6149, 21.8165, 88.6682], [0.0, 299.9808, 121.5598, 0.0, 840.0907, 193.9797, 0.0, 346.0902, 94.8584, 28.395, 10.4412, 117.6314, 164.923, 216.7425, 70.7184, 35.9658, 242.3846, 0.0, 97.2374, 162.6689, 11.0431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [29.929, 112.2336, 90.6732, 174.6108, 843.8956, 95.3732, 0.0, 55.7964, 30.1142, 11.1126, 26.488, 105.7056, 108.5183, 54.7425, 92.7936, 85.9014, 124.3564, 91.7582, 83.1956, 137.0858, 170.7919, 151.2949, 239.8955, 115.4765, 175.2733, 80.1458, 64.7682, 92.4283, 62.3884], [26.2829, 303.3936, 232.4502, 241.1489, 996.4938, 143.5689, 56.7181, 37.0385, 40.2622, 32.3818, 34.496, 77.4013, 31.2268, 70.5375, 114.912, 49.959, 200.0057, 47.743, 125.6076, 75.6061, 101.0124, 155.273, 63.074, 160.4636, 98.3002, 198.2609, 22.1053, 62.0536, 119.3386, 40.0076, 41.6373, 41.5922, 108.7358], [170.6054, 330.6528, 313.1269, 209.0311, 1617.9005, 247.0893, 113.2232, 106.6765, 83.4927, 48.8704, 104.1964, 196.1168, 113.1713, 144.135, 236.6064, 134.1756, 249.1921, 164.6352, 135.4747, 184.8341, 227.8062, 144.2637, 160.9393, 131.6582, 48.7025, 92.897, 188.7558, 142.5011, 105.0279, 70.3979, 133.6999], [152.7206, 457.704, 250.5208, 220.2782, 2350.6519, 230.0056, 101.6788, 398.2591, 98.0297, 72.7192, 167.3364, 326.8355, 179.7609, 131.22, 233.2368, 221.1066, 395.2174, 168.5479, 115.1462, 184.1234, 220.3186, 258.045, 172.6573, 200.6323], [320.2502, 553.3488, 585.6271, 248.5584, 2654.8468, 341.1895, 458.399, 624.4993, 162.0128, 128.7695, 265.0032, 462.9363, 589.4834, 346.95, 494.1648, 323.4114, 730.7974, 61.8743, 268.4313, 265.5932, 448.3123, 295.6126, 411.532, 396.8135, 348.2842, 295.2206, 142.7748, 50.9208, 561.0258, 427.357, 257.8155, 157.3026, 170.6894]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

