created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Conky Jr", "Synomi\u00f1 Spyce", "Wall Knot", "Heymerino", "Ain Sof Aur", "Kittendoo", "Aronorf Xideliesi", "A\u00fcrora Windrunner", "Pet Pirate", "Legoh Brave", "Twinks R Us", "Geradenil", "Drevarr Moonwillow", "Emobilized", "F\u00f9gly", "Mother Ship"];
const professions = ["Herald", "Scourge", "Firebrand", "Chronomancer", "Guardian", "Firebrand", "Firebrand", "Firebrand", "Druid", "Tempest", "Firebrand", "Vindicator", "Scrapper", "Vindicator", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9677, 63.1085, 0.0, 26.1207, 18.4874], [8.9893, 12.9247, 47.16, 7.989, 0.0, 1.9697, 0.0, 34.0207, 0.0, 16.5259, 0.0], [26.982, 23.0124, 11.0119, 12.0517, 9.1111, 3.0, 6.9794, 7.9893, 3.9785, 26.0218, 2.989, 0.0, 4.9091, 0.0, 14.9948, 0.0, 5.0, 2.0], [5.0172, 28.1481, 10.0323, 18.2474, 1.9964, 7.9892, 40.0327, 29.4835, 0.0, 11.8182, 5.9677, 41.1525, 3.9796, 14.1897, 12.0336], [16.2554, 17.0373, 0.0, 16.3333, 3.0, 13.1031, 24.0427, 0.0, 41.3382, 19.989, 0.0, 12.0606, 0.0, 35.062, 1.9796, 19.7845, 2.0], [11.0323, 17.8144, 34.0498, 9.9462, 53.2, 35.9341, 0.0, 8.0303, 0.9677, 58.801], [54.1691, 6.0172, 3.0, 11.7581, 16.4227, 8.9893, 0.9892, 37.1818, 26.3736, 0.0, 0.9697, 7.2581, 52.261, 1.9796, 23.1293, 18.0336], [32.9964, 18.2019, 64.7151, 2.0, 0.0, 4.0, 5.9794, 12.9858, 1.9892, 40.6945, 53.9451, 0.0, 17.8182, 0.0, 48.1189, 0.0, 18.0, 21.7227], [21.3548, 201.8579, 10.1837, 95.3448], [110.1543, 30.3621, 3.1852, 60.5, 30.0412, 109.0, 26.3871, 129.8655], [66.2086, 81.1398, 99.1573, 12.0517, 43.5556, 11.0645, 35.5979, 49.6904, 68.2436, 62.9341, 0.0, 19.3333], [65.9209, 9.0217, 76.9703, 19.4138, 1.0, 6.0806, 28.6289, 62.3274, 14.957, 52.0945, 59.7473, 0.0, 17.8485, 1.9677, 77.0388, 0.9796, 26.181, 16.1092], [125.482, 107.1677, 169.2997, 37.5517, 64.2222, 77.7742, 78.1649, 122.1566], [53.8199, 114.3234, 36.0862, 27.4444, 45.0645, 39.0, 99.8826, 31.0323, 153.8545, 104.7692, 0.0, 41.303, 17.1935, 125.5116, 0.9796, 52.6293, 38.2941], [0.0, 163.7507, 43.2414, 64.7778, 60.8387, 63.134, 90.9253, 178.8, 130.989, 0.0, 59.3939, 45.9677, 161.5452], [113.5216, 111.559, 148.4659, 16.0517, 19.4815, 15.3226, 51.3505, 55.0747, 5.9677, 132.5491, 98.4945, 0.0, 34.2424, 3.9677, 93.8708, 0.9796, 70.7931, 51.5882]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

