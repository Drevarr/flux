created: 20230703220627000
creator: Drevarr
modified: 20230705163008079
modifier: drevarr
tags: ChartData
title: 202307032206_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Fribble Bibble", "Sister Elon\u00edth", "Mike The Archmagus", "Zadie Miststep", "Tootsie Pop Rocks", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Tempest", "Tempest", "Scrapper", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[511.4197, 33.1111, 89.246, 2.0339, 31.0606, 191.1065, 30.7714, 61.229, 6.914, 30.0, 575.5135, 376.4727, 450.1163, 86.4815, 711.0625, 868.4286, 202.0779, 313.9307, 590.0526, 534.7593, 330.7738, 800.4337, 779.3837, 1117.3281, 366.4327], [2709.5959, 92.7143, 344.7917, 129.1508, 110.5085, 83.5758, 412.294, 51.2667, 288.5115, 26.7634, 0.0, 1037.5, 2101.0182, 2679.6744, 2339.3148], [779.1606, 398.7143, 86.0278, 67.3492, 147.0508, 295.4474, 67.5524, 37.6336, 23.3441, 0.0, 586.8243, 1465.4364, 798.2326, 919.6481, 780.2292, 1567.7321, 742.013, 544.0891, 1012.1228, 1189.0, 910.4167, 885.494, 542.7791, 1199.1406, 692.4737], [1468.0417, 1544.0536, 1746.5714, 1076.3069, 4131.3684, 2350.9259, 2125.619, 2764.3373, 2286.907], [1887.75, 1262.6964, 534.4026, 1133.7723, 3524.8772, 1845.5463, 1994.0952, 2833.6988, 3165.2791, 3033.1406, 1903.4386], [1249.9948, 63.3611, 20.627, 14.8475, 119.7655, 17.0667, 29.4198, 2.2043, 35.2326, 1611.1351, 3068.5818, 1780.0, 542.2593, 1407.9375, 1157.9643, 685.6883, 619.198, 747.3333, 478.0648, 2031.5, 1709.8554, 972.4302, 1123.9688, 2150.4561], [1554.7306, 156.1429, 104.7639, 183.2143, 0.0, 283.3333, 33.9048, 470.3511, 1.1935, 30.0465, 2126.0676, 2251.7818, 2106.3721, 1971.9815, 1649.7708, 2490.6429, 199.4026, 869.9703, 2249.8421, 1365.75, 1749.3333, 1806.5301, 2350.5349, 2288.1562, 1514.9474], [1304.9171, 430.4286, 137.8472, 154.3492, 516.8682, 66.4286, 428.6794, 4.871, 151.7674, 2788.2432, 2115.4545, 1784.0233, 2603.0185, 2805.7917, 1846.0893, 1990.0649, 2205.099, 1051.7018, 2004.3519, 1537.6429, 2224.2048, 3232.0698, 3565.5156, 2119.9474], [2650.0518, 292.9143, 74.1389, 245.1508, 6.9492, 36.4242, 745.5437, 78.0, 623.4122, 26.3118, 87.6279, 2043.3514, 3032.7636, 3043.9302, 2262.8889, 3135.6667, 981.4107, 1417.8961, 2054.1386, 2289.5439, 3344.8241, 3650.0119, 4677.9398, 4509.0349, 4164.6406, 3144.2222], [3721.6684, 162.0286, 200.3056, 529.6429, 52.7119, 109.4242, 1069.3777, 134.7619, 282.3359, 107.2258, 134.7209, 2100.1622, 5399.6, 2811.7674, 497.7963, 6684.375, 4005.5357, 4883.6364, 1579.7723, 7026.2105, 3741.8889, 2411.7381, 4134.3012, 5931.1977, 2306.8906, 3732.8187]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

