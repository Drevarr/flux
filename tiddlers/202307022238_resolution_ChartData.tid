created: 20230702223827000
creator: Drevarr
modified: 20230705163541147
modifier: drevarr
tags: ChartData
title: 202307022238_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zayde Sunsabre", "Koranthin", "Thats Not Nice", "Kittendoo", "Amiti\u00e9l", "Aronorf Xideliesi", "Thalia Mavren", "Tika Fiery", "Pixzil", "Bella Sassy", "K\u00e2 Otik", "Silvyrs"];
const professions = ["Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[38.4949, 17.5651, 28.9296, 8.4934, 34.4593, 18.576, 0.0, 10.8265, 2.052, 26.449, 49.828, 0.0, 100.9008, 0.0, 66.9942, 101.435, 0.0, 0.0, 0.0, 1.4168, 44.8416, 43.0542, 13.462, 0.3845, 137.3652, 130.2642, 55.9548, 0.0, 64.3658, 40.1667, 0.0, 18.081, 30.349, 22.3657, 0.0, 0.0, 27.3306, 0.0, 36.2115, 21.756, 0.0, 21.1392, 96.0687, 60.323, 0.0, 36.7416, 0.0, 144.4028, 35.568], [0.0, 118.3896, 39.209, 414.5778, 229.9097, 38.2415, 0.0, 75.8184, 103.3454, 173.4696, 137.0628, 3.1489, 22.8555, 55.5291, 87.0982, 294.9804, 16.8758, 76.5503, 0.0, 216.9387], [26.4489, 68.9936, 86.7494, 0.0, 102.9461, 34.344, 14.4047, 0.0, 0.0, 42.8086, 43.9776, 68.1712, 0.0, 71.0136, 0.0, 83.4561, 137.7558, 0.0, 11.1552, 32.4245, 78.2784, 15.687, 37.5632, 0.0, 39.7449, 0.0, 213.7212, 0.0, 25.3954, 36.9659, 130.4325, 39.249, 126.9918, 0.0, 0.0, 0.0, 0.0, 35.8153, 13.0536, 0.0, 63.882, 159.3971, 45.8561, 0.0, 74.358, 0.0, 199.7979], [106.5464, 94.0632, 216.649, 327.3696, 48.9888, 52.8099, 0.0, 330.7572, 157.8496, 610.8696, 0.0, 66.6504, 208.5237], [36.3251, 17.1885, 68.9194, 0.0, 102.9461, 111.078, 53.0868, 0.0, 59.1161, 27.8114, 48.6287, 44.7478, 0.0, 62.0928, 22.4289, 90.4995, 79.9495, 29.0304, 39.6299, 61.4304, 54.8856, 19.1763, 0.0, 65.5542, 34.3966, 132.9372, 0.0, 56.5188, 200.0245, 14.8176, 38.1647, 171.9128, 0.0, 0.0, 0.0, 42.8049, 34.4189, 70.4273, 0.0, 41.3377, 101.8181, 154.3214, 62.2861, 8.6034, 25.9135, 48.3842, 71.1686], [101.0444, 75.4992, 135.6346, 43.7773, 181.7204, 62.316, 74.0949, 21.1573, 97.2846, 71.1221, 112.9116, 56.3074, 87.2424, 51.6695, 132.3504, 215.5129, 62.985, 31.395, 61.7568, 74.0784, 74.1312, 55.9062, 37.5203, 0.0, 55.5964, 242.352, 1.373, 47.9102, 36.0111, 158.4545, 100.9449, 0.0, 195.9212, 35.926, 0.0, 0.0, 80.0258, 70.4228, 137.4979, 85.4712, 212.9236, 283.069, 23.4127, 0.0, 63.1994, 29.4017, 158.8619, 89.172], [44.3974, 141.6717, 189.4157, 259.1856, 144.7418, 265.6744, 182.358, 100.4441, 117.8131, 106.0065, 211.5227, 172.6639, 0.0, 198.4752, 12.0175, 458.9676, 359.1151, 118.9235, 50.0472, 200.457, 212.4792, 198.2988, 92.1406, 14.7308, 392.3298, 122.3462, 549.5688, 0.0, 205.6793, 391.8024], [83.8295, 227.1909, 219.8208, 215.1024, 185.7222, 340.2762, 180.414, 111.4499, 0.0, 93.1612, 156.1282, 162.5816, 223.2524, 79.7126, 208.4544, 71.7171, 514.9872, 324.9868, 49.0056, 182.0386, 108.6048, 200.907, 32.8357, 10.4812, 192.7521, 229.9631, 0.0, 20.1016, 119.9906, 51.5266, 352.0836, 178.164, 0.0, 196.9952, 40.3535, 0.0, 0.0, 148.4303, 97.973, 305.2678, 57.7325, 30.1801, 265.8965, 372.8702, 249.276, 30.1376, 171.3636, 53.724, 231.5327, 163.278], [87.6142, 109.6022, 136.2643, 203.9499, 107.244, 181.6604, 47.3804, 185.8374, 178.3511, 227.6282, 204.2399, 41.202, 223.9776, 80.7994, 431.8587, 294.2201, 67.745, 139.272, 193.3325, 121.8888, 177.6222, 3.7323, 8.736, 267.6915, 79.0099, 390.852, 95.8827, 129.6588, 42.8684, 449.6976, 123.6123, 346.5423, 24.1688, 182.4241, 129.2972, 439.2226, 135.6931, 262.9973, 489.7094, 194.5944, 60.6267, 498.9315, 214.848], [95.9566, 158.1888, 271.4266, 55.2883, 529.2626, 186.192, 56.1943, 0.0, 85.7745, 214.2833, 115.2719, 198.0342, 17.7206, 308.5992, 53.9124, 521.7849, 407.3479, 38.539, 49.56, 193.2515, 289.7208, 228.0852, 58.2153, 499.122, 304.2052, 508.1076, 17.7556, 190.6143, 298.6483, 114.0426, 51.5728, 230.2911, 33.6237, 40.2663, 48.3021, 121.5798, 122.9569, 213.271, 17.7811, 66.2134, 308.894, 357.643, 71.3719, 0.0, 107.4449, 42.1489, 536.2058], [196.5521, 147.095, 236.593, 38.8166, 440.6325, 59.022, 90.1181, 162.8833, 84.5476, 211.0368, 195.5398, 0.0, 202.0032, 76.8398, 659.9502, 300.4319, 0.0, 3.0685, 184.296, 195.397, 152.4096, 183.8592, 51.0682, 263.9232, 152.4857, 690.9408, 112.8251, 231.7369, 0.0, 512.8942, 161.8029, 35.1435, 346.4791, 30.2208, 0.0, 206.3919, 173.604, 382.4083, 23.7427, 170.9686, 450.8595, 608.0127, 142.3495, 48.5414, 114.4433, 44.9165, 562.4011], [84.6216, 245.447, 342.4, 392.065, 88.9382, 501.3499, 163.782, 157.0269, 0.0, 98.6076, 209.3279, 159.8048, 112.3106, 266.364, 69.8896, 520.065, 590.5595, 12.2741, 92.9376, 237.2938, 269.244, 335.664, 35.2295, 6.9809, 423.8271, 586.3592, 998.0388, 72.3419, 195.7132, 56.1379, 582.8229, 176.2677, 381.4808, 65.9821, 29.333, 158.148, 219.1939, 603.7601, 24.6758, 94.0157, 353.4149, 703.0848, 92.4188, 15.8667, 162.4601, 88.9865, 457.0565]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

