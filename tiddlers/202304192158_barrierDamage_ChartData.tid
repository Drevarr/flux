created: 20230419215809000
creator: Drevarr
modified: 20230705163525886
modifier: drevarr
tags: ChartData
title: 202304192158_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Sp\u00edcy Cheese", "Venomina The Siren", "Solus Sanctus", "Mike The Archmagus", "Eibh\u00ebar", "Bella Sassy", "Anita Strips", "Tribal S", "Abigail Ryn", "Tootsie Pop Rocks", "Ark Darkness", "Johosh The Great", "Fecund Algorithm", "Al Darasuun", "Skye Nightroad", "Grasszanine", "Drevarr Moonwillow", "Nazhul Naxxremis", "Newtype Khan", "Arcanophage Farra", "Rina Of Theros", "Panther B Me", "Elonith Requiem", "Smol Gluvs", "Be\u00eb", "My Birthday Girl"];
const professions = ["Berserker", "Tempest", "Firebrand", "Weaver", "Chronomancer", "Firebrand", "Chronomancer", "Druid", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Mechanist", "Scourge", "Scrapper", "Spellbreaker", "Scrapper", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 156, 4917, 1439, 0, 0, 0, 0, 0, 0, 6641, 0, 9735, 4783, 5679, 0, 6666, 3401, 3388, 0, 7516, 2734], [100, 6755, 5428, 6119, 2496, 0, 3713, 0, 0, 0, 2663, 8023, 1248, 13511, 7028, 0, 2493, 507, 2414, 261], [0, 0, 0, 1757, 0, 2769, 8758, 1242, 0, 0, 1730, 0, 6296, 9193, 3041, 12726, 1657, 10651, 0, 0, 3469, 5752], [0, 161, 6003, 1284, 6329, 269, 9523, 5548, 0, 538, 3773, 269, 1743, 9713, 8065, 1511, 2648, 6413, 2391, 41, 4033, 263], [0, 2729, 197, 6322, 7191, 6043, 3419, 0, 0, 2487, 1143, 8346, 10933, 0, 4817, 4400, 9107, 0, 0, 6020, 0], [0, 0, 8740, 322, 2314, 1960, 5857, 2465, 0, 546, 1249, 3422, 15540, 62, 7895, 3440, 4593, 6129, 0, 2420, 6773], [0, 0, 9540, 1183, 1969, 3464, 10003, 8256, 0, 0, 3434, 0, 1247, 11417, 5248, 7898, 1236, 2824, 5766, 0, 0, 414], [0, 4079, 0, 293, 4027, 13278, 1321, 0, 0, 0, 0, 4989, 13873, 7426, 9900, 9017, 5040, 1392, 0, 0, 0], [0, 0, 7505, 1622, 2504, 2091, 11671, 6512, 0, 3969, 3224, 0, 2111, 13893, 6715, 8682, 3738, 5045, 1726, 719, 590, 0], [0, 7098, 148, 10361, 3797, 10534, 4775, 0, 0, 7609, 0, 588, 88, 5231, 8198, 5212, 1608, 7152, 45, 4658, 8317], [352, 8894, 1053, 4738, 2329, 7606, 0, 0, 0, 3543, 0, 7346, 20877, 6688, 9670, 7413, 9047], [299, 0, 9344, 1243, 2229, 2384, 7650, 1404, 0, 6096, 0, 4534, 17038, 9014, 8238, 3285, 6685, 4759, 0, 2175, 3426], [36638, 20814, 22689, 5974, 669, 3760], [17783, 29717, 2732, 13854, 12520, 0, 13680, 3372], [0, 47004, 5595, 8608, 985, 6272, 305, 0, 164, 0, 5188, 9583, 1228, 10006, 447, 2510, 1251, 459, 1408, 4047], [961, 0, 11727, 965, 16, 6175, 14834, 6150, 0, 3452, 1248, 6946, 13167, 11152, 11423, 15355, 7398, 7353, 0, 4508, 1110], [0, 0, 13406, 2780, 2500, 3690, 20789, 7187, 0, 8, 4428, 1248, 15333, 21900, 2947, 7078, 7468, 1292, 3552, 16, 10820, 1368], [876, 4561, 13013, 21440, 21935, 0, 7734, 76, 20264, 24300, 0, 10430, 5941, 0, 0], [0, 11698, 2477, 9694, 4183, 20025, 10688, 0, 0, 3683, 3077, 9447, 14859, 5062, 12507, 12756, 6742, 2936, 0, 2367, 4560], [0, 18136, 0, 8004, 9197, 17455, 10980, 0, 0, 3415, 0, 11384, 15890, 7266, 9486, 6032, 7506, 835, 0, 5659, 5575], [0, 0, 17804, 3464, 6936, 8688, 19903, 4203, 0, 0, 6206, 0, 12748, 21142, 15462, 13465, 10678, 5339, 4589, 0, 2420, 7039], [0, 167, 19191, 304, 6082, 8505, 15072, 4415, 0, 0, 6388, 0, 12872, 31074, 11804, 4119, 14166, 8867, 5026, 0, 13421, 4050], [9776, 19989, 18415, 0, 269, 14718, 269, 2465, 26666, 19933, 23497, 7732, 18205, 10750, 263, 9292, 6229], [0, 0, 18258, 6335, 9721, 13512, 19115, 14339, 0, 0, 5679, 0, 12786, 35373, 15919, 22871, 9122, 11044, 7769, 0, 8382, 3882], [0, 22406, 2455, 5715, 7071, 26339, 15098, 0, 0, 6798, 1248, 14228, 40776, 9187, 29460, 14143, 15059, 10278, 0, 2447, 15444], [0, 0, 69308, 3689, 24701, 27761, 64069, 56201, 0, 912, 11908, 116, 11702, 95682, 16875, 38028, 34796, 43818, 26475, 17, 13822, 17313]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

