created: 20230222220539000
creator: Drevarr
modified: 20230705163519907
modifier: drevarr
tags: ChartData
title: 202302222205_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Dark Sidiuz", "Husky Guard", "Tribal S", "Smol Daddy Tika", "Ark Darkness", "Jeckyll Mbs", "Sassy Daddy Demon", "Arcanophage Farra", "Xanvias Tseli", "Mistwalker Caelon", "Xyntharos", "Ryvalia Fazebringer", "Kosair", "Blanco Padre Guard", "Zaylen Harker", "Sygaldry Verdandi", "Kiloak", "Ace Hammers", "Ravioli Fetabringer", "Bella Sassy", "Koralia Danai"];
const professions = ["Scourge", "Dragonhunter", "Druid", "Berserker", "Firebrand", "Berserker", "Vindicator", "Spellbreaker", "Berserker", "Vindicator", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.1536, 3.3755, 1.6646, 11.029, 0.8216], [1.1868, 1.2145, 1.2201, 1.344, 0.5376, 6.7511, 2.1542, 3.5165, 1.4269], [0.8488, 0.8732, 0.9425, 0.9494, 1.786, 1.6638, 0.9216, 0.576, 4.2638, 2.3501, 3.6763, 1.2107], [1.0475, 1.0656, 0.0, 0.0, 2.7147, 2.1629, 0.8832, 1.0752, 7.1064, 2.1542, 4.955, 0.5621], [0.2218, 0.0, 2.1432, 0.2218, 3.1104, 2.88, 8.7053, 3.9168, 2.2378, 6.4428], [0.9933, 0.9916, 1.978, 2.5718, 3.0503, 1.728, 1.9968, 7.1064, 2.9376, 5.5944, 1.7296], [0.0, 0.0, 0.0, 0.0, 0.0, 1.1647, 1.8816, 2.4576, 14.0351, 6.7565, 2.7173, 4.5402], [0.0, 0.0, 0.0, 1.8198, 0.0, 1.9411, 3.264, 3.1104, 11.1926, 5.0918, 5.9141, 1.5566], [0.9752, 0.9916, 0.9979, 1.4242, 3.0005, 4.3259, 0.9984, 1.7664, 8.5277, 3.9168, 8.7912, 1.9026], [1.1739, 3.7444, 2.3562, 0.0, 1.8574, 2.9948, 0.4992, 1.3056, 12.7915, 5.2877, 10.2298, 4.324], [0.0, 0.1776, 0.0, 0.5934, 4.0721, 4.3259, 5.3376, 2.8416, 14.3905, 7.7357, 23.1768, 4.0646], [1.8421, 0.0, 0.0, 0.0, 1.8574, 0.0, 4.2624, 8.2176, 22.9181, 10.0858, 13.1069, 6.6157], [2.3659, 1.8944, 2.5225, 2.2945, 4.8579, 9.65, 4.4928, 5.184, 22.2075, 10.7712, 16.1438, 5.6644], [2.2936, 3.4336, 2.4116, 2.611, 10.4302, 8.7627, 2.7648, 0.0, 20.0756, 5.9731, 22.6973, 8.0426], [3.1605, 2.4272, 5.7758, 6.5725, 8.0417, 5.4528, 1.2672, 26.4713, 8.1274, 20.939, 9.6425], [2.8174, 3.7444, 1.2474, 1.1472, 2.7147, 7.9308, 8.5248, 5.2992, 26.8267, 11.4566, 21.8981, 6.659], [3.5482, 2.5318, 8.7871, 10.6483, 10.3296, 5.0304, 20.7862, 10.3795, 18.8611, 10.4208], [4.4969, 1.7908, 3.7976, 1.6615, 13.5736, 8.0972, 1.9584, 2.3424, 17.766, 12.8275, 29.2507, 4.0213], [3.9371, 4.7212, 5.738, 5.0241, 9.2158, 7.9862, 9.6, 8.1024, 26.649, 15.0797, 16.3037, 10.0317], [4.7317, 3.848, 7.5398, 7.7142, 12.6449, 10.6483, 8.5248, 9.5232, 33.5777, 11.4566, 28.6114, 11.718], [5.3277, 5.0024, 6.0984, 6.4087, 15.3596, 9.04, 9.408, 10.0992, 36.7756, 13.7088, 31.8082, 12.6693]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

