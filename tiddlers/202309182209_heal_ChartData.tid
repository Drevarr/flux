created: 20230918220934000
creator: Drevarr
tags: ChartData
title: 202309182209_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Luxes", "Darks Na", "Tootsie Pop Rocks", "Tegan Parker", "Mike The Archmagus", "Tribal S", "Drevarr Moonwillow", "Zaedy Zae"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 147.9681, 556.4468, 0.0, 32.1603, 374.1707, 381.0, 159.6818, 0.0, 297.4634, 239.803, 10.0238, 192.2407, 157.9146, 502.8367, 511.3158, 259.5532, 92.878, 499.5692, 434.5, 625.6667, 47.6421, 270.3846, 292.9367, 304.2432, 497.878, 150.4286], [58.1362, 19.2727, 106.0153, 587.6341, 620.7321, 1513.9773, 73.4737, 464.6585, 51.697, 97.5714, 285.8426, 445.9268, 368.2449, 1002.7719, 1676.8723, 1025.0244, 176.3846, 1515.2143, 719.5333], [99.8902, 532.0435, 321.634, 7.9545, 9.3893, 2209.622, 1937.0, 1803.1364, 218.3158, 812.1341, 1219.4697, 0.0, 2464.537, 1646.4512, 1217.7347, 2067.8772, 1567.766, 2313.5122, 1703.2615, 210.25, 128.5667, 71.6154, 183.9873, 303.9324, 1462.1951, 863.5429], [521.2, 564.2511, 41.0, 99.3588, 57.1098, 3634.9286, 728.0, 127.3684, 1086.5244, 1716.8485, 179.8333, 2015.0648, 1623.6159, 247.6735, 2149.5439, 2047.5957, 2468.9512, 2080.4615, 1318.0179, 700.2, 319.2526, 1762.641, 526.7595, 965.9189, 1422.0, 374.7429], [712.629, 1708.0766, 103.3864, 138.9618, 2019.4146, 2082.0357, 3245.5227, 176.7105, 715.4756, 2002.7273, 132.1667, 1433.9167, 1474.0732, 1308.7959, 3075.4035, 1812.2979, 2595.0, 591.1846, 990.9333, 900.0316, 2236.8205, 423.8608, 1374.5676, 1600.0244, 3064.3143], [187.7317, 1096.1942, 1657.5021, 304.8864, 262.6641, 2232.622, 3221.4464, 5711.8409, 419.1053, 1523.2073, 2946.5303, 2238.5185, 2702.3963, 2527.3061, 2356.386, 3607.8511, 2400.6098, 1721.1846, 3063.5, 2155.5333, 438.3158, 1979.2051, 892.962, 1177.8514, 2993.878, 897.4857], [472.0366, 853.6203, 1630.617, 56.1136, 71.0992, 2725.378, 3427.6429, 4717.4091, 177.6842, 1452.7439, 2991.6667, 209.0714, 2545.4444, 2793.7561, 1916.7347, 5388.9474, 3079.8511, 2793.8049, 1997.5385, 2881.6786, 2360.5667, 584.5684, 3208.1795, 261.3671, 1774.9324, 3972.122, 2534.2571], [0.0, 1217.0145, 2676.966, 218.6818, 98.8244, 3083.122, 1203.1429, 5935.5455, 306.8421, 2070.0488, 3979.8788, 93.0714, 2598.8611, 3304.2561, 3098.4082, 3331.9474, 5654.766, 4446.3659, 794.3692, 3707.9286, 2769.2, 683.3684, 3072.1026, 84.2025, 1124.4189, 2323.1707, 6.5143]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

