created: 20230403221011000
creator: Drevarr
modified: 20230705163524404
modifier: drevarr
tags: ChartData
title: 202304032210_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Sister Elon\u00edth", "Cat Wigglebooty", "Mistwalker Caelon", "Ak\u00e1nt\u00f3r", "Tegan Parker", "Zeharah", "Lagertha Scorned", "Xyntharos", "Tika Sumiko", "Mac Chiato", "Il Dim Snail Il", "Newtype Khan", "Zenek Tryst", "Drevarr Moonwillow"];
const professions = ["Dragonhunter", "Scrapper", "Vindicator", "Druid", "Tempest", "Dragonhunter", "Scrapper", "Vindicator", "Tempest", "Tempest", "Dragonhunter", "Spellbreaker", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 52.8597, 132.9686, 5.9831, 83.1027, 5.9736, 27.2513, 0.0, 263.6324, 24.0944, 0.4489, 82.8405, 0.0, 0.0], [76.798, 131.841, 5.045, 30.0555, 56.6779, 0.0, 147.0235, 176.9738, 14.4656, 10.0087, 0.0, 25.0416, 0.0, 0.0, 0.0, 20.2118], [70.6908, 152.874, 24.5045, 56.8082, 69.8318, 39.0505, 114.8078, 91.321, 16.7454, 17.5646, 0.0, 0.0, 87.6456, 4.0019, 17.2585, 11.8449, 2.9681, 19.1083], [125.1976, 192.1185, 44.2842, 84.7168, 0.0, 0.0, 61.4309, 113.8363, 0.0, 0.0, 0.0, 0.0, 116.3391, 0.0, 65.3927, 0.0, 0.0, 0.0], [41.2236, 175.959, 31.8718, 112.6255, 0.0, 0.0, 223.141, 101.0829, 23.9918, 31.6084, 72.5163, 31.3745, 0.0, 7.397, 0.0], [257.1159, 39.4073, 0.0, 0.0, 0.0, 337.1921, 0.0, 62.4747, 0.0, 0.0, 260.3436], [298.566, 39.4794, 69.3588, 28.8226, 0.0, 246.5131, 129.8963, 51.6474, 14.9141, 0.0, 0.0, 122.7734, 0.0, 69.1337], [121.2279, 254.448, 30.1101, 69.3588, 93.4315, 67.914, 123.6514, 116.0406, 30.8039, 35.8809, 9.142, 8.444, 167.6396, 8.5603, 30.9505, 20.0551, 4.2424, 16.0301], [65.347, 267.273, 32.8328, 163.3235, 97.6872, 33.6174, 190.9253, 171.6205, 32.948, 24.4876, 0.0, 0.0, 144.1631, 0.0, 0.0, 14.4648, 0.0, 0.0], [254.2122, 211.869, 60.7407, 155.5619, 31.1438, 62.0281, 146.2339, 148.4753, 28.8498, 0.0, 0.0, 0.0, 110.9482, 0.0, 24.9899, 7.6937, 0.0, 46.0574], [80.9204, 200.8395, 3.043, 76.2947, 197.6957, 266.5625, 234.1954, 104.3893, 73.5223, 47.0764, 68.609, 11.8811, 185.7252, 75.2432, 80.0325, 0.0, 0.0, 47.0448], [260.7774, 587.385, 52.6926, 417.6391, 246.636, 144.5436, 520.0306, 175.8716, 25.973, 17.0504, 0.0, 0.0, 285.0221, 0.0, 55.7409, 110.4048, 0.0, 0.0], [342.5822, 333.4577, 1151.7106, 671.8392, 74.2822, 116.5042, 71.1941, 947.9289, 0.0, 162.0102, 111.2351, 57.871, 36.997], [512.3941, 1168.8705, 148.9888, 589.7149, 760.993, 427.0659, 862.2432, 784.5734, 24.4531, 146.8863, 0.0, 656.1247, 18.5414, 94.6473, 63.7816, 68.0807, 101.4658]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

