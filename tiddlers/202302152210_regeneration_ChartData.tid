created: 20230215221053000
creator: Drevarr
modified: 20230705163519376
modifier: drevarr
tags: ChartData
title: 202302152210_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Cat Wigglebooty", "Bella Sassy", "Tegan Parker", "Etchery Howls", "Fribble Bibble", "Zadie Miststep", "Mac Chiato", "Tribal S", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Scrapper", "Firebrand", "Tempest", "Druid", "Scrapper", "Tempest", "Tempest", "Druid", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[651.3254, 867.18, 45.7114, 299.2147, 155.8788, 97.4463, 72.3725, 96.2786, 22.7304, 9.7474, 35.5752, 0.0, 23.856, 104.5886, 4.7345, 40.9075, 17.1225, 22.8258, 17.6368, 14.861, 65.2964, 15.7131, 44.3956, 13.7592], [870.1418, 1850.58, 0.0, 154.4486, 392.4998, 63.6951], [504.5436, 1041.212, 160.704, 299.9232, 325.4482, 77.2779, 11.7538, 126.5043, 72.6376, 39.6474, 9.6331, 112.055, 163.8773, 51.9062, 8.2575, 34.8624, 21.9334, 4.884, 91.9895, 43.3699, 106.7873, 22.9975], [940.9708, 1618.14, 30.3998, 139.8067, 132.9174, 158.466, 38.3971, 230.9354, 72.059, 50.0688, 28.1492, 162.0163, 177.9384, 0.0, 231.8093, 21.9825, 32.1894, 89.7782, 28.446, 158.4229, 18.7762, 78.9254, 36.9697], [2099.8538, 1876.208, 51.1574, 381.1622, 185.5238, 132.4323, 9.949, 74.6492, 0.0, 34.5046, 48.0192, 69.2084, 148.9978, 323.8406, 0.0085, 141.6326, 266.355, 377.6058, 180.6651, 5.808, 26.8727, 163.8094, 0.0, 0.0], [957.772, 65.0405, 520.1424, 383.1212, 326.3988, 184.9018, 471.41, 15.4611, 543.2232, 332.5037, 136.3837, 485.0947, 740.1658, 639.791, 196.695, 159.894, 329.4176, 75.625, 633.5721, 122.4959, 336.5564], [1582.0486, 3295.284, 224.316, 692.303, 574.2506, 611.9463, 112.1006, 295.4909, 67.4532, 206.1904, 183.9662, 190.0567, 204.6163, 323.6957, 0.0, 218.5594, 94.41, 29.6298, 139.0158, 10.824, 188.7071, 24.4382, 121.807, 24.0887, 59.6887], [1463.297, 4533.772, 351.54, 897.2899, 204.3888, 657.6339, 146.3467, 201.5971, 84.7964, 48.8976, 66.6422, 73.8854, 314.7082, 139.1885, 204.9525, 112.9788, 79.9722, 14.399, 145.1362], [1953.3734, 3828.704, 415.6877, 715.6829, 180.9962, 469.7385, 92.7667, 212.4118, 91.8072, 186.1574, 229.1453, 15.1998, 360.3619, 612.7459, 1.4705, 117.0624, 9.2925, 45.2628, 115.4538, 5.83, 43.2117, 66.7111, 200.4882, 19.9614, 37.7395], [4253.3568, 6878.436, 50.1754, 784.7597, 578.7782, 861.273, 361.5917, 517.9409, 0.0, 647.7536, 468.9192, 29.7877, 649.9056, 793.5835, 877.968, 71.91, 147.0312, 590.7478, 208.582, 647.8164, 15.3153, 544.3706, 0.0, 233.9064], [4602.0766, 7975.076, 306.8554, 1500.7968, 1265.1408, 1576.2222, 236.6318, 610.7255, 159.1497, 666.77, 519.8664, 295.8829, 764.8915, 794.9606, 58.854, 883.4352, 304.65, 67.1328, 479.2788, 119.559, 786.6086, 104.1838, 533.3816, 193.628]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

