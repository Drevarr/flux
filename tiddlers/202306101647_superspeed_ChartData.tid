created: 20230610164704000
creator: Drevarr
modified: 20230705163535030
modifier: drevarr
tags: ChartData
title: 202306101647_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "High Sorcer Baradun", "Lucky Leipreach\u00e1n", "Zayde Sunsabre", "Newtype Khan", "Venomina The Siren", "Tegan Parker", "Trolit\u00e1", "Arcanophage Farra", "Tomitigas", "Xanvias Einzbern", "Melli Dragonswrath", "Cat Wigglebooty", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Tempest", "Scrapper", "Spellbreaker", "Spellbreaker", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Berserker", "Berserker", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.31, 0, 0.286, 0.836, 0.569, 0, 0, 0, 0.16, 0, 0, 0.234, 0, 0, 0.241, 0.289, 0, 0, 0.324, 0.144, 0, 0.103, 0.243], [0.635, 0.308, 0.631, 0.361, 0.379, 0.615, 0.364], [0.12, 0, 0, 0.066, 0.794, 0.241, 0.132, 0.316, 0, 0.571, 0, 0, 0.617, 0.464], [0, 0.858, 0.686, 0, 0.24, 0, 0, 1.945, 0, 0, 0, 0, 0.222, 1.052, 0, 0.405, 0, 0, 0.686, 0.506], [0, 0, 0, 0, 0.752, 0, 0.276, 0, 0, 0, 0.028, 0, 0, 0, 0.402, 0.907, 0, 0, 0.673, 0, 0.375, 0.171, 0.709], [0, 0, 0.921, 0.826, 0.3, 0.072, 0, 0, 0.374, 0.494, 0.529, 0.664, 1.19, 0, 0.408, 0.29, 0.384, 0.41, 0.487], [0, 0.643, 0.251, 0.518, 0.413, 0, 0.236, 0, 0.319, 0, 0.748, 0.645, 1.059, 0, 0.039, 0.529, 0.259, 0, 0.484, 0.289, 0.537, 0.617, 0.791], [0.765, 1.262, 1.159, 0.688, 0.867, 1.078, 0.822, 0.971], [0, 1.1, 0, 0.858, 0.684, 0, 0, 1.413, 0, 1.247, 0.726, 0.88, 0.661, 0.222, 1.427, 1.937, 0.714, 0.291, 0.57, 0.342, 0.381], [0.479, 0.647, 0.251, 0.518, 0.842, 0, 0.216, 0.16, 0.637, 1.519, 0.998, 0.374, 0.529, 0, 0, 0.621, 0.633, 1.16, 0.489, 0.289, 0.386, 0.615, 0.769], [0, 1.143, 0.415, 0.863, 0.688, 0, 0.48, 0, 0, 0, 0.624, 0.91, 0, 0, 1.04, 1.055, 0, 0.816, 0, 0.642, 0.342, 0.405], [0, 0.536, 0.023, 0.861, 0, 0, 0.254, 1.337, 0.531, 0, 1.699, 0.028, 1.1, 1.102, 0, 1.111, 1.147, 0, 0.819, 0.657, 1.152, 0.792, 0.968], [0.31, 0.979, 0.301, 0.581, 0.378, 0.479, 0.798, 0, 0.604, 0, 1.18, 1.262, 2.461, 1.392, 1.328, 1.154, 1.129, 0.637], [0.852, 1.857, 1.255, 1.787, 2.082, 0.565, 0.719, 1.997, 1.116, 0.569, 0.795, 1.852, 1.851, 0.901, 1.631, 1.656, 0, 1.58, 0.577, 1.203, 1.642, 1.609]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

