created: 20230301221309000
creator: Drevarr
modified: 20230705163520970
modifier: drevarr
tags: ChartData
title: 202303012213_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["B\u00efnkx", "Oo Dads Mad", "Jeckyll Mbs", "Grasszanine", "Nazhul Naxxremis", "Demon Sekhmet", "Newtype Khan", "Black Raspberry Pie", "Smol Gluvs", "Panther B Me", "Arcanophage Farra", "Raziel Umbra", "Be\u00eb", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Chronomancer", "Scourge", "Scourge", "Spellbreaker", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.4795, 0.5455, 1.3889, 0.4912, 0.8276, 0.271, 1.25], [0.5833, 0.5255, 0.4, 0.3409, 0.0638, 0.2157, 0.2239, 0.3077, 0.0, 0.3537, 0.3193, 0.2857, 0.0, 0.6389, 0.0, 0.0, 0.8039], [0.2363, 0.0, 0.4756, 0.1261, 0.013, 0.0, 0.0, 0.5051, 0.0, 0.2949, 0.0, 0.1739, 0.0, 0.5763, 0.3151, 0.5455, 1.0556, 0.0, 0.4206, 1.875, 0.0588, 0.2424, 0.8953, 0.2784], [0.0714, 0.0, 0.7188, 0.1356, 0.411, 0.0545, 0.75, 1.0526, 0.3448, 0.2243, 1.3125, 0.0471, 0.6061, 0.686, 0.4536, 0.9444, 1.3409, 0.6866, 0.2105], [0.75, 0.7153, 0.8154, 0.6136, 0.3617, 0.7647, 0.0149, 0.467, 0.0395, 0.7439, 0.1933, 0.2987, 0.0789, 0.0417, 0.0, 0.7778, 0.0, 0.0, 0.087, 0.0, 0.0, 0.0, 0.3478, 0.0, 0.25, 0.0], [0.2692, 0.0, 0.6707, 0.0252, 0.1623, 0.0263, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2549, 0.0, 0.2929, 0.0, 0.4231, 0.0, 0.146, 0.2812, 0.5932, 0.9452, 0.0, 0.9167, 0.0, 0.4486, 0.2083, 0.0588, 0.303, 1.0465, 0.6495, 0.3056, 0.0, 0.5224, 0.6667], [0.65, 0.6496, 0.0308, 0.4545, 0.1915, 0.4706, 0.2239, 0.4396, 0.0, 0.8293, 0.3277, 0.3312, 0.2895, 0.0, 0.0, 1.125, 0.1538, 0.0, 0.1176, 0.0, 0.0707, 0.0, 0.4359, 0.0455, 0.0909, 0.1522, 0.0, 0.8594, 0.7966, 0.0548, 0.2364, 1.3889, 0.5965, 0.4569, 0.0841, 0.7292, 0.0471, 0.6566, 0.314, 0.0928, 0.1111, 0.0, 0.1791, 0.3158], [0.75, 0.4672, 0.0462, 0.4091, 0.7234, 0.0196, 0.5522, 0.3571, 0.1316, 0.5488, 0.3445, 0.3117, 0.0526, 0.2083, 0.0588, 0.9444, 0.3077, 0.0, 0.2157, 0.0455, 0.2828, 0.6087, 0.859, 0.0909, 0.0909, 0.2112, 0.0488, 0.0, 0.2203, 0.6986, 0.0545, 0.0833, 0.0877, 0.2845, 0.4299, 1.2292, 0.0941, 0.7273, 0.0465, 0.0, 0.0, 0.1136, 0.0, 0.8684], [0.1167, 0.5328, 0.9692, 0.25, 0.3191, 0.4314, 0.7463, 0.0769, 0.0789, 0.0976, 0.3445, 0.3052, 0.0, 0.0, 0.0294, 0.2083, 0.0, 0.2353, 0.0, 0.1818, 0.0, 0.141, 0.0455, 0.1364, 0.2702, 0.0, 0.0, 0.661, 0.4521, 1.1091, 0.1111, 0.807, 1.0172, 0.3645, 0.8958, 0.0353, 0.5556, 0.7209, 0.3918, 0.5, 0.0227, 0.7761, 0.4123], [0.6167, 0.4745, 0.7846, 0.2727, 0.8936, 0.0392, 0.5224, 0.2802, 0.0132, 0.4512, 0.042, 0.2208, 0.0526, 0.0, 0.0, 0.0833, 0.0769, 0.0, 0.4118, 0.0, 0.3131, 0.0, 0.5128, 0.0, 0.0, 0.2516, 0.0, 0.2812, 0.6271, 0.411, 0.8364, 0.8889, 0.5789, 0.7845, 0.243, 0.6042, 0.0, 0.2626, 0.5814, 0.1031, 0.7639, 1.0455, 0.6567, 0.5175], [0.55, 0.5255, 0.5538, 0.5227, 0.0851, 1.2549, 0.4627, 0.3516, 0.0658, 0.8902, 0.3193, 0.0779, 0.2368, 0.0833, 0.0, 0.9444, 0.0769, 0.0, 1.2157, 0.0455, 0.4141, 0.0435, 0.0897, 0.0, 0.0, 0.1304, 0.0, 0.3594, 0.6949, 0.6, 0.0, 0.0526, 0.7586, 0.3271, 1.1875, 0.0, 0.7273, 0.6512, 0.2784, 0.3611, 0.0, 0.2687, 0.1491], [1.3582, 0.6154, 0.5921, 0.5854, 0.521, 0.5065, 0.0789, 0.875, 0.7941, 1.2639, 0.2308, 0.0, 0.5882, 0.1818, 0.3434, 0.2826, 1.0128, 0.2273, 0.5155, 0.3125, 0.3729, 0.6712, 0.6909, 1.0556, 1.0702, 0.6207, 0.3364, 1.5417, 0.0706, 0.5455, 0.6279, 0.6598, 0.6111, 0.2955, 0.4925, 0.8246], [1.3667, 0.8978, 1.3846, 0.3864, 1.0638, 0.6863, 0.7463, 0.5824, 0.0658, 1.0976, 0.7479, 0.1948, 0.2632, 0.125, 0.0588, 0.875, 0.0769, 0.0, 0.4118, 0.0455, 0.4949, 0.2826, 0.859, 0.0, 0.0, 0.5, 0.0488, 1.8906, 1.0339, 0.8356, 1.2, 1.2778, 1.193, 1.0431, 0.6449, 1.8333, 0.0471, 0.3838, 1.5233, 0.4948, 1.1944, 0.2045, 0.6716, 0.9649], [0.5167, 1.0292, 1.4, 0.9545, 1.1702, 1.2157, 0.7761, 0.6429, 0.3158, 0.8537, 0.6975, 0.3896, 0.1842, 0.1667, 0.0588, 0.75, 0.5897, 0.0, 0.549, 0.0227, 0.2626, 0.4565, 1.1026, 0.2273, 0.4379, 0.0, 1.2656, 1.4237, 1.3151, 1.0727, 1.1944, 1.0, 0.8103, 0.3084, 2.2708, 0.0824, 0.7172, 0.9767, 0.9485, 1.7361, 0.8636, 0.8358, 0.8421]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

