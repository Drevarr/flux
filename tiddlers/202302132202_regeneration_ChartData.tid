created: 20230213220222000
creator: Drevarr
modified: 20230705163519253
modifier: drevarr
tags: ChartData
title: 202302132202_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Abigail Ryn", "Etchery Howls", "Tootsie Pop Bringer", "Tegan Parker", "Tribal S", "Mike The Archmagus", "Uneeta Healah", "Mac Chiato", "Joh Oshi", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Druid", "Scrapper", "Tempest", "Druid", "Tempest", "Scrapper", "Tempest", "Druid", "Scrapper", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[529.344, 582.6494, 102.3786, 17.3685, 30.7878, 318.9532, 19.5608, 122.078], [446.112, 673.895, 292.43, 47.13, 65.0686, 29.4124, 328.6553], [145.872, 564.9293, 97.4767, 0.0, 75.729, 275.7148, 216.678, 17.1756, 55.3504, 446.068, 0.0, 109.1352], [265.68, 735.5189, 75.0964, 42.6599, 36.9771, 159.1398, 0.0, 160.4848, 472.202, 26.649, 40.1376], [439.824, 0.0, 278.4768, 1590.952, 95.5698, 327.9384], [815.904, 920.1259, 202.467, 35.7342, 56.8146, 294.1592, 109.8552, 60.2896, 707.408, 65.6496, 186.1248], [28.0349, 218.3783, 174.3381, 177.744, 799.337, 0.0, 198.2736, 2592.278, 103.7196, 361.86], [928.224, 1068.4992, 200.9804, 0.0, 75.0401, 94.1091, 783.4365, 178.2816, 1892.388, 142.0998, 313.1088], [784.656, 2248.3445, 112.7853, 0.0, 169.8418, 699.4438, 720.2387, 268.6768, 2674.976, 116.0148, 447.996], [811.872, 2564.1336, 269.4471, 279.4014, 855.9749, 737.7562, 71.6976, 364.9912, 3712.102, 200.5302, 535.5528], [1416.816, 3372.9134, 367.6068, 13.566, 254.1645, 615.5973, 1421.4778, 510.6976, 4479.654, 409.7742, 795.204], [2638.656, 3804.5448, 482.0796, 0.0, 191.0539, 275.4503, 2023.0017, 675.3768, 5329.904, 229.689, 723.6312]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

