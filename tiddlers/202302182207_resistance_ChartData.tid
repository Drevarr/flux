created: 20230218220736000
creator: Drevarr
modified: 20230705163519631
modifier: drevarr
tags: ChartData
title: 202302182207_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Leilani Ellesmera", "Koralia Danai", "Sygaldry Verdandi", "Kahless The Drunk", "Xanvias Tseli", "Anita Strips", "Primal Clone", "Hyde En Sikh", "Aronorf Xideliesi", "Newtype Khan", "Blanco Padre Guard", "Johosh The Great", "Venomina The Fierce"];
const professions = ["Soulbeast", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[23.3906, 0.0, 25.3748, 27.3341, 2.4772, 4.5421, 0.0, 41.0852], [22.1785, 15.6177, 5.8212, 37.1137, 0.0, 23.5118, 7.773, 7.6498, 0.0, 0.0, 9.8129], [6.5268, 13.1594, 37.9348, 0.0, 17.3448, 38.3192, 7.3748, 12.7369], [19.7215, 20.5461, 13.4417, 14.7251, 0.0, 33.5333, 6.5204, 12.8535, 0.0, 4.9817, 15.4627], [21.6544, 31.9014, 49.2156, 39.1391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [20.0164, 13.3533, 19.7215, 18.7758, 0.0, 26.7238, 13.3298, 1.6359, 0.0, 12.9574, 26.1677], [26.1097, 18.8145, 12.983, 18.8853, 0.0, 32.6339, 11.3384, 12.168, 4.881, 19.5762], [28.534, 14.2524, 26.5658, 28.4648, 0.0, 28.5226, 14.1328, 6.9643, 0.0, 9.1582, 27.3076], [27.0598, 40.293, 40.1839, 11.8238, 34.5611, 13.7152, 0.0, 0.0, 35.0389], [38.0671, 11.7882, 34.4686, 37.7706, 0.0, 38.0301, 18.8866, 18.5869, 18.8522, 0.0, 31.8671], [53.235, 14.985, 67.8082, 13.7945, 0.0, 26.8523, 15.1928, 0.0, 3.4972, 66.1626], [77.0515, 35.1648, 54.7546, 47.2406, 0.0, 73.4263, 55.8888, 0.0, 0.0, 4.9817, 69.6318], [178.0145, 96.8256, 236.4032, 43.2014, 73.9894, 48.8888, 43.4513, 226.7866]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

