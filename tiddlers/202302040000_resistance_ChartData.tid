created: 20230204000024000
creator: Drevarr
modified: 20230705163518625
modifier: drevarr
tags: ChartData
title: 202302040000_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Raven The Guard", "Black Raspberry Pie", "Primal Clone", "Sp\u00edcy Cheese", "Palatine Of Ruin", "Seren\u00e1 Joy", "Bambiae", "Ryvalia Fazebringer", "Air One Com", "Ravioli Fetabringer", "Koralia Danai", "Zady Stardust", "\u00c2 R K", "Demon Sekhmet", "Newtype Khan", "Johosh The Great", "Grasszanine", "Arcanophage Farra"];
const professions = ["Firebrand", "Chronomancer", "Chronomancer", "Berserker", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Spellbreaker", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.9928, 0.0, 40.2336, 37.7316, 20.2703, 41.4586, 20.3918, 19.1591, 31.0021, 35.4697, 12.6919, 16.0222, 71.9386], [10.2787, 12.6059, 5.3088, 0.0, 6.9522, 10.6016, 12.1136, 14.359, 10.351, 13.9599, 13.5771, 9.702, 6.6956, 5.1876, 19.1196, 33.9124, 27.6848, 28.1666, 17.2907, 19.0782, 15.0322, 12.126, 12.0278, 38.6458, 13.4937, 6.7845, 16.0909, 6.8301, 20.196], [6.4501, 6.4474, 7.6944, 6.4858, 8.4074, 12.4891, 6.4915, 14.747, 15.0001, 19.7387, 16.874, 18.4338, 0.0, 19.5624, 12.7746, 38.803, 22.0563, 19.6416, 18.3098, 16.9218, 18.121, 11.4793, 11.1976, 43.7376, 12.376, 13.0732, 12.0555, 6.4612, 13.1274], [0.0, 0.0, 9.1224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 21.9362, 27.8712, 77.418, 53.1288, 0.0, 45.1194, 25.3704, 20.9255, 29.3024, 70.5276, 0.0, 0.0, 41.9098, 9.8409, 5.4547, 0.0, 0.0, 0.0], [6.5495, 38.9138, 0.0, 0.0, 20.742, 17.8605, 0.0, 47.52, 23.8995, 43.9511, 21.919, 21.6876, 16.4415, 0.0, 15.4955, 23.9489, 19.276, 20.3674, 21.7807, 19.4069, 8.6546, 22.2026, 42.7788], [10.8445, 4.9484, 4.7376, 0.0, 13.1163, 13.1947, 13.2149, 15.6643, 11.8422, 26.5564, 8.8004, 14.3325, 6.384, 24.9876, 13.0284, 29.6654, 26.3578, 16.2316, 19.3629, 18.2157, 27.5933, 11.6005, 12.7235, 48.3072, 13.6845, 12.7126, 19.1111, 6.2814, 11.1537], [13.1454, 12.9671, 6.7368, 6.6021, 9.8423, 12.9478, 6.6074, 17.7811, 13.158, 13.3106, 6.5679, 18.8748, 4.4156, 17.2656, 20.2617, 25.2252, 26.7696, 33.1452, 18.5816, 17.4799, 26.3063, 11.4389, 12.7459, 53.1379, 16.356, 13.8621, 13.5783, 6.6315, 19.6911], [12.8814, 12.6962, 10.6512, 7.4032, 10.3475, 7.4441, 4.6078, 19.8979, 19.0937, 29.9327, 12.2791, 23.3289, 4.4156, 22.2156, 19.9233, 33.9768, 29.744, 23.4608, 18.9213, 20.4229, 28.5199, 14.9554, 18.8047, 46.6099, 22.1351, 14.1777, 12.4108, 3.6799, 22.3533], [20.2934, 22.7737, 16.2456, 0.0, 14.6927, 19.6157, 17.417, 22.0147, 9.2106, 30.9716, 18.2499, 24.7842, 0.0, 34.4916, 27.1989, 43.3076, 46.8582, 29.9398, 26.8363, 26.0296, 12.87, 22.5948, 23.8986, 51.1795, 23.9615, 16.7472, 12.7915, 13.6782], [22.7669, 35.3241, 0.0, 13.9392, 63.5346, 81.0166, 42.2365, 53.6734, 60.9082, 57.1332, 42.8314, 43.2494, 36.5323, 42.8237, 45.7423, 30.6093, 33.9331, 7.0099, 61.506], [29.0444, 11.3778, 9.9792, 10.2869, 24.6431, 13.9394, 12.101, 25.6142, 14.5443, 5.4776, 37.5291, 4.7956, 44.7084, 65.7342, 67.1171, 70.928, 40.92, 34.0379, 38.7654, 55.4954, 27.2835, 13.1274, 56.9242, 7.1421, 25.1546, 31.0905, 0.0, 49.8474], [12.8814, 34.4946, 5.0568, 12.4696, 36.1973, 10.2299, 54.1901, 22.8949, 14.7391, 14.6414, 14.7294, 7.068, 14.6124, 20.9808, 51.1583, 88.1338, 48.6948, 46.6068, 38.2326, 49.1119, 13.6418, 27.1075, 40.6042, 34.7838, 7.3255, 40.9379, 7.2558, 61.6437], [32.2129, 34.7836, 26.2416, 7.2223, 24.9594, 34.6626, 20.1121, 33.509, 23.0501, 17.5749, 53.1846, 31.3236, 54.7785, 63.5135, 45.8973, 54.2872, 29.9276, 57.915, 34.8218, 30.5184, 72.1997, 48.0594], [8.3738, 41.1226, 2.9568, 0.0, 40.9455, 27.536, 19.0399, 12.6302, 63.2461, 80.9028, 4.1796, 47.9367, 0.0, 74.25, 88.4916, 91.2483, 90.7421, 58.8566, 17.3926, 16.2875, 23.269, 36.6205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [82.5879, 24.977, 0.0, 17.7646, 14.6941, 18.1125, 29.8116, 33.2459, 20.388, 20.1709, 38.4552, 0.0, 57.8556, 35.2782, 21.1068, 63.6522, 93.0248, 19.227, 19.2812, 35.933, 16.3701, 37.228, 93.2198, 45.5242, 33.1789, 33.6539, 18.9862, 38.9232], [34.3818, 30.5936, 27.5184, 5.4393, 24.7977, 34.7332, 28.6902, 44.7703, 44.6787, 22.271, 31.1001, 35.6328, 7.068, 69.9732, 58.9239, 83.1402, 88.1338, 47.74, 57.715, 34.3002, 78.9703, 52.1822, 14.6084, 53.6602, 53.4569, 35.9738, 61.8257, 0.0, 58.8438], [24.518, 9.1745, 13.8432, 0.0, 0.0, 18.6631, 49.1501, 107.0042, 146.3462, 67.3324, 41.3024, 37.7496, 0.0, 137.5308, 68.8644, 78.314, 42.0992, 73.1786, 38.9636, 46.9345, 124.839, 14.9554, 35.3654, 0.0, 44.9245, 6.5591, 21.2938, 0.0, 84.9609], [42.2653, 56.2208, 0.0, 0.0, 26.374, 20.6388, 68.2189, 20.5682, 25.0294, 107.1994, 36.37, 101.2977, 0.0, 236.2932, 112.3488, 305.5981, 155.401, 89.1374, 32.1696, 0.0, 163.2946, 59.3163, 20.4204, 158.3693, 127.3587, 53.0817, 74.2111, 0.0, 87.3018]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

