created: 20230610164704000
creator: Drevarr
modified: 20230705163534833
modifier: drevarr
tags: ChartData
title: 202306101647_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Yngvar The Burdened", "Zhavashian", "Kary\u00edna", "Mistwalker Cael", "Tika Fiery", "Zayde Sunsabre", "Solus Sanctus", "Koralia Danai", "Johosh The Mighty", "Sakis Ranger", "Eibh\u00ebar", "Arcanophage Farra", "Newtype Khan", "Xanvias Einzbern", "Scintilla The Storm", "Gestern Yesteryear", "Drevarr Moonwillow", "Bella Sassy"];
const professions = ["Scourge", "Tempest", "Vindicator", "Vindicator", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Berserker", "Druid", "Chronomancer", "Spellbreaker", "Spellbreaker", "Berserker", "Tempest", "Firebrand", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[702, 515, 313, 1082, 349, 211, 492, 366, 264, 360, 432], [766, 598, 367, 460, 425, 1205, 1272, 1351, 724, 913, 944, 462, 342, 637, 1702, 271, 290, 593, 277, 366, 413, 534], [1221, 802, 1682, 346, 366, 1250, 818, 2249, 941, 1337, 3340, 1028, 980, 782, 2494, 303, 240, 473, 288, 295, 390, 408], [1311, 636, 1150, 389, 712, 1162, 1256, 1131, 515, 1157, 1630, 593, 622, 1650, 257, 251, 471, 292, 261, 240, 299], [1794, 598, 586, 1033, 360, 942, 1309, 1698, 944, 1896, 676, 461, 1267, 1645, 257, 183, 452, 247, 251, 238, 608], [1857, 1164, 541, 913, 1439, 1310, 1059, 1247, 600, 1297, 796, 13694, 207, 253, 344, 389, 347, 345, 413], [1036, 294, 1860, 1046, 289, 743, 1199, 2171, 377, 893, 1133, 1321, 548, 523, 354, 268, 227, 460, 281, 318, 310, 415], [1163, 426, 501, 942, 460, 576, 817, 495, 1017, 698, 1098, 510, 720, 614, 958, 309, 264, 492, 285, 352, 362, 387], [637, 328, 753, 886, 555, 789, 1012, 465, 642, 1441, 1921, 893, 302, 2024, 1007, 311, 234, 505, 252, 240, 218, 409], [400, 539, 380, 356, 355, 1130, 966, 612, 1616, 1467, 565, 813, 575, 198, 1636, 356, 524, 257, 257, 320, 365], [1119, 309, 413, 384, 240, 857, 935, 437, 864, 2063, 1139, 496, 571, 335, 1601, 229, 142, 1432, 325, 241, 236, 687], [2331, 388, 3766, 798, 430, 1304, 1298, 415, 1516, 741, 1825, 598, 721, 16073, 295, 169, 536, 353, 251, 218, 949], [1194, 497, 972, 419, 256, 1348, 1073, 579, 812, 310, 1107, 1495, 1074, 904, 1612, 406, 164, 405, 248, 217, 222, 416], [612, 356, 360, 276, 451, 816, 1298, 430, 288, 1002, 603, 513, 482, 1606, 261, 157, 250, 253, 245, 245, 363], [467, 301, 395, 431, 287, 599, 1138, 555, 1244, 1060, 1530, 3653, 1615, 314, 136, 440, 173, 223, 283, 265], [421, 337, 268, 258, 324, 646, 1033, 366, 296, 213, 478, 297, 201, 671, 1607, 287, 197, 427, 304, 244, 250, 280], [1254, 269, 625, 996, 219, 540, 1102, 322, 1077, 1954, 911, 274, 301, 1550, 281, 109, 382, 214, 189, 189, 185], [293, 217, 308, 220, 241, 395, 1098, 446, 470, 955, 291, 182, 379, 1603, 266, 123, 437, 181, 171, 211, 268]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

