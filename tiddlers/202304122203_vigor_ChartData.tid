created: 20230412220340000
creator: Drevarr
modified: 20230705163525480
modifier: drevarr
tags: ChartData
title: 202304122203_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Xyntharos", "Tegan Parker", "Mac Chiato", "Grasszanine", "Zadie Miststep", "Arcanophage Farra", "Newtype Khan", "Fribble Bibble", "Johoshua", "Drevarr Moonwillow"];
const professions = ["Druid", "Vindicator", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[155.1879, 0.0, 56.7547, 87.1563, 0.0, 0.0, 155.2673, 0.0, 0.0, 21.978, 0.0, 0.0, 52.5139, 10.6733, 0.0, 89.9728, 47.7187, 75.3754, 0.0, 341.8632], [78.6083, 16.0568, 10.9417, 36.7353, 89.276, 40.6249, 177.1762, 3.8916, 122.09, 7.953, 69.719, 3.0503, 12.5453, 40.1818, 28.7866, 75.8187, 4.0522, 15.863, 18.023, 382.9032], [150.2854, 30.2864, 0.0, 95.697, 63.5324, 72.2221, 207.4199, 252.3, 13.86, 52.224, 0.0, 39.191, 47.7682, 0.0, 0.0, 0.0, 0.0, 0.0, 484.272], [80.6369, 29.866, 29.5568, 64.827, 61.1706, 49.0764, 235.5205, 0.0, 238.96, 29.7024, 0.0, 44.4269, 57.7613, 0.0, 86.5085, 0.0, 28.2269, 29.8469, 455.1336], [86.5536, 0.0, 0.0, 66.885, 71.3264, 82.0182, 270.0508, 0.0, 168.49, 17.556, 138.1325, 0.0, 63.3485, 43.321, 0.0, 44.8379, 0.0, 0.0, 33.1128, 474.8328], [191.8717, 0.0, 0.0, 152.3949, 113.6026, 53.2062, 243.1409, 0.0, 215.76, 15.642, 114.1747, 27.0605, 0.0, 0.0, 118.1821, 0.0, 31.2854, 31.5706, 700.1424], [281.4683, 0.0, 0.0, 145.8093, 52.1958, 180.9394, 241.2358, 25.4364, 544.33, 35.508, 86.953, 0.0, 135.9245, 0.0, 0.0, 0.0, 0.0, 40.7462, 0.0, 1208.628], [213.172, 34.054, 60.4493, 253.134, 225.67, 175.5611, 210.992, 0.0, 535.63, 66.594, 252.4378, 55.3397, 98.6515, 103.8552, 55.3397, 103.2361, 37.5581, 126.2304, 48.4445, 1198.368], [475.7067, 60.6698, 0.0, 214.8552, 294.0441, 179.5948, 639.8822, 924.52, 53.13, 192.2496, 25.5295, 55.6243, 131.5325, 0.0, 152.3302, 52.3354, 65.5517, 0.4536, 1303.02], [566.8247, 60.1201, 85.9421, 335.8656, 173.7104, 209.2712, 616.3063, 0.0, 803.59, 52.008, 187.0272, 26.9874, 124.727, 116.3597, 5.2424, 97.0004, 0.0, 83.592, 72.5155, 1894.8168], [896.3031, 76.6943, 77.5013, 356.2398, 342.3429, 249.608, 1074.4877, 0.0, 1792.2, 74.415, 294.2822, 35.125, 126.9562, 181.7597, 127.5232, 354.4474, 31.1472, 95.4374, 99.8827, 2278.5408]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

