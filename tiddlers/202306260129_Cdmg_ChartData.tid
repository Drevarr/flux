created: 20230626012920000
creator: Drevarr
modified: 20230705163538421
modifier: drevarr
tags: ChartData
title: 202306260129_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias", "Sl\u00e4ngin", "Sofya De Nova", "Alarics Bane", "Traidoruns Maximus", "Mammary Mission", "Synomi\u00f1 Spyce", "Nbezerkzz", "Toushay", "Fablegodx", "Astraea Lumena", "Kosair", "Vipares", "Johosh The Mighty"];
const professions = ["Reaper", "Berserker", "Weaver", "Reaper", "Firebrand", "Scourge", "Scourge", "Scourge", "Reaper", "Berserker", "Firebrand", "Guardian", "Renegade", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[83.5106, 51.303, 30.0, 33.8367, 30.4028, 58.7941, 38.8144, 14.878, 76.4179, 31.3, 25.7097, 0.4603, 23.4902, 4.4118, 48.0315], [26.1111, 184.9787, 0.0, 10.5, 22.7143, 65.1389, 23.3529, 4.0412, 13.9756, 4.1493, 0.0, 0.0, 0.0, 49.4706, 0.0, 24.7402, 8.6353, 3.0625, 0.2963, 84.486, 0.0, 6.2], [51.6824, 35.9062, 112.0741, 140.8318, 22.6154, 106.8], [50.7795, 143.7294, 157.0469, 50.9753, 64.8037, 8.1154, 0.0], [102.4722, 0.0, 3.6364, 38.9138, 58.7347, 20.0, 8.6471, 106.0309, 0.0, 17.5075, 126.35, 0.0, 0.0, 34.8431, 0.0, 3.5433, 25.6824, 82.875, 43.9012, 76.1121, 6.7692, 0.0], [139.126, 64.0824, 118.6562, 239.9753], [5.6939, 36.3333, 789.9412, 177.0619, 147.5122, 3.9851, 2.15, 0.0, 54.8889], [8.6667, 177.0213, 76.8485, 12.5862, 15.5102, 96.9444, 734.7647, 58.5361, 0.2683, 114.6567], [0.0, 74.8511, 42.1212, 15.9184, 62.875, 57.1707, 39.4627, 76.2903, 18.0794, 157.5294, 90.5591, 64.1765, 162.5234, 19.8846, 0.0], [155.9167, 280.6596, 398.1212, 103.4828, 50.4082, 100.0972, 243.7647, 50.3711, 3.6341, 185.4328, 0.9, 0.0, 87.873, 1.098], [61.7222, 136.2553, 14.697, 18.3276, 112.3673, 92.5556, 341.5294, 277.9691, 141.6585, 24.4179, 0.0, 10.7419, 69.9683, 8.8039, 0.0, 90.1102, 209.1294], [1675.8], [115.4722, 0.0, 0.0, 57.931, 271.0204, 490.7639, 0.0, 200.7113, 299.0, 156.9403, 247.6, 50.4516, 32.4603, 125.7255, 106.5039, 161.8588, 149.9844, 11.4691], [8.4444, 616.5957, 358.1212, 346.8103, 1.6122, 190.0556, 635.6176, 317.5876, 7.2683, 0.0, 102.2, 48.0968, 75.6984, 0.2941, 74.6471, 188.4252, 204.2706, 541.6719, 600.1235, 219.3084, 0.0, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

