created: 20230523000132000
creator: Drevarr
modified: 20230705163531275
modifier: drevarr
tags: ChartData
title: 202305230001_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Binkety Bonk", "Elonith Primal", "Cat Wigglebooty", "Black Raspberry Pie", "Gavann", "Fribble Bibble", "Scraparone", "Sygaldry Verdandi", "Zefirokai", "Drevarr Moonwillow", "Koralia Danai", "Crusader Siolith", "Miphest\u00f6", "Blanco Padre Guard", "M\u00e4raas", "Bella Sassy", "Grasszanine", "Venomina The Fierce"];
const professions = ["Scrapper", "Tempest", "Scrapper", "Chronomancer", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2.4422, 5.3095, 7.4008, 58.9732, 10.7748, 35.2176], [0.0, 9.8384, 4.8762, 19.9585, 0.0, 9.471, 0.0, 28.9811, 6.4515, 0.0, 59.7632], [2.4339, 0.0, 8.2285, 15.4224, 23.5301, 1.4992, 6.9495, 3.3176, 61.6692, 0.0, 1.9926, 43.4884], [5.1072, 0.0, 21.9128, 34.8138, 25.0007, 0.0, 6.519, 5.5123, 44.4827, 5.9129, 10.7748, 41.6208], [0.0, 26.3848, 4.3092, 20.3787, 5.453, 0.0, 78.8557, 0.0, 14.5386, 52.026], [7.7805, 0.0, 11.2694, 21.3192, 35.5052, 0.0, 5.535, 6.6352, 53.9184, 0.8118, 69.6348], [13.8785, 0.0, 18.8714, 46.0512, 136.3348], [18.1146, 32.6456, 25.7418, 51.0519, 1.1606, 4.469, 11.3309, 54.2554, 0.0785, 11.3652, 88.5776], [322.828], [9.2967, 0.0, 17.9774, 25.1748, 49.7913, 5.513, 8.692, 15.6182, 116.5985, 7.4538, 84.3088], [5.1471, 0.0, 29.5152, 46.0404, 49.7913, 0.0, 7.913, 25.8262, 108.5108, 19.3356, 80.04], [29.9649, 29.6941, 26.1954, 63.8674, 7.6892, 9.635, 13.7298, 126.7082, 3.5792, 4.9446, 62.9648], [6.384, 0.0, 49.6392, 71.2205, 4.1106, 4.2845, 20.5691, 91.3243, 3.8148, 34.8336, 113.1232], [6.8229, 24.3277, 43.8858, 60.0857, 9.7687, 7.5235, 26.1325, 103.7929, 8.8189, 45.9036, 73.37], [26.6133, 7.6325, 36.0443, 44.9064, 89.9185, 3.5303, 6.97, 20.9264, 168.832, 3.4894, 14.6124, 141.404], [22.3839, 50.0864, 39.4632, 94.7506, 5.1503, 4.346, 36.5957, 169.843, 39.3354, 106.9868], [64.0395, 6.1167, 60.2826, 79.6068, 238.8723, 40.6708, 27.47, 23.3763, 219.3805, 34.4646, 318.5592], [36.2292, 4.8805, 62.3397, 98.2044, 228.788, 23.8867, 343.3928, 0.0, 368.7176]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

