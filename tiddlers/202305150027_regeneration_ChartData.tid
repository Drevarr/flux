created: 20230515002743000
creator: Drevarr
modified: 20230705163530056
modifier: drevarr
tags: ChartData
title: 202305150027_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Aronorf Xideliesi", "Belvyn Brightblade", "Drogo Discourteous", "Lucas Ryn", "Tegan Parker", "Miphest\u00f6", "Tika Mi", "Artakama Nahid", "Tribal S"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Tempest", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[121.2494, 299.4451, 310.65, 131.1617, 55.7278, 114.9291, 43.2915, 10.4296, 19.0164, 74.5543, 108.5716, 169.7634, 50.6352, 2.8548, 16.038], [134.8963, 790.1057, 234.2715, 73.9206, 187.3712, 72.7701, 99.7215], [773.1313, 604.8977, 151.1581, 99.6345, 75.3363, 195.4815], [163.7064, 344.7101, 502.8388, 339.0871, 205.64, 210.795, 53.8935, 18.5609, 19.7184, 110.2569, 110.4176, 170.5273, 156.2669, 179.8991, 78.012], [134.199, 802.0569, 397.5601, 254.3826, 297.7708, 41.2965, 64.3188, 103.6932, 99.0681, 413.7148, 25.4654, 75.7988, 0.0], [135.5422, 373.4359, 779.0274, 339.3714, 262.8262, 293.005, 32.205, 131.4729, 42.868, 467.852, 124.5552, 158.5376, 15.576], [552.3617, 1207.791, 1516.3034, 992.5262, 553.3628, 827.1412, 156.465, 47.8285, 272.3604, 624.4916, 721.065, 281.9309, 361.4717, 126.896], [478.6236, 1008.5962, 1680.3266, 1001.8137, 606.9413, 974.0562, 202.8915, 37.1794, 314.028, 402.1758, 756.0355, 1077.6828, 419.8656, 493.775, 251.064], [1734.1412, 2695.1166, 1449.1281, 1105.4975, 833.5568, 10.203, 2.4255, 261.3156, 76.8748, 1194.2872, 1209.6361, 474.0859, 435.6462, 376.178]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

