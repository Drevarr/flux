created: 20230415000841000
creator: Drevarr
modified: 20230705163525493
modifier: drevarr
tags: ChartData
title: 202304150008_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Nazhul Naxxremis", "Drevarr Moonwillow", "Panther B Me", "Sassy Daddy Demon", "Grasszanine", "Rina Of Theros", "Newtype Khan", "Arcanophage Farra", "Paul Bjart Mist Cop", "Fruji", "Kosa\u00edr", "The Fancy Cheese"];
const professions = ["Scourge", "Scrapper", "Scourge", "Vindicator", "Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4211, 5683, 16792, 6496, 18896, 1017, 3776, 23654, 4522, 4254], [11851, 1674, 2719, 1117, 8488, 588, 7227, 11903, 3430, 8351, 0, 5480, 0, 874, 266, 590, 5081, 2173, 12255, 7361, 1036, 7615], [13119, 3608, 6563, 4641, 8770, 508, 2652, 11949, 4741, 4621, 0, 16751, 0, 4155, 6056, 0, 521, 4069, 12878, 5931], [4457, 6471, 10409, 512, 14172, 3688, 21437, 20361, 8799, 10159, 0, 7016, 0, 4709, 0, 0, 1609, 1827, 6398, 3011, 269, 0], [1244, 0, 9765, 2418, 4287, 522, 10096, 6758, 3692, 18088, 0, 14393, 7424, 3391, 2813, 3752, 2047, 12396, 6976, 11694, 7235], [9573, 6270, 18460, 5778, 14459, 261, 8369, 12164, 1196, 9263, 0, 7661, 0, 5563, 7083, 2062, 3702, 3474, 5706, 11173, 0, 6164], [5315, 202, 6423, 2146, 8981, 5626, 7207, 13163, 8654, 5122, 0, 25064, 7277, 0, 3690, 6296, 7145, 15812, 8735, 2692, 11062], [3345, 3015, 5982, 0, 10052, 3730, 14121, 26465, 3397, 10645, 308, 17570, 2339, 3259, 0, 3164, 5524, 13830, 6539, 13746, 7761], [26518, 11488, 37011, 2489, 44790, 4588, 40523, 45013, 46538, 1306, 56718, 0, 8164, 11488, 15866, 26006, 16303, 55580, 20032, 5771, 29585], [24746, 11328, 36451, 11169, 47377, 9264, 54290, 39079, 24604, 42395, 0, 21946, 20068, 29762, 3632, 27261, 22996, 64275, 14217, 1032, 22132], [28390, 13488, 40503, 9999, 54403, 1499, 53844, 36666, 37659, 38010, 140, 84205, 0, 19636, 11547, 27706, 31612, 41492, 84617, 35940, 26975, 23271], [26577, 17373, 47940, 6665, 44516, 11955, 44753, 52556, 54536, 58147, 1032, 68284, 0, 12119, 15145, 24742, 34844, 26716, 65476, 25738, 35381, 32533]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

