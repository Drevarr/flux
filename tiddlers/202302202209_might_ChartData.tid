created: 20230220220953000
creator: Drevarr
modified: 20230705163519745
modifier: drevarr
tags: ChartData
title: 202302202209_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Arka\u00f1", "Donnica Hackdead", "Black Raspberry Pie", "Mustache Bloodclaw", "Belvyn Brightblade", "Xanvias Tseli", "Zadie Miststep", "Fribble Bibble", "Mac Aaroni", "Koralia Danai", "Zaylen Harker", "Sygaldry Verdandi", "Blanco Padre Guard", "Sofya De Meme", "Kahless The Drunk", "Ravioli Fetabringer", "Drevarr Moonwillow", "Bella Sassy", "Newtype Khan", "Venomina The Siren", "Veron Blackburn"];
const professions = ["Dragonhunter", "Chronomancer", "Tempest", "Chronomancer", "Herald", "Firebrand", "Berserker", "Tempest", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker", "Tempest", "Herald"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 40.7938, 66.0299, 0.0, 0.0, 0.0, 2.9093, 0.0, 0.0, 11.9089], [0.0, 7.7566, 72.9805, 0.0, 1.1936, 0.0, 0.0, 2.0748, 2.5026, 4.801, 4.7552, 4.8048, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3681, 4.8384, 4.657, 4.8797, 0.0, 4.9804, 0.0, 0.0, 0.0, 4.6298], [0.0, 0.9812, 19.9017, 1.9391, 3.672, 7.2167, 13.3661, 3.8493, 2.7273, 48.9275, 23.8887, 13.5668, 21.2876], [55.6042, 5.2164, 5.1887, 7.7242, 4.7084, 0.0, 0.0, 14.3405, 5.2265, 5.7288, 9.9792, 5.2245, 0.0, 5.2069, 0.0, 0.5832, 3.5521, 2.5488, 0.0, 14.8512, 5.2452, 6.8776, 5.22, 5.3806, 0.0, 3.8184], [1.14, 4.3254, 5.1823, 17.6256, 14.22, 31.7179, 28.8063, 27.9256, 48.6158, 21.6468, 5.7679, 3.007], [0.0, 62.0525, 131.4807, 0.1134, 9.7684, 3.7174, 4.9381, 0.0, 2.2106, 8.3549], [0.0, 8.0438, 46.916, 0.0, 8.8914, 0.0, 3.2155, 2.9925, 6.2982, 2.3693, 2.399, 11.1989, 22.176, 0.0, 8.806, 5.2461, 3.7374, 4.131, 2.7456, 7.344, 12.087, 17.3971, 0.0, 7.2927, 24.9312, 7.9463, 7.9552, 19.808], [5.3105, 47.4012, 104.837, 0.0, 7.4054, 3.7842, 4.3639, 2.128, 7.3827, 22.446, 0.6426, 3.6221, 0.0, 1.2964, 0.102, 0.0, 1.2266, 3.4263, 0.0, 0.0, 4.3015, 3.7128, 7.4025, 3.3795, 7.4014, 3.6867, 2.8384, 0.0], [3.5074, 63.7762, 172.0254, 1.5422, 1.0962, 0.0, 2.0288, 4.0964, 8.1334, 7.2326, 5.6977, 4.3982, 12.2707, 4.3344, 0.0, 3.7976, 0.4618, 2.2356, 3.9811, 0.2592, 4.657, 16.8667, 3.6378, 4.091, 4.4409, 1.2206, 0.0, 2.1956], [0.0, 12.0658, 144.8025, 5.103, 2.4847, 3.5839, 26.6046, 3.2718, 18.3107, 39.2182, 0.0, 17.2973, 3.7699, 0.0, 0.0783, 0.0, 10.4004, 0.0, 5.9616, 9.4411, 3.9339, 11.6801, 19.3996, 0.1744, 1.9921, 12.3621], [0.0, 88.4822, 161.0204, 0.0, 0.0, 0.0, 3.7514, 0.0, 18.2686, 5.1836, 5.581, 11.7533, 5.6115, 0.0, 0.4698, 0.0, 6.1722, 9.8498, 0.6048, 6.5057, 28.0051, 11.2941, 3.7946, 26.3336, 1.3701, 0.5468, 1.0501], [0.0, 64.9253, 189.9809, 5.0576, 0.0, 0.6678, 6.2779, 0.0, 2.6277, 9.9137, 4.4982, 6.9854, 23.2109, 0.0, 4.0716, 0.0, 2.5568, 0.0, 3.8038, 33.8395, 8.4177, 18.0834, 10.8295, 0.0, 4.773], [70.6709, 170.2877, 0.0, 0.8526, 4.7191, 1.1484, 0.0, 2.4609, 0.0, 0.0, 15.8189, 37.3296, 4.8375, 1.2528, 0.6349, 3.9366, 6.332, 12.3552, 12.087, 16.4424, 9.8136, 13.9924, 16.5948, 3.1387, 1.8488, 2.7683], [0.0, 53.1468, 112.3667, 0.0, 5.2861, 6.8338, 9.57, 4.0831, 9.1345, 20.7626, 11.1812, 17.6669, 14.784, 0.0, 3.6801, 5.1371, 6.3666, 0.0, 5.3568, 9.5274, 30.445, 14.8473, 10.7315, 42.3051, 6.7257, 8.8015, 4.4866], [16.4472, 28.0896, 4.1796, 0.0, 27.9531, 2.1212, 18.6138, 22.7713, 32.2272, 46.8905, 47.4178, 42.6807, 10.6722, 108.2949, 14.7716, 13.5408, 52.2643], [0.9139, 97.3879, 261.2237, 0.0, 3.313, 0.0, 5.742, 0.1197, 2.586, 16.5851, 4.7552, 8.9443, 16.7798, 3.2702, 3.2494, 0.5195, 1.6767, 8.2711, 0.5184, 8.6031, 29.5963, 4.9491, 8.182, 23.2951, 0.0249, 0.7812, 14.6054], [0.247, 87.3331, 194.6146, 7.5751, 6.1874, 4.541, 14.7378, 6.9958, 10.3024, 31.9855, 15.8936, 17.2603, 24.0979, 6.4629, 2.38, 13.311, 0.0144, 11.5182, 4.5302, 6.264, 6.5057, 33.4152, 19.2465, 9.1307, 27.8918, 1.943, 1.0807, 5.4889], [6.0268, 92.7914, 249.0603, 8.0287, 5.7246, 9.0153, 8.3068, 5.1604, 13.806, 25.1894, 13.5803, 9.3139, 23.9501, 6.6564, 2.89, 9.7092, 2.8283, 7.7031, 4.9249, 7.0416, 5.1903, 33.203, 21.5307, 15.4154, 26.4894, 9.5654, 6.5751, 12.9826], [0.0, 106.8682, 244.4266, 13.5173, 6.09, 0.0, 6.7756, 6.118, 1.7935, 31.9855, 21.6342, 17.0386, 35.999, 5.6889, 3.757, 0.0392, 7.8932, 3.3291, 14.689, 5.616, 20.1924, 47.8421, 10.8288, 13.6367, 26.7231, 1.669, 4.1143, 3.1979], [8.8673, 142.4909, 364.9023, 7.2576, 20.5111, 20.3902, 9.0341, 0.0, 18.1439, 26.8105, 13.8802, 6.468, 39.695, 3.0766, 8.874, 15.934, 0.9524, 10.2546, 7.8078, 17.5392, 14.3267, 67.3608, 18.6543, 18.6763, 23.9184, 9.5156, 6.4449, 19.4261], [1.9513, 239.8788, 543.8782, 0.0, 0.0, 6.2328, 3.139, 0.0, 7.2158, 43.1462, 8.1824, 19.1083, 26.833, 0.0, 2.941, 0.0, 0.0, 10.5462, 13.7108, 0.0, 0.0, 26.9443, 27.3681, 16.364, 18.8542, 2.217, 0.0, 3.5798], [22.2547, 218.3328, 377.0657, 47.0461, 24.3586, 74.2588, 25.3613, 22.2499, 80.9424, 18.1503, 18.768, 29.4017, 11.6306, 28.7469, 9.0776, 18.8784, 29.6487, 119.9765]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

