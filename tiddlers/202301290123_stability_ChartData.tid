created: 20230129012318000
creator: Drevarr
modified: 20230705163518317
modifier: drevarr
tags: ChartData
title: 202301290123_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Kira Dragonblaze", "Venomina The Fierce", "Husky Guard", "Xanvias Einzbern", "\u00c2 R K", "Newtype Khan", "Fribble Bibble", "Belvyn Brightblade", "Zaylen Harker", "Blancoopadree", "Aronorf Xideliesi", "Bubble Teabringer", "Bella Lunabringer", "Koralia Danai"];
const professions = ["Dragonhunter", "Spellbreaker", "Dragonhunter", "Berserker", "Firebrand", "Spellbreaker", "Scrapper", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.7707, 0.8949, 2.3814, 3.2163, 2.091, 1.2016, 4.4186], [2.7183, 1.3566, 4.2887, 1.4484, 0.5005, 1.128, 1.2919, 1.9082, 0.0, 1.805], [0.9139, 0.471, 1.0935, 1.1836, 1.5334, 1.2016, 1.5595, 1.4484, 0.8602, 0.816, 0.2981, 1.1197, 1.7108, 0.0, 2.3152], [1.7136, 1.9782, 1.8468, 1.6467, 2.9971, 0.9302, 5.9782, 0.8449, 0.7507, 0.792, 0.7498, 0.8039], [7.667, 4.9225, 8.8373], [1.3709, 1.5072, 2.8674, 3.242, 2.4395, 1.4341, 4.6786, 0.0, 0.5161, 0.0, 0.0, 1.78, 1.5792, 0.0, 1.5696], [2.9417, 3.5796, 2.2842, 1.1836, 3.7638, 2.4031, 7.6676], [0.4284, 0.0, 4.5441, 4.2197, 5.2275, 3.6822, 7.0178], [7.4834, 1.2199, 2.904, 3.8471, 7.8302, 2.0998, 2.943], [0.0, 0.0, 0.0, 0.0, 0.0, 5.5039, 0.0, 8.449, 0.0, 0.096, 0.0907, 0.89, 7.3696, 0.1333, 7.1024], [1.8564, 2.5434, 5.7591, 5.0688, 9.6883, 6.4342, 8.9672, 7.0006, 2.6744, 2.088, 0.0, 0.0528, 3.0433, 3.8822, 0.0667, 2.943], [2.3419, 4.6629, 5.9049, 8.7997, 12.546, 6.0078, 19.2341, 12.6735, 3.8474, 2.568, 4.9094, 6.1194, 0.2333, 4.9442], [2.856, 6.6882, 7.1928, 8.1564, 11.5702, 7.4419, 15.7252, 10.863, 3.3939, 1.68, 2.4106, 1.1475, 4.4788, 5.0008, 0.0, 6.9847], [1.7707, 15.4017, 8.6508, 10.1376, 15.1249, 9.6125, 17.4146, 14.3633, 5.4114, 4.92, 1.0806, 6.5172, 9.2778, 2.2664, 9.2606]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

