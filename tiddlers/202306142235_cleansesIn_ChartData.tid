created: 20230614223544000
creator: Drevarr
modified: 20230705163535086
modifier: drevarr
tags: ChartData
title: 202306142235_cleansesIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Lord Erin The Wise", "Be\u00eb", "River No Hug", "Cedryn X", "Smol Gluvs", "Elonith Requiem", "Hyde En Sikh", "Zayde Sunsabre", "River No Hug", "No Reserv\u00e9", "Johosh The Mighty", "Rozaalyna", "Raelyn Sunray", "Fribble Bibble", "Sub Train", "Sygaldry Verdandi", "Bella Sassy", "Tootsy Pop Star", "Jacob Pine", "Elon The Archmagus", "Primal Clone", "Drevarr Moonwillow", "Eibh\u00ebar", "Alarics Bane", "Tegan Parker"];
const professions = ["Weaver", "Reaper", "Reaper", "Berserker", "Reaper", "Reaper", "Chronomancer", "Spellbreaker", "Scourge", "Vindicator", "Berserker", "Reaper", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Reaper", "Reaper", "Tempest", "Chronomancer", "Scrapper", "Chronomancer", "Reaper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.2245, 0.1702, 0.2909, 0.2339, 0.2], [0.5231, 0.5082, 0.4111, 0.0], [0.7385, 0.3934, 0.3889, 0.0345], [0.3469, 0.2766, 0.4909, 0.2105, 0.2375], [0.7692, 0.3115, 0.4111, 0.2414], [0.7692, 0.623, 0.5444, 0.1034], [0.4082, 0.6596, 0.2, 0.5322, 0.25], [0.9077, 0.7705, 0.7444, 0.1034], [0.5306, 0.2979, 0.2364, 0.6608, 0.325], [0.5714, 0.3191, 0.5273, 0.6491, 0.425], [0.3469, 0.617, 0.6727, 0.7368, 0.2625], [0.3265, 0.2553, 0.8, 0.7076, 0.5625], [0.5714, 0.1489, 0.2364, 0.462, 0.3625, 0.6308, 0.3934, 0.5222, 0.0], [0.2449, 0.3617, 0.4909, 0.3918, 0.3875, 0.8154, 0.541, 0.3333], [0.6327, 0.3617, 0.3636, 0.7778, 0.25, 0.5231, 0.3115, 0.0333, 0.0345], [0.5714, 0.3404, 0.3455, 0.386, 0.3375, 0.8154, 0.2459, 0.6667, 0.0345], [0.5714, 0.4255, 0.1636, 0.6667, 0.3125, 0.6154, 0.3279, 0.4778, 0.1494], [0.2449, 0.4681, 0.5636, 0.6433, 0.375, 0.8462, 0.541, 0.1444, 0.1494], [0.3061, 0.1702, 0.2909, 0.9123, 0.5625, 0.4154, 0.6393, 0.3222, 0.0575], [0.3878, 0.3617, 0.5273, 0.7719, 0.55, 1.0, 0.4918, 0.0889, 0.2414], [0.7959, 0.4043, 0.7091, 0.7251, 0.4125, 0.8154, 0.377, 0.3333, 0.069], [0.8571, 0.3617, 0.5273, 0.7719, 0.4625, 0.6923, 0.3934, 0.5, 0.1609], [0.449, 0.4468, 0.7273, 0.7427, 0.4375, 0.7846, 0.459, 0.6222, 0.069], [0.6122, 0.1702, 0.4364, 0.655, 0.65, 0.8615, 0.623, 0.7, 0.1724], [0.7347, 0.4894, 0.7273, 0.7485, 0.575, 1.1538, 0.541, 0.6444, 0.1379]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

