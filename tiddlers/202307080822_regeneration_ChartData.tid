created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Kittendoo", "Legoh Brave", "A\u00fcrora Windrunner", "Mother Ship", "Conky Jr", "Geradenil", "F\u00f9gly", "Twinks R Us", "Pet Pirate", "Emobilized", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Firebrand", "Tempest", "Herald", "Vindicator", "Tempest", "Firebrand", "Druid", "Vindicator", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12.3225, 28.809, 113.7713, 40.2448, 574.057, 133.8537, 3.4704, 12.7581, 16.673, 119.2928], [312.6753, 102.7714, 8.1065, 70.9125, 79.3945, 216.0103, 222.2161, 395.945], [178.7707, 91.4544, 337.091, 0.0, 0.0, 44.5935, 74.5203, 0.0, 0.0, 353.3777, 151.4913, 0.0, 83.4095, 0.0, 216.5265, 0.0, 51.4228, 35.061], [228.2491, 228.6715, 197.1854, 41.274, 17.8589, 14.384, 19.1575, 30.2131, 79.6917, 368.4945, 85.3252, 0.0, 36.6597, 10.4011, 112.7138, 37.1479, 202.7054, 48.0308], [38.6582, 1253.88, 158.4121, 188.1334, 185.1009], [150.8206, 41.3706, 221.4461, 30.3485, 3.739, 4.9135, 45.8083, 229.9704, 97.4919, 302.3983, 185.145, 4.5572, 72.3561, 0.0, 348.2033, 0.0, 101.0592, 81.4924], [0.0, 338.5637, 65.6728, 19.4011, 87.451, 132.017, 238.7376, 746.856, 263.9237, 0.0, 56.4171, 70.933, 318.2108], [513.1324, 364.6135, 252.7601, 14.8074, 43.8048, 48.2825, 55.8963, 375.7757, 445.28, 109.089, 102.9866, 61.58], [114.5834, 2261.7247, 280.5603, 515.453], [117.3819, 774.4024, 81.414, 22.3884, 117.3505, 156.17, 697.8017, 227.7403, 1323.949, 353.353, 0.0, 176.9506, 138.3766, 900.8392, 142.3499, 284.0376, 130.2479], [1666.1207, 1183.1697, 2297.6289, 287.4637, 109.3306, 367.4585, 506.437, 1600.9582]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

