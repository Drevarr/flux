created: 20230130220929000
creator: Drevarr
modified: 20230705163518374
modifier: drevarr
tags: ChartData
title: 202301302209_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Sygaldry Verdandi", "Arriasa", "Whose Guardian", "Black Raspberry Pie", "Cat Wigglebooty", "Belvyn Brightblade", "\u00c2 R K", "Doctor House", "Zaylen Harker", "Veron Blackburn", "Tyrisai", "Koralia Danai", "Drevarr Moonwillow", "Arkitrix", "Ravioli Fetabringer", "Gavann", "\u00c9\u00efbhear", "Mac Aaroni", "Bella Lunabringer", "Newtype Khan", "Vinthry Stormgrave"];
const professions = ["Firebrand", "Druid", "Firebrand", "Chronomancer", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Herald", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Firebrand", "Spellbreaker", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[10.6502, 14.9215, 3.5035, 12.9014, 17.5248, 14.7605, 0.0902, 5.7401, 27.3, 17.6256, 5.5354, 1.0463, 14.0662, 6.0724, 11.3702, 2.3848, 3.4702, 5.264, 0.4867, 12.2636], [55.8992, 91.5075, 4.9083, 0.0, 7.348, 1.9428, 12.047, 17.5248, 2.473, 0.0, 0.0, 0.0, 4.4798, 3.839, 0.0, 0.0, 0.0, 2.2504, 0.0, 0.0, 0.7238, 0.0, 3.9323], [8.3765, 19.6512, 40.6881, 16.5379, 11.7208, 4.1872, 22.68, 17.4787, 12.4546, 5.2316, 19.1774, 3.5156, 9.1199, 0.6467, 4.583, 0.987, 3.6317, 12.1303], [61.7322, 46.8563, 13.3358, 4.9377, 1.9384, 0.0, 12.3034, 19.9631, 3.4776, 7.9341, 4.1595, 3.948, 15.5693, 6.4282, 6.5305, 0.0, 2.3312, 2.4083, 0.0, 0.0, 0.0, 1.5912, 2.1328], [39.8586, 67.2525, 16.0215, 0.0, 6.4464, 2.7073, 11.1926, 24.23, 5.5642, 5.7702, 2.1629, 11.088, 6.3893, 6.4728, 1.0644, 4.4979, 2.6132, 3.04, 0.6669, 0.5469, 0.2961, 0.7488, 1.7329], [100.1325, 132.3, 8.5201], [104.9933, 43.5488, 7.131, 1.173, 7.0776, 4.1723, 14.6102, 40.0786, 16.2288, 5.049, 0.0], [144.3658, 163.7212], [76.8006, 27.0113, 16.5772, 0.0, 12.3519, 6.9115, 17.5152, 32.7638, 12.983, 11.9011, 4.7973, 13.104, 11.6035, 12.767, 0.0, 9.7318, 4.7188, 10.3832, 5.4365, 2.9233, 4.4086, 0.7114, 19.8617], [117.6314, 95.9175, 21.5781, 2.6462, 2.4794, 7.8351, 5.8099, 8.991, 5.5642, 33.7198, 6.0174, 23.94], [176.447, 223.2563, 29.913, 8.2947], [105.4794, 154.9013, 7.131, 0.0, 8.6554, 3.2487, 19.6512, 39.7738, 1.6229, 19.2942, 3.1612, 22.092, 11.677, 4.8658, 8.7913, 0.0, 5.2903, 0.0, 3.2816, 3.1255, 0.0, 21.1281], [128.3251, 142.2225, 25.5604, 4.7194, 6.9423, 9.7142, 14.8666, 29.8684, 19.4746, 12.2618, 4.8527, 15.036, 29.3026, 10.8029, 0.7036, 7.7282, 4.9256, 9.8305, 5.6992, 1.9426, 2.5497, 6.0278, 4.5989], [160.8925, 192.9375, 24.449, 0.0, 9.0611, 4.9049, 14.3539, 33.8306, 8.1917, 10.6389, 4.9914, 19.656, 7.4909, 15.7133, 9.1594, 5.7904, 5.6062, 0.0, 0.1132, 0.0165, 0.0, 10.9972], [170.128, 168.6825, 12.0393, 10.8302, 15.0567, 7.7714, 22.6416, 43.2788, 21.4066, 13.6142, 2.7453, 16.548, 13.2192, 8.3477, 5.863, 19.5454, 2.8012, 11.6466, 1.4753, 5.2242, 5.2476, 0.3557, 16.3292], [92.3552, 201.2063, 32.1357, 11.0446, 7.8033, 42.1219, 42.3644, 16.7698, 13.3437, 6.1283, 24.864, 22.3992, 16.5168, 3.4276, 18.1552, 0.2632, 13.2258, 4.3249, 5.9032, 5.0831, 0.9173, 26.1935], [152.143, 227.115, 30.6539, 4.6376, 7.7538, 2.3569, 13.1578, 48.46, 27.1253, 24.6137, 5.4905, 16.044, 17.9194, 6.3835, 3.6441, 5.8882, 3.29, 13.3837, 0.3234, 2.6027, 1.3982, 2.9203, 11.0639], [249.8451, 104.7375, 25.1899, 0.0, 5.1842, 4.0131, 19.6512, 91.7388, 11.9011, 63.7431, 0.6933, 13.44, 8.3722, 8.8834, 2.1648, 8.178, 1.8424, 5.014, 2.0614, 3.9229, 1.2831, 1.2542, 24.7271], [234.7766, 238.6912, 30.1909, 0.0, 11.5405, 7.3892, 19.8221, 58.9749, 17.7744, 23.081, 2.3016, 36.456, 23.868, 15.1776, 3.8064, 14.9657, 6.9936, 14.4102, 2.3241, 6.0352, 3.3394, 2.2838, 24.0606], [269.2883, 302.085, 8.9832, 7.0655, 15.0116, 8.7269, 30.1603, 89.9101, 30.6802, 23.3514, 9.5391, 23.352, 33.4886, 20.5344, 9.3988, 12.6759, 8.2156, 16.4237, 5.3961, 3.093, 2.1385, 7.1323, 16.8624], [381.5728, 583.7737, 49.3611, 26.5521, 28.1873, 39.217, 144.4657, 69.011, 48.4159, 4.2982, 13.104, 21.9586, 17.365, 14.1794, 30.7493, 8.178, 2.4872, 5.9619, 6.9782, 0.7567, 6.1214]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

