created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_downContribution_ChartData
type: text/vnd.tiddlywiki


const names = ["Glorious Gluvs", "Legacy Of Mathus", "Permanent Dawn", "Drevarr Moonwillow", "Ateriuz", "Lord Erin The Wise", "Crusader Siolith", "Kary\u00edna", "No Reserv\u00e9", "Latedoctor", "Mistwalker Cael", "Be\u00eb", "Johosh The Mighty", "Xanvias Einzbern"];
const professions = ["Berserker", "Berserker", "Weaver", "Scrapper", "Berserker", "Weaver", "Willbender", "Vindicator", "Vindicator", "Reaper", "Vindicator", "Reaper", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Down Contribution per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[261.3881, 4.918, 0.0, 0.0, 312.4737, 0.0, 72.7342, 174.6098, 76.58, 0.0, 0.0, 0.0, 67.0133, 403.9138, 0.0, 0.0], [64.0164, 67.2326, 0.0, 57.5263, 39.6983, 256.6098, 259.04, 16.7778, 0.0, 64.7538, 84.6267, 462.9828, 79.6415, 49.5172], [149.22, 0.0, 0.0, 323.28, 893.0, 131.8962, 31.1724], [89.7463, 6.5984, 0.0, 30.0, 0.0, 28.5431, 45.4684, 50.2195, 59.3, 10.4889, 0.0, 0.0, 12.0533, 103.3966, 7.0, 0.0, 325.037], [242.5, 124.5263, 340.6638, 581.7595, 56.7805, 327.24, 158.6667], [236.3443, 0.0, 0.0, 42.6579, 194.0, 238.8608, 148.6341, 464.12, 38.8222, 0.0, 35.0923, 349.9067, 121.9434, 0.0], [91.7869, 0.0, 143.4643, 159.5263, 46.0948, 116.443, 272.3902, 408.68, 100.3333, 0.0, 49.4133, 325.5517, 141.5849, 9.2931, 160.6222], [34.1066, 0.0, 73.5, 338.2632, 86.0259, 419.5316, 374.2927, 136.98, 0.0, 0.0, 68.0462, 151.8667, 1112.8621, 39.4057], [105.0574, 0.0, 222.8571, 361.7632, 85.8017, 502.0633, 821.0244, 1085.92], [37.6393, 0.0, 0.0, 286.1579, 118.1379, 121.2405, 102.4146, 471.52, 67.6222, 0.0, 30.1538, 60.9733, 175.0, 78.7547, 62.1034, 323.7259], [287.6269, 136.1803, 0.0, 178.9286, 987.6053, 303.9655, 358.6203, 687.3659, 548.52, 42.8, 0.0, 80.0769, 429.4667, 954.069, 46.0, 0.0], [162.582, 58.4651, 0.0, 613.3947, 341.1983, 313.1519, 173.9512, 514.34, 63.1111, 0.0, 0.0, 223.1467, 594.0345, 29.6509, 94.7241, 378.7037], [1185.0896, 356.2951, 0.0, 208.0357, 58.6053, 574.4741, 873.1519, 234.2927, 933.7, 117.6222, 0.0, 49.3692], [1322.5522, 556.0328, 137.3721, 0.0, 730.4737, 893.0172, 1434.3671, 575.9756, 1358.94, 2222.4667, 0.0, 38.6, 536.3467, 851.9828, 379.1604, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

