created: 20230819002646000
creator: Drevarr
tags: ChartData
title: 202308190026_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Cesare Pirane", "Lord Erin The Wise", "Wall Knot", "Daphne Agla\u00e9", "Zefirokai", "Mistwalker Cael", "Rahani Sunray", "Tribal S", "Jimbo The Pleb", "Cerys Fireblade", "Seiker Novus Terra", "Rozaalyna", "Pr\u00e6tor Lightbringer", "Legacy Of Mathus", "Rina Of Theros", "Arriasa", "Glorious Gluvs", "Venomina The Sly", "Xanvias Einzbern", "Zaedy Zae", "Morton Saltbringer", "Elon Illusionblade", "Gestern Yesteryear", "Black Raspberry Pie", "Air One Com", "Koralia Danai", "P\u00edogre", "Gavann", "Tegan Parker", "Darks Na", "Liu Mira", "Sub Train", "Yummy Kiwi", "Keypek The Drunk", "Kisumaiassu", "Solus Luxes", "Drevarr Moonwillow", "Irish Mini Rev", "Vee U", "Miphest\u00f6", "Arcanophage Farra", "Newtype Khan"];
const professions = ["Berserker", "Weaver", "Firebrand", "Scourge", "Catalyst", "Vindicator", "Chronomancer", "Druid", "Berserker", "Berserker", "Tempest", "Scourge", "Firebrand", "Berserker", "Scourge", "Druid", "Berserker", "Druid", "Berserker", "Druid", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Herald", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.0736, 2.322, 10.8661, 3.9249, 4.6454, 0.0, 5.445, 0.0, 1.1448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.8489, 17.9568, 5.5161, 0.0], [2.4709, 2.0124, 1.5523, 2.8224, 0.0, 0.0, 3.2125, 0.0, 1.3198, 4.5282, 0.0, 0.0, 2.6726, 2.6947, 0.0, 5.0195, 0.0, 0.0, 2.3085, 6.8112, 3.7795, 3.8212, 0.0, 2.8193, 15.8653, 0.0, 0.0, 0.0, 6.7257], [5.4096, 5.4823, 0.0, 0.7894, 0.0, 0.0, 9.5418, 13.932, 2.5537, 1.9913, 3.0618, 0.9666, 2.3716, 0.0, 5.9787, 7.1492, 21.5222], [2.9383, 3.182, 4.8203, 3.3075, 4.8128, 0.4883, 5.9351, 0.0, 6.7162, 4.7038, 5.0697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7709, 2.8483, 4.2903, 10.4949, 0.0, 0.1611, 3.2712, 0.0, 5.5616, 3.6842, 4.2596], [6.2105, 18.9544, 2.205, 7.2819, 8.3002, 5.1727, 3.1063, 13.8902, 0.0, 2.1165, 0.0, 5.474, 6.1327, 6.0536, 7.5293, 3.8171], [0.0, 2.7342, 2.4273, 5.6498, 6.044, 3.7565, 1.908, 3.1471, 1.6243, 3.158, 0.9777, 5.9248, 1.1615, 3.323, 1.7609, 1.423, 1.6474, 6.9255, 3.5294, 5.6182, 2.7986, 3.6666, 8.1356, 6.706, 3.2159, 3.2327, 2.9386, 24.4367], [12.755, 3.1648, 13.9707, 7.8057, 6.7797, 4.6035, 6.6429, 0.915, 9.2347, 6.5988, 5.808, 4.1791, 2.1356, 1.9642, 2.6482, 1.5456, 4.4326, 0.9794, 10.4678, 7.1606, 6.0088, 25.3335], [10.1695, 4.0455, 11.979, 1.0595, 9.2347, 7.1064, 5.8572, 0.0, 0.0, 0.0, 0.0, 12.9315, 1.5382, 3.8161, 1.2456, 11.5425, 15.2942, 8.4785, 13.1321, 0.945, 1.4499, 2.2898, 4.9359, 4.079, 24.6609], [14.0238, 5.5212, 10.2942, 8.9082, 13.8942, 13.5315, 13.4491, 3.3471, 14.1192, 6.0574, 5.6603, 5.2759, 2.1871, 3.9284, 4.9248, 4.4307, 2.2669, 2.2915, 3.2144, 11.6964, 9.1642], [11.4862, 0.4816, 11.1112, 4.8951, 8.914, 7.0447, 7.6774, 3.4194, 2.4422, 2.4703, 2.461, 3.0104, 4.9588, 9.1062, 2.4214, 1.7204, 1.8018, 5.1029, 5.1557, 11.3933, 9.0914, 4.2518, 5.8212, 6.6051, 7.1966, 2.2823, 1.1123, 5.5264, 11.8821], [3.339, 0.0, 39.1343, 2.9988, 14.3127, 29.7135, 29.9475, 16.0132, 34.4966, 0.0, 5.9064, 0.0], [16.6282, 7.3444, 14.6243, 7.2324, 15.2753, 16.461, 10.9989, 2.3358, 11.9822, 3.4178, 1.2797, 3.6685, 1.4152, 1.8676, 5.4823, 1.4683, 2.6312, 0.924, 2.3304, 12.9276, 7.8019, 15.3225, 13.2397, 1.7766, 3.0609], [6.4109, 4.214, 3.268, 3.3075, 12.2621, 6.2775, 12.8502, 0.0, 10.3795, 8.6969, 13.3878, 11.9322, 6.6654, 2.3695, 0.2318, 3.0765, 0.0, 21.2382, 13.5605, 6.8441, 12.5401, 3.024, 14.8212, 5.9699, 0.0, 12.4093], [14.0906, 2.2704, 22.7126, 11.8629, 9.5, 10.4625, 12.3601, 3.8769, 3.1291, 0.832, 1.1836, 3.059, 5.1571, 3.0654, 4.473, 1.349, 6.1877, 5.3096, 19.102, 9.257, 5.6322, 6.7662, 8.4233, 4.1228, 22.419], [12.5546, 4.7472, 6.9445, 6.3504, 6.9889, 3.9758, 9.7466, 3.9973, 10.3032, 6.2266, 6.6939, 3.7352, 4.9712, 1.9578, 2.3074, 1.0072, 6.8708, 9.6188, 3.9629, 8.2742, 12.4862, 5.0274, 8.6994, 10.3861, 2.4008, 8.1338, 8.4211, 23.9883], [9.2156, 1.1524, 26.3891, 5.1597, 9.3326, 15.066, 8.2764, 3.7565, 1.2974, 13.4683, 7.0385, 0.0, 0.644, 0.6504, 0.8758, 3.5622, 0.0, 8.9262, 10.093, 19.102, 7.481, 0.0, 0.0, 1.6356, 1.4968, 1.7728, 11.2282, 33.4043], [14.6916, 1.4104, 11.7648, 5.9094, 4.8546, 15.2753, 9.7466, 5.0568, 11.5243, 7.0387, 8.1705, 2.7609, 1.0035, 2.5116, 3.4845, 5.3066, 1.9835, 0.0, 4.9421, 9.0801, 14.0558, 10.215, 6.566, 3.3642, 9.0216, 12.5123, 1.897, 1.738, 4.3421, 24.2125], [19.2994, 7.8604, 7.2713, 5.1597, 12.8898, 9.4163, 6.3162, 4.0454, 7.7083, 14.7881, 7.2353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.8514, 21.1147, 10.4193, 24.7572, 0.0, 7.3602, 0.8151, 3.8931, 12.8948, 22.1948], [0.2671, 4.2312, 8.5785, 0.0, 11.2995, 8.1608, 8.7665, 1.6856, 18.0115, 3.9254, 7.7275, 3.0634, 4.6046, 5.1106, 1.3653, 1.8014, 2.042, 3.134, 16.5442, 7.9258, 11.4408, 12.9168, 1.4742, 6.5246, 16.8467, 6.1355, 4.1017, 8.0702, 37.8881], [11.8201, 2.064, 7.6798, 2.5578, 10.6718, 6.7658, 13.8848, 4.6234, 16.1798, 3.5194, 9.9424, 0.0, 0.8372, 0.6969, 2.8851, 1.3561, 0.0, 0.0, 29.9336, 23.5296, 8.7849, 8.7188, 0.0, 16.8349, 15.4564, 0.0, 0.6257, 2.4562, 32.5076], [12.8218, 4.3688, 14.4609, 7.1001, 2.804, 5.2313, 13.5036, 3.7083, 13.0507, 8.0539, 11.1729, 3.3282, 2.3157, 4.4436, 7.8517, 8.8492, 13.8082, 18.2848, 11.8942, 4.0824, 8.8605, 16.1924, 1.0078, 8.9681, 6.0088, 24.8851], [15.8269, 4.6096, 14.4609, 4.5423, 4.1432, 13.8803, 9.9644, 1.9023, 12.6691, 5.7866, 5.2665, 2.0327, 2.0286, 5.6681, 1.9578, 2.1657, 0.0, 17.9293, 13.9939, 13.9946, 11.4098, 4.6494, 14.0157, 7.1966, 3.7939, 5.8744, 12.851, 26.6786], [4.6746, 6.1232, 14.2158, 0.0, 2.7203, 9.5557, 10.8355, 11.2935, 10.6848, 1.7597, 8.5151, 5.049, 12.5902, 12.9159, 3.3746, 0.0, 0.0, 2.3706, 10.0804, 13.0651, 19.715, 12.4324, 6.3504, 16.8349, 5.8064, 0.0, 2.8156, 5.9211, 30.9382], [14.2909, 6.3812, 4.902, 7.7004, 7.7423, 8.0586, 0.0, 17.3246, 5.8205, 0.0, 3.0104, 3.7674, 7.3407, 1.8032, 3.7444, 0.9702, 3.9778, 18.391, 14.4893, 21.4515, 13.9394, 6.9552, 15.224, 14.3933, 2.2971, 3.476, 10.1317, 25.3335], [6.1438, 3.1304, 32.5983, 3.8367, 5.1057, 14.4382, 5.3905, 7.2962, 16.7904, 6.7003, 9.401, 5.0232, 10.0354, 3.5549, 5.4446, 7.3529, 22.0846, 12.5698, 14.0967, 8.2345, 3.0618, 9.9077, 8.0144, 0.0, 0.0, 8.1141, 26.9028], [3.4317, 14.2987, 3.267, 9.1504, 7.0214, 7.411, 6.2017, 10.7787, 11.8818, 10.3606, 0.4379, 7.1852, 0.0, 35.474, 8.0496, 21.0429, 9.9567, 5.5188, 21.2652, 15.62, 4.9499, 2.1204, 0.4386, 47.7525], [23.5733, 6.0888, 18.4642, 9.1728, 13.3083, 18.2745, 11.4345, 3.01, 15.1114, 9.4075, 13.5847, 1.6074, 0.966, 3.2057, 9.557, 3.3801, 0.2587, 1.2456, 25.3166, 15.9754, 9.5, 3.6059, 0.2646, 10.391, 2.5352, 0.4891, 5.1792, 4.693, 28.0238], [2.6712, 6.192, 29.8205, 4.4982, 3.9758, 11.2995, 15.9539, 0.0, 22.7434, 17.6645, 8.2197, 7.4884, 9.8803, 9.1448, 4.1349, 3.5291, 8.0555, 5.6654, 10.0804, 16.5946, 0.0, 11.6251, 0.0, 4.9135, 25.1065, 36.9914], [3.8065, 1.892, 25.8172, 0.0, 14.6475, 11.0205, 2.7225, 22.8038, 2.3659, 21.996, 0.886, 0.0, 4.3792, 4.2279, 0.0, 6.9423, 0.0, 7.6181, 3.3437, 27.4783, 6.5122, 35.8447, 36.7192, 0.0, 7.4386, 10.8773, 23.3158], [8.2807, 4.816, 22.4675, 8.4231, 9.5, 15.1357, 9.311, 4.1418, 0.5342, 4.0946, 7.9244, 6.8832, 6.8442, 11.753, 15.7035, 9.0675, 9.3306, 0.0, 5.7056, 19.4684, 14.4893, 27.5805, 15.2849, 5.8968, 3.3025, 8.4233, 30.0415], [9.1489, 2.0812, 9.6406, 5.0715, 5.3568, 4.1152, 19.9287, 0.0, 19.2326, 13.4345, 8.8596, 3.2903, 0.0, 2.3695, 3.4261, 5.1207, 0.0, 0.0, 23.6236, 22.2912, 18.387, 17.653, 0.7938, 5.5579, 10.3043, 0.0, 9.9761, 9.2545, 68.1538], [6.6398, 3.587, 14.1261, 11.3838, 0.0, 5.7638, 4.0885, 6.44, 0.1012, 0.0, 0.0, 33.1654, 30.4027, 18.387, 18.6217, 4.0446, 22.6346, 39.0908, 0.0, 10.2542, 16.6229, 69.9473], [15.6933, 9.8556, 33.497, 6.8355, 13.9361, 21.9713, 14.2659, 8.8374, 22.9723, 12.0132, 8.8104, 3.911, 17.4524, 10.4535, 4.1989, 0.0, 0.0, 0.0, 25.3166, 31.8888, 17.8762, 31.0541, 5.4432, 26.0177], [27.5134, 5.246, 17.157, 6.6591, 15.7356, 14.9962, 20.4732, 6.5498, 15.5693, 8.6969, 11.5175, 3.8387, 0.9777, 2.9302, 6.0863, 2.679, 4.1897, 1.811, 5.0225, 21.2382, 23.1581, 27.3762, 19.9672, 4.9518, 13.6129, 19.7908, 6.669, 8.4467, 17.3686, 20.6255], [12.2875, 3.5948, 22.3041, 6.174, 9.9603, 18.972, 7.8952, 1.7097, 12.1349, 11.5733, 11.2222, 1.2608, 11.0124, 10.6393, 10.1237, 2.2669, 4.9804, 6.1475, 30.3183, 23.4058, 24.4138, 12.4862, 11.151, 20.8625, 12.5123, 1.2152, 4.0322, 4.7807, 54.0298], [11.9536, 1.634, 37.0101, 1.5876, 9.1652, 20.925, 19.0575, 7.0554, 21.4459, 11.9455, 3.6423, 7.5829, 0.6432, 19.1912, 13.0553, 5.1778, 2.0847, 2.7258, 13.621, 22.0846, 29.9693, 45.9675, 17.1148, 13.5324, 32.1395, 48.0049, 2.3564, 8.3772, 7.4123, 43.4929], [21.1693, 6.2092, 20.5067, 5.4684, 18.7488, 30.4808, 29.0763, 9.5598, 21.217, 13.6714, 7.9244, 4.5951, 3.0361, 6.8586, 5.2964, 7.3674, 6.7197, 5.8663, 33.3194, 35.604, 50.4621, 20.1287, 4.6494, 33.1866, 20.445, 2.7713, 8.7595, 23.509, 84.7438], [27.4466, 5.9684, 34.5591, 19.5804, 24.4822, 25.1797, 8.0041, 15.7483, 7.632, 4.8053, 6.5618, 19.349, 11.7852, 33.8693, 12.6224, 9.8771, 3.3264, 13.9023, 20.2379, 18.0187, 46.0697, 8.5574, 29.9754, 52.8408, 32.6302, 5.9725, 6.5001, 15.9212, 21.9706], [8.1472, 1.1352, 41.9938, 19.0512, 18.2885, 50.5688, 23.6313, 5.2013, 24.4987, 12.5885, 7.9736, 12.5184, 5.6606, 28.1106, 46.5529, 1.9062, 1.7002, 3.2894, 44.8618, 22.7866, 98.6769, 24.4881, 31.2228, 23.2789, 32.8756, 0.9485, 0.0, 16.4914, 86.7615], [55.0935, 14.9296, 89.7066, 52.5672, 42.98, 36.1305, 49.1139, 27.9328, 50.7528, 35.2274, 30.0242, 3.9144, 47.3984, 41.0706, 0.6955, 2.53, 8.0018, 0.0, 108.3811, 31.108, 0.756, 81.1138, 118.1721, 2.4157], [59.0335, 15.5316, 77.1248, 11.907, 36.7024, 35.991, 52.0542, 17.0486, 49.4554, 30.0161, 27.0218, 5.2232, 17.227, 15.7499, 15.4045, 19.1066, 71.1018, 67.4309, 92.0372, 58.7176, 22.3398, 47.6856, 74.0927, 7.3804, 26.7652, 22.4125, 101.3339], [68.5831, 14.792, 79.1673, 42.8211, 37.4139, 55.3815, 52.2176, 18.2767, 46.3262, 24.5678, 31.2547, 14.1447, 16.8084, 21.3716, 11.9011, 13.9656, 2.2903, 66.0231, 60.1862, 83.6608, 43.3251, 12.0204, 36.5697, 32.9573, 18.7325, 18.3185, 28.1143, 160.52]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

