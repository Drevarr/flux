created: 20230220220953000
creator: Drevarr
modified: 20230705163519776
modifier: drevarr
tags: ChartData
title: 202302202209_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Kira Dragonblaze", "Demon Sekhmet", "Ryvalia Fazebringer", "Smol Daddy Tika", "Xanvias Tseli", "Mistwalker Caelon", "Kahless The Drunk", "Zaylen Harker", "Xyntharos", "Ravioli Fetabringer", "Sygaldry Verdandi", "Blanco Padre Guard", "Veron Blackburn", "Ace Hammers", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Dragonhunter", "Berserker", "Chronomancer", "Berserker", "Berserker", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Herald", "Vindicator", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 2.011, 43.4408, 0.0, 0.0, 0.0, 0.1914, 0.0, 0.0, 0.187], [0.0, 16.6622, 23.1684, 1.1567, 0.0, 1.2243, 1.1867, 0.0, 1.2096, 2.3693], [0.7904, 8.0438, 26.6437, 1.0433, 1.0475, 1.0907, 0.0, 0.0, 1.3347, 1.06, 0.257, 0.0, 1.0349, 1.0643, 0.0, 0.0, 0.0, 1.0449, 1.0468, 1.08, 0.0, 2.1216, 1.0575, 2.1344, 0.7791, 1.0711, 0.0], [0.0, 6.3202, 19.1139, 1.701, 1.3885, 0.0, 0.0, 0.0, 1.877, 1.8705, 1.8421, 0.0, 0.0, 1.8383, 0.272, 1.84, 1.0823, 1.701, 1.6474, 0.0, 1.5287, 1.8034, 1.8612, 1.838, 0.0, 3.6369, 0.0, 2.7683], [1.3338, 10.3421, 28.3813, 0.5216, 0.0, 1.0907, 1.8757, 0.266, 1.5433, 2.1199, 1.071, 1.0718, 3.4742, 1.0643, 0.0, 2.2315, 0.0, 0.5184, 1.0665, 3.1824, 1.0575, 2.3123, 2.1036, 1.669, 0.0], [0.0, 15.8004, 35.911, 0.8845, 1.8514, 1.714, 1.9906, 0.0, 1.9604, 3.9904, 0.9853, 1.9958, 5.0266, 0.9868, 1.088, 0.9788, 0.9379, 1.0206, 0.8408, 1.9872, 0.9954, 6.0466, 2.4534, 3.0238, 2.9606, 2.0426, 1.1197, 1.9569], [0.0, 29.3026, 71.822, 0.0, 0.0, 0.0, 0.0, 3.0448, 0.1247, 0.7283, 0.0, 3.8438, 0.4644, 0.0, 0.0, 0.0, 0.0, 1.6817, 0.0, 0.0, 1.4851, 0.0, 2.1344, 0.0, 0.0, 0.0, 1.4319], [0.0, 16.9495, 68.926, 2.3814, 2.2411, 2.315, 2.2585, 2.1679, 3.5036, 2.8681, 2.2705, 2.0328, 6.8006, 2.6703, 1.0962, 2.0346, 2.2842, 2.145, 2.1168, 2.133, 4.9858, 2.2842, 2.5495, 2.4931, 1.1957, 0.0, 3.3888], [0.0, 35.3354, 92.0944, 0.0, 2.0462, 0.0, 2.2585, 0.0, 8.05, 5.6739, 3.8984, 2.0328, 9.0922, 0.0, 2.0358, 0.0, 2.1622, 2.4624, 2.8796, 14.1086, 4.8645, 3.4981, 7.1677, 2.1672, 2.8161], [0.0, 46.5394, 92.0944, 1.5196, 0.2923, 0.0, 1.0336, 0.0, 0.0, 6.2973, 0.7283, 2.4024, 7.8355, 3.5023, 0.782, 1.2919, 1.3708, 1.2636, 0.9953, 0.7344, 4.4793, 10.608, 5.7951, 6.0476, 3.428, 1.395, 2.2915, 2.7206], [0.0, 32.1754, 112.3667, 0.8845, 2.6552, 0.1781, 1.5695, 0.0, 3.7122, 3.1175, 2.399, 1.811, 4.8787, 1.7028, 2.499, 3.2103, 1.6739, 3.3777, 2.9515, 0.0432, 2.3108, 9.0168, 1.4805, 4.6839, 1.5582, 0.0, 1.2499, 4.4866], [29.0153, 119.8965, 0.0, 3.4591, 0.0, 2.4882, 0.0, 4.3796, 2.307, 0.0, 3.4742, 13.0099, 3.8507, 1.9183, 1.8326, 2.2113, 2.2994, 5.1408, 2.4529, 10.8202, 5.499, 3.4388, 0.0, 2.9145, 2.0572, 4.2002], [0.0, 26.4298, 104.2578, 2.5175, 2.436, 2.3373, 2.4882, 2.5004, 4.3378, 7.0455, 8.0111, 2.9568, 11.088, 6.4822, 2.6622, 2.2944, 2.3085, 3.0373, 0.0, 2.5951, 16.3363, 2.2842, 4.7432, 8.8817, 3.313, 2.0311, 6.3004], [0.0, 67.2235, 210.2532, 0.0, 0.7508, 0.2494, 5.2693, 1.1458, 5.6918, 0.0, 0.0, 5.9899, 3.4921, 0.0, 4.5989, 2.1168, 5.2614, 0.6365], [1.6302, 81.3002, 112.3667, 2.6536, 1.9244, 0.8236, 4.0577, 0.0, 3.1282, 10.8489, 1.1138, 3.1786, 17.8147, 4.0248, 4.3848, 0.6638, 2.8917, 1.5787, 4.0176, 2.3463, 25.7774, 3.807, 7.1148, 14.8808, 5.0318, 0.3906, 2.1479], [0.0, 64.0634, 163.3372, 4.0144, 2.3873, 2.4041, 6.7373, 5.7977, 12.5947, 7.5827, 4.6939, 12.4925, 5.6502, 0.0, 5.3636, 0.0, 3.4992, 1.7332, 5.9616, 2.4529, 25.247, 9.5175, 9.4864, 12.6993, 7.5477, 2.1743, 7.1595], [0.0, 49.9867, 144.2233, 4.9216, 4.1412, 4.9862, 7.0818, 2.7265, 10.3858, 15.9616, 5.5264, 5.6549, 19.9584, 5.2052, 2.754, 4.5414, 3.9971, 7.0227, 4.5302, 2.592, 4.586, 29.172, 7.5294, 11.1465, 11.0632, 5.8289, 2.7863, 6.3958]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

