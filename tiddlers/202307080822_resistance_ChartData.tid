created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Emobilized", "Govinda Ektar", "Geradenil", "Kittendoo", "Charr Surethang", "A\u00fcrora Windrunner", "Twinks R Us", "Gestern Yesteryear", "Aronorf Xideliesi", "Shaca Booey", "Ateriuz"];
const professions = ["Vindicator", "Vindicator", "Vindicator", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.8418, 19.9201, 0.0, 0.0, 0.0, 0.0, 34.9339, 0.0, 0.0, 0.0, 0.0, 20.0346, 0.0, 70.6275, 0.0, 0.0, 19.8171], [41.2218, 26.8484, 9.2237, 4.589, 3.8297, 8.5095, 0.0, 4.624, 27.577, 13.6536, 4.5979, 41.6992], [0.0, 20.827, 40.6928, 20.6903, 0.0, 0.0, 0.0, 19.4902, 0.0, 20.8725, 20.9009, 0.0, 21.1088, 0.0, 0.774, 0.0, 19.0634, 32.7369], [7.4865, 19.5455, 18.8158, 21.7899, 98.6068, 48.2682, 0.0, 10.1455, 0.0, 69.8535], [14.8619, 61.2766, 83.9433, 9.9383, 0.0, 35.7585, 0.0, 25.9644, 0.0, 37.998, 15.1767, 0.0, 64.9193, 16.2347, 0.0, 0.0], [0.0, 73.5319, 39.9952, 0.0, 0.0, 0.0, 20.9035, 43.4988, 20.951, 60.8465, 61.9619, 0.0, 25.7242, 0.0, 18.189, 0.0, 13.9084, 14.944], [79.3245, 51.784, 115.8775, 4.4956, 12.7462, 6.448, 19.497, 58.403, 135.355, 32.4724, 0.0, 26.237], [17.3694, 46.1168, 97.9726, 0.0, 18.468, 16.523, 18.7937, 52.7381, 19.5188, 126.6898, 37.077, 0.0, 0.0, 19.4184, 19.4468, 19.6412, 11.0246, 30.2379], [166.414, 47.6371, 18.0792, 37.3085, 18.2118, 68.519, 2.3324, 148.8273, 67.9078, 8.9661, 21.0048, 11.3386, 52.5353, 5.5194, 39.9898, 21.5164], [281.2137, 83.5912, 171.9947, 0.0, 0.0, 5.921, 22.8677, 6.0022, 26.2297, 117.392, 0.0, 0.0, 0.0, 159.1537, 0.0, 1.965, 19.3173], [231.8576, 86.5665, 209.6645, 35.2576, 7.8991, 78.306, 53.8107, 67.7772, 52.2548, 285.5737, 110.4704, 0.0, 20.097, 0.0, 214.1078, 0.0, 73.5231, 26.9392]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

