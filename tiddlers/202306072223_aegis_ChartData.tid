created: 20230607222341000
creator: Drevarr
modified: 20230705163534207
modifier: drevarr
tags: ChartData
title: 202306072223_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Uneeta Healah", "Ryvalia Fazebringer", "Belvyn Brightblade", "Blanco Padre Guard", "Sub Train", "Crusader Siolith", "Gabe Malhorn", "Drevarr Moonwillow", "Rafaellagabriela", "Solus Sanctus", "Sygaldry Verdandi", "Johosh The Great", "Koralia Danai", "Etcherii"];
const professions = ["Scrapper", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 6.67, 362.361, 5.2096, 8.244, 6.0729, 0.0, 13.2646, 10.8499, 2.9511, 0.0, 16.0384, 0.4048, 44.071], [39.483, 15.042, 280.317, 22.5315, 49.5739, 1.3381, 0.0, 33.1366, 0.0, 15.7394, 27.763, 3.7674, 31.6112, 5.447], [64.206, 11.5, 512.775], [39.9442, 83.214, 443.2655, 52.6821, 24.2923], [382.872, 7.6842, 77.1638, 31.7711, 0.0, 44.24, 0.0, 92.8109, 0.0, 14.7646, 47.9136, 40.9349], [26.937, 35.19, 549.239, 51.5099, 67.9306, 7.2737, 0.0, 41.7312, 0.1523, 19.3748, 0.0, 4.1083, 0.0, 9.2984], [650.6545, 0.0, 69.5794, 38.2557, 0.0, 22.6292, 25.5196, 21.2567, 0.0, 8.2883, 93.7664, 101.732], [17.0663, 106.26, 868.299, 31.8437, 103.105, 21.3408, 0.0, 42.5509, 11.5479, 37.2527, 0.0, 11.7686, 9.6784, 32.2967], [1528.0695, 251.3632, 70.3488, 65.635, 12.4992, 39.1727, 10.685, 100.6806, 36.8635, 5.2385, 46.0368, 78.2384], [57.4718, 113.528, 2070.4715, 140.008, 149.0515, 88.211, 0.0, 76.7308, 38.7172, 53.6763, 0.0, 26.7306, 65.504, 58.8164], [327.5797, 150.65, 2070.4715, 75.4741, 91.4534, 49.2692, 0.0, 36.9868, 4.9745, 50.212, 34.0315, 4.0006, 60.168, 78.4035], [9.7785, 50.14, 2685.8015, 124.9653, 187.7434, 34.6188, 0.0, 69.4526, 30.8113, 165.2633, 0.0, 15.2311, 86.296, 103.7677], [371.3985, 101.89, 2642.5005, 167.9445, 213.2448, 49.0633, 11.2392, 55.5671, 32.7021, 13.6009, 0.0, 45.442, 51.6672, 136.8898], [566.6917, 158.286, 2803.17, 130.5005, 208.848, 58.7044, 0.0, 59.2931, 59.7953, 101.2366, 0.0, 43.9889, 134.9456]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

