created: 20230702223827000
creator: Drevarr
modified: 20230705163541046
modifier: drevarr
tags: ChartData
title: 202307022238_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Ggclaudx", "Artakama Nahid", "Jello Jawn", "Lucky Leipreach\u00e1n", "Verna Mae", "Tuandha Lan", "Tacomelon M", "Ima Lou", "Newtype Khan", "Spirita Demon", "Demon Staph", "St\u00e1rless", "Zayde Sunsabre"];
const professions = ["Holosmith", "Tempest", "Virtuoso", "Scrapper", "Renegade", "Herald", "Virtuoso", "Druid", "Spellbreaker", "Druid", "Druid", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.1821, 10.4328, 105.1266, 185.004, 72.0846, 23.5006, 6.1231, 237.9717, 21.881, 88.8624, 55.3462, 82.775, 32.5392, 135.7339], [23.7733, 28.5812, 23.4544, 15.4685, 22.9926, 61.9403, 52.488, 0.0, 0.0, 25.0047, 0.0, 25.1647, 32.3365, 0.0, 32.2056, 30.6528, 70.8435, 24.3356, 0.0, 0.0, 0.0, 29.3075, 32.5296, 32.508, 25.0193, 0.0, 56.88, 0.0, 48.8268, 0.0, 30.4281, 60.8404, 15.3027, 0.0, 27.736, 0.0, 0.0, 0.0, 0.0, 30.8935, 0.0, 0.0, 30.8599, 54.2712, 23.3963, 0.0, 31.0651, 0.0, 61.0285, 31.14], [0.0, 98.3304, 22.8719, 32.1888, 103.7502, 103.8096, 9.7146, 26.435, 3.9539, 126.2025, 69.304, 256.4892, 43.6024, 103.9654, 33.6024, 213.3203], [107.8904, 44.8202, 140.712, 15.8387, 87.551, 47.952, 21.17, 30.1644, 48.3971, 0.0, 56.7637, 0.0, 90.3168, 15.9494, 111.5478, 159.6067, 0.0, 27.1026, 11.8661, 14.6815, 142.6266, 0.0, 159.4296, 0.0, 54.4659, 0.0, 118.3149, 0.0, 0.0, 0.0, 0.0, 36.3436, 52.5874, 0.0, 17.3464, 110.5921, 0.0, 0.0, 0.0, 5.0701, 0.0], [64.7193, 43.8272, 24.7574, 11.879, 135.1753, 56.052, 9.2254, 18.8748, 28.4275, 44.2611, 0.0, 83.412, 41.2581, 79.6068, 41.2171, 4.0488, 98.164, 97.4592, 44.226, 7.3874, 105.3702, 26.8191, 119.988, 14.3297, 39.5333, 12.152, 21.5424, 39.5136, 3.9692, 51.3022, 8.5644, 20.065, 13.9964, 44.0048, 52.2766, 27.6826, 13.065, 67.9606, 16.008, 3.9897, 0.0, 116.9869], [121.0213, 260.3267, 228.9965, 0.0, 0.0, 0.0, 171.3668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.6805, 350.4917, 104.992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 235.5543, 0.0, 0.0, 0.0, 0.0, 184.6251, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.8309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [109.8358, 95.1872, 135.6739, 32.5459, 265.4586, 84.294, 7.9954, 6.1608, 69.4134, 38.5954, 75.529, 74.8028, 11.8843, 95.6592, 15.9771, 142.4241, 169.6918, 0.0, 12.7764, 25.0152, 109.6198, 147.3552, 62.748, 19.6053, 11.1024, 178.3899, 21.1147, 258.1524, 31.7654, 96.1514, 8.1809, 183.2787], [132.6714, 384.879, 96.606, 32.985, 19.7713, 45.2687, 98.2132, 50.1907, 81.769, 161.7336, 55.6015, 291.8097, 308.0322, 0.0, 13.7088, 97.5568, 127.7208, 46.116, 10.1072, 5.1075, 238.3983, 37.2062, 221.2056, 24.8338, 93.3702, 0.0, 254.7221], [67.368, 103.5478, 270.3456, 105.5376, 61.5615, 30.2801, 269.2557, 166.3011, 37.3259, 315.7105, 48.1357, 72.6426, 110.176, 85.5566, 240.9943, 33.7824, 99.1372, 240.8351, 177.6502, 81.5585, 18.3322, 126.7488, 62.6292, 379.6912], [33.8138, 0.0, 356.3532, 269.5572, 37.8705, 153.4317, 0.0, 330.962, 140.1498, 8.9956, 258.5957, 13.7, 38.6745, 0.0, 98.5547, 100.6526, 288.2359, 30.6893, 29.3962, 206.6337, 435.8286, 86.1754, 20.4191, 86.4302, 39.2022, 428.7017], [177.3234, 120.3194, 210.025, 67.4912, 443.9417, 167.94, 82.6082, 41.0672, 83.4813, 123.7761, 111.6968, 189.2428, 8.9813, 317.8728, 86.3374, 446.7645, 357.3612, 54.2215, 34.0649, 35.7336, 123.6664, 192.8448, 75.033], [206.874, 97.5712, 151.6094, 102.8804, 82.2253, 39.8866, 244.5408, 102.7022, 256.2651, 251.3952, 76.058, 95.5416, 121.3186, 249.2208, 166.2822, 57.1342, 196.236, 206.6348, 365.5476, 70.2891, 114.4944, 87.2449, 100.7276, 180.8541, 45.6122, 129.2031, 0.0, 95.5989, 94.8199, 90.5383, 224.8949, 62.4845, 57.486, 168.2554, 324.2604, 92.008, 53.6564, 99.0662, 67.3829, 351.2425, 76.356], [220.4197, 215.575, 270.5213, 95.0618, 615.5186, 220.05, 135.5979, 93.9551, 167.5234, 187.1563, 167.7055, 25.6435, 344.8872, 175.6377, 638.6562, 655.6007, 15.3595, 86.8085, 82.1856, 229.724, 272.0952, 203.0616, 45.8258, 36.3834, 595.0359, 478.8274, 661.716, 79.9134, 207.3017, 37.107, 191.6937, 201.5811, 86.6754, 150.1789, 0.0, 103.9615, 120.2817, 56.4387, 80.556, 342.1286, 86.3309, 111.4444, 399.0168, 188.2897, 42.2908, 154.7424, 106.52, 639.297, 216.54]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

