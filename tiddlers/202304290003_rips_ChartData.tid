created: 20230429000309000
creator: Drevarr
modified: 20230705163527297
modifier: drevarr
tags: ChartData
title: 202304290003_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Hyde En Sikh", "Arriasa", "Maaaathexxs", "Oo Dads Mad", "Panther B Me", "Endless Endings", "Morv\u00e4rth", "Blancooo Padreee", "Primal Clone", "Smol Gluvs", "Demon Sekhmet", "Rina Of Theros", "Tika Rucola", "Newtype Khan", "Be\u00eb"];
const professions = ["Chronomancer", "Druid", "Scourge", "Spellbreaker", "Scourge", "Spellbreaker", "Reaper", "Spellbreaker", "Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Chronomancer", "Spellbreaker", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0618, 0.0311, 0.0141, 0.0536, 0.0403, 0.0511, 0.0, 0.0493, 0.0, 0.0, 0.0423, 0.0127, 0.0152, 0.0391], [0.0281, 0.0259, 0.0563, 0.0858, 0.0073, 0.0, 0.0493, 0.0098, 0.0, 0.0141, 0.0, 0.0, 0.0717], [0.0449, 0.0155, 0.1831, 0.0, 0.0683, 0.0584, 0.0396, 0.2465, 0.0, 0.2958, 0.0127, 0.0076], [0.0562, 0.1503, 0.507, 0.0, 0.1769, 0.073], [0.0281, 0.0777, 0.2958, 0.0, 0.1856, 0.0219, 0.0396, 0.0352, 0.0, 0.0, 0.0, 0.0253, 0.0, 0.0404], [0.1664, 0.0, 0.0, 0.2042, 0.0, 0.0, 0.0704, 0.0, 0.0227, 0.1356], [0.0787, 0.1244, 0.5775, 0.0, 0.2102, 0.0365, 0.0297, 0.1901, 0.049, 0.0], [0.1124, 0.1347, 0.3099, 0.0, 0.2504, 0.0, 0.0, 0.1127, 0.0294, 0.0, 0.0, 0.1519, 0.0227, 0.0756], [0.2191, 0.1917, 0.7887, 0.1033, 0.0949, 0.0495, 0.2254, 0.0098, 0.0063, 0.0282, 0.1646, 0.0379, 0.0782], [0.1517, 0.1865, 0.8169, 0.0, 0.1103, 0.0511, 0.0099, 0.1972, 0.0098, 0.0, 0.1127, 0.0886, 0.0, 0.1147], [0.1966, 0.2487, 0.3239, 0.0, 0.1786, 0.1606, 0.1188, 0.1901, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1434], [0.1685, 0.2902, 0.4085, 0.0357, 0.1384, 0.1825, 0.1287, 0.2535, 0.0294, 0.0063, 0.2113, 0.1392, 0.0152, 0.1252], [0.2472, 0.114, 0.2958, 0.0536, 0.1804, 0.073, 0.0297, 0.3451, 0.0, 0.0506, 0.0986, 0.0127, 0.0455, 0.2308], [0.2022, 0.3057, 0.6761, 0.0, 0.31, 0.0073, 0.0594, 0.1901, 0.0392, 0.0, 0.0, 0.0886, 0.0303, 0.1695], [0.427, 0.3575, 1.0, 0.0179, 0.4676, 0.1314, 0.2079, 0.2254, 0.098, 0.0443, 0.3099, 0.0759, 0.0152, 0.3651]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

