created: 20230129012318000
creator: Drevarr
modified: 20230705163518282
modifier: drevarr
tags: ChartData
title: 202301290123_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Xanvias Einzbern", "Aaron Mcwrath", "Phrosennx", "Leafy Boy Belkins", "Aronorf Xideliesi", "Tootsie Pop Bringer", "Vopiscus Zergherdus", "Ace Peppers", "Newtype Khan", "Mike The Archmagus", "Venomina The Fierce", "Joh Oshi", "Sola Machina", "Cpt Z Brannigan", "Drevarr Moonwillow"];
const professions = ["Berserker", "Deadeye", "Weaver", "Scrapper", "Firebrand", "Scrapper", "Scrapper", "Scrapper", "Spellbreaker", "Weaver", "Spellbreaker", "Druid", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.1126, 142.1007, 51.6618, 0.0, 78.1337, 0.0, 128.4005, 37.1756, 23.9605, 0.0, 0.0, 0.0], [0.0, 148.5063, 9.1611, 52.4892, 69.3515, 73.6052, 104.622, 74.2592, 32.216], [307.6643, 17.3917, 3.984, 4.2099, 73.7273, 67.7082, 27.8972, 63.5688], [73.9737, 67.0514, 121.0475, 378.7034], [24.7901, 89.961, 114.8175, 71.2978, 82.8036, 0.0, 292.6699, 5.7936, 0.0, 48.816, 0.0, 0.0, 0.0, 19.0162, 54.2946, 0.0], [7.397, 125.4273, 71.1747, 64.3765, 56.457, 46.0469, 137.2378, 219.674, 0.0, 10.56, 11.9434, 70.4718, 20.8313, 26.487], [303.3191, 100.6747, 109.464, 0.0, 9.8947, 70.4256, 238.1302, 0.0, 183.8786], [9.6247, 112.8987, 69.9111, 72.6101, 98.8346, 47.5973, 197.1493, 243.9347, 23.3505, 30.072, 10.0198, 85.3426, 58.7275, 25.0351], [117.1246, 47.6652, 192.1644, 133.2814, 215.4427, 0.0, 274.2156, 42.9692, 0.0, 7.824, 0.0, 37.122, 49.4158, 0.0, 0.0], [48.042, 71.5878, 80.9209, 167.4194, 106.745, 259.1402, 337.96, 0.9853, 26.664, 7.9618, 7.9974, 87.5368, 122.3222, 31.8635, 62.0384], [111.7988, 80.3495, 384.4217, 520.217, 9.4622, 102.96, 106.7151, 197.5316, 144.7855, 148.955], [78.3401, 162.5892, 113.0193, 98.6746, 203.4543, 150.8152, 416.9117, 408.3281, 47.092, 12.264, 9.085, 57.7071, 132.258, 18.1649, 139.6159], [210.9442, 191.0376, 192.6747, 217.4185, 355.3306, 175.6603, 395.5982, 288.8351, 63.8425, 67.008, 0.0, 131.6641, 252.5404, 42.9624, 105.4379], [99.4745, 305.679, 119.6775, 147.9732, 243.253, 68.4889, 617.0501, 812.1903, 14.076, 82.992, 91.3552, 279.321, 137.7196, 84.8761], [92.3059, 163.5312, 168.1317, 148.3849, 328.9143, 230.7383, 557.1385, 539.529, 28.0894, 56.736, 36.059, 21.6902, 145.2726, 290.7044, 160.8839, 203.2632]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

