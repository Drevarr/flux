created: 20230310230833000
creator: Drevarr
modified: 20230705163521669
modifier: drevarr
tags: ChartData
title: 202303102308_shockingOut_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Mac Chiato", "Alatreon", "Venomina The Siren", "Zadie Miststep", "High Sorcer Baradun", "Zefirokai"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Shocking Aura per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[32.175, 0.0, 0.0, 38.318, 0.0, 36.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.7892, 0.0, 0.0, 23.5832, 0.0, 58.3344, 0.0, 0.0, 37.13, 0.0, 0.0, 0.0, 0.0, 0.0, 31.6394], [73.899, 25.3, 20.0445, 0.0, 128.8625, 19.5615, 20.0417, 0.0, 0.0, 19.901, 0.0, 0.0, 19.9233, 19.8693, 5.251, 7.2587, 0.0, 5.3582, 19.7672, 0.0, 26.9412, 35.6074, 0.0, 19.9404, 39.528, 20.907, 0.0, 0.0, 59.6736], [60.093, 168.3738, 89.7644, 55.706, 46.1058, 383.5375], [33.5115, 88.8237, 85.008, 108.514, 16.0862, 295.85, 39.3435, 199.6913, 32.4387, 59.19, 0.0, 19.9514, 33.3437, 35.9635, 34.2912, 19.9056, 39.3921, 0.2895, 0.0, 20.1204, 15.0641, 40.1143, 114.88, 39.5428, 79.794, 0.1566, 48.222, 36.432, 32.2371, 54.5472, 55.1359], [88.1595, 130.1202, 77.418, 65.6075, 18.9267, 292.0375, 116.2665, 117.4911, 0.0, 25.7439, 36.0263, 19.9514, 35.6448, 78.2465, 28.6653, 59.5109, 35.4901, 19.8528, 0.0, 20.1204, 0.0, 92.3004, 53.3298, 37.0454, 122.5868, 19.9404, 79.542, 35.9352, 33.3081, 91.1338, 19.9534], [19.9485, 133.4529, 107.5756, 158.1825, 40.2753, 765.55, 0.0, 280.4391, 16.0632, 39.7251, 19.901, 53.1062, 19.9233, 19.9586, 91.2912, 17.8124, 0.0, 55.8414, 15.9707, 0.0, 18.531, 64.368, 20.0376, 7.9254, 32.9866, 51.4063], [20.0475, 140.1183, 76.912, 152.0645, 32.0827, 875.35, 59.22, 233.8203, 20.079, 46.4227, 0.0, 19.9514, 47.2406, 47.2829, 19.9586, 36.036, 0.0, 19.8528, 0.0, 40.2408, 18.3284, 84.5774, 76.1262, 78.7829, 102.6382, 25.0038, 56.43]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

