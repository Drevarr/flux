created: 20230412220340000
creator: Drevarr
modified: 20230705163525341
modifier: drevarr
tags: ChartData
title: 202304122203_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Konztantin\u00eb", "Demon Staph", "Xyntharos", "Newtype Khan", "Arcanophage Farra", "Mac Chiato", "Zadie Miststep", "Grasszanine", "Xanvias Einzbern", "K\u00f4sair", "Fribble Bibble", "Jeckyll Mbs", "Panther B Me", "Smol Gluvs", "Lucas Ryn", "Koralia Danai", "Eibh\u00ebar", "Johoshua", "Drevarr Moonwillow", "Bella Sassy"];
const professions = ["Vindicator", "Druid", "Vindicator", "Spellbreaker", "Spellbreaker", "Tempest", "Tempest", "Spellbreaker", "Berserker", "Berserker", "Scrapper", "Berserker", "Reaper", "Reaper", "Firebrand", "Firebrand", "Chronomancer", "Scrapper", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[477, 318, 395, 299, 707, 7692, 1088, 1465, 6347, 8687, 222, 8938, 274], [225, 370, 250, 230, 417, 4989, 242, 458, 263, 2148, 466, 140, 8186, 3259, 374, 884, 425, 341, 469], [220, 421, 278, 295, 388, 4800, 589, 194, 654, 5618, 416, 191, 6605, 356, 364, 1284, 401, 649, 377], [505, 290, 207, 253, 423, 4949, 644, 376, 925, 4805, 387, 113, 4156, 556, 365, 1401, 245, 524, 423], [3041, 439, 263, 250, 504, 4949, 323, 440, 695, 5648, 561, 84, 318, 8596, 448, 3137, 726, 1094, 454], [244, 327, 223, 182, 251, 4714, 289, 278, 559, 994, 132, 313, 1179, 445, 2382, 467, 856, 809], [657, 354, 269, 272, 297, 6729, 209, 365, 562, 596, 393, 5504, 1114, 376, 566, 469, 591, 337], [197, 227, 228, 176, 259, 4194, 336, 133, 636, 508, 577, 146, 3051, 1073, 440, 1074, 650, 693, 343], [205, 273, 322, 230, 336, 5005, 575, 288, 425, 6130, 338, 113, 376, 1098, 427, 461, 526, 400, 605], [268, 247, 244, 218, 237, 5550, 225, 431, 1125, 539, 338, 485], [232, 1201, 302, 268, 388, 5637, 292, 678, 5925, 406, 108, 9708, 364, 343, 1028, 1686, 697, 448], [1056, 213, 229, 230, 500, 5244, 671, 3757, 7351, 120, 5330, 512, 459, 307, 1768, 841, 396], [643, 120, 4274, 518, 384, 426, 438, 641, 544], [690, 211, 3234, 7099, 283, 421, 435, 584, 472], [241, 180, 185, 220, 250, 5482, 382, 620, 400, 370, 196, 2973, 1127, 364, 391, 384, 572, 4981], [205, 318, 283, 230, 321, 5013, 254, 315, 7477, 387, 131, 229, 1110, 347, 844, 492, 510, 5600], [285, 209, 188, 173, 342, 3106, 431, 671, 658, 244, 231, 159, 4441, 1473, 372, 578, 294, 810, 450], [185, 230, 174, 180, 375, 3527, 203, 474, 231, 7182, 314, 127, 3127, 1196, 400, 1256, 330, 470, 219], [250, 176, 173, 177, 253, 527, 211, 244, 614, 364, 234, 110, 384, 1038, 362, 717, 327, 658, 208], [168, 258, 180, 163, 242, 3536, 204, 167, 2776, 1213, 250, 163, 201, 964, 226, 328, 277, 269, 312]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

