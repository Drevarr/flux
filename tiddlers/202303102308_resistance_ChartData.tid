created: 20230310230833000
creator: Drevarr
modified: 20230705163521658
modifier: drevarr
tags: ChartData
title: 202303102308_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Primal Clone", "K\u00f4sair", "Ryvalia Fazebringer", "Zefirokai", "Sub Train", "Ark Darkness", "Kiloak", "Raelyn Sunray", "K\u00f4sair", "Blanco Padre Guard", "Koralia Danai", "Zaylen Harker", "Bella Sassy", "Viral Marketing", "Aronorf Xideliesi", "Riann Swordbreak"];
const professions = ["Chronomancer", "Chronomancer", "Berserker", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[28.3635, 70.5663, 32.2828, 35.0175, 21.6775, 249.3375, 6.993, 59.3991, 26.9505, 7.4929, 7.0007, 11.5571, 20.4845, 6.9034, 23.3966, 14.586, 6.7999, 13.3179, 2.964, 21.2139, 7.5563, 26.168, 25.007, 23.5743, 21.0425, 5.2461, 17.604, 15.8562, 6.1047, 0.0, 0.0], [19.107, 47.2374, 42.504, 32.6025, 15.5779, 314.9125, 6.5205, 36.8884, 14.68, 9.5859, 5.2702, 5.8737, 18.2736, 14.2382, 14.9131, 12.8014, 6.4688, 6.4935, 3.2194, 16.5848, 4.8602, 21.1444, 32.1913, 21.2282, 27.027, 12.3714, 20.628, 20.1204, 8.1824, 12.0912, 30.0233], [0.0, 0.0, 0.0, 0.0, 0.0, 885.2625], [28.4625, 52.7436, 47.3616, 28.5775, 5.6212, 339.3125, 7.4655, 45.8927, 19.1866, 14.9859, 7.4727, 4.4231, 20.0333, 19.8979, 23.6645, 18.121, 10.7122, 7.4448, 5.4994, 13.1949, 6.9034, 38.7647, 43.175, 19.1849, 37.7734, 7.1253, 22.356, 16.6014, 10.3459, 17.2172, 30.4584], [27.423, 81.7236, 56.0648, 35.903, 4.9036, 382.0125, 7.2765, 48.9425, 25.6119, 21.7253, 5.4013, 13.2692, 25.8538, 6.7003, 29.6029, 3.3634, 7.5451, 15.51, 4.9704, 13.5229, 0.0, 26.8428, 50.7738, 19.2227, 34.0412, 22.0545, 21.762], [13.8915, 160.1887, 65.7253, 7.5767, 53.9083, 37.0255, 50.6698, 5.7105, 95.551, 0.0, 0.0, 14.3726, 7.4054, 87.152, 6.4077, 76.3296, 90.0112, 61.6414, 20.9781, 61.0479, 28.728, 35.4384, 31.3375, 26.6867, 106.1693], [272.2125, 0.0, 143.1968, 26.6381, 31.6462, 51.3125, 46.8228, 19.6272, 0.0, 62.9565, 10.3303, 0.0, 0.0, 60.7257, 0.0, 59.2342, 105.8996, 62.5495, 10.3604, 28.9449, 37.584, 51.6258, 15.1225, 10.3303, 107.8476], [32.868, 76.797, 53.4336, 22.1375, 32.292, 491.8125, 0.0, 84.2334, 45.1554, 22.3951, 26.8231, 39.998, 45.4358, 15.4057, 46.5699, 5.0794, 0.0, 34.184, 5.6909, 45.3803, 7.0243, 80.9034, 67.8366, 34.8128, 44.7232, 28.1358, 38.61, 45.4572, 25.2328, 5.8695, 43.4498], [66.9735, 220.5378, 143.198, 55.7865, 80.5207, 658.8, 6.3, 72.9055, 18.7404, 15.7394, 22.9949, 18.6346, 11.2941, 18.2618, 23.6808, 5.0611, 9.6162, 6.6941, 17.095, 89.3762, 69.2872, 61.1494, 93.5649, 62.3007, 23.22, 23.1012, 34.3363, 18.8607, 102.937], [0.0, 38.6312, 126.1854, 140.2729, 61.0926, 92.5755, 106.393, 0.0, 32.6838, 32.604, 0.0, 66.8171, 153.5639, 0.0, 184.3758, 112.7386, 139.289, 180.18, 62.5095, 55.944, 100.3122, 0.0, 42.5734, 322.3618], [9.999, 129.6855, 131.6612, 74.06, 6.578, 680.15, 5.355, 113.4246, 83.0378, 14.0231, 10.3307, 17.835, 56.9414, 26.1414, 74.7441, 5.2853, 7.659, 24.878, 0.0, 34.8826, 7.0122, 76.7795, 83.1032, 59.2574, 67.0527, 55.593, 34.128, 66.8196, 48.6662, 25.1997, 75.5866], [39.303, 69.4071, 104.4384, 49.749, 61.3847, 846.375, 21.672, 63.4655, 46.3602, 25.3253, 67.6214, 29.5348, 34.607, 15.8625, 46.7486, 31.2312, 7.8453, 22.3551, 81.9761, 0.0, 37.565, 88.7678, 55.4734, 92.2779, 63.0315, 42.822, 34.5276, 42.6901, 17.5694, 60.3574], [82.368, 158.3757, 99.682, 38.64, 52.2951, 816.6375, 0.0, 66.951, 56.8013, 48.7669, 27.0066, 43.4461, 60.2352, 23.908, 67.1982, 7.8593, 16.9637, 27.1528, 69.1457, 79.7787, 66.524, 58.1222, 41.0553, 36.1746, 22.518, 68.0616, 43.8039, 25.7084, 129.7279], [60.885, 94.7646, 102.5156, 94.2655, 32.3219, 1120.875, 13.23, 152.3463, 44.5754, 37.5903, 39.5922, 55.7165, 120.2899, 12.9692, 88.0945, 11.2913, 7.8556, 55.5258, 59.8873, 21.0245, 95.2246, 138.0909, 47.6784, 111.2612, 39.4632, 45.036, 26.0406, 36.7139, 30.991, 85.3457], [57.915, 150.2613, 119.2136, 64.4, 77.0224, 1094.1875, 0.0, 149.7321, 72.8198, 35.9159, 71.3446, 47.0844, 51.6173, 44.1358, 85.3708, 16.6795, 7.7729, 3.5983, 31.9382, 111.2454, 8.4751, 85.2523, 60.3759, 85.2914, 75.4826, 23.2551, 58.428, 88.1406, 20.756, 24.2606, 127.428], [65.934, 235.4625, 104.4384, 128.0755, 69.6072, 1246.6875, 0.0, 212.4715, 50.8222, 6.9906, 50.7095, 86.6543, 77.6064, 16.3955, 95.7296, 18.5671, 6.1479, 12.2012, 5.2714, 91.1615, 5.4405, 137.7383, 126.3473, 108.0332, 52.8957, 23.6988, 50.544, 53.5716, 16.3863, 38.6604, 103.0613], [187.1595, 438.7572, 188.8392, 291.571, 69.6072, 2398.825, 141.246, 399.8182, 153.0466, 194.4816, 62.089, 63.2786, 170.2378, 50.6585, 85.9512, 43.0373, 18.2988, 41.1118, 0.0, 89.995, 17.8328, 226.2147, 182.7857, 125.2504, 181.274, 6.0291, 138.24, 98.4906, 69.0795, 167.1634, 205.0658]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

