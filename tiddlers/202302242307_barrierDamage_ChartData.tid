created: 20230224230708000
creator: Drevarr
modified: 20230705163520055
modifier: drevarr
tags: ChartData
title: 202302242307_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Smol Daddy Tika", "Jeckyll Mbs", "Koralia Danai", "Irish Necroman", "Zaylen Harker", "Kahless The Drunk", "Lord Erin The Wise", "Arriasa", "Husky Guard", "Oo Dads Mad", "Burnhard Riemann", "Sassy Daddy Demon", "Mistwalker Caelon", "Air One Com", "Aronorf Xideliesi", "Gavann", "Primal Clone", "Xanvias Tseli", "Bella Sassy", "Venomina The Siren", "Black Raspberry Pie", "Ravioli Fetabringer", "King Squid", "Whose Guardian", "Sp\u00edcy Cheese", "Blanco Padre Guard", "Akira Moonbright", "Ryvalia Fazebringer", "Arka\u00f1", "Arcanophage Farra", "Burnockholmes", "Viral Marketing", "Manuel Radiador", "Skye Nightroad", "R\u00fana Bierdna", "Drevarr Moonwillow", "Rozaalyna", "Newtype Khan", "Project Jupiter", "Daring Deathblade", "Panther B Me", "Rina Of Theros", "Nazhul Naxxremis", "Ez Mode Mathus", "Smol Gluvs", "Harry Callahann", "Elonith Tenebris", "Dark Sidiuz", "Luck Engi"];
const professions = ["Tempest", "Berserker", "Berserker", "Firebrand", "Scourge", "Firebrand", "Firebrand", "Weaver", "Druid", "Dragonhunter", "Spellbreaker", "Berserker", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Berserker", "Firebrand", "Tempest", "Chronomancer", "Firebrand", "Scourge", "Dragonhunter", "Berserker", "Firebrand", "Vindicator", "Chronomancer", "Chronomancer", "Spellbreaker", "Scrapper", "Willbender", "Scrapper", "Scrapper", "Spellbreaker", "Scrapper", "Scourge", "Spellbreaker", "Druid", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper", "Scourge", "Scourge", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2299, 3874, 2177, 3457, 0, 0, 0, 2616, 2572, 0, 0, 0, 3239, 0, 0, 0, 0, 0, 7134, 788, 0, 0, 3627, 7573, 4407, 0, 1089], [0, 2682, 0, 3094, 1472, 3474, 0, 0, 540, 0, 0, 0, 0, 0, 0, 1188, 1989, 1278, 9279, 2310, 0, 0, 0, 0, 5313, 4047, 7218, 1064, 0], [2358, 0, 6797, 0, 2934, 0, 0, 5786, 1203, 0, 0, 0, 669, 6311, 0, 2791, 0, 0, 1596, 0, 8629, 0, 0, 261, 1176, 2008, 1432, 1921, 0], [638, 1344, 1086, 1192, 298, 1294, 355, 4143, 0, 0, 0, 4618, 0, 0, 0, 2494, 2132, 1252, 13147, 1250, 0, 0, 4277, 2832, 2242, 1586, 253], [919, 9552, 25, 0, 0, 0, 524, 510, 2682, 5131, 0, 3401, 0, 3313, 13170, 3702, 5481, 617], [0, 2098, 324, 3098, 0, 3812, 2763, 5829, 1058, 0, 0, 3835, 0, 0, 0, 727, 1158, 3584, 13504, 1343, 247, 0, 933, 2332, 2732, 0, 0], [2, 1480, 990, 0, 0, 2819, 6161, 602, 2076, 0, 0, 0, 0, 1753, 0, 869, 168, 2126, 5533, 1066, 12697, 0, 0, 0, 2897, 5523, 4270, 1094, 0], [2480, 14469, 3687, 5710, 691, 4015, 0, 3437, 3027, 0, 0, 269, 3052, 0, 0, 0, 1188, 261, 2979, 0, 0, 261, 0, 2134, 2540, 0, 941, 1125], [0, 5403, 3340, 0, 835, 0, 2250, 4198, 3962, 8355, 1188, 0, 0, 3165, 7280, 10142, 5872, 1127], [5641, 2400, 370, 1475, 3, 2987, 7955, 3570, 304, 0, 0, 0, 0, 4118, 0, 2873, 1066, 2426, 2551, 4618, 7502, 0, 261, 0, 2570, 5441, 2024, 0, 0], [1652, 6333, 9118, 3454, 1673, 12142, 8898, 6647, 11683, 0, 956, 0, 0], [0, 1263, 719, 0, 2345, 13987, 2361, 393, 0, 2597, 0, 0, 11880, 0, 0, 0, 5239, 1293, 2957, 0, 2018, 0, 0, 0, 10397, 4274, 1768, 0], [0, 6546, 2552, 0, 0, 1333, 3766, 0, 3416, 0, 20, 1248, 2469, 0, 4954, 0, 3674, 0, 2025, 8891, 0, 0, 956, 6760, 4973, 5628, 1187, 4450], [2576, 6072, 1559, 2897, 1637, 1248, 1248, 0, 306, 0, 0, 0, 269, 0, 0, 2586, 0, 3485, 1188, 2752, 6271, 0, 0, 0, 7885, 7258, 4570, 10314, 1160], [1955, 1250, 0, 658, 1177, 5320, 333, 0, 2116, 0, 0, 0, 2041, 0, 0, 1188, 3895, 7534, 109, 13968, 261, 297, 0, 9010, 7030, 2438, 4677, 1050], [2360, 3067, 1304, 0, 1248, 4324, 0, 5907, 3255, 0, 0, 0, 0, 1834, 1237, 1726, 3449, 1048, 8296, 11247, 0, 0, 0, 922, 7348, 4159, 4507, 0], [0, 5485, 4623, 1829, 0, 4960, 0, 5989, 3735, 0, 0, 0, 11967, 2240, 0, 8976, 289, 5083, 2427, 1188, 0, 0, 3029, 5290, 2875, 0], [805, 146, 3668, 0, 1248, 5017, 0, 0, 0, 0, 0, 0, 0, 8561, 0, 0, 0, 3662, 8469, 4894, 10140, 2577, 1066, 0, 8590, 7899, 948, 2974, 0], [1930, 6796, 3394, 5818, 0, 298, 1283, 927, 2465, 0, 124, 0, 0, 4150, 0, 0, 1182, 2077, 7632, 1485, 11898, 3233, 0, 0, 6582, 5582, 3499, 3057, 0], [2122, 2993, 0, 0, 3616, 6432, 2478, 4727, 0, 0, 0, 0, 0, 2337, 0, 954, 0, 12019, 6400, 1957, 4442, 1267, 0, 0, 2999, 6958, 8833, 3634, 0], [2668, 7, 10314, 0, 0, 9612, 4553, 6407, 2496, 1193, 0, 0, 9247, 0, 0, 0, 3646, 8530, 0, 5719, 0, 0, 3041, 3872, 4665, 986], [0, 0, 7880, 0, 355, 7766, 0, 2496, 0, 0, 0, 0, 6770, 0, 101, 0, 1188, 13607, 3053, 6800, 0, 3350, 0, 4736, 12638, 5092, 1289, 0], [293, 6072, 0, 2487, 716, 3760, 3992, 1552, 0, 49, 0, 0, 0, 4682, 0, 319, 285, 5788, 3760, 1060, 16981, 1043, 1066, 0, 971, 13945, 3608, 5544, 617], [11764, 11006, 8407, 3475, 13192, 11976, 15491, 0, 3470], [2285, 2790, 1392, 3385, 269, 1248, 8606, 4015, 3715, 0, 0, 0, 0, 2431, 0, 1066, 0, 2423, 1066, 6840, 9626, 169, 261, 0, 16575, 11508, 2943, 1394, 0], [2376, 0, 0, 0, 1248, 4756, 10881, 10740, 2734, 0, 1248, 1248, 0, 5334, 0, 2975, 0, 11123, 0, 1194, 3252, 4605, 1066, 0, 9015, 7663, 7371, 0], [1188, 5695, 2469, 335, 0, 11990, 3346, 10524, 1248, 0, 1248, 0, 0, 0, 0, 0, 6963, 0, 2025, 16206, 3065, 0, 0, 4697, 11064, 3416, 1080, 2404], [6816, 305, 3120, 848, 6436, 5713, 4928, 19179, 432, 0, 1342, 9482, 15995, 8543, 2798, 3299], [0, 4664, 4747, 0, 167, 5790, 6877, 6717, 0, 0, 701, 1248, 0, 3762, 0, 0, 0, 7475, 6634, 2720, 11132, 1237, 0, 68, 7035, 4606, 11538, 5684, 0], [742, 3811, 3351, 0, 0, 10941, 3395, 1573, 2507, 0, 0, 0, 3660, 0, 4142, 0, 13424, 6415, 5608, 6928, 0, 0, 0, 6843, 11875, 9554, 1565, 0], [1502, 0, 0, 4734, 641, 2663, 0, 10035, 3831, 0, 0, 0, 1076, 191, 0, 735, 1188, 8075, 9596, 5576, 18432, 3322, 818, 0, 11290, 7490, 5583], [8948, 36621, 0, 3637, 2803, 18132, 27432, 2935, 798, 149, 0], [1850, 5238, 4655, 1248, 2604, 8912, 2327, 8083, 0, 47, 1248, 0, 9755, 1238, 0, 13394, 3486, 4302, 10463, 1801, 0, 617, 13290, 1594, 3771, 2833, 3958], [10414, 41350, 17701, 6268, 8701, 18251, 19427, 280], [5392, 27532, 21412, 6131, 10272, 5696, 19707, 20633, 3432, 125, 2351, 1037], [2119, 0, 14033, 1727, 0, 0, 18403, 248, 2603, 0, 7780, 8538, 5439, 16999, 1318, 0, 0, 13486, 13696, 9301, 8765, 0], [2313, 10149, 3605, 3365, 649, 6095, 4922, 12196, 781, 0, 1270, 0, 0, 4393, 0, 1714, 541, 6391, 7740, 7582, 12850, 1594, 465, 0, 7894, 8650, 11382, 9621, 2666], [4132, 13636, 5297, 5562, 1473, 12339, 7789, 4002, 6072, 0, 106, 0, 5639, 3966, 0, 11972, 13050, 8839, 11909, 3264, 2323, 0, 9355], [3277, 4905, 5665, 3375, 4130, 7951, 4264, 16294, 5762, 74, 2205, 0, 0, 4185, 0, 1265, 165, 3918, 9415, 2578, 20088, 3310, 3350, 0, 3524, 9162, 15681, 5172, 0], [843, 14842, 8646, 7265, 0, 13803, 2839, 2465, 9980, 0, 4345, 0, 14265, 0, 262, 1179, 10281, 6226, 4767, 22676, 533, 0, 0, 12225, 11644, 19085, 3097, 0], [0, 12597, 0, 223, 23413, 26012, 10181, 23579, 2482, 0, 1327, 26195, 15967, 12281, 12189, 6575], [4768, 10765, 1421, 0, 2145, 7197, 7993, 15328, 7187, 0, 0, 1241, 0, 9296, 0, 2035, 0, 15904, 15710, 7717, 33215, 7490, 0, 0, 7624, 3515, 6379, 7220, 2193], [4532, 10699, 1749, 2350, 4425, 18299, 6029, 7018, 6235, 0, 0, 0, 0, 14367, 0, 4058, 0, 6613, 12322, 13277, 22473, 819, 0, 240, 8641, 14149, 14130, 3375, 1798], [2042, 11623, 9038, 3041, 3872, 19754, 8754, 10187, 3713, 0, 0, 0, 10400, 111, 2715, 1028, 7823, 3129, 7287, 18281, 2351, 0, 0, 12373, 11935, 10189, 17469, 3357], [7434, 14602, 12540, 3084, 2524, 2637, 9080, 15812, 1891, 0, 0, 9648, 0, 2936, 2963, 15096, 4762, 8143, 9470, 3713, 1086, 0, 10268, 18684, 14366, 10106, 887], [2572, 3396, 5464, 0, 355, 18351, 9153, 9551, 535, 750, 3463, 102, 0, 13385, 0, 1188, 839, 10546, 27991, 3620, 15570, 3230, 3350, 1066, 14905, 8554, 18518, 6891, 3388], [40007, 12298, 884, 618, 21536, 42610, 33890, 35426, 7165], [8176, 11798, 4916, 8123, 4743, 13399, 10914, 14130, 5971, 0, 975, 214, 0, 17476, 0, 1461, 1489, 8383, 6988, 11148, 9190, 3552, 479, 0, 12794, 14662, 15738, 12361, 6781], [2761, 5943, 0, 15505, 4942, 26875, 10505, 15747, 0, 0, 2090, 2032, 33082, 0, 548, 0, 14233, 10530, 22574, 6467, 0, 2453, 9100, 16938, 15039, 8036, 8056], [24963, 0, 3414, 2721, 38286, 37440, 17484, 52334, 26108, 4001, 2482, 25670, 38286, 37822, 15749, 9840]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

