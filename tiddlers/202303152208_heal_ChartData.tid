created: 20230315220824000
creator: Drevarr
modified: 20230705163522208
modifier: drevarr
tags: ChartData
title: 202303152208_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Ravioli Fetabringer", "Etcheriii", "Tribal S", "Mac Chiato", "Zadie Miststep", "Drevarr Moonwillow", "Mike The Archmagus", "\u00c1rkantor"];
const professions = ["Firebrand", "Vindicator", "Druid", "Tempest", "Tempest", "Scrapper", "Tempest", "Vindicator"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[652.358, 439.0743, 548.0942, 501.7667, 672.4545, 448.4375, 0.2083, 667.2116, 76.4444, 667.2148, 719.6542, 142.3333, 701.1679, 211.4615, 158.0938, 198.6176, 74.451, 20.6522, 269.5941, 808.1171, 2.4524, 216.2195, 169.9753], [2128.6014, 1400.2222, 3732.4453, 662.5, 2461.125, 521.3676, 0.0, 467.902, 168.2174, 1736.5644], [2647.1111, 1194.1284, 1611.2826, 247.7333, 1809.2424, 284.625, 42.375, 1693.5311, 29.2963, 1549.837, 1784.7153, 396.9167, 1946.9343, 231.8846, 1794.9688, 470.9265, 0.0, 277.2745, 35.0435, 1235.2772, 1506.2252, 42.7143, 34.622, 661.4691], [2496.8642, 1229.473, 1634.6159, 320.9333, 2033.2828, 1350.9688, 0.0, 1750.8216, 1475.2963, 4018.0296, 2683.4373, 179.8611, 2991.0584, 838.0385, 1942.6875, 855.8529, 7.6087, 707.5686, 16.087, 1708.2277, 1018.6667, 127.1667, 91.6768, 1095.0309], [3722.321, 1975.7905, 2303.7754, 1928.899, 716.75, 31.0833, 2499.9336, 339.7037, 1842.6815, 2785.0034, 307.4722, 2475.1022, 0.0, 2418.9375, 751.5, 782.4314, 2334.4851, 2305.5946, 127.4756, 1185.963], [3356.5062, 2144.2297, 2417.5725, 250.0667, 2165.1515, 498.0, 247.4583, 3064.3071, 1604.4074, 4583.4593, 3070.0915, 131.75, 3094.1971, 810.3846, 2319.375, 937.3529, 24.8696, 766.3922, 343.3043, 1635.4059, 2325.5045, 113.7857, 158.872, 1055.4753], [3458.4074, 2298.7162, 2781.7246, 855.8667, 2604.5657, 482.4062, 195.3333, 2915.473, 535.7778, 4903.5852, 2962.2542, 572.0, 3464.1314, 164.0, 2409.9062, 1067.0, 882.3333, 2377.9505, 2557.6306, 376.9146, 1636.1111], [7848.0864, 3427.2365, 5403.971, 596.4, 4790.5051, 169.0833, 5855.5104, 1038.5185, 9547.0593, 6307.1729, 88.75, 7502.4088, 951.5769, 4435.2812, 969.4559, 777.0392, 133.4783, 4316.4356, 4557.8288, 45.2143, 427.561, 2477.9753]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

