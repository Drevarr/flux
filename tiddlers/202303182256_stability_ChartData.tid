created: 20230318225613000
creator: Drevarr
modified: 20230705163522579
modifier: drevarr
tags: ChartData
title: 202303182256_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["S\u00edzz", "Mylania Svenson", "Flower Redrose", "Ark Darkness", "Venomina The Fierce", "Gavann", "Blanco Padre Guard", "Aronorf Xideliesi", "Zaylen Harker", "Bella Sassy", "Koralia Danai", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.102, 4.7713, 2.8941, 3.2789, 3.8896, 0.5832, 0.6365], [1.9224, 0.9302, 3.428, 2.2915, 4.6332, 5.3094, 3.8025, 5.5242], [0.742, 0.0, 0.7499, 0.0, 7.7338, 4.8062, 0.0, 0.2688, 1.0656, 4.2476, 0.7516, 2.9792, 1.1669, 0.0, 0.2709, 2.6393, 2.4057, 1.3491, 0.7656, 1.0379], [2.0405, 5.8061, 6.4022, 19.2614, 4.4186], [2.3373, 4.5965, 2.524, 1.0465, 4.6694, 3.721, 1.5505, 2.6208, 4.3068, 4.5623, 1.5033, 2.8941, 1.2989, 0.9574, 1.6308, 1.5422, 0.7893, 1.5345, 2.3166, 1.4797, 2.0161, 2.444], [4.2294, 2.7821, 0.0, 4.3708, 17.9482, 7.752, 0.0, 3.5084, 3.5952, 8.7024], [3.71, 6.7133, 2.2131, 4.6478, 19.991, 7.4419, 0.0, 0.0, 3.864, 8.88, 7.9447, 3.3987, 8.1715, 3.8808, 5.5352, 0.0, 1.8377, 2.5575, 5.9697, 9.8355, 5.2826, 3.0802], [1.9663, 9.0115, 2.5972, 6.2176, 17.3645, 5.1938, 0.0, 0.0, 7.896, 12.2988, 8.9672, 6.7648, 5.5328, 1.7741, 6.0738, 0.2268, 2.9376, 1.6256, 3.3964, 7.2171, 5.9187, 3.8025, 2.578], [3.4503, 10.584, 3.8226, 6.6793, 18.24, 9.4574, 0.2124, 3.1248, 9.0132, 13.0576, 5.3595, 5.0646, 4.3085, 6.0438, 2.4192, 4.1616, 2.9686, 6.7723, 10.7811, 8.791, 6.0482, 6.5621], [5.4537, 17.0554, 2.5423, 4.3092, 25.9738, 16.7443, 3.5471, 0.2298, 9.9456, 15.2736, 14.0015, 9.5426, 11.6189, 5.5598, 4.0392, 1.9764, 4.0882, 3.8403, 6.7518, 7.128, 13.4042, 8.1664, 7.1312], [3.8955, 15.9667, 9.788, 25.6819, 18.6048, 2.3364, 8.0304, 13.6752, 18.0918, 5.4249, 15.4067, 6.7478, 2.3936, 1.8468, 4.5533, 7.9162, 7.3247, 10.0683, 17.2774, 8.6002, 3.7163], [2.7083, 15.7248, 5.3041, 12.312, 28.4544, 14.2637, 0.0, 1.9131, 6.9888, 21.0456, 14.8667, 10.7517, 11.023, 5.2589, 10.8909, 1.7064, 5.6549, 7.5392, 6.6904, 10.4692, 18.4525, 10.259, 9.4414]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

