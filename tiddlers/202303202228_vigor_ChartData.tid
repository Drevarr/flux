created: 20230320222849000
creator: Drevarr
modified: 20230705163522749
modifier: drevarr
tags: ChartData
title: 202303202228_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Venomina The Siren", "Whose Guardian", "Sister Elon\u00edth", "Misaki Amakase", "Xyntharos", "Jeckyll Mbs", "Zefirokai", "Zadie Miststep", "Fribble Bibble", "\u00c1rkantor", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Tempest", "Dragonhunter", "Dragonhunter", "Vindicator", "Vindicator", "Spellbreaker", "Tempest", "Tempest", "Scrapper", "Vindicator", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[11.919, 1.984, 7.9632, 15.618, 0.0, 7.6417, 7.6058, 271.2528, 44.8275, 11.968, 3.0354, 0.0, 23.2038, 72.8182, 14.675, 26.4128, 19.9985, 14.72, 10.0185, 83.5704, 15.3639, 14.5599, 2.9958, 25.5886, 20.599], [416.1456, 0.0, 0.0, 0.0, 0.0, 54.1798, 99.7929, 0.0, 28.1137, 0.0, 35.88, 0.0, 184.5418, 0.0, 18.7489, 0.0, 34.1172], [45.1629, 0.0, 0.0, 115.14, 0.0, 0.0, 29.8799, 180.2736, 279.365, 0.0, 0.0, 0.0, 36.0448, 11.9592, 0.0, 0.0, 0.0, 56.8928, 0.0, 97.079, 0.0, 0.0, 0.0, 50.8235, 0.0], [0.0, 157.4342, 119.306, 0.0, 68.823, 186.5635, 121.518, 0.0, 29.9552, 20.7552, 49.2005, 73.9541, 53.9865, 2.9689, 29.9386, 9.0209, 20.3619], [48.246, 23.5115, 6.2446, 68.6541, 250.4788, 60.4649, 28.1137, 59.0594, 72.4224, 30.8104, 225.2966, 12.9258, 60.6796, 0.0, 60.7288, 38.9959], [32.6346, 4.9421, 12.9168, 32.4045, 17.8133, 15.9136, 33.838, 424.5696, 80.3309, 11.407, 0.0, 41.5642, 112.4165, 22.7866, 17.9078, 40.7629, 53.912, 10.0185, 165.0802, 30.3408, 16.1867, 6.3885, 39.0905, 21.0056], [234.0017, 0.0, 42.8085, 131.7348, 93.4352, 72.5313, 553.3963, 50.6583, 48.0719, 57.6154, 39.857, 30.1871], [1115.2642, 88.7004, 158.369, 68.4282, 460.0059, 269.4476], [15.727, 18.0338, 0.0, 51.9555, 0.0, 62.827, 0.0, 1060.5816, 264.3029, 31.603, 0.0, 0.0, 89.3235, 329.4095, 0.0, 21.2152, 31.487, 75.992, 31.6681, 306.1195, 47.8332, 0.0, 0.0, 0.0, 7.9279], [85.2611, 0.0, 5.2128, 27.246, 5.2081, 76.1803, 5.1999, 1634.256, 263.1075, 43.8328, 0.0, 0.0, 102.1082, 411.7951, 22.2293, 82.971, 214.0265, 69.736, 79.359, 432.2765, 42.5313, 98.8281], [106.2813, 57.1547, 64.0512, 135.033, 108.2572, 100.6415, 82.9651, 1799.3664, 276.0179, 49.1436, 10.0788, 18.1138, 133.3658, 372.5955, 13.2509, 118.1722, 218.1113, 156.1056, 38.6674, 517.9075, 126.4716, 58.0361, 52.8871, 61.3567], [115.8394, 115.8062, 116.9712, 129.3615, 45.0427, 52.7432, 70.4699, 1681.4304, 510.0772, 72.6682, 68.7905, 27.0648, 142.6586, 541.3531, 0.0, 141.4192, 119.8208, 197.3952, 123.3101, 727.8638, 99.8073, 114.9334, 76.2451, 54.3022, 93.3394], [54.1117, 71.7908, 90.4032, 0.0, 83.2356, 82.9159, 279.6288, 2544.8904, 159.4664, 129.0674, 78.9699, 10.7352, 172.1702, 629.8512, 156.1003, 188.811, 313.2531, 131.744, 76.2368, 898.668, 115.4034, 106.1487, 94.3392, 261.7824, 126.7112]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

