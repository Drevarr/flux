created: 20230222220539000
creator: Drevarr
modified: 20230705163519914
modifier: drevarr
tags: ChartData
title: 202302222205_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Ryvalia Fazebringer", "Husky Guard", "Smol Gluvs", "Mac Aaroni", "Venomina The Siren", "Dark Sidiuz", "Tribal S", "Black Raspberry Pie", "Mustache Bloodclaw", "Sygaldry Verdandi", "Zadie Miststep", "Blanco Padre Guard", "Fribble Bibble", "Mike The Archmagus", "Arcanophage Farra", "Kiloak", "Drevarr Moonwillow", "Kosair", "Ark Darkness", "Zaylen Harker", "Koralia Danai", "Ravioli Fetabringer", "Bella Sassy"];
const professions = ["Spellbreaker", "Chronomancer", "Dragonhunter", "Scourge", "Tempest", "Tempest", "Scourge", "Druid", "Chronomancer", "Herald", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Tempest", "Spellbreaker", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 107.3664, 47.2704, 111.0375, 87.2467, 178.861, 108.4027], [0.0, 0.0, 0.0, 0.0, 56.509, 0.0, 0.0, 0.0, 494.4278, 18.0173, 203.6362, 0.0], [3.7186, 14.931, 0.0, 56.4096, 68.352, 266.1347, 70.3066, 334.0656, 51.1529], [6.3571, 0.0, 84.6188, 0.0, 0.0, 6.2592, 34.3296, 345.7264, 206.0237, 122.1178, 112.1646], [30.0699, 35.964, 0.0, 49.8456, 17.7886, 54.5726, 67.2768, 38.1312, 166.1121, 134.0525, 309.1306, 83.3667], [29.2446, 57.7576, 59.0094, 65.8865, 49.5744, 49.536, 256.8964, 95.9616, 248.8709, 74.1566], [0.0, 0.0, 22.08, 186.543, 88.9114, 720.3989, 85.1396], [32.6705, 49.728, 75.7865, 0.0, 127.6633, 186.9002, 0.0, 24.5376, 136.4429, 177.7248, 319.5202, 2.5944], [4.7317, 56.0328, 63.3402, 321.8997, 62.9386, 74.15, 156.5952, 31.5264, 328.671, 30.8448, 146.5733, 43.413], [153.5965, 197.5231, 462.5026, 359.8799, 148.5696, 65.5488, 48.6788], [32.0384, 7.7108, 39.002, 146.4511, 100.1589, 56.902, 63.7824, 225.7536, 338.2646, 73.3421, 500.9386, 0.0], [84.3402, 52.984, 50.3395, 33.7447, 129.3064, 251.2338, 86.7456, 99.7632, 351.9445, 264.0902, 345.5741, 87.8637], [26.9997, 108.7948, 77.3942, 128.0557, 232.7515, 249.1263, 90.1248, 0.0, 441.3074, 404.3117, 120.1997, 129.1579], [147.2071, 25.9444, 56.826, 15.824, 179.8859, 320.947, 38.6304, 55.3728, 375.3956, 306.8813, 447.3922, 88.4258], [69.8922, 42.0912, 131.6146, 83.076, 136.9505, 123.7313, 27.264, 87.6672, 394.0499, 309.623, 724.0752, 72.0378], [50.6583, 73.8076, 71.1572, 65.5509, 138.0935, 75.4256, 34.0224, 119.1936, 644.1952, 314.9107, 622.7366, 190.1695], [114.7054, 110.2537, 280.3306, 268.1491, 259.008, 105.6768, 847.0829, 168.4224, 223.4563, 228.4369], [48.1219, 87.1507, 345.6267, 227.6078, 103.1808, 164.7744, 507.7523, 400.8845, 754.1251, 92.2309], [116.9385, 46.3536, 80.7761, 77.0629, 193.6738, 55.5155, 151.8336, 107.7504, 706.0208, 453.5654, 709.0502, 305.5338], [48.6209, 170.108, 391.2769, 0.0, 206.6304, 139.8912, 896.4724, 342.2304, 625.7736, 244.8681], [65.1244, 60.31, 79.5156, 296.1902, 134.3796, 156.3648, 102.144, 902.8681, 465.9034, 748.211, 157.3504], [60.3565, 51.5188, 230.4918, 402.8395, 492.6502, 376.7952, 52.2624, 39.0912, 661.9612, 248.0314, 549.3701, 34.2893], [37.4023, 85.3664, 440.5262, 314.2251, 461.8596, 377.9599, 105.1008, 144.1536, 682.925, 538.1683, 919.2398, 0.0], [209.803, 112.406, 67.6922, 335.7457, 573.5203, 621.6511, 309.1584, 145.4592, 1095.8069, 712.7597, 1184.5742, 323.6514]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

