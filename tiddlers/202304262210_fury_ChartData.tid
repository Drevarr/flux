created: 20230426221022000
creator: Drevarr
modified: 20230705163526783
modifier: drevarr
tags: ChartData
title: 202304262210_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Leana Deeb", "Zadie Miststep", "Permanent Dawn", "High Sorcer Baradun", "Xanvias Tsoli", "Al Darasuum", "Cyclotechnist Farra", "Leana Deeb", "Miphest\u00f6", "Lord Erin The Wise", "Daddys Lil Orchid", "Mike The Archmagus", "Blancooo Padreee", "Newtype Khan", "Solo Bloodborn", "Drevarr Moonwillow"];
const professions = ["Catalyst", "Tempest", "Weaver", "Tempest", "Holosmith", "Dragonhunter", "Scrapper", "Weaver", "Tempest", "Weaver", "Vindicator", "Weaver", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[258.8196, 364.9268, 190.7369, 183.047, 118.0416, 240.6662], [23.6652, 233.1576, 94.0602, 0.0, 0.0, 31.4112, 49.2912, 280.5701, 76.2955, 159.9072, 0.0, 62.3981, 57.434, 0.0, 31.2404, 379.0785], [131.4466, 404.3476, 19.0877, 79.7355, 0.0, 9.1278, 29.1911, 869.8854], [16.7628, 261.7524, 104.9303, 62.1211, 30.8563, 33.5232, 79.6483, 299.1509, 92.4706, 127.8494, 0.0, 90.6122, 102.2814, 15.3054, 0.0, 285.3065], [445.419, 213.9647, 31.9148, 58.7981, 26.1504, 77.6923, 467.3071, 8.5747, 188.1485, 25.7931, 57.9002, 171.3244, 27.423, 11.9315, 476.8408], [259.6776, 340.6137, 64.107, 221.7874, 300.001, 72.1908, 128.4683, 995.5798], [57.2149, 603.057, 347.0687, 19.2035, 29.6525, 16.0128, 128.2354, 510.972, 38.3914, 176.8901, 35.248, 32.1395, 189.8988, 14.8896, 0.0, 524.3254], [1341.0692, 306.5462, 641.346, 39.1248, 330.5548, 326.6406], [0.0, 541.4682, 129.6655, 15.8549, 87.1834, 95.7696, 122.8368, 586.2242, 222.2606, 254.5539, 1.7604, 50.3765, 87.373, 0.0, 29.3278, 822.4008], [309.777, 268.0936, 89.6621, 108.2822, 92.1216, 107.5018, 806.8712, 44.4326, 102.0887, 116.0458, 219.7156, 0.0, 85.3875, 860.3087], [64.2616, 630.9186, 200.7652, 39.2272, 127.7338, 47.5776, 117.673, 793.8647, 78.3418, 401.8669, 6.29, 129.9484, 227.1698, 19.3248, 9.0625, 737.0084], [66.7387, 788.5566, 280.1839, 80.3678, 101.6928, 78.1824, 144.8222, 684.7025, 147.6216, 371.9082, 11.9076, 177.6262, 219.2268, 13.7808, 133.25, 826.3911], [84.3193, 1534.221, 378.7918, 284.4311, 157.8931, 66.7776, 192.7051, 1381.4825, 380.1134, 471.1346, 126.4338, 205.5131, 540.8572, 53.5986, 120.4533, 1455.2624], [1430.8398, 388.22, 213.4258, 160.0474, 170.4192, 244.4218, 1808.3764, 299.8229, 783.6977, 89.0891, 280.8325, 420.8568, 113.1372, 112.6204, 1627.2443], [161.3034, 1788.2748, 631.0239, 278.0071, 436.487, 220.8384, 404.9702, 2457.7753, 520.6219, 1261.7018, 112.7658, 496.5682, 648.882, 101.1186, 184.4825, 2382.6081], [286.0747, 2015.9334, 760.4675, 228.3239, 143.1936, 234.624, 356.305, 2357.439, 447.2496, 1311.6967, 60.5466, 486.591, 650.5928, 115.1568, 152.3313, 2697.4428]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

