created: 20230626010646000
creator: Drevarr
modified: 20230705163537272
modifier: drevarr
tags: ChartData
title: 202306260106_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Pale Pam", "Yngvar The Burdened", "Elonith Requiem", "Necrotic Windrunner", "Gamora Titus", "Gestern Yesteryear", "Iskalla", "Rednuii", "Phageir", "Drevarr Moonwillow"];
const professions = ["Druid", "Scourge", "Scourge", "Scourge", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Catalyst", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.2052, 0.0, 1.0028, 2.9182, 12.5343, 3.3926, 10.976, 4.5864, 1.2929], [3.8802, 0.0, 3.861, 0.0, 0.0, 0.0, 0.2772, 0.0, 3.415, 0.732, 4.4376, 0.4378, 1.0844, 0.0, 0.0, 3.4117, 1.3219, 4.0216, 0.0, 0.0, 2.7754, 3.7419, 3.911, 3.2592, 0.0, 4.2269, 0.0, 0.0, 1.3939], [0.0, 0.6023, 0.0, 0.0, 1.1524, 0.0, 0.0, 0.0, 5.981, 0.3974, 5.5104, 0.0, 0.6025, 3.8142, 0.0, 3.561, 0.0, 1.3028, 0.0, 0.0, 3.384, 0.3044, 0.0, 0.0, 0.0, 0.3964, 0.0, 0.0, 2.2939, 2.6071, 3.3968, 0.0, 0.0, 3.0811, 0.0152, 1.6934, 0.0, 0.0, 2.9215, 1.8436, 1.7357, 1.2003], [3.4144, 1.9656, 0.0, 3.2292, 1.7722, 0.0, 1.12, 2.7009, 0.0, 3.902, 0.0, 0.0, 0.0, 5.0173, 0.0, 3.4447, 3.36, 2.7864, 2.0146, 0.0, 0.798, 0.0, 0.0, 0.1344, 0.0, 0.0, 3.388, 0.0, 3.1573, 0.0, 0.0, 4.5562, 2.5536, 0.0, 0.0, 0.0, 0.0], [3.1477, 1.1539, 6.213, 0.61, 11.2237, 0.0, 10.528, 2.366, 0.0, 0.4563, 4.6678, 1.2147, 2.2572, 20.2356, 1.2215, 5.0592, 3.372, 6.3829, 0.6138, 0.0174, 0.0, 0.7929, 0.0, 3.888, 4.3574, 2.0328, 5.5794, 3.8645, 0.0, 0.0, 9.3643], [0.0, 0.0, 0.0, 0.0, 4.4814, 0.0, 0.0, 7.4989, 5.8703, 0.0, 3.7184, 7.6513, 0.0, 0.0, 4.6678, 0.0, 5.6826, 13.6382, 8.2087, 1.5773, 3.798, 6.352, 2.0443, 2.1866, 3.534, 0.0, 0.0, 1.944, 5.5814, 0.0, 8.1192, 5.3485, 0.0, 0.0, 5.3928, 4.5072, 0.0, 0.0, 0.0, 0.0, 0.0], [4.2573, 0.0, 0.0, 3.4684, 12.479, 0.8986, 3.0912, 6.5447, 0.0, 0.0, 0.0, 9.6262, 0.0, 14.747, 5.6394, 3.7349, 4.314, 4.5614, 0.7722, 0.6322, 0.0, 4.938, 0.0, 0.0, 7.29, 7.3073, 0.2684, 0.0, 10.2787, 0.8114, 0.0, 4.6368, 0.0, 0.0, 12.1656, 1.8274, 4.4774, 10.0382], [14.6713, 0.0, 6.3185, 18.3706, 7.144, 19.4432, 1.4342, 2.4453, 10.7172, 0.8957, 4.9005, 0.0, 2.4948, 0.117, 9.9101, 0.0, 1.29, 0.0, 1.3891, 0.0, 1.0844, 0.0, 0.1166, 21.2609, 4.2592, 3.3354, 36.2544, 5.0333, 0.9488, 0.2218, 0.0, 0.0, 13.835, 0.7744, 0.0, 2.875], [8.2719, 0.0, 8.7942, 2.4948, 23.8115, 5.4662, 0.0, 12.624, 4.2364, 10.9147, 0.3694, 0.9794, 0.0, 0.0, 14.4799, 5.1084, 24.1332, 31.8023, 0.0, 0.0, 25.2, 11.424, 0.0, 15.8863, 0.0, 0.0, 14.2877], [0.0, 0.0, 0.0, 4.522, 4.5561, 2.5771, 4.9915, 9.0776, 17.094, 3.2659, 14.9184, 2.315, 4.9783, 5.6101, 1.041, 11.5398, 3.9534, 17.8794, 5.1106, 9.3298, 8.616, 6.3365, 6.237, 4.3558, 1.2175, 1.0319, 0.0, 5.0938, 3.7422, 16.267, 3.8236, 6.2526, 6.713, 7.056, 9.0169, 6.9149, 8.7408, 0.7152, 6.4735, 1.445, 1.6051]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

