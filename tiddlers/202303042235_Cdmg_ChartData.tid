created: 20230304223548000
creator: Drevarr
modified: 20230705163521146
modifier: drevarr
tags: ChartData
title: 202303042235_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["High Sorcer Baradun", "Primal Clone", "Koralia Danai", "Cat Wigglebooty", "Mac Aaroni", "Lucky Leipreach\u00e1n", "Tribal S", "Drevarr Moonwillow", "Oathseeker Adelaide", "Hyde En Sikh", "Smol Gluvs", "Nelliel T", "Bella Sassy", "Aronorf Xideliesi", "Smol Gluvs", "Husky Guard", "Morv\u00e4rth", "Sofya De Nova", "Sygaldry Verdandi", "Be\u00eb", "Demon Maddx", "Lord Erin The Wise", "Be\u00eb", "Legacy Of Mathus", "Sp\u00edcy Cheese", "Cerys Fireblade", "Demon Maddx", "Xanvias Tseli"];
const professions = ["Tempest", "Chronomancer", "Firebrand", "Scrapper", "Tempest", "Scrapper", "Druid", "Scrapper", "Virtuoso", "Chronomancer", "Reaper", "Reaper", "Firebrand", "Firebrand", "Scourge", "Dragonhunter", "Scourge", "Weaver", "Firebrand", "Reaper", "Scourge", "Weaver", "Scourge", "Berserker", "Berserker", "Berserker", "Reaper", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[14.6716, 0.594, 0.0, 0.0, 0.0, 1.2889, 0.0, 0.0, 65.5484, 1.3919, 0.0, 0.0, 2.0325, 0.0], [3.4675, 0.0, 0.0, 0.0, 0.0, 0.1837, 0.0, 1.3, 0.0, 0.0645, 4.7221, 0.0, 0.0, 2.694, 3.1272, 3.234, 0.0, 7.8097, 0.0, 2.98, 43.129], [0.8373, 1.4286, 0.0, 0.0, 43.5408, 0.0, 0.0, 0.0, 0.0, 68.5323, 2.2732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.41, 12.08, 0.0], [3.0444, 2.8195, 3.5556, 0.0, 0.0, 0.0, 1.1444, 0.3222, 7.9839, 10.7173, 1.1, 0.0, 0.0, 3.6391, 0.0, 0.0, 8.4194, 5.16, 24.0, 0.0], [0.0, 0.0, 11.8889, 0.0, 0.0, 0.6429, 2.9889, 0.0, 7.9111, 0.0, 0.0, 7.0, 0.0, 0.0, 1.0647, 8.716, 1.5106, 0.0, 9.4161, 0.74, 12.36, 18.4032], [30.9349, 0.0, 0.0, 0.0, 0.0, 0.1444, 0.5333, 0.0, 18.8871, 5.8931], [0.7722, 1.9624, 0.0, 0.0, 0.0, 0.3444, 0.0, 3.9, 0.0, 0.3548, 11.677, 7.35, 3.5, 6.7931, 6.5769, 0.6809, 2.4052, 4.2065, 25.46, 1.42, 1.8387], [6.4053, 1.8571, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9333, 0.1556, 0.871, 15.7933, 15.55, 0.0, 0.0517, 3.1716, 2.6128, 3.9052, 2.2355, 22.99, 13.74, 3.6452], [0.0, 0.0, 17.2353, 2.1724, 0.0, 0.0, 0.0, 54.76, 59.38, 105.9355], [1.213, 0.4286, 1.1333, 0.0, 0.0, 22.8878, 3.0111, 2.1222, 38.8065, 7.7981, 0.0, 0.0, 7.3922, 5.855, 0.0, 0.0, 4.5742, 8.64, 25.18, 2.2742], [3.4703, 20.0345, 6.7751, 1.3957, 0.0, 16.9065, 13.27, 50.94, 31.7258], [7.4941, 0.0, 0.0, 28.9698, 17.5533, 4.434, 0.0, 10.5774, 10.13, 0.0], [1.5178, 3.1955, 0.0, 0.0, 2.9231, 13.3571, 23.1, 0.0, 0.0, 0.0, 18.5806, 23.7363, 0.0, 0.0, 0.6422, 2.2337, 0.0, 0.0, 11.6839, 10.24, 0.16, 30.5161], [4.4497, 2.2331, 0.3556, 0.0, 0.0, 0.0, 0.0, 0.0, 2.371, 15.8242, 0.0, 0.0, 10.2716, 6.4645, 7.1745, 2.8966, 13.5323, 28.99, 2.62, 21.9516], [10.2899, 116.8346, 7.6667, 8.4762, 0.0, 4.3265, 3.1222, 3.2111, 64.0484], [8.0178, 1.3759, 0.7778, 4.5385, 3.0816, 1.5889, 6.6667, 6.8226, 25.6627, 0.0, 0.0, 2.8448, 9.7722, 1.8638, 0.0, 10.4548, 30.02], [18.9142, 103.5338, 5.9778, 5.1429, 8.7551, 103.9222, 0.0, 2.3556, 0.0, 0.0], [0.0, 6.3333, 0.0, 0.0, 4.4898, 43.5222, 46.2222, 0.5778, 0.0, 58.871, 39.8907, 0.0, 0.0, 9.6164, 31.1095, 1.4043, 0.0, 10.3387, 1.6, 19.0, 12.371], [0.4379, 5.2331, 0.0, 0.0, 0.0, 14.2857, 7.2778, 0.0, 24.629, 39.5511, 31.5, 6.0588, 7.0043, 25.7722, 1.7362, 0.0, 14.8323, 84.7, 8.72, 20.629], [36.5273, 109.65, 0.0, 37.2457, 31.1538, 18.9149, 1.6034, 6.1355, 43.71, 58.66, 7.5968], [42.5325, 99.3158, 50.2889, 20.6154, 9.8673, 174.8333, 0.0, 2.9222, 0.8, 90.2258], [16.2012, 5.6917, 5.0, 0.0, 0.0, 2.2449, 41.9333, 0.0, 9.9444, 0.0, 39.6452, 57.5724, 0.0, 0.0, 16.3448, 34.5562, 2.0809], [49.4408, 152.594, 20.1778, 0.0, 31.8571, 173.8222, 0.0, 1.1, 72.629], [10.3964, 50.4737, 24.3111, 65.7619, 0.0, 14.4898, 0.3556, 38.5667, 0.0, 12.0484, 66.4513, 0.0, 0.0, 17.1638, 21.1538, 1.434, 0.0, 27.1774, 42.4, 142.68, 0.0323], [20.7278, 41.8195, 0.0, 2.8846, 33.3776, 0.0, 11.4444, 0.0, 34.1129, 76.5891, 0.0, 0.0, 2.1336, 5.9941, 0.0, 0.0, 53.8161, 144.48, 23.3871], [31.8195, 50.1278, 0.0, 0.0, 0.0, 2.0204, 14.4333, 0.0, 1.4667, 0.0, 62.6774, 47.8504, 0.0, 8.4412, 0.944, 6.7604, 1.5191, 0.0, 41.0484, 127.23, 74.9, 153.5968], [57.1663, 109.0431, 43.3669, 14.1745, 2.5, 32.8323, 40.43, 59.3, 17.0161], [71.8994, 34.406, 16.7556, 0.0952, 3.0, 0.0, 7.8889, 20.0556, 0.0, 43.2419, 38.5059, 0.0, 3.4412, 3.3879, 8.7633, 0.2681, 0.0, 62.9935, 49.61, 374.42, 24.0968]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

