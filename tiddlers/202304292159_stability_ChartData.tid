created: 20230429215910000
creator: Drevarr
modified: 20230705163527540
modifier: drevarr
tags: ChartData
title: 202304292159_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Be\u00eb", "Surethang Jr", "Madame Charrlotte", "Kira Dragonblaze", "Belvyn Brightblade", "Mistwalker Caelon", "Fallendruid", "Blancooo Padreee", "Venomina The Fierce", "Husky Guard", "Khailerian", "Xyntharos", "Tika Fiery", "Zady Stardust", "Jupi Jupi Jupi", "Gabe Malhorn", "Duchess Hazel", "Johosh The Great"];
const professions = ["Spellbreaker", "Scourge", "Chronomancer", "Scourge", "Dragonhunter", "Firebrand", "Vindicator", "Tempest", "Spellbreaker", "Spellbreaker", "Dragonhunter", "Vindicator", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 1.7237, 0.0, 0.0, 1.3469, 1.932, 6.1167, 1.5994, 0.0, 2.8912, 0.0, 0.0, 1.7105, 0.1825, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0055, 0.0, 0.0, 0.7728, 0.322, 8.0482, 2.5133, 0.1984, 3.2382, 0.0, 0.0, 0.7605, 0.0, 0.0, 0.8464, 0.5382], [0.0, 0.0, 0.0, 2.5116, 15.4526, 1.8278], [11.5895, 3.4272, 1.7522, 2.0817, 0.0, 1.9006, 0.0], [0.0, 2.0928, 1.7388, 1.197, 1.449, 2.7147, 0.6403, 2.3828, 10.9456], [0.2016, 0.0, 0.0, 0.058, 0.0, 1.2586, 1.4812, 11.5895, 4.5696, 0.0, 4.0478], [0.0074, 0.048, 0.86, 1.0534, 0.0, 0.2143, 0.6182, 0.644, 8.0482, 0.0, 8.0776, 1.7948, 0.0, 0.0, 1.564, 3.3907], [0.0, 1.987, 0.0, 0.0, 1.4812, 18.9939, 3.9984, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 3.4003, 1.932, 6.7605, 9.4819, 1.7347, 0.0, 0.0, 2.3758, 0.0, 0.0, 0.0, 2.0976, 0.0538], [0.0, 0.0, 2.1418, 1.2236, 8.0482, 6.169, 1.4767, 5.3199, 1.5067, 0.0, 2.0907, 0.8518, 0.0, 0.0, 2.1712, 3.2292], [0.0, 0.9815, 1.478, 0.0, 0.9053, 1.0304, 16.0965, 3.4272, 4.5103, 0.0, 2.6608, 2.099, 0.0, 0.0, 1.6376, 0.9149], [0.0, 0.0, 1.1302, 0.0, 0.7286, 0.0, 24.7886, 7.8826, 0.0, 5.6668], [0.7843, 1.0294, 3.2148, 4.2173, 9.5312, 28.3298, 13.7088, 0.4518, 10.5242, 7.3492, 1.6066, 10.1682, 0.5171, 2.436, 0.0, 2.5024, 9.8491], [3.3169, 5.1232, 0.0, 2.2146, 2.3846, 5.4096, 42.1728, 21.9341, 2.8872, 12.6059, 0.0, 2.1857, 2.0381, 0.0, 0.0, 1.5272, 3.0139], [3.6477, 6.4638, 2.6082, 0.0, 3.4886, 4.5724, 36.7, 14.28, 3.9011, 9.4833, 0.0, 4.9416, 6.3274, 0.0, 0.0, 6.0168, 7.2119], [0.0, 1.5456, 2.576, 45.7141, 18.6211, 4.5953, 17.9258, 1.6605, 0.0, 1.7105, 4.4109, 1.3601, 1.6553, 4.7472, 7.7501], [4.2903, 7.5411, 0.4927, 3.2862, 3.6653, 3.7996, 47.6456, 23.1907, 4.97, 13.1841, 0.1538, 6.0819, 8.1221, 2.6796, 1.1035, 6.348, 14.4776], [3.6855, 3.3516, 1.8257, 19.2888, 4.2394, 15.5848, 68.5711, 19.7635, 3.0636, 11.9119], [0.5764, 6.4877, 0.2318, 0.0, 5.3875, 4.2504, 64.7079, 27.1891, 2.3473, 24.7491, 4.2743, 0.0, 6.0819, 6.9358, 0.0, 3.0176, 13.7779]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

