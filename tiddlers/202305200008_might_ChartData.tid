created: 20230520000848000
creator: Drevarr
modified: 20230705163530784
modifier: drevarr
tags: ChartData
title: 202305200008_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Blanco Padre Guard", "Air One Com", "Koralia Danai", "Tegan Parker", "Black Raspberry Pie", "Tika Fiery", "Aronorf Xideliesi", "Zaylen Harker", "Miphest\u00f6", "Solus Sanctus", "Jupi Jupi Jupi", "Drevarr Moonwillow", "Bella Sassy", "High Sorcer Baradun", "Artakama Nahid", "Venomina The Siren", "Newtype Khan", "Grasszanine"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.2521, 71.8641, 3.62, 20.5471, 2.0147, 5.5999, 0.4092, 2.1466, 1.371, 4.7666, 12.5334, 22.4928, 19.825, 2.3626, 1.081, 14.2678, 16.8418, 7.4871, 2.4097, 5.5176, 5.6852, 8.7011], [14.0715, 62.2566, 0.0, 32.3532, 0.0, 10.193, 0.0, 1.118, 5.317, 12.6294, 8.3556, 13.7808, 30.7565, 1.7443, 6.157, 12.3068, 20.8637, 4.653, 6.7189, 3.2333, 6.9221, 3.2762, 17.4022, 2.4407, 4.8686, 2.137, 0.6293], [22.419, 91.0791, 3.1487, 35.9858, 3.145, 7.8021, 0.0, 4.2484, 3.1768, 13.6072, 12.0692, 10.6128, 16.6752, 0.7286, 0.0, 5.8829, 22.5395, 3.0879, 0.0, 5.6514, 0.0, 16.3475, 0.1135, 23.725, 4.0068, 6.1355], [7.2027, 71.0955, 6.3832, 30.6504, 0.0, 24.2871, 2.4552, 2.6832, 5.0494, 17.4367, 18.2895, 25.8984, 27.0509, 2.1638, 0.0, 6.762, 26.2263, 0.0, 0.0, 0.0, 0.6019, 0.0, 14.3261, 1.2771, 19.0882, 3.6506, 0.839], [0.0, 97.2279, 0.0, 38.0292, 0.0, 0.0, 0.0, 0.1789, 0.0, 28.5995, 11.605, 0.0, 54.1018, 4.7251, 0.0, 4.5982, 20.4448, 3.6378, 3.0051, 0.0, 3.5112, 0.0, 40.5173, 0.0, 6.6461, 0.0, 0.2098], [18.6984, 67.2525, 7.3042, 12.3737, 10.3194, 4.719, 0.0, 13.9974, 9.731, 0.0, 16.3398, 36.5112, 0.0, 9.8035, 7.3555, 10.684, 22.7909, 9.2214, 4.7628, 0.0, 4.481, 2.0236, 38.5837, 0.0, 17.7744, 5.6986, 4.1952], [9.063, 78.7815, 2.3348, 39.505, 5.1269, 18.2468, 0.0, 9.3018, 6.4874, 13.6886, 18.3823, 14.8104, 20.1955, 3.0029, 2.6555, 2.7048, 35.4432, 8.46, 1.8144, 3.2333, 13.5766, 2.666, 14.414, 0.0, 13.0603, 3.7397, 1.783], [7.1073, 150.6456, 9.5105, 23.1581, 1.5397, 14.3458, 0.0, 2.2807, 4.6816, 7.1295, 25.6238, 9.9792, 23.16, 2.8042, 0.7755, 2.84, 15.8363, 2.9187, 0.2551, 0.8371, 3.1099, 3.5011, 19.5116, 1.6744, 22.4885, 2.8048, 9.2819], [14.0715, 141.8067, 12.4236, 36.4399, 4.0622, 16.3592, 2.7456, 6.6633, 11.9715, 7.8221, 10.6766, 29.7792, 16.3973, 7.2422, 5.9455, 5.5448, 45.5818], [14.6439, 189.8442, 7.1543, 48.9271, 2.6699, 11.8919, 7.0488, 2.236, 11.7374, 9.7776, 17.1754, 30.096, 47.1538, 3.3562, 3.0785, 13.8621, 30.2482, 0.0, 7.4277, 10.3998, 0.0], [12.879, 164.8647, 15.3367, 29.8558, 1.1302, 10.6335, 0.0, 6.3055, 10.2995, 16.0516, 35.0007, 24.948, 48.3581, 8.6995, 0.235, 8.723, 38.292, 14.2974, 1.6443, 1.6973, 5.4173, 4.9144, 25.2244, 6.9247, 27.2798, 8.0136, 5.8733], [22.3713, 153.72, 11.0527, 55.1707, 8.0426, 3.8381, 1.9272, 4.1142, 20.0974, 16.459, 40.2926, 18.6912, 40.4837, 10.1789, 1.1985, 13.524, 37.119, 8.3754, 6.237, 0.0, 8.059, 1.349, 25.6639, 2.7671, 11.592, 8.9708, 12.1136], [14.5008, 173.7036, 8.311, 41.2078, 9.0418, 15.4783, 4.224, 18.6035, 8.4938, 15.1553, 46.1415, 49.9752, 31.7755, 10.0685, 12.7605, 26.9128, 18.0148, 16.8777, 1.3891, 1.5437, 8.3266, 9.3148, 20.8299, 5.5909, 27.2798, 7.4126, 26.22], [28.2861, 193.3029, 4.3268, 33.7154, 7.9934, 21.8962, 5.1216, 1.2522, 21.3013, 29.6995, 43.9133, 30.4128, 67.7198, 12.9389, 1.739, 37.4615, 42.7329, 9.9828, 5.7834, 12.4062, 0.0, 50.0094, 1.121, 30.2165, 2.7602, 3.094], [46.9368, 424.2672, 7.3471, 68.339, 14.873, 19.0648, 2.1912, 26.8767, 20.4653, 3.5851, 88.2908, 37.0656], [5.5809, 195.6087, 0.0, 86.3887, 17.7887, 39.3879, 0.0, 0.0, 22.5051, 10.6739, 88.5694, 43.4808, 30.0154, 0.0, 0.0, 24.0727, 47.6765, 30.3714, 0.0, 0.0, 0.0, 61.8746, 0.4115, 60.9739, 3.5171, 0.0], [26.712, 167.1705, 0.1928, 112.1578, 0.0, 59.2706, 0.0, 0.0, 0.535, 7.8221, 66.6591, 48.1536, 90.2314, 27.2909, 0.0, 33.1338, 69.4619, 6.1758, 9.9508, 0.0, 17.7232, 0.0, 79.8041, 13.0832, 43.9723, 10.9074, 0.0], [46.2213, 315.5103, 8.8679, 82.9831, 8.059, 44.044, 8.4216, 25.2221, 26.0498, 33.5698, 73.3436, 59.1624, 65.6818, 15.8755, 13.7945, 54.1636, 58.5692, 24.0264, 0.0, 0.0, 21.0003, 25.0215, 61.4351, 7.6342, 58.2691, 20.034, 27.531], [54.378, 537.6357, 26.8607, 138.3809, 27.1089, 48.763, 10.2036, 49.9075, 37.8875, 60.1322, 138.4244, 116.1072, 109.2226, 26.9597, 17.2255, 71.542, 93.5934, 40.3542, 15.1389, 8.2714, 39.5261, 28.6189, 106.5227, 23.5554, 137.5584, 51.3093, 66.2317]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

