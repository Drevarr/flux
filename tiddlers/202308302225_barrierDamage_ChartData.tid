created: 20230830222507000
creator: Drevarr
tags: ChartData
title: 202308302225_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "Lord Erin The Wise", "Jamaass", "Oo Dads Mad", "Rina Of Theros", "Jamaass", "Zaedy Zae", "Mike The Archmagus", "Tegan Parker", "Xanvias Einzbern", "Demon Zen", "Black Raspberry Pie", "Mistwalker Cael", "Sygaldry Verdandi", "Arcanophage Farra", "Inedible Plant", "Daphne Agla\u00e9", "Darks Na", "Vee Usagi", "Newtype Khan", "Vee Usagi", "Mister Jekyll", "Bella Sassy", "Eibh\u00ebar", "Jimbo The Plug", "Luke The Ghastly", "Drevarr Moonwillow", "Tootsie Pop Rocks", "Mort\u00e4rion", "Keypek The Drunk", "Smol Gluvs", "Alarics Bane"];
const professions = ["Firebrand", "Weaver", "Reaper", "Berserker", "Reaper", "Scourge", "Druid", "Tempest", "Tempest", "Berserker", "Reaper", "Chronomancer", "Herald", "Firebrand", "Spellbreaker", "Vindicator", "Scourge", "Firebrand", "Scourge", "Spellbreaker", "Reaper", "Reaper", "Firebrand", "Chronomancer", "Reaper", "Scourge", "Scrapper", "Scrapper", "Scrapper", "Scrapper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1236, 5402, 0, 7889, 2668, 42031, 11888, 2807, 2258, 7858, 7708, 0, 3055, 0, 6309], [3474, 5749, 753, 0, 5151, 6017, 0, 178, 0, 3781, 802, 4132, 4681, 0, 0, 7150, 17897, 1231, 4141, 490, 269, 366, 7988, 0, 0, 2865, 25013], [0, 4361, 0, 0, 5608, 421, 644, 0, 0, 91529, 0, 480, 0], [618, 0, 644, 4091, 2953, 56002, 7230, 7220, 324, 7868, 4982, 0, 3039, 0, 5940, 3638], [0, 718, 5300, 4409, 1017, 35460, 27, 889, 1184, 372, 964, 0, 2062, 0, 4495, 0, 0, 3583, 277, 0, 1391, 9960, 7113, 4096, 269, 0, 0, 797, 7008, 421, 0, 0, 12601, 348, 306, 870], [4173, 198, 393, 63076, 50764], [809, 5054, 1598, 2577, 544, 18859, 7696, 2926, 53, 1056, 7167, 0, 2249, 0, 4763, 4070, 1932, 1296, 0, 1434, 1134, 644, 23136, 3361, 281, 0, 1889, 488, 371, 3066, 0, 4900, 15034, 1699, 2962, 0], [7879, 8134, 0, 12743, 3915, 0, 3396, 0, 6310, 1420, 2796, 1570, 2137, 3696, 0, 2212, 11697, 20821, 7011, 3539, 0, 1621, 3719, 5658, 1367, 1802, 2112, 22202, 0, 2984, 1187], [0, 644, 575, 10739, 2953, 62955, 10755, 5207, 445, 5266, 5222, 0, 6805, 108, 6361, 1433, 0, 0, 581, 3338, 7777, 15377, 2225, 1651, 0, 2055, 4010, 3268, 0, 1231, 2025, 12080, 696, 458, 378], [2678, 0, 7304, 11929, 0, 65054, 9882, 8009, 523, 4872, 10679, 0, 2792, 0, 5442, 10870, 1975, 4634, 755, 2713, 0, 1111, 8403, 11023, 7433], [0, 1610, 0, 5717, 2908, 38095, 2877, 2738, 2325, 5010, 13248, 0, 1734, 0, 2272, 3793, 3869, 2623, 0, 7325, 0, 5008, 11315, 16024, 6349, 1088, 0, 870, 8128, 4074, 306, 0, 2960, 26162, 702], [0, 3213, 0, 9892, 1424, 63169, 4698, 4180, 261, 6397, 9872, 0, 3992, 0, 4192, 8433, 855, 4036, 0, 0, 4954, 0, 7768, 5408, 3625, 0, 928, 1662, 0, 2760, 306, 0, 22349, 0, 3338, 2471], [3006, 1335, 5297, 13558, 0, 45536, 4571, 6164, 1249, 12183, 603, 0, 797, 0, 4940, 6129, 0, 0, 940, 0, 610, 3226, 10061, 12564, 396, 0, 0, 10687, 11565, 421, 0, 0, 28065], [0, 3653, 0, 9084, 1538, 59716, 1932, 4698, 0, 4334, 8930, 3358, 0, 5142, 3601, 7150, 4114, 0, 2493, 0, 2368, 3128, 17852, 4258, 51, 0, 0, 5142, 2918, 0, 644, 33066, 1815, 306, 1005], [600, 8212, 3426, 9899, 0, 50367, 6914, 8782, 0, 940, 5524, 883, 7144, 445, 6334, 3812, 1991, 3252, 1522, 4212, 1835, 29849, 11272, 421, 0, 3251, 3921, 1258, 0, 3505, 44349, 3459, 2105, 963], [2279, 4038, 3150, 16830, 650, 54948, 9510, 8898, 487, 7185, 9792, 0, 1233, 7, 4761, 6817, 1420, 38, 80, 1599, 4066, 10435, 23219, 7832, 2549, 703, 1976, 7282, 6503, 3784, 1206, 2401, 30474], [3532, 3555, 0, 33067, 1423, 58133, 10593, 7452, 532, 15595, 12113, 0, 1119, 0, 0, 7069, 7707, 0, 2458, 608, 4253, 13393, 17138, 15268, 3216, 0, 2640, 7243, 9963, 7783, 0], [1575, 3511, 20084, 2173, 64747, 22737, 3793, 0, 7631, 6615, 648, 0, 7795, 8070, 747, 3756, 406, 10952, 0, 1990, 14052, 5200, 13404, 6531, 0, 0, 11339, 10138, 5222, 383, 3270, 19593], [78797, 9809, 26388, 532, 21413, 21576, 0, 13182, 366, 25716, 17311, 7695, 5543, 10380, 4911, 29589], [0, 7697, 0, 13117, 6330, 77486, 5864, 11179, 1254, 2707, 0, 0, 7206, 0, 8581, 14264, 5778, 3018, 564, 17, 5899, 14671, 22270, 4300, 4438, 0, 1733, 4539, 9914, 3124, 0, 0, 33701, 0, 898, 2962], [6657, 3478, 3073, 46536, 40125, 10608, 67, 756, 239039, 20870, 31143, 9957], [11172, 385, 27119, 5171, 135157, 15773, 9712, 634, 16761, 0, 0, 10263, 13267, 5400, 10230, 0, 640, 0, 6208, 14951, 71074, 11351, 4809, 0, 1095, 19975, 2964, 0, 56438, 635, 10394, 5218], [13086, 3941, 24014, 0, 86658, 11228, 16654, 148, 8356, 13719, 0, 1875, 0, 12480, 9128, 4253, 7118, 625, 2673, 0, 4235, 24856, 57043, 14681, 6554, 0, 2045, 20815, 6986, 11854, 4491, 1179, 92302, 4903, 6235, 4809], [1007, 14625, 5575, 36869, 6510, 103889, 15027, 6974, 442, 13630, 14223, 0, 6727, 0, 5277, 7816, 6248, 975, 0, 3495, 0, 6154, 20216, 63726, 12281, 15144, 0, 4662, 10409, 20406, 6949, 0, 0, 90119, 2354, 9229, 7374], [87, 2533, 28018, 142784, 22778, 8774, 136, 7341, 72076, 63018, 15104, 8196, 19575, 146308], [1501, 172204, 20580, 6828, 1819, 17299, 22162, 219, 19053, 932, 12537, 0, 3059, 3908, 0, 10240, 0, 7753, 23501, 71894, 22601, 0, 3809, 15230, 33587, 4083, 0, 79296, 6786, 9826, 14487], [3200, 13769, 1475, 31882, 2122, 108009, 18698, 13126, 571, 7141, 22466, 0, 1501, 0, 13878, 16753, 5184, 7458, 901, 3510, 6599, 23039, 59339, 23189, 11731, 0, 1710, 18629, 20411, 10288, 4191, 4152, 105146, 6608, 14400, 5291], [22, 12528, 12604, 31555, 0, 151700, 15129, 20854, 755, 19715, 13408, 0, 6073, 232, 15104, 8921, 6990, 8675, 0, 8137, 4761, 20601, 65832, 11411, 1232, 982, 3457, 9821, 25514, 5254, 1102, 0, 86166, 2345, 16052, 5639], [20010, 8035, 31190, 1410, 197304, 8982, 20322, 2074, 29647, 17325, 11187, 590, 33366, 13429, 17992, 0, 1655, 0, 10719, 18055, 41636, 25536, 1932, 790, 9813, 31221, 29727, 6428, 10031], [13781, 26705, 4045, 41004, 3513, 222742, 41210, 18063, 1968, 19169, 34475, 2156, 22206, 4357, 23587, 26270, 46419, 9946, 98, 19801, 0, 1751, 25739, 55316, 28139, 1318, 1237, 4653, 27948, 33533, 7853, 1224, 0, 150990, 19814, 38551, 10453], [17259, 12829, 78742, 12153, 412410, 42528, 32835, 0, 22266, 48961, 4540, 3931, 49494, 39092, 13598, 13416, 198, 3806, 37875, 113129, 47148, 19625, 0, 2239, 1323, 37218, 5003, 0, 5365, 299022, 3239, 27051, 22707], [21962, 47947, 19880, 75235, 8196, 442617, 59101, 61963, 5259, 55951, 50486, 0, 22419, 10, 42913, 53618, 11833, 5949, 3709, 16914, 31042, 73611, 198675, 69394, 12946, 0, 3512, 64142, 49773, 23944, 0, 7661, 403121, 23955, 25412, 26036]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

