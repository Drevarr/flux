created: 20230517220640000
creator: Drevarr
modified: 20230705163530476
modifier: drevarr
tags: ChartData
title: 202305172206_frostOut_ChartData
type: text/vnd.tiddlywiki


const names = ["Miphest\u00f6", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Zadie Miststep"];
const professions = ["Tempest", "Tempest", "Tempest", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Frost Aura per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 40.0545, 47.8541, 20.1053, 20.0389, 41.3149, 11.0958, 16.7767, 19.8634, 99.3643, 18.972, 94.955, 124.0941, 16.119, 39.8208, 89.1642, 70.6692, 111.1469, 28.4357, 20.0277, 19.9141, 0.0, 38.9315, 82.6297, 20.0351, 20.0483, 92.2151, 92.4988, 18.6925, 51.1056, 0.0, 20.0102, 0.0], [18.7906, 17.2525, 34.2985, 39.9427, 0.0, 0.0, 12.3441, 82.6316, 0.0, 0.0, 39.731, 20.124, 156.8822, 60.709, 17.3664, 55.6032, 96.2936, 128.7612, 254.736, 71.1115, 0.0, 19.6686, 52.6907, 240.6537, 40.033, 38.7874, 89.8542, 105.6656, 52.9122, 0.0, 94.248, 16.5361, 136.4145, 35.1106, 19.9188, 0.0, 27.8208], [0.0, 19.8531, 36.9688, 111.3379, 37.4213, 16.9266, 70.1912, 60.9045, 36.0607, 17.9299, 58.6051, 95.4, 190.4515, 152.6522, 38.2158, 115.6608, 172.5878, 182.9052, 200.041, 103.4309, 56.9213, 68.4432, 262.884, 48.3748, 138.129, 174.9868, 254.5579, 51.8792, 0.0, 214.5024, 19.8204, 177.3482, 98.1058, 39.8376, 0.0, 19.9152], [59.5421, 58.7002, 221.5756, 261.6538, 55.9354, 56.353, 114.3402, 47.0226, 79.6956, 54.9936, 218.9246, 100.332, 185.5786, 103.1612, 67.959, 134.1312, 322.1206, 190.35, 270.4301, 105.7968, 57.6412, 99.4867, 15.8508, 27.6066, 304.7232, 63.5314, 199.256, 237.1551, 269.6294, 72.9708, 16.002, 306.3312, 80.0333, 148.639, 170.2723, 128.9376, 79.5002, 148.3056], [20.0587, 19.8995, 149.7148, 335.461, 82.5739, 40.8327, 145.9561, 57.6051, 19.8787, 36.3523, 205.632, 126.396, 196.7458, 168.8926, 20.0718, 113.28, 353.5086, 194.5236, 354.6394, 41.5152, 25.2113, 90.5211, 15.8508, 58.9352, 391.9667, 101.1066, 254.2458, 184.0724, 278.8213, 121.3514, 15.75, 301.9968, 19.7714, 305.1499, 146.6491, 117.7704, 102.8452, 222.6528]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

