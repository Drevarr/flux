created: 20230520220730000
creator: Drevarr
modified: 20230705163531030
modifier: drevarr
tags: ChartData
title: 202305202207_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Red Omega Red", "La Morte Vivante", "Gabe Malhorn", "Black Raspberry Pie", "Alnerian", "Tegan Parker", "Sub Train", "Aronorf Xideliesi", "Blanco Padre Guard", "Sygaldry Verdandi", "Drevarr Moonwillow", "Miphest\u00f6", "Koralia Danai", "High Sorcer Baradun", "Crusader Siolith", "Artakama Nahid", "Newtype Khan", "Grasszanine"];
const professions = ["Herald", "Firebrand", "Firebrand", "Chronomancer", "Guardian", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Catalyst", "Firebrand", "Tempest", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12.3647, 5.812, 4.754, 35.276, 5.814, 70.713, 6.7987, 8.334, 31.2174, 4.2723, 3.0582, 13.4232, 3.1752, 9.4239, 8.0056, 6.93, 19.9463], [46.2931, 24.4268, 1.5303, 14.6867, 0.0, 14.1973, 16.2812, 0.0, 44.814, 8.6757, 2.2334, 52.5366, 4.004, 0.0, 0.0, 36.3545, 0.3672, 0.5328, 6.5444, 7.0488, 26.329], [17.415, 14.1148, 5.6272, 42.1397, 0.0, 106.797, 24.6089, 10.795, 43.5521, 4.0185, 12.1122, 24.769, 1.4256, 0.0, 7.0178, 12.4344, 21.3646], [42.0685, 6.9145, 4.7746, 5.5507, 3.4276, 5.1348, 0.0, 4.945, 0.0, 10.4834, 32.5119, 9.3228, 48.4589, 18.7539, 10.7122, 9.9846, 0.0, 6.274, 11.1734, 8.0172, 42.777, 0.0, 9.2026, 22.0806, 0.0, 2.538, 0.0, 12.784, 5.4216, 0.0, 9.9196, 7.9992, 18.4392], [0.0, 6.2849, 5.6994, 4.7396, 1.2456, 0.0, 8.1098, 0.7598, 3.9199, 25.1937, 5.4876, 76.0723, 25.9619, 4.8391, 0.0, 24.5815, 66.057, 4.8801, 2.9366, 46.4454, 0.0, 4.1877, 0.8187, 27.8851, 4.7952, 4.6287, 6.6679, 1.8612, 16.1343], [49.5091, 11.912, 9.2081, 4.5347, 0.0, 0.0, 0.0, 4.589, 0.0, 24.5676, 15.5961, 6.9564, 36.0058, 32.9028, 3.619, 0.0, 0.0, 0.0, 15.8024, 1.6218, 33.465, 0.0, 9.9884, 99.2866, 0.676, 6.3027, 5.2976, 13.8227, 13.9752, 0.0, 0.0, 12.0564], [36.2018, 4.1076, 0.0, 12.5139, 5.658, 6.6219, 4.1086, 9.0197, 0.12, 20.3287, 10.5574, 7.1604, 76.0723, 19.8218, 9.9884, 1.9156, 13.5313, 4.3012, 21.2295, 7.4358, 64.893, 5.5891, 6.3074, 58.0187, 0.0, 1.3959, 0.0, 11.2659, 2.5488, 0.0, 8.0468, 6.4548, 16.5775], [34.7709, 14.4451, 1.5834, 3.2214, 6.1336, 10.168, 0.0, 13.5295, 8.4379, 13.127, 35.1512, 6.3036, 92.857, 18.3535, 2.4402, 25.7162, 5.6773, 6.8561, 34.4779, 1.6524, 48.597, 11.0949, 2.8125, 30.6083, 0.0, 7.7832, 6.935, 22.1323, 1.296, 1.5984, 3.478, 14.1768, 17.6413], [66.3938, 18.758, 4.9451, 2.0567, 5.2152, 1.3727, 0.0, 12.1054, 2.506, 11.2583, 26.6333, 81.7574, 25.8284, 10.402, 7.5465, 5.5427, 4.5923, 57.144, 10.4346, 48.306, 14.098, 4.2808, 48.1205, 0.0, 7.4448, 5.4902, 18.1373, 0.0, 5.6943, 5.7007, 4.2768, 11.8791], [50.797, 19.9219, 0.8526, 2.3293, 4.9692, 4.7154, 0.0, 9.4944, 6.6783, 17.5027, 33.1117, 6.6504, 119.929, 31.6348, 3.6397, 28.9089, 9.5819, 11.4484, 50.1207, 9.8532, 77.988, 7.755, 63.9576, 10.9134, 6.5979, 20.9338, 1.3176, 1.332, 9.0552, 13.4244, 25.7971], [53.3726, 24.1664, 4.4822, 5.7242, 3.3456, 5.5289, 0.5814, 9.1384, 5.6119, 15.8618, 56.3859, 6.5688, 88.5254, 10.7451, 8.1893, 22.7556, 14.6533, 6.3386, 57.9421, 8.415, 60.528, 6.048, 6.204, 43.5521, 0.0845, 31.2174, 9.6079, 27.4856, 5.4216, 5.7942, 6.565, 14.2956, 37.233], [135.077, 43.5406, 11.7172, 10.0855, 0.0, 11.9728, 0.0, 17.2086, 3.5858, 0.0, 45.8285, 29.5085, 26.5869, 5.8793, 13.3888, 72.4675, 15.6366, 89.628, 0.0, 15.6341, 103.3981, 13.9167, 16.9042, 0.2397], [50.3677, 20.8803, 4.3848, 13.3564, 6.2484, 2.9996, 11.6702, 11.1572, 6.0166, 49.3077, 6.6504, 108.8294, 27.3634, 1.1788, 19.2145, 8.2355, 15.0704, 62.8903, 0.153, 107.67, 17.5599, 5.3561, 53.9071, 3.0033, 11.0527, 32.5193, 1.7928, 3.3633, 0.8026, 13.3056, 9.0423], [128.0656, 8.1467, 0.0, 11.7457, 0.7052, 16.5484, 0.0, 17.1295, 0.2933, 24.7955, 23.3941, 67.1386, 35.9729, 7.7757, 7.8948, 0.0, 1.9404, 42.6185, 24.4188, 129.786, 0.0, 0.0, 128.6766, 0.0, 35.4756, 0.3672, 0.0, 0.0, 11.9196, 79.1645], [55.0896, 17.1835, 14.9814, 11.0767, 10.8404, 13.7649, 6.0272, 9.8109, 3.4391, 22.243, 91.5371, 6.8748, 128.592, 26.6293, 1.3856, 9.0558, 7.7867, 12.9037, 55.867, 1.1934, 87.882, 11.5954, 5.6456, 69.8965, 5.681, 10.3635, 7.2481, 44.1048, 8.8344, 3.9294, 7.4911, 15.7212, 30.7615], [116.4753, 0.0, 0.0, 24.9287, 3.3292, 5.9991, 0.0, 9.4153, 2.6793, 42.8452, 89.4976, 0.0, 146.7302, 5.2725, 23.5959, 29.8377, 0.0, 4.3659, 111.8936, 0.0, 137.061, 8.8717, 132.3313, 0.0, 41.5809, 13.5811, 16.3795, 3.6504, 6.1938, 0.0, 19.8792, 78.1893], [115.0444, 55.7949, 23.2638, 16.9, 9.512, 10.1553, 0.0, 29.9865, 4.8388, 20.8756, 101.9745, 17.5644, 180.2995, 54.5266, 15.8822, 16.7184, 6.5974, 16.0083, 117.3207, 15.4836, 193.224, 13.0552, 6.7624, 110.8598, 33.6708, 4.2622, 42.7465, 16.7832, 10.7559, 4.4659, 12.8304, 52.2148], [172.7096, 72.9099, 40.1209, 35.7575, 13.5956, 19.8022, 46.6808, 15.2629, 55.7899, 148.043, 32.2116, 362.4941, 57.3964, 33.4602, 75.2908, 32.4047, 161.6951, 37.6074, 355.893, 20.855, 19.6046, 183.3451, 4.654, 45.684, 36.722, 77.5829, 3.7152, 16.3503, 9.261, 37.8576, 88.5614]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

