created: 20230410221909000
creator: Drevarr
modified: 20230705163525235
modifier: drevarr
tags: ChartData
title: 202304102219_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Venomina The Siren", "Mac Chiato", "Black Raspberry Pie", "Ark Darkness", "Koralia Danai", "Gavann", "Fribble Bibble", "Sygaldry Verdandi", "Zaylen Harker", "Johosh The Great", "Drevarr Moonwillow", "Solus Sanctus", "Bella Sassy", "High Sorcer Baradun", "Grasszanine", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Tempest", "Tempest", "Tempest", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[14.7312, 30.0493, 34.1966, 92.3386, 1.7484, 32.7197, 0.0, 0.0, 0.0, 10.5997, 0.0392, 3.7397, 0.0, 4.1528, 1.8963, 1.396, 0.0, 0.0, 2.0257, 2.3477, 16.3744], [141.8861, 0.0, 4.2941, 0.0, 4.9406, 0.0, 1.1211, 2.1952, 5.3978, 25.9141, 57.8063, 0.0, 0.0, 0.0, 3.8902, 0.0, 1.9618, 4.9605], [5.6246, 71.148, 7.4225, 125.3702, 0.0, 0.0, 0.0, 4.5007, 0.8694, 21.3013, 1.4112, 8.4319, 2.7038, 0.9413, 0.0, 0.0, 0.0, 6.9936, 3.3761, 0.0643, 14.6406], [0.0, 15.5347, 49.588, 34.4617, 108.1037, 18.3582, 5.3222, 10.0954, 7.8509, 0.0, 8.3574, 0.0, 4.0572, 8.3241, 2.2702, 7.5191, 2.5279, 0.0, 2.4478, 4.8824, 6.625, 8.7651], [10.8029, 26.95, 37.3777, 162.1555, 5.3909, 7.3786, 13.9814, 10.355, 1.0868, 2.3951, 6.8992, 2.646, 5.195, 3.8759, 0.0, 4.3012, 1.1427, 10.2718, 15.3742, 2.2512], [22.4047, 26.5162, 34.3613, 66.2725, 132.8774, 16.7555, 21.8938, 12.6298, 1.7258, 7.4571, 0.3058, 0.1764, 2.893, 1.2456, 16.9432, 0.882, 2.792, 3.428, 1.661, 5.5576, 0.0643, 4.2381], [28.3018, 14.8225, 10.0734, 186.1786, 19.1595, 26.9741, 16.896, 3.0456, 3.9125, 11.7208, 5.7232, 13.7239, 6.1368, 3.1561, 4.4321, 3.773, 9.0635, 6.8625, 5.3498, 9.455, 21.7683], [11.5042, 7.0531, 27.8932, 52.7529, 181.6742, 4.8081, 7.1366, 16.2624, 11.9455, 4.4475, 11.7718, 4.7432, 11.4307, 7.2912, 5.2602, 6.7914, 5.3199, 9.0116, 4.4584, 14.0757, 7.8792, 6.8869], [19.9094, 51.6093, 79.527, 205.6973, 17.7754, 14.7571, 23.5699, 16.511, 1.5288, 2.5402, 8.5672, 16.9986, 5.755, 12.9037, 2.1295, 10.2718, 12.2578, 3.5054, 8.9578], [12.3427, 29.3731, 57.5382, 67.863, 202.6944, 3.1326, 23.5872, 14.3616, 12.6562, 5.8687, 9.6824, 3.0184, 6.2446, 5.4988, 4.9279, 8.4231, 0.2641, 2.4152, 8.9605, 12.2578, 8.7475, 18.7824], [10.5986, 34.8192, 47.5667, 84.5637, 228.2189, 11.2918, 7.4995, 15.5443, 10.152, 8.4269, 14.4217, 4.7236, 4.5864, 5.4684, 16.9432, 0.9041, 3.0561, 0.0, 8.436, 7.3235, 5.2421, 12.329], [7.3453, 26.5162, 41.9072, 106.036, 240.2304, 11.8746, 14.9386, 12.7565, 14.6189, 13.911, 19.2629, 7.546, 12.9125, 9.9343, 7.9179, 5.8432, 3.6975, 8.1286, 13.5501, 12.2059, 5.2099, 17.6266], [24.1949, 47.1625, 88.8052, 289.0272, 13.3316, 19.2931, 18.7546, 3.8578, 11.0074, 4.802, 16.2641, 14.8862, 18.8812, 4.851, 2.6788, 1.8958, 5.9009, 8.4143, 6.5928, 14.9296], [18.883, 36.337, 65.0842, 117.1698, 339.3254, 24.1134, 28.607, 19.3459, 7.2079, 0.0, 13.6573, 2.3128, 5.6095, 6.5621, 22.3695, 6.2622, 0.8678, 6.1289, 8.0864, 15.6339, 4.9848, 28.3181], [10.4458, 66.4317, 93.0466, 464.6957, 25.0604, 26.0064, 20.233, 27.4442, 12.9948, 14.4844, 2.1521, 0.0, 0.0, 5.1376, 5.2067, 0.0, 17.5557, 0.0, 31.304], [323.4098, 874.5888, 37.3721, 61.0848, 38.3117, 36.4118, 17.1046, 51.9282, 16.9148, 30.3055, 36.0611, 32.6129, 12.1275, 32.3346, 13.7381, 33.919, 47.0576, 18.299, 69.3986], [63.2564, 52.943, 163.9907, 353.0999, 598.3238, 68.3333, 68.5238, 61.9661, 49.9478, 25.7655, 50.3994, 23.5788, 29.106, 41.013, 44.1853, 17.0226, 27.3165, 13.0369, 27.1002, 52.3555, 26.3712, 62.7043], [3.6223, 52.3181, 174.3665, 155.8729, 1153.8566, 54.4918, 62.2944, 50.7725, 54.5839, 16.3354, 68.6941, 31.1836, 40.7484, 40.8003, 86.4326, 18.7425, 44.5214, 33.3455, 58.0032, 70.7942, 37.0805, 76.5262]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

