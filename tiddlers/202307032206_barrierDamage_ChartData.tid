created: 20230703220627000
creator: Drevarr
modified: 20230705163541241
modifier: drevarr
tags: ChartData
title: 202307032206_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Dim Og", "Drevarr Moonwillow", "Arcanophage Farra", "Be\u00eb", "Morvtron", "Drumina", "Newtype Khan", "Cpt Z Brannigan", "Grasszanine", "Vopiscus Zergherdus", "Lucky Leipreach\u00e1n", "Be\u00eb", "Morv\u00e4rth"];
const professions = ["Scrapper", "Scrapper", "Spellbreaker", "Scourge", "Scrapper", "Druid", "Spellbreaker", "Scrapper", "Spellbreaker", "Scrapper", "Scrapper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[14258, 7734, 11728, 11763, 8262], [3406, 3437, 0, 64, 0, 0, 6818, 0, 32, 85, 0, 5402, 913, 2278, 7871, 718, 0, 522, 1929, 4562, 2029, 2498, 6282, 1309, 1763, 8572], [12553, 0, 720, 0, 0, 0, 24698, 0, 269, 0, 0, 3121, 3152, 0, 3418, 0, 0, 3627, 3403, 5839, 0, 3818, 0, 0, 0, 0], [11109, 0, 1248, 1015, 0, 709, 16995, 1015, 0, 0, 0, 13000, 11638, 13739], [1806, 0, 0, 0, 24669, 0, 526, 845, 0, 22356, 9714, 4062, 17298], [4861, 0, 0, 0, 0, 4600, 0, 0, 0, 0, 894, 4871, 8170, 4860, 4836, 4735, 5287, 361, 8423, 4820, 4493, 4812, 5654, 8160, 5641], [12933, 3627, 0, 0, 0, 0, 17218, 187, 0, 0, 0, 6242, 3437, 3118, 3067, 0, 3031, 5798, 3031, 3031, 300, 3499, 6344, 6234, 4556, 9889], [6356, 14061, 9161, 3535, 10894, 15987, 1835, 16652, 24523], [11684, 1483, 1133, 2477, 0, 0, 11008, 0, 0, 3, 10458, 3708, 269, 269, 3423, 4606, 3630, 0, 6789, 3987, 1016, 7901, 10230, 3923, 18839], [6061, 60, 2565, 778, 89137, 2019, 22917, 10794, 9600], [16919, 0, 2781, 0, 0, 61375, 353, 739, 0, 347, 15226, 9253, 8296, 5441, 7285, 9064, 16908, 300], [3437, 0, 0, 24470, 0, 348, 68855, 39329, 41858, 94347, 45822, 91586], [22186, 29350, 31354, 91025, 59255, 85007, 46652, 23867, 144169]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

