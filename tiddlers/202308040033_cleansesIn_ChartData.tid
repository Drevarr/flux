created: 20230804003338000
creator: Drevarr
tags: ChartData
title: 202308040033_cleansesIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Briezzia", "Dragnar Tyrson", "Phantasmal Akihito", "Morv\u00e4rth", "Govinda Ektar", "Rennok Mistveil", "Necrotic Windrunner", "Squishy Jellyfish", "Aezlenne", "K\u00e2 \u00d4tik R\u00e6j", "Jerryatric Reflexes", "Latedoctor", "Big Boy Belkins", "Astraea Lumena", "Revitiel", "Surethang", "Astraea Lumena", "Scarlet Merc\u00fcry", "Cestaphine", "Gwyn Ghosthouse", "Tirluka", "Kellenas Cairek", "Eternal Depravity", "Sister Elon\u00edth", "Rafaellagabriela", "Jimbo The Pleb", "Chocolate Teapot", "Drevarr Moonwillow", "World Devourerer"];
const professions = ["Druid", "Berserker", "Virtuoso", "Reaper", "Vindicator", "Soulbeast", "Scourge", "Firebrand", "Virtuoso", "Berserker", "Spellbreaker", "Reaper", "Holosmith", "Firebrand", "Vindicator", "Firebrand", "Willbender", "Firebrand", "Weaver", "Scourge", "Tempest", "Harbinger", "Scrapper", "Dragonhunter", "Firebrand", "Berserker", "Chronomancer", "Scrapper", "Guardian"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Condition Cleanses Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.123, 0.32], [0.0164, 0.121, 0.1818, 0.0116, 0.0541, 0.12], [0.1579, 0.0, 0.0873, 1.08], [0.0492, 0.4014, 0.1275], [0.0, 0.0902, 0.0915, 0.2255, 0.0217, 0.0667, 0.0, 0.0242, 0.1983, 0.0571, 0.0581, 0.0, 0.0, 0.04], [0.098, 0.0109, 0.0222, 0.1148, 0.121, 0.1405, 0.1714, 0.0465, 0.0227, 0.1404, 0.0278, 0.68], [0.1176, 0.0924, 0.0, 0.1148, 0.0887, 0.1074, 0.1143, 0.0349, 0.0, 0.0227, 0.0877, 0.0, 0.0952, 0.08], [0.2353, 0.0598, 0.1556, 0.0164, 0.2177, 0.2562, 0.0, 0.2093, 0.0227, 0.2632], [0.0889, 0.0909, 0.0, 0.0492, 0.3521, 0.1373, 0.0054, 0.3333, 0.0, 0.0403, 0.0826, 0.0, 0.0814, 0.0, 0.0175, 0.0, 0.0238, 0.32], [0.0333, 0.4, 0.203, 0.2623, 0.2887], [0.197, 0.0667, 0.3361, 0.4155], [0.2364, 0.0333, 0.1778, 0.2242, 0.0, 0.2049, 0.4366], [0.0328, 0.2746, 0.0784, 0.163, 0.4667, 0.0656, 0.3065, 0.2149, 0.0, 0.1279, 0.0, 0.0455], [0.2451, 0.1304, 0.3556, 0.0164, 0.2984, 0.2562, 0.0571, 0.2093, 0.1591, 0.2982, 0.3333], [0.2, 0.1667, 0.2889, 0.2576, 0.0, 0.4508, 0.3732, 0.1275], [0.1091, 0.6889, 0.2788, 0.0333, 0.1885, 0.6549], [0.3091, 0.1, 0.4889, 0.3394, 0.0, 0.3689, 0.338], [0.3273, 0.0667, 0.0, 0.2909, 0.2541, 0.5986, 0.1667], [0.0667, 0.0333, 0.0902, 0.2535, 0.3039, 0.1359, 0.1778, 0.1639, 0.1774, 0.1901, 0.2857, 0.0814, 0.0541, 0.0702, 0.0238, 0.1508, 0.04], [0.0182, 0.0333, 0.1333, 0.1697, 0.0, 0.4262, 0.2042, 0.0784, 0.1033, 0.5111, 0.0656, 0.1452, 0.3554, 0.0286, 0.1977, 0.0, 0.0, 0.0, 0.0952, 0.24], [0.0667, 0.1333, 0.3515, 0.2049, 0.0282, 0.2941, 0.0924, 0.3111, 0.082, 0.2419, 0.2645, 0.1143, 0.1512, 0.027, 0.0, 0.3333, 0.0476], [0.2545, 0.0, 0.2222, 0.1636, 0.0333, 0.0328, 0.3803, 0.3627, 0.0598, 0.4, 0.3279, 0.0968, 0.3884, 0.1429, 0.0349, 0.0, 0.0, 0.0, 0.1389], [0.1818, 0.2, 0.3778, 0.3242, 0.0, 0.2295, 0.2394, 0.1275, 0.0435, 0.4444, 0.0492, 0.1048, 0.3719, 0.0286, 0.2907, 0.1364, 0.1579], [0.3818, 0.2, 0.4667, 0.3576, 0.1475, 0.2465, 0.2157, 0.125, 0.3333, 0.0492, 0.2339, 0.2397, 0.1714, 0.2326, 0.0, 0.2045, 0.1754, 0.2341, 0.16], [0.3455, 0.0333, 0.4444, 0.4273, 0.0, 0.1557, 0.1408, 0.2451, 0.1033, 0.2667, 0.0164, 0.1935, 0.2562, 0.0, 0.3023, 0.0, 0.1818, 0.1754, 0.0, 0.2937, 0.44], [0.5818, 0.2333, 0.2889, 0.4303, 0.0333, 0.3115, 0.3662, 0.2647, 0.1359, 0.3778, 0.0164, 0.2742, 0.3636, 0.1429, 0.2209, 0.0, 0.1818, 0.2105], [0.4182, 0.1667, 0.3778, 0.4091, 0.0, 0.4426, 0.4789, 0.2941, 0.1576, 0.4889, 0.0328, 0.1774, 0.2893, 0.0286, 0.1395, 0.027, 0.0, 0.0702, 0.3333, 0.2183, 0.2], [0.3455, 0.1778, 0.4576, 0.0, 0.3279, 0.5704, 0.4314, 0.1793, 0.4444, 0.0, 0.2581, 0.3306, 0.0857, 0.186, 0.0, 0.25, 0.1579, 0.2857, 0.2579, 1.04], [0.6, 0.1333, 0.3333, 0.4939, 0.0333, 0.2787, 0.4859, 0.5686, 0.1957, 0.3111, 0.0492, 0.25, 0.3058, 0.0571, 0.2907, 0.0811, 0.1591, 0.3158, 0.119, 0.2381, 0.8]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

