created: 20230520220730000
creator: Drevarr
modified: 20230705163531044
modifier: drevarr
tags: ChartData
title: 202305202207_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Tika Mi", "Artakama Nahid", "Tribal S", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Tempest", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[227.0838, 132.9493, 19.1957, 76.0746, 0.0, 52.8609, 0.0, 55.2258, 19.8217, 0.6837, 252.8968, 12.7908, 745.0214, 24.5603, 52.217, 150.0592, 46.8323, 123.4741, 615.9736, 30.447, 848.556, 95.8496, 47.5847, 392.8824, 3.5035, 54.99, 56.0582, 221.9622, 4.6656, 0.0, 155.7864, 263.5565], [363.5917, 490.6528, 219.4592, 203.9642, 96.6944, 82.7548, 0.0, 300.1022, 156.3742, 354.8403, 780.2849, 175.3788, 1487.3357, 350.7187, 207.3997, 394.3917, 85.1598, 310.7227, 988.367, 266.067, 1513.782, 220.4791, 145.4424, 1052.8639, 329.2632, 206.6786, 627.0552, 109.728, 210.5559, 157.4987, 219.7008, 531.9887], [747.9314, 513.7238, 191.6401, 229.8841, 90.8396, 105.5566, 0.0, 237.2809, 140.3516, 423.2103, 1101.4446, 166.6884, 1965.6979, 312.9439, 116.5938, 362.8706, 161.568, 220.3001, 1040.4032, 305.3268, 1887.426, 129.6016, 1083.1676, 23.231, 343.1799, 242.7505, 588.9429, 98.496, 299.2338, 236.0732, 489.5748, 612.5715], [1365.3648, 184.842, 27.9653, 80.535, 218.858, 0.0, 0.0, 228.9337, 81.8995, 355.3873, 1206.8982, 47.124, 2414.281, 389.2944, 246.092, 310.3353, 189.5731, 387.4009, 2227.976, 143.7588, 2767.119, 4.6323, 2048.9274, 46.2865, 268.0128, 222.3788, 594.3761, 12.7872, 47.3193, 0.0, 0.0, 392.5422], [2392.751, 863.5544, 197.6327, 281.1539, 5.3792, 173.6694, 142.1135, 665.3992, 33.2983, 553.4779, 1795.8309, 245.6976, 4122.2534, 510.0271, 256.8663, 985.2826, 185.2646, 329.3829, 2348.6487, 318.0564, 3430.017, 193.9098, 331.1075, 2214.1512, 54.925, 719.7345, 308.513, 987.3243, 405.9936, 184.0158, 217.7981, 485.1, 1489.0541], [3660.2422, 1157.2478, 664.2485, 722.6344, 441.9308, 492.7794, 0.0, 618.5997, 26.5934, 1054.7668, 2679.41, 594.3948, 5842.679, 1293.0208, 504.3645, 1585.0552, 609.1114, 943.7135, 4673.8332, 371.7288, 5340.723, 956.9108, 412.2765, 3657.7656, 973.323, 535.3947, 1862.3092, 322.6824, 83.3499, 537.5702, 544.9752, 2169.7974]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

