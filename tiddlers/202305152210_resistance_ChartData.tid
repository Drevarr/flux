created: 20230515221048000
creator: Drevarr
modified: 20230705163530308
modifier: drevarr
tags: ChartData
title: 202305152210_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Blancooo Padreee", "Gavann", "Venom The Ferocious", "Eibh\u00ebar", "Black Raspberry Pie", "Primal Clone", "Ryvalia Fazebringer", "Ark Darkness", "Sygaldry Verdandi", "Domitia Gravestorm", "Jeckyll Mbs", "Grasszanine", "Koralia Danai", "Sub Train", "Bella Sassy", "Xanvias Einzbern", "Solus Sanctus", "Newtype Khan"];
const professions = ["Berserker", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Firebrand", "Firebrand", "Spellbreaker", "Berserker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 44.3414, 0.0, 63.7637, 2.039, 27.972, 0.0, 24.0095, 0.0, 0.0, 37.44, 86.6909, 22.44, 41.7821, 42.1153, 35.7256, 0.0, 18.5655, 0.0, 22.3808], [62.061, 6.6964, 0.0, 31.5859, 105.8765, 10.4341, 11.6678, 5.8968, 4.4909, 17.9061, 0.0, 12.7764, 40.014, 11.2493, 63.7296, 24.0605, 6.5537, 35.9588, 6.5292, 1.6253, 6.6856, 8.0233], [4.5053, 0.0, 0.0, 0.0, 26.0261, 29.0088, 0.0, 29.2237, 0.0, 34.7004, 68.9715, 60.7104, 57.6912, 90.312, 11.923, 30.3056, 0.0, 26.4417, 9.079], [3.461, 13.137, 0.0, 6.9336, 29.2942, 84.3264, 113.1062, 0.0, 5.2067, 28.321, 3.625, 12.2472, 7.0754, 24.8583, 5.8374, 9.6012, 29.5425, 26.6947, 40.4736, 25.3555, 6.7906, 27.7413, 21.362, 30.8174, 5.3802, 24.5626], [0.0, 0.0, 29.1945, 91.8221, 129.7046, 6.6287, 7.0739, 34.9458, 13.6502, 7.1064, 5.664, 19.5633, 6.8752, 19.152, 23.8095, 32.8104, 23.4192, 27.4685, 4.5994, 32.7534, 21.0781, 29.2547, 12.3427, 8.7271], [27.18, 0.0, 26.7035, 84.0922, 117.8486, 0.0, 5.6014, 14.7402, 11.6678, 15.4008, 6.8554, 28.4153, 6.8427, 13.4316, 37.1475, 20.3112, 37.0464, 46.0762, 5.0929, 28.2658, 21.4329, 21.3784, 0.0, 33.9232], [6.831, 15.704, 6.8468, 0.0, 28.2978, 96.2726, 119.2714, 7.5596, 24.0149, 10.2235, 5.8536, 6.3239, 10.9538, 14.7881, 13.8852, 35.9775, 23.6592, 48.7968, 27.9456, 3.7605, 27.9744, 22.4265, 31.8801, 7.5362, 29.7707], [17.032, 17.516, 8.7529, 0.0, 62.5739, 108.9216, 263.6774, 6.8462, 42.5643, 51.6557, 68.7096, 0.0, 75.9896, 7.5886], [8.6298, 19.026, 4.9658, 0.0, 21.323, 116.4173, 150.8083, 0.0, 0.0, 22.5243, 28.0934, 37.7784, 7.5886, 44.9066, 7.8156, 5.7456, 38.259, 23.5699, 69.9312, 63.5933, 7.1656, 43.5352, 23.2782, 28.317, 7.1801, 40.8204], [27.6655, 63.873, 0.0, 28.9008, 60.1826, 127.6608, 148.6742, 0.0, 0.0, 39.4176, 22.5427, 11.124, 0.0, 44.5833, 0.0, 42.8904, 86.5215, 23.6592, 77.8464, 91.9478, 39.6478, 71.7427, 0.0, 73.3242, 0.0, 66.9314], [21.9958, 110.079, 0.0, 0.0, 35.97, 118.2912, 156.4992, 0.0, 0.0, 141.7707, 36.5045, 26.2656, 3.9593, 69.2395, 0.0, 0.0, 43.9704, 43.4112, 72.1133, 31.1398, 32.9282, 8.0196, 95.2652, 14.024, 103.3178], [87.2256, 106.8768, 0.0, 103.3539, 0.0, 19.7568, 159.588, 93.3422, 147.6144, 229.4947, 0.0, 160.6197, 119.5845, 29.3172, 0.0, 84.1745], [13.6848, 26.727, 0.0, 0.0, 41.7492, 126.4896, 249.9245, 0.0, 0.0, 63.9293, 29.7926, 54.756, 7.6436, 66.7738, 7.9778, 25.2504, 116.532, 75.1291, 151.6944, 109.6694, 3.4051, 108.3425, 18.3103, 55.5714, 124.0799], [19.2179, 30.049, 26.7624, 35.5715, 90.1824, 225.0269, 7.5732, 5.7684, 50.0172, 60.8314, 80.3736, 5.9756, 93.6936, 7.9778, 90.846, 145.314, 91.0656, 112.1184, 116.281, 29.4225, 141.5621, 43.6465, 63.0726, 0.0, 75.94], [71.0652, 46.81, 5.8687, 7.9488, 52.1117, 153.6614, 358.2883, 11.4002, 54.9858, 107.9842, 60.48, 7.9369, 116.8138, 7.9778, 47.5776, 162.396, 59.6837, 114.24, 150.0202, 29.0968, 103.7384, 44.7821, 117.0812, 19.2262, 21.5363], [30.4207, 172.744, 0.0, 27.4752, 32.4826, 265.3939, 437.2493, 0.0, 51.7031, 107.3218, 23.3357, 17.5824, 0.0, 54.1224, 0.0324, 43.7976, 102.3165, 79.5038, 122.3184, 140.6141, 39.3517, 133.9857, 0.0, 97.5156, 0.0, 67.7759], [92.563, 40.0528, 11.6856, 46.5319, 375.4867, 496.055, 7.0835, 19.4152, 123.8838, 82.7794, 54.0, 0.0, 135.6495, 19.4904, 28.2996, 153.972, 105.4397, 156.9984, 164.1974, 34.8016, 114.9864, 19.9426, 85.2636, 170.3196], [33.7451, 69.46, 43.7646, 0.0, 111.9954, 263.7542, 608.687, 0.0, 7.0435, 316.6654, 156.9494, 38.448, 3.446, 163.216, 22.6361, 91.602, 266.4675, 87.048, 264.7104, 406.3018, 76.7491, 444.793, 21.8588, 97.3906, 7.3186, 288.4876]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

