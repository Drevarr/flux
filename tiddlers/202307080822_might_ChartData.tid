created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Elonith Requiem", "Emobilized", "Conky Jr", "Pet Pirate", "Synomi\u00f1 Spyce", "Heymerino", "F\u00f9gly", "Ain Sof Aur", "Wall Knot", "Legacy Of Mathus", "Kittendoo", "Gestern Yesteryear", "Aronorf Xideliesi", "Lost Uber Driver", "A\u00fcrora Windrunner", "Mother Ship", "Ateriuz", "Twinks R Us", "Drevarr Moonwillow", "Legoh Brave"];
const professions = ["Scourge", "Vindicator", "Herald", "Druid", "Scourge", "Chronomancer", "Tempest", "Guardian", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Herald", "Firebrand", "Tempest", "Berserker", "Firebrand", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.9442, 5.647, 12.0175, 6.1862, 1.3652, 4.5012, 9.8685, 4.4198, 2.7051, 3.2987], [0.0708, 7.6735, 0.0, 0.0, 3.1775, 2.4007, 10.2509, 0.5729, 13.8518, 3.3834, 0.0, 0.7069, 1.1978, 5.7082, 1.272, 2.3989, 1.0746], [5.1187, 32.4113, 4.8079, 6.5076, 5.3229], [3.8688, 45.5692, 0.0, 10.9736], [3.3046, 6.7109, 21.5683, 5.2452, 0.0, 0.5891, 4.5012, 16.3508, 4.7432, 5.5889, 0.0], [0.0, 0.0, 0.0, 9.3605, 3.5743, 0.0, 22.5802, 8.9489, 1.1856, 3.9224, 0.0, 18.576, 0.0, 1.3781, 7.1471], [0.0, 17.9048, 1.961, 1.2442, 3.4255, 2.813, 7.6207, 25.9958, 4.6246, 0.0, 3.6383, 1.4285, 19.9305], [16.6355, 13.0346, 0.0, 0.0, 2.4335, 0.0, 2.9674, 0.0, 24.9205, 5.4054, 0.0, 0.0, 0.0, 20.0272, 0.0, 2.6286, 3.5486], [10.1526, 9.6342, 12.1691, 2.5079, 0.4795, 7.502, 3.104, 6.5417, 1.7186, 19.9237, 3.6837, 0.0, 4.5184, 0.6919, 9.288, 0.9379, 0.0, 4.7981], [25.4426, 15.939, 22.0903, 4.0554, 1.1729, 4.278, 7.8813, 21.8506, 3.0485], [4.4795, 13.386, 21.1087, 5.6879, 23.1495, 16.4965, 0.9633, 1.386, 5.2601, 41.2155], [21.5895, 5.3838, 13.0992, 3.9753, 0.0, 0.0, 5.5533, 9.037, 14.6903, 11.1952, 9.3694, 4.7794, 1.982, 2.2022, 36.5715, 0.0, 4.6702, 4.998], [35.3446, 6.083, 1.4321, 5.456, 12.0765, 15.8484, 1.1662, 31.2455, 16.9569, 0.8027, 8.3437, 1.6591, 22.833, 2.4255, 2.2202, 1.2245], [42.6938, 12.2923, 14.1037, 5.1559, 1.2425, 68.7892, 7.0286, 6.38, 15.6687], [30.6412, 13.0346, 29.6088, 2.081, 0.0, 7.2075, 6.984, 12.2741, 3.5191, 11.9543, 8.1882, 0.0, 3.0284, 8.1394, 27.9607, 0.0, 5.7675, 5.7477], [10.1526, 9.3509, 57.2799, 3.5218, 0.0, 0.0, 0.0, 3.4394, 14.4448, 51.4855, 6.4464, 0.0, 2.2869, 0.0, 9.8685, 9.357, 20.3139, 0.075], [28.8675, 9.6342, 45.7309, 4.0287, 1.6524, 5.983, 9.3848, 20.4343, 5.5447, 24.288, 4.7047, 0.0, 3.4996, 2.351, 37.926, 3.8485, 10.6418, 4.6981], [48.8057, 45.4793, 57.9775, 0.0, 0.0065, 0.0, 12.2948, 33.7874, 48.7025, 10.1902, 4.4584, 6.6736], [71.9853, 53.13, 49.7614, 9.6048, 6.2467, 7.657, 15.9322, 58.403], [143.006, 11.0855, 3.2983, 5.611, 20.1517, 85.9186, 21.8513, 106.007]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

