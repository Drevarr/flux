created: 20230318225613000
creator: Drevarr
modified: 20230705163522564
modifier: drevarr
tags: ChartData
title: 202303182256_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Aldarasuum", "Dark Sidiuz", "Nelliel T", "Oo Dads Mad", "Newtype Khan", "Morv\u00e4rth", "Demon Sekhmet", "Venomina The Fierce", "Nazhul Naxxremis", "Rina Of Theros", "Primal Clone", "Smol Gluvs", "Be\u00eb"];
const professions = ["Chronomancer", "Scourge", "Reaper", "Spellbreaker", "Spellbreaker", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Chronomancer", "Scourge", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1613, 0.3778, 0.2059, 0.5795, 0.2407], [0.0, 0.284, 0.1797, 0.1078, 0.1186, 0.0, 0.4479, 0.5, 0.0, 0.0, 0.0179, 0.2045, 0.3636, 0.0, 0.0, 0.0263], [0.0, 0.2083, 0.0, 0.358, 0.2135, 0.0637, 0.0, 0.0, 0.0521, 0.2833, 0.2271, 0.0, 0.0268, 0.0455, 0.0682, 0.0, 0.2222, 0.0, 0.0645, 0.0296, 0.1397, 0.287], [0.0, 0.0893, 0.0, 0.8148, 0.3255, 0.3382, 0.0, 0.3854, 0.8167], [0.0472, 0.131, 0.1356, 0.4938, 0.3594, 0.299, 0.0169, 0.0, 0.5104, 0.7333, 0.3865, 1.1744, 0.1875, 0.1818, 0.1477, 0.0833, 0.0], [0.7037, 0.2786, 0.2353, 0.0, 0.0, 0.5625, 0.6083, 0.1787, 0.3837, 0.2232, 0.9545, 0.375, 0.0278, 0.0, 0.2632, 0.6452, 0.4889, 0.2059, 0.5682], [0.217, 0.3869, 0.0169, 0.8765, 0.4349, 0.5098, 0.0169, 0.0, 0.8083, 0.343, 0.1977, 0.3125, 0.4091, 1.0795, 0.0278], [0.0189, 0.3631, 0.0847, 0.0988, 0.1641, 0.5196, 0.0508, 0.3854, 0.825, 0.6329, 0.1279, 0.1518, 1.3409, 0.0795, 0.0, 0.0417, 0.6579, 0.3065, 0.5037, 0.1838, 1.0455, 0.3611], [0.066, 0.5, 0.0678, 1.3827, 0.2448, 0.4608, 0.0, 0.0, 0.7812, 0.9583, 0.5556, 0.5, 0.0893, 0.75, 1.3864, 0.0694], [0.0283, 0.3155, 0.2203, 0.7407, 0.4609, 0.4069, 0.0847, 0.0385, 0.4896, 1.075, 0.4686, 1.2674, 0.2232, 0.4318, 0.0, 0.0, 0.0694, 0.2105, 0.2903, 0.563, 0.3529, 0.0114, 0.5833], [0.1038, 0.2143, 0.0339, 0.8395, 0.4453, 0.25, 0.0339, 0.0769, 0.6979, 0.9417, 0.3527, 1.1395, 0.0357, 0.8409, 0.7386, 0.0, 0.0417, 0.7105, 0.7581, 0.7407, 0.2647, 0.625, 0.5278], [0.066, 0.2857, 0.0678, 0.8025, 0.4427, 0.3186, 0.1356, 0.1154, 0.7604, 0.8417, 0.4541, 1.3023, 0.3036, 0.9545, 0.9432, 0.0, 0.0417, 0.6316, 0.8871, 0.5037, 0.2794, 0.7727, 0.2685], [0.0755, 0.3155, 0.1525, 1.4198, 0.7188, 0.3775, 0.0508, 0.0385, 0.8646, 1.425, 0.0725, 1.2326, 0.2946, 1.1136, 1.7614, 0.0278, 0.125, 1.2632, 0.8387, 0.7333, 0.4412, 0.625, 0.2222]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

