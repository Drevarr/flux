created: 20230610164704000
creator: Drevarr
modified: 20230705163534965
modifier: drevarr
tags: ChartData
title: 202306101647_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Cat Wigglebooty", "Tomitigas", "Zhavashian", "Sakis Ranger", "Drevarr Moonwillow", "Arriasa"];
const professions = ["Scrapper", "Scrapper", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 21.696, 53.7754, 90.2117, 0.0, 14.5582, 0.0, 31.9111, 0.0, 0.0, 0.0, 5.4912, 0.0, 0.0, 339.1219, 98.072, 0.0, 806.1628, 0.0, 0.0, 59.3013, 150.5981], [0.0, 0.0, 20.928, 96.0307, 41.0506, 0.0, 30.1006, 0.0, 16.7737, 0.0, 427.2864, 95.4693, 0.0, 713.3364, 207.0422, 0.0, 136.6203, 82.0544], [10.391, 62.795, 156.912, 73.6128, 114.1042, 72.1961, 284.5098, 62.1711, 51.0729, 43.6757, 60.6866, 45.6246, 45.5083, 18.7387, 1.4159, 65.8752, 26.9509, 53.5665, 257.7367, 64.8074, 96.4947, 186.0672, 74.3835], [62.2296, 164.9525, 259.104, 161.1418, 227.8277, 47.984, 413.5375, 137.8133, 150.7668, 0.0, 23.6373, 81.2489, 54.8891, 86.6237, 111.0348, 136.8038, 88.642, 84.0475, 497.6731, 259.188, 197.0035, 317.7895, 262.5939], [199.75, 264.6706, 539.664, 178.0531, 352.619, 178.2091, 1078.2256, 40.5266, 10.8634, 10.8602, 0.0, 408.8003, 193.7478, 188.371, 237.3214, 845.8195, 124.4949, 1307.3666, 184.7594, 541.399, 554.0616, 604.8173], [365.1732, 249.055, 371.52, 436.4928, 494.3342, 302.8313, 606.6215, 271.275, 176.605, 100.8113, 257.7726, 428.2907, 91.4056, 135.3283, 1329.9571, 235.9197, 98.0025, 2239.0142, 411.502, 305.415, 680.4777, 846.9224], [142.8417, 611.616, 446.1466, 439.8149, 276.058, 1011.3408, 471.8772, 0.0, 328.9253, 456.456, 193.7021, 351.486, 2140.944, 618.0422, 22.8845, 3370.4372, 661.0688, 1080.8851, 1117.861, 1070.7656]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

