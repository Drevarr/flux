created: 20230222222328000
creator: Drevarr
modified: 20230705163519935
modifier: drevarr
tags: ChartData
title: 202302222223_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Primal Clone", "Kiloak", "Black Raspberry Pie", "Tootsie Pop Bringer", "Eibh\u00ebar", "Venomina The Siren", "Cat Wigglebooty", "Zadie Miststep", "Etchery", "Fribble Bibble", "Mac Aaroni", "Drevarr Moonwillow", "Tribal S", "Mike The Archmagus"];
const professions = ["Chronomancer", "Firebrand", "Chronomancer", "Scrapper", "Chronomancer", "Tempest", "Scrapper", "Tempest", "Scrapper", "Scrapper", "Tempest", "Scrapper", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.1987, 0.195, 0.0, 0.0394, 0.1524, 0.5065, 0.796, 0.325, 0.2398, 0.123, 0.517], [0.2496, 0.045, 0.0116, 0.0394, 0.0931, 0.0988, 0.2239, 0.2114, 0.3621, 0.1471, 0.5909], [0.4816, 0.1616, 0.3038, 0.195, 0.058, 0.2235, 0.127, 0.7165, 0.5472, 0.222, 0.23, 0.2011, 0.4432], [0.0, 0.0, 0.2892, 0.135, 0.0, 0.3615, 0.3641, 0.7659, 1.281, 0.4968, 0.2202, 0.108, 0.9813], [0.6192, 0.4308, 0.341, 0.12, 0.2205, 0.138, 0.0762, 0.5435, 1.281, 0.4096, 0.2789, 0.2341, 0.7281], [0.4934, 0.15, 0.0, 0.2958, 0.0508, 0.9882, 1.8406, 0.8112, 0.5382, 0.2461, 1.3929], [1.032, 0.4039, 0.6305, 0.225, 0.0, 0.4667, 0.398, 0.3459, 0.3234, 0.362, 0.1615, 0.3841, 0.6542], [2.1786, 1.9927, 0.4065, 0.8249, 0.1625, 0.7361, 0.7875, 1.5194, 1.2312, 1.1733, 0.7878, 0.9904, 2.2898], [1.5594, 0.9963, 1.1266], [0.9173, 0.4578, 0.9604, 0.075, 0.1044, 0.5587, 0.5165, 0.9759, 0.6467, 0.6897, 0.6459, 0.5612, 1.4984], [1.1925, 0.9694, 1.3768, 0.36, 0.2205, 1.1502, 0.3472, 1.3711, 1.8158, 0.7901, 0.8612, 0.5762, 1.8677], [1.5028, 0.8099, 0.3829, 0.9728, 0.7198, 1.2723, 2.3505, 1.168, 0.8856, 1.2815, 2.2792], [1.6053, 1.131, 1.8509, 0.51, 0.4177, 1.0319, 0.7706, 1.4823, 2.0769, 1.0385, 0.9395, 1.0174, 1.6356], [1.7658, 1.5888, 2.1864, 0.6899, 0.3597, 1.1962, 0.9823, 1.8653, 2.6988, 1.3344, 0.9639, 1.2815, 2.6908]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

