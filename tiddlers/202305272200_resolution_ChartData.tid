created: 20230527220043000
creator: Drevarr
modified: 20230705163532063
modifier: drevarr
tags: ChartData
title: 202305272200_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Rx Medic", "Kaehln Lao", "Blanco Padre Guard", "Sygaldry Verdandi", "Aronorf Xideliesi", "Crusader Siolith", "Lucas Ryn", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[58.2462, 83.0088, 64.5848, 41.148, 104.5299, 482.7612, 170.424, 231.2432, 63.2577], [51.246, 147.663, 298.102, 102.7569, 68.5087, 190.953, 138.915, 266.5537, 0.0, 126.4474, 144.2269, 0.0, 128.0317, 0.0, 58.7776], [0.0, 45.8567, 278.9035, 507.2382, 256.284, 297.7009, 194.2768, 156.8448], [40.4121, 43.6736, 39.5063, 38.676, 31.5427, 101.9442, 37.3572, 85.0845, 342.0029, 110.849, 321.165, 408.6661, 128.6258, 256.0673, 171.2844, 116.9154, 184.0713], [116.5255, 329.67, 510.4886, 95.7035, 250.5031, 391.608, 277.263, 343.9891, 0.0, 186.8069, 56.4349, 26.0064, 166.3547, 73.767, 65.5424], [127.1794, 64.6636, 42.0168, 0.0, 30.24, 0.0, 228.6474, 10.0602, 122.3293, 341.709, 99.391, 161.838, 295.5119, 106.8037, 255.8354, 254.5452, 197.3916, 142.8301, 0.0, 187.2842, 51.2566, 19.3309, 177.7545, 13.0698, 86.8224], [127.5756, 76.6667, 88.3548, 0.0, 168.888, 75.871, 550.5144, 141.3288, 148.9792, 349.2764, 133.8703, 205.416, 499.4807, 44.3818, 302.7251, 130.095, 286.8264, 204.4035, 29.6415, 196.195, 74.5686, 261.0185, 146.9779, 128.2624], [134.7551, 53.7371, 29.5484, 29.6324, 48.564, 47.6714, 313.3782, 23.7654, 225.3491, 587.4661, 92.1902, 474.903, 353.2222, 157.6716, 338.3705, 438.354, 305.802, 339.8794, 0.0, 188.3716, 26.6947, 13.8575, 243.5202, 112.6224, 135.9232], [0.0, 12.1204, 160.1762, 39.4425, 106.884, 47.6458, 474.1152, 111.294, 136.3232, 591.4335, 242.9849, 582.066, 584.3868, 230.1158, 423.6296, 488.5398, 267.3216, 520.0573, 8.9778, 261.3546, 179.1651, 286.7288, 171.3478, 244.5632], [213.8926, 122.4727, 86.2711, 81.5875, 88.248, 73.6762, 557.0382, 64.071, 370.4592, 627.9481, 283.4561, 670.923, 632.4652, 102.965, 345.4416, 719.271, 312.5682, 386.6723, 0.0, 248.9963, 79.985, 56.201, 338.4959, 167.5053, 175.9744]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

