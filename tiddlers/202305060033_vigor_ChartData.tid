created: 20230506003334000
creator: Drevarr
modified: 20230705163528715
modifier: drevarr
tags: ChartData
title: 202305060033_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Demon Dalham", "Miphest\u00f6", "Air One Com", "Blancooo Padreee", "Smol Daddy Tika", "Mrs Stealth Monkey", "Tegan Parker", "Kaotic Reaper Z", "Artakama Nahid", "\u00c1rkantor", "Mac Adaymia", "Zaidy Sagemist", "Newtype Khan", "Drevarr Moonwillow"];
const professions = ["Dragonhunter", "Tempest", "Firebrand", "Spellbreaker", "Spellbreaker", "Vindicator", "Tempest", "Tempest", "Tempest", "Vindicator", "Vindicator", "Vindicator", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[151.8959, 123.0629, 0.0, 0.0, 0.0, 0.0, 292.1501, 0.0, 36.5801, 0.0, 0.0, 0.0, 100.2456, 0.0, 151.716, 240.0746], [11.9988, 278.2632, 50.5557, 17.2494, 3.7529, 365.2805, 150.9881, 213.8218, 0.0, 0.0, 2.9825, 369.684], [0.0, 128.5498, 0.0, 0.0, 0.0, 0.0, 354.8863, 49.8092, 77.7074, 0.0, 0.0, 18.2165, 202.5324, 24.9374, 298.356, 414.8527], [109.589, 130.9013, 0.0, 0.0, 45.0775, 0.0, 269.8769, 0.0, 0.0, 0.0, 41.6515, 87.8662, 167.6052, 93.7684, 248.442, 472.2939], [214.2008, 259.7123, 103.0559, 0.0, 0.0, 0.0, 118.048, 156.7103, 142.9858, 58.4892, 31.2077, 45.9068, 181.6668, 56.3162, 238.008, 524.8256], [246.1258, 78.1803, 19.5804, 15.0328, 569.8227, 193.3844, 156.2233, 45.7934, 21.961, 27.3394, 181.8936, 48.4945, 49.914, 739.8616], [95.0127, 419.6157, 31.7817, 31.5684, 0.0, 597.293, 91.8153, 166.6315, 16.7152, 32.9827, 28.8014, 303.2316, 63.7238, 295.818, 724.1513], [277.206, 2841.6186], [164.7835, 471.6104, 155.3549, 32.2677, 23.4365, 586.5276, 167.3743, 165.3178, 32.2384, 73.3958, 65.5268, 364.014, 73.524, 321.48, 652.9635], [254.6412, 1237.6834, 88.9083, 37.962, 13.2328, 1718.3774], [182.204, 488.8549, 92.529, 27.7389, 3.5146, 0.0, 714.5985, 237.6013, 213.2155, 45.2668, 35.9962, 48.977, 420.714, 67.7727, 439.356, 828.7236], [185.4037, 517.857, 87.2991, 32.6007, 5.0379, 17.2679, 830.0479, 276.8764, 151.6761, 0.0, 22.2516, 456.7752, 55.396, 431.742, 1047.1964], [342.3658, 675.4088, 231.993, 74.6586, 0.0, 0.0, 835.245, 419.8014, 353.0687, 158.6138, 85.7386, 52.7197, 681.7608, 54.2918, 809.058, 307.3347], [426.9795, 1394.7126, 153.8797, 72.6939, 29.6659, 29.9865, 1777.4014, 748.3077, 455.3313, 127.013, 83.881, 56.17, 1278.2448, 178.1507, 1396.746, 2711.5168]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

