created: 20230506002551000
creator: Drevarr
modified: 20230705163528222
modifier: drevarr
tags: ChartData
title: 202305060025_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Viral Marketing", "Xina Xino", "Drevarr Moonwillow", "Zaylen Harker", "Air One Com", "Ark Darkness", "Aronorf Xideliesi", "Lucas Ryn", "Solus Sanctus", "Koralia Danai", "Bella Sassy", "Jupi Jupi Jupi"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[71.0151, 291.0659, 64.9044, 24.309, 0.0, 0.0, 415.024], [0.0, 378.162, 753.6082], [78.2943, 75.2814, 48.3368, 150.125, 3.33, 0.0, 0.0, 99.1157, 59.1728, 113.3781, 10.9771, 0.4954, 38.9477, 210.924, 14.8612, 146.076, 261.6764], [268.862, 308.5717, 80.2589, 0.0, 0.0, 654.0896], [21.1534, 173.2286, 0.0, 0.0, 0.0, 0.0, 216.4213, 52.8003, 89.3282, 44.6569, 2.5181, 7.427, 146.5128, 27.422, 219.96, 339.2464], [76.5257, 111.044, 0.0, 35.0649, 32.5508, 0.0, 235.7247, 60.2132, 71.2403, 27.4705, 2.353, 0.0, 198.6768, 6.8095, 100.956, 551.8278], [16.7219, 157.7016, 24.6753, 46.2456, 498.5485, 269.3336, 254.8481, 208.2326, 140.0218, 194.2998, 603.9684, 155.1457, 237.162, 1013.3208], [193.0474, 320.8518, 152.6729, 12.4875, 0.0, 9.0592, 473.6767, 288.711, 208.264, 103.8946, 28.3181, 42.2226, 315.9324, 67.1286, 393.108, 1437.0106], [263.9736, 320.8518, 179.8952, 18.0153, 0.0, 24.6459, 644.8091, 406.5363, 317.297, 116.4517, 104.975, 88.6557, 508.9392, 74.4442, 406.644, 963.2439], [424.9353, 600.944, 127.395, 26.6067, 0.0, 0.0, 831.5328, 284.5494, 243.2274, 66.9161, 43.2614, 56.0238, 609.4116, 76.7907, 753.504, 1357.4768], [231.9768, 686.9051, 205.3742, 80.8524, 43.8435, 49.6676, 917.6558, 319.0127, 382.6764, 133.1946, 184.0262, 708.9768, 102.9244, 567.384, 1407.0627], [510.9711, 685.5987, 242.654, 7.9587, 8.7993, 0.0, 835.6162, 387.2889, 388.2341, 145.9458, 121.0742, 146.8725, 799.6968, 102.7863, 653.394, 1767.9109]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

