created: 20230215221053000
creator: Drevarr
modified: 20230705163519345
modifier: drevarr
tags: ChartData
title: 202302152210_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Ravioli Fetabringer", "Fribble Bibble", "Etchery Howls", "Tribal S", "Mac Chiato", "Zadie Miststep", "\u00c9\u00efbhear", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Druid", "Druid", "Tempest", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[205.6686, 229.5193, 50.0645, 220.3537, 288.5909, 35.6333, 135.2292, 148.0593, 7.2222, 319.8538, 40.5082, 164.4014, 138.245, 444.3284, 10.78, 355.0833, 28.5065, 691.32, 227.985, 7.2051, 105.7297, 52.5455, 97.5128], [592.038, 506.7097, 22.0968, 273.1382, 471.9773, 200.0381, 212.1875, 358.3814, 38.6222, 1011.7462, 605.5574, 1.2857, 471.3732, 417.2119, 943.5746, 143.66, 567.1389, 335.0779, 1023.68, 713.6767, 55.6923, 222.6036, 1416.1538], [72.1862, 12.6452, 202.6423, 238.0682, 100.1762, 1099.3125, 1106.9068, 14.9778, 2635.7538, 2053.7213, 13.6429, 1929.669, 1298.1722, 2274.3731, 99.98, 437.6389, 1399.8831, 2667.52, 2744.3609, 133.6923, 954.5135], [1092.3241, 587.6158, 4.0323, 125.2683, 356.3955, 125.1286, 528.5, 397.2373, 3013.3231, 1216.9836, 38.5952, 1104.4155, 1121.8477, 112.8529, 2021.6418, 56.86, 845.3333, 1095.3506, 3405.56, 2418.2556, 1334.3514, 13.0769], [1139.6745, 950.0453, 39.2151, 470.0407, 567.7636, 138.2048, 1235.3542, 865.1864, 58.3556, 1835.3538, 1383.1639, 578.162, 1099.5497, 2.4706, 1714.3806, 100.04, 1057.4167, 1369.2078, 3150.08, 1751.7594, 154.4615, 908.5315, 155.9697, 1157.9231], [1192.527, 1213.6963, 56.9032, 391.0732, 222.15, 465.7524, 915.5417, 733.2881, 1978.8385, 1394.541, 54.9286, 1569.5634, 1738.6225, 2829.8507, 197.86, 114.1389, 1889.4675, 4438.32, 3669.3459], [1289.2175, 1189.8591, 59.9785, 485.4919, 835.7455, 376.1143, 780.625, 965.9746, 230.9111, 1638.1077, 1967.5902, 50.2857, 2088.2606, 1813.7483, 61.5294, 2894.2687, 117.5, 695.8333, 3407.3896, 2687.24, 2979.7218, 265.1538, 343.4955, 0.4242, 4988.0769], [1736.7693, 1236.8817, 13.1075, 489.6016, 571.0955, 393.8476, 969.8125, 967.7288, 0.0, 2509.8846, 2115.3443, 7.1667, 2423.6268, 1504.0861, 2428.4627, 58.46, 578.3056, 2841.6883, 6086.52, 2272.5263, 786.7436, 1613.009, 47.5758, 4433.8718], [1816.3664, 1428.8389, 27.8602, 468.9106, 1322.6182, 503.381, 882.7917, 1291.7119, 124.2889, 2769.0385, 2333.4098, 45.0952, 1743.2183, 1328.5563, 344.9412, 3398.1642, 392.5, 648.5833, 2598.8182, 4054.56, 3451.6917, 166.641, 1547.2703, 4910.5641]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

