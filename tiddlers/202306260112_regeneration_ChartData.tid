created: 20230626011254000
creator: Drevarr
modified: 20230705163537709
modifier: drevarr
tags: ChartData
title: 202306260112_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Gestern Yesteryear", "Zhavashian", "Belvyn Brightblade", "Miphest\u00f6", "Sakis Ranger", "Artakama Nahid", "Tribal S", "Fribble Bibble", "Demon Staph", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Firebrand", "Tempest", "Firebrand", "Tempest", "Druid", "Tempest", "Druid", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 0.0, 0.0, 194.6304, 0.0, 165.9836, 0.0, 199.5902, 103.5644, 120.1424, 0.0, 39.9627, 0.2539, 0.0, 0.0, 15.3485, 0.0, 0.0, 217.8725, 167.9587, 48.4416, 0.0, 0.0, 0.0, 0.9715], [26.426, 38.8718, 106.898, 119.856, 345.6617, 121.8226, 25.5679, 51.9542, 66.6243, 199.1108, 55.3493, 7.5794, 38.0201, 0.0, 110.233, 0.0, 0.0, 0.0, 0.0, 37.4198, 40.883, 7.8048, 19.0026, 0.0, 11.8061, 4.7159], [223.6018, 20.0788, 247.1011, 283.8394, 877.4618, 312.8, 64.2827], [147.2848, 37.8092, 211.3364, 296.032, 210.5443, 215.1648, 296.4314, 0.0, 368.339, 193.1958, 77.5764], [14.9468, 284.944, 242.9671, 63.121, 0.0, 159.6111, 118.5408, 582.6308, 128.1748, 6.8785, 0.0, 19.0067, 80.2387, 54.4244, 10.12, 46.5293, 89.7822, 33.5975, 4.7141, 107.6155, 21.7152, 28.9883, 17.4182, 20.2118, 25.725], [112.5466, 157.491, 38.5641, 86.7468, 206.448, 651.7325, 235.0197, 296.743, 329.7514, 154.8878, 131.9904, 44.0413, 75.1859, 23.2742, 35.4402], [147.168, 187.4426, 121.0502, 449.944, 335.7585, 277.1698, 172.5809, 406.8254, 881.6166, 231.6913, 31.4939, 117.4883, 52.9416, 104.9642, 122.6047, 88.2464, 115.9334, 87.5319, 93.5234, 33.6427, 224.7523, 98.496, 48.4877, 60.8438, 57.0451, 69.0386], [141.8244, 117.8713, 316.91, 1088.824, 679.9279, 261.3226, 299.2053, 405.0693, 772.9526, 0.0, 89.4852, 3.6936, 261.4106, 98.6866, 57.776, 3.575, 0.0, 155.3623, 47.4043, 0.0, 87.0336, 59.2682, 131.5154, 83.4662, 21.5151], [314.3964, 183.9457, 473.4919, 828.96, 1395.8057, 252.9302, 619.9269, 18.1104, 1117.1618, 188.0248, 140.9726, 40.8605, 224.7827, 124.8458, 62.928, 129.4003, 29.4869, 140.9112, 178.7251, 401.3136, 184.1472, 88.2317, 214.5315, 44.9645, 137.4701], [209.1012, 236.2643, 210.8066, 1548.448, 2481.8997, 608.9342, 1139.7689, 436.7899, 1927.188, 261.4248, 74.2975, 23.0391, 105.3702, 110.8996, 0.0, 140.9256, 55.2922, 266.2569, 117.1043, 211.5773, 507.384, 193.392, 102.5892, 386.4763, 167.7562], [593.4316, 199.0926, 461.7994, 1194.952, 1840.3636, 484.2994, 49.3403, 913.6594, 343.933, 1682.3744, 452.2745, 82.9224, 109.7195, 205.277, 283.6286, 208.173, 380.2544, 263.4509, 199.264, 201.8979, 242.2334, 526.8442, 226.4256, 274.1342, 333.1431, 145.8547, 201.3475]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

