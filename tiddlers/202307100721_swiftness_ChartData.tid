created: 20230710072127000
creator: Drevarr
tags: ChartData
title: 202307100721_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Enter Effore", "Xanvias Einzbern", "Chocolate Teapot", "Yngvar The Burdened", "Anti Jimbo", "Legoh Brave", "Danaeryn", "Notorious H U D", "Erinthal", "Gestern Yesteryear", "Drevarr Moonwillow", "Locopuff"];
const professions = ["Firebrand", "Berserker", "Chronomancer", "Scourge", "Weaver", "Tempest", "Tempest", "Firebrand", "Druid", "Firebrand", "Scrapper", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[110.7795, 104.5632, 21.5853, 8.4986, 114.1219], [30.1185, 22.1424, 17.424, 23.7826, 25.608, 16.4174, 185.3921, 43.2939], [9.0908, 11.7264, 0.0, 8.2516, 86.0218, 0.0, 110.6873, 1.4387, 0.0, 0.0, 0.0, 38.7984, 89.1616, 5.9055, 20.0767], [0.0, 0.0, 27.9715, 167.4712, 17.2733, 0.0, 46.3729, 0.0, 0.0, 61.4261, 70.9466, 13.8522, 0.0, 0.0, 13.7374], [95.2853, 0.0, 0.0, 0.0, 81.1469, 20.1072, 34.7727, 0.0, 10.0613, 0.0, 0.0, 0.0, 69.8698, 56.6143, 10.0813, 55.7231], [96.76, 86.955, 0.0, 25.7774, 130.3602, 108.9019, 0.0, 193.1388, 0.0, 0.0, 9.3668, 6.9187, 0.0, 63.5664, 0.0, 0.0], [3.4412, 80.5545, 0.0, 121.2848, 37.1718, 35.5133, 39.672, 0.0, 26.1171, 131.461, 0.0, 0.0, 50.3599, 0.0, 22.2886, 72.4496, 85.229, 0.0, 13.8788, 57.5718, 0.0], [1.9739, 143.095, 0.0, 21.7846, 269.008, 225.3179, 45.7934, 29.359, 8.1518, 34.0603, 6.913, 2.7783, 102.2884, 0.0, 0.0, 54.8311, 105.4994, 57.4694, 17.5304, 309.6951, 0.0], [65.0153, 31.0934, 0.0, 5.441, 28.343, 22.6034, 327.0839, 33.2163, 46.4864, 98.8252, 283.4784, 143.5918, 14.7169, 0.0, 50.6828, 330.0992, 105.3178, 34.5465, 172.9426, 150.7706, 11.1021, 85.0025, 172.7844, 0.0, 46.3828, 439.5105, 15.6325], [43.4873, 84.9005, 20.3214, 0.0, 30.5818, 0.0, 165.5466, 16.0313, 155.1607, 176.5078, 506.1329, 27.0456, 8.0223, 47.5249, 213.86, 41.2954, 66.5038, 108.0972, 33.3626, 399.4607, 114.0365, 0.0, 94.316, 586.4859, 111.7459], [138.3795, 60.0768, 2.4717, 56.1226, 69.696, 3.7398, 289.9654, 92.5946, 18.6014, 186.4548, 307.2174, 137.0782, 115.8839, 25.7207, 64.3977, 598.1161, 94.3555, 0.4374, 246.5052, 177.6837, 19.6064, 332.2042, 215.409, 74.5008], [452.0951, 199.0727, 186.0179, 742.3699, 383.6215, 18.1171, 172.2712, 1366.794, 30.3078]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

