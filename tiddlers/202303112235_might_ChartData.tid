created: 20230311223557000
creator: Drevarr
modified: 20230705163521791
modifier: drevarr
tags: ChartData
title: 202303112235_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Legendary Hacker", "Zadie Miststep", "Tegan Parker", "Zaylen Harker", "Aronorf Xideliesi", "Blanco Padre Guard", "Minnie Marshmallow", "Mac Chiato", "Koralia Danai", "Johosh The Great", "Sygaldry Verdandi", "Drevarr Moonwillow", "Bella Sassy", "High Sorcer Baradun", "Newtype Khan", "Venomina The Fierce", "Demon Sekhmet", "K\u00f4sair"];
const professions = ["Herald", "Tempest", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Tempest", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[60.4035, 83.8419, 97.2562, 7.2292, 13.8736, 3.8161, 1.1421, 3.8342, 9.6255, 14.3616, 14.3865, 18.968, 20.482, 17.232], [147.8169, 8.5762, 29.1157, 11.7713, 30.1167, 13.0572, 34.121, 37.3358, 6.3788, 18.3103, 36.765, 0.0, 0.0, 0.0, 0.0, 0.0, 3.1657], [74.1573, 0.0, 0.0, 15.444, 44.7488, 100.8885, 53.8945, 12.1426, 24.5813, 12.2715, 0.5336, 0.0, 0.0, 0.0, 0.0, 0.0, 36.846, 6.0934, 0.0, 17.088], [114.9687, 2.4426, 2.9167, 11.7067, 10.9872, 17.4096, 49.0838, 36.7506, 34.1072, 42.5955, 52.7962, 9.477, 0.8538, 1.4969, 0.0, 5.9135, 7.4437, 2.7922], [176.1858, 3.2568, 0.9211, 2.838, 18.5899, 10.3194, 23.4931, 19.1946, 20.1779, 31.6094, 44.8875, 8.3228, 9.3914, 0.4158, 0.9576, 5.5328, 0.0, 3.5507, 0.8467, 12.8928, 8.694, 17.9197, 17.4944, 18.384], [112.4802, 12.4301, 14.3276, 13.1902, 25.9965, 6.8094, 46.7066, 39.6766, 48.9477, 38.548, 47.025, 23.5102, 6.9368, 7.1518, 7.2912, 5.8882, 1.2834, 0.0, 4.9588, 16.608], [138.3606, 4.9395, 1.1257, 11.2875, 12.9492, 26.325, 33.8413, 33.8246, 33.1959, 70.5428, 87.4237, 11.4817, 6.67, 0.0, 3.8304, 6.4719, 0.0, 6.4598, 6.1488], [79.632, 5.238, 16.9373, 32.0243, 29.0866, 12.3552, 28.3875, 62.6164, 85.1377, 28.5255, 47.88, 0.0, 0.0, 7.8078, 0.0, 0.0, 0.0, 8.3849, 0.9173, 0.0, 30.429, 18.7387, 3.2956, 9.888], [126.4158, 0.0, 17.5513, 19.4145, 25.0646, 12.987, 45.8675, 73.033, 36.4504, 50.8834, 39.7575, 11.5425, 10.085, 1.9774, 3.5784, 1.3451, 0.0, 5.048, 0.0, 6.4464, 13.1963, 13.104, 12.474, 4.08], [131.3928, 6.7036, 1.2792, 7.0628, 21.0424, 15.7248, 43.4902, 55.477, 45.0423, 67.459, 51.7275, 24.786, 5.4961, 1.4137, 0.0, 7.5886, 7.3255, 2.0534, 1.0483, 15.8712, 14.7487, 15.3317, 22.2376, 4.416], [232.4259, 1.167, 6.5498, 27.419, 30.7476, 36.2186, 38.9743, 23.8229, 47.9923, 68.4, 13.4258, 11.2056, 1.0811, 1.9992, 2.6141, 7.6576, 1.0584, 28.2336, 18.7853, 16.249, 14.2604, 23.712], [179.6697, 16.2569, 5.731, 18.6083, 18.5899, 22.815, 45.3082, 48.9227, 32.1545, 74.5904, 98.1112, 5.4675, 14.0337, 2.8644, 5.8632, 10.1266, 4.2875, 8.8555, 5.1307, 14.3208, 31.9298, 10.8436, 14.6608, 18.48], [208.0386, 9.689, 9.2106, 5.7082, 20.3558, 24.6402, 77.0518, 69.7558, 54.4152, 83.8419, 106.6612, 20.7765, 17.342, 6.7822, 0.6384, 8.147, 0.0, 15.743, 0.6552, 38.4336, 30.0667, 21.5888, 11.55, 17.424], [412.5933, 21.2235, 0.0, 0.0, 18.8352, 26.325, 86.9805, 47.8694, 15.2311, 0.0, 220.8037, 15.4913, 8.8578, 7.3828, 9.7776, 0.4568, 4.2875, 13.6896], [332.4636, 12.9729, 20.468, 21.0593, 20.3067, 58.4064, 110.3338, 62.3823, 86.9602, 134.3398, 151.1213, 28.0665, 13.9803, 8.5008, 12.2304, 21.7507], [100.0377, 10.0147, 46.9229, 33.2175, 49.05, 92.7342, 210.0397, 130.6166, 183.9443, 102.5377, 304.1662, 47.7495, 44.8758, 21.7224, 41.7247, 38.7159, 64.896], [817.2234, 41.9313, 50.9653, 26.2515, 54.0531, 119.4102, 191.3011, 107.0916, 169.6245, 76.9033, 333.45, 50.9692, 48.1307, 28.9128, 52.2067, 9.8735, 61.9454, 19.0915], [936.1737, 28.0628, 38.184, 61.1654, 110.9862, 203.7469, 134.479, 199.4358, 378.1559, 328.5337, 17.253, 44.3955, 22.2096, 30.8113, 14.651, 55.0579, 17.1058, 47.6136, 127.6155, 105.0941, 78.9096, 144.048]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

