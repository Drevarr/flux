created: 20230403221011000
creator: Drevarr
modified: 20230705163524396
modifier: drevarr
tags: ChartData
title: 202304032210_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Zenek Tryst", "Mac Chiato", "Venomina The Siren", "Tegan Parker", "Legacy Of Mathus", "Blancooo Padreee", "Lagertha Scorned", "Tootsie Pop Rocks", "High Sorcer Baradun", "Jeckyll Mbs", "Your Arch Nemesis", "Tika Sumiko", "My Birthday Girl", "Xanvias Tlesel", "Fribble Bibble", "Cat Wigglebooty", "Drevarr Moonwillow"];
const professions = ["Weaver", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Spellbreaker", "Scrapper", "Scrapper", "Tempest", "Berserker", "Scrapper", "Tempest", "Scrapper", "Berserker", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.47, 0.135, 0, 0.666], [0.467, 0.305, 0.301, 0.349, 0.149, 0.411, 0.216, 0.304, 0.445, 0.227, 0, 0, 0.327, 0, 0.485, 0.161, 0, 0.028], [0.236, 0.158, 0.548, 0.364, 0.212, 0.193, 0.284, 0.285, 0.795, 0.332, 0, 0.473, 0.97, 0.644, 0.866, 0.351], [0.393, 0.433, 0.301, 0.369, 0.223, 0.331, 0.152, 0.284, 0.535, 0.644, 0.207, 0.485, 0.4, 0, 0.416], [0.525, 0.418, 0.49, 0.479, 0, 0, 0.253, 0.203, 0.555, 0.631, 0, 0, 0.494, 0, 0.808], [0.363, 0.539, 0.396, 0.243, 0.336, 0, 0, 0.232, 0.743, 0.488, 0, 0, 0.459, 0, 0.809, 0, 0, 0.676], [0.466, 0.857, 0.145, 0.093, 0, 0.555, 0.418, 1.17, 0.416, 0, 0.578, 0.501, 0, 0.94], [0.413, 0.484, 0.032, 0.356, 0.186, 0.309, 0.336, 0.2, 0.745, 0.462, 0, 0.433, 0, 1.404, 0.322, 0, 0.624], [0.482, 0.51, 0, 0.516, 0.178, 0.079, 0.365, 0.307, 0.89, 0.303, 0.685, 0, 0.53, 0.383, 0.218, 0], [0.659, 0.39, 1.002, 0.37, 0.103, 0, 0.316, 0.38, 1.486, 0.502, 0, 0, 0.464, 0.247, 1.616, 0.724, 0, 0], [0.437, 0.366, 0.218, 0.201, 0.945, 0.322, 0.561, 0.892, 1.043, 0.342, 0, 0.451, 0.638, 0, 0.208], [0.537, 0.548, 0.601, 0.501, 0.307, 0.424, 0.53, 0.455, 0.89, 0.297, 0, 0, 0.413, 0, 0.483, 0.644, 0.767, 0], [0.458, 0.905, 0.919, 0.46, 0.093, 0.505, 0.253, 0.061, 1.114, 1.06, 0, 0, 0.539, 0, 0.303, 0, 0.768, 0.624], [0.643, 0.868, 0.502, 0.485, 0.192, 0.353, 0.791, 0.634, 0.769, 0.504, 0, 0, 0.638, 0, 0.809, 0, 0, 0], [0.392, 0.023, 0, 1.054, 1.286, 1.607, 1.356, 0.877, 1.337, 0.906, 0, 1.129, 1.15, 2.037, 1.454, 1.289, 0, 1.056], [0.999, 1.307, 0.939, 0.79, 0.683, 1.084, 1.024, 0.846, 0.918, 0.592, 0.343, 0.962, 0.849, 0.323, 0.384, 1.338], [1.265, 1.386, 1.505, 1.508, 0.888, 1.296, 1.404, 1.017, 2.162, 1.513, 0.145, 1.518, 1.399, 2.237, 3.34, 1.057, 1.092]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

