created: 20230329220116000
creator: Drevarr
modified: 20230705163523337
modifier: drevarr
tags: ChartData
title: 202303292201_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Morton Saltbringer", "Ark Darkness", "Big Macbringer", "Bork Borkbringer", "Pieca Pizzabringer", "Jorja Peachbringer", "Brioche Bunbringer", "Ryvalia Fazebringer", "Newtype Khan", "Kiloak", "Avian Nefaris", "Boysto Yardbringer", "Arkintor", "Abigail Ryn", "Charred Fishbringer", "Gavann", "Bella Lunabringer", "Spicy Gyrosbringer", "Zaylen Harker", "Ravioli Fetabringer", "Bubble Teabringer", "Band Aidbringer", "Johosh The Great", "Bura Beignetbringer"];
const professions = ["Chronomancer", "Firebrand", "Tempest", "Tempest", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Spellbreaker", "Firebrand", "Tempest", "Vindicator", "Tempest", "Tempest", "Scrapper", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[25.0312, 0.0, 404.8881, 38.5123, 389.9088, 53.3474, 0.0, 14.3856, 27.2097], [57.0742, 0.0, 224.6694, 793.1581], [0.0, 0.0, 351.2573, 69.4848, 579.7088, 86.4823, 0.0, 22.7358, 11.7612, 6.5268], [10.928, 0.0, 673.525, 41.7648, 360.802, 22.7527, 17.655, 0.0, 25.8573], [0.0, 0.0, 1021.1608, 55.8877, 0.0, 0.0, 0.0, 101.0772], [20.0831, 0.0, 597.6689, 53.2963, 534.836], [20.0567, 0.0, 413.1018, 34.0771, 599.7197, 107.2469, 0.0, 41.0959, 25.434, 20.5212], [34.7684, 37.7328, 484.1263, 66.6758, 586.9855, 8.2837, 0.0, 0.0, 27.0216, 26.754], [15.3733, 0.0, 509.7338, 85.7472, 701.5932, 50.5861, 0.0, 5.0187, 7.29, 17.1549], [1078.7678, 204.2221, 0.0, 30.3977, 65.6424, 23.4318], [0.0, 0.0, 1077.555, 261.2142, 53.262, 41.3995, 18.0468, 27.0039], [1.8257, 0.0, 11.1127, 56.401, 1550.5392, 106.5842, 0.0, 2.1968, 0.0, 13.1271], [61.8635, 0.0, 752.2801, 40.8778, 804.0731, 51.381, 20.1461, 25.0452, 36.8529], [50.4063, 19.0176, 1548.0446, 209.4893, 1577.2204], [51.4912, 4.368, 1429.1873, 120.0461, 1615.423, 126.907, 26.136, 0.0, 17.3016, 29.4294], [109.3856, 0.0, 1360.0954, 128.2512, 1562.0606, 206.7624, 0.0, 40.06, 0.0, 20.874], [70.6482, 12.096, 1797.8384, 240.6835, 1357.1008, 311.8003, 93.06, 30.612, 49.4424, 43.9971], [68.2139, 49.0224, 1594.428, 201.3581, 1831.9042, 222.8881, 0.0, 0.0, 13.446, 61.8576], [86.1273, 0.0, 1548.0446, 80.2771, 2265.473, 160.5943, 0.0, 14.3059, 0.0, 41.1159], [90.3874, 0.0, 1691.06, 65.1235, 2301.25, 223.2194, 0.0, 62.37, 26.3571], [14.2619, 0.0, 2096.4312, 103.4141, 2332.7823, 134.1968, 19.7353, 20.1204, 23.9463], [111.1849, 62.9496, 1822.9627, 272.7648, 2062.3324, 291.9193, 72.864, 70.1005, 75.816, 77.8512], [85.307, 0.0, 2092.566, 141.1133, 2255.1644, 279.549, 24.024, 95.3545, 65.8692, 57.1389], [98.4841, 0.0, 2290.6616, 172.5293, 2789.394, 253.9246, 0.0, 52.4012, 14.9688, 11.2014]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

