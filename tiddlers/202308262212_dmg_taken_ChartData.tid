created: 20230826221220000
creator: Drevarr
tags: ChartData
title: 202308262212_dmg_taken_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Darks Na", "Crusader Siolith", "Drevarr Moonwillow", "Sygaldry Verdandi", "Gabe Malhorn", "Bearah", "Hyde En Sikh", "Venomina The Fierce", "Koralia Danai", "Lord Erin The Wise", "Rhaevynn", "Govinda Ektar", "Talia The Pestilent", "Aira Draugr", "Blaize Harlot", "Melody Phoenixstorm", "Belladonna Horror", "Cuz Imasir", "Illusionist Zeroo", "Rahani Sunray", "Forever Dreaming", "Greg The Knight", "Roderik Manloy", "Sofya De Nova", "Zorr Prime", "Loganlek", "Yummy Kiwi", "Cedryn X", "Belvyn Brightblade", "Sienna Veil", "Darkandshadow", "Sr Conrad", "Jamaass", "Lord Krython", "Bee Nemesis", "Kurtis Ruhr", "Dalveirric", "High Sorcer Baradun", "Beasts Pirate", "Kylo Milan", "Luke The Ghastly", "Kurtis Ruhr", "Narciza", "Darth Sammy", "Mordelon The Tiger", "Elentari Aiundail", "Victoria Raskae", "Victoria Raskae", "Garzin Degaza"];
const professions = ["Spellbreaker", "Dragonhunter", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Spellbreaker", "Firebrand", "Weaver", "Reaper", "Vindicator", "Reaper", "Herald", "Scourge", "Scrapper", "Tempest", "Scrapper", "Chronomancer", "Chronomancer", "Scourge", "Firebrand", "Renegade", "Tempest", "Reaper", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Renegade", "Virtuoso", "Spellbreaker", "Reaper", "Scrapper", "Spellbreaker", "Vindicator", "Soulbeast", "Tempest", "Berserker", "Chronomancer", "Scourge", "Herald", "Chronomancer", "Reaper", "Warrior", "Druid", "Vindicator", "Herald", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Damage Taken per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[420.4021, 196.1236, 658.3556, 292.5909, 366.0174, 326.7041, 150.25, 156.2595, 320.3731, 366.4592, 185.463, 11.125, 177.6078, 584.5294, 960.2944, 88.3011, 119.2091], [992.3079, 179.1828, 1158.8723, 0.0, 1748.4478, 305.0839, 364.6667, 276.8777, 75.6213, 213.1538, 161.8105, 5346.0909, 0.0, 278.0038, 192.7633], [568.8693, 44.4706, 540.4667, 316.1579, 257.7103, 469.0303, 149.1053, 122.8013, 31.0, 154.292, 109.8797, 0.0, 113.8526, 897.1429, 875.6139, 130.6082, 117.925], [439.633, 126.7931, 505.383, 207.3333, 310.1852, 351.9505, 4782.5625, 118.2185, 104.7391, 173.2124, 59.7296, 33.2727, 149.5686, 606.1714, 844.5652, 113.0712, 125.8516], [829.6944, 102.0449, 664.275, 184.619, 382.2946, 278.1685, 124.7895, 127.3688, 91.6212, 262.7946, 82.9062, 46.0435, 93.1789, 388.2192, 840.5431, 133.673, 87.1252], [562.3929, 19.1868, 599.413, 106.0909, 405.9478, 272.4639, 120.6875, 107.0588, 52.8209, 221.5405, 76.8187, 0.0, 53.0106, 526.4832, 816.0775, 93.7448, 105.3013], [465.5224, 154.0562, 625.5111, 267.9167, 281.6261, 439.1443, 272.1645, 147.8939, 621.0, 38.4793, 4.4762, 64.2609, 524.52, 645.3912, 166.207, 183.7491], [547.1129, 174.7955, 411.7045, 0.0, 281.3217, 392.1538, 128.2714, 146.9333, 217.6923, 133.6235, 0.35, 153.2255, 581.053, 756.9547, 119.4888, 141.6423], [127.8033, 3413.3448, 38.5828, 4.3478, 66.9333, 683.5894, 1031.2134, 209.1487, 244.74], [515.349, 82.1333, 794.8222, 286.4545, 344.287, 189.63, 99.4156, 44.1875, 326.4444, 88.7107, 9.4, 58.0111, 377.2177, 547.8676, 59.413, 72.4836], [443.0092, 527.7273, 215.4184, 532.9853, 231.622, 189.3837, 46.7083, 370.7549, 714.6536, 1065.9688, 188.6868, 188.1993], [788.5884, 200.3933, 912.8444, 408.0952, 490.6814, 489.4752, 304.7895, 246.6312, 105.8615, 626.7374, 93.673, 0.0, 124.8105], [340.2778, 171.2235, 151.6222, 111.2105, 432.5872, 510.9505, 115.1579, 226.9606, 2.2941, 5213.0625, 882.9971, 71.0076, 162.6466], [334.7083, 92.9877, 0.0, 156.6804, 1075.3289, 1198.6351, 155.9401, 374.7208], [894.6874, 236.9889, 595.4565, 443.6842, 460.215, 629.9688, 224.2632, 266.5172], [864.6683, 75.5165, 1036.325, 339.6, 542.6296, 386.7526, 232.5263, 173.9592, 364.1594, 473.1455, 44.0063, 20.5909, 243.6392], [814.0592, 1.587, 1534.2222, 555.8421, 724.292, 838.9, 246.6316, 553.2482], [154.8125, 568.8349, 251.4898, 79.8947, 128.3404, 65.0455, 310.1515, 39.3208, 39.8, 106.8191, 538.78, 1165.8355], [200.4891, 1446.4392, 750.4108, 76.2679, 304.8318], [1011.4085, 148.0225, 1460.7708, 216.4783, 589.729, 709.5258, 0.0, 266.695], [82.5543, 4562.9444, 1312.4715, 131.9932, 166.1621], [56.7059, 353.0091, 90.8742, 4.64, 82.8557, 736.5775, 982.0829], [667.9832, 38.0698, 961.3778, 246.2632, 478.9633, 492.6531, 201.6364, 260.0], [786.6939, 884.4464, 579.2, 522.8421, 607.3738, 512.703, 125.3684, 115.6599], [116.9072, 506.25, 666.7506, 146.5316, 64.2113], [3323.4231, 409.7393, 256.8773, 625.934], [672.6795, 114.8598, 254.988], [571.6473, 50.3034, 666.5556, 162.6667, 411.8148, 394.0, 221.6558], [116.873, 207.6161, 148.7436, 89.2581, 120.0104, 4347.2222, 546.4654, 207.2543, 244.6073], [738.5955, 23.7471, 975.4889, 194.05, 328.0561, 404.5053, 252.3333, 117.5817], [642.4383, 605.6791, 424.3307], [3.5233, 0.0, 467.3789, 528.4797, 214.4006, 173.9329, 320.948], [693.8465], [652.7895, 829.1071, 418.0198, 181.9079, 113.3088, 328.74, 41.9245, 0.0, 170.7021, 5634.4286], [537.1141], [405.0524, 309.7656], [718.3094, 95.0586], [95.7484, 382.9436], [183.832, 15.236, 678.913, 189.913, 391.4286, 318.0825, 112.5263, 198.9787], [1124.5138, 773.5979, 277.3684], [516.3636, 869.7963, 831.17, 482.4737], [344.3791, 119.6567, 1712.5, 115.1304, 47.35], [322.989], [81.0, 161.0795, 692.7805, 646.6667, 821.4301, 18.3382, 140.2282], [289.5868, 256.6823], [139.7571, 142.7826, 1419.0141, 163.9708, 37.7429], [66.3885, 173.031], [103.0156, 2163.6296, 16.8842], [282.0833, 133.0, 260.2614], [52.8772]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

