created: 20230626012458000
creator: Drevarr
modified: 20230705163538323
modifier: drevarr
tags: ChartData
title: 202306260124_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zorryeh", "Proteccdebussy", "Belvyn Brightblade", "Blanco Padre Guard", "Crusader Siolith", "Bender Ale Devourer", "Sygaldry Verdandi", "Raelyn Sunray", "Bella Sassy", "Solus Sanctus", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[389.8362], [88.5837, 142.4013, 63.6653, 41.2608, 42.4829, 26.268, 68.4634], [0.0, 17.4182, 148.617, 115.687, 64.016, 155.675], [0.0, 19.6733, 8.1144, 236.1134, 111.1516, 163.0206, 22.8413, 16.6152, 66.9082, 0.0, 4.5763, 38.149, 81.4184, 68.1754, 74.7985, 43.8341], [188.9731, 47.1226, 44.4969, 304.6506, 76.0142, 440.0911, 68.4432, 9.5088, 85.8211, 88.616, 47.2752, 41.7134, 41.894, 50.4768, 52.085, 79.6282], [88.2317, 114.4109, 124.0092, 200.751, 76.9231, 152.8398, 91.849, 27.8208, 75.2083, 16.632, 114.4483, 41.6232, 187.1712, 88.6406, 176.398, 103.8125], [163.0856, 102.3581, 173.6658, 321.4204, 90.1938, 259.8019, 71.1446, 59.7912, 90.4147, 84.168, 64.1155, 99.4034, 77.5949, 95.4471, 43.0944], [85.6276, 139.4755, 143.0163, 260.6604, 99.1794, 289.442, 104.4691, 93.744, 134.0064, 48.268, 108.3802, 148.7381, 147.5557, 144.6509, 132.151, 165.9778], [85.066, 167.3654, 149.1462, 699.9552, 63.6525, 491.1236, 109.872, 82.2024, 107.1734, 64.1088, 99.1286, 117.3883, 95.6736, 142.3489, 83.1014], [24.0493, 94.5043, 172.431, 447.8012, 144.0036, 521.6658, 68.9875, 132.6528, 133.5312, 18.128, 70.0157, 130.8931, 140.629, 153.8803, 240.8301, 73.164], [121.0633, 183.4358, 227.9088, 540.764, 95.4657, 635.2002, 108.3197, 102.816, 203.5123, 94.7318, 119.3875, 215.4853, 111.0912, 249.216, 163.4371]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

