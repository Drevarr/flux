created: 20230408223537000
creator: Drevarr
modified: 20230705163525086
modifier: drevarr
tags: ChartData
title: 202304082235_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Traidoruns Maximus", "Kmpek", "Grasszanine", "Xanvias Einzbern", "Zaylen Harker", "Arcanophage Farra", "Mistwalker Caelon", "Venom The Ferocious", "Kos\u00e4ir", "Sister Elon\u00edth", "Kosair", "Xyntharos", "Ryvalia Fazebringer", "Aronorf Xideliesi", "Mmathuss", "Sygaldry Verdandi", "Koralia Danai", "Bella Sassy"];
const professions = ["Firebrand", "Vindicator", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker", "Vindicator", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.5869, 0.0, 1.863, 17.6476, 0.1382, 0.1848, 0.4922, 0.0, 5.148, 2.9515, 0.198], [13.9449, 1.617, 1.4616, 0.0, 1.2264, 2.9413, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0764, 0.0, 2.8087, 0.0, 0.0, 0.0, 0.0, 0.0, 2.016, 1.5214, 0.0, 0.1809, 0.5971, 0.0, 0.0, 0.0, 0.0, 1.3797, 4.3908, 1.7196], [0.7912, 1.9404, 1.827, 0.0, 1.6042, 2.3302, 7.3532, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3385, 3.19, 1.0923, 2.2231, 0.6989, 0.0, 0.4416, 0.896, 3.1075, 1.2928, 0.0, 1.4927, 0.0, 0.0, 0.0, 1.2285, 2.702, 4.9041], [3.0659, 0.9702, 2.5578, 1.064, 0.0, 3.1886, 10.7146, 1.0462, 0.9979, 1.6735, 0.0, 0.8424, 0.9953, 0.0, 2.0285, 1.2934, 1.5288, 0.3973, 1.2485, 1.167, 2.6432, 1.748, 1.5082], [9.89, 7.1148, 22.1067, 0.0, 2.0907], [3.6593, 1.7556, 2.9232, 0.0, 0.0, 2.9434, 7.1431, 0.0, 0.0, 1.7719, 0.0, 0.0, 0.0, 0.0, 1.8725, 0.9701, 1.9219, 3.1416, 2.3446, 2.8701, 3.0464, 2.4925, 4.0937, 2.3514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1.978, 1.8942, 0.0, 0.0, 4.5126, 1.8396, 11.3449, 0.0, 0.0, 1.7719, 0.212, 1.0296, 2.3852, 0.0, 3.901, 1.4551, 2.7082, 0.268, 0.2741, 3.0278, 3.3152, 2.2012, 2.777], [1.6162, 2.3142, 4.7941, 9.7664, 4.37, 3.9022, 5.7882, 9.951, 2.9719, 1.8546, 1.8054, 4.6872, 12.8345, 13.6933], [12.0658, 3.927, 7.6734, 0.0, 2.7428, 9.4433, 29.4126, 0.0, 1.8665, 1.8704, 3.0888, 1.9734, 0.0, 6.6317, 4.7291], [4.263, 9.4935, 12.5888, 9.5168, 6.3441, 5.5814, 10.7139, 1.6565, 2.1582, 4.0824, 17.2253, 15.1582], [6.0715, 5.969, 5.0243, 8.0427, 13.5744, 5.1792, 6.6793, 7.3644, 9.9178, 2.3873, 0.0, 4.7061, 12.9696, 12.9291], [8.1098, 2.772, 0.7308, 0.5376, 2.4943, 23.0563, 25.4209, 1.2436, 1.3306, 0.5906, 0.0, 5.4522, 1.6988, 4.444, 9.0503, 2.7486, 3.1886, 1.4322, 1.218, 3.1225, 4.256, 3.3017, 1.0294], [5.6373, 3.465, 0.0, 0.0, 0.0, 1.5943, 8.8238, 0.0, 1.8665, 0.0, 0.0, 0.0, 0.0, 2.024, 7.958, 6.5076, 3.8438, 0.268, 4.4762, 5.7087, 5.9584, 5.5353, 3.6628, 1.9122, 10.6476, 0.4994, 0.0, 0.0, 0.0, 6.5961, 16.5497, 13.6297], [5.1428, 4.8972, 3.2886, 0.0, 2.7635, 6.0094, 14.7063, 0.0592, 0.0, 2.0776, 2.457, 3.7924, 0.0, 7.724, 4.3654, 7.8187, 2.1344, 0.0609, 6.308, 11.2896, 4.4347, 5.2668, 5.3489, 9.8183, 1.961, 0.695, 0.0, 0.1612, 2.1546, 15.7392, 10.4452], [16.0218, 4.9896, 5.481, 0.0, 3.6846, 26.6129, 38.0263, 0.3158, 0.462, 2.8548, 2.0352, 5.3352, 3.329, 0.682, 10.1426, 5.0525, 4.4117, 2.2084, 5.6637, 3.0909, 6.8992, 4.3376, 6.4638, 5.2197, 3.2175, 0.95, 0.2046, 0.532, 0.5859, 10.4702, 11.1457], [13.1537, 5.8674, 18.0873, 5.0922, 11.8961, 23.32, 0.2369, 1.2751, 4.036, 0.0, 5.7798, 4.29, 2.486, 8.8163, 6.7906, 8.6923, 5.3869, 2.5273, 2.2078, 11.7824, 3.5607, 3.7107, 4.8062, 6.6008, 0.2923, 0.9071, 0.4026, 1.0478, 3.6477, 15.1312, 12.6743], [22.4503, 6.8376, 18.4527, 0.0, 4.554, 32.8675, 43.2785, 2.6057, 0.2402, 4.5282, 3.18, 6.3648, 1.9391, 0.506, 12.2491, 10.1454, 7.0325, 3.2525, 5.481, 6.4026, 11.6928, 8.7075, 5.195, 5.5039, 13.069, 1.6504, 6.8229, 13.2398, 17.0689], [26.9008, 6.8376, 30.6936, 4.9266, 30.1694, 52.5225, 3.6124, 4.0656, 10.4346, 0.5724, 7.8624, 3.1574, 3.388, 18.9589, 11.1963, 10.8763, 3.0769, 2.4665, 11.7013, 13.6192, 3.3988, 7.5172, 5.6073, 11.2446, 1.4799, 0.6715, 2.5608, 2.3213, 6.7662, 15.0637, 17.3237]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

