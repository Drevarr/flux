created: 20230610164704000
creator: Drevarr
modified: 20230705163535043
modifier: drevarr
tags: ChartData
title: 202306101647_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Xyntharos", "Tootsie Pop Rocks", "Scintilla The Storm", "Zayde Sunsabre", "Arriasa", "Pamtastic", "Trolit\u00e1", "Newtype Khan", "Drevarr Moonwillow", "Tomitigas", "Zhavashian"];
const professions = ["Tempest", "Vindicator", "Scrapper", "Tempest", "Spellbreaker", "Druid", "Tempest", "Tempest", "Spellbreaker", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 0.0, 31.5187, 22.9262, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.032, 0.0, 26.6782, 111.9878, 0.0, 0.0, 197.4216, 13.453, 24.0218, 32.8868, 31.8716], [6.3855, 5.544, 19.92, 14.1696, 7.847, 13.7669, 43.342, 11.8061, 25.4987, 2.1063, 12.78, 19.3794, 13.339, 6.3839, 79.0502, 7.3931, 3.2692, 136.0768, 5.3312, 15.0528, 41.6917, 37.8599], [0.0, 0.0, 5.472, 5.4144, 34.1698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 56.2195, 61.1253, 0.0, 310.9905, 0.0, 0.0, 5.4228, 54.637], [2.2446, 24.7447, 0.0, 59.2128, 40.9042, 0.0, 40.6799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.4928, 0.0, 0.0, 192.7141, 0.0, 0.0, 68.2227, 62.6543], [0.0, 36.7949, 94.5451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5029, 136.9826, 50.9717, 141.2256, 61.6156, 18.2399, 33.9824, 0.0, 53.1866, 23.2657, 0.0], [133.9214, 170.592, 0.0, 72.0581, 0.0, 0.0, 0.0, 33.5655, 0.0, 85.8686, 0.0, 68.0119, 99.1738, 38.0218, 0.0, 124.8964, 0.0, 0.0, 65.0157, 0.0], [185.5091, 133.1859, 351.3178, 290.1599], [537.289, 104.7484, 0.0, 551.3683, 63.1831, 154.1344, 223.2107, 112.5897], [0.0, 79.501, 0.0, 69.0048, 27.6989, 0.0, 259.0537, 43.0241, 0.0, 0.0, 17.4307, 69.2356, 36.997, 80.7206, 0.0, 211.5226, 67.4434, 59.9251, 513.561, 72.8042, 122.304, 181.5773, 192.0707], [61.8426, 77.0431, 36.144, 79.2346, 114.5141, 97.3687, 232.8488, 30.3666, 0.0, 0.0, 43.8993, 101.1296, 35.2352, 47.2954, 364.7501, 70.4232, 75.0016, 652.8742, 217.2048, 134.0326, 246.1265, 264.2766], [18.2277, 85.8026, 237.36, 204.1344, 201.7392, 81.9209, 274.527, 56.1356, 69.9329, 45.1556, 58.2848, 45.6885, 65.4826, 18.7616, 4.6451, 497.4029, 105.4085, 42.3517, 860.4464, 107.3321, 172.1664, 331.4923, 248.2418], [109.7145, 119.0297, 205.2, 203.6275, 163.1774, 47.984, 355.1381, 140.6513, 205.3854, 0.0, 23.6373, 48.0847, 90.8336, 91.0624, 139.9982, 328.6541, 114.5556, 5.4064, 961.8052, 214.6641, 187.1565, 327.2357, 339.3529]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

