created: 20230527220043000
creator: Drevarr
modified: 20230705163531884
modifier: drevarr
tags: ChartData
title: 202305272200_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Fierce", "Foxy Latina", "Elaundo Yn Bashir", "Newtype Khan", "Tootsie Pop Rocks", "Mammary Mission", "Drevarr Moonwillow", "Zadey Starbolt", "Gravlyn Isshtail", "Xanvias", "Grimm Stroke", "Be\u00eb", "K U S A T T A", "Splitting Hairs"];
const professions = ["Spellbreaker", "Scourge", "Herald", "Spellbreaker", "Scrapper", "Scourge", "Scrapper", "Scrapper", "Spellbreaker", "Reaper", "Harbinger", "Scourge", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 6385, 15923, 2133, 4691, 8329, 0, 860, 10182, 0, 7309, 0, 6376, 376, 0, 4162, 0, 6202], [3118, 123, 26307, 3021, 15385, 27610], [28340, 51915], [0, 157, 0, 0, 584, 2092, 0, 0, 20508, 1404, 261, 17172, 2464, 7839, 7626, 7667, 2494, 0, 5611, 0, 0, 6367, 0, 5312], [2416, 1315, 2989, 189, 4928, 886, 20102, 4038, 11840, 20026, 0, 3224, 11095, 782, 1000, 387, 0, 2875, 0, 497, 0, 0, 484, 0, 1427], [3972, 4177, 14005, 5493, 8134, 15083, 17704, 13714, 0, 7055, 875, 0, 16996, 0, 324], [4720, 0, 557, 0, 319, 407, 6215, 1083, 1965, 28526, 6618, 2658, 10451, 706, 6937, 7907, 5581, 11626, 0, 6454, 2325, 0, 2309, 248, 6218], [3349, 76, 3260, 80, 649, 759, 1435, 558, 10941, 26211, 6439, 3637, 8140, 1034, 7972, 3653, 10416, 4685, 0, 10680, 576, 0, 9031, 834, 6393], [9379, 0, 0, 0, 1077, 0, 8877, 182, 12809, 42166, 6245, 2053, 20404, 1809, 21051], [0, 0, 2229, 0, 592, 95, 2675, 0, 453, 5183, 0, 0, 0, 0, 384, 0, 269, 5175, 569, 35803, 1488, 0, 34517, 1252, 38086], [338, 141483], [5357, 2, 0, 0, 1669, 0, 12603, 3628, 11909, 32397, 10208, 11839, 23864, 316, 12313, 16089, 17086, 17287, 0, 7716, 3475, 0, 6150, 0, 10929], [21621, 34493, 87772, 9749, 33109, 90538, 48772, 71259, 0, 1711, 10894, 0, 11949, 1342, 71046], [30055, 98343, 63537, 104367, 70992, 91320, 59056, 4150, 0, 67055, 5409, 45425]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

