created: 20230805001335000
creator: Drevarr
tags: ChartData
title: 202308050013_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Heals For Daddy", "Sakis Ranger", "Kosa\u00efr", "Arriasa", "Arcanophage Farra", "Zaedy Zae", "Kahlyanne", "Oo Dads Mad", "Newtype Khan", "Lurker Holystrike", "K\u00e2 \u00d4tik R\u00e6j", "Delayed Worlds", "Explorer Idaea", "Head Bobber", "Xanvias Einzbern", "Gestern Yesteryear", "Alarics Clone", "Air One Com", "Blancooo Padreee", "Zaylen Harker", "Ryvalia Fazebringer", "Mistwalker Cael", "Aronorf Xideliesi", "Sub Train", "Kisumaiassu", "Yummy Kiwi", "Solus Sanctus", "Bella Sassy", "Koralia Danai"];
const professions = ["Druid", "Druid", "Tempest", "Druid", "Spellbreaker", "Druid", "Tempest", "Berserker", "Spellbreaker", "Willbender", "Berserker", "Firebrand", "Soulbeast", "Firebrand", "Berserker", "Firebrand", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Chronomancer", "Vindicator", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 9.456, 0.0, 0.0, 1.0111, 0.0, 0.8211, 0.8789, 0.5978, 0.0, 0.7618, 0.0, 0.8615, 1.6694, 0.0, 1.2768, 0.8064, 0.0, 1.2024, 1.1054, 0.0, 0.7081, 0.6164, 0.0, 0.351, 0.0, 0.8395, 0.2484], [0.0, 2.9635, 10.638, 0.0, 0.6514, 0.5055, 0.0, 0.805, 0.0, 0.7473, 0.0, 0.0, 0.0, 1.6128, 0.0, 0.768, 1.2826, 1.3818, 0.5124, 0.5414, 0.7252, 0.0, 0.8482, 0.0, 0.9402, 0.6831], [0.0, 2.7518, 8.865, 0.0, 0.0, 1.0111, 0.0, 0.4669, 0.0, 1.943, 0.0, 0.857, 0.8676, 1.0603, 1.5999, 0.0, 1.9488, 1.008, 0.9297, 0.0, 2.004, 2.5794, 0.0, 0.979], [4.0219, 12.411, 1.5566, 0.7222, 0.0, 0.799, 0.6726, 0.0, 0.729, 1.4608, 0.0, 1.9488, 0.7392, 0.0, 2.2445, 2.303, 0.0, 0.7615, 0.0, 0.7313, 0.0, 0.7388, 1.3041], [0.0, 0.0, 2.7048, 0.0, 1.2704, 0.0, 0.0, 0.0, 0.0, 0.5565, 6.8544, 2.2848, 1.9402, 5.1302, 3.6848, 0.9996, 1.2328, 0.8887, 2.7495, 0.0, 0.0, 3.3534], [3.3869, 11.229, 1.5566, 0.7871, 0.7944, 0.0, 0.0, 0.9189, 2.0177, 0.92, 1.3331, 0.0, 1.723, 1.3216, 0.0, 1.5456, 0.8736, 0.0, 2.1643, 1.566, 0.0, 0.6247, 0.6889, 0.8464, 0.5557, 0.6497, 0.6044, 1.3041], [0.0, 6.9854, 21.276, 5.2753, 0.4885, 0.5055, 0.0, 0.0, 1.3183, 2.2419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 5.7154, 22.458, 0.0, 0.0, 0.5778, 0.0, 1.1592, 0.0, 2.1672, 0.0, 2.3805, 1.1127, 0.0, 0.0, 2.4192, 1.2096, 1.1318, 0.0, 2.4048, 5.343], [0.0, 4.4453, 19.503, 0.0, 2.6326, 1.9499, 1.771, 0.0, 3.9607, 0.0, 2.3805, 0.0, 0.0, 0.0, 0.0, 3.696, 0.0, 0.0, 0.0, 1.8437, 1.7503, 0.0, 1.9159, 1.7405, 0.0, 1.9305, 0.0, 0.8059, 1.9251], [13.7592, 36.051, 0.0, 0.4614, 1.3, 2.0286, 0.0], [0.0, 7.4088, 19.503, 0.0, 0.2171, 1.0833, 0.8721, 1.5617, 1.1186, 2.4661, 0.0, 1.2379, 0.0, 0.0, 0.0, 0.0, 2.352, 1.1424, 1.0509, 0.0, 2.1643, 4.8824, 1.2047, 1.2079, 1.1966, 0.0, 1.8428, 0.0, 1.2089, 1.3041], [0.0, 7.1971, 27.777, 0.0, 0.0, 2.0222, 0.0, 2.8819, 0.0, 3.6618, 0.0, 4.1897, 0.1697, 0.4639, 0.0, 0.0, 4.0992, 0.0, 1.9806, 0.0, 7.0541, 5.0666, 0.0, 0.6527, 0.0, 1.638, 0.0, 1.8469], [3.2881, 2.7232, 6.7606, 1.9614, 2.3857, 9.5993, 3.0888, 3.9648, 12.6336, 5.2546, 2.1525, 4.5691, 11.7914, 0.0, 1.4578, 2.1756, 0.0, 0.0, 1.223, 0.0, 0.0], [18.2045, 67.374, 0.5189, 0.0], [0.0, 11.219, 34.869, 1.2107, 0.19, 1.1555, 0.0, 0.0, 1.6779, 3.3628, 1.5456, 4.1897, 0.0, 3.181, 2.6433, 0.0, 2.688, 2.4864, 1.6976, 0.924, 5.1302, 4.4218, 1.1246, 1.3416, 1.2273, 1.9597, 1.3759, 1.2089, 1.0557], [5.1678, 11.6928, 8.9376, 6.7501, 0.0, 8.1763, 13.1732, 0.1348, 5.123, 6.8169, 5.2054, 6.1132, 2.9047, 5.3392, 9.1908], [0.0, 19.8979, 50.235, 0.0, 5.428, 1.3, 7.9961, 0.0, 1.6187, 0.0, 0.0, 0.0, 0.0, 3.2928, 0.4704, 1.6572, 0.0, 3.2064, 10.3174, 0.0, 3.6235, 3.9886, 0.7194, 3.358, 2.7945], [22.0147, 56.145, 0.2594, 0.1628, 0.0, 2.6565, 0.0, 3.9607, 0.2576, 5.8084, 0.0, 2.9159, 0.2087, 0.0, 3.024, 1.4112, 0.0, 7.0541, 8.6593, 0.1169, 2.4573, 1.1603, 0.0, 1.4917, 0.0, 3.5259, 1.4283], [2.2274, 13.7592, 50.235, 1.8161, 4.0167, 1.8777, 3.22, 3.7153, 3.587, 0.0, 5.2371, 1.7163, 0.0, 3.4084, 0.0, 3.6288, 6.3168, 2.9102, 0.0, 8.2565, 6.4484, 1.834, 0.0, 1.4141, 0.0, 1.8135, 0.0, 1.4104, 1.8009], [2.0072, 27.095, 85.695, 3.611, 1.0832, 0.3595, 10.0885, 0.0, 12.4738, 1.7917], [0.0, 25.825, 60.282, 0.0, 0.0, 1.9499, 0.0, 2.8175, 2.357, 7.0993, 1.5088, 6.3797, 1.8294, 2.1206, 2.2955, 0.0, 6.384, 0.0, 0.0, 0.0, 10.8216, 8.475, 1.791, 3.9161, 4.8245, 2.223, 1.2613, 1.0074, 8.8803], [19.6862, 67.374, 0.0, 0.8142, 2.3833, 0.0, 2.3667, 4.0749, 6.0531, 0.0, 9.9029, 0.2829, 0.0, 7.0951, 2.3562, 5.376, 0.0, 5.578, 0.0, 10.501, 12.6204, 0.7497, 2.1393, 1.5658, 1.4332, 2.5225, 6.2459, 2.7945], [18.4162, 72.102, 1.7296, 0.9228, 4.4054, 1.4651, 1.598, 12.9283, 0.6256, 8.3794, 3.3194, 3.3798, 2.5042, 0.0, 7.9968, 8.1312, 3.3953, 0.147, 7.3747, 13.6338, 0.0, 5.2062, 0.0, 1.8198, 3.4515, 0.1529, 4.0968, 6.8931], [0.2202, 32.1754, 91.605, 1.5566, 2.8768, 0.0, 3.059, 2.9563, 13.3019, 0.5152, 8.9507, 0.0, 0.4639, 0.0, 5.9136, 0.2688, 0.6467, 0.0, 15.9518, 10.5017, 4.3732, 5.4753, 2.4122], [0.0, 9.7373, 92.787, 0.0, 0.0, 3.4666, 4.2826, 5.1536, 8.295, 0.0, 8.7602, 2.1123, 1.3917, 5.843, 0.3564, 6.7872, 5.3088, 2.789, 0.0525, 11.3026, 16.7658, 4.165, 7.4696, 0.0, 3.8025, 0.0, 4.7684, 9.1287], [0.0, 30.0586, 98.106, 4.324, 2.5783, 7.222, 0.0, 4.7173, 6.7116, 9.7149, 3.9744, 12.8547, 1.7917, 8.6814, 10.434, 0.0, 11.5584, 7.6608, 8.2457, 0.924, 10.7414, 15.2919, 0.0, 8.205, 6.3455, 1.8621, 5.1772, 2.255, 7.8913], [0.6346, 33.4454, 105.789, 4.5834, 1.3299, 4.4776, 0.0, 5.3613, 5.8327, 9.416, 3.2384, 6.8558, 0.3206, 2.1206, 11.6861, 2.4156, 14.8512, 5.2416, 1.6976, 0.0, 16.5931, 19.0688, 2.8322, 7.5058, 5.5439, 8.5117, 0.1911, 3.9289, 14.1588], [0.246, 37.4674, 111.699, 2.9403, 4.071, 7.4387, 2.8658, 3.7953, 17.7857, 5.152, 16.8539, 4.0738, 10.9345, 13.1468, 3.3066, 15.0528, 14.3136, 9.1349, 0.1785, 20.6011, 17.3186, 1.5283, 9.4962, 6.3455, 7.0674, 6.2595, 4.3571, 7.119, 11.9853], [1.5929, 45.9346, 135.93, 8.821, 2.8768, 9.3886, 4.5563, 5.593, 12.3304, 3.4224, 15.7113, 2.1878, 14.7782, 17.9465, 0.198, 13.776, 10.0128, 8.4882, 0.0, 20.1202, 20.4506, 0.7372, 2.3324, 6.3818, 2.7508, 6.8445, 0.0, 7.7906, 8.1351]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

