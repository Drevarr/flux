created: 20230327224031000
creator: Drevarr
modified: 20230705163523105
modifier: drevarr
tags: ChartData
title: 202303272240_dist_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Khailerian", "Sassy Daddy Demon", "Tinkling Star", "O Noah Bear", "Smol Gluvs", "Jeckyll Mbs", "\u00c1rkantor", "Mistwalker Caelon", "Newtype Khan", "Arcanophage Farra", "Grasszanine", "Xanvias Einzbern", "Rafaellagabriela", "Al Darasuun", "Johosh The Great", "Drevarr Moonwillow", "Eibh\u00ebar", "Bella Sassy"];
const professions = ["Firebrand", "Herald", "Vindicator", "Mechanist", "Herald", "Scourge", "Berserker", "Vindicator", "Vindicator", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Berserker", "Firebrand", "Scourge", "Firebrand", "Scrapper", "Chronomancer", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Distance to Tag per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1807, 354, 1372, 446, 317, 308, 417, 379, 438, 410, 437, 1043], [3093, 745, 326, 322, 521, 323, 439, 1331, 164, 3076, 348, 1104], [311, 9695, 462, 317, 236, 1157, 299, 286, 2210, 397, 269, 1145], [311, 265, 2324, 308, 394, 378, 2288, 295, 1347], [318, 2341, 1594, 768, 693, 281, 4303, 441, 13036], [550, 332, 588, 483, 253, 295, 899, 304, 374, 434, 259, 421, 284, 985], [3302, 466, 1092, 1409, 263, 283, 1921, 294, 377, 2861, 124, 2310, 389, 1523], [554, 292, 454, 428, 378, 296, 599, 423, 405, 601, 370, 414, 990], [4189, 390, 505, 1049, 292, 224, 376, 374, 434, 181, 302, 245, 1295], [390, 661, 618, 1341, 297, 303, 480, 337, 698, 1383, 318, 273, 1455], [1631, 606, 1682, 1311, 306, 650, 1343, 305, 452, 1740, 282, 432, 922], [1471, 244, 725, 372, 272, 240, 2305, 2604, 474, 315, 270, 1422], [1795, 1061, 564, 1048, 269, 236, 1103, 289, 281, 1384, 194, 270, 333, 1029], [296, 692, 3757, 480, 337, 316, 177, 430, 313, 1187], [244, 339, 480, 3343, 378, 1568, 178, 393, 456, 919], [733, 287, 496, 365, 2092, 170, 851, 297, 353, 716, 5492, 181, 1113], [2874, 318, 396, 621, 295, 205, 620, 242, 248, 270, 313, 1076], [871, 517, 906, 391, 216, 201, 755, 257, 415, 415, 172, 217, 252, 909], [347, 222, 690, 390, 244, 190, 329, 221, 199, 683, 221, 308, 982]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

