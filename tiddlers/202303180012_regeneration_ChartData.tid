created: 20230318001239000
creator: Drevarr
modified: 20230705163522399
modifier: drevarr
tags: ChartData
title: 202303180012_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Mac Chiato", "Solus Dominus", "\u00c1rkantor", "Fribble Bibble", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Tempest", "Tempest", "Vindicator", "Vindicator", "Scrapper", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[301.7856, 14.5488, 253.5624, 190.2898, 15.704, 139.8236, 23.0822, 25.219, 29.61, 141.9912, 55.6512, 6.8009, 803.0742, 193.1443, 85.2947, 251.8286, 116.7768, 21.981, 68.4094, 0.0, 0.0, 3.1128, 0.0, 394.0423], [364.4256, 43.0248, 632.9669, 102.0003, 169.2964, 76.4262, 141.8824, 150.3765, 78.3432, 80.9688, 681.4499, 33.839, 240.6096, 206.8731, 138.3835, 139.6132, 14.1715, 141.1041, 342.6761, 363.5663], [813.624, 100.4808, 703.7621, 1358.6196, 35.0376, 182.1979, 92.3602, 187.22, 2.4534, 92.04, 252.7008, 28.0781, 1771.9463, 0.0, 74.8301, 137.2392, 180.1926, 444.3347, 106.7126, 113.7528, 22.2306, 226.305, 1724.0425], [599.1168, 56.028, 745.3723, 1133.2217, 53.0608, 197.0776, 154.9623, 262.9176, 180.5787, 154.128, 162.5976, 31.7908, 1735.7241, 69.4234, 239.7926, 162.8525, 302.3496, 316.2362, 154.8326, 308.0765, 1697.0003], [845.0832, 117.2976, 822.2357, 833.4529, 183.2896, 80.1613, 133.0452, 332.0979, 0.0, 0.0, 251.1696, 3064.4629, 266.8824, 106.0522, 72.959, 179.6634, 329.7144, 58.9453, 54.8122, 0.0, 107.8685, 89.0133, 2007.5555], [446.2248, 2079.2117, 563.1831, 180.7, 313.7071, 293.9906, 446.1301, 60.912, 377.8008, 515.0376, 25.8468, 2216.9207, 0.0, 396.6579, 212.315, 562.5837, 295.8518, 146.6554, 241.2379, 25.7845, 951.2856, 3667.8558], [1646.1792, 378.4536, 1633.6354, 2909.3987, 198.276, 297.8526, 163.9999, 325.5806, 421.308, 476.2368, 279.9984, 127.1456, 4498.9237, 667.0363, 235.8126, 392.243, 442.8963, 317.6843, 392.8694, 243.1118, 87.9612, 98.6282, 229.2721, 3278.7497]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

