created: 20230708082208000
creator: Drevarr
tags: ChartData
title: 202307080822_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Heymerino", "Ain Sof Aur", "Kittendoo", "Aronorf Xideliesi", "A\u00fcrora Windrunner", "Geradenil", "Pet Pirate", "Twinks R Us", "Legoh Brave", "Emobilized", "Drevarr Moonwillow", "Mother Ship", "F\u00f9gly"];
const professions = ["Chronomancer", "Guardian", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Druid", "Firebrand", "Tempest", "Vindicator", "Scrapper", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0862, 0.4074, 0.1774, 0.2062, 0.0071, 0.1075, 0.1782, 0.3516, 0.0, 0.3636, 0.1935, 0.124, 0.0816, 0.1379, 0.1092], [0.0683, 0.0652, 0.0, 0.5185, 0.0484, 0.1649, 0.0925, 0.0, 0.1964, 0.2308, 0.0, 0.4545, 0.0, 0.0982, 0.0408, 0.2155, 0.0168], [0.1774, 0.1959, 0.1459, 0.1075, 0.28, 0.4176, 0.0, 0.2121, 0.0323, 0.2274], [0.2493, 0.1034, 0.1481, 0.2419, 0.1753, 0.032, 0.0108, 0.1855, 0.3407, 0.0, 0.0303, 0.2258, 0.1783, 0.0408, 0.2586, 0.1597], [0.1367, 0.0621, 0.2463, 0.0345, 0.0, 0.0645, 0.0619, 0.0463, 0.0215, 0.1891, 0.6374, 0.0, 0.6061, 0.0, 0.1757, 0.0, 0.1552, 0.1849], [0.3058, 0.0342, 0.3353, 0.3621, 0.037, 0.0968, 0.3196, 0.2811, 0.172, 0.2364, 0.7692, 0.0, 0.6061, 0.0645, 0.2661, 0.0204, 0.2414, 0.1429], [0.7742, 1.3592, 0.2245, 1.25], [0.2914, 0.354, 0.4659, 0.2069, 1.4444, 0.2097, 0.4536, 0.242, 0.3418, 0.9341, 0.0, 0.6061], [0.6677, 0.5862, 0.1481, 1.3226, 0.3299, 0.7046, 0.3333, 1.0255], [0.2547, 0.6439, 0.6724, 0.8148, 0.8065, 0.4742, 0.5979, 0.3656, 1.2, 1.4835, 0.0, 1.0, 0.6129, 0.6253, 0.0204, 0.5, 0.3782], [1.0468, 0.6708, 1.4006, 0.6897, 2.3333, 1.629, 1.1546, 0.9288], [0.8849, 0.6677, 1.0979, 0.2759, 0.7407, 0.2581, 0.6907, 0.3025, 0.0645, 1.0909, 1.5604, 0.0, 1.0606, 0.129, 0.4186, 0.0204, 0.9052, 0.5882], [0.0, 1.4362, 0.8621, 2.2593, 1.2419, 0.8763, 0.5089, 1.8327, 2.6374, 0.0, 2.1212, 1.8387, 1.0594]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

