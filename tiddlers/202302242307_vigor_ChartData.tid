created: 20230224230708000
creator: Drevarr
modified: 20230705163520189
modifier: drevarr
tags: ChartData
title: 202302242307_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Tegan Parker", "Zadie Miststep", "Akira Moonbright", "Project Jupiter", "Arcanophage Farra", "Newtype Khan", "Drevarr Moonwillow", "Mike The Archmagus"];
const professions = ["Druid", "Tempest", "Tempest", "Vindicator", "Druid", "Spellbreaker", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 55.6882, 0.0, 82.296, 73.3355, 112.1803, 67.9047, 0.0, 0.0, 0.0, 63.5589, 65.8133, 127.4, 104.328, 102.5795, 50.2275, 0.0], [78.7499, 76.4837, 31.9046, 30.0144, 61.9584, 12.8385, 31.3017, 39.3813, 0.0, 0.0, 0.0, 0.0, 92.2723, 0.0, 31.752, 12.7661, 7.9013, 16.0291, 53.5002, 25.3369, 0.0, 0.0, 71.344, 66.1824, 78.351, 56.6126, 32.0578], [207.4131, 0.0, 31.1155, 29.6352, 13.8812, 53.02, 53.458, 0.0, 0.0, 0.0, 0.0, 0.0, 53.4912, 30.6427, 0.0, 0.0, 54.8626, 102.2805, 49.9848, 32.489, 62.3398, 0.0, 0.0, 81.7712, 10.7136, 100.229, 60.1103, 31.2747], [119.6866, 12.7439, 31.212, 17.2457, 90.5746, 94.5085, 45.6235, 112.7706, 49.4586, 6.4464, 43.2989, 117.4432, 104.3712, 121.0824, 77.1917, 31.0444], [51.5911, 80.6208, 55.4016, 36.6211, 97.3392, 59.435, 54.9491, 21.1151, 26.9662, 0.0, 0.0, 0.0, 147.9605, 0.0, 0.0, 0.0, 58.7909, 0.0, 50.2397, 53.4374, 69.7829, 83.3078, 0.0, 126.8512, 52.8768, 163.3317, 0.0, 0.0], [86.6144, 38.0827, 0.0, 63.1901, 51.2736, 53.1135, 93.2205, 138.0021, 0.0, 26.1657, 0.0, 16.2426, 0.0, 123.985, 0.0, 0.0, 0.0, 42.8098, 133.4678, 57.8578, 109.5718, 0.0, 62.1144, 1.0939, 166.8352, 151.0969, 75.3615], [122.8959, 181.609, 95.5469, 173.2666, 110.712, 75.9882, 69.6976, 334.9924, 72.3843, 47.8616, 112.4491, 44.2538, 0.0, 248.2565, 0.0, 86.184, 63.4881, 178.9171, 133.0194, 53.1, 226.8582, 2.7038, 65.3915, 48.9466, 242.4128, 108.5184, 104.2068, 162.8427, 0.0], [465.0541, 245.9995, 255.5712, 145.3123, 97.8432, 174.9163, 158.4376, 275.2502, 49.5031, 29.7742, 113.8838, 11.7162, 5.048, 303.276, 68.6676, 88.488, 30.5068, 205.5226, 201.3226, 67.345, 193.0522, 68.8715, 100.448, 96.5194, 335.6304, 210.4272, 235.4146, 156.2541, 78.5093], [794.3145, 380.7211, 397.8893, 244.6262, 192.024, 308.971, 312.6435, 477.3516, 89.6198, 122.3046, 182.6093, 107.8726, 62.152, 695.099, 65.0401, 172.44, 128.2705, 368.6371, 368.5684, 206.8493, 311.593, 203.6068, 157.8408, 226.2379, 594.4288, 299.7648, 451.0607, 300.7547, 208.3985]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

