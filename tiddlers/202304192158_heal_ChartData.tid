created: 20230419215809000
creator: Drevarr
modified: 20230705163525972
modifier: drevarr
tags: ChartData
title: 202304192158_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Solus Sanctus", "Tootsie Pop Rocks", "Etchery Howls", "Mac Chiato", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Scrapper", "Druid", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[89.0811, 12.7941, 632.2039, 281.7703, 197.905, 434.9624, 553.6482, 875.2845, 319.5773, 97.6066, 366.5358, 922.665, 729.4429, 679.3775, 550.7091, 809.8879, 578.5526, 184.7143, 783.7679, 672.9014], [35.2059, 584.5923, 222.9189, 196.3303, 552.8872, 962.0, 980.9828, 26.0169, 27.2941, 353.7835, 137.1475, 305.4113, 570.7734, 887.05, 1049.7285, 460.2909, 997.3966, 663.4561, 104.2857, 1573.5714, 1079.1831], [77.8529, 1037.4077, 103.2703, 126.5113, 642.5789, 1110.7789, 1723.5517, 0.0, 2.2353, 320.6289, 109.377, 611.5811, 326.8473, 1386.4071, 1654.8344, 764.2773, 1094.1379, 1130.7719, 16.381, 2277.9286, 150.7746], [0.0, 1212.8623, 580.4054, 349.914, 741.3684, 1035.7186, 1517.7931, 33.1695, 776.1237, 19.9508, 671.6981, 1304.3153, 2717.7, 1118.7417, 921.5227, 1463.1034, 815.4123, 672.5238, 3573.3929, 1750.5775], [266.6471, 1676.9311, 890.9595, 679.8394, 1527.5564, 1756.1206, 2261.9138, 403.1765, 1133.4948, 219.4754, 1015.8038, 3203.2906, 2546.3929, 1810.1523, 913.7227, 1928.2241, 1747.5789, 3192.2679, 1017.4789], [83.2353, 659.2149, 1046.3784, 572.1018, 2825.1353, 3295.1206, 3733.6897, 4.0424, 282.4706, 1980.701, 166.0, 740.7057, 2998.1034, 1408.1571, 2212.245, 1556.1545, 716.3793, 1246.2895, 413.7143, 751.8214, 3404.3239], [453.6176, 1310.1956, 1329.8378, 877.3416, 1766.9474, 2601.2714, 2688.5345, 17.8814, 446.8824, 1332.1546, 385.918, 1054.4264, 2358.0148, 1563.85, 2649.6556, 1575.7955, 2920.3362, 881.193, 850.2857, 3726.5714, 2424.8451], [31.6486, 348.3824, 2050.0138, 1170.4459, 1089.6697, 2402.9699, 3233.3166, 2732.2845, 191.839, 289.4118, 1730.7216, 531.3607, 1485.2755, 4387.665, 2850.5857, 3051.1391, 1979.0545, 3130.2845, 2130.5526, 252.8095, 4232.5893, 3167.6056]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

