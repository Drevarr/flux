created: 20230607221050000
creator: Drevarr
modified: 20230705163533954
modifier: drevarr
tags: ChartData
title: 202306072210_Cdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Etcherii", "Johosh The Great", "Skye Nightroad", "Artakama Nahid", "Kary\u00edna", "Drevarr Moonwillow", "Rafaellagabriela", "Wh\u00f4o", "Mistwalker Cael", "Chrozz", "Eibh\u00ebar", "Sub Train", "Venomina The Siren", "Ria Zerria", "Smol Gluvs", "Lord Erin The Wise", "Demon Sekhmet", "Permanent Dawn", "Solus Sanctus", "Be\u00eb", "Sister Elonith", "Xanvias Einzbern"];
const professions = ["Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Vindicator", "Scrapper", "Firebrand", "Scourge", "Vindicator", "Willbender", "Chronomancer", "Firebrand", "Tempest", "Scourge", "Reaper", "Weaver", "Berserker", "Weaver", "Firebrand", "Reaper", "Berserker", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condi Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 7.01, 16.0281, 2.9595, 2.7205, 2.8913, 6.65, 0.0, 0.0, 7.011, 0.0, 2.4, 3.5259], [0.0, 8.13, 13.9921, 0.0, 7.0131, 26.25, 49.45, 15.1667, 0.0, 30.7692, 6.42, 0.0], [0.0, 5.51, 14.5384, 0.1419, 12.8428, 8.9239, 0.0, 3.7037, 0.0, 13.8022, 33.22, 9.4909, 13.1724], [0.2732, 9.68, 12.9509, 55.2489], [0.0, 0.0, 15.6393, 0.0, 18.2445, 0.0, 0.0, 1.3889, 0.0, 6.8571, 7.54, 22.7636, 10.9397], [0.0, 24.21, 13.7929, 0.0, 10.1965, 25.9348, 7.85, 25.2963, 24.2593, 0.4945, 9.86, 0.0, 27.7931], [0.0, 9.39, 15.007, 0.3919, 16.0961, 23.7174, 0.0, 11.7963, 5.6296, 17.1758, 0.0, 0.0, 13.8793], [15.2488, 0.0, 36.083, 17.6413, 4.85, 0.0, 0.0, 2.5934, 11.42, 0.0364, 3.2328], [135.8889, 29.3407, 173.44, 122.1091, 221.1293], [0.0, 2.39, 15.337, 0.0, 24.5677, 43.7609, 1.3148, 0.0, 4.2857, 2.2, 1.4909, 22.3103], [2.1561, 1.14, 14.7718, 0.2703, 18.559, 21.8587, 3.05, 95.4259, 4.1111, 34.0879, 47.1, 10.0, 43.5259], [0.0585, 3.29, 15.3765, 1.0203, 36.6812, 15.0109, 4.2, 31.2963, 0.0, 25.0879, 83.06, 35.1091, 34.9741], [19.6196, 0.0, 28.1703, 11.0109, 122.75, 22.1852, 0.0, 14.3956, 26.9, 0.5455, 11.2328], [15.32, 23.1755, 13.8176, 15.2009, 15.1413, 0.0, 20.8333, 3.7407, 18.8901, 4.44, 18.9273, 7.3879], [0.0, 1.49, 10.0891, 2.3851, 212.3755], [0.0, 0.66, 19.9254, 1.0946, 36.8253, 38.1413, 21.45, 32.1481, 27.3704, 22.6154, 68.42, 11.9455, 70.7069], [0.7317, 1.8, 25.9732, 58.6288, 12.2174, 57.1, 82.9259, 6.3333, 85.3077], [15.0, 16.79, 39.3177], [0.0, 0.0, 38.4366, 0.0, 54.0349, 72.7174, 0.0, 95.5556, 0.0, 13.6923, 9.02, 0.0, 61.5948], [0.2976, 4.83, 51.52, 0.0, 10.2227, 17.3804, 0.0, 13.5185, 0.0, 6.9451, 64.52, 71.9273, 6.069], [3.3171, 20.21, 42.2514, 9.0135, 69.2009, 52.7609, 0.0, 49.6667, 25.7037, 67.9231, 105.48, 8.4364, 56.9741], [4.639, 12.77, 80.7459, 33.75, 30.6114, 144.1848, 39.537, 0.0, 137.7473, 76.28, 74.5636, 63.3362], [0.0, 3.28, 130.4362, 22.0676, 219.7555, 211.163, 0.0, 74.5556, 0.0, 99.3297, 95.72, 23.9636, 50.5862]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

