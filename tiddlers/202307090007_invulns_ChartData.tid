created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_invulns_ChartData
type: text/vnd.tiddlywiki


const names = ["Valaria Emberstorm", "S\u00e2ucy K\u00e2t", "Lost Uber Driver", "Boof Floof", "Chainer Valentine", "Naithan Stone", "Jello Jawn", "Jmbrage Rev", "Lucky Leipreach\u00e1n", "Porlen", "Blaze All Might", "Luke The Knight", "Koranthin", "Audra Storm", "Tika Fiery", "Sarette Fay", "Zaedy Zae", "Kittendo", "Jerryatric Reflexes", "Newtype Khan", "Glorious Gluvs", "Greg The Knight", "Zayde Sunsabre", "Tru Master", "Drevarr Moonwillow", "Sonia Truestrike", "Perpetual Hope", "Dalveirric", "Tantai Jin", "Enter Effore", "K\u00e2 \u00d4tik R\u00e6j", "Amiti\u00e9l", "Jerryatric Reflexes", "Artakama Nahid", "Free H\u00e4nd", "Miphest\u00f6", "Whip \u00d1 Sl\u00e0pper", "Erin Celes", "Danaeryn", "Aisling Vexwind"];
const professions = ["Tempest", "Chronomancer", "Herald", "Firebrand", "Soulbeast", "Tempest", "Virtuoso", "Vindicator", "Scrapper", "Ranger", "Firebrand", "Berserker", "Firebrand", "Weaver", "Firebrand", "Chronomancer", "Druid", "Soulbeast", "Berserker", "Spellbreaker", "Berserker", "Firebrand", "Spellbreaker", "Scourge", "Scrapper", "Firebrand", "Tempest", "Soulbeast", "Reaper", "Firebrand", "Spellbreaker", "Firebrand", "Spellbreaker", "Tempest", "Vindicator", "Tempest", "Tempest", "Herald", "Tempest", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Invulnerable to Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 5, 22], [0, 0, 0, 12, 4, 9, 0, 6, 0, 0, 0], [1, 0, 19, 0, 0, 0, 15], [0, 0, 0, 0, 5, 0, 0, 23, 0, 0, 0, 8], [0, 0, 20, 4, 4, 4, 5], [0, 0, 0, 0, 38], [0, 0, 4, 21, 14], [0, 0, 0, 12, 18, 0, 0, 10], [0, 0, 0, 4, 38], [41, 0, 0, 1, 0, 0], [25, 7, 0, 6, 0, 0, 0, 0, 4], [16, 0, 12, 0, 0, 0, 17, 0], [0, 0, 0, 0, 13, 11, 0, 9, 8, 0, 0, 0, 10], [0, 0, 0, 0, 12, 0, 0, 41, 0, 0, 0, 0, 0], [0, 0, 0, 0, 25, 0, 0, 9, 0, 0, 0, 0, 24], [0, 0, 0, 11, 20, 0, 0, 19, 0, 0, 0, 0, 10], [0, 0, 0, 33, 28], [19, 0, 15, 0, 0, 0, 34], [23, 0, 19, 0, 0, 0, 23, 4], [0, 0, 48, 12, 11, 0, 0, 0, 0, 0], [0, 0, 0, 23, 25, 13, 0, 0, 0, 0, 0, 0, 11], [41, 0, 16, 18, 0, 0], [13, 0, 10, 8, 0, 0, 26, 18], [40, 26, 1, 8, 0, 1], [0, 0, 0, 0, 10, 30, 0, 25, 0, 0, 0, 0, 14], [9, 29, 29, 0, 0, 0, 17], [0, 0, 0, 46, 15, 0, 0, 10, 0, 0, 0, 0, 15], [0, 0, 53, 1, 13, 12, 0, 12], [0, 0, 0, 5, 38, 32, 0, 12, 0, 0, 0, 12, 0], [0, 0, 0, 14, 18, 0, 0, 46, 0, 0, 21, 0], [31, 0, 18, 0, 0, 35, 21], [0, 0, 0, 96, 11], [9, 0, 0, 52, 52], [0, 0, 92, 32, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 36, 0, 0, 81, 0, 0, 0, 14, 10], [164, 20], [0, 0, 0, 27, 67, 0, 0, 58, 0, 0, 0, 42], [0, 0, 0, 80, 37, 12, 0, 30, 0, 0, 0, 0, 48], [0, 0, 0, 39, 13, 20, 0, 66, 0, 0, 0, 82, 0], [0, 0, 85, 41, 0, 0, 63, 0, 0, 75, 0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

