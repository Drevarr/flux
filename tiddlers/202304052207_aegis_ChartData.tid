created: 20230405220700000
creator: Drevarr
modified: 20230705163524407
modifier: drevarr
tags: ChartData
title: 202304052207_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Raelyn Sunray", "Sygaldry Verdandi", "Sister Elon\u00edth", "Koralia Danai", "Kiloak", "Johosh The Great", "Solus Sanctus", "Bella Sassy"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.1047, 40.9781, 0.0, 83.8471, 0.0, 0.0, 24.1418, 1.3621, 25.6338, 16.2445, 12.3617, 5.355, 60.0237, 94.0082, 11.2112, 10.488, 5.581, 6.5403, 41.2776, 478.2445, 47.2213, 11.1042, 0.0, 0.0, 59.0364], [30.271, 8.6486, 16.7564, 174.6736, 13.2766, 0.0, 0.0, 13.9308, 7.7459, 23.0614, 25.5374, 189.7771, 64.3214, 30.1558, 28.6672, 0.0, 0.0, 62.5968, 220.07, 11.9462, 138.663, 28.9449, 0.0, 157.4676], [28.6187, 56.1018, 20.3495, 189.0049, 113.0369, 0.0, 0.0, 30.429, 30.5688, 49.4547, 2.1815, 66.9851, 154.8697, 155.5893, 1.8075, 129.0898, 0.0, 15.0579, 280.6272, 422.3794, 41.9695, 123.2064, 115.9922, 135.5217, 256.68], [284.3676, 132.1443, 52.4181, 135.2078, 47.0501, 222.9786, 572.7456, 626.3033, 86.5536, 140.2812, 203.4644, 56.8775, 251.7696], [58.3848, 84.353, 211.4323, 48.9289, 0.0, 15.4128, 24.0534, 59.5302, 0.0, 10.4659, 223.3222, 228.969, 41.0238, 148.2304, 9.3509, 98.6368, 404.7624, 444.1765, 104.3377, 134.7012, 191.3022, 35.6899, 237.4848], [5.2785, 72.2093, 111.7542, 411.1391, 0.0, 9.4978, 26.098, 8.4036, 0.0, 86.9735, 230.1334, 271.7484, 92.2064, 187.9974, 0.0, 113.0103, 78.7752, 684.2675, 73.5931, 131.2974, 136.5989, 149.366, 27.342], [20.655, 83.0544, 23.4053, 269.874, 128.1746, 0.0, 8.1214, 17.5619, 27.1848, 168.7482, 43.6036, 7.2828, 396.6673, 197.303, 83.9467, 56.81, 158.928, 24.8684, 363.4848, 534.917, 81.2567, 220.968, 55.1813, 0.0, 266.3892], [18.5207, 11.5544, 30.9608, 341.4371, 0.4963, 0.0, 15.5314, 56.1053, 61.8708, 23.2378, 24.0482, 57.8459, 156.8279, 204.23, 4.2786, 348.726, 94.5991, 19.3928, 533.5848, 564.9485, 83.0374, 124.8246, 96.5009, 155.6565, 273.8664], [64.3059, 54.157, 130.962, 347.6722, 30.8546, 41.7754, 34.0415, 104.357, 147.5706, 78.2118, 41.3962, 343.3696, 441.1915, 34.6403, 199.5342, 64.9757, 311.3487, 635.04, 799.3885, 159.0873, 197.7552, 134.7932, 112.6233, 427.0932]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

