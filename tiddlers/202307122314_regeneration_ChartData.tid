created: 20230712231437000
creator: Drevarr
tags: ChartData
title: 202307122314_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Cat Wigglebooty", "Artakama Nahid", "Tootsie Pop Rocks", "Drevarr Moonwillow", "Klengah", "Arriasa", "Tribal S", "Zaedy Zae"];
const professions = ["Scrapper", "Tempest", "Scrapper", "Scrapper", "Druid", "Druid", "Druid", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[372.8472, 16.9974, 76.3164, 117.5587, 0.0, 39.0972, 211.7002, 45.2276, 38.0308, 86.3578, 152.9617, 155.9997, 34.5055, 260.498], [225.8541, 212.7204, 79.344, 162.7843, 102.7829, 98.3606, 157.2807, 52.6784, 90.3408, 29.1384, 174.6144, 41.031, 168.6542, 203.6489, 72.1665, 65.2749, 60.6001, 49.3158, 111.3979, 237.5649, 120.1834, 133.2713, 174.685], [166.1383, 99.7402, 48.792, 563.2108, 283.7241, 145.9559, 212.4372, 193.3684, 97.1291, 57.3822, 348.0678, 124.5383, 0.0, 114.0266, 89.0172, 73.2002, 0.0, 157.9098, 266.3915, 259.4574, 0.0, 208.0958, 497.0875], [746.9242, 155.7907, 162.279, 704.4579, 278.6278, 200.3841, 434.6655, 232.5204, 256.3739, 221.9247, 656.5068, 182.9827, 237.3228, 344.8845, 301.5351, 217.36, 150.1403, 256.9818, 576.6106, 504.4658, 96.3072, 385.8117, 692.461], [1480.7122, 259.2072, 99.579, 589.4529, 69.5893, 38.0848, 114.9416, 859.8792, 616.359, 254.7373, 736.074, 291.0592, 0.0, 134.245, 413.6953, 26.2504, 4.1944, 98.4666, 249.2087, 519.3527, 225.7952, 627.8504, 369.7365], [308.0348, 423.0432, 116.0862, 462.7383, 315.3392, 193.8296, 36.1084, 258.0744, 318.1323, 349.8845, 705.2688, 94.0823, 599.6276, 904.8876, 408.0073, 320.7063, 225.0085, 274.6496, 585.5503, 611.051, 4.9909, 560.7772, 801.941], [899.0378, 362.9966, 69.3006, 1415.607, 232.3552, 36.2641, 169.2674, 381.419, 643.3082, 354.0379, 1863.3276, 672.6757, 543.8576, 201.1792, 502.5348, 383.8076, 398.5078, 723.4182, 1450.9017, 1215.7218, 210.371, 955.4028, 1258.859], [1442.2554, 376.0236, 247.5624, 2310.7641, 574.123, 101.1452, 384.5232, 649.9506, 589.0016, 1003.0383, 1654.9668, 841.206, 0.0, 721.0385, 763.0097, 112.8098, 388.8027, 427.7984, 769.2786, 1129.3402, 291.4045, 1257.3261, 1496.0925]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

