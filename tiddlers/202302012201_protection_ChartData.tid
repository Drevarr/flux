created: 20230201220146000
creator: Drevarr
modified: 20230705163518541
modifier: drevarr
tags: ChartData
title: 202302012201_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Mac Aaroni", "Whose Guardian", "Cat Wigglebooty", "Raziel Umbra", "Hyde En Sikh", "Black Raspberry Pie", "Etchery Howls", "Arkitrix", "Arriasa", "Raelyn Sunray", "Zaylen Harker", "\u00c9\u00efbhear", "\u00c2 R K", "Koralia Danai", "Bella Lunabringer", "Ravioli Fetabringer", "Sygaldry Verdandi", "Johosh The Great"];
const professions = ["Tempest", "Firebrand", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Druid", "Firebrand", "Druid", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 53.5697, 0.0, 24.9216, 0.0, 31.85, 0.0, 50.3501, 64.728, 54.7565, 15.3859, 0.0, 56.9321, 0.0, 43.0338, 0.0, 0.0, 43.7584, 0.0, 0.0, 0.0, 0.0, 52.886], [65.9941, 52.2536, 103.4145, 72.8944, 40.6522, 19.8803, 75.4156, 35.6307, 49.8649], [22.3401, 218.1892, 102.7992, 18.9658, 23.1358, 29.9497, 10.3307, 26.6054, 29.0606, 16.3836, 29.7811, 19.0327, 44.5371, 0.0, 4.8079, 23.6294, 1.1525, 38.6524, 16.208, 9.3895, 0.0, 0.0, 19.697], [22.4606, 185.7345, 87.9048, 42.2822, 34.7038, 19.8839, 71.0194, 0.0, 0.0, 14.4243, 34.8575, 23.9394, 38.6316, 7.4598, 34.4621, 20.7309, 46.5667, 5.9742, 25.3478, 20.1957, 18.7083, 67.7488], [35.7602, 172.0488, 54.3576, 32.5248, 36.5383, 0.6059, 8.6241, 86.2531, 20.5344, 0.0, 23.6908, 31.992, 51.0992, 33.7365, 32.1675, 21.457, 19.8528, 37.9376, 19.5835, 19.3586, 21.7073, 23.2814, 70.4184], [10.3664, 231.4838, 62.0832, 37.7626, 46.5265, 10.3874, 61.2211, 20.8469, 36.8186, 21.1848, 32.2486, 46.6029, 53.3169, 40.5328, 28.4506, 8.3006, 35.6399, 15.3239, 25.4831, 15.3388, 33.1313, 73.9537], [43.6757, 86.8032, 83.1158, 33.2683, 15.7116, 5.507, 20.3558, 17.1735, 74.3361, 28.1854, 58.8157, 40.8366, 24.2766, 28.5398, 38.32, 86.0361, 36.0058, 39.2969, 37.3187, 27.119, 123.0157], [145.0099, 56.8204, 159.7757, 0.0, 0.0, 106.4118, 92.1729, 55.7424, 52.2399, 47.7648, 34.2863, 129.5392, 41.5245, 58.385, 26.9854], [47.4928, 406.4653, 205.4592, 62.3462, 48.463, 20.5262, 13.8384, 59.2155, 35.9588, 39.8616, 56.5068, 4.9833, 5.196, 1.1309, 14.8999, 98.5969, 27.6741, 31.2791, 0.0, 28.846, 74.2423], [98.4932, 60.7762, 123.282, 75.0582, 123.6682, 69.7277, 40.3642, 170.5915, 55.1874, 23.184, 30.0829, 60.9539, 377.4166], [22.5812, 340.5784, 200.796, 98.039, 97.0788, 76.6714, 13.9312, 192.1742, 0.0, 0.0, 55.2494, 121.424, 93.2058, 80.3061, 70.7599, 97.0474, 10.1665, 113.9149, 27.6741, 95.9045, 42.5473], [61.0736, 419.9555, 85.8168, 132.0845, 75.7775, 37.5508, 6.4865, 227.4336, 0.0, 46.0933, 30.8301, 72.9656, 115.0187, 86.0832, 44.5861, 87.2563, 20.1958, 85.2191, 9.1354, 42.2915, 56.4736, 34.6663, 236.9406], [83.8958, 373.8151, 180.7512, 210.9043, 147.3763, 96.4588, 24.4547, 329.5642, 22.4539, 44.2588, 89.8386, 173.8601, 181.6724, 126.6993, 86.046, 80.9472, 61.2186, 129.9988, 111.6339], [96.3918, 627.5871, 234.552, 201.1046, 197.5719, 216.5626, 23.436, 23.1358, 90.6545, 106.925, 113.8035, 108.6183, 54.6546, 73.8941, 8.7945, 114.9871, 64.1353, 40.147, 32.3379, 70.1321, 272.0055], [49.2205, 748.2168, 258.8424, 118.103, 150.0772, 51.7477, 24.8459, 223.643, 39.8635, 92.365, 63.2338, 98.7987, 176.447, 169.9614, 108.9642, 72.3763, 28.4004, 143.836, 119.9388, 73.8604, 29.1413, 32.4277, 256.7819], [72.0829, 636.7761, 221.8152, 140.6592, 156.8549, 81.4633, 41.2379, 368.2565, 61.8264, 102.8373, 155.6659, 181.9863, 208.5891, 187.6014, 107.3041, 134.4854, 34.739, 123.2078, 60.2507, 93.0451, 76.4959, 49.4091, 411.9043], [34.1932, 683.6985, 210.888, 260.5786, 288.3317, 67.831, 414.6014, 0.0, 14.7274, 85.2054, 94.7356, 247.4147, 223.2783, 93.8722, 87.911, 72.0163, 192.3941, 149.8365, 75.7344, 62.3217, 121.7159, 408.5854], [76.5027, 943.1402, 302.1336, 338.3424, 249.1434, 110.9311, 14.4642, 363.107, 58.7016, 72.618, 163.5045, 173.7745, 194.5535, 204.0507, 147.1254, 127.8192, 80.1385, 231.6592, 77.3695, 90.3403, 83.0626, 91.8466, 414.5739]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

