created: 20230318001239000
creator: Drevarr
modified: 20230705163522404
modifier: drevarr
tags: ChartData
title: 202303180012_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Morton Saltbringer", "Air One Com", "Solus Dominus", "Blanco Padre Guard", "Eibh\u00ebar", "Black Raspberry Pie", "Primal Clone", "Ryvalia Fazebringer", "Grasszanine", "Ark Darkness", "Demon Sekhmet", "Bella Sassy", "Whose Guardian", "Koralia Danai", "Zaylen Harker", "Smol Daddy Tika", "Arcanophage Farra", "Sygaldry Verdandi", "Newtype Khan", "Viral Marketing", "Jupi Jupi Jupi", "Aronorf Xideliesi"];
const professions = ["Spellbreaker", "Chronomancer", "Firebrand", "Vindicator", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[40.6464, 35.3976, 39.4706, 4.5656, 8.9164, 4.5975, 12.5893, 7.3602, 3.4632, 4.5144, 0.0, 81.2792, 2.0846, 3.4653, 0.0, 13.6269, 12.6985], [30.2064, 0.0, 42.3326, 82.4728, 5.5016, 5.3326, 5.5107, 1.1544, 5.4912, 5.4978, 93.9423, 10.811, 0.0, 0.0, 13.8033, 11.139, 4.1731, 5.4168, 10.9805, 0.0, 77.2632], [59.9952, 23.5502, 40.0938, 9.5471, 0.0, 5.3434, 0.0, 2.5584, 3.696, 0.0, 168.4483, 22.3493, 5.3181, 0.0, 12.3921, 8.4285, 1.863, 5.0069, 8.6765, 0.0, 111.1732], [121.104, 5.2752, 44.6443, 38.2242, 0.0, 0.0, 0.0, 46.5115, 0.0, 0.0, 19.7472, 0.0, 141.0607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.341], [159.0246, 27.7306, 7.5139, 0.0, 19.3599, 27.2905, 7.7128, 3.7771, 0.0, 32.0836, 7.795, 227.2826], [53.7312, 6.8544, 55.4803, 89.5359, 9.8072, 6.9095, 0.0, 20.0376, 6.9372, 11.4504, 1.848, 0.0, 129.8701, 7.9992, 0.0, 0.0, 12.0393, 18.7878, 8.6443, 11.185, 6.9718, 10.0246, 0.0, 101.3006], [57.2112, 6.7704, 50.7125, 99.7152, 6.8536, 4.5012, 6.8018, 13.9656, 3.9762, 1.1544, 7.0488, 0.0, 131.3425, 12.217, 0.0, 4.5864, 18.3897, 20.4958, 7.0049, 7.0565, 6.9853, 14.0812, 108.1685], [51.3648, 6.4848, 66.6053, 99.5075, 6.4896, 13.0449, 6.5499, 19.4709, 6.5565, 13.416, 13.3056, 4.516, 123.9803, 12.5078, 5.421, 0.0, 14.2443, 13.1069, 4.8811, 6.5587, 6.4461, 19.6634, 90.9989], [66.816, 8.3328, 43.4885, 101.3771, 9.6616, 16.858, 14.9892, 24.369, 10.2366, 16.8792, 10.0848, 0.0, 148.423, 13.8168, 1.8871, 0.0, 14.2884, 15.409, 14.9785, 8.1984, 5.6635, 4.3138, 14.735, 106.4515], [77.256, 0.0, 0.0, 154.1431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 41.6856, 0.0, 280.06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 203.0305], [92.4288, 31.9872, 8.3798, 308.7016, 0.0, 0.0, 0.0, 10.3224, 61.7157, 285.0663, 17.5324, 0.0, 0.0], [96.6048, 0.0, 48.8342, 68.3465, 9.9216, 8.0563, 0.0, 47.9283, 0.0, 41.5896, 0.0, 245.6047, 17.065, 0.0, 0.0, 0.0, 40.6945, 0.0, 2.1374, 0.0, 15.439, 200.2405], [3.9339, 45.4896, 7.2336, 7.497, 365.1676, 17.6952, 7.1708, 11.9246, 33.3396, 51.8706, 0.0, 43.8614, 0.0, 0.0, 44.8084, 279.6499], [55.5408, 8.5512, 73.2514, 93.8985, 7.3424, 2.4943, 11.5883, 86.5867, 7.8678, 18.6888, 14.5728, 2.4633, 341.6084, 28.7002, 0.0, 0.0, 46.3491, 13.7752, 3.726, 6.5587, 8.4805, 0.0, 145.0831], [43.9872, 7.6104, 47.9674, 125.475, 7.3736, 3.8705, 7.8725, 32.4245, 28.0026, 19.7808, 13.8864, 7.8719, 443.7964, 0.0, 7.6854, 0.0, 33.516, 37.5756, 11.4388, 0.0, 7.8432, 0.0, 154.0972], [112.6128, 7.2408, 60.3926, 285.8502, 7.0241, 0.0, 3.5218, 37.0125, 4.9608, 33.6336, 0.0, 122.2133, 48.0922, 3.6025, 0.0, 53.8902, 28.8129, 1.6767, 0.0, 0.0, 0.0, 5.029, 232.6481], [99.8064, 0.0, 166.8744, 64.3994, 0.0, 11.0953, 33.2534, 11.8202, 0.0, 23.4312, 0.0, 0.0, 288.8947, 39.7536, 26.5216, 42.6182, 26.46, 31.0035, 0.0, 0.0, 8.6222, 0.0, 13.2263, 165.472], [0.0, 0.0, 0.0, 0.0, 0.0, 408.7521, 67.2418, 0.0, 68.5843, 0.0, 0.0, 0.0, 0.0, 58.6279, 51.0946, 405.6318], [75.168, 0.0, 56.7806, 143.5483, 0.0, 18.4922, 8.1559, 39.468, 29.2716, 3.6504, 15.3912, 444.0909, 1.2605, 12.4545, 0.0, 8.9964, 87.5897, 7.4893, 6.2074, 7.6961, 52.6536, 241.6621], [184.7184, 36.8424, 151.1261, 333.8382, 27.8408, 29.8168, 4.755, 41.1277, 0.0, 0.0, 45.1704, 0.0, 238.8314, 21.4282, 23.8798, 0.0, 0.0, 23.132, 20.5303, 19.1198, 15.1579, 0.0, 0.0, 221.7025], [84.216, 7.6776, 87.5549, 405.093, 28.704, 7.8556, 7.841, 14.6538, 7.7832, 44.148, 17.5032, 6.658, 505.3448, 33.0149, 17.4981, 0.0, 15.6114, 33.6769, 26.9017, 32.7936, 6.7403, 21.323, 246.5984], [114.4224, 23.7216, 133.2106, 396.3679, 7.8416, 32.7985, 17.9808, 40.48, 6.0066, 16.38, 16.2096, 522.1308, 60.4061, 13.7926, 23.9198, 63.5922, 14.3322, 0.0, 7.9934, 0.0, 7.9412, 11.0638, 241.4475], [215.4816, 50.064, 137.1115, 589.5661, 17.5552, 30.1322, 0.0, 38.2131, 52.452, 20.0304, 0.0, 483.2581, 2.5694, 0.0, 20.1802, 73.6029, 69.4702, 14.2706, 6.8808, 17.7578, 19.1178, 35.9071, 258.1879]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

