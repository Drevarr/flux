created: 20230424220408000
creator: Drevarr
modified: 20230705163526650
modifier: drevarr
tags: ChartData
title: 202304242204_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Raziel Umbra", "Seren Nightroad", "Tika Rucola", "Panther B Me", "Blancooo Padreee", "Solo Bloodborn", "Newtype Khan", "Primal Clone", "Smol Gluvs", "Grasszanine", "Rina Of Theros", "Black Raspberry Pie", "Eibh\u00ebar"];
const professions = ["Chronomancer", "Scourge", "Chronomancer", "Scourge", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1.28, 0.7333, 0.8554, 0.416], [0.0642, 0.04, 0.6061, 0.5464, 1.5893, 0.1379, 0.1552, 1.0781], [0.0455, 0.18, 0.3485, 0.5876, 0.8929, 0.069, 0.1034, 0.4844, 0.338, 0.6267, 0.4889, 0.3976, 0.296], [0.0311, 0.0, 0.5455, 0.5258, 1.2143, 0.069, 0.1552, 0.9062, 0.338, 0.8933, 0.5556, 0.5422, 0.24], [0.0311, 0.0, 0.5152, 0.4948, 1.1071, 0.1034, 0.2586, 1.1562, 0.4085, 0.9333, 0.1333, 0.747, 0.464], [0.0766, 0.0, 0.6364, 0.5979, 1.3929, 0.1034, 0.1207, 1.0, 0.2113, 0.7067, 0.4222, 0.8916, 0.488], [0.0725, 0.1, 0.8939, 0.5258, 0.8214, 0.069, 0.0, 0.8906, 0.4366, 1.08, 0.6333, 0.5663, 0.504], [0.1097, 0.06, 1.0303, 0.7732, 1.25, 0.0, 0.1724, 1.3281, 0.1268, 0.8133, 0.3111, 0.7349, 0.376], [0.0828, 0.1, 0.8182, 0.7732, 1.4643, 0.1379, 0.2759, 1.0938, 0.3944, 0.9333, 0.7778, 0.6747, 0.592], [0.1304, 0.12, 0.5606, 0.6289, 0.9821, 0.3448, 0.2586, 1.3438, 0.3803, 0.9733, 0.4222, 0.8313, 1.024], [0.0994, 0.08, 1.0, 0.6392, 1.2857, 0.6552, 0.1207, 1.2656, 0.5493, 1.12, 0.7444, 0.8313, 0.552], [0.2153, 0.04, 1.0606, 0.8866, 1.5179, 0.069, 0.1897, 1.625, 0.3662, 1.12, 0.7, 0.6988, 0.176], [0.2402, 0.06, 1.3485, 1.0103, 1.4107, 0.7931, 0.6034, 1.5312, 0.8732, 1.6133, 1.1, 1.0964, 1.032]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

