created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_blocks_ChartData
type: text/vnd.tiddlywiki


const names = ["Magister Boombottom", "Bella Sassy", "Heavenm", "Thats Not Nice", "Kittendo", "Luke The Knight", "Ggclaudx", "K\u00e2 \u00d4tik R\u00e6j", "Jerryatric Reflexes", "Hayuf", "Amiti\u00e9l", "Zayde Sunsabre", "Naithan Stone", "Lucky Leipreach\u00e1n", "Brutal Araden", "Aisling Vexwind", "Lost Uber Driver", "Audra Storm", "Miphest\u00f6", "Jerryatric Reflexes", "Sonia Truestrike", "Scythe User", "Whip \u00d1 Sl\u00e0pper", "Valaria Emberstorm", "Jmbrage Rev", "Jello Jawn", "Zaedy Zae", "Tantai Jin", "Newtype Khan", "K\u00e2 Otik", "S\u00e2ucy K\u00e2t", "Greg The Knight", "Artakama Nahid", "Hayuf", "Erin Celes", "Danaeryn", "Glorious Gluvs", "Perpetual Hope", "Koranthin", "Blaze All Might", "Free H\u00e4nd", "Red Reaper Robin", "Drevarr Moonwillow", "Sarette Fay", "Tika Fiery", "Boof Floof", "Enter Effore"];
const professions = ["Tempest", "Firebrand", "Guardian", "Firebrand", "Soulbeast", "Berserker", "Holosmith", "Spellbreaker", "Spellbreaker", "Dragonhunter", "Firebrand", "Spellbreaker", "Tempest", "Scrapper", "Renegade", "Tempest", "Herald", "Weaver", "Tempest", "Berserker", "Firebrand", "Reaper", "Tempest", "Tempest", "Vindicator", "Virtuoso", "Druid", "Reaper", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Tempest", "Firebrand", "Herald", "Tempest", "Berserker", "Tempest", "Firebrand", "Firebrand", "Vindicator", "Reaper", "Scrapper", "Chronomancer", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Blocked Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[2, 1, 1, 7], [14], [8, 1, 5], [15], [8, 0, 2, 2, 1, 1, 1], [1, 0, 1, 4, 2, 3, 0, 4], [4, 0, 2, 5, 0, 0, 5], [7, 0, 1, 6, 1, 2, 1], [2, 0, 0, 5, 12], [19], [5, 1, 1, 10, 3], [10, 0, 1, 4, 0, 2, 3, 2], [4, 1, 0, 8, 10], [2, 1, 0, 3, 18], [23, 1, 1], [0, 1, 1, 3, 8, 1, 5, 5, 0, 3, 1], [8, 1, 8, 8, 0, 1, 2], [1, 0, 0, 3, 9, 8, 1, 5, 1, 0, 0, 0, 1], [29, 1], [9, 0, 8, 4, 0, 2, 4, 3], [14, 6, 5, 1, 1, 1, 4], [13, 2, 1, 3, 15], [2, 1, 2, 2, 8, 7, 0, 2, 8, 0, 2, 0], [3, 0, 5, 26], [4, 1, 0, 4, 12, 11, 1, 2], [6, 0, 1, 5, 23], [7, 1, 1, 2, 24], [2, 0, 0, 0, 16, 7, 1, 5, 1, 0, 0, 1, 3], [3, 0, 2, 21, 5, 0, 1, 6, 0, 1], [6, 3, 30], [3, 0, 0, 1, 20, 7, 0, 5, 6, 0, 1], [16, 1, 12, 12, 1, 2], [4, 1, 1, 21, 7, 0, 6, 4, 0, 2, 2], [7, 2, 0, 15, 25], [0, 0, 0, 3, 20, 6, 0, 5, 5, 2, 4, 3, 2], [4, 1, 0, 7, 16, 11, 1, 9, 6, 0, 0, 1, 2], [9, 1, 1, 6, 17, 7, 0, 9, 2, 0, 2, 0, 4], [12, 0, 3, 3, 21, 6, 0, 6, 3, 0, 1, 2, 7], [5, 1, 1, 7, 17, 6, 1, 9, 8, 1, 3, 5, 3], [28, 13, 1, 11, 8, 1, 2, 1, 3], [7, 2, 0, 8, 27, 9, 0, 5, 6, 0, 0, 2, 4], [7, 0, 1, 9, 23, 13, 0, 10, 6, 0, 0, 0, 4], [3, 0, 0, 15, 29, 11, 0, 7, 4, 0, 3, 2, 1], [7, 1, 0, 6, 14, 9, 0, 22, 8, 2, 2, 2, 3], [8, 2, 3, 8, 25, 10, 2, 11, 8, 0, 2, 5, 4], [8, 2, 2, 7, 28, 12, 1, 10, 8, 1, 4, 8], [8, 1, 1, 7, 30, 17, 0, 13, 12, 3, 8, 6]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

