created: 20230524221126000
creator: Drevarr
modified: 20230705163531527
modifier: drevarr
tags: ChartData
title: 202305242211_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Primo Pobre", "Baelin Fishbringer", "Pieca Pizzabringer", "Gordon Ramsybringer", "Al Darasum", "Mixon Cue Bringer", "Pie Snarglebringer", "Zefirokai", "Bura Beignetbringer", "Bubble Teabringer", "Band Aidbringer", "Spicy Gyrosbringer", "Sister Elon\u00edth", "Blanco Padre Guard", "Ravioli Ryebringer", "Soxx", "Bella Lunabringer", "Bork Borkbringer", "Johosh Of The North", "Grasszanine", "Xkaet", "Newtype Khan"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Herald", "Berserker", "Scrapper", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[22.1821, 11.3068, 0.0, 20.0818, 3.5476, 7.614, 16.3199], [27.5632, 8.8689, 7.5576, 46.8195], [3.0677, 0.0, 4.6656, 0.0, 4.1116, 5.5944, 36.6197, 27.4414, 8.9676, 21.9383], [43.9171, 5.0545, 5.1694, 13.3632, 56.6336], [23.8685, 17.8929, 1.8648, 17.8176, 13.4599, 8.5728, 48.1572], [39.3962, 3.8757, 0.0, 12.1536, 48.8678, 15.4367, 5.444, 2.3436, 15.9473, 13.2512, 1.6356, 25.4163], [19.2137, 3.7437, 1.528, 7.5456, 24.6233, 40.2132, 6.3196, 0.1008, 28.8429, 24.4156, 10.434, 24.8812], [0.0, 0.0, 36.832, 6.4296, 150.8926], [27.6097, 1.688, 0.0, 15.4944, 52.8454, 29.0573, 7.3475, 6.7032, 38.6869, 23.4765, 18.5556, 54.3106], [46.339, 0.0, 1.3852, 14.6304, 56.2548, 15.0475, 3.1979, 8.8452, 37.1119, 28.0675, 7.5012, 82.9374], [57.6412, 5.5354, 6.9258, 18.8352, 65.9147, 43.1968, 13.058, 3.9564, 26.6772, 31.8237, 12.1824, 59.1263], [60.386, 4.0077, 0.0, 22.3488, 38.2608, 35.9324, 7.7663, 4.0572, 48.2356, 39.7535, 11.0544, 75.1787], [53.1203, 16.4736, 78.7946, 47.4775, 23.375, 0.2016, 22.7396, 43.0924, 33.9528, 40.9336], [27.9326, 0.0, 8.3824, 10.7136, 50.7619, 57.3362, 25.1643, 5.796, 54.9295, 40.5883, 19.7964, 74.6437], [51.5057, 0.0, 3.2701, 17.1648, 75.9534, 68.8813, 17.5122, 7.7112, 46.759, 28.9022, 19.6836, 47.087], [71.2039, 0.0, 5.6549, 22.176, 50.7619, 63.1736, 25.2023, 0.0, 53.0592, 39.7535, 27.354, 50.2975], [56.6725, 0.0, 6.9972, 21.8304, 98.6826, 84.9666, 28.1337, 11.8944, 62.2141, 36.6233, 29.2152, 100.595], [97.8448, 0.0, 0.0, 34.7904, 74.4381, 112.3375, 13.1722, 0.0, 35.2415, 39.3362, 14.7204, 127.8841], [108.1782, 12.6551, 22.8052, 27.3024, 120.2754, 114.6725, 8.6038, 29.9376, 71.4674, 41.3186, 22.1652, 61.5342], [191.3301, 15.9367, 10.8956, 66.0672, 175.2043, 116.2291, 59.3892, 19.3788], [5.8749, 5.5121, 36.6336, 188.2735, 129.9794, 38.9075, 0.0, 39.4744, 116.5478, 40.5516, 100.595], [152.4182, 3.7556, 36.864, 124.4424, 79.3886, 38.9837, 9.954, 64.6751, 72.8293, 39.5364, 144.2041]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

