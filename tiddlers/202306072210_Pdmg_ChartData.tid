created: 20230607221050000
creator: Drevarr
modified: 20230705163534115
modifier: drevarr
tags: ChartData
title: 202306072210_Pdmg_ChartData
type: text/vnd.tiddlywiki


const names = ["Grasszanine", "Demon Sekhmet", "Smol Gluvs", "Rozaalyna", "Skye Nightroad", "Lord Erin The Wise", "Kary\u00edna", "No Reserv\u00e9", "Chrozz", "Duke Silvver", "Shaca Booey", "Sister Elonith", "Cyclotechnist Farra", "Be\u00eb", "Mistwalker Cael", "Permanent Dawn", "Xanvias Einzbern"];
const professions = ["Spellbreaker", "Berserker", "Reaper", "Reaper", "Scrapper", "Weaver", "Vindicator", "Vindicator", "Willbender", "Vindicator", "Berserker", "Berserker", "Scrapper", "Reaper", "Vindicator", "Weaver", "Berserker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Power Damage per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[91.6, 168.9, 295.2369, 44.2973, 496.2882, 365.7717, 311.4, 767.1481, 330.8889, 770.4396, 551.66, 53.8, 58.1121], [351.6927, 513.94, 478.1474], [120.1951, 400.07, 331.9522, 15.0541, 628.2445, 565.337, 356.45, 844.2778, 401.7407, 271.9341, 869.82, 314.1273, 1171.0172], [59.5366, 208.0, 330.0939, 148.8784, 1039.8952, 896.7065, 514.55, 1685.1111, 446.5185, 1111.978, 984.16, 324.6364], [312.7805, 426.29, 426.6042, 1564.0742], [234.4, 223.6, 413.4401, 1397.7904, 916.7065, 1133.0, 1820.8519, 702.7407, 1323.5165], [203.4244, 361.4, 370.3159, 32.3378, 793.4716, 1288.6957, 393.9, 2782.537, 913.0, 640.0659, 1252.08, 325.3091, 1474.4914], [377.1073, 207.68, 385.8469, 486.5338, 693.5415, 159.8913, 1182.25, 2118.3704, 262.963, 2049.7912, 1497.94, 614.4909, 955.0517], [202.8293, 156.79, 484.6819, 132.1554, 500.1135, 936.0109, 769.6, 1951.6481, 171.7037, 898.7473, 1584.8, 986.1455, 1110.2069], [87.8293, 436.21, 716.1703, 0.0, 127.3886, 522.3261, 945.85, 1779.8704, 58.1481, 1614.3626, 359.62, 131.7455, 1497.5948], [87.5463, 203.3, 866.3471, 180.6284, 1674.2576, 713.8478, 1310.15, 2389.5556, 75.3333, 2637.4066, 1301.14, 338.4545, 2187.1552], [72.5512, 220.18, 898.4717, 242.9662, 736.6245, 2006.5217, 2141.0, 0.0, 2699.2088, 1731.34, 2370.8, 1826.2845], [451.5073, 297.33, 988.7929, 276.4865, 477.0218, 2400.9565, 2670.2037, 625.7407, 2693.7912, 1593.96, 115.4, 2153.4138], [156.0098, 281.47, 1035.9574, 225.0473, 1743.4716, 869.6413, 347.8, 2477.037, 899.7778, 2653.8022, 2365.64, 11.1091, 1025.2672], [55.7512, 1246.65, 803.6082, 247.2635, 3547.786, 2290.8804, 3938.7037, 1373.7037, 2101.1319, 1014.18, 1322.8, 1881.7845], [53.361, 366.21, 1244.3475, 108.3243, 1735.6856, 2335.25, 1227.15, 2526.5741, 242.2222, 911.3187, 955.14, 703.1455, 2477.9138], [46.3415, 365.25, 2376.4217, 441.3108, 5300.31, 4525.0109, 0.0, 3223.6111, 211.6296, 4287.5934, 5012.72, 1037.1636, 953.4828]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

