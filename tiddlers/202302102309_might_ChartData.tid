created: 20230210230955000
creator: Drevarr
modified: 20230705163519011
modifier: drevarr
tags: ChartData
title: 202302102309_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Blanco Padre Guard", "Black Raspberry Pie", "Aronorf Xideliesi", "Air One Com", "Kahless The Drunk", "Zadie Miststep", "Mike The Archmagus", "Johosh The Great", "Ravioli Fetabringer", "Venomina The Siren", "Bella Sassy", "Drevarr Moonwillow", "Veggie Mac", "Tegan Parker", "Grasszanine", "Abigail Ryn", "Arcanophage Farra", "Newtype Khan"];
const professions = ["Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Tempest", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Tempest", "Tempest", "Spellbreaker", "Tempest", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4.1214, 17.4798, 9.2778, 10.1182, 0.0, 12.5631, 7.8012, 7.1712, 11.627, 0.0], [9.9645, 27.6854, 7.6986, 7.9778, 3.5795, 9.4921, 0.0, 0.0, 9.1448, 5.2185], [12.4686, 24.2111, 21.3192, 11.9991, 0.0, 4.5599, 0.0, 5.3037, 3.3966, 1.9085], [1.5129, 15.5255, 19.2136, 10.5073, 0.0, 20.8454, 0.0, 0.0, 18.3549, 0.0], [3.2867, 26.5996, 21.2534, 8.0426, 0.0, 14.9827, 2.5344, 5.117, 13.3253, 3.9661], [3.3389, 8.9027, 14.476, 7.7183, 0.0, 18.4259, 0.0, 19.3473, 23.8418, 5.5465], [4.904, 31.811, 12.6336, 10.183, 1.5642, 16.2855, 3.168, 3.4362, 11.7576, 8.8864], [4.6431, 22.9083, 11.186, 7.5886, 0.0, 30.1514, 4.554, 5.117, 17.1138, 2.4154], [5.7387, 27.5768, 16.3184, 15.1772, 0.0, 30.8959, 0.9504, 1.1205, 19.0081, 1.7594], [4.8518, 23.994, 52.4426, 16.0853, 7.3395, 0.0, 0.0, 3.6229, 21.6209, 18.1604], [2.9737, 39.4109, 20.5296, 19.5229, 0.0, 36.0142, 5.6628, 2.8386, 21.8169, 0.0], [18.6769, 39.8452, 17.3712, 22.701, 6.2867, 13.4937, 12.7116, 9.6737, 20.2492, 4.9501], [36.5712, 21.714, 5.6588, 17.9662, 0.0, 48.9496, 0.0, 7.6194, 19.0734, 10.4668], [0.0, 24.6454, 51.2582, 3.1781, 0.0, 61.978, 6.8904, 1.0458, 38.2122, 3.7573], [49.0398, 108.4614, 71.064, 67.7138, 26.6509, 9.9574], [70.5338, 97.8216, 67.9056, 86.5232, 18.2886, 91.0127, 24.6312, 15.3508, 90.3376, 32.5336], [44.2402, 172.952, 103.3718, 101.7653, 22.4096, 19.7287, 22.6512, 37.2753, 95.4325, 25.6452], [60.2563, 154.1694, 101.99, 109.808, 19.8528, 74.6341, 64.4292, 41.2344, 89.815, 49.1434]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

