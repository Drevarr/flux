created: 20230325172304000
creator: Drevarr
modified: 20230705163523031
modifier: drevarr
tags: ChartData
title: 202303251723_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Ju\u00e7", "Gavann", "Blanco Padre Guard", "Sygaldry Verdandi", "Aronorf Xideliesi", "Whose Guardian", "Zaylen Harker", "Gabe Malhorn", "Koralia Danai", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[297.0048, 397.4602, 34.2166, 36.959, 206.5644, 1497.8109], [452.6842, 179.0037, 0.0, 197.4154, 33.432, 490.774, 246.1075, 422.232, 879.5743], [295.2338, 229.6552, 47.1895, 71.8517, 23.9022, 39.8607, 2137.9783, 64.6946, 0.0, 201.3034, 101.5877, 47.5488, 0.0, 44.641, 30.24, 183.3376, 325.3927, 509.9509, 547.6111], [260.1835, 498.7372, 0.0, 26.7451, 91.9044, 0.0, 2583.256, 68.2214, 47.125, 339.0163, 110.1647, 54.0883, 0.0, 20.0429, 0.0, 222.1455, 66.1845, 293.171, 467.8214], [260.3311, 329.967, 0.0, 175.6944, 0.0, 2621.3305, 46.06, 0.0, 204.6816, 74.3714, 49.296, 0.0, 214.4448, 11.7264, 399.5376, 180.3484, 209.7121, 674.0348], [360.3166, 336.5752, 0.0, 143.231, 238.4928, 209.8582, 3298.927, 0.0, 67.14, 479.412, 225.7504, 41.0592, 0.0, 247.1722, 129.0576, 198.904, 123.3515, 509.4668, 468.8996], [259.7408, 457.4543, 0.0, 93.3422, 254.8098, 3095.648, 140.9699, 33.8696, 728.4082, 134.3735, 101.687, 0.0, 152.8445, 88.2672, 446.9935, 355.7627, 576.3695, 735.4945], [538.5932, 394.2675, 58.5295, 73.3867, 107.0748, 0.0, 3551.8963, 235.1955, 197.6087, 302.9486, 164.9686, 79.6474, 268.4765, 171.7968, 48.7531, 387.7491, 495.912, 689.5345], [430.4909, 607.1422, 60.3439, 120.0283, 577.71, 3773.8898, 193.7152, 26.2711, 569.3328, 120.524, 35.7677, 0.0, 120.047, 135.3408, 519.7448, 455.8051, 719.179, 938.2036], [407.5422, 390.9262, 42.9862, 236.4552, 468.2538, 38.1198, 3990.0754, 263.937, 148.5181, 806.207, 203.4724, 158.0218, 30.3416, 210.5904, 188.0256, 592.8204, 476.9875, 513.0492, 1004.3806], [386.2169, 593.7772, 49.0342, 259.776, 464.7258, 42.0369, 4014.5979, 120.9667, 127.017, 623.484, 144.6956, 93.8746, 58.5616, 118.225, 119.28, 644.7084, 676.8169, 770.2999, 912.9997]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

