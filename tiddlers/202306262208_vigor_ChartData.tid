created: 20230626220846000
creator: Drevarr
modified: 20230705163539628
modifier: drevarr
tags: ChartData
title: 202306262208_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Mike The Archmagus", "Gravlyn Isshtail", "Ak\u00e1nt\u00f3r", "Zadey Starbolt", "Blancooo Padreee", "Arcanophage Farra", "\u00c1rkantor", "My Birthday Girl", "Arriasa", "Grasszanine", "Cyr", "Newtype Khan", "Drevarr Moonwillow", "Artakama Nahid"];
const professions = ["Tempest", "Tempest", "Spellbreaker", "Druid", "Scrapper", "Spellbreaker", "Spellbreaker", "Vindicator", "Scrapper", "Druid", "Spellbreaker", "Tempest", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[268.6425, 0.0, 0.0, 9.7883, 23.9232, 8.4319, 0.0, 31.7694, 1.075, 53.9897, 24.058, 23.8022, 27.0526, 32.09, 48.3021, 23.2303], [662.2421, 28.3438], [589.7854, 0.0, 92.264, 27.7785, 8.279, 52.4865], [518.8638, 0.0, 32.7584, 60.4339, 0.0, 39.0485, 33.2316, 48.3759, 56.784, 0.0], [70.3824, 62.0218, 47.4844, 84.5765, 71.162, 217.2562, 133.1491, 5.2477, 130.1832, 129.7296], [625.7068, 0.0, 0.0, 45.0046, 0.0, 0.0, 21.6648, 0.0, 75.4656, 19.7921, 20.3579, 0.0, 26.6133, 82.4288, 0.0, 60.2342, 0.0, 0.0, 22.5828, 33.3333], [777.6817, 0.0, 8.349, 86.4441, 0.0, 131.1258, 2.731, 31.251, 56.3472, 38.3494], [139.5918, 113.4687, 30.2317, 232.8446, 91.218, 239.1154, 103.8258, 6.7028, 139.9248, 159.7811], [0.0, 35.7641, 92.7185, 62.0066, 93.0414, 33.9201, 26.5549, 105.9408, 47.1341, 120.5204, 135.1094, 45.7277, 60.2108, 69.322, 157.6291, 116.7845, 0.0, 118.3383, 96.5893], [816.6732, 0.0, 32.971, 0.0, 0.0, 0.0, 24.3499, 0.0, 45.4944, 46.354, 45.4678, 36.8915, 104.3505, 11.04, 177.9703, 50.9733, 0.0, 67.3425, 154.5687], [647.5052, 0.0, 29.3885, 38.1598, 1.8326, 98.1635, 52.5555, 25.6307, 19.824, 0.0, 13.5467, 99.2349, 51.8632, 65.469, 39.376, 63.331, 67.6903, 0.0, 101.6595, 258.3009], [79.8672, 63.2923, 41.2834, 113.9595, 89.4889, 103.9062, 107.732, 372.2743, 245.1965, 68.0036, 172.5444, 367.5672], [853.8226, 69.494, 32.142, 0.0, 100.2726, 35.7331, 36.8147, 35.5152, 78.498, 91.6485, 164.6032, 108.5246, 53.3973, 71.346, 142.6313, 93.6468, 30.5885, 152.8398, 131.081], [1857.164, 64.4721, 88.3476, 75.9202, 68.8626, 53.5109, 56.6406, 47.5461, 51.5424, 87.1063, 109.017, 94.7283, 117.7016, 255.3589, 103.316, 179.0026, 151.0015, 52.9416, 144.2052, 301.6728], [2666.1617, 110.0022, 39.2555, 155.8903, 76.3871, 194.3988, 115.0943, 54.6563, 173.9136, 126.4788, 110.6063, 157.9102, 72.3672, 392.2218, 90.39, 324.7913, 226.1304, 115.8214, 213.1344, 303.2815]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

