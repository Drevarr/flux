created: 20230626013408000
creator: Drevarr
modified: 20230705163538749
modifier: drevarr
tags: ChartData
title: 202306260134_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Mememonoko", "Zhavashian", "Belvyn Brightblade", "Sygaldry Verdandi", "Sumatra Satyricon", "Aronorf Xideliesi", "Lucky Leipreach\u00e1n", "Solus Sanctus", "Newtype Khan", "Miphest\u00f6", "Venomina The Siren", "Tegan Parker", "Tootsie Pop Rocks", "Cat Wigglebooty", "Primal Clone", "Fribble Bibble", "Artakama Nahid", "Drevarr Moonwillow", "Elon The Archmagus"];
const professions = ["Vindicator", "Tempest", "Firebrand", "Firebrand", "Soulbeast", "Firebrand", "Scrapper", "Firebrand", "Spellbreaker", "Tempest", "Tempest", "Tempest", "Scrapper", "Scrapper", "Chronomancer", "Scrapper", "Tempest", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[66.1719, 8.9888, 0.9878, 23.0019, 2.0, 0.0, 0.0, 0.0, 0.9756, 0.0, 6.9886, 0.0, 4.0, 0.0, 0.9808, 1.0, 0.0, 0.0, 0.0, 5.125, 33.0, 25.3696, 36.6429, 18.1736, 1.9714, 36.125, 27.283, 32.0317, 59.2143, 26.9153], [39.9773, 46.0278, 81.8427, 86.4659, 64.0435, 49.5357, 15.1157, 50.0588, 52.9434, 56.619, 85.1429], [25.7812, 2.9926, 2.9888, 0.0, 66.8102, 4.0, 5.009, 3.9831, 18.3171, 21.5857, 32.9545, 13.9909, 13.34, 13.125, 16.0769, 18.2451, 0.0], [30.0133, 2.0, 7.9512, 5.9714, 12.0682, 14.9909, 6.02, 66.7188, 35.7885, 19.0098, 0.0, 10.1081, 21.25, 2.0, 15.2809, 16.0795, 19.0, 6.0179, 26.0909, 6.9143, 39.8676, 24.9811, 26.0952, 35.4524, 9.9322], [10.3438, 9.0, 0.0, 0.0, 80.5503, 0.0, 0.0, 16.0721, 0.0, 0.0, 5.9714, 0.0, 10.0, 0.0, 5.0, 1.9808, 11.1373, 0.0, 16.5455, 12.4167, 0.0], [12.125, 2.9926, 0.0, 0.0, 35.2334, 0.0, 0.0, 17.018, 0.0, 13.2683, 10.9429, 10.0682, 30.3091, 21.34, 28.0833, 24.3462, 9.1127, 0.0, 1.0, 19.75, 29.1389, 20.5169, 20.0114, 25.2935, 1.0, 28.0, 0.0, 0.0, 20.3235, 0.9811, 22.873, 25.9762, 24.7288], [12.6517, 0.0, 93.2239, 15.0448, 0.0, 0.0, 0.9831, 0.0, 19.9714, 22.5455, 0.0, 19.46, 0.0, 0.0, 21.0539, 0.0, 0.0, 3.0, 0.0, 15.9551, 28.3523, 18.6304, 17.6786], [15.9062, 10.9704, 0.9888, 0.0, 60.5484, 9.0299, 0.0, 43.3784, 20.4915, 1.9756, 26.9, 23.1591, 32.1273, 13.12, 31.0625, 20.9038, 5.0, 0.0, 0.0, 13.0, 14.3596, 19.3977, 18.0109, 10.1429, 5.9835, 0.0, 5.3929, 25.0809, 20.2075, 16.6667, 24.4048, 16.8983], [27.4375, 6.9778, 6.9888, 0.0, 63.1973, 6.0149, 0.0, 30.1261, 0.0, 12.2927, 12.9429, 30.9773, 25.9909, 19.52, 34.0521, 21.9615, 36.0294, 0.0, 2.0, 29.0682, 16.8056, 5.0112, 33.75, 26.3696, 1.0, 10.9669, 0.0, 0.0, 22.0515, 14.9811, 0.0, 19.0714, 0.0], [7.9531, 10.9704, 3.9888, 4.9634, 81.5579, 26.791, 0.0, 69.2523, 9.9661, 8.9512, 45.0714, 32.0795, 61.4091, 35.72, 33.7708, 50.3077, 18.0392, 9.1081, 36.9773, 21.3056, 28.5393, 22.0114, 24.0652, 22.125, 6.6694, 0.0, 5.0357, 7.3235, 20.434], [89.8468, 33.7627, 70.3659, 29.4, 66.1591, 85.8091, 74.88, 104.9167, 99.7115, 75.3873, 8.2432, 50.7045, 68.2361, 35.3371, 111.2386, 59.0652, 27.0893, 15.9587, 4.9429, 0.0, 54.7059, 16.5283, 66.4603, 36.7619, 48.7288], [117.7477, 17.0508, 38.3171, 48.1571, 81.3977, 77.4182, 81.32, 72.9688, 110.9615, 83.0588, 12.1351, 45.2273, 82.6528, 59.2697, 77.8409, 28.337, 69.1071, 62.6033, 3.9429, 5.0357, 13.0294, 22.6604, 82.4921, 56.7619, 27.0678], [0.0, 42.9333, 11.9888, 0.0, 114.3378, 47.7015, 0.0, 97.4144, 24.2881, 25.4634, 7.9571, 44.7841, 70.5091, 57.04, 41.1458, 18.2885, 49.0539, 0.0, 20.75, 43.75, 0.0, 0.0, 0.0, 0.0, 1.9917, 0.0, 0.0, 4.0074, 6.2642, 0.0, 0.9762, 0.0], [48.8125, 41.2815, 5.9888, 10.2195, 128.9336, 25.4328, 0.0, 59.6036, 0.0, 20.7561, 0.0, 10.9886, 63.9727, 5.06, 66.9271, 0.9808, 33.8676, 0.0, 0.0, 26.2727, 0.0, 32.2809, 30.9886, 15.3478, 10.0357, 0.0, 0.0, 0.0, 0.0, 30.7302, 16.3333, 36.7627], [36.7969, 62.8889, 43.1236, 9.939, 134.315, 11.0299, 0.0, 108.3604, 24.2712, 30.2439, 32.2143, 37.9091, 39.6455, 35.04, 73.2917, 37.5577, 25.0392, 2.0, 12.3182, 22.8472, 24.5169, 22.3068, 27.6413, 1.0, 40.3471, 16.1429, 12.1429, 39.6765, 51.2453, 42.8095, 46.9762, 0.0], [47.125, 47.3778, 29.2135, 11.9268, 217.8615, 31.6716, 21.7436, 104.5495, 35.8305, 27.0, 38.1571, 54.875, 44.4636, 41.88, 64.3229, 65.8269, 73.0343, 29.3514, 44.3636, 58.5, 53.9213, 79.3409, 34.3696, 63.8214], [90.1094, 74.0074, 72.382, 8.939, 222.7647, 63.806, 9.1026, 112.1441, 72.2034, 39.8293, 95.0857, 115.1591, 10.9909, 83.48, 93.8854, 110.9423, 92.299, 38.8919, 87.9318, 89.1528, 68.4382, 100.9318, 61.2717, 51.7321, 56.7438, 47.6571, 56.4632, 62.0943, 62.2222, 29.619, 51.2373], [55.5469, 74.4815, 66.9775, 10.0732, 264.5882, 73.1194, 26.7949, 180.1171, 35.7119, 59.9756, 85.9429, 117.5, 129.9909, 86.54, 128.8125, 76.9423, 120.7843, 0.0, 41.8108, 74.7045, 94.4028, 66.1124, 109.7159, 70.3913, 103.2321, 51.2231, 16.8286, 0.0, 97.8015, 96.6792, 78.4127, 57.8095, 34.7797], [6.9531, 79.5037, 102.4157, 28.9512, 272.9146, 82.8209, 35.5641, 143.6937, 77.7627, 65.0, 79.2857, 105.1818, 105.8273, 113.84, 104.7396, 138.3462, 119.7206, 7.0741, 47.2162, 78.5227, 132.6111, 92.0674, 60.0114, 105.7174, 83.9464, 50.6033, 56.4286, 15.3929, 67.6397, 91.6038, 73.9048, 57.9762, 50.0508]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

