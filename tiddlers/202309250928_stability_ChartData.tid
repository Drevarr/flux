created: 20230925092820000
creator: Drevarr
tags: ChartData
title: 202309250928_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Reina Armitage", "Drac Tepes", "Kathra Tull", "Govinda Ektar", "Grasszanine", "Hawaiian Supreme", "Gamora Titus", "Alo Penn", "Koralia Danai", "Leafzel", "Gestern Yesteryear"];
const professions = ["Druid", "Scourge", "Herald", "Vindicator", "Spellbreaker", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.1656, 0.0, 0.4019, 0.8118, 1.242, 0.6566, 0.0, 0.0, 0.0, 0.8116, 0.0, 0.0, 0.0, 0.0, 0.7924, 0.0, 0.0, 0.0, 0.8077, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3087, 0.0, 0.0, 1.2141, 0.2749, 0.6357, 0.0, 0.0, 0.0, 1.3593, 0.0, 0.8184, 0.5832, 0.0, 0.0], [0.7547, 0.0, 0.0, 0.1833, 0.7644, 0.0, 1.066, 4.0383, 0.0, 1.757, 0.5524, 0.0, 0.2558, 1.1218, 0.9029, 0.6498, 0.0056, 0.0, 0.0, 0.0, 0.8938, 0.4343, 0.4424, 0.0864, 0.2475, 0.0], [1.0522, 0.0, 1.48, 0.5357, 0.1296, 2.5133, 0.0, 1.617, 1.0354, 0.0, 2.0145, 0.1702, 0.0, 1.7843, 0.0, 0.0, 0.9398, 0.2673, 0.0, 0.0, 0.0, 0.0, 0.9747], [1.3589, 0.8968, 2.7324, 0.8797, 0.0, 0.0, 0.0691, 0.0, 1.0472, 1.4103, 0.0, 2.0007, 0.0, 0.5641, 0.187, 2.7531, 0.0, 0.0, 0.365, 0.0, 1.9008, 0.0, 0.0], [1.607, 0.0, 0.9072, 0.0, 5.236, 1.3756, 1.868, 1.8603, 1.1818, 1.8457, 0.0, 0.6166, 0.0], [1.189, 2.125, 3.1635, 0.0, 3.5291, 3.6603, 3.712, 2.4398, 3.3516, 0.0, 1.5705, 3.3912, 1.587, 4.3056], [1.6626, 2.2473, 5.3995, 1.518, 2.7311, 9.94, 6.8674, 6.1902, 1.2847, 4.121, 0.0, 5.808, 3.31], [8.3011, 6.3927, 5.1967, 0.0, 5.2349, 2.6762, 36.3447, 3.4476, 8.7849, 4.063, 0.0, 0.0, 11.0306, 3.1646, 4.9761, 2.2833, 4.4498, 6.4754, 10.384, 11.7306, 0.0, 6.2378, 9.5688, 2.7082, 5.7168], [10.5336, 15.0938, 12.2429, 3.6882, 5.5037, 3.2659, 20.2633, 7.6758, 8.141, 10.179, 10.932, 8.2074, 5.5301, 3.4474, 53.1902], [0.9396, 3.694, 2.2192, 4.158, 8.4008, 4.9075, 3.6882, 2.4106, 2.687, 9.1106, 4.3003, 2.4953, 2.0884, 0.0, 7.3731, 6.3879, 1.7384, 0.0, 29.5373, 3.5802, 12.7075, 6.5221, 2.5245, 2.7013, 14.022, 1.0266, 5.2349, 7.7805, 0.1964, 9.9736, 2.3887, 4.736, 1.6006, 11.6561, 0.7715, 8.2729, 9.8064, 2.0602, 1.6848], [1.968, 2.6312, 6.431, 4.3852, 9.4842, 10.764, 6.5405, 0.3019, 5.1149, 2.5056, 10.2887, 6.0921, 5.102, 3.7557, 0.0, 6.7821, 6.5843, 0.3042, 3.8573, 1.7993, 16.1532, 4.3554, 13.1161, 5.0252, 0.0, 17.0134, 1.8734, 4.788, 11.6109, 4.4431, 8.0446, 4.9466, 6.624, 2.9371, 14.356, 0.3927, 6.8351, 9.6984, 0.5387, 5.616]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

