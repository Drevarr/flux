created: 20230515221048000
creator: Drevarr
modified: 20230705163530242
modifier: drevarr
tags: ChartData
title: 202305152210_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Sheep Poh", "Solus Sanctus", "Rosetendril", "Tootsie Pop Rocks", "Tika Mi", "Tribal S", "Artakama Nahid", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Tempest", "Firebrand", "Tempest", "Scrapper", "Tempest", "Druid", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[1076.5294, 1712.4085, 71.9048, 1155.629, 10.0265, 977.3083, 36.2391, 0.0], [54.7152, 12.2632, 37.9167, 278.8349, 197.1025, 681.8684, 3.8302, 0.0, 57.9053, 305.1695, 255.8, 16.5385, 309.407, 16.9565, 137.4286, 472.8154, 510.5914, 230.7941, 727.4155, 31.8095, 504.0242, 20.7351, 365.6316, 671.5098], [137.4437, 431.2594, 527.4918, 1579.0992, 60.7925, 6.7879, 78.2899, 600.4237, 584.0667, 370.5641, 765.4302, 90.0145, 486.1607, 1245.5538, 1419.4946, 690.4059, 993.7535, 576.4762, 691.3548, 107.7351, 1105.8947, 84.1522, 525.1961], [0.0, 88.7185, 10.8772, 5.25, 140.7217, 602.8525, 1843.6336, 15.1509, 21.6124, 744.339, 621.6444, 68.6667, 1149.1163, 69.1594, 609.4107, 980.1308, 902.8925, 910.1941, 1111.9507, 172.9524, 524.4194, 0.0, 516.0526, 0.0, 1238.3922], [92.2384, 0.0, 12.6667, 160.8774, 438.2971, 1929.6781, 82.5849, 17.5758, 219.716, 399.8475, 944.7333, 157.2821, 888.7558, 34.6522, 136.1071, 1434.6129, 684.3941, 2037.7817, 59.619, 1222.879, 114.8874, 928.5865, 9.8261, 978.3791], [148.7252, 49.4167, 386.9057, 820.8689, 1096.913, 31.3314, 982.5424, 908.4444, 8.0769, 1285.2791, 40.3333, 785.1071, 1450.0923, 2791.043, 989.7235, 1301.1408, 1274.5238, 1108.2742, 117.245, 1637.5113], [490.971, 250.8411, 14.8246, 334.6745, 677.9898, 1907.1134, 41.6415, 150.3333, 77.1686, 776.6102, 548.6222, 171.3077, 1462.4651, 131.3478, 559.6964, 1189.0154, 1754.7312, 1053.4059, 1626.8662, 980.7619, 978.6532, 103.6291, 1381.8571, 292.3261, 1077.8105], [57.7536, 345.6325, 19.9649, 151.6042, 458.3774, 1104.7008, 3191.6903, 256.0909, 150.1391, 800.678, 743.3778, 13.6154, 912.5116, 126.087, 975.8214, 1131.2769, 393.0753, 922.8412, 1099.8099, 68.8571, 1246.7097, 367.8543, 1280.6917, 2.0652, 2546.9542], [672.4493, 380.9272, 63.5789, 149.8125, 589.2783, 1152.8996, 3386.5466, 29.7576, 98.5, 1335.7288, 860.4667, 527.3077, 1608.186, 158.5072, 1057.8571, 1306.4231, 3320.8172, 1344.0176, 3583.2958, 497.7619, 1989.7903, 387.9934, 979.2256, 26.0217, 1748.3464]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

