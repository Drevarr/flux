created: 20230710072127000
creator: Drevarr
tags: ChartData
title: 202307100721_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Mirhayna", "Tybalt Returns", "Whip \u00d1 Sl\u00e0pper", "Gestern Yesteryear", "Locopuff", "Notorious H U D", "Drevarr Moonwillow", "Danaeryn", "Legoh Brave", "Erinthal"];
const professions = ["Berserker", "Scrapper", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Tempest", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 3.2135, 0.6891, 7.8166, 0.0, 1.5422, 3.2708, 0.0, 4.5117, 0.0, 0.0, 0.0, 11.2147, 4.4304, 0.0, 0.1292], [0.0, 39.3393, 0.0], [22.9193, 1.5315, 1.6474, 2.154, 26.663, 6.3437, 6.5356, 3.2222], [0.9315, 7.896, 0.0, 0.0, 0.0, 0.0, 9.288, 0.0, 0.0, 5.4057, 31.7582, 1.501, 0.0, 0.0, 5.2522, 2.1523, 0.0, 6.0476, 0.0, 3.7595, 1.4363, 0.0, 4.6308, 10.1673, 2.708], [12.255, 13.234, 5.2941, 22.079, 15.658, 6.1914, 12.818, 48.6486, 5.0842], [0.2184, 17.0057, 5.5029, 5.251, 7.7381, 19.8887, 9.1946, 2.4777, 0.0, 17.1088, 4.6786, 3.0294, 0.5229, 0.0, 0.0, 6.8818, 14.9095, 3.8259, 8.2416, 33.1617, 3.0784], [8.4697, 8.1715, 0.0, 3.2693, 8.4902, 0.597, 8.152, 3.6465, 1.45, 23.1319, 28.6315, 13.4803, 9.3874, 1.984, 2.2032, 19.3103, 11.9381, 0.0, 11.4053, 8.5347, 1.9642, 18.2876, 16.3661, 6.4804], [27.9308, 3.5272, 1.2355, 23.077, 50.952, 15.2362, 14.2494, 0.0, 1.6616, 33.966, 4.9886, 0.0, 12.4184, 0.0, 1.9149, 16.153, 25.9349, 3.8797, 0.7684, 8.58, 0.8947], [34.305, 13.7445, 4.2067, 11.7596, 64.2523, 14.7106, 0.0, 52.4514, 5.3538, 3.7734, 11.2784, 15.5164, 1.9981, 10.8188, 23.3376, 1.621], [8.8492, 3.2592, 0.9834, 0.0, 11.7322, 1.3395, 31.7729, 5.609, 6.3406, 13.9532, 41.3985, 13.2821, 7.854, 2.17, 9.3085, 51.578, 12.3485, 1.6605, 19.8041, 10.2757, 2.9146, 10.0996, 18.2272, 0.0, 15.4632, 60.4461, 5.9452]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

