created: 20230403221011000
creator: Drevarr
modified: 20230705163524234
modifier: drevarr
tags: ChartData
title: 202304032210_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Drevarr Moonwillow", "Ryvalia Fazebringer", "Venomina The Siren", "Primal Clone", "Zenek Tryst", "Tegan Parker", "High Sorcer Baradun", "Eibh\u00ebar", "Tika Sumiko", "Mac Chiato", "Black Raspberry Pie"];
const professions = ["Scrapper", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[62.4461, 172.881, 11.1311, 88.6802, 104.2642, 0.0, 60.1675, 21.0983, 38.1046, 5.0241, 0.0, 89.7324, 0.0, 8.729, 18.3946, 8.174, 0.0], [32.5208, 73.359, 21.5415, 86.0379, 151.8504, 0.0, 35.8478, 30.7027, 27.4928, 31.7667, 0.0, 168.683, 0.0, 48.8325, 16.9925, 0.0, 0.0], [203.9805, 233.1585, 52.4924, 297.9126, 165.1978, 126.2069, 298.6267, 329.3854, 84.8396, 35.7227, 0.0, 372.4938, 89.6094, 49.981, 35.2758, 76.927], [261.8462, 517.3605, 72.5124, 231.8566, 215.879, 101.0787, 176.5546, 260.7372, 77.4576, 33.2304, 0.0, 342.583, 0.0, 92.3029, 38.21, 0.0, 84.6516], [244.3147, 236.6803, 620.9414, 511.555, 10.856, 83.6298, 44.9696, 531.6123, 0.0, 94.1485, 58.9662, 7.1639, 183.2424], [162.2988, 507.1005, 87.3673, 322.1881, 241.0262, 263.5063, 404.591, 242.1581, 85.681, 56.0565, 278.4139, 79.8828, 0.0, 0.0, 55.902], [207.1868, 760.5225, 43.043, 324.5001, 302.7336, 64.5183, 347.7398, 229.2472, 65.5702, 68.0036, 18.9308, 25.609, 338.2355, 69.3083, 38.9664, 80.8764], [401.5484, 816.4395, 93.2932, 358.1887, 213.1709, 162.8804, 354.8462, 357.4115, 49.0963, 73.9376, 0.0, 0.0, 360.4947, 0.0, 117.1432, 55.2762, 0.0, 136.8655], [543.6935, 968.8005, 98.8588, 514.7414, 571.8086, 420.5009, 428.437, 453.2986, 128.6979, 68.4784, 34.1909, 0.0, 446.923, 45.5603, 69.408, 57.4349, 17.8865, 42.3113], [542.014, 879.5385, 121.2812, 567.7513, 553.045, 482.4158, 506.1336, 402.4422, 69.017, 50.3994, 34.0336, 0.0, 507.4402, 20.2582, 94.9216, 18.4131, 60.4972, 159.1102], [632.0952, 1069.092, 140.9808, 461.0709, 569.2939, 210.873, 372.8491, 494.0781, 116.8377, 152.5829, 0.0, 30.308, 536.8293, 0.0, 103.2765, 91.9548, 0.0, 102.8306]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

