created: 20230427220456000
creator: Drevarr
modified: 20230705163527060
modifier: drevarr
tags: ChartData
title: 202304272204_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Blaize Harlot", "Vinnakh", "Fuzzy Toe Beans", "Morv\u00fcs", "Primal Clone", "Hyde En Sikh", "Choo Sayaccho", "Morv\u00fcs", "Klenga", "Evil Stepmother", "Al Darasuum", "Koralia Danai", "Johosh The Great"];
const professions = ["Scourge", "Firebrand", "Firebrand", "Berserker", "Chronomancer", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[21.1926, 8.0561, 8.1216, 11.7596, 9.3598, 16.6617, 25.3427, 18.8972, 13.7172, 31.1018, 11.438, 13.2264, 31.1328, 6.9498, 4.6036, 2.3103, 12.4589, 3.4598], [26.533, 111.9427, 19.2456, 43.0275, 33.948, 17.7811, 10.793], [0.0, 0.0, 11.934, 31.4134, 39.508, 6.4529, 59.8752, 6.7274, 8.0962, 100.4371, 12.4902, 6.4268, 6.2238], [55.634, 12.928, 17.8757, 191.8051, 6.4395, 17.9585, 13.0134, 1.2096, 0.0], [77.1342, 22.5281, 13.7664, 13.4258, 6.7466, 15.147, 56.9488, 30.226, 20.1314, 44.8232, 8.0217, 36.4728, 73.9066, 11.664, 6.7003, 23.2921, 13.9104, 13.3062], [92.235, 17.2699, 22.32, 14.8578, 11.5632, 20.5173, 50.8781, 27.5128, 23.0681, 44.9064, 10.8962, 27.8155, 68.3568, 12.4416, 8.7058, 12.4948, 14.8781, 7.9098], [62.5464, 35.742, 111.2681, 24.5917, 36.3926, 191.5344, 34.992, 25.0234, 9.9958, 52.4966, 7.2352], [101.1582, 12.253, 103.68, 19.6911, 11.8023, 11.7045, 113.3194, 206.2508, 63.0991], [118.6614, 26.9662, 20.1024, 32.7313, 2.8524, 31.6251, 67.6447, 26.3228, 41.0743, 134.7192, 7.9765, 64.8494, 92.857, 35.5995, 8.9337, 46.207, 62.2944, 5.6032], [71.1282, 20.0196, 37.6704, 52.0506, 0.0, 19.1862, 87.1094, 85.3944, 58.6555, 76.6735, 26.5633, 23.0059, 178.2691, 30.3993, 8.25, 8.0155, 103.2998, 7.4963], [54.7529, 200.2493, 30.4462, 106.3723, 301.4467, 74.0178, 40.8853, 24.3766, 97.1309, 7.7139], [76.5336, 7.2842, 55.4688, 75.4596, 0.0, 95.013, 124.9789, 90.1544, 68.3928, 234.6775, 57.8522, 88.9776, 270.1786, 32.3433, 17.2748, 37.5785, 126.887, 37.8189], [288.717, 33.1891, 62.1504, 70.4198, 52.3502, 123.1038, 175.0861, 201.1576, 124.1117, 207.6505, 76.9657, 115.1899, 403.9142, 47.9439, 38.9253, 77.7504, 169.223, 61.4829]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

