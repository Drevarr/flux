created: 20230227222028000
creator: Drevarr
modified: 20230705163520441
modifier: drevarr
tags: ChartData
title: 202302272220_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Dark Sidiuz", "Rozaalyna", "Nelliel T", "Oo Dads Mad", "Newtype Khan", "Arcanophage Farra", "Black Raspberry Pie", "Smol Gluvs", "\u00c1rk\u00e1ntor", "Primal Clone", "Rina Of Theros", "Be\u00eb", "Eibh\u00ebar"];
const professions = ["Scourge", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Chronomancer", "Scourge", "Scourge", "Chronomancer", "Scourge", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0066, 0.0996, 0.2764, 0.0, 0.561, 0.6438, 0.7292, 1.8846, 0.1579, 0.0, 0.0456, 0.3118, 0.0], [0.053, 0.1394, 0.7236, 0.2439, 0.3973, 1.2708, 1.4231, 0.6842, 0.0068, 0.0759, 0.2043, 0.0556], [0.0, 0.0, 0.122, 0.1071, 0.3171, 0.1507, 0.0, 0.3462, 0.3947, 0.0473, 0.09, 0.0, 0.0701, 0.0, 0.1596, 0.1747, 0.0312], [0.0, 0.5139, 0.7398, 0.4268, 0.6027, 1.125, 0.5769, 0.3947, 1.3667, 0.0083, 0.6562], [0.2151, 0.0556, 0.4268, 0.1111, 0.2447, 0.3173, 0.125], [0.0265, 0.506, 0.5528, 0.3537, 0.1644, 0.3542, 0.2308, 0.3947, 0.5333, 0.0, 0.4688, 0.027, 0.0993, 0.4516, 0.0, 0.1529, 0.0889, 0.1809, 0.2616, 0.0156], [0.0066, 0.8542, 1.5, 1.1053, 0.3, 0.0331, 0.1875, 0.0405, 0.1963, 0.3011, 0.1852, 0.1975, 0.0444, 0.1064, 0.3367, 0.0781], [0.0331, 0.1355, 0.0, 0.4211, 0.0743, 0.1834, 0.5054, 0.0741, 0.3185, 0.2667, 0.4043, 0.3713, 0.2812], [0.2185, 0.0556, 0.3694, 0.1556, 0.4255, 0.5198, 0.0938], [0.1656, 0.3944, 0.561, 0.1341, 0.6575, 1.3542, 0.7692, 0.8158, 0.4667, 0.0083, 0.4375, 0.0743, 0.0829, 0.4194, 0.037, 0.2038, 0.0222, 0.1277, 0.2827, 0.3594], [0.0464, 0.5259, 0.8455, 0.2143, 0.5976, 0.9315, 1.375, 0.0769, 0.8947, 0.7, 0.0083, 0.0312, 0.0203, 0.0888, 0.1613, 0.1296, 0.2994, 0.1556, 0.2234, 0.2295, 0.1406], [0.0728, 0.9243, 1.065, 0.1071, 0.7927, 0.4932, 1.3158, 0.0405, 0.1893, 0.4086, 0.037, 0.4395, 0.1333, 0.3298, 0.5232, 0.0625], [0.1987, 0.7291, 0.9431, 0.5854, 0.726, 1.0208, 0.0769, 0.4737, 1.9333, 0.0331, 1.0938, 0.0946, 0.4054, 0.6989, 0.037, 0.414, 0.0444, 0.1702, 0.4954, 0.0469]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

