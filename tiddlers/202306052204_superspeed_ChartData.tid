created: 20230605220452000
creator: Drevarr
modified: 20230705163533917
modifier: drevarr
tags: ChartData
title: 202306052204_superspeed_ChartData
type: text/vnd.tiddlywiki


const names = ["Tegan Parker", "Melody Phoenixstorm", "Miphest\u00f6", "Skye Nightroad", "Cedryn X", "Tootsie Pop Rocks", "Zayde Sunsabre", "My Birthday Girl", "Newtype Khan", "Artakama Nahid", "Jeckyll Mbs", "Venomina The Siren", "Ak\u00e1nt\u00f3r", "Cyclotechnist Farra", "Xanvias Einzbern", "Cat Wigglebooty", "Johosh Of The North", "Drevarr Moonwillow", "Etchery"];
const professions = ["Tempest", "Scrapper", "Tempest", "Scrapper", "Berserker", "Scrapper", "Spellbreaker", "Scrapper", "Spellbreaker", "Tempest", "Berserker", "Tempest", "Druid", "Scrapper", "Berserker", "Scrapper", "Tempest", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Superspeed per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0.395, 0, 0.718, 0, 0.785, 0.507, 0.736, 0.63, 0, 0.616, 0.065, 0.435, 0], [0.331, 0.318, 0.069, 0.717, 0, 0.359], [0, 0.553, 0.495, 0, 0.358, 0, 0.785, 0.317, 0.369, 0, 0, 0.614, 0.195, 0, 0], [1.18, 1.201, 1.615, 0.946, 1.085, 1.191, 0.128, 0.218, 0.734], [0.422, 0, 0.17, 0, 0, 0, 0, 0.423, 0, 0.788, 0.677, 0.641, 0.436, 0.726, 0.978], [0, 0.391, 0.968, 0.549, 0, 0, 0, 0, 0.889, 0.738, 0, 0.632, 0.033, 0.652, 0.881], [0, 0.446, 0.919, 0.681, 0, 0, 0, 0, 0.423, 0.615, 0, 0, 0.542, 0.217, 0, 0], [0, 0.41, 0, 0.721, 0, 0, 0, 0, 0.095, 0.553, 1.112, 0.814, 0.824, 0, 0, 0], [1.381, 0.626, 0, 0.34, 0, 0, 0, 0, 0.695, 0.615, 0, 0, 0.785, 0.027, 0, 0], [0, 0.402, 0.553, 0.591, 0.921, 0.717, 0, 0.785, 0.33, 0.369, 0, 0, 0.769, 0.333, 0.615, 0], [0, 0.589, 0, 0.754, 0, 0, 0, 1.011, 0.848, 1.39, 0.905, 0.801, 0.209, 0.725, 0], [0, 0.736, 0.553, 0.852, 0, 0.83, 1.104, 0, 0.698, 0.738, 0, 0.134, 0.769, 0.26, 0.874, 0.439], [0.639, 0.946, 0.553, 0.956, 0, 0, 0, 0.785, 0.761, 0.736, 0.631, 0.538, 0.745, 0.569, 0.867, 0.223], [0.886, 0.833, 1.288, 1.384, 1.077, 0, 0.881, 0.665, 0.473, 0.158, 0, 1.405, 0.366, 0.327, 0], [0, 1.221, 0, 1.312, 0, 0, 0, 0, 1.504, 0.614, 0, 1.81, 1.023, 0.541, 0.865, 0.926], [0, 1.481, 0.277, 0.816, 0.461, 0.538, 0.55, 0.863, 1.365, 1.932, 1.024, 0.543, 1.324, 0.781, 0.867, 0.875], [0.915, 1.501, 1.659, 1.633, 0, 1.422, 0, 0.784, 1.044, 1.474, 0.631, 1.493, 1.307, 0.65, 0.436, 0.585], [0.518, 1.936, 1.385, 1.934, 0.922, 2.748, 1.106, 1.178, 1.685, 1.5, 0.631, 2.166, 1.552, 0.878, 1.795], [2.156, 2.217, 1.94, 2.048, 1.087, 0.897, 0.968, 1.344, 1.091, 1.843, 0.946, 0.91, 1.375, 0.914, 0, 0.939]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

