created: 20230308221219000
creator: Drevarr
modified: 20230705163521417
modifier: drevarr
tags: ChartData
title: 202303082212_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Zadie Miststep", "Domina Flagbringer", "Bella Sassy", "Arriasa", "Ryvalia Fazebringer", "Tegan Parker", "Black Raspberry Pie", "Eibh\u00ebar", "Raelyn Sunray", "Seren Nightroad", "Drevarr Moonwillow", "Demon Sekhmet", "Panther B Me", "\u00c1rkantor", "Rozaalyna", "Dark Sidiuz", "Smol Gluvs", "Be\u00eb", "Tootsie Poppa", "My Birthday Girl"];
const professions = ["Tempest", "Spellbreaker", "Firebrand", "Druid", "Chronomancer", "Tempest", "Chronomancer", "Chronomancer", "Firebrand", "Scourge", "Scrapper", "Spellbreaker", "Scourge", "Vindicator", "Scourge", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0, 0, 0, 213, 436, 24785, 10644, 3502, 5856, 6568, 1188, 8527, 5675, 0, 0, 0, 1703, 0, 0, 0, 2612, 0, 4074, 4511, 0, 589, 92, 0, 579, 3393, 0], [0, 299, 0, 0, 2708, 15550, 13810, 1604, 2464, 7568, 463, 5807, 3895, 0, 0, 4017, 4792, 0, 0, 0, 6909, 1188, 0, 1444, 5548, 2443, 0, 2206, 8642, 0, 3790], [0, 0, 0, 0, 1279, 8723, 12160, 0, 843, 5494, 1855, 15230, 7624, 0, 3416, 7902, 0, 0, 0, 6250, 0, 3281, 3978, 0, 2052, 1205, 0, 6368, 5705, 3584, 595], [640, 0, 0, 3391, 11437, 6558, 0, 2090, 1490, 8817, 4919, 17991, 0, 0, 1188, 14214, 0, 2293, 359, 5505, 6089, 1288, 3860, 816, 671, 3496, 1304, 2462], [0, 0, 0, 2258, 0, 8136, 17693, 1061, 4615, 2489, 3029, 11051, 8432, 0, 0, 3743, 6265, 0, 0, 0, 5818, 0, 3739, 1156, 2632, 7700, 2489, 0, 3880, 2494, 2342, 0], [0, 0, 0, 2465, 26318, 9137, 2664, 5070, 1058, 2301, 12354, 7987, 0, 2668, 5187, 0, 0, 716, 0, 1184, 6253, 3457, 1918, 5013, 205, 867, 2629, 3556, 382], [0, 287, 0, 0, 2457, 7132, 20270, 1243, 6890, 6749, 1188, 19868, 12276, 0, 0, 2788, 3156, 0, 1829, 0, 4328, 1237, 4641, 0, 2888, 0, 3484, 0, 722, 1248, 5254], [197, 0, 0, 801, 747, 17536, 20906, 1035, 5417, 5480, 1578, 10279, 8674, 0, 0, 1188, 8532, 0, 0, 0, 6771, 0, 6146, 1777, 1344, 9080, 0, 4946, 1463, 2408, 1581], [0, 0, 1232, 4959, 10879, 0, 1304, 3616, 9136, 20475, 6930, 0, 434, 1517, 10700, 0, 0, 6133, 2067, 8577, 5045, 0, 5953, 552, 0, 5311, 10028, 3186, 739], [573, 0, 0, 0, 5059, 27728, 17440, 3096, 3752, 6985, 10332, 13720, 11830, 0, 0, 5324, 2041, 0, 737, 1188, 1188, 3017, 8035], [1143, 211, 0, 4299, 2954, 10235, 18068, 1428, 2572, 8981, 2432, 0, 3421, 9012, 0, 3383, 0, 4973, 29, 7731, 4611, 1195, 7235, 4447, 0, 12477, 9579, 2109, 3170], [213, 770, 0, 128, 0, 18999, 11909, 1229, 1181, 6565, 11941, 17633, 0, 0, 11310, 3378, 0, 2456, 0, 11055, 0, 1097, 4566, 207, 5210, 9460, 3354, 4800], [0, 1248, 0, 0, 3049, 24394, 13326, 2, 951, 10799, 17145, 14116, 7691, 0, 5555, 4463, 0, 232, 1683, 0, 2188, 6416, 3491, 4899, 3723, 1666, 0, 0, 7136, 7533, 3461], [49, 0, 0, 480, 1434, 35423, 30002, 253, 667, 9682, 12457, 22298, 7967, 0, 3306, 18444, 0, 0, 0, 5408, 3249, 10782, 5529, 10399, 1081], [1077, 0, 0, 0, 16175, 28120, 1126, 6302, 9848, 5846, 13206, 14169, 2462, 7413, 0, 0, 0, 9571, 5839, 12425, 3791, 6046, 11175, 5450, 11127, 0, 9001, 3843], [3348, 8341, 14417, 8895, 19076, 5916, 0, 0, 10542, 17927, 0, 9446, 890, 22066, 10926, 14845, 5727, 0, 8239, 15449, 6691, 5574], [311, 6522, 7451, 31471, 2960, 5673, 6913, 3569, 31778, 5737, 0, 0, 5738, 22043, 0, 0, 0, 5243, 0, 18707, 8836, 4052, 7251, 13794, 0, 5726, 22560, 9008, 2654], [1510, 0, 2480, 40882, 28861, 1291, 3050, 9988, 6862, 24720, 13089, 0, 3355, 4346, 11077, 0, 0, 474, 35, 1188, 5667, 9430, 4844, 10183, 3559, 0, 12408, 18313, 9273, 4003], [0, 3165, 0, 5041, 6360, 33368, 18537, 0, 3518, 15691, 11655, 22827, 17855, 0, 0, 1373, 13261, 0, 0, 0, 15127, 2420, 18223, 12608, 5261, 10796, 10284, 0, 8718, 25704, 8221, 6094], [8063, 8226, 908, 8438, 13522, 69462, 126080, 1331, 7667, 40748, 12142, 75819, 34753, 2009, 0, 23691, 69773, 4212, 0, 687, 43692, 14713, 33428, 36265, 21687, 32900, 21030, 0, 25276, 58431, 38915, 3489]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

