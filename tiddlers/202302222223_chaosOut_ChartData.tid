created: 20230222222328000
creator: Drevarr
modified: 20230705163519931
modifier: drevarr
tags: ChartData
title: 202302222223_chaosOut_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Sassy Daddy Demon", "Xyntharos", "Mustache Bloodclaw", "Lord Erin The Wise", "Zaylen Harker", "Kiloak", "Sp\u00edcy Cheese", "Jeckyll Mbs", "Mistwalker Caelon", "Bella Sassy", "Drevarr Moonwillow", "Xanvias Tseli", "Kmpek", "My Birthday Girl", "Zadie Miststep", "Ravioli Fetabringer", "Mike The Archmagus", "Mac Aaroni", "Arcanophage Farra"];
const professions = ["Tempest", "Vindicator", "Vindicator", "Herald", "Weaver", "Firebrand", "Firebrand", "Berserker", "Berserker", "Vindicator", "Firebrand", "Scrapper", "Berserker", "Vindicator", "Scrapper", "Tempest", "Firebrand", "Tempest", "Tempest", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Chaos Aura per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[16.6794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 20.3859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 11.1196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.9957, 0.0], [14.8261, 0.0, 0.0, 0.0, 8.7142, 0.0, 0.0, 0.0], [0.0, 0.0, 14.8261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.9169, 0.0, 0.0, 0.0], [0.0, 0.0, 27.7989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [27.7989, 0.0, 2.9731, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 11.1196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.9169, 0.0, 8.6369], [0.0, 0.0, 33.3587, 0.0, 0.0, 7.3821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 18.5326, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.9169, 0.0, 1.5994, 9.8958], [0.0, 0.0, 11.1196, 0.0, 0.0, 0.0, 14.8752, 0.0, 0.0, 9.249, 0.0, 0.0, 11.8575], [20.3859, 0.0, 0.0, 0.0, 11.989, 0.0, 0.0, 11.9169, 0.0, 11.9957, 0.0], [0.0, 0.0, 44.4783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0347, 0.0], [0.0, 0.0, 12.0115, 0.0, 0.0, 21.0221, 0.0, 0.0, 2.8448, 14.8747, 11.9883], [0.0, 0.0, 33.3587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.0117, 0.0, 0.0, 6.4955], [15.9886, 0.0, 16.6794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.0156, 0.0, 0.0, 0.0], [0.0, 0.0, 25.9457, 12.0131, 0.0, 0.0, 0.0, 23.7033, 0.0, 6.0474, 0.0, 0.0, 0.0], [0.0, 0.0, 51.8913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.9819], [0.0, 0.0, 111.1957, 13.7773, 0.0, 0.0, 19.9817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 138.9947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.9957, 0.0]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

