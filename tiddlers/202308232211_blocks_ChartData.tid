created: 20230823221146000
creator: Drevarr
tags: ChartData
title: 202308232211_blocks_ChartData
type: text/vnd.tiddlywiki


const names = ["Necrotic Windrunner", "Morton Saltbringer", "Arriasa", "Luke The Ghastly", "Crusader Siolith", "Legacy Of Mathus", "Govinda Ektar", "Lord Erin The Wise", "Kosa\u00efr", "Sub Train", "Necrotic Windrunner", "Vee Usagi", "Rina Of Theros", "Elonith Requiem", "Klengah", "Tootsie Pop Rocks", "Jimbo The Pleb", "Daphne Agla\u00e9", "Rozaalyna", "Mike The Archmagus", "\u00c1rk\u00e1ntor", "Glorious Gluvs", "Be\u00eb", "Charr Surethang", "Zaylen Harker", "Xanvias Tsolice", "Mistwalker Cael", "Venomina The Sly", "My Birthday Girl", "Tegan Parker", "Nose Llama", "Zaedy Zae", "Newtype Khan", "Sub Train", "Tribal S", "Yummy Kiwi", "Rafaellagabriela", "Darks Na", "Sygaldry Verdandi", "Solus Luxes", "Arcanophage Farra", "Rahani Sunray", "Koralia Danai", "Bella Sassy", "Drevarr Moonwillow", "Alarics Bane", "Eibh\u00ebar"];
const professions = ["Scourge", "Chronomancer", "Druid", "Scourge", "Firebrand", "Berserker", "Vindicator", "Weaver", "Weaver", "Firebrand", "Reaper", "Reaper", "Scourge", "Reaper", "Druid", "Scrapper", "Berserker", "Scourge", "Reaper", "Weaver", "Reaper", "Berserker", "Reaper", "Berserker", "Firebrand", "Weaver", "Herald", "Druid", "Scrapper", "Tempest", "Tempest", "Druid", "Spellbreaker", "Dragonhunter", "Druid", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Spellbreaker", "Chronomancer", "Firebrand", "Firebrand", "Scrapper", "Reaper", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Blocked Attacks per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[12], [0, 1, 9, 5], [8, 12], [12, 9], [5, 10, 7], [5, 15, 8], [5, 3, 0, 1, 0, 1, 1, 1, 1, 7, 1, 4, 0, 2, 2, 0, 7, 0], [8, 8, 3, 0, 1, 2, 3, 0, 0, 6, 5, 4, 0, 0, 2, 1], [13, 4, 7, 0, 1, 0, 1, 2, 0, 0, 1, 1, 2, 2, 3, 1, 1, 2, 1, 7, 2], [11, 3, 31, 7], [9, 0, 0, 4, 1, 2, 2, 0, 2, 3, 3, 7, 8, 1, 3, 1, 7, 1], [5, 1, 1, 1, 4, 1, 2, 1, 0, 2, 2, 1, 9, 8, 5, 1, 1, 3, 8, 6], [7, 5, 2, 6, 1, 5, 0, 0, 3, 1, 1, 4, 7, 2, 1, 4, 1, 11, 2], [4, 0, 2, 3, 3, 4, 1, 2, 5, 3, 0, 3, 7, 5, 1, 3, 5, 17, 3], [3, 11, 12, 0, 1, 3, 6, 2, 5, 3, 2, 7, 3, 7, 1, 8], [9, 5, 6, 2, 1, 4, 1, 4, 0, 0, 2, 6, 2, 1, 5, 3, 0, 6, 6, 9, 5], [7, 4, 4, 0, 4, 1, 1, 5, 0, 1, 4, 7, 9, 5, 3, 1, 2, 5, 1, 9, 6], [10, 10, 9, 5, 1, 0, 4, 1, 5, 5, 0, 5, 9, 7, 0, 6, 1, 2, 1], [10, 1, 1, 12, 1, 5, 0, 1, 7, 7, 12, 7, 6, 9, 0, 3], [1, 0, 6, 3, 5, 0, 3, 9, 0, 6, 7, 6, 10, 2, 6, 5, 15, 4], [7, 6, 5, 0, 0, 2, 3, 12, 0, 1, 5, 5, 13, 9, 13, 11], [15, 1, 8, 2, 2, 0, 8, 0, 2, 3, 8, 7, 14, 7, 1, 3, 2, 5, 4, 3], [7, 7, 0, 4, 4, 1, 5, 1, 2, 6, 8, 6, 8, 5, 3, 2, 5, 3, 13, 6], [1, 6, 0, 9, 3, 7, 6, 15, 10, 5, 5, 1, 6, 8, 11, 5], [12, 17, 8, 3, 6, 2, 5, 2, 1, 3, 5, 9, 10, 5, 11], [15, 6, 9, 0, 3, 5, 2, 6, 1, 6, 3, 4, 5, 4, 7, 7, 3, 2, 2, 11, 5], [13, 3, 7, 0, 0, 3, 5, 5, 0, 1, 4, 6, 2, 4, 8, 13, 2, 9, 3, 21, 4], [13, 10, 4, 2, 9, 2, 4, 2, 2, 4, 4, 6, 4, 9, 2, 4, 3, 21, 8], [10, 18, 8, 0, 4, 3, 2, 3, 0, 4, 4, 5, 7, 9, 6, 8, 1, 4, 1, 14, 3], [13, 21, 12, 0, 8, 0, 3, 1, 2, 8, 4, 8, 0, 6, 5, 1, 6, 3, 8, 7], [8, 13, 12, 4, 3, 1, 8, 0, 3, 6, 5, 9, 7, 5, 10, 1, 7, 3, 13, 3], [5, 2, 10, 0, 3, 15, 2, 7, 1, 4, 7, 7, 5, 7, 7, 0, 1, 3, 29, 7], [8, 7, 7, 1, 5, 0, 0, 11, 0, 7, 5, 7, 11, 8, 3, 11, 2, 9, 2, 16, 6], [8, 28, 14, 0, 4, 4, 1, 3, 1, 3, 26, 5, 3, 9, 8, 7, 2], [9, 10, 10, 3, 2, 3, 8, 2, 3, 6, 7, 7, 7, 9, 2, 9, 8, 17, 7], [6, 22, 1, 3, 1, 6, 1, 2, 3, 4, 7, 13, 6, 8, 3, 4, 5, 29, 8], [10, 11, 17, 3, 5, 2, 10, 2, 3, 2, 7, 6, 6, 7, 7, 4, 10, 5, 18, 7], [13, 16, 9, 2, 3, 1, 16, 1, 3, 7, 9, 11, 7, 12, 15, 2, 1, 3, 10, 7], [9, 17, 5, 5, 9, 1, 9, 1, 2, 7, 5, 9, 11, 10, 12, 4, 4, 8, 17, 4], [9, 6, 14, 1, 0, 11, 5, 6, 0, 2, 3, 3, 6, 6, 5, 13, 3, 15, 10, 23, 10], [11, 13, 12, 1, 5, 5, 2, 8, 0, 2, 4, 6, 9, 10, 6, 8, 1, 7, 9, 32, 2], [13, 18, 7, 1, 4, 2, 3, 11, 0, 4, 12, 2, 10, 11, 6, 10, 3, 10, 7, 16, 11], [7, 7, 9, 8, 9, 2, 8, 1, 2, 4, 7, 10, 8, 9, 8, 3, 15, 9, 23, 13], [8, 18, 13, 1, 3, 9, 1, 8, 1, 3, 6, 10, 7, 13, 7, 13, 5, 8, 10, 25, 2], [10, 18, 14, 0, 4, 23, 2, 9, 1, 1, 9, 8, 4, 13, 12, 17, 2, 6, 9, 19, 8], [8, 19, 16, 0, 4, 16, 2, 9, 0, 2, 5, 9, 14, 9, 12, 11, 5, 13, 8, 40, 2], [25, 37, 19, 0, 4, 1, 2, 7, 1, 1, 5, 7, 8, 8, 6, 14, 1, 12, 32, 30, 3]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

