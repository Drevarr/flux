created: 20230702223827000
creator: Drevarr
modified: 20230705163541132
modifier: drevarr
tags: ChartData
title: 202307022238_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Kittendoo", "Thats Not Nice", "Valaria Emberstorm", "K\u00e2 Otik", "Bella Sassy", "Pixzil", "Ima Lou", "Spirita Demon", "Demon Staph", "Artakama Nahid"];
const professions = ["Firebrand", "Firebrand", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Druid", "Druid", "Druid", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.534, 102.7488, 104.4789, 301.8384, 107.541, 38.1896, 50.4438, 249.7743, 70.7513, 415.8, 28.8461, 208.9241, 368.9136], [1.0475, 19.2771, 21.4512, 0.0, 50.1422, 10.638, 6.7977, 0.0, 6.152, 7.8151, 33.9811, 7.5137, 3.7498, 0.1512, 19.4938, 12.3669, 34.1284, 0.0, 14.5824, 71.4877, 185.9112, 49.7448, 0.0, 23.3189, 260.937, 0.0, 229.284, 0.0, 22.8128, 47.23, 185.2983, 57.4623, 206.0932, 29.5884, 0.0, 31.6331, 18.6376, 38.6269, 53.0225, 0.0, 36.2653, 181.6522, 15.8221, 31.3243, 0.0, 31.3553, 91.6366], [19.9399, 0.0, 27.4964, 41.1277, 73.4811, 34.8613, 0.0, 54.1296, 24.6718, 253.5624, 111.8124, 6.1795, 22.7955, 18.1272, 76.0214, 188.3736, 109.431, 42.5311, 0.0, 193.0365, 0.0, 183.4272, 0.0, 76.451, 0.0, 100.3068, 100.4157, 0.0, 140.8282, 0.0, 24.9493, 24.8381, 24.7763, 233.2243, 0.0, 27.9591, 24.57, 187.704, 44.6896, 6.1789, 71.4226, 3.3211, 90.0405, 19.278], [60.0805, 70.055, 169.3661, 0.0, 49.8544, 14.472, 20.8463, 45.5112, 98.6061, 119.0206, 85.3585, 0.0, 58.3632, 30.9297, 121.7034, 155.6604, 11.1435, 0.0, 22.6632, 83.5507, 36.3528, 55.6416, 10.2874, 142.9821, 66.0686, 136.2636, 16.6225, 43.341, 0.0, 95.4261, 106.5015, 0.0, 173.8082, 21.8718, 0.0, 44.5998, 40.3818, 242.797, 0.0, 27.8285, 174.0047, 143.7795, 16.775, 23.4062, 79.2763, 26.3736, 120.0853], [90.3452, 104.1923, 123.1574, 36.8442, 118.1974, 71.658, 17.4798, 27.5675, 22.7115, 58.8755, 53.5228, 36.3215, 0.0, 89.46, 69.4742, 178.9515, 133.371, 42.058, 51.9456, 72.4997, 205.5456, 55.1124, 11.2226, 155.5668, 174.7073, 88.506, 13.6366, 32.1498, 140.3622, 64.9152, 30.7241, 122.3165, 14.459, 52.0817, 22.8928, 52.6676, 21.9647, 86.3402, 0.0, 0.0, 124.7173, 164.3752, 38.4462, 72.9808, 87.8105, 60.3011, 120.5548], [106.2444, 144.1504, 201.7594, 317.5432, 140.94, 10.1318, 12.869, 72.6107, 44.2276, 137.0698, 82.9249, 5.2315, 207.648, 80.5502, 195.741, 92.5193, 0.0, 126.5376, 75.3333, 133.2288, 58.9302, 8.2196, 25.9219, 173.484, 32.5235, 245.322, 0.0, 8.112, 15.0924, 189.59, 70.56, 102.6043, 42.2617, 18.964, 88.5758, 175.9128, 70.2113, 150.8598, 169.8414, 67.1846, 21.2617, 109.3819, 29.358], [0.0, 550.0532, 329.616, 28.8093, 0.0, 127.3167, 323.4988, 214.1607, 291.2715, 277.6536, 194.8268, 189.9261, 464.3503, 139.7105, 86.856, 316.837, 213.5808, 350.973, 199.2019, 0.0, 160.1172, 0.0, 663.0228, 0.0, 286.4346, 11.642, 550.341], [16.3878, 2.465, 1373.3676, 1526.9364, 105.7202, 629.3218, 141.3647, 1569.6499, 233.9064, 214.339, 911.6242, 0.0, 243.3467, 0.0, 451.7996, 285.2389, 697.746, 186.624, 143.8195, 724.4219, 875.2689, 136.6483, 0.0, 114.9876, 37.737, 1546.0866], [617.1154, 549.4493, 1002.0662, 172.121, 1493.8341, 721.494, 165.8963, 31.7948, 344.9723, 569.2827, 513.3956, 772.2725, 175.8154, 1196.748, 253.4743, 1921.5378, 1530.9529, 151.6485, 36.8714, 276.5448, 785.8382, 820.044, 625.5522], [352.3002, 301.0383, 337.6749, 466.2979, 189.991, 699.5446, 351.486, 105.0406, 60.0207, 200.0156, 230.0882, 284.9344, 225.6251, 195.7133, 595.5768, 261.7813, 754.6266, 500.7442, 67.5835, 19.2629, 168.168, 251.4618, 487.8792, 174.0312, 84.2813, 155.157, 721.5939, 1009.0793, 1004.8104, 134.4064, 401.6905, 638.8668, 328.1922, 82.713, 282.541, 142.73, 175.5486, 176.9307, 204.8527, 782.5944, 68.7398, 226.0768, 386.3878, 810.5534, 286.95, 108.6528, 271.013, 206.6909, 1158.9782, 141.66]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

