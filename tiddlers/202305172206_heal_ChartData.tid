created: 20230517220640000
creator: Drevarr
modified: 20230705163530488
modifier: drevarr
tags: ChartData
title: 202305172206_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Itsy Bitsy Tika", "Johosh The Great", "Solus Sanctus", "Tootsie Pop Rocks", "Tegan Parker", "Tribal S", "Zadie Miststep", "Artakama Nahid", "Arriasa", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Scrapper", "Tempest", "Druid", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[33.9008, 15.3889, 139.7984, 154.8607, 273.1026, 69.7727, 304.2537, 1121.2692, 3.6909, 86.0789, 12.1046, 158.92, 440.5674, 234.3077, 142.925, 50.0, 539.2333, 200.7664, 51.9677, 14.2549, 10.7719, 281.9444, 160.2991, 56.4605, 11.5749, 87.5685, 117.6272, 11.0, 97.0048, 188.1005, 26.8549, 47.6591, 77.2165, 20.9688], [77.1221, 86.0185, 218.3643, 180.8259, 127.2051, 0.0, 808.9254, 451.3462, 103.6727, 986.4474, 76.7255, 112.6533, 414.6312, 444.8077, 229.5278, 371.75, 285.6497, 408.5083, 342.9959, 704.4086, 102.9608, 186.2632, 516.0278, 282.1121, 86.2368, 41.0958, 488.0822, 178.0296, 23.4559, 0.0, 211.7048, 18.2895, 357.873, 174.5026, 3.0114], [14.9008, 66.3889, 140.4975, 319.3077, 135.3636, 758.1194, 1123.75, 16.3455, 308.3947, 101.1699, 134.3467, 582.2837, 690.6154, 58.5, 192.6375, 215.7005, 565.6583, 455.4631, 708.0215, 0.0, 44.7368, 0.0, 344.75, 216.3318, 282.6711, 117.3054, 303.1849, 306.1538, 191.6029, 165.3905, 10.5526, 311.5503, 79.5181, 487.6932, 6.6186, 70.6458], [3.4962, 26.5741, 179.8605, 88.796, 27.2564, 51.4545, 792.3433, 73.3846, 0.0, 1026.1316, 185.5621, 152.0267, 1752.2837, 738.4872, 120.3056, 435.875, 451.0711, 1493.5167, 972.209, 2404.5161, 91.0175, 1.9286, 1092.25, 718.5561, 141.7105, 131.2994, 627.4795, 913.071, 166.4412, 0.0, 459.5667, 0.0, 819.0635, 105.2902, 26.8068, 6.3093, 76.3229], [0.0, 2.7037, 72.0078, 437.3632, 786.8974, 8.5909, 1498.7612, 3085.5192, 268.4364, 315.5, 142.1895, 330.1467, 2290.4894, 1082.7051, 427.1389, 804.7375, 541.9898, 1368.2, 998.4918, 1622.1828, 85.7544, 1408.9167, 886.3271, 293.4211, 146.8383, 745.5616, 601.5562, 102.6029, 18.9111, 570.3667, 14.9211, 816.6772, 229.9016, 20.0341, 52.8351, 2.7188], [7.3588, 553.4651, 202.5025, 700.5641, 1815.4545, 2230.1343, 1855.5769, 88.1818, 797.1053, 254.5752, 134.7467, 2323.9858, 1416.0897, 95.8889, 905.575, 669.2183, 2038.075, 1237.0369, 2413.3226, 14.5294, 192.8772, 0.0, 1611.4722, 862.8131, 273.8553, 132.2754, 607.5616, 806.9763, 104.0882, 5.3333, 482.0, 24.9211, 973.6878, 339.9326, 26.8523, 37.4845, 197.8229], [8.1832, 100.7222, 264.9225, 766.5672, 831.2308, 472.9545, 1692.7015, 3376.4808, 110.9636, 849.6579, 479.1961, 214.56, 2247.6028, 1886.3718, 22.8056, 1057.725, 709.8376, 1727.8417, 1358.2172, 369.8065, 76.6667, 275.2982, 22.3929, 1612.6667, 790.472, 450.2237, 179.0599, 614.726, 759.3669, 541.9118, 15.0444, 628.1905, 14.1053, 1392.0582, 349.0415, 24.5341, 130.3505, 380.7292], [18.3206, 115.6111, 380.7287, 351.9353, 1090.6154, 298.4545, 1427.5373, 3308.3269, 230.4, 1772.3684, 623.4314, 205.9467, 2629.2411, 1034.6282, 286.5, 893.6875, 718.3604, 1781.5083, 1233.5984, 1682.6882, 354.2549, 366.8772, 108.7857, 1965.4167, 781.7617, 631.4474, 228.1317, 879.6301, 1014.0828, 172.3971, 715.7952, 70.0789, 238.2434, 310.4249, 214.875, 555.6289, 234.1458], [110.5496, 155.463, 303.0465, 643.2239, 1390.1026, 324.2727, 3504.7463, 281.9808, 1315.2895, 505.2353, 315.0, 987.1631, 1848.8846, 800.3889, 1305.7625, 1017.9746, 1883.3833, 1218.627, 3431.5699, 122.7059, 617.1754, 139.2143, 2167.3056, 1146.8505, 451.3947, 413.8503, 1253.4932, 1373.1124, 615.2647, 11.4, 917.3857, 56.2632, 1154.2169, 414.7358, 90.3864, 73.299, 88.9375], [73.8015, 204.037, 386.4264, 714.2289, 974.1538, 468.0, 2328.3731, 4374.1923, 459.1273, 1094.6053, 727.0196, 257.12, 3022.8369, 2051.8974, 61.8889, 998.525, 936.203, 2031.7917, 1506.6025, 3156.0108, 125.4118, 169.3509, 77.75, 1815.7778, 1009.6963, 673.7763, 219.1856, 1161.8562, 791.4556, 240.1029, 24.7111, 713.4524, 113.4474, 961.4233, 533.171, 209.3864, 440.8866, 561.3438]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

