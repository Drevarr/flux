created: 20230303232222000
creator: Drevarr
modified: 20230705163521104
modifier: drevarr
tags: ChartData
title: 202303032322_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Jupi Jupi Jupi", "Air One Com", "Kahless The Drunk", "Aronorf Xideliesi", "Blanco Padre Guard", "Koralia Danai", "Viral Marketing", "Ravioli Fetabringer", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[35.2607, 321.5295, 0.0, 0.0, 41.1312, 20.2356, 22.4028, 0.0, 0.0, 634.2672, 214.0531, 82.1438, 203.3686], [27.0028, 270.8559, 0.0, 502.9194, 0.0, 721.4519, 165.3792, 45.8433, 0.0, 1224.1037, 104.877, 221.76, 225.5242], [66.6019, 418.8834, 36.5298, 0.0, 55.0441, 101.7555, 84.0105, 149.0892, 132.9216, 820.8598, 200.3688, 114.1238, 521.1616, 114.7041, 40.0496, 37.374, 488.6744, 911.1039, 153.4781, 49.0413, 0.0, 891.0605, 72.2142, 248.688, 186.863], [81.3076, 425.3553, 16.3725, 11.7354, 63.4106, 67.7061, 66.675, 39.558, 68.628, 802.9749, 101.9102, 45.63, 1134.5952, 305.2279, 10.0368, 11.8539, 523.7658, 0.0, 841.9519, 390.1094, 44.8679, 0.0, 1629.8726, 48.1428, 221.6808, 187.5789], [36.1134, 407.1789, 39.7499, 0.0, 46.2414, 45.8073, 200.9851, 113.9088, 134.0052, 535.4395, 93.8808, 225.0788, 1044.4256, 156.3874, 40.1054, 39.6339, 576.2292, 39.7462, 1075.9851, 394.2826, 0.0, 39.6396, 1461.6518, 177.633, 291.1392, 396.0795], [67.7688, 605.4669, 0.0, 0.0, 77.0275, 53.4996, 278.9149, 111.3552, 335.7096, 1099.8267, 161.1029, 350.8538, 1613.008, 315.6237, 33.4699, 15.7981, 1053.4381, 0.0, 254.1595, 343.9656, 589.644, 457.8898], [156.5256, 0.0, 150.6852, 194.1192, 507.2294, 160.8091, 179.6925, 1530.08, 157.7369, 0.0, 45.3263, 734.8356, 0.0, 1424.3256, 373.8034, 162.1226, 0.0, 2310.2323, 28.8702, 156.3408, 288.4483], [25.9406, 548.5968, 23.8583, 0.0, 56.4463, 73.0191, 103.693, 97.1508, 136.9464, 691.9781, 70.6982, 74.3925, 1330.1184, 196.8712, 0.0, 41.7872, 855.0498, 0.0, 1068.7603, 340.3411, 32.2518, 20.8404, 2413.2038, 117.1836, 438.4512, 143.4287], [40.6164, 584.6742, 63.6709, 23.6394, 131.4952, 175.9296, 307.3451, 205.1772, 306.1428, 1023.309, 184.6771, 204.8475, 1754.5696, 298.0807, 72.8365, 142.9506, 1085.75, 1234.4155, 529.368, 83.7876, 17.766, 2220.1747, 208.3608, 497.8512, 460.0377]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

