created: 20230517220640000
creator: Drevarr
modified: 20230705163530614
modifier: drevarr
tags: ChartData
title: 202305172206_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Arriasa", "Grasszanine", "Zadie Miststep", "Tootsie Pop Rocks", "Newtype Khan", "Drevarr Moonwillow", "Artakama Nahid"];
const professions = ["Druid", "Spellbreaker", "Tempest", "Scrapper", "Spellbreaker", "Scrapper", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[90.8983, 90.2329, 0.0, 90.4982, 0.0, 0.0, 92.0768, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.7763, 70.8588, 0.0, 150.4588, 0.0, 169.1213, 0.0, 5.3122, 6.368, 0.0, 0.0, 0.0, 0.0, 72.8287, 74.7593, 35.1943, 0.0, 0.0, 104.1264, 0.0, 102.5193, 162.6758, 74.8836, 0.0, 0.0], [16.7732, 0.0, 5.1032, 118.188, 0.0, 19.0359, 46.8571, 0.0, 0.0, 0.0, 140.4907, 33.912, 110.5891, 116.2122, 0.0, 63.936, 158.2363, 71.628, 130.9402, 0.0, 0.0, 0.0, 0.0, 0.0, 58.7216, 0.0, 110.4705, 32.0499, 135.0631, 0.0, 0.0, 144.9504, 0.0, 16.5772, 52.4342, 70.3296, 16.7829, 0.0], [0.0, 0.0, 62.9597, 168.1646, 15.3504, 13.9073, 65.9716, 1.0754, 0.0, 0.0, 62.6443, 30.96, 63.8222, 70.2406, 0.0, 43.584, 126.2928, 54.5388, 91.1194, 0.0, 0.0, 39.8002, 0.0, 0.0, 134.1159, 14.9332, 90.6676, 62.7406, 53.5781, 31.2208, 0.0, 75.7008, 0.0, 146.509, 42.707, 28.6308, 47.0479, 114.3504], [0.0, 0.0, 0.0, 63.1944, 0.0, 0.0, 73.1513, 0.0, 0.0, 0.0, 0.0, 73.116, 63.6869, 70.7538, 89.6022, 72.384, 214.8088, 164.6316, 150.3821, 73.6114, 52.1732, 0.0, 10.9544, 197.9757, 18.1731, 160.3868, 167.8328, 133.2413, 0.0, 0.0, 128.4192, 0.0, 299.1303, 10.1904, 0.0, 5.4485, 0.0], [35.6215, 0.0, 163.7191, 229.7189, 72.9144, 0.0, 140.9492, 0.0, 75.6629, 0.0, 0.0, 60.624, 158.2358, 117.422, 72.5922, 60.5568, 261.6593, 161.4168, 246.3034, 55.6214, 41.2121, 59.044, 93.933, 502.0697, 62.1536, 269.548, 257.7586, 286.771, 128.8484, 0.0, 370.6416, 0.0, 209.7617, 170.087, 53.0244, 56.4734, 210.2112], [90.6101, 77.3923, 171.8486, 348.2928, 56.9837, 23.0479, 181.1305, 30.4278, 180.5364, 22.6176, 344.5805, 93.96, 107.2728, 175.1615, 62.7426, 208.128, 503.3192, 245.7348, 411.0912, 97.583, 105.0223, 117.1384, 0.1764, 29.3353, 380.5369, 111.3104, 294.9971, 422.7299, 298.7785, 83.8998, 105.948, 342.5184, 51.471, 456.0116, 342.4901, 241.2432, 67.7681, 165.888], [140.5263, 161.9595, 501.423, 694.1736, 103.8398, 120.5127, 249.4638, 96.6846, 149.2062, 133.5898, 425.2176, 274.716, 378.8726, 306.6976, 145.233, 285.696, 784.8854, 444.3192, 831.4349, 194.3626, 140.301, 193.6387, 123.3792, 138.0154, 723.1146, 247.1246, 598.341, 507.2186, 581.0778, 175.2299, 39.942, 748.1376, 127.55, 357.6598, 438.2798, 313.3944, 154.0292, 471.5712]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

