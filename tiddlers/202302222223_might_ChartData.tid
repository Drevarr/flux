created: 20230222222328000
creator: Drevarr
modified: 20230705163520005
modifier: drevarr
tags: ChartData
title: 202302222223_might_ChartData
type: text/vnd.tiddlywiki


const names = ["Etchery", "Fribble Bibble", "Sygaldry Verdandi", "Blanco Padre Guard", "Ravioli Fetabringer", "Venomina The Siren", "Zaylen Harker", "Drevarr Moonwillow", "Veron Blackburn", "Bella Sassy", "Newtype Khan", "Arcanophage Farra"];
const professions = ["Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Tempest", "Firebrand", "Scrapper", "Herald", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Might per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[6.2819, 5.5704, 429.9569], [3.1684, 5.9418, 365.0927, 1.9322, 5.0345, 6.5072, 9.2693, 7.8104, 3.7437, 30.5927, 16.9709, 27.8301, 9.2419], [4.7068, 0.0, 366.946, 5.4605, 2.8939, 7.6514, 2.2202, 17.5249, 6.9858, 37.1737, 7.1611, 49.5824, 1.177], [4.5054, 4.902, 441.0765, 6.6086, 3.766, 19.3072, 13.9317, 0.4663, 0.0, 20.988, 19.3252, 31.9886, 11.16], [2.1428, 0.0743, 439.2232, 6.6366, 6.6202, 31.6066, 7.2711, 7.4607, 1.7754, 45.1776, 16.3823, 39.6659, 10.2445], [428.1036, 0.0, 0.5153, 8.0089, 0.0, 14.0277, 4.6314, 11.5612, 35.9037, 133.0727, 11.2036], [5.4028, 5.2139, 474.4352, 10.0294, 14.8022, 6.494, 8.3545, 4.3613, 40.3752, 25.5054, 60.6185, 12.6858], [459.6091, 10.613, 10.1087, 17.6625, 15.2638, 13.3283, 13.6242, 51.7586, 25.2111, 62.5378, 13.95], [782.0768], [8.8642, 3.8176, 672.7343, 7.5887, 12.844, 35.7541, 21.2583, 8.8207, 7.4489, 55.138, 38.16, 50.8619, 15.2578], [15.8054, 14.2602, 1121.2238, 25.1744, 21.8427, 27.2446, 17.817, 20.4781, 11.1541, 13.6956, 5.8859, 26.0707, 5.8416], [44.3028, 33.7938, 3178.3452, 49.7607, 40.9897, 100.6835, 92.8593, 61.8618, 56.9282, 285.4724, 138.1214, 243.4336, 87.0131]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

