created: 20230419215809000
creator: Drevarr
modified: 20230705163526058
modifier: drevarr
tags: ChartData
title: 202304192158_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Newtype Khan", "Be\u00eb", "Smol Gluvs", "Grasszanine", "Kmpek", "Kos\u00e4ir", "Arcanophage Farra", "Xanvias Einzbern", "Mistwalker Caelon", "Corlyss Velaryonn", "Xyntharos", "Daddys Lil Orchid", "Kos\u00e4ir", "Ryvalia Fazebringer", "Ark Darkness", "Sygaldry Verdandi", "Gabe Malhorn", "Jupi Jupi Jupi", "Solus Sanctus", "Bella Sassy", "Johosh The Great", "Koralia Danai"];
const professions = ["Spellbreaker", "Scourge", "Scourge", "Spellbreaker", "Vindicator", "Renegade", "Spellbreaker", "Berserker", "Vindicator", "Vindicator", "Vindicator", "Vindicator", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 1.9181, 1.6973, 2.9327, 3.5104, 1.762, 0.0, 0.0, 3.0419, 0.0, 2.4168, 3.4348, 1.8144, 1.4798, 1.078, 2.4441, 1.368, 0.0, 0.4211, 0.9202], [0.0, 2.7878, 0.7459, 1.0608, 2.1506, 3.0228, 3.6946, 0.0, 0.0, 0.6654, 0.9174, 3.18, 1.8128, 0.672, 2.7376, 3.0184, 3.3536, 0.6019, 0.0, 0.079, 0.2726], [0.0, 1.7418, 3.659, 3.0547, 2.9702, 2.8675, 2.6328, 0.5116, 0.0, 0.0, 4.0401, 0.0, 2.1624, 4.7705, 0.6048, 1.8498, 1.078, 0.2274, 0.8208, 0.0, 1.316, 0.2726], [0.0, 0.0, 4.5302, 1.5984, 3.3946, 0.0, 5.7531, 2.3873, 1.6992, 1.9963, 0.0, 2.4168, 5.1521, 2.6208, 5.9932, 1.7248, 0.9663, 1.368, 0.0, 1.1318, 1.1587], [0.0, 0.0, 6.2726, 2.8771, 3.1824, 4.4967, 3.2178, 6.4229, 0.0, 0.0, 2.329, 0.0, 3.6888, 0.0, 0.4032, 7.325, 5.0666, 2.6146, 0.0, 0.0, 0.0, 2.4878], [14.798, 20.1586, 18.7572], [0.0, 5.4014, 3.481, 3.3946, 4.0405, 6.6307, 2.9557, 0.0, 0.0, 4.0876, 2.8957, 6.2328, 2.1944, 1.68, 5.1793, 1.9404, 3.6946, 4.104, 0.0, 0.0, 1.5677], [0.0, 1.6779, 8.5378, 1.847, 7.0013, 3.1282, 3.9004, 2.842, 0.0, 3.137, 0.0, 1.908, 5.4384, 2.2848, 4.0694, 4.4198, 2.7852, 4.2682, 1.3427, 0.8686, 2.1811], [0.0, 4.027, 10.4544, 4.2269, 10.3958, 7.1687, 6.8257, 5.8545, 0.0, 0.0, 3.2796, 0.9461, 2.7984, 7.6328, 2.688, 6.5851, 4.4198, 1.7052, 2.353, 0.0, 0.1579, 0.0], [0.0, 6.7133, 23.5498, 3.454, 2.7303, 2.5578, 0.0, 0.4522, 9.9338, 4.3005, 2.6712, 0.2862, 0.8736, 1.2578, 11.858, 10.6859, 1.368, 3.6418, 1.3423, 0.0], [1.5851, 0.4954, 14.4619, 2.6285, 14.0026, 6.2563, 3.3153, 5.0588, 0.0, 1.7313, 8.4603, 1.2328, 5.724, 9.064, 3.2256, 6.4371, 8.8396, 6.3661, 3.4474, 0.0, 0.7633, 1.704], [1.1914, 2.1573, 16.3786, 3.2323, 14.4269, 8.6676, 9.6535, 2.8988, 0.0, 0.0, 3.945, 4.1285, 3.3072, 4.9728, 4.8833, 14.014, 6.0819, 0.0, 2.6372, 0.5527, 2.3174], [0.0, 3.2439, 33.2798, 5.328, 16.3363, 13.2947, 12.0912, 8.9807, 0.0, 0.0, 2.9944, 5.0459, 6.1056, 8.9685, 7.056, 1.42, 1.1318, 1.7722], [0.0, 0.0, 20.0376, 1.5984, 7.8499, 7.6901, 9.2635, 3.8083, 0.0, 0.0, 3.5647, 1.4908, 9.7944, 11.4492, 5.5776, 17.9056, 6.7914, 9.3786, 7.4419, 1.9803, 3.5795, 4.5667], [2.9883, 16.9013, 6.9619, 12.7296, 9.9058, 13.3589, 2.2168, 0.0, 0.4393, 4.1826, 0.258, 10.3032, 18.7958, 8.5344, 13.6882, 9.3786, 4.7177], [0.2486, 0.2077, 15.6816, 7.5302, 15.6998, 9.1238, 11.0186, 9.3218, 0.0, 1.0207, 7.6999, 3.2684, 12.9744, 14.6931, 2.0832, 10.5066, 9.5942, 13.13, 10.6704, 0.937, 0.7633, 8.1451], [5.4701, 19.943, 10.1665, 14.334, 8.526, 0.0, 8.6029, 3.1537, 12.9744, 19.9407, 10.2816, 16.2038, 19.5118, 8.526, 8.3722, 2.4247, 7.4486, 4.6008], [0.0, 4.1069, 26.3102, 5.399, 18.2458, 7.2339, 14.0414, 11.0838, 0.0, 6.8918, 2.5803, 18.6984, 17.6508, 9.4752, 13.2442, 13.1516, 9.606, 11.2176, 3.806, 6.7906, 8.2814], [0.0, 0.2237, 18.4694, 6.216, 20.7917, 13.8812, 18.4294, 13.2437, 0.0, 0.9819, 4.6579, 4.6732, 10.176, 19.8453, 10.5504, 18.2755, 13.7984, 9.7196, 12.2573, 1.4973, 6.8169, 6.2707], [0.2279, 2.1094, 28.2269, 8.2051, 30.7632, 12.7733, 17.6493, 3.7514, 0.0, 7.2721, 3.0964, 15.1368, 23.7571, 12.1632, 19.6813, 20.6976, 7.6734, 10.8346, 1.8837, 4.1849, 7.4635], [0.5698, 4.2667, 23.8709, 9.4128, 30.3389, 15.9015, 21.9398, 12.7322, 0.0, 10.3615, 4.4725, 21.2424, 22.8984, 11.6928, 17.5356, 17.248, 9.4923, 12.9139, 3.0815, 6.0536, 10.7011], [3.6115, 30.6662, 11.1533, 34.1578, 19.6162, 19.9895, 11.5385, 0.0, 11.0745, 6.7374, 17.9352, 16.7922, 8.5344, 18.2015, 26.5188, 14.7784, 14.1178, 2.956, 4.7376, 7.4635]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

