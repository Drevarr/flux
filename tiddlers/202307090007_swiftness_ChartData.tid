created: 20230709000753000
creator: Drevarr
tags: ChartData
title: 202307090007_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Sonia Truestrike", "Danaeryn", "Naithan Stone", "Thats Not Nice", "Luke The Knight", "Artakama Nahid", "Jerryatric Reflexes", "Amiti\u00e9l", "Miphest\u00f6", "Audra Storm", "Valaria Emberstorm", "K\u00e2 \u00d4tik R\u00e6j", "Zayde Sunsabre", "Hayuf", "Lost Uber Driver", "Whip \u00d1 Sl\u00e0pper", "Erin Celes", "Newtype Khan", "Tika Fiery", "Greg The Knight", "Blaze All Might", "Koranthin", "Boof Floof", "Enter Effore"];
const professions = ["Firebrand", "Tempest", "Tempest", "Firebrand", "Berserker", "Tempest", "Spellbreaker", "Firebrand", "Tempest", "Weaver", "Tempest", "Spellbreaker", "Spellbreaker", "Firebrand", "Herald", "Tempest", "Herald", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[181.0746, 31.3513, 114.4725, 0.0, 16.7654, 0.0, 32.9077], [0.0, 3.9331, 0.0, 25.7321, 57.2033, 126.6552, 0.0, 30.1264, 55.2872, 0.0, 53.8109, 22.3212, 18.4683], [24.6513, 74.4192, 0.0731, 42.5858, 279.0332], [447.4225], [270.333, 0.0, 26.4898, 146.0538, 0.0, 0.0, 0.0, 21.3751], [36.5375, 38.7763, 0.0, 299.0915, 49.0392, 0.0, 41.3424, 36.1157, 0.0, 16.1979, 1.4212], [196.5625, 0.0, 27.9572, 131.0681, 185.2793], [162.43, 80.2781, 12.992, 178.2812, 111.2864], [466.8384, 81.8496], [50.8287, 9.9715, 32.7723, 56.8062, 312.3152, 81.2322, 20.6921, 103.2794, 78.9931, 0.0, 25.6939, 36.9512, 9.0178], [100.825, 29.0333, 153.0005, 542.0198], [315.8442, 107.2814, 9.6848, 275.6407, 95.1133, 85.6064, 2.7986], [287.091, 10.5548, 92.7907, 233.7974, 49.6765, 175.0329, 59.4062, 25.9178], [257.9363, 13.4314, 12.9027, 76.03, 659.8438], [350.154, 88.573, 233.6611, 158.3841, 56.8029, 70.62, 75.9689], [84.175, 28.0867, 55.5976, 25.9578, 487.9367, 161.406, 33.6272, 108.7152, 40.0136, 7.623, 8.1426, 10.3022], [5.365, 31.4813, 18.3512, 94.2381, 365.2096, 246.4308, 112.1569, 124.0655, 241.4343, 0.0, 24.3405, 59.6737, 21.2534], [11.1, 111.7267, 46.1974, 746.6145, 113.1606, 0.0, 11.1012, 245.5709, 29.2908, 44.8825], [82.4175, 68.8214, 19.8453, 65.4588, 351.6889, 273.1554, 26.6533, 149.3686, 63.3218, 129.0366, 123.4705, 7.3066, 9.5586], [319.1076, 21.4333, 205.9847, 491.3008, 190.3787, 256.4588], [1079.4337, 548.7804, 15.4408, 273.5489, 302.8469, 80.5959, 135.6298, 0.0, 95.654], [185.2313, 69.8986, 64.9032, 136.5982, 844.9745, 338.0706, 0.0, 284.3056, 618.5808, 6.4911, 51.6716, 69.9565, 79.1461], [208.68, 137.0554, 51.3834, 290.3888, 858.4952, 256.221, 53.1292, 216.5882, 459.1626, 139.9085, 46.7157, 75.7931], [379.1575, 103.7789, 73.7621, 435.9406, 1243.7632, 368.7642, 88.5834, 150.8615, 402.0457, 183.3283, 157.4355, 115.9205]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

