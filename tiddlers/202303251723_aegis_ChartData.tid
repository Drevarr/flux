created: 20230325172304000
creator: Drevarr
modified: 20230705163522910
modifier: drevarr
tags: ChartData
title: 202303251723_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Gavann", "Blanco Padre Guard", "Aronorf Xideliesi", "Gabe Malhorn", "Whose Guardian", "Ju\u00e7", "Zaylen Harker", "Sygaldry Verdandi", "Koralia Danai", "Johosh The Great", "Bella Sassy"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[163.2485, 50.9052, 0.0, 15.2774, 41.0928, 259.3319, 90.9398, 82.4906, 205.8091], [94.0085, 82.6402, 0.0, 12.9298, 0.0, 0.0, 336.8623, 0.0, 0.0, 72.1354, 5.8294, 0.0, 0.0, 9.601, 0.0, 73.508, 179.9231, 52.186, 158.7708], [59.7699, 53.9055, 13.8154, 28.3122, 0.0, 354.9315, 1.6318, 0.0, 142.4822, 3.6016, 1.3728, 27.404, 3.5741, 1.344, 70.8055, 33.0922, 149.1996, 187.0746], [102.2729, 36.531, 9.6466, 0.0, 43.218, 0.0, 627.2608, 5.264, 0.0, 192.8578, 0.0, 0.0, 0.0, 0.0, 0.0, 69.332, 76.1973, 115.6412], [0.0, 15.8895, 0.0, 207.6437, 26.6364, 35.0005, 638.8767, 31.0576, 15.6045, 116.3506, 22.6122, 0.0, 0.0, 11.6333, 18.5136, 12.5396, 33.6027, 42.3103, 92.1895], [467.9024, 456.489, 47.7943, 60.6341, 162.9054, 749.8735], [140.3486, 191.4165, 0.0, 0.0, 111.4848, 684.0498, 15.6341, 23.8981, 201.6014, 33.6398, 12.8794, 0.0, 10.8624, 15.7248, 86.48, 51.3823, 180.2788, 240.9866], [293.3152, 119.8395, 0.0, 66.1248, 201.6252, 0.0, 857.6436, 100.0686, 2.1573, 251.4802, 49.0116, 3.4195, 0.0, 3.7843, 0.0, 231.2259, 84.8148, 320.3774, 226.4304], [275.6057, 160.1572, 15.0595, 129.0024, 159.7302, 1175.7913, 67.9582, 0.0, 309.6058, 14.7406, 69.913, 0.0, 35.6006, 55.3056, 259.8724, 136.4523, 218.1355, 386.4143], [244.6139, 110.187, 0.0, 28.1621, 84.672, 0.3627, 1435.8593, 178.976, 0.0, 300.7627, 57.6629, 48.073, 10.0776, 76.5274, 119.0448, 227.01, 161.633, 351.9407, 437.0915], [285.5673, 238.491, 46.373, 246.8462, 270.4212, 52.7729, 1446.8299, 175.028, 111.892, 325.9008, 119.0388, 46.0013, 70.2712, 184.1702, 186.7824, 436.3997, 225.6907, 267.0296, 399.0836]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

