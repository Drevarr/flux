created: 20230717221937000
creator: Drevarr
tags: ChartData
title: 202307172219_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Solus Sanctus", "Black Raspberry Pie", "Morton Saltbringer", "Cat Wigglebooty", "Crusader Siolith", "Newtype Khan", "Primal Clone", "Eibh\u00ebar", "Xx Zen Xx", "Miphest\u00f6", "Klengah", "Drumina", "High Sorcer Baradun", "Tegan Parker", "Drevarr Moonwillow", "Tribal S"];
const professions = ["Firebrand", "Chronomancer", "Chronomancer", "Scrapper", "Firebrand", "Spellbreaker", "Chronomancer", "Chronomancer", "Druid", "Tempest", "Druid", "Druid", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.1254, 0.0563, 0.0514, 0.1132, 0.0291, 0.2525, 0.0761, 0.0391, 0.1875, 0.0427, 0.1013], [0.0, 0.0648, 0.0128, 0.1495, 0.1509, 0.0, 0.4141, 0.1687, 0.0223, 0.0, 0.1719, 0.3507, 0.2342], [0.0, 0.0383, 0.1381, 0.1449, 0.1717, 0.0058, 0.5051, 0.1564, 0.1564, 0.0, 0.5781, 0.0427, 0.0886], [0.0321, 0.0814, 0.8687, 0.3436, 0.3128, 0.0, 0.4219, 0.2275, 0.4051], [0.0, 0.203, 0.0665, 0.0374, 0.1321, 0.0756, 0.4343, 0.1543, 0.1117, 0.0, 0.1562, 0.0616, 0.0886], [0.0, 0.0829, 0.0512, 0.243, 0.2623, 0.0407, 0.5354, 0.1296, 0.2235, 0.0, 0.5, 0.0095, 0.1709], [0.0, 0.067, 0.0665, 0.3364, 0.1642, 0.0581, 0.5253, 0.2428, 0.2235, 0.0, 0.3906, 0.0237, 0.3671], [0.0087, 0.0659, 0.0972, 0.2009, 0.2717, 0.0291, 0.4949, 0.2325, 0.1173, 0.0, 0.5469, 0.0664, 0.2405], [0.2267, 1.1616, 0.6317, 0.8939, 0.0312, 1.2031, 0.3602, 0.8228], [0.0087, 0.4017, 0.3376, 0.014, 0.4302, 0.2471, 0.7677, 0.3683, 0.2402], [0.3566, 0.282, 1.8384, 0.6296, 0.581, 0.0625, 1.5156, 0.5071, 0.9051], [0.0, 0.4793, 0.5908, 0.5, 0.4189, 0.1424, 2.0909, 0.3848, 0.3184, 0.0, 0.4219, 0.2464, 0.5823], [0.0174, 0.7439, 0.6317, 0.3972, 0.5321, 0.186, 0.9192, 0.2469, 0.9553, 0.1562, 0.8906, 0.3223, 0.4684], [0.0, 0.8491, 0.4015, 0.785, 0.9453, 0.2645, 2.1414, 0.7366, 0.7654, 0.0, 1.4375, 0.6066, 0.7722], [0.0783, 1.1148, 0.844, 1.5981, 1.3585, 0.6221, 2.5051, 0.8045, 1.162, 0.0938, 1.8125, 0.8957, 1.2975], [0.0, 1.6982, 1.5038, 1.8692, 1.5717, 0.8081, 4.2626, 1.4877, 1.4916, 0.0, 2.4531, 1.4218, 1.6076]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            //console.log(params.value);
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

