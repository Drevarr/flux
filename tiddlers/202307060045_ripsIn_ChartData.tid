created: 20230706004528000
creator: Drevarr
tags: ChartData
title: 202307060045_ripsIn_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Cael", "Artakama Nahid", "Mike The Archmagus", "Xyntharos", "River No Hug", "Solus Sanctus", "Johosh The Mighty", "Sygaldry Verdandi", "Ryvalia Fazebringer", "Eibh\u00ebar", "Primal Clone", "Stoic Rapidfire", "Kary\u00edna", "Grasszanine", "Tegan Parker", "Legacy Of Mathus", "Zaedy Zae", "Tika Fiery", "Newtype Khan"];
const professions = ["Vindicator", "Tempest", "Tempest", "Vindicator", "Reaper", "Firebrand", "Berserker", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Druid", "Vindicator", "Berserker", "Tempest", "Berserker", "Druid", "Firebrand", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips Incoming per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.1707, 0.1346, 0.1324, 0.0377], [0.1341, 0.1923, 0.1324, 0.1509, 0.0308], [0.2317, 0.1538, 0.1176, 0.2453], [0.2375, 0.1176, 0.1154, 0.069, 0.2212, 0.1333, 0.044], [0.0976, 0.0192, 0.0294, 0.0943, 0.0308, 0.075, 0.1176, 0.1282, 0.2414, 0.0796, 0.2133], [0.0732, 0.0769, 0.0735, 0.1132, 0.0769, 0.2, 0.0471, 0.1667, 0.1897, 0.2389, 0.1333, 0.033], [0.0854, 0.1154, 0.2206, 0.2453, 0.2154, 0.2375, 0.0471, 0.0897, 0.1207, 0.0885, 0.1467], [0.0488, 0.0769, 0.0735, 0.1132, 0.1077, 0.1875, 0.1882, 0.1282, 0.1207, 0.177, 0.24, 0.033], [0.0976, 0.0192, 0.0441, 0.1698, 0.0615, 0.15, 0.0588, 0.2436, 0.4138, 0.1504, 0.1867], [0.2073, 0.0192, 0.1912, 0.0189, 0.0462, 0.1875, 0.0824, 0.1538, 0.2241, 0.177, 0.2267, 0.0879], [0.0976, 0.1923, 0.0147, 0.2453, 0.1231, 0.2875, 0.0824, 0.141, 0.1552, 0.1681, 0.2533], [0.1231, 0.3125, 0.1412, 0.3205, 0.1897, 0.177, 0.36, 0.0989], [0.2073, 0.1346, 0.1176, 0.2453, 0.1385, 0.175, 0.1647, 0.1923, 0.2069, 0.1327, 0.08, 0.0879], [0.3293, 0.0962, 0.1912, 0.1321, 0.0769, 0.275, 0.1647, 0.2308, 0.2586, 0.1239, 0.12], [0.1341, 0.1731, 0.1471, 0.0755, 0.0462, 0.35, 0.1765, 0.1667, 0.2931, 0.1947, 0.24, 0.0879], [0.1951, 0.0769, 0.3235, 0.2453, 0.1231, 0.1875, 0.2118, 0.3077, 0.3448, 0.0619, 0.1467, 0.0769], [0.2317, 0.2692, 0.25, 0.1887, 0.2154, 0.2875, 0.0706, 0.2308, 0.3793, 0.1504, 0.1867, 0.0769], [0.122, 0.25, 0.1765, 0.2642, 0.1385, 0.225, 0.1765, 0.3462, 0.1724, 0.2832, 0.2267, 0.0659], [0.3171, 0.1346, 0.2647, 0.2075, 0.0923, 0.2625, 0.1882, 0.3333, 0.3103, 0.177, 0.2933]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

