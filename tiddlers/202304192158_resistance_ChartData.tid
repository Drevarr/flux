created: 20230419215809000
creator: Drevarr
modified: 20230705163526026
modifier: drevarr
tags: ChartData
title: 202304192158_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Sp\u00edcy Cheese", "Eibh\u00ebar", "Anita Strips", "Ryvalia Fazebringer", "Smol Daddy Tika", "Miphest\u00f6", "Ark Darkness", "Gabe Malhorn", "Sygaldry Verdandi", "Koralia Danai", "Xanvias Einzbern", "Bella Sassy", "Jupi Jupi Jupi", "Grasszanine", "Johosh The Great", "Solus Sanctus", "Arcanophage Farra", "Newtype Khan"];
const professions = ["Berserker", "Chronomancer", "Chronomancer", "Chronomancer", "Berserker", "Tempest", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 75.9686, 19.8202, 0.0, 44.0549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 44.0112, 0.0, 16.5312, 41.8043, 47.7554, 32.4556, 0.0, 0.0, 24.1354, 0.0], [6.7436, 77.3626, 20.6726, 59.8291, 35.3221, 32.7634, 22.6792, 6.9101, 0.0, 26.2366, 5.0172, 31.6728, 60.6808, 19.3536, 47.3536, 36.8676, 16.7678, 18.9331, 0.0, 12.8968, 15.6768], [0.0, 7.974, 71.6126, 16.4102, 70.8614, 25.2208, 38.7115, 30.921, 6.6835, 5.013, 26.902, 7.0815, 25.3128, 50.7581, 30.1728, 39.3627, 50.666, 32.7967, 20.7389, 9.3122, 15.6604, 19.8686], [0.0, 2.7645, 82.764, 26.711, 71.9222, 36.821, 47.0973, 38.5944, 0.0, 5.5814, 19.012, 1.8922, 41.8488, 64.2109, 27.6864, 37.8829, 53.0376, 30.8073, 25.7184, 10.4714, 14.3181, 9.815], [0.0, 118.309, 36.0528, 55.5859, 58.3272, 33.5434, 37.1165, 0.0, 6.3954, 52.3305, 0.0, 51.2616, 0.0, 27.6192, 29.818, 33.3102, 78.8371, 44.9798, 8.8196, 0.0, 25.4578], [0.0, 99.6653, 28.0963, 86.7734, 33.6277, 68.257, 42.63, 6.9667, 0.0, 21.0083, 20.988, 62.3981, 44.5536, 49.4993, 63.602, 26.0327, 49.4122, 7.2257, 16.6079, 26.6846], [30.1383, 168.8386, 27.1728, 88.2586, 58.5227, 158.4538, 13.6984, 0.0, 0.0, 29.5637, 0.0, 70.3416, 102.5657, 108.3936, 86.5683, 86.779, 40.6974], [53.6352, 177.1536, 114.9599, 171.8126, 122.7176, 0.0, 42.5393, 20.4704, 103.5408, 154.5642, 77.6832, 162.0381, 104.9972, 68.8901, 81.9706, 0.0, 55.2194, 23.6174], [0.0, 6.8714, 138.5208, 65.3213, 184.367, 107.6608, 146.1675, 90.3756, 0.0, 0.0, 66.6846, 15.3098, 100.1064, 199.5023, 53.424, 105.5837, 63.1708, 78.0982, 98.2224, 7.1967, 16.0815, 27.5366], [4.0429, 166.5734, 78.6058, 125.8109, 63.9318, 187.0242, 84.3506, 0.0, 61.5513, 7.9416, 100.8696, 109.0536, 68.0064, 144.9464, 137.3372, 67.5828, 76.1702, 7.3416, 61.0624, 21.9816], [0.0, 48.3874, 263.7994, 91.6061, 145.9661, 62.8239, 113.4041, 111.4632, 0.0, 38.6894, 0.0, 62.5824, 211.0469, 60.3456, 124.7471, 137.1216, 82.4748, 90.1238, 15.002, 41.7698, 30.6379], [11.251, 0.0, 213.6182, 60.313, 250.561, 97.4292, 157.4787, 32.4556, 0.0, 94.5372, 25.7743, 166.8864, 235.0902, 102.6816, 133.6999, 125.048, 103.3351, 71.519, 22.672, 43.3227, 66.7627], [10.7226, 7.5905, 236.6179, 73.5974, 158.0592, 91.238, 214.132, 104.8698, 0.0, 69.8216, 6.078, 142.3368, 247.8752, 88.4352, 171.1389, 117.8254, 62.865, 124.5427, 18.6535, 102.0953, 68.0237], [0.0, 0.0, 277.5643, 45.3235, 80.4086, 0.0, 200.0905, 191.3234, 125.7974, 66.4469, 0.0, 142.9728, 253.409, 78.7584, 295.4421, 160.8376, 38.2533, 61.177, 0.0, 78.1704, 23.2766], [1.8752, 7.5266, 200.376, 62.977, 183.0941, 141.3537, 203.6009, 125.5027, 0.0, 84.3182, 7.9416, 96.036, 280.7916, 103.5552, 211.0935, 159.2206, 73.2668, 73.7626, 7.4092, 46.6127, 75.2827], [11.0334, 36.6421, 198.4594, 91.2864, 291.9322, 141.8751, 215.7896, 133.7445, 0.0, 8.7856, 48.7658, 21.1585, 166.2504, 233.5637, 119.28, 159.8184, 160.7298, 81.9633, 104.953, 12.7126, 79.5917, 60.1853], [0.0, 242.7163, 168.6134, 121.1434, 142.8526, 260.7417, 146.1925, 0.0, 0.0, 142.1147, 81.1648, 326.5224, 116.6864, 77.6832, 273.541, 58.3198, 185.3552, 108.9475, 0.0, 0.0, 78.384], [0.0, 140.2632, 120.7325, 185.0035, 254.3585, 364.9799, 194.677, 0.0, 15.1939, 242.0228, 25.803, 229.8504, 297.1067, 78.96, 203.6205, 228.2126, 134.7108, 146.759, 20.0155, 59.7464, 53.6078]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

