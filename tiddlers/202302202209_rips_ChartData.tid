created: 20230220220953000
creator: Drevarr
modified: 20230705163519763
modifier: drevarr
tags: ChartData
title: 202302202209_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Daring Deathblade", "Etchery Howls", "Rozaalyna", "Dark Sidiuz", "Black Raspberry Pie", "Smol Gluvs", "Newtype Khan", "Rina Of Theros", "Primal Clone", "Arka\u00f1", "Be\u00eb", "Eibh\u00ebar"];
const professions = ["Scourge", "Druid", "Scourge", "Scourge", "Chronomancer", "Scourge", "Spellbreaker", "Scourge", "Chronomancer", "Chronomancer", "Scourge", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.02, 0.1494, 0.0513, 0.0556, 0.2564, 0.0625, 0.0127, 0.0226, 0.0444, 0.2231, 0.0126, 0.0189, 0.3871, 0.1982], [0.0, 0.0556, 0.0609, 0.0185, 0.0, 0.0, 0.0206, 0.0138, 0.0098, 0.0114, 0.0398, 0.0444], [0.0541, 0.078, 0.0, 0.0172, 0.0189, 0.0, 0.0206, 0.0276, 0.2647], [0.0, 0.0322, 0.1062, 0.0345, 0.0, 0.0, 0.0, 0.0412, 0.0, 0.0588, 0.0341, 0.0398, 0.0222, 0.0, 0.0, 0.0, 0.0, 0.2564, 0.0, 0.1139, 0.0, 0.0, 0.1157, 0.0063, 0.0, 0.0], [0.1203, 0.1111, 0.2931, 0.0377, 0.1724, 0.0, 0.0928, 0.0483, 0.0686, 0.1023, 0.125, 0.0222, 0.04, 0.046, 0.0256, 0.1481, 0.1795, 0.0, 0.1139, 0.0679, 0.0556, 0.2149, 0.0126, 0.1132, 0.0645, 0.5225], [0.0615, 0.0278, 0.075, 0.1111, 0.3793, 0.0189, 0.0575, 0.0286, 0.0515, 0.0, 0.4804, 0.1023, 0.0511, 0.0444, 0.02, 0.2299, 0.641, 0.0556, 0.7692, 0.0625, 0.0, 0.0181, 0.0333, 0.2727, 0.0063, 0.0189, 0.0645, 0.4685], [0.0615, 0.0497, 0.1292, 0.0, 0.2759, 0.2453, 0.069, 0.0286, 0.1443, 0.0483, 0.0784, 0.0341, 0.1193, 0.0444, 0.1, 0.2414, 0.1795, 0.2037, 0.0513, 0.0208, 0.0506, 0.0633, 0.0444, 0.2231, 0.0, 0.0943, 0.2581, 0.3874], [0.0462, 0.057, 0.1403, 0.4444, 0.1379, 0.1132, 0.1609, 0.0857, 0.2887, 0.069, 0.3431, 0.0909, 0.0795, 0.1333, 0.14, 0.1724, 0.6923, 0.0741, 0.6154, 0.0417, 0.0633, 0.0679, 0.0333, 0.0579, 0.0314, 0.0189, 0.2258, 0.4865], [0.0614, 0.1834, 0.0, 0.3621, 0.0755, 0.1034, 0.0286, 0.3918, 0.0414, 0.2647, 0.2273, 0.0966, 0.0444, 0.0, 0.2759, 0.1481, 0.1538, 0.0521, 0.038, 0.0226, 0.1667, 0.2727, 0.0, 0.0566, 0.4194, 0.4775], [0.0, 0.0658, 0.2353, 0.037, 0.2931, 0.0189, 0.0805, 0.2, 0.3711, 0.0345, 0.3137, 0.2159, 0.1193, 0.0889, 0.2, 0.0805, 0.0185, 0.5641, 0.125, 0.0, 0.0226, 0.2222, 0.2066, 0.0063, 0.0755, 0.3871, 0.5045], [0.0746, 0.2524, 0.0926, 0.3103, 0.1132, 0.069, 0.0, 0.4124, 0.0828, 0.4314, 0.1023, 0.1307, 0.3556, 0.04, 0.3793, 0.2308, 0.1111, 0.0769, 0.1042, 0.0759, 0.1312, 0.1222, 0.281, 0.0, 0.2642, 0.5161, 0.6216], [0.0462, 0.1023, 0.2739, 0.3889, 0.1207, 0.283, 0.2989, 0.0286, 0.2371, 0.131, 0.4118, 0.2841, 0.142, 0.0889, 0.4, 0.4023, 0.5385, 0.2778, 0.3333, 0.1146, 0.0506, 0.1041, 0.1444, 0.3802, 0.0189, 0.3019, 0.7742, 0.4595]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

