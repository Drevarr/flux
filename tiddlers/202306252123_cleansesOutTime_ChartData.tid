created: 20230625212343000
creator: Drevarr
modified: 20230705163535660
modifier: drevarr
tags: ChartData
title: 202306252123_cleansesOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Zayde Sunsabre", "Elzy Lou", "Palm Sauce", "Sygaldry Verdandi", "Yummy Kiwi", "Newtype Khan", "Aronorf Xideliesi", "Enter Effore", "Grasszanine", "Ildemir Fares", "Crusader Siolith", "Miphest\u00f6", "Eibh\u00ebar", "Black Raspberry Pie", "Morton Saltbringer", "Rahani Sunray", "Primal Clone", "Seiker Novus Terra", "Fribble Bibble", "Venomina The Siren", "Tegan Parker", "Artakama Nahid", "Drevarr Moonwillow", "Sakis Ranger"];
const professions = ["Chronomancer", "Spellbreaker", "Spellbreaker", "Vindicator", "Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Spellbreaker", "Tempest", "Firebrand", "Tempest", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Scrapper", "Tempest", "Tempest", "Tempest", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Conditions Cleansed per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.0, 4.9908, 15.09, 16.0857, 31.2233, 0.0, 31.7917, 14.3582, 0.0, 30.6849, 0.0, 15.7273, 0.0, 27.5921, 0.0, 16.0632, 0.0, 0.0, 30.0204, 0.0, 32.2, 0.0, 24.3438, 0.0, 15.9932], [7.0103, 19.007, 4.9908, 7.05, 4.0143, 1.0, 0.0, 39.0, 6.9701, 1.9655, 8.9589, 2.9889, 19.1429, 19.9583, 13.0263, 20.9568, 0.0, 4.9143, 6.9691, 0.9898, 11.969, 1.0, 6.9759, 15.975, 23.434, 13.0068], [0.0, 13.9965, 10.9908, 39.05, 0.0, 0.0, 43.2909, 30.9583, 36.0597, 0.0, 8.9589, 0.0, 0.0, 24.0417, 22.0395, 25.9856, 14.0421, 2.9429, 12.9588, 31.9286, 0.0, 15.0476, 23.9639], [0.0, 26.014, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9851, 0.0, 0.9863, 0.0, 9.039, 0.0, 0.0, 4.9856, 10.4211, 0.0, 0.0, 0.0, 7.093, 41.1905, 24.9518, 60.0625, 23.6415, 59.5646], [1.0, 11.9965, 1.9908, 14.07, 10.2143, 34.932, 19.9455, 27.2014, 8.9701, 0.0, 14.8493, 1.9889, 12.0649, 4.9792, 12.0263, 7.9784, 14.0632, 0.0, 18.0, 18.0, 6.9767, 5.0095, 19.9759, 38.5812, 22.7358, 16.9796], [0.0, 8.014, 4.9908, 25.02, 16.2429, 21.3398, 34.5455, 30.125, 4.9701, 11.9589, 0.0, 20.7013, 3.9896, 26.1184, 16.0, 14.0421, 0.0, 8.9691, 26.1429, 2.9922, 16.0476, 18.0241, 39.2375, 20.9434, 20.0544], [0.0, 2.007, 0.0, 27.24, 25.2714, 34.3398, 10.0364, 38.8542, 15.9403, 0.0, 16.9315, 0.0, 22.1169, 20.9792, 20.0395, 39.0288, 19.0842, 0.0, 7.9691, 20.0204, 7.9767, 35.9333, 19.0241, 53.175, 0.0, 18.0204], [1.0, 12.9965, 17.0092, 27.88, 34.9429, 39.0194, 26.3818, 37.2708, 15.0, 24.4247, 10.0111, 9.0519, 16.2083, 21.5658, 19.0288, 20.4105, 0.0, 20.2268, 28.9184, 2.9922, 22.6476, 25.6386, 39.8937, 23.4528, 28.2993], [34.2055, 16.9556, 41.8312, 21.0833, 36.6053, 32.4173, 32.1684, 0.0, 34.0103, 18.1122, 26.9302, 48.4476, 47.0843, 54.4625, 53.9623, 62.0], [3.0, 15.9965, 2.9908, 28.02, 29.2571, 60.6214, 27.6, 42.9792, 23.9851, 1.9655, 31.1644, 0.0, 13.1039, 11.9688, 12.0132, 18.964, 31.1158, 0.0, 21.0, 56.0204, 10.031, 5.0095, 23.0241, 75.6188, 0.0, 35.932], [89.1566, 219.7188, 108.7358, 143.6395], [0.0, 9.9965, 19.0275, 23.94, 24.7571, 39.3786, 0.0, 41.3611, 28.597, 0.0, 19.9178, 19.0222, 16.8961, 17.9896, 38.0658, 21.9568, 28.1684, 0.0, 22.9485, 46.2347, 14.9612, 15.0476, 35.6988, 90.325, 49.3396, 44.6531], [10.0256, 63.7238, 21.0092, 0.0, 34.4364, 77.6042, 39.0597, 43.3973, 0.0, 31.7273, 49.5312, 42.4868, 63.0576, 39.6632, 8.4571, 56.5876, 44.3878, 13.9612, 54.3619], [64.1045, 66.4521, 38.1444, 47.6104, 58.6042, 96.3947, 34.0863, 60.7895, 0.9714, 69.433, 73.1531, 32.2636, 50.7048, 49.2651, 99.4813, 64.0566, 70.5782], [87.4951, 8.0364, 101.9375, 47.6567, 0.0, 45.5753, 22.1778, 37.6234, 43.6667, 57.4211, 70.0432, 54.3684, 0.0, 31.2371, 56.949, 23.938, 55.3333, 42.9157, 63.0562, 26.8868, 51.3061], [8.0103, 23.2867, 39.055, 50.7, 62.6, 88.4369, 34.1091, 103.9167, 18.9851, 0.0, 67.274, 15.2597, 0.0, 67.6316, 39.036, 40.4526, 0.0, 24.1031, 64.3469, 14.9612, 49.5905, 18.3012, 102.1625, 25.9245, 42.6259], [0.0, 17.0979, 27.0642, 82.84, 92.0571, 97.0291, 57.2364, 97.7917, 29.791, 75.8356, 20.3222, 16.8312, 30.0, 65.2895, 49.9496, 58.8947, 3.9429, 45.5464, 38.3776, 13.0078, 54.4667, 29.0361, 47.6187, 36.4906, 42.551], [19.041, 33.007, 29.0917, 67.45, 58.2286, 104.3689, 41.5636, 94.5347, 70.597, 0.0, 64.2329, 31.1667, 24.3247, 44.5312, 61.1447, 49.2878, 72.6105, 14.4286, 43.6289, 60.2245, 43.1938, 49.1905, 55.4458, 108.5125, 77.8302, 48.102], [32.1231, 84.3811, 78.1101, 83.22, 104.8429, 61.3689, 61.5273, 137.9792, 89.0149, 118.7397, 33.9889, 46.1558, 85.0625, 131.8421, 106.036, 113.2421, 11.8571, 145.3711, 115.8776], [42.6564, 102.7727, 58.2936, 75.01, 89.8286, 132.7573, 55.6364, 18.2708, 76.1493, 0.0, 65.3288, 29.9333, 28.2857, 41.9896, 78.7632, 139.1942, 92.0316, 10.1714, 66.5155, 92.9082, 51.124, 73.7524, 90.3373, 45.6125, 65.4717, 120.1293], [7.0103, 61.5175, 65.2844, 89.9, 100.0286, 133.7864, 85.2, 149.7222, 78.4925, 114.9315, 32.2111, 29.2338, 72.8646, 89.0526, 109.777, 95.6316, 5.9143, 86.9278, 80.4388, 39.0, 100.9714, 87.1325, 183.5625, 67.9623, 120.449], [40.6154, 132.1538, 88.7064, 67.78, 59.4571, 73.0485, 63.3818, 92.5347, 84.3134, 55.2603, 5.0222, 55.1818, 77.8021, 111.0395, 125.3165, 127.8632, 10.9714, 102.567, 132.3163, 87.814, 112.7619, 69.1687, 170.5125, 29.5094, 136.2449], [55.8821, 140.3007, 65.9633, 138.7, 87.5429, 158.4466, 76.0182, 160.0556, 91.3582, 2.1724, 101.2055, 59.8333, 35.7922, 110.2292, 138.5658, 129.7194, 101.9895, 8.2857, 96.2165, 158.2449, 77.6434, 87.781, 81.2169, 176.725, 83.5283, 150.932], [38.5128, 158.8741, 78.6606, 120.55, 92.6857, 141.0485, 85.1818, 147.1806, 97.8806, 18.4138, 139.4247, 30.1444, 77.2597, 89.6667, 130.0395, 131.2302, 121.7474, 4.5714, 107.6392, 119.0, 84.8915, 96.8952, 99.1928, 209.4812, 82.8302, 133.517], [19.0308, 120.8881, 74.6606, 143.15, 120.3, 181.301, 99.8727, 177.75, 96.9701, 0.0, 155.2466, 32.3667, 94.4805, 109.5417, 100.7632, 128.2014, 166.3368, 0.0, 132.0412, 171.3061, 71.155, 48.2571, 96.0482, 174.5062, 99.3962, 138.0816]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

