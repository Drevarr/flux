created: 20230403221011000
creator: Drevarr
modified: 20230705163524389
modifier: drevarr
tags: ChartData
title: 202304032210_stability_ChartData
type: text/vnd.tiddlywiki


const names = ["Jeckyll Mbs", "Lagertha Scorned", "Legacy Of Mathus", "Blancooo Padreee", "Xanvias Tlesel", "Mistwalker Caelon", "Ryvalia Fazebringer", "Viral Marketing", "Zaylen Harker", "Sygaldry Verdandi", "Solus Sanctus", "Xyntharos", "Bella Sassy", "Johosh The Great", "Koralia Danai"];
const professions = ["Berserker", "Scrapper", "Spellbreaker", "Spellbreaker", "Berserker", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Vindicator", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Stability per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[5.3438, 4.104, 1.9219, 2.6422, 1.3541, 0.0, 2.5267, 2.0469, 2.0084, 0.989, 0.0, 0.0, 3.478, 0.1302, 1.8705, 0.6458, 0.0, 0.0], [5.3865, 2.002, 2.6422, 2.5147, 2.1506, 5.5272, 4.0937, 1.0585, 1.3846, 0.0, 1.5287, 6.6082, 0.0, 0.0249], [6.8706, 8.208, 0.9209, 7.101, 0.0, 0.0, 3.7901, 2.3617, 0.7056, 2.2154, 0.0, 0.0, 5.0431, 0.0, 1.2221], [5.1911, 11.799, 0.7207, 3.4679, 7.3507, 0.0, 0.0, 2.6766, 1.357, 1.7011, 0.0, 0.0, 6.0865, 0.0, 1.4465, 0.0, 0.0, 1.9457], [5.0384, 11.5425, 1.2412, 3.6331, 1.5475, 2.2638, 6.7906, 5.9831, 1.1942, 1.0286, 0.0, 0.0, 5.217, 0.0, 0.7482, 0.0, 0.0, 0.0], [9.0081, 19.2375, 1.9219, 4.9542, 2.5147, 0.7923, 0.6317, 6.9278, 2.0626, 2.5714, 0.0, 0.0, 4.3475, 0.0, 1.2969, 1.2731, 0.0, 0.0], [7.176, 31.293, 2.042, 15.8534, 2.3213, 2.9429, 0.0, 6.6129, 4.7766, 1.1077, 0.0, 10.434, 0.0, 2.5688, 0.0, 0.0, 0.0], [13.1305, 32.832, 7.3674, 20.4774, 4.0622, 6.6782, 5.5272, 5.8257, 6.0251], [24.1234, 40.7835, 7.8879, 21.4682, 15.8621, 2.7166, 16.0599, 6.2422, 6.5274, 2.3803, 21.9114, 7.3822, 3.4133, 0.0, 3.601], [17.8636, 38.7315, 4.5245, 25.1013, 9.8654, 10.6399, 19.8979, 16.2173, 8.0063, 4.6681, 0.0, 22.2592, 6.7089, 2.3062, 0.0, 4.385], [30.536, 47.9655, 8.6887, 20.8076, 15.4752, 2.4902, 12.9494, 11.8088, 7.6535, 5.934, 0.0, 0.0, 19.8246, 0.0, 5.6614, 4.3726, 0.2797, 1.452], [20.3064, 35.397, 3.2833, 18.3305, 20.6981, 13.13, 17.687, 30.5453, 0.0, 6.4878, 5.9257, 5.3352, 17.39, 0.0, 0.0, 0.6273, 0.0, 2.5265], [25.4976, 47.4525, 4.6847, 28.0738, 19.1506, 14.9411, 31.584, 25.192, 5.6723, 4.3516, 0.1398, 24.346, 3.6586, 6.9084, 6.4021, 3.8228, 7.7246], [33.5896, 48.735, 5.8859, 28.0738, 20.5046, 12.4509, 30.0048, 22.3579, 4.2881, 4.0351, 0.0, 29.9108, 2.3917, 6.9084, 6.0147, 5.3768, 4.4722], [25.1922, 49.761, 5.8859, 31.872, 20.8915, 10.0739, 36.3216, 33.6943, 5.808, 9.4548, 29.2152, 0.0, 5.9108, 9.6125, 0.0, 6.6211]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

