created: 20230315220824000
creator: Drevarr
modified: 20230705163522138
modifier: drevarr
tags: ChartData
title: 202303152208_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Ryvalia Fazebringer", "Tegan Parker", "Fribble Bibble", "Drevarr Moonwillow", "Raziel Umbra", "Primal Clone", "Eibh\u00ebar", "Zadie Miststep", "Mike The Archmagus", "Black Raspberry Pie", "Mac Chiato"];
const professions = ["Chronomancer", "Tempest", "Scrapper", "Scrapper", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[19.0512, 9.3551, 51.9998, 0.0, 15.7291, 0.0, 0.0, 99.9041, 0.0, 56.1168, 94.8248, 0.0, 35.7803, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 35.6976, 0.0, 0.0, 0.0], [0.0, 168.832, 0.0, 42.0368, 42.483, 0.0, 0.0, 0.0, 100.6445, 48.0053, 44.2439, 167.9616], [47.5486, 60.0466, 34.7567, 2.709, 33.0739, 0.0, 21.4771, 103.2107, 0.0, 35.64, 59.9883, 10.8796, 52.8313, 25.8034, 4.7075, 3.3653, 53.4398, 15.5136, 27.3326, 23.6636, 94.1674], [68.5049, 45.9777, 38.5434, 0.0, 40.4395, 0.0, 0.0, 88.6856, 15.4791, 46.9152, 98.4386, 2.2842, 34.1692, 16.7812, 16.0778, 24.7568, 0.0, 42.9134, 0.0, 56.5277, 27.013, 0.0, 16.1097, 51.7882], [80.2929, 235.835, 0.0, 0.0, 141.8472, 0.0, 0.0, 209.7278, 0.0, 230.6232, 279.5597, 0.0, 116.9405, 0.0, 68.0728, 0.0, 33.6355, 58.5154, 118.8677, 0.0, 33.2215, 178.4592], [105.7342, 114.5091, 157.0136, 39.4632, 86.1538, 24.4099, 0.0, 295.3431, 31.5657, 173.34, 215.6686, 3.5363, 73.7759, 0.0, 0.0, 36.752, 32.0712, 0.0, 28.3631, 62.0544, 112.1011, 0.0, 93.421, 128.1485], [64.6153, 155.1928, 215.1668, 0.0, 94.4698, 16.0477, 0.0, 235.4715, 0.0, 211.896, 334.3442, 34.06, 176.4848, 0.0, 33.855, 33.22, 0.0, 34.3454, 0.0, 128.4235, 123.503, 0.0, 32.9902, 165.1622], [142.0902, 222.7089, 197.4504, 113.2402, 0.0, 42.785, 281.1723, 43.9709, 90.3312, 259.9009, 46.8853, 146.9476, 40.3933, 73.8765, 91.0302, 0.0, 44.627, 25.3044, 123.2846, 220.739, 265.0781, 298.0541], [114.4263, 257.446, 273.0496, 31.3866, 171.2146, 0.0, 0.0, 448.742, 43.4119, 159.9912, 344.7517, 44.7534, 187.0913, 0.0, 37.1939, 39.3842, 117.9446, 156.0571, 159.2006, 168.1886, 206.064], [123.2374, 353.3174, 232.2747, 33.2892, 97.6536, 6.9034, 32.8248, 403.9859, 29.6581, 205.1568, 357.6167, 33.6031, 192.2603, 33.853, 50.0982, 76.2695, 4.4804, 31.261, 139.0891, 135.7574, 8.7898, 165.9532, 257.0746], [156.9343, 295.0114, 176.7587, 54.0792, 143.1778, 41.1043, 40.9238, 356.3956, 53.5208, 207.36, 448.9723, 86.8334, 217.0313, 52.8367, 75.3654, 129.3482, 0.414, 100.0742, 35.7275, 201.7253, 188.9842, 52.295, 302.3078, 252.1757]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

