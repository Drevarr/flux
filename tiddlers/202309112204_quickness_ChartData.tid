created: 20230911220439000
creator: Drevarr
tags: ChartData
title: 202309112204_quickness_ChartData
type: text/vnd.tiddlywiki


const names = ["Darks Na", "Belvyn Brightblade", "Arcanophage Farra", "Crusader Siolith", "Sub Train", "Sygaldry Verdandi", "Bella Sassy", "Solus Luxes", "Koralia Danai"];
const professions = ["Firebrand", "Firebrand", "Spellbreaker", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
const short_Prof = {"Guardian": "Gdn", "Dragonhunter": "Dgh",	"Firebrand": "Fbd",	"Willbender": "Wbd", "Warrior": "War", "Berserker": "Brs", "Spellbreaker": "Spb", "Bladesworn": "Bds", "Engineer": "Eng", "Scrapper": "Scr", "Holosmith": "Hls", "Mechanist": "Mec", "Ranger": "Rgr", "Druid": "Dru", "Soulbeast": "Slb", "Untamed": "Unt", "Thief": "Thf", "Daredevil": "Dar", "Deadeye": "Ded", "Specter": "Spe", "Elementalist": "Ele", "Tempest": "Tmp", "Weaver": "Wea", "Catalyst": "Cat", "Mesmer": "Mes", "Chronomancer": "Chr", "Mirage": "Mir", "Virtuoso": "Vir", "Necromancer": "Nec", "Reaper": "Rea", "Scourge": "Scg", "Harbinger": "Har", "Revenant": "Rev", "Herald": "Her", "Renegade": "Ren", "Vindicator": "Vin", "Unknown": "Ukn"};
option = {
  title: [
    {text: 'Quickness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8.5795, 58.414, 17.4038, 34.2426, 7.9391, 227.1399, 116.3245], [0.0, 99.2876, 31.213, 35.5072, 16.9409, 98.6622, 143.0894, 29.472, 39.766, 158.3712, 41.0172, 20.7515, 79.9733], [19.1894, 89.7934, 37.2873, 79.8182, 15.8631, 286.6625, 108.8244, 29.592, 22.5144, 91.9526, 9.2249, 47.3242, 51.3471, 91.023, 94.5922, 121.9729, 2.9925, 14.5761, 24.507, 15.912, 91.7249, 3.0161, 60.7266, 28.413, 0.0, 29.6946, 0.0, 18.3365, 37.6992], [11.8886, 75.7397, 70.525, 48.2509, 13.3432, 270.7247, 183.3838, 87.192, 40.7808, 168.4051, 24.9455, 68.416, 128.3138, 110.7878, 81.3533, 30.5463, 25.1905, 30.8826, 43.5795, 89.1219, 27.2297, 61.6897, 59.2323, 56.5578, 74.0512, 34.5891, 32.7298], [1.8483, 135.9587, 163.9719, 35.904, 74.8828, 124.0762, 11.954, 9.8637, 74.8836, 171.2042, 179.4434, 195.168, 21.735, 22.1413, 22.4154, 112.4295, 148.7178, 19.4134, 65.6942, 80.0992, 0.0, 70.2, 95.6319, 39.2847, 89.707], [11.8627, 39.8545, 21.9537, 41.5872, 7.924, 103.6495, 180.1485, 79.68, 86.5412, 125.6486, 35.2078, 0.0, 47.9446, 192.4707, 155.4433, 191.0605, 24.815, 44.4213, 42.8778, 90.2955, 116.4334, 18.0115, 36.0913, 60.676, 23.7677, 77.454, 131.4694, 53.2714, 99.7315], [25.3757, 149.5483, 66.4755, 129.2851, 38.9519, 204.3717, 111.1283, 55.464, 51.1412, 170.8762, 25.4243, 24.1202, 74.4618, 121.9398, 142.0056, 179.9357, 7.9625, 38.2652, 17.2998, 86.9805, 89.2773, 82.4537, 104.8776, 47.2203, 0.0, 30.2094, 96.2178, 27.9734, 51.2152], [9.9706, 50.1534, 20.111, 43.8246, 19.8099, 231.1514, 190.3447, 54.72, 32.4736, 180.5357, 63.84, 15.9813, 85.541, 168.9405, 165.6536, 185.2984, 29.0587, 28.5863, 61.8282, 96.951, 143.1623, 45.4536, 94.9931, 73.7275, 15.8112, 90.8154, 109.8237, 54.9822, 85.7014], [10.9814, 166.9813, 52.143, 119.0707, 9.8974, 328.2958, 152.3051, 72.744, 95.7688, 193.6397, 31.5529, 49.7767, 70.075, 211.7118, 154.1524, 196.7655, 23.0738, 42.0074, 42.1722, 133.6455, 96.4646, 37.9346, 85.7168, 53.6883, 15.6969, 79.677, 93.1906, 43.9803, 95.2547]]
    },
	{
	  transform: {
		type: 'boxplot',
		config: {
		  itemNameFormatter: function (params) {
			return names[params.value]+" ("+short_Prof[professions[params.value]]+")";
		  }
		}
	  },
	},
	{
	  fromDatasetIndex: 1,
	  fromTransformResult: 1
	}
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '25%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
	{
	  name: 'boxplot',
	  type: 'boxplot',
	  datasetIndex: 1,
	  tooltip: {trigger: 'item',
		  formatter: function (params) {
			//console.log(params.value);
		  return `<u><b>${params.value[0]}</b></u>
	<table>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Low   :</td>
		<td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q1    :</td>
		<td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q2    :</td>
		<td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">Q3    :</td>
		<td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
	  </tr>
	  <tr>
	  	<td align="right">&#x2022;</td>
		<td align="left">High  :</td>
		<td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
	  </tr>  
	</table>`;              
		},    
		axisPointer: {type: 'shadow'}},      
	  itemStyle: {
		borderColor: function (seriesIndex) {
		  let myIndex = names.indexOf(seriesIndex.name.split(" (")[0]);
		  return ProfessionColor[professions[myIndex]];
				},
		borderWidth: 2
	  },
	  encode:{tooltip: [ 1, 2, 3, 4, 5]},
	  },
	{
	  name: 'outlier',
	  type: 'scatter',
	  encode: { x: 1, y: 0 },
	  datasetIndex: 2,
	}
  ]
};

