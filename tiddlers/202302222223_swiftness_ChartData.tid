created: 20230222222328000
creator: Drevarr
modified: 20230705163520044
modifier: drevarr
tags: ChartData
title: 202302222223_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Mac Aaroni", "Venomina The Siren", "Zadie Miststep", "Mustache Bloodclaw", "Ryvalia Fazebringer", "Kosair", "Black Raspberry Pie", "Cat Wigglebooty", "Veron Blackburn", "Ark Darkness", "Tribal S", "Dark Sidiuz", "Kosair", "Sygaldry Verdandi", "Kiloak", "Mike The Archmagus", "Arcanophage Farra", "Blanco Padre Guard", "Fribble Bibble", "Etchery", "Drevarr Moonwillow", "Zaylen Harker", "Koralia Danai", "Ravioli Fetabringer", "Bella Sassy"];
const professions = ["Tempest", "Tempest", "Tempest", "Herald", "Chronomancer", "Firebrand", "Chronomancer", "Scrapper", "Herald", "Firebrand", "Druid", "Scourge", "Dragonhunter", "Firebrand", "Firebrand", "Tempest", "Spellbreaker", "Firebrand", "Scrapper", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[30.4937, 36.0962, 1595.659, 0.0, 49.9488, 17.8055, 54.6166, 68.0791, 38.3252, 166.3033, 134.2956, 309.3301, 84.0487], [1634.5775, 29.5428, 57.8771, 59.0657, 65.9395, 50.1656, 49.788, 257.192, 96.1356, 249.0316, 74.7633], [85.5288, 53.1788, 896.979, 50.8528, 33.8145, 129.4298, 251.4361, 87.78, 100.2707, 352.3495, 264.5692, 345.7972, 88.5825], [1484.4632, 155.1627, 197.9319, 462.9438, 360.1697, 150.3413, 65.8823, 48.7349], [0.0, 0.0, 2216.5019, 0.0, 0.0, 56.5629, 0.0, 0.0, 0.0, 494.9968, 18.05, 203.7676, 0.0], [118.5865, 46.524, 81.5998, 77.2224, 193.8586, 55.5602, 153.6442, 108.2986, 706.8333, 454.3881, 709.508, 308.0334], [4.7984, 56.2388, 1908.8604, 63.9861, 322.566, 62.9987, 74.2097, 158.4626, 31.6868, 329.0492, 30.9007, 146.6679, 43.7681], [62.654, 60.5762, 2852.171, 0.0, 0.0, 111.5527, 105.8474, 0.0, 0.9263, 115.0783, 16.6766, 97.2455, 0.0], [3502.6661], [481.8482, 49.1167, 170.4601, 391.6501, 0.0, 209.0945, 140.6029, 897.504, 342.8511, 626.1776, 246.8713], [33.131, 49.9108, 2570.4751, 76.5593, 0.0, 127.7851, 187.0507, 0.0, 24.6624, 136.5999, 178.0471, 319.7265, 2.6156], [0.0, 2842.9046, 0.0, 22.1923, 186.7577, 89.0726, 720.864, 85.8361], [4481.1887], [32.49, 7.7391, 3763.9761, 39.3997, 146.7542, 100.2544, 56.9478, 64.543, 226.9021, 338.6539, 73.4751, 501.262, 0.0], [3230.2365, 115.875, 110.4819, 280.598, 268.365, 262.0967, 106.2144, 848.0577, 168.7279, 223.6006, 230.3057], [70.8772, 42.2459, 4284.7429, 132.9566, 83.2479, 137.0811, 123.8309, 27.5891, 88.1132, 394.5034, 310.1846, 724.5427, 72.6272], [51.3722, 74.0789, 4344.0473, 71.8828, 65.6866, 138.2253, 75.4863, 34.4281, 119.8, 644.9365, 315.4819, 623.1387, 191.7253], [27.3802, 109.1947, 5252.1459, 78.1834, 128.3208, 232.9736, 249.3269, 91.1995, 0.0, 441.8153, 405.045, 120.2773, 130.2145], [149.2817, 26.0398, 5252.1459, 57.4055, 15.8568, 180.0575, 321.2054, 39.0911, 55.6545, 375.8276, 307.4379, 447.681, 89.1492], [229.2612, 171.8803, 7238.8432], [5678.3962, 48.6126, 87.3311, 345.9564, 227.7911, 104.4112, 165.6127, 508.3366, 401.6116, 754.612, 92.9854], [66.0422, 60.5317, 7435.2891, 79.6802, 296.4728, 134.4878, 158.2295, 102.6637, 903.9071, 466.7484, 748.6941, 158.6376], [61.2071, 51.7082, 7737.3709, 232.8421, 403.6733, 493.1202, 377.0986, 52.8856, 39.2901, 662.7229, 248.4812, 549.7248, 34.5698], [37.9294, 85.6802, 9596.1931, 445.0183, 314.8755, 462.3002, 378.2642, 106.3541, 144.887, 683.7109, 539.1444, 919.8333, 0.0], [212.7598, 112.8192, 13052.5276, 68.3825, 336.4406, 574.0674, 622.1516, 312.8451, 146.1992, 1097.0679, 714.0524, 1185.3391, 326.2991]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

