created: 20230410221909000
creator: Drevarr
modified: 20230705163525117
modifier: drevarr
tags: ChartData
title: 202304102219_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Venomina The Siren", "Mistwalker Caelon", "Sygaldry Verdandi", "Kmpek", "Lord Erin The Wise", "Sub Train", "Jeckyll Mbs", "Sofya De Nova", "Tegan Parker", "Johosh The Great", "Xyntharos", "Black Raspberry Pie", "Belvyn Brightblade", "Koralia Danai", "Zadie Miststep", "Mac Chiato", "Sassy Daddy Demon", "Sumatra Satyricon", "Smol Daddy Tika", "Xanvias Einzbern", "Asorlia", "Zaylen Harker", "Ak\u00e1nt\u00f3r", "Inedible Plant", "Fribble Bibble", "Gavann", "Blancooo Padreee", "Mike The Archmagus", "Tribal S", "Ryvalia Fazebringer", "Solus Sanctus", "Fecund Algorithm", "Sp\u00edcy Cheese", "Bella Sassy", "Eibh\u00ebar", "High Sorcer Baradun", "Ark Darkness", "Arriasa", "Newtype Khan", "Drevarr Moonwillow", "Tootsie Pop Rocks", "Smol Gluvs", "Arcanophage Farra", "Grasszanine", "Rozaalyna", "Nazhul Naxxremis", "Rina Of Theros", "Be\u00eb", "Skye Nightroad", "Elonith Requiem"];
const professions = ["Tempest", "Vindicator", "Firebrand", "Vindicator", "Weaver", "Firebrand", "Berserker", "Weaver", "Tempest", "Firebrand", "Vindicator", "Chronomancer", "Firebrand", "Firebrand", "Tempest", "Tempest", "Vindicator", "Soulbeast", "Berserker", "Berserker", "Chronomancer", "Firebrand", "Druid", "Vindicator", "Scrapper", "Firebrand", "Berserker", "Weaver", "Druid", "Chronomancer", "Firebrand", "Mechanist", "Berserker", "Firebrand", "Chronomancer", "Tempest", "Firebrand", "Druid", "Spellbreaker", "Scrapper", "Scrapper", "Scourge", "Spellbreaker", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Scourge", "Scrapper", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[4811, 0, 0, 0, 0, 379, 6316, 96, 6605, 3713, 0, 0, 6884, 314, 7309, 0, 0, 269], [1596, 0, 0, 573, 17897, 0, 159, 154, 2847, 212, 4544, 0, 0, 0, 0, 0, 0, 0, 3682, 5420, 0, 587], [0, 2996, 622, 14358, 0, 0, 2528, 269, 269, 2588, 1588, 571, 0, 6520, 0, 5933, 269, 602, 602], [269, 0, 1209, 4904, 0, 7103, 2416, 3146, 5909, 3711, 1211, 5603, 0, 1248, 0, 0, 3744], [7865, 0, 0, 9986, 18371, 140, 0, 269, 1248, 0, 1514, 269, 0, 0, 1248, 0, 0, 0, 0, 434], [0, 1235, 409, 4025, 0, 221, 201, 2475, 2538, 1745, 0, 8168, 2484, 10298, 3113, 3729, 3388], [1233, 0, 225, 2963, 4860, 2463, 1274, 977, 0, 206, 0, 269, 1248, 6664, 2492, 0, 1248, 0, 9448, 2496, 6575], [6313, 23134, 269, 269, 0, 746, 0, 0, 0, 821, 3082, 0, 468, 0, 573, 4475, 565, 4002], [0, 0, 12206, 13004, 0, 0, 0, 0, 0, 0, 0, 0, 213, 3341, 834, 7800, 1084, 602, 3582, 0, 2980], [582, 0, 662, 4719, 15463, 1412, 0, 0, 0, 2, 1265, 955, 0, 1075, 5, 0, 4143, 0, 5864, 6084, 0, 3437], [0, 0, 0, 4055, 22751, 0, 5525, 0, 3437, 0, 0, 0, 0, 0, 3437, 0, 0, 0, 4062, 0, 5403, 0], [0, 630, 1444, 8171, 15115, 308, 3249, 0, 1, 911, 269, 710, 3402, 1304, 3427, 0, 0, 0, 3706, 1246, 0, 4961], [0, 0, 0, 13558, 35442], [4364, 0, 2263, 9907, 15823, 0, 269, 0, 0, 0, 0, 0, 699, 0, 3460, 0, 5678, 0, 2519, 5413, 0, 2], [1288, 0, 0, 3585, 22644, 0, 0, 3232, 5874, 68, 271, 0, 0, 0, 3437, 7588, 0, 0, 0, 0, 2460], [0, 0, 0, 20185, 0, 3437, 0, 295, 564, 678, 0, 1248, 6172, 3708, 4997, 1995, 0, 0, 960, 217, 6076], [0, 345, 9295, 28125, 1248, 3437, 0, 1247, 269, 0, 6060, 1957, 0, 0, 0, 1248, 1644, 0], [0, 989, 9258, 27046, 3975, 0, 0, 807, 150, 2465, 0, 1533, 2740, 948, 0, 304, 269, 5872, 0, 0, 3167], [0, 113, 269, 6426, 13735, 1219, 0, 721, 42, 3044, 1641, 0, 3713, 7568, 0, 4685, 0, 9414, 4653, 485, 1848], [2085, 0, 3393, 3003, 29805, 0, 0, 0, 1842, 0, 0, 0, 1248, 1239, 2465, 0, 1729, 0, 403, 419, 6874, 6294], [1228, 152, 3227, 28269, 911, 1248, 0, 4954, 2965, 306, 1084, 1248, 11, 0, 5922, 0, 4447, 1552, 304, 3143], [275, 0, 833, 8030, 25670, 0, 1185, 975, 1468, 50, 4518, 1087, 694, 2341, 0, 0, 0, 1414, 2496, 3422, 6127, 1163], [2904, 0, 1287, 5990, 32549, 1248, 0, 3331, 2153, 1133, 0, 402, 34, 0, 0, 1254, 0, 3430, 0, 4138, 3547], [0, 514, 4811, 19066, 3316, 407, 0, 3982, 0, 269, 269, 0, 542, 1111, 0, 7848, 0, 9877, 7709, 0, 4021], [2194, 933, 848, 8025, 23738, 1269, 842, 673, 889, 0, 6969, 101, 949, 2023, 4387, 0, 364, 0, 1165, 4702, 4363, 3944], [0, 4, 5466, 34358, 269, 538, 582, 684, 6, 4007, 549, 3028, 3890, 600, 168, 943, 0, 5404, 2624, 3194, 2351], [0, 584, 4231, 33584, 269, 1585, 1786, 672, 0, 4252, 269, 0, 5428, 571, 269, 5728, 269, 1734, 1696, 2699, 3177], [275, 0, 1330, 5238, 26861, 1087, 712, 3594, 8301, 0, 2120, 573, 269, 269, 4501, 573, 4954, 0, 7073, 2740, 0, 3572], [0, 4861, 11396, 23374, 269, 807, 2596, 0, 557, 797, 2244, 538, 4281, 0, 4064, 0, 14921, 5125, 0, 0], [0, 4413, 7751, 26007, 2471, 1256, 2507, 0, 529, 2924, 2507, 1289, 5101, 0, 0, 1517, 0, 10907, 2905, 217, 4028], [1039, 1288, 13822, 29899, 2830, 0, 894, 2504, 1195, 116, 791, 2383, 3437, 0, 2791, 2, 7653, 3437, 1593, 7640], [1568, 32365, 3949, 12267, 9126, 4813, 3877, 4913, 1509, 5308, 4366], [0, 0, 5070, 9031, 31482, 5402, 0, 0, 3656, 0, 2750, 3755, 593, 0, 2568, 0, 1248, 0, 5070, 0, 9999, 7953], [2948, 0, 3761, 9256, 39615, 0, 1604, 2329, 81, 0, 3090, 5269, 661, 1250, 2838, 0, 0, 0, 7990, 1655, 3138, 6737], [0, 5802, 12034, 30550, 3756, 0, 575, 299, 0, 5068, 861, 10650, 4741, 0, 0, 0, 0, 5385, 18022, 3856, 478], [16, 1108, 24725, 61039, 0, 269, 3404, 194, 7486, 599, 1248, 0, 0, 483, 3138, 0, 2704, 217, 5330], [0, 0, 21632, 75269, 1248, 215, 269, 609, 0, 2035, 1555, 0, 1247, 3579, 0, 7398, 0, 5112, 7942, 2966], [3937, 343, 3907, 20894, 45593, 1248, 0, 0, 6630, 0, 3713, 1551, 4971, 3375, 8677, 0, 6219, 0, 9004, 9010, 8614, 6259], [8400, 0, 8115, 17380, 36859, 2991, 2937, 2116, 9207, 1321, 2692, 0, 4213, 5919, 2958, 2903, 6181, 0, 8824, 10080, 5709, 11992], [3734, 271, 7724, 18898, 63773, 4534, 3837, 2525, 2632, 1227, 3271, 5551, 3877, 2699, 0, 0, 8564, 0, 19535, 5593, 4349, 7155], [6351, 1748, 2841, 12672, 41148, 1843, 69, 3478, 5691, 829, 8388, 4929, 9852, 3123, 259, 13024, 0, 9857, 32013, 13572], [219, 498, 6325, 35525, 77922, 4210, 2766, 2379, 5653, 0, 4757, 60, 425, 6393, 4733, 3437, 9358, 0, 13058], [3087, 0, 269, 17849, 94273, 1251, 617, 4515, 1957, 0, 0, 5336, 0, 3105, 6383, 3437, 6145, 0, 14333, 14009, 3871, 6534], [23629, 94743, 1248, 3437, 1517, 5175, 0, 2747, 1248, 4806, 3740, 4038, 437, 3765, 31, 12322, 12351, 5165, 8510], [3881, 2727, 32861, 93122, 5261, 578, 9102, 10055, 4928, 5429, 3071, 5117, 0, 0, 0, 0, 22448], [0, 2559, 3330, 32783, 97660, 8792, 0, 10927, 6842, 4373, 5959, 6755, 2827, 6269, 0, 10825], [4300, 5902, 27240, 131837, 1620, 4083, 0, 7164, 31, 6217, 829, 290, 2477, 6206, 0, 1448, 2465, 10354], [5167, 69, 2774, 30040, 118311, 4711, 5909, 2465, 6362, 0, 4685, 4231, 4147, 8730, 0, 557, 8404, 0, 24518], [3932, 8088, 30817, 196053, 8613, 7470, 5668, 11684], [6858, 64269, 182776, 7555, 870, 2816, 12744, 1513, 11060, 9376, 4341, 6165, 0, 1564, 9788, 0, 17476]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

