created: 20230303232222000
creator: Drevarr
modified: 20230705163521013
modifier: drevarr
tags: ChartData
title: 202303032322_cleanses_ChartData
type: text/vnd.tiddlywiki


const names = ["Kosa\u00edr", "Delynai", "Cat Wigglebooty", "Eibh\u00ebar", "High Sorcer Baradun", "Stoic Rapidfire", "Venomina The Siren", "Tribal S", "Zadie Miststep", "Drevarr Moonwillow"];
const professions = ["Scrapper", "Scrapper", "Scrapper", "Chronomancer", "Tempest", "Druid", "Tempest", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Condition Cleanses per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 0.134, 0.0, 0.0, 0.0, 0.2483, 0.2941, 0.12, 0.4075, 0.2773, 0.0, 0.0, 0.3465, 0.1985, 0.0714, 0.359, 0.0, 0.1836, 0.0, 0.0944, 0.1189], [0.5774, 0.756, 0.0179, 0.5226, 0.0, 0.2944, 0.3676], [0.0882, 0.2516, 0.0, 0.0, 0.0263, 0.0, 0.0236, 0.1053, 0.0233, 0.3417, 0.3088, 0.152, 0.6284, 0.4034, 0.0, 0.0192, 0.6634], [0.0882, 0.3431, 0.0, 0.0, 0.3421, 0.0, 0.0472, 1.1754, 0.1163, 0.2756, 0.6029, 0.064, 0.4914, 0.7983, 0.0, 0.0, 0.5421, 0.0, 0.4426, 0.2798, 0.4359, 0.0, 0.5282, 0.1744, 0.2833, 0.2432], [0.6471, 0.317, 0.0392, 0.0625, 0.0526, 0.0, 0.063, 0.8772, 0.1008, 0.631, 0.25, 0.28, 0.5959, 0.7563, 0.2941, 0.0577, 0.1287, 0.9964, 0.4345, 0.1282, 0.0179, 0.9181], [1.7647, 0.8105, 0.0, 0.6053, 0.1818, 0.2992, 1.6316, 0.9612, 0.4396, 0.0091, 1.4643, 0.4359, 0.0536, 1.8983, 0.4419, 0.8944, 1.0486], [0.5882, 0.2908, 0.0392, 0.0, 0.1316, 0.0182, 0.0157, 0.9123, 0.093, 0.6036, 0.3382, 0.136, 1.2089, 0.7731, 0.0294, 0.0192, 1.0817, 0.0, 0.8106, 0.494, 0.0179, 0.8842, 0.0174, 0.6889, 0.2108], [1.2059, 0.5425, 0.0784, 0.0, 1.1316, 0.0, 0.1339, 1.8246, 0.3178, 1.3941, 0.6471, 0.504, 1.8305, 1.1429, 0.0882, 0.0385, 1.6213, 0.0, 1.2769, 1.4345, 0.1026, 0.0, 1.3418, 0.186, 0.7333, 0.7459], [1.4706, 0.7059, 0.0312, 0.7368, 0.0182, 0.1417, 1.3158, 0.7209, 1.3781, 0.5441, 0.704, 1.5651, 1.3445, 0.4412, 0.0192, 1.7054, 1.6375, 1.2024, 0.0, 0.2679, 1.596, 0.2209, 0.95, 0.773], [1.1765, 0.7124, 0.1961, 0.1562, 1.0789, 0.2909, 0.3937, 1.193, 0.7209, 1.4738, 1.9265, 0.64, 1.8955, 1.5378, 0.7059, 0.4038, 1.9851, 0.0698, 1.5829, 1.2321, 0.7949, 0.0714, 1.7034, 0.5, 0.9833, 0.8973]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

