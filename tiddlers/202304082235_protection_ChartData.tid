created: 20230408223537000
creator: Drevarr
modified: 20230705163525040
modifier: drevarr
tags: ChartData
title: 202304082235_protection_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaylen Harker", "Oo Dads Mad", "Cat Wigglebooty", "The Gun Guardian", "Venom The Ferocious", "Traidoruns Maximus", "Cthullun", "Anita Strips", "Ryvalia Fazebringer", "Zadie Miststep", "Kosair", "Sister Elon\u00edth", "Fribble Bibble", "Tribal S", "Mmathuss", "Aronorf Xideliesi", "Drevarr Moonwillow", "Koralia Danai", "Bella Sassy", "Sygaldry Verdandi"];
const professions = ["Firebrand", "Spellbreaker", "Scrapper", "Scrapper", "Firebrand", "Firebrand", "Chronomancer", "Chronomancer", "Chronomancer", "Tempest", "Firebrand", "Firebrand", "Scrapper", "Druid", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Protection per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[248.8324, 108.108, 278.2521, 18.0096, 0.0], [69.9223, 13.8138, 31.059, 6.8656, 4.8335, 123.7438, 244.9649, 13.7491, 0.0, 26.4888, 13.8996, 20.548, 37.9957, 30.6197, 9.0367, 6.1204, 17.1578, 29.4336], [95.0429, 16.632, 116.7453, 0.0, 0.0, 101.178, 286.5628, 0.0, 16.632, 0.0, 0.0, 10.7422, 75.6014, 44.0174, 0.0], [0.0, 321.4377, 11.9566, 32.9282, 105.258, 37.908, 31.9348, 2.97, 189.5106, 79.2232, 0.0], [0.0, 37.758, 61.7869, 163.6096, 86.2984, 28.6322, 40.5946, 100.4056, 18.3857, 0.0, 0.0, 0.0, 187.4513, 89.166], [194.5755, 22.8592, 50.0216, 398.7508, 0.0, 49.5264, 50.2044, 18.9104, 61.191, 54.3972, 19.096], [123.5261, 37.3296, 59.0121, 0.0, 0.0, 124.357, 230.2586, 17.2528, 18.6648, 17.1286, 18.9952, 13.2912, 10.9824, 28.116, 84.8858, 35.0037, 33.5899, 4.8325, 0.0, 11.9221, 45.2928, 14.2428, 4.788, 11.4471, 45.1444, 17.1068, 0.0, 0.0, 18.9088, 28.6902, 57.0122], [67.6476, 69.8082, 82.215, 15.232, 14.697, 145.9416, 186.1397, 15.4959, 29.0398, 19.5464, 24.2424, 33.3419, 26.818, 75.2893, 17.7444, 21.7526, 8.1404, 16.8084, 14.603, 48.8768, 36.3839, 13.3106, 1.3437, 37.2167, 0.0, 0.0, 0.0, 9.5592, 50.6142, 68.901, 54.0091], [122.8338, 56.6412, 81.3015, 27.44, 25.3575, 132.4512, 253.9988, 18.832, 32.1182, 42.8214, 0.0, 38.5398, 29.1548, 22.308, 78.2541, 30.4363, 59.3611, 42.2268, 12.5454, 18.924, 67.9616, 13.7573, 27.3155, 21.1888, 50.916, 8.9279, 0.0, 25.8258, 0.0, 35.343, 72.2109, 90.6946], [245.272, 86.5326, 231.2982, 0.0, 21.559, 155.1396, 296.0168, 0.0, 0.0, 32.3868, 33.9624, 23.6808, 43.9982, 18.678, 129.3572, 14.0662, 31.2312, 18.7663, 32.6144, 22.659, 31.6726, 27.8555, 49.5892, 18.9703, 19.0608, 0.0, 16.8588, 80.5196, 46.2389], [181.272, 62.7119, 117.3543, 124.9299, 232.512, 141.9425, 108.7834, 132.0166, 169.167, 50.7723, 5.3328, 55.944, 284.7233, 231.131], [71.1617, 181.9543, 302.9824, 145.5032, 112.6377, 156.332, 242.0083, 24.1773, 33.3696, 136.2879, 313.3644, 371.8859], [289.6781, 86.5788, 189.0945, 41.5296, 25.43, 305.6189, 619.3453, 0.0, 32.5618, 68.7603, 0.0, 16.263, 27.5075, 41.14, 111.8807, 100.8075, 131.7826, 64.4018, 101.8427, 121.6768, 23.6948], [144.2951, 111.3882, 67.7817, 0.0, 35.2935, 303.6566, 465.5594, 0.0, 0.0, 22.6412, 0.0, 73.1484, 49.5924, 0.0, 114.0652, 61.2767, 102.2986, 3.4713, 42.9575, 118.5408, 101.1562, 35.6706, 20.6462, 126.9748, 12.8499, 0.0, 0.0, 0.0, 45.1521, 189.4778, 242.9774], [333.9853, 82.3284, 103.9563, 0.0, 15.0386, 403.2403, 567.6632, 0.0, 20.3465, 0.0, 0.0, 72.5166, 0.0, 15.004, 200.7455, 92.198, 109.2, 13.1947, 32.6728, 97.5217, 155.232, 90.7655, 62.1961, 51.9384, 15.1587, 39.4937, 0.0, 15.9104, 6.5205, 124.6973, 147.1876], [210.1625, 145.2066, 242.0775, 0.0, 28.2141, 422.9854, 754.4332, 21.5561, 6.8908, 0.0, 95.9166, 57.2458, 13.684, 78.098, 82.6993, 106.1861, 62.0466, 36.6922, 51.4733, 205.0944, 104.6522, 92.4084, 81.9386, 235.1753, 17.5392, 17.7289, 0.0, 0.0, 17.3502, 236.425, 162.3458], [401.2373, 103.1646, 319.5423, 23.5088, 31.8159, 438.1927, 832.7968, 64.8656, 42.7073, 94.3547, 39.8984, 110.8458, 32.9987, 62.04, 144.493, 60.5087, 72.9456, 26.1122, 32.4292, 68.7887, 144.032, 51.6625, 60.5682, 115.789, 182.7004, 29.774, 0.0, 18.678, 18.2962, 2.7783, 205.9599, 206.7377], [478.5771, 94.8024, 292.8681, 17.1472, 22.6458, 505.3994, 824.8133, 19.207, 17.7408, 90.0726, 26.288, 107.1954, 17.7778, 46.706, 290.7025, 118.1477, 78.3182, 50.1917, 121.0692, 146.5033, 170.0608, 78.1088, 29.1829, 126.616, 158.2209, 16.0472, 26.2899, 187.4513, 220.4311], [409.3471, 94.8024, 589.5729, 24.4053, 672.4351, 930.6987, 79.8878, 47.8262, 107.4473, 40.1104, 147.7242, 95.2208, 47.278, 344.3803, 88.6006, 131.7389, 45.7657, 31.2721, 93.4846, 105.6384, 29.5538, 71.0779, 134.0838, 155.0034, 88.4755, 58.1579, 0.0, 38.414, 67.5675, 290.1273, 178.8415], [353.4686, 118.8264, 549.1962, 70.8665, 681.1426, 1047.9289, 9.5344, 83.3633, 93.8133, 0.0, 115.4088, 28.9318, 61.402, 238.5071, 166.3283, 138.0725, 41.4322, 105.2352, 52.5141, 182.2464, 128.9297, 111.2013, 73.7215, 169.4987, 16.3943, 37.5429, 24.8754, 38.5429, 140.4837, 314.783, 368.1282]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

