created: 20230410221909000
creator: Drevarr
modified: 20230705163525200
modifier: drevarr
tags: ChartData
title: 202304102219_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tootsie Pop Rocks", "Solus Sanctus", "Johosh The Great", "Mac Chiato", "Zadie Miststep", "Tribal S", "Drevarr Moonwillow", "Ak\u00e1nt\u00f3r"];
const professions = ["Scrapper", "Firebrand", "Firebrand", "Tempest", "Tempest", "Druid", "Scrapper", "Druid"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[236.8915, 41.1022, 115.8982, 217.7874, 294.699, 251.4839, 263.2857, 175.4205, 419.5278, 295.5673, 399.825, 798.3889, 1172.8226, 1625.3717, 138.4889, 719.9481, 0.0, 576.6237, 1743.4057, 710.0], [9.8817, 167.5891, 524.5194, 602.1298, 90.2194, 138.2698, 124.4659, 361.25, 157.6538, 190.05, 453.6389, 769.8871, 701.7965, 196.9111, 863.5844, 3.8302, 711.2366, 903.8208, 448.1642, 542.5625], [388.4729, 43.6452, 244.7927, 775.2052, 573.0645, 182.1097, 149.5952, 214.4886, 451.0972, 226.4773, 337.6731, 693.15, 518.125, 864.5161, 708.5398, 306.0, 967.3117, 5.7358, 913.3333, 972.7642, 1229.5075, 761.9554], [71.1774, 373.3236, 89.4769, 1256.6311, 486.1806, 165.4683, 363.0568, 790.3472, 144.8182, 995.3462, 1735.525, 1558.7083, 1855.6774, 1490.2566, 260.4222, 1672.4026, 114.3208, 1554.2581, 2307.7736, 1441.0149, 1676.3571], [1227.0465, 170.6237, 651.1782, 1762.9575, 1782.3988, 522.1161, 613.0794, 639.1932, 1629.3889, 858.2981, 1831.925, 1224.0, 2808.2581, 1400.708, 1014.8, 1913.1948, 558.3774, 3153.1505, 2049.9151, 4269.5522, 2307.1607], [74.1613, 893.9491, 2534.9039, 2401.4069, 518.6587, 541.9659, 1433.4722, 960.7019, 1717.8, 647.1667, 1447.0, 1654.0265, 946.4889, 2088.2468, 119.3019, 2479.7849, 3924.0094, 66.7015, 575.3661], [1772.2326, 182.8656, 1004.56, 2100.9076, 2318.3777, 744.7097, 391.4206, 518.0568, 2227.2639, 393.2045, 1200.8942, 1841.625, 1327.0278, 3731.3226, 828.5398, 711.2889, 3110.8831, 429.1132, 4547.2688, 3808.3868, 1858.9701, 2395.5714], [750.5349, 229.1828, 1003.8145, 2736.8965, 2773.6121, 747.1097, 736.0952, 1074.5795, 2248.375, 1548.125, 4783.325, 1841.3333, 2647.2419, 3266.7434, 955.8, 3309.8442, 275.0755, 6951.6129, 4216.5566, 7251.8209, 3610.375]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

