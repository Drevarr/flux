created: 20230429000309000
creator: Drevarr
modified: 20230705163527338
modifier: drevarr
tags: ChartData
title: 202304290003_vigor_ChartData
type: text/vnd.tiddlywiki


const names = ["Mistwalker Caelon", "Air One Com", "Xyntharos", "Cat Wigglebooty", "Miphest\u00f6", "Tegan Parker", "Zadie Miststep", "Blancooo Padreee", "Jupi Jupi Jupi", "Arriasa", "Newtype Khan", "Demon Sekhmet", "Drevarr Moonwillow"];
const professions = ["Vindicator", "Firebrand", "Vindicator", "Scrapper", "Tempest", "Tempest", "Tempest", "Spellbreaker", "Dragonhunter", "Druid", "Spellbreaker", "Spellbreaker", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Vigor per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[51.4509, 52.6504, 13.2195, 0.0, 150.0588, 20.7144, 7.0417, 21.3682, 1.9584, 11.0126, 2.9678, 14.912, 17.0478, 198.4382], [18.6099, 24.8584, 71.8066, 144.6628, 0.0, 0.0, 11.3089, 0.0, 0.0, 0.0, 0.0, 0.0, 335.3477], [47.7289, 69.5572, 16.9136, 0.0, 166.5036, 21.9803, 12.0049, 37.8004, 6.8952, 11.9843, 21.7729, 21.9367, 37.3969, 171.0563], [76.556, 9.9588, 5.0069, 475.1005, 0.0, 0.0, 79.1622, 0.0, 4.9881, 0.0, 0.0, 0.0, 99.5413], [69.6229, 41.2248, 2.9919, 227.1438, 68.9329, 0.0, 29.3656, 0.8568, 72.8775, 0.0, 0.0, 0.0, 262.8662], [157.4908, 55.4296, 33.6746, 260.8042, 50.6352, 0.0, 87.472, 0.0, 0.0, 0.0, 0.0, 518.0011], [119.7602, 106.8448, 54.7098, 0.0, 345.3408, 40.4506, 0.0, 93.845, 31.4568, 31.3535, 0.0, 0.0, 0.0, 370.7831], [48.0938, 0.0, 0.0, 0.0, 372.0636, 70.1988, 0.0, 17.4944, 0.0, 79.2907, 34.3995, 0.0, 38.3711, 628.8173], [154.9365, 175.63, 0.0, 0.0, 253.0957, 86.5977, 74.7261, 11.9952, 131.9569, 17.0514, 62.9448, 65.4311, 273.4969], [251.708, 0.0, 84.1101, 198.3654, 90.2227, 15.8651, 0.0, 86.5776, 90.1738, 0.0, 90.0884, 0.0, 525.4103], [184.1285, 246.654, 82.8889, 0.0, 450.1764, 91.2009, 0.0, 134.9568, 0.0, 0.0, 60.4622, 0.0, 0.0, 828.5441], [331.986, 346.0876, 2.9003, 89.6582, 475.1005, 238.5608, 62.9937, 184.316, 36.108, 169.0758, 0.0, 38.3585, 156.3527, 897.482], [299.5829, 353.4216, 23.386, 54.488, 1675.314, 257.7792, 173.8372, 258.4798, 92.7384, 253.3546, 140.6198, 77.672, 227.8993, 1451.885]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

