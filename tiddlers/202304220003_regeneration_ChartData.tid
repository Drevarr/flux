created: 20230422000344000
creator: Drevarr
modified: 20230705163526221
modifier: drevarr
tags: ChartData
title: 202304220003_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Lucas Ryn", "Zadie Miststep", "Skye Nightroad", "Stoic Rapidfire", "Elonith Primal", "Mac Saharlot", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Tempest", "Scrapper", "Druid", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 23.1322, 29.0895, 33.8184, 40.4785, 24.6268, 96.5898, 59.1714, 213.84, 229.068, 14.2209, 55.89, 35.9132, 28.5869, 45.4584, 40.8883, 0.0, 88.775, 61.2998, 73.008, 47.4624, 48.7099, 73.2421, 4.8375], [0.0, 157.8943, 91.9248, 136.703, 63.6979, 146.6005, 158.9193, 480.78, 25.137, 74.0025, 17.2776, 8.6499, 41.6102, 68.7995, 13.4323, 106.3464, 125.349, 207.6192, 0.0, 9.956, 120.0214, 48.6846], [50.3369, 194.9944, 222.1454, 249.0061, 63.888, 323.8278, 177.1088, 404.8988, 87.8944, 727.74, 342.468, 2.4012, 79.5708, 26.6974, 88.7443, 198.356, 81.671, 0.0, 7.6055, 2.0797, 0.0, 0.0, 2.108, 0.0, 0.0], [41.1074, 97.412, 84.8265, 228.0617, 58.5024, 178.9092, 89.3455, 114.2087, 134.9887, 1364.94, 333.711, 150.4683, 105.708, 9.7412, 56.9722, 76.4925, 15.6077, 111.7228, 157.4265, 458.1792, 124.0992, 104.3597, 296.3467, 55.2249], [146.8817, 344.4352, 268.4098, 413.494, 224.8224, 343.0798, 297.0273, 350.9541, 248.9544, 1038.96, 184.464, 49.7835, 110.5932, 94.7849, 139.4266, 53.6759, 38.8397, 0.0, 122.8251, 103.7055, 155.7792, 109.9008, 89.2474, 93.6992, 149.4207], [117.0074, 313.394, 429.598, 262.7928, 206.7912, 462.0823, 321.9858, 402.9318, 303.6528, 1312.74, 294.462, 80.5437, 109.0752, 7.4373, 221.5987, 213.9604, 74.6381, 18.5947, 252.9061, 379.713, 725.8464, 160.416, 192.2126, 110.4497, 481.2345], [387.6365, 582.484, 512.1622, 367.656, 425.0928, 621.6691, 592.6254, 994.649, 466.5019, 1941.48, 486.36, 174.0042, 248.0136, 48.2008, 374.6534, 388.0137, 292.3008, 466.6043, 346.719, 984.7008, 299.0304, 330.4617, 505.7507, 864.0162]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

