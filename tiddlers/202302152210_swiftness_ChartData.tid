created: 20230215221053000
creator: Drevarr
modified: 20230705163519405
modifier: drevarr
tags: ChartData
title: 202302152210_swiftness_ChartData
type: text/vnd.tiddlywiki


const names = ["Black Raspberry Pie", "Etchery Howls", "Grasszanine", "Call Me Ever", "Tegan Parker", "Mac Chiato", "Ryvalia Fazebringer", "Zadie Miststep", "Veron Blackburn", "Newtype Khan", "Sygaldry Verdandi", "Domina Flagbringer", "Zaylen Harker", "\u00c9\u00efbhear", "Sister Elon\u00edth", "Blanco Padre Guard", "Ravioli Fetabringer", "Drevarr Moonwillow", "Ark Darkness", "Johosh The Great", "Bella Sassy"];
const professions = ["Chronomancer", "Druid", "Spellbreaker", "Firebrand", "Tempest", "Tempest", "Chronomancer", "Tempest", "Herald", "Spellbreaker", "Firebrand", "Spellbreaker", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand", "Scrapper", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Swiftness per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[302.768, 0.2678, 264.7354, 71.2558, 96.2115, 0.0, 17.359, 0.0, 197.2802, 16.5432, 1.974, 24.4694, 0.0, 100.5965, 351.4725, 51.6942, 0.0, 0.0, 13.2269, 0.0, 0.0, 0.0, 8.5504], [840.0018, 397.532, 0.0, 0.0, 52.9298, 42.189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 28.2864, 0.0, 0.0, 91.0771, 30.8925, 81.081, 0.0, 0.0, 0.0, 69.5482, 0.0, 0.0], [297.1804, 391.572, 0.0, 89.1504, 228.2126, 67.6053, 0.0, 90.2889, 0.0, 55.8532, 19.7933, 53.5151, 126.0278, 27.18, 2.8301, 0.0, 0.0, 115.7657, 0.0, 89.6553, 0.0, 0.0, 0.0, 0.0], [307.8787, 467.7134, 193.7962, 0.0, 72.2034, 74.2549, 60.764, 207.4401, 9.4809, 212.161, 89.5167], [478.6232, 536.4, 42.408, 100.368, 183.5834, 29.2236, 0.0, 93.561, 22.126, 75.9523, 31.663, 65.2291, 54.4325, 0.0, 45.3456, 32.9175, 3.1104, 18.3299, 8.459, 55.7204, 0.0, 29.2063, 0.0], [425.2754, 744.404, 56.6482, 44.9885, 14.553, 45.0702, 31.3133, 123.1767, 69.0092, 51.2986, 15.1406, 46.8259, 66.2467, 93.3283, 55.4175, 22.2264, 50.3465, 38.764, 160.7571], [236.9004, 1207.496, 23.4806, 0.0, 5.929, 252.2079, 0.0, 24.1806, 0.0, 186.8152, 0.0, 36.1834, 17.6534, 0.0, 0.0, 0.0, 4.7952, 48.5446, 0.0, 0.0, 0.0, 131.5261, 0.0, 37.33], [538.3004, 1103.196, 128.3846, 230.4922, 248.8024, 128.7279, 0.0, 111.7519, 0.9041, 6.9368, 51.2693, 36.519, 81.9283, 126.1877, 1.768, 56.8589, 15.1875, 59.8104, 13.167, 4.334, 186.4926, 0.0, 38.4859, 0.0, 31.5479], [1206.8056, 1557.944, 242.8862, 471.3754, 426.2412, 469.8414, 56.4451], [789.9694, 1574.036, 126.1973, 444.6893, 172.2644, 299.3361, 68.4019, 110.4209, 123.487, 50.0981, 47.7313, 190.7798, 114.011, 12.8775, 128.833, 13.3875, 36.045, 95.5301, 6.809, 37.4062, 0.0, 0.0, 0.0, 0.0], [786.0512, 1612.18, 91.6906, 477.0432, 45.7072, 209.2986, 53.1965, 176.6956, 129.3714, 233.5788, 75.4253, 118.5387, 134.2752, 141.6259, 0.0, 60.6538, 82.53, 38.1186, 15.8004, 0.0, 56.7378, 73.593, 101.8802, 2.4734], [574.4684, 975.652, 46.2024, 267.5693, 485.4234, 309.5232, 134.9314, 86.4067, 29.4277, 165.2274, 169.0042, 15.0221, 135.911, 238.6766, 184.9843, 193.5675, 27.1188, 146.4656, 61.897, 129.8147, 94.862, 219.3404, 90.1883], [1140.1962, 2828.616, 347.3885, 626.6506], [1218.2588, 2435.852, 0.0, 240.647, 200.508, 275.772, 19.1083, 41.9832, 8.8007, 99.3278, 64.5331, 37.2889, 47.712, 137.6395, 142.919, 0.0, 0.0, 179.5909, 17.237, 223.4201, 0.0, 48.84, 0.0, 5.2088], [415.8662, 853.2461, 515.1762, 568.9341, 166.1093, 150.463, 174.3894, 302.1096, 181.3896, 70.077, 295.5418, 515.1878, 395.4394, 183.3075, 158.2254, 225.7794, 93.929, 258.552, 76.0328, 346.8128, 130.19, 100.1146], [1422.3066, 1867.268, 110.0822, 486.2534, 239.2082, 178.3257, 136.0368, 244.1904, 126.6593, 4.4252, 24.5659, 26.8661, 222.5424, 243.7502, 0.0, 86.7677, 23.13, 131.0094, 104.0193, 8.932, 217.0759, 132.7061, 230.476, 41.8345], [1023.5544, 2777.36, 41.783, 402.6528, 527.142, 283.0779, 0.0, 306.8047, 175.7547, 67.9926, 72.7901, 0.0, 132.0259, 59.5786, 15.9205, 11.3846, 0.0, 33.5178, 51.6285, 61.666, 243.1705, 73.951, 135.531, 30.0409], [1477.7642, 3054.5, 155.3026, 521.3232, 430.0142, 425.0799, 90.9619, 142.6431, 21.4389, 145.6728, 84.707, 104.1877, 258.3264, 165.1094, 0.0, 197.977, 31.3425, 26.6328, 138.4267, 9.229, 114.6127, 22.2238, 62.0756, 37.5102], [1331.5852, 2634.916, 140.5267, 426.623, 99.176, 453.1716, 124.6891, 163.9398, 9.3726, 351.325, 124.3522, 206.9739, 194.665, 326.16, 44.574, 178.1664, 11.4525, 108.3294, 238.9117, 0.0, 111.4407, 257.9729, 91.672, 120.1309], [2005.817, 3680.3, 486.9778, 688.2883, 799.0136, 544.6497, 156.6566, 418.3902, 194.666, 240.7548, 122.4782, 84.882, 392.3971, 589.7698, 346.7491, 191.6325, 75.9294, 74.3243, 104.995, 311.6988, 107.9231, 346.471, 114.5519, 84.5044], [2668.897, 4170.212, 497.2896, 865.5264, 1007.2832, 868.5789, 230.8114, 563.0299, 269.536, 240.396, 134.8344, 409.369, 535.2648, 197.2051, 107.2575, 157.788, 193.7281, 46.431, 186.2532, 370.256, 72.5927, 63.4234]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

