created: 20230610101822000
creator: Drevarr
modified: 20230705163534684
modifier: drevarr
tags: ChartData
title: 202306101018_regeneration_ChartData
type: text/vnd.tiddlywiki


const names = ["Gamora Titus", "Aronorf Xideliesi", "Gestern Yesteryear", "Ryvalia Fazebringer", "Slang\u00efn", "Arriasa", "Sakis Ranger", "Tomitigas", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Firebrand", "Firebrand", "Chronomancer", "Herald", "Druid", "Druid", "Tempest", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Regeneration per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[18.4998, 19.107, 16.6162, 14.3959, 2.9835, 47.7357, 98.0533, 10.3208, 6.552, 32.5368, 22.0643, 109.5939, 53.5954, 65.7233, 131.3189, 34.8949], [37.5008, 21.4136, 49.1855, 6.6938, 62.04, 36.54, 68.3499, 61.0844, 67.8642, 40.3592, 62.7547, 18.4526, 12.291, 0.0, 100.7048, 15.3153, 22.4717, 38.6289, 1.2449], [3.3485, 0.0, 0.0, 36.7435, 0.4577, 5.5809, 0.0, 47.1814, 0.0, 49.548, 0.0, 43.4496, 0.0, 0.0, 21.7345, 203.1389, 61.8649, 36.975, 0.0, 78.4437, 115.9536, 0.0, 0.0, 23.5782], [0.2153, 12.1473, 2.999, 34.9552, 6.7743, 32.6557, 34.0571, 7.657, 42.084, 33.336, 37.6351, 45.0951, 45.0195, 23.6771, 60.0415, 46.2592, 23.97, 8.503, 116.5196, 73.0244, 22.176, 30.7287, 18.8009], [0.7909, 15.0744, 26.6684, 1.5998, 1.2415, 83.4046, 11.5588, 4.4114, 8.6444, 64.176, 1.44, 11.8479, 51.0952, 94.5599, 65.5955, 69.2185, 17.6856, 16.7484, 137.2918, 9.2253, 221.4292, 171.8886, 25.137, 20.6203], [27.9185, 52.4931, 0.0, 29.7211, 48.1536, 340.4279, 60.7121, 353.2069, 136.4155, 126.612, 272.7792, 20.8817], [21.3478, 38.7387, 7.3656, 55.081, 56.2733, 57.6833, 263.9905, 281.3166, 58.0642, 101.052, 116.6688, 245.0063, 214.279, 183.8633], [10.8131, 8.1477, 12.089, 49.1938, 43.5201, 10.1439, 28.2222, 74.9697, 91.776, 29.016, 106.8173, 207.4859, 182.8445, 148.478, 151.4444, 64.9209, 142.0044, 31.5353, 341.1355, 102.3519], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4992, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9937, 0.0, 391.2454, 421.3212, 244.0638, 1271.0859, 305.6456, 190.0416]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

