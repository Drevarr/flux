created: 20230529221000000
creator: Drevarr
modified: 20230705163532230
modifier: drevarr
tags: ChartData
title: 202305292210_fury_ChartData
type: text/vnd.tiddlywiki


const names = ["Roynec", "Fluffy Mccutestuff", "Mawsmer", "Miphest\u00f6", "Riann Swordbreak", "Tuandha Lan", "Mistwalker Cael", "Tootsie Pop Rocks", "Cyclotechnist Farra", "Lord Erin The Wise", "Tribal S", "Fribble Bibble", "Cat Wigglebooty", "Zadey Starbolt", "Drevarr Moonwillow"];
const professions = ["Reaper", "Harbinger", "Virtuoso", "Tempest", "Spellbreaker", "Renegade", "Vindicator", "Scrapper", "Scrapper", "Weaver", "Druid", "Scrapper", "Scrapper", "Scrapper", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Fury per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[85.239, 408.0938, 49.2504, 43.6853, 134.8439, 90.5834, 139.9008], [144.4716, 1020.97], [35.7595, 39.0319, 197.6594, 20.017, 80.6491, 158.6832, 82.6065, 351.1966, 27.6989, 142.6603, 117.9234], [0.0, 318.5582, 0.0, 0.0, 39.0598, 0.0, 47.0542, 20.7168, 103.7475, 215.9071, 0.0, 85.4555, 318.7026, 8.085, 256.91], [67.914, 430.7134, 66.849, 0.0, 157.2291, 21.4925, 82.0378, 149.0112, 142.9758, 425.9455], [47.564, 30.9506, 318.6459, 25.5014, 190.3532, 183.3936, 118.4679, 425.7911, 71.1203, 98.5525, 61.3683], [0.0, 0.0, 38.5917, 15.8976, 131.4938, 14.9779, 89.3549, 110.8224, 129.5865, 366.1772, 0.0, 72.6832, 155.5695, 59.1528, 495.88], [0.0, 412.4921, 17.6852, 0.0, 178.396, 14.1149, 86.3106, 4.68, 102.8862, 160.9265, 51.5002, 37.0181, 382.8213, 86.289, 453.56], [0.0, 503.2843, 34.3109, 10.4328, 119.6921, 19.5715, 123.3237, 113.6928, 40.3245, 238.3009, 11.9385, 50.494, 348.957, 57.3594, 570.17], [40.131, 805.8204, 34.2461, 15.8976, 165.9852, 23.9981, 76.0558, 148.7616, 91.2978, 320.6174, 19.4876, 30.4696, 394.6824, 55.8894, 468.28], [83.412, 932.741, 83.3019, 65.6273, 438.4903, 46.3814, 94.7493, 196.4352, 265.5936, 412.0459, 26.8664, 173.9958, 407.9187, 80.4678, 1219.46], [102.186, 1419.689, 88.642, 45.6228, 228.8007, 13.92, 167.3869, 151.8192, 183.6918, 616.8334, 8.6275, 146.4487, 563.3163, 67.1496, 1060.76], [50.3055, 1099.2458, 121.98, 63.9382, 247.1504, 0.0, 172.1404, 247.4784, 182.1258, 712.895, 38.8617, 332.2968, 853.8273, 121.2162, 978.42], [0.0, 1368.7951, 102.4572, 48.8354, 318.722, 55.513, 131.175, 286.104, 283.6809, 509.4976, 88.3186, 349.8317, 1153.9647, 140.2086, 1398.17], [32.2875, 2049.894, 140.0111, 90.8647, 542.9543, 171.6058, 383.3236, 397.176, 449.6769, 1131.1186, 146.8381, 255.2299, 1304.3772, 139.944, 1757.89]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

