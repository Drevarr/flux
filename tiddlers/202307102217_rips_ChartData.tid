created: 20230710221759000
creator: Drevarr
tags: ChartData
title: 202307102217_rips_ChartData
type: text/vnd.tiddlywiki


const names = ["Daphne Agla\u00e9", "Mister Jekyll", "Rozaalyna", "Newtype Khan", "Be\u00eb", "Il Kurai Il", "Irin The Undeath", "Black Raspberry Pie", "Etcheryy", "Primal Clone", "Eibh\u00ebar"];
const professions = ["Reaper", "Reaper", "Scourge", "Spellbreaker", "Scourge", "Scourge", "Scourge", "Chronomancer", "Virtuoso", "Chronomancer", "Chronomancer"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Boon Strips per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0297, 0.4545, 0.0, 0.0563, 0.0, 0.3396, 0.0, 0.0, 0.0758, 0.0893, 0.0698, 0.0, 0.1178, 0.2154, 0.4098, 0.0909, 0.0705, 0.0, 0.25, 0.3115, 0.2297], [0.0732, 0.0, 0.125, 0.0, 0.2062, 0.0, 0.6604, 0.2278, 0.0, 0.3182, 0.125, 0.2093, 0.0, 0.2171, 0.6615, 0.4918, 0.1091, 0.1923, 0.65, 0.35, 0.2295, 0.4494, 0.4324], [0.1304, 0.697, 0.0312, 0.0189, 0.1875, 0.0, 0.5283, 0.3389, 0.0, 0.5606, 0.0, 0.0, 0.0, 0.0531, 0.4, 0.5738, 0.3545, 0.3397, 0.5, 0.375, 0.1967, 0.3596, 0.0, 0.6081], [0.1442, 0.1515, 0.125, 0.0, 0.3375, 0.0392, 0.5283, 0.4611, 0.0, 0.3788, 0.1429, 0.1395, 0.0, 0.2171, 0.0308, 0.623, 0.2182, 0.141, 1.4, 0.125, 0.6885, 0.573, 0.6216], [0.1327, 0.3333, 0.0938, 0.0, 0.4, 0.0588, 0.6226, 0.4944, 0.0, 0.4242, 0.5357, 0.186, 0.0, 0.3418, 0.8, 0.6885, 0.2818, 0.3333, 1.65, 0.525, 0.5902, 0.6404, 1.0135], [0.1854, 0.2121, 0.2812, 0.0, 0.4813, 0.0588, 0.5283, 0.5167, 0.1818, 0.4394, 0.1429, 0.2791, 0.7111, 0.4711, 0.4727, 0.4423, 1.65, 0.45, 0.7869, 0.3708, 0.25, 0.9459], [0.2586, 0.2727, 0.0, 0.0, 0.4125, 0.0196, 0.6981, 0.7167, 0.2273, 0.3333, 0.4107, 0.3023, 0.3778, 0.4411, 0.5846, 0.8361, 0.4936, 1.65, 0.325, 0.8852, 0.2809, 0.05, 0.5676], [0.2334, 0.0, 0.0312, 0.0126, 0.675, 0.0196, 0.8868, 0.4944, 0.2727, 0.7879, 0.9286, 0.093, 0.1333, 0.4065, 0.5077, 1.0, 0.5364, 0.5256, 0.65, 0.7, 0.623, 1.1461, 0.0, 1.2027], [0.27, 0.2424, 0.0, 0.0063, 0.6312, 0.0784, 0.9623, 0.6944, 0.0, 0.6364, 0.8393, 0.1163, 0.4, 0.448, 1.1385, 1.6885, 0.8727, 0.5064, 1.75, 0.975, 0.8525, 0.6742, 1.2432], [0.2151, 0.0303, 0.0, 0.0252, 0.7, 0.0, 0.9434, 0.9833, 0.0, 0.9848, 0.5714, 0.1628, 0.6889, 0.5912, 0.5692, 1.2623, 0.8455, 0.75, 1.1, 0.6, 0.8852, 1.2697, 1.2297], [0.3982, 0.6364, 0.0312, 0.0126, 0.775, 0.0392, 1.3774, 0.8889, 0.5, 0.9697, 0.2679, 0.1395, 0.0889, 0.649, 0.3846, 0.5574, 0.8818, 0.7051, 1.85, 0.55, 1.1639, 1.382, 0.05, 1.8784]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

