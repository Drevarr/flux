created: 20230625214256000
creator: Drevarr
modified: 20230705163535919
modifier: drevarr
tags: ChartData
title: 202306252142_barrierDamage_ChartData
type: text/vnd.tiddlywiki


const names = ["Wall Knot", "Hayuf", "Govinda Ektar", "Aronorf Xideliesi", "Tacitus Kilgore I", "Elonith Requiem", "Gestern Yesteryear", "Elonith Requiem", "Drac Tepes", "Yngvar The Burdened", "Ani Deasun", "Drumina", "Drevarr Moonwillow", "Vesnan", "Yedrax", "Drev Of The Dead", "Latedoctor"];
const professions = ["Dragonhunter", "Firebrand", "Vindicator", "Firebrand", "Spellbreaker", "Scourge", "Firebrand", "Reaper", "Scourge", "Scourge", "Vindicator", "Druid", "Scrapper", "Scourge", "Scrapper", "Reaper", "Reaper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Barrier Damage per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[8802, 0, 672, 0, 0, 2591, 584, 24900, 372, 1421, 1061, 0, 0, 0], [0, 10226, 28916, 0, 0, 1573, 2144], [6575, 13672, 17061, 0, 0, 8984, 582, 0], [1892, 2848, 0, 1096, 8366, 3776, 18257, 0, 0, 7475, 1569, 1770, 0], [6754, 2191, 0, 3358, 0, 694, 4015, 522, 3371, 9110, 3948, 5153, 13932, 10507, 326, 6579, 1960], [22869, 7600, 6799, 0, 6912, 14686, 0, 12078, 9967], [4993, 2339, 0, 846, 5549, 3279, 0, 5310, 2192, 2952, 1683, 13789, 20664, 708, 2303, 13232, 195, 1188, 0], [7176, 52278, 4140, 14436, 0, 0, 6534], [18702, 57889, 1130, 9639, 17092, 2291, 3386, 0], [2466, 9071, 9299, 1322, 8022, 18613, 24421, 861, 2652, 27244, 6997, 4533, 0], [9562, 6303, 0, 2206, 7888, 0, 5477, 6563, 6586, 9114, 18383, 34304, 1187, 2459, 15362], [12865, 6706, 10095, 0, 8392, 6852, 0, 5368, 10813, 2122, 14611, 9314, 20226, 0, 1803, 19418, 864, 8804, 5031], [30400, 9527, 289, 1467, 743, 13249, 13113, 11394, 21635, 13973, 53735, 13729], [0, 478, 39917, 687, 912, 54195, 35618, 92267, 10920, 2264, 21541, 0, 1533], [18304, 28397, 36027, 9736, 47295, 45293, 828, 18177, 34483, 13764, 26323, 7815], [77876, 153015, 5630, 3240, 69882], [84630, 161808, 31, 9864, 48450, 18885, 18432, 9302]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

