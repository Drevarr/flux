created: 20230422220129000
creator: Drevarr
modified: 20230705163526452
modifier: drevarr
tags: ChartData
title: 202304222201_ripsOutTime_ChartData
type: text/vnd.tiddlywiki


const names = ["Mucura V I I", "Koralia Danai", "Venomina The Fierce", "Yuliae", "Aribel Darkbringer", "Hyde En Sikh", "Raevarae", "V\u00e8\u00e9la", "Smol Gluvs", "Madame Charrlotte", "Blancooo Padreee", "Oo Dads Mad", "Newtype Khan", "Navia Blightfur"];
const professions = ["Dragonhunter", "Firebrand", "Spellbreaker", "Chronomancer", "Scourge", "Chronomancer", "Reaper", "Scourge", "Scourge", "Scourge", "Spellbreaker", "Spellbreaker", "Spellbreaker", "Scourge"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Duration of Boons Stripped per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[216713.28, 0.0, 0.0, 1814480.0, 21780.0, 28326.9, 0.0, 0.0, 0.0, 0.0, 0.0, 35678.52, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 52245.76, 0.0, 0.0, 2451019.2, 21780.0, 0.0, 28326.9, 0.0, 0.0, 0.0, 0.0, 40486.74, 0.0, 35806.86, 0.0, 2289.42, 393.12, 5538.4, 0.0, 0.0, 11992.27], [0.0, 16827.72, 112501.76, 63909.18, 0.0, 136439.0], [30563.75, 14480.7, 701539.86, 4040.1, 217536.3], [58026.15, 52272.0, 7595.0, 8505.12, 233800.56, 2020.05, 305320.86, 17423.36, 4173.12, 6748.56, 73347.68, 132921.6, 35511.12, 113603.42], [0.0, 210315.84, 1168.2, 3388.7, 6389421.6, 42592.0, 0.0, 170886.36, 21729.15, 5643.0, 15618.75, 0.0, 196491.96, 2020.05, 288123.3, 0.0, 0.0, 0.0, 5345.76, 0.0, 19728.4, 72240.86], [0.0, 0.0, 6790078.4, 241516.0, 0.0, 316798.8, 0.0, 16731.0, 7595.0, 0.0, 202848.24, 6090.3, 109089.0, 2790.46, 23966.46, 0.0, 0.0, 32993.04, 13170.04, 35976.81], [452927.2, 0.0, 550582.44, 53415.45, 60736.5, 0.0, 0.0, 613242.84, 2020.05, 746810.46, 2790.46, 43325.1, 1605.24, 79993.76, 119154.72, 6558.36, 243507.71], [0.0, 430276.0, 173.25, 522255.54, 54053.1, 54747.0, 7595.0, 8505.12, 589199.52, 22401.45, 264893.76, 40529.73, 74681.46, 27496.56, 131139.68, 113398.74, 19728.4, 259234.1], [573503.84, 1643.4, 0.0, 8497651.2, 173465.6, 0.0, 394957.92, 35806.5, 37422.0, 30563.75, 16680.3, 525360.36, 3618.0, 356528.52, 12659.16, 14287.14, 851.76, 20419.84, 43318.2, 26500.04, 83945.89], [652538.88, 2425.5, 0.0, 8821805.6, 313535.2, 117354.3, 46891.8, 21780.0, 7595.0, 0.0, 400031.1, 8110.35, 492055.56, 11808.41, 10664.64, 8768.76, 56780.64, 45632.46, 19728.4, 283505.88], [41050.8, 568705.76, 0.0, 0.0, 9353399.2, 360580.0, 0.0, 440743.44, 38504.25, 24156.0, 23948.75, 0.0, 617802.78, 0.0, 592545.78, 35969.71, 37818.9], [5524.2, 534186.24, 0.0, 0.0, 8606029.6, 471222.4, 291.06, 582609.18, 59890.05, 43164.0, 22907.5, 17743.44, 834607.2, 6090.3, 610770.06, 42027.05, 21850.92, 1965.6, 155893.92, 86755.08, 28259.6, 175216.4], [911901.76, 9037091.2, 541208.8, 0.0, 674758.32, 49735.0, 18659.94, 697532.64, 14110.2, 581380.2, 19361.16, 133066.08, 98148.36, 20581.52, 183402.74]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

