created: 20230314004438000
creator: Drevarr
modified: 20230705163522057
modifier: drevarr
tags: ChartData
title: 202303140044_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Johosh The Great", "Sigmund Mistwalker", "Ravioli Fetabringer", "Tribal S", "Mac Chiato", "Zadie Miststep", "Etchery Howls", "Drevarr Moonwillow"];
const professions = ["Firebrand", "Vindicator", "Firebrand", "Druid", "Tempest", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[17.2742, 246.0765, 345.2503, 304.3547, 574.9615, 76.6212, 140.7843, 322.7284, 26.9032, 282.5072, 34.7059, 40.2131, 63.3571, 304.8786, 217.4071, 202.0633, 277.1765, 85.44, 451.6383, 0.0, 185.7434, 7.5946, 212.6053, 289.0488, 249.7778, 244.0, 190.9833], [11.629, 8.3529, 21.9389, 54.7623, 0.0, 7.2879, 93.0, 7.0123, 13.7097, 28.6377, 16.1029, 0.0, 0.0, 15.5049, 66.9292, 9.9114, 56.3137, 157.96, 2467.2766, 55.5128, 1930.9823, 0.0, 1730.6316, 3134.4797, 2642.2727, 3.0769, 12.0167], [102.5, 119.9824, 575.6005, 469.2264, 229.5, 249.5455, 567.5686, 356.9877, 334.3043, 232.5588, 4.6066, 383.4762, 654.5534, 485.646, 455.8734, 378.549, 958.9733, 1117.1064, 47.7949, 853.8319, 88.1081, 286.1974, 796.4268, 754.1919, 1408.7692, 845.55], [246.6613, 284.6176, 1061.9671, 929.8113, 13.8462, 931.6061, 1164.6863, 775.4239, 15.3226, 1122.5942, 621.1176, 0.0, 911.0952, 671.2039, 908.6106, 1481.1139, 909.4706, 1812.2667, 2339.0, 90.8205, 1464.9912, 27.7297, 352.25, 1743.5325, 1774.7475, 2027.8308, 794.3], [63.9677, 37.4294, 1194.7192, 992.9057, 313.0, 806.0, 1379.8039, 665.0, 0.0, 1162.2464, 730.1471, 2536.4524, 1987.8155, 1366.0619, 1803.7215, 970.7059, 2448.12, 2081.4787, 0.0, 2386.354, 9.1081, 992.6184, 1896.6545, 1442.8586, 2425.2308, 621.35], [262.2742, 210.1471, 990.6122, 1019.2, 667.8846, 1382.303, 875.098, 267.5473, 0.0, 1859.2754, 80.9853, 0.0, 1646.7143, 2020.4078, 864.0796, 1695.0886, 719.0588, 1087.6, 2356.9043, 44.0513, 3291.9646, 0.0, 1456.2763, 2809.6301, 3323.2929, 2562.4, 1537.4833], [145.3548, 225.2765, 1395.8978, 1207.5358, 803.6923, 1267.303, 1731.4314, 1118.1193, 1223.8986, 541.8088, 61.0, 1369.0728, 842.1416, 1096.443, 978.8235, 1326.5467, 3140.7128, 43.4872, 3299.4956, 6.3243, 881.2895, 2026.1179, 3029.6566, 1978.0615], [221.9194, 337.6353, 2181.1563, 1882.9321, 414.4615, 1163.6061, 1678.451, 1601.6831, 204.9355, 2125.7391, 1152.3235, 154.7049, 1408.1905, 2925.1796, 1269.9912, 2313.0633, 1430.0, 2584.48, 3113.8404, 37.1795, 3596.0, 272.0, 1688.25, 2869.4634, 2725.1414, 4183.9846, 1655.85]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

