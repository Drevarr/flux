created: 20230215221053000
creator: Drevarr
modified: 20230705163519286
modifier: drevarr
tags: ChartData
title: 202302152210_aegis_ChartData
type: text/vnd.tiddlywiki


const names = ["Belvyn Brightblade", "\u00c9\u00efbhear", "Drevarr Moonwillow", "Kosair", "Sister Elon\u00edth", "Zaylen Harker", "Ark Darkness", "Blanco Padre Guard", "Sister Elon\u00edth", "Sygaldry Verdandi", "Ravioli Fetabringer", "Bella Sassy", "Johosh The Great"];
const professions = ["Firebrand", "Scrapper", "Scrapper", "Firebrand", "Dragonhunter", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Aegis per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[164.5644, 619.244, 0.0, 15.3504], [77.1584, 214.56, 0.7589, 105.0912, 16.4934, 18.7278, 17.1907, 26.3435, 0.0, 42.2188, 30.949, 0.0, 37.7606, 64.5072, 49.5264, 16.3125, 13.9644, 10.395, 12.892, 30.8228, 0.6365, 21.05, 0.0, 4.6192], [165.77, 147.808, 5.1336, 49.4755, 16.3856, 24.696, 12.611, 34.9953, 0.0, 26.7306, 32.0616, 20.3519, 42.5318, 68.4936, 0.0, 60.9754, 21.0375, 0.6804, 41.1296, 12.276, 22.9226, 5.1051, 21.2942, 6.0606], [60.2186, 45.6182, 6.7906, 89.903, 115.3157, 0.0, 96.9302, 32.0625, 42.2658, 42.7928, 16.918, 110.4831, 18.2325, 147.1061, 0.0, 21.4087], [61.1842, 876.716], [450.8944, 731.292, 26.9179, 82.1837], [226.3514, 516.136, 0.0, 36.0144, 52.283, 95.3883, 14.1902, 16.9153, 0.0, 26.6708, 43.9493, 0.0, 45.4627, 91.1798, 1.6235, 100.1462, 43.515, 34.7004, 55.9598, 7.579, 71.5806, 13.4798, 0.0, 13.3661], [211.5828, 591.828, 49.9075, 161.0611, 16.0622, 58.3443, 46.0675, 32.3886, 11.4021, 0.9568, 42.5731, 0.2369, 23.1744, 69.3634, 0.0, 41.615, 13.8825, 9.6876, 51.7325, 6.622, 44.2292, 14.1749, 57.5335, 12.4488], [156.6418, 580.7174, 119.5502, 648.1671, 89.7211, 140.2583, 10.535, 133.952, 81.5448, 44.0794, 299.2224, 220.6291, 131.3414, 83.0025, 63.7308, 131.4274, 18.821, 182.722, 41.8618, 229.2061, 92.5977, 18.8698], [367.4066, 1339.212, 85.6642, 234.1526, 105.8596, 307.5681, 105.2198, 130.3865, 133.2644, 148.7824, 18.7685, 0.0, 48.2573, 64.6522, 0.0, 83.8733, 13.005, 5.9454, 89.9168, 13.519, 100.9669, 0.0, 167.0816, 11.0893], [630.2274, 1808.86, 202.9334, 340.4246, 105.8596, 210.2247, 50.6923, 115.5786, 105.0543, 67.5142, 87.4594, 30.0245, 87.8582, 114.2285, 0.0, 119.2493, 44.5275, 35.4132, 155.5785, 4.433, 92.8273, 70.7951, 127.7166, 52.9565], [1281.8542, 2017.46, 261.6797, 579.3005, 323.0766, 497.8302, 76.343, 232.2665, 144.7402, 156.8554, 75.5131, 150.6336, 179.0256, 68.6938, 56.97, 33.5826, 64.7262, 4.114, 77.4459, 181.3429, 75.8271, 26.9287], [1194.1468, 2396.516, 175.2566, 664.9085, 365.442, 519.1305, 117.0187, 252.7867, 106.4381, 138.9752, 100.489, 178.1732, 239.1734, 242.808, 192.3811, 163.35, 103.3722, 152.8065, 23.32, 243.769, 63.1839, 214.9937, 59.3396, 40.9664]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

