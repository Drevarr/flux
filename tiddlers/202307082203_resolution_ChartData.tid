created: 20230708220324000
creator: Drevarr
tags: ChartData
title: 202307082203_resolution_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaedy Zae", "Enter Effore", "Shandalar V Basing", "Crusader Siolith", "Aronorf Xideliesi", "Klenga", "Sygaldry Verdandi", "Gabe Malhorn", "Koralia Danai", "Tika Fiery", "Bella Sassy"];
const professions = ["Druid", "Firebrand", "Firebrand", "Willbender", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resolution per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[0.0, 41.3873, 4.801, 0.0, 45.9762, 87.3132, 26.8063, 0.0, 35.4705, 12.915, 16.0877, 0.0, 13.3087, 31.675, 11.077, 0.0, 123.444], [34.1659, 23.6045, 64.5645, 10.701, 78.4556, 68.9062, 66.7534, 94.4566, 16.2238], [29.2307, 70.9651, 333.585, 96.9667, 182.7504, 0.0], [186.4843, 25.0884, 17.2598, 7.4096, 98.7589, 58.5817, 0.0, 34.6905, 38.1915, 38.5434, 95.7075, 35.1619, 58.8491, 52.2209, 225.369], [88.5881, 152.5451, 61.2084, 0.0, 0.0, 160.1044, 0.0, 73.554, 64.7226, 91.379, 0.0, 86.0475, 58.2552, 173.6471, 51.0098], [63.8537, 221.7923, 64.73, 21.1033, 39.5789, 190.9128, 228.4174, 43.3559, 136.734, 33.1731, 72.8494, 66.6887], [123.5192, 284.9603, 88.5091, 10.7951, 323.466, 47.8158, 97.5195, 82.2317, 134.878, 129.2688, 123.7687, 56.0628, 148.6332, 0.0], [335.2048, 106.9453, 75.2965, 119.3835, 319.0325, 152.2962, 94.6305, 176.1825, 73.0067, 129.1802, 168.8739, 191.3362, 122.8162, 253.9251, 136.9728], [220.3436, 340.5593, 79.0877, 86.91, 51.3331, 383.0923, 144.077, 42.5215, 186.927, 99.3348, 133.9443, 88.7971, 101.2987, 111.1234, 253.3209, 148.603], [180.0913, 253.1549, 77.4021, 19.8601, 85.2317, 131.015, 220.9504, 157.2371, 110.0775, 126.364, 105.9584, 139.3587, 149.7038, 216.63, 252.2736, 37.062, 488.376], [99.4213, 330.8164, 90.4806, 53.758, 174.6955, 284.6953, 183.7761, 104.6275, 161.3235, 109.427, 60.3527, 113.3652, 156.555, 103.6483, 228.7501, 118.494, 865.026]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

