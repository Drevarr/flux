created: 20230130220929000
creator: Drevarr
modified: 20230705163518383
modifier: drevarr
tags: ChartData
title: 202301302209_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Zaidy Sagemist", "Sygaldry Verdandi", "Doctor House", "Raziel Umbra", "Arkitrix", "Black Raspberry Pie", "Bambiae", "\u00c2 R K", "Ryvalia Fazebringer", "Zaylen Harker", "Gavann", "Demon Sekhmet", "Koralia Danai", "Ravioli Fetabringer", "Bella Lunabringer", "Jeckyll Mbs", "Xanvias Einzbern", "Newtype Khan"];
const professions = ["Vindicator", "Firebrand", "Firebrand", "Chronomancer", "Firebrand", "Chronomancer", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Firebrand", "Berserker", "Berserker", "Spellbreaker"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Top Output in Seconds for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[139.0189, 52.92, 18.4294, 0.0, 0.0, 0.0, 46.3266, 26.5843, 46.0718, 26.288, 0.0, 0.0, 52.6752, 0.0, 79.7764, 0.0, 0.0, 0.0, 26.3851, 0.0, 26.2642, 15.8627], [51.6764, 21.4581, 3.6627, 61.175, 79.0904, 94.668, 30.9249, 23.9864, 45.108, 34.0762, 13.7491, 7.1078, 14.4342, 20.9808, 10.6596, 3.6176, 6.6576, 25.4646, 12.3739, 20.0617], [241.0957, 357.7613], [150.6848, 212.2312, 32.1357, 0.0, 12.0364, 15.8931, 20.6765, 61.5656, 32.6122, 24.253, 3.799, 34.272, 20.7101, 17.0525, 6.5846, 13.2484, 11.9192, 9.3568, 5.2546, 6.469, 1.826, 13.0478, 15.796], [170.128, 160.4137, 43.7119, 0.0, 35.523, 13.8229, 13.7558, 40.8405, 25.8888, 19.1139, 15.6397, 38.724, 21.2242, 33.7032, 0.0, 32.4112, 18.832, 0.0, 0.0, 16.8941, 11.0074, 10.1308], [195.4042, 250.2675, 26.3012, 6.9564, 19.9254, 12.1667, 20.9328, 72.9948, 38.4854, 25.4251, 10.8147, 27.804, 25.1899, 21.8736, 6.9274, 13.9435, 13.8932, 20.7665, 11.4793, 3.6777, 13.1271, 13.3286, 10.9972], [213.3891, 236.4862, 38.4331, 6.6836, 14.6961, 11.4978, 19.224, 66.8992, 40.031, 39.7606, 11.7298, 29.82, 25.043, 26.4269, 4.4198, 25.1065, 11.2612, 19.819, 10.6305, 7.9401, 3.5861, 13.1414, 18.3954], [406.3629, 105.84, 81.7746, 7.7475, 44.0882, 25.6711, 39.3878, 139.4368, 78.2846, 39.6704, 0.0], [232.3462, 241.4475, 52.3246, 0.0, 27.8594, 5.6056, 29.3914, 74.3663, 52.2413, 44.8095, 12.7835, 41.748, 23.6477, 25.7573, 7.1619, 20.0361, 11.9004, 26.0963, 13.2982, 14.2582, 13.16, 14.8075, 27.6597], [272.2048, 36.3825, 73.4397, 0.0, 25.7407, 14.1414, 39.9005, 72.3852, 75.6571, 46.7029, 25.983, 52.668, 44.2843, 39.0154, 0.0, 27.1918, 24.5904, 31.5445, 6.7299, 27.2338, 22.5201, 31.7304, 35.8577], [207.0701, 368.7863, 53.436, 41.8793, 34.3025, 39.0461, 26.2111, 26.8162, 32.8182, 14.8356, 40.992, 44.1374, 38.7029, 6.9093, 35.8196, 24.534, 30.518, 25.5252, 7.1857, 28.5243, 10.7453, 26.3934], [318.8685, 346.185, 115.2068, 0.0, 37.3262, 7.8033, 67.6685, 184.5443, 0.0, 42.3752, 9.8441, 38.724, 53.0237, 15.8918, 0.0, 47.964, 0.0, 15.8315, 0.0, 0.0, 45.4349, 13.6843, 0.0], [271.7187, 320.2762, 76.5885, 7.2565, 19.8803, 18.1545, 66.1306, 180.125, 25.5024, 57.4319, 12.5894, 101.472, 40.5389, 68.2546, 14.6386, 32.7496, 30.2022, 21.8874, 26.0079, 7.3202, 26.5824, 22.1278], [299.9114, 445.9613, 53.9916, 4.9922, 54.9074, 34.621, 78.0922, 115.8164, 51.7003, 56.5303, 12.5062, 26.04, 44.7984, 74.1024, 0.0, 60.967, 19.5332, 28.4651, 24.4339, 37.4182, 3.8329, 37.7021, 33.1917], [409.2794, 388.6312, 76.9589, 0.0, 51.7068, 29.939, 55.3651, 103.3204, 84.2352, 49.9486, 12.3953, 63.0, 41.4936, 45.7114, 7.9376, 47.964, 14.852, 22.701, 32.2956, 18.86, 3.8329, 40.2667, 36.3242], [502.6067, 534.7125, 0.0, 9.1661, 115.1343, 51.3422, 79.3738, 104.3871, 122.6434, 19.4746, 30.3089, 90.384, 71.7509, 37.5869, 24.6246, 47.8822, 32.618, 51.4819, 13.8034, 0.0, 0.2632, 1.9843, 28.6595], [439.9024, 491.715, 163.364, 0.0, 80.2424, 34.5891, 67.8394, 300.0559, 130.6032, 29.1217, 16.2498, 115.584, 102.9629, 102.8059, 0.0, 53.9748, 36.3028, 16.2658, 16.4105, 9.4677, 35.2523, 18.9634, 86.1118], [1149.5792, 1048.4775, 213.3734, 20.3236, 160.7102, 100.4867, 215.736, 461.4369, 165.0701, 88.1765, 64.0286, 249.9, 359.7826, 162.4003, 18.4549, 175.5817, 88.266, 94.9099, 18.8357, 16.0687, 51.505, 49.7203, 133.1001]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

