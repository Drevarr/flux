created: 20230412220340000
creator: Drevarr
modified: 20230705163525384
modifier: drevarr
tags: ChartData
title: 202304122203_heal_ChartData
type: text/vnd.tiddlywiki


const names = ["Tribal Z", "Tootsie Pop Rocks", "Solus Sanctus", "Mac Chiato", "Johoshua", "Zadie Miststep", "Demon Staph", "Drevarr Moonwillow"];
const professions = ["Tempest", "Scrapper", "Firebrand", "Tempest", "Scrapper", "Tempest", "Druid", "Scrapper"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Healing per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[638.9545, 1205.4167, 2321.0734, 219.6667, 561.6089, 1409.1667, 735.6667, 672.6349, 456.455], [455.4493, 49.8485, 10.2759, 439.3905, 103.4772, 182.7398, 428.8128, 3.4255, 354.6397, 179.9467, 1220.7574, 20.0, 1513.287, 409.9358, 0.0, 343.4307, 65.1667], [412.3739, 88.9394, 142.0, 159.3571, 121.4813, 677.7092, 354.0288, 93.8723, 331.4793, 765.0133, 491.6618, 25.3636, 963.713, 706.0275, 22.8788, 166.9109, 368.0714, 235.8148, 183.3333, 603.6526], [694.5043, 253.2121, 11.2241, 661.8333, 169.3361, 1987.1786, 910.1317, 151.617, 1004.9138, 1035.8235, 2809.8519, 1638.4037, 0.0, 606.8069, 492.4762, 200.0741, 250.873, 1080.5942], [1421.4928, 124.8485, 251.8103, 1003.0, 201.5851, 1868.6173, 905.3909, 112.9574, 1047.2724, 617.72, 1933.4118, 664.4091, 3164.3796, 1849.0459, 42.3636, 309.5941, 313.9762, 931.9444, 684.6349, 1856.8749], [1494.6899, 608.3939, 528.069, 1262.4857, 448.8714, 685.1378, 1452.6029, 120.2979, 1470.5828, 2601.4667, 2207.6912, 1948.2407, 2133.5138, 54.5758, 697.8465, 1057.6667, 1001.6667, 851.6984, 1869.5661], [1721.4232, 607.2424, 37.569, 1087.9238, 374.3154, 2633.8827, 1586.7284, 76.0851, 943.8259, 2177.08, 2243.6765, 153.8182, 184.75, 1270.4954, 34.1667, 510.6287, 1726.5476, 1016.8148, 752.6349, 2158.9532], [1636.8725, 298.8182, 413.0517, 1180.0571, 350.7261, 3065.6582, 1258.9424, 185.7021, 1853.519, 3953.0, 2439.2132, 1154.0455, 3672.3241, 3091.9908, 26.4848, 637.0792, 1190.7143, 1379.0556, 492.254, 2591.1801]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

