created: 20230206215940000
creator: Drevarr
modified: 20230705163518803
modifier: drevarr
tags: ChartData
title: 202302062159_resistance_ChartData
type: text/vnd.tiddlywiki


const names = ["Oo Dads Mad", "Mirrors Dancer", "Ace Rages", "Zaylen Harker", "Reyga Bannerclaw", "Gavann", "Raziel Umbra", "Sygaldry Verdandi", "Hyde En Sikh", "Ravioli Fetabringer", "Grasszanine", "Koralia Danai", "Demon Sekhmet", "\u00c2 R K", "Bella Sassy", "Newtype Khan", "Arcanophage Farra", "Johosh The Great"];
const professions = ["Spellbreaker", "Chronomancer", "Berserker", "Firebrand", "Spellbreaker", "Firebrand", "Chronomancer", "Firebrand", "Chronomancer", "Firebrand", "Spellbreaker", "Firebrand", "Berserker", "Firebrand", "Firebrand", "Spellbreaker", "Spellbreaker", "Firebrand"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Resistance per Second for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[50.336, 4.563, 27.4541, 11.1296, 0.0, 24.288], [35.937, 14.2506, 41.7878, 35.2148, 0.0, 22.816], [58.685, 19.7942, 17.7378, 0.0, 30.6912, 0.0, 16.6347, 10.6392, 10.5639, 0.0, 0.0, 29.6771, 25.5118, 10.6142, 12.7196, 0.0], [48.763, 49.0698, 26.9232, 66.4298, 32.752, 22.517, 2.1686], [37.4774, 44.3201, 53.8325, 25.9548, 32.641, 52.5189, 39.312, 6.5553, 16.5213], [87.241, 32.8536, 46.7933, 55.9088, 0.0, 64.3264, 17.9353, 17.8425], [49.852, 24.4998, 45.4282, 56.2567, 29.3664, 7.4404, 11.1722, 31.7117, 12.6629, 40.272, 0.0, 13.1527, 17.8178, 26.5075, 6.5853, 0.0], [78.045, 15.6546, 27.5299, 71.0382, 0.0, 28.7776, 33.3252, 40.2692, 36.1046, 15.3125, 33.4334, 0.0, 0.0, 32.5206, 1.741, 6.9762, 0.0], [55.781, 27.3078, 37.8442, 49.4745, 3.3884, 42.4672, 20.0891, 17.019, 32.1922, 26.3237, 47.0523, 7.0444, 7.0766, 14.2356, 16.3426, 14.163, 6.9339], [92.081, 23.166, 61.8096, 46.2574, 0.0, 76.9856, 4.3468, 33.242, 40.5662, 14.0393, 72.2442], [33.345, 133.8576, 191.6378, 0.0, 32.6048, 82.471, 53.3628], [108.779, 22.6044, 39.7402, 129.1208, 0.0, 48.8704, 52.5136, 34.834, 42.6941, 55.6754, 38.4017, 0.0, 7.4841, 35.3864, 7.6378, 0.0, 6.3249], [161.293, 55.1772, 89.7187, 107.2963, 0.0, 25.8336, 22.9869, 53.8843, 19.9056, 27.7001, 39.1031, 4.1694, 1.9636, 32.4894, 3.4258], [73.084, 25.974, 71.3654, 143.1197, 7.1135, 105.6896, 40.7264, 39.83, 35.0064, 22.3321, 70.2569, 7.4001, 0.0, 40.7753, 30.4949, 8.7203, 29.0232], [141.207, 53.9838, 62.3405, 138.0766, 0.0, 72.3488, 37.8286, 24.8423, 54.6374, 39.7435, 56.9887, 7.2223, 25.1199, 37.4423, 19.4875, 14.614, 0.0], [103.455, 64.1628, 64.2365, 134.7725, 19.3208, 31.8688, 34.8524, 45.4572, 56.1475, 39.5027, 72.3611, 0.0, 20.3034, 77.47, 62.0568, 39.963, 20.8365], [36.179, 54.1944, 132.4166, 202.7674, 0.0, 65.5776, 52.7094, 40.4613, 73.3762, 0.0, 94.2798, 0.0, 0.0, 90.2415, 56.497, 0.0, 0.0], [194.689, 59.3892, 100.1846, 163.466, 0.0, 93.0304, 39.0817, 52.5393, 52.7155, 51.6838, 92.994, 7.2816, 7.3359, 59.7457, 35.1, 0.0, 18.4875]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{id: 'dataZoomX', type: 'slider', xAxisIndex: [0], left: 10, height: 10, filterMode: 'empty', start: 0, end: 100},{id: 'dataZoomY', type: 'slider', yAxisIndex: [0], filterMode: 'empty', start: 0, end: 100}],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

