created: 20230626012458000
creator: Drevarr
modified: 20230705163538099
modifier: drevarr
tags: ChartData
title: 202306260124_alacrity_ChartData
type: text/vnd.tiddlywiki


const names = ["Elon The Archmagus", "Momomeko", "Drevarr Moonwillow", "Morton Saltbringer", "Versimon", "Tegan Parker", "Eibh\u00ebar", "Venomina The Siren", "Artakama Nahid", "Primal Clone", "Miphest\u00f6"];
const professions = ["Tempest", "Chronomancer", "Scrapper", "Chronomancer", "Chronomancer", "Tempest", "Chronomancer", "Tempest", "Tempest", "Chronomancer", "Tempest"];
const ProfessionColor = {"Warrior": "#FFD166", "Berserker": "#B39247", "Spellbreaker": "#665429", "Bladesworn": "#19150A", "Guardian": "#72C1D9", "Dragonhunter": "#508798", "Firebrand": "#2E4D57", "Willbender": "#0B1316", "Revenant": "#D16E5A", "Herald": "#924D3F", "Renegade": "#542C24", "Vindicator": "#2A1612", "Engineer": "#D09C59", "Scrapper": "#926D3E", "Holosmith": "#533E24", "Mechanist": "#2A1F12", "Ranger": "#8CDC82", "Druid": "#629A5B", "Soulbeast": "#385834", "Untamed": "#1C2C1A", "Thief": "#C08F95", "Daredevil": "#866468", "Deadeye": "#4D393C", "Specter": "#261D1E", "Elementalist": "#F68A87", "Tempest": "#AC615F", "Weaver": "#623736", "Catalyst": "#311C1B", "Mesmer": "#B679D5", "Chronomancer": "#7F5595", "Mirage": "#493055", "Virtuoso": "#24182B", "Necromancer": "#52A76F", "Reaper": "#39754E", "Scourge": "#21432C", "Harbinger": "#08110B"};
option = {
  title: [
    {text: 'Alacrity per Fight for all Fights Present', left: 'center'},
    {text: 'Output in seconds across all fights \nupper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR', borderColor: '#999', borderWidth: 1, textStyle: {fontSize: 10}, left: '1%', top: '90%'}
  ],
dataset: [
    {
      // prettier-ignore
      source: 
[[71.5968, 34.012, 54.5328, 7.7381, 16.8609, 37.0022, 9.5658, 5.3064], [14.6362, 0.0, 21.5741, 0.0, 40.1184, 25.8312, 74.8867, 28.1952, 68.0982, 39.4925], [27.4192, 12.6749, 32.5899, 25.2762, 13.9978, 81.317, 23.6477, 11.1216, 17.2656, 0.0, 16.3901, 12.9043, 8.871, 10.0742, 27.8545, 19.5854], [0.0, 4.3805, 12.8772, 89.0742, 37.4228, 105.029, 23.0832, 1.2936, 8.807, 0.0, 0.0, 33.84, 27.6154, 54.7642, 45.8062, 38.8814], [133.151, 40.81, 61.7299, 110.8824, 100.5578, 111.8396, 0.0], [0.0, 16.4074, 33.8247, 262.1186, 45.3436, 204.1301, 5.1408, 32.0544, 27.8784, 0.0, 12.7613, 9.0691, 29.8635, 0.0, 13.7798, 19.6498], [65.1015, 69.1027, 61.1667, 156.7608, 47.0317, 41.8828, 12.8822, 24.6288, 39.3782, 28.1232, 62.8296, 7.1697, 44.9222, 42.8564, 24.0235], [113.4553, 23.3021, 46.7901, 316.3166, 17.2181, 113.9211, 12.3984, 53.4408, 16.8854, 50.226, 53.2224, 34.3363, 66.836, 0.0, 23.5563, 96.1906], [0.0, 49.2221, 36.2502, 409.0363, 11.6605, 427.4618, 29.5142, 4.4352, 40.7088, 12.1766, 30.5688, 27.7369, 39.1142, 21.9549, 7.1395], [62.7527, 58.32, 57.9915, 249.7236, 91.6481, 206.5786, 58.4842, 23.604, 65.4826, 40.4813, 79.1405, 72.2133, 0.528, 86.6398, 32.8997], [254.0235, 5.4432, 52.9641, 412.6819, 51.8361, 376.3004, 86.5872, 13.356, 6.2093, 48.95, 51.8112, 0.0, 7.595, 0.2323, 74.2507, 31.1952]]
    },
    {
      transform: {
        type: 'boxplot',
        config: {
          itemNameFormatter: function (params) {
            return names[params.value];
          }
        }
      },
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  dataZoom: [{type: 'slider', show: true, yAxisIndex: [0], start: 100, end: 50 },{type: 'inside', yAxisIndex: [0], start: 100, end: 50 },],
  tooltip: {trigger: 'item'},
  grid: {left: '20%', right: '10%', bottom: '15%'},
  yAxis: {type: 'category', boundaryGap: true, nameGap: 30, splitArea: {show: true}, splitLine: {show: true}},
  xAxis: {type: 'value', name: 'Sec', splitArea: {show: true}},
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1,
      tooltip: {trigger: 'item',
          formatter: function (params) {
            console.log(params.value);
            //Low = params.value[1]
          return `<u><b>${params.value[0]}</b></u>
    <table>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Low   :</td>
        <td style="color:blue;"align="right"><b>${params.value[1].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q1    :</td>
        <td style="color:blue;"align="right"><b>${params.value[2].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q2    :</td>
        <td style="color:blue;"align="right"><b>${params.value[3].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">Q3    :</td>
        <td style="color:blue;"align="right"><b>${params.value[4].toFixed(2)}</b></td>
      </tr>
      <tr>
      	<td align="right">&#x2022;</td>
        <td align="left">High  :</td>
        <td style="color:blue;"align="right"><b>${params.value[5].toFixed(2)}</b></td>
      </tr>  
    </table>`;              
        },    
        axisPointer: {type: 'shadow'}},      
      itemStyle: {
        borderColor: function (seriesIndex) {
          let myIndex = names.indexOf(seriesIndex.name);
          return ProfessionColor[professions[myIndex]];
                },
        borderWidth: 2
      },
      encode:{tooltip: [ 1, 2, 3, 4, 5]},
      },
    {
      name: 'outlier',
      type: 'scatter',
      encode: { x: 1, y: 0 },
      datasetIndex: 2,
    }
  ]
};

